LABEL_200:
  if (sub_93B80())
  {
    v125 = (os_log_t *)sub_138E8(17);
    v126 = *v125;
    if (*v125)
    {
      if (os_log_type_enabled(*v125, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&buf[4] = "Device_Codec_Aspen.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1453;
        _os_log_impl( &dword_0,  v126,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d No input sources are present - no builtin mic on codec",  buf,  0x12u);
      }
    }
  }

  else
  {
    LODWORD(__p) = (*(uint64_t (**)(uint64_t *))(*a1 + 120))(a1);
    *(void *)&v180 = 0x696E707473736323LL;
    DWORD2(v180) = 0;
    sub_90764((uint64_t)buf, (AudioObjectID *)&__p, (AudioObjectPropertyAddress *)&v180, 0, 0LL);
    v127 = *(_DWORD *)buf;
    if (*(_DWORD *)buf || !buf[32])
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_4865A0;
      exception[2] = v127;
    }

    v183 = 0uLL;
    v184 = 0LL;
    v128 = *(void **)&buf[8];
    sub_7A5B8( &v183,  *(const void **)&buf[8],  *(uint64_t *)&buf[16],  (uint64_t)(*(void *)&buf[16] - *(void *)&buf[8]) >> 2);
    if (v128) {
      operator delete(v128);
    }
    v129 = atomic_load((unsigned __int8 *)&qword_48F588);
    if ((v129 & 1) == 0 && __cxa_guard_acquire(&qword_48F588))
    {
      qmemcpy(buf, "cimicimscimfcimlcimtcimu1imi2imi3imi4imi", 40);
      sub_1873F8(qword_48F570, buf, 0xAuLL);
      __cxa_guard_release(&qword_48F588);
    }

    v130 = v183;
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>(v183, *((void *)&v183 + 1), buf);
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>(qword_48F570[0], unk_48F578, buf);
    v180 = 0uLL;
    v181 = 0LL;
    sub_187478( (unsigned int **)buf,  (unsigned int *)v130,  *((unsigned int **)&v130 + 1),  (unsigned int *)qword_48F570[0],  unk_48F578,  (uint64_t)&v180,  0LL);
    v131 = v180;
    if ((void)v180)
    {
      *((void *)&v180 + 1) = v180;
      operator delete((void *)v180);
    }

    if ((void)v130) {
      operator delete((void *)v130);
    }
    if (*((void *)&v131 + 1) != (void)v131
      && (sub_2E2510(a1[83], 1768778083LL) || sub_2E2510(a1[83], 1768778033LL)))
    {
      v132 = (os_log_t *)sub_138E8(17);
      v133 = *v132;
      if (*v132 && os_log_type_enabled(*v132, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&buf[4] = "Device_Codec_Aspen.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1405;
        _os_log_impl(&dword_0, v133, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating an internal microphone port", buf, 0x12u);
      }

      __p = 0LL;
      LOBYTE(v160) = 1;
      sub_D9948((uint64_t)&theString, (uint64_t)@"device-name-localized");
      if ((_BYTE)v151 && theString)
      {
        *(void *)buf = CFStringCreateMutableCopy(0LL, 0LL, theString);
        buf[8] = 1;
        sub_D9A0C((uint64_t)&__p, (uint64_t)buf);
        sub_D9A64((uint64_t)buf);
        if (__p) {
          CFStringAppend((CFMutableStringRef)__p, @" ");
        }
      }

      else
      {
        v134 = (os_log_t *)sub_138E8(17);
        v135 = *v134;
        if (*v134 && os_log_type_enabled(*v134, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&buf[4] = "Device_Codec_Aspen.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1415;
          _os_log_impl( &dword_0,  v135,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Could not retrieve localized device name",  buf,  0x12u);
        }

        *(void *)buf = CFStringCreateMutableCopy(0LL, 0LL, &stru_486F70);
        buf[8] = 1;
        sub_D9A0C((uint64_t)&__p, (uint64_t)buf);
        sub_D9A64((uint64_t)buf);
      }

      sub_1F0A70((uint64_t)buf, 1886216809LL);
      if (__p) {
        CFStringAppend((CFMutableStringRef)__p, *(CFStringRef *)buf);
      }
      sub_19DFC((uint64_t)buf);
      v136 = sub_138E8(17);
      if ((*(_BYTE *)(v136 + 8) & 1) != 0)
      {
        v137 = *(os_log_s **)v136;
        if (*(void *)v136)
        {
          if (os_log_type_enabled(*(os_log_t *)v136, OS_LOG_TYPE_DEBUG))
          {
            sub_48E98(&v183, (CFStringRef)__p);
            v138 = v184 >= 0 ? &v183 : (__int128 *)v183;
            *(_DWORD *)buf = 136315650;
            *(void *)&buf[4] = "Device_Codec_Aspen.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1420;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = v138;
            _os_log_impl(&dword_0, v137, OS_LOG_TYPE_DEBUG, "%25s:%-5d Localized microphone name: '%s'", buf, 0x1Cu);
            if (SHIBYTE(v184) < 0) {
              operator delete((void *)v183);
            }
          }
        }
      }

      v139 = CFRetain(__p);
      *(void *)&v183 = v139;
      BYTE8(v183) = 1;
      *(void *)buf = v139;
      buf[8] = 1;
      if (v139) {
        CFRetain(v139);
      }
      *(void *)&buf[16] = 0LL;
      buf[24] = 1;
      *(void *)&buf[32] = 0LL;
      buf[40] = 1;
      sub_19DFC((uint64_t)&v183);
      v183 = 0uLL;
      v184 = 0LL;
      v140 = sub_33341C();
      v141 = operator new(0x260uLL);
      v141[1] = 0LL;
      v141[2] = 0LL;
      *v141 = off_4753F8;
      *(void *)&v180 = CFStringCreateWithCString(0LL, "Built-In Microphone", 0x600u);
      BYTE8(v180) = 1;
      sub_38ECC0((uint64_t)(v141 + 3), (uint64_t)a1, (uint64_t)&v183, (uint64_t)buf, (uint64_t)&v180, v140);
      sub_19DFC((uint64_t)&v180);
      *(void *)&v179 = v141 + 3;
      *((void *)&v179 + 1) = v141;
      sub_AFDAC((uint64_t)&v179, v141 + 13, (uint64_t)(v141 + 3));
      v149 = v179;
      v179 = 0uLL;
      sub_3711D4((uint64_t)a1, (void ***)&v149);
      v142 = (std::__shared_weak_count *)*((void *)&v149 + 1);
      if (*((void *)&v149 + 1))
      {
        v143 = (unint64_t *)(*((void *)&v149 + 1) + 8LL);
        do
          v144 = __ldaxr(v143);
        while (__stlxr(v144 - 1, v143));
        if (!v144)
        {
          ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
          std::__shared_weak_count::__release_weak(v142);
        }
      }

      v145 = (std::__shared_weak_count *)*((void *)&v179 + 1);
      if (*((void *)&v179 + 1))
      {
        v146 = (unint64_t *)(*((void *)&v179 + 1) + 8LL);
        do
          v147 = __ldaxr(v146);
        while (__stlxr(v147 - 1, v146));
        if (!v147)
        {
          ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
          std::__shared_weak_count::__release_weak(v145);
        }
      }

      if ((void)v183) {
        operator delete((void *)v183);
      }
      sub_19DFC((uint64_t)&buf[32]);
      sub_19DFC((uint64_t)&buf[16]);
      sub_19DFC((uint64_t)buf);
      sub_D9A9C((uint64_t)&theString);
      sub_D9A64((uint64_t)&__p);
    }
  }

void sub_185DA4(_Unwind_Exception *a1)
{
  if (*(void *)(v1 - 144)) {
    operator delete(*(void **)(v1 - 144));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1861F4(uint64_t a1)
{
  *(void *)&inAddress.mSelector = 0x6F7574706A61636BLL;
  inAddress.mElement = 0;
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)&qword_48F558);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_48F558))
  {
    AudioObjectID v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
    byte_48F550 = AudioObjectHasProperty(v3, &inAddress) != 0;
    __cxa_guard_release(&qword_48F558);
  }

  return byte_48F550;
}

void sub_18628C(_Unwind_Exception *a1)
{
}

BOOL sub_1862A4(uint64_t a1)
{
  if ((sub_93B80() & 1) != 0) {
    return 0LL;
  }
  *(void *)&v7.mSelector = 0x696E70746A61636BLL;
  v7.mElement = 0;
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)&qword_48F568);
  v4 = &qword_48F000;
  if ((v3 & 1) == 0)
  {
    int v5 = __cxa_guard_acquire(&qword_48F568);
    v4 = &qword_48F000;
    if (v5)
    {
      AudioObjectID v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
      byte_48F560 = AudioObjectHasProperty(v6, &v7) == 1;
      __cxa_guard_release(&qword_48F568);
      v4 = &qword_48F000;
    }
  }

  return *((_BYTE *)v4 + 1376) != 0;
}

void sub_186358(_Unwind_Exception *a1)
{
}

uint64_t sub_186370(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)&qword_48F598);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_48F598))
  {
    BOOL v3 = sub_1861F4(a1)
      && sub_1862A4(a1)
      && MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 1;
    byte_48F590 = v3;
    __cxa_guard_release(&qword_48F598);
  }

  return byte_48F590;
}

void sub_186410(_Unwind_Exception *a1)
{
}

void sub_186428(os_unfair_lock_s *a1)
{
  if (!a1)
  {
    v2 = (os_log_t *)sub_138E8(13);
    BOOL v3 = *v2;
    if (*v2)
    {
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
      {
        int v4 = 136315394;
        int v5 = "Device_Codec_Aspen.cpp";
        __int16 v6 = 1024;
        int v7 = 1630;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: SystemSettingsManager passed clientData as NULL.",  (uint8_t *)&v4,  0x12u);
      }
    }
  }

  sub_1864F4(a1);
}

void sub_1864F4(os_unfair_lock_s *a1)
{
  v2 = operator new(4uLL);
  *(void *)buf = v2;
  _DWORD *v2 = 1885888867;
  *(void *)&buf[8] = v2 + 1;
  *(void *)&buf[16] = v2 + 1;
  strcpy(&buf[24], "cwdv");
  buf[32] = 0;
  LODWORD(v54) = 3;
  v56 = 0LL;
  uint64_t v57 = 0LL;
  v55 = (uint64_t *)&v56;
  int v58 = 44739242;
  CFTypeRef v59 = 0LL;
  sub_3710DC(v51, (uint64_t)a1, (uint64_t)buf);
  if (v59) {
    CFRelease(v59);
  }
  sub_32C8C(v56);
  if (*(void *)buf)
  {
    *(void *)&buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }

  if (v52 >= 2)
  {
    v26 = (os_log_t *)sub_138E8(13);
    v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      sub_23FE8((uint64_t)&__p, a1 + 2);
      v28 = (__val & 0x8000000000000000LL) == 0LL ? &__p : (void **)__p;
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "Device_Codec_Aspen.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1638;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = v28;
      _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Encountered more than one Hearing Aid Compliance port in device %s",  buf,  0x1Cu);
      if (SHIBYTE(__val) < 0) {
        operator delete(__p);
      }
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Encountered more than one Hearing Aid Compliance port in device %s");
  }

  if (v52)
  {
    sub_B8CBC(&v46, (uint64_t *)(v51[1] + 16), "", 1642);
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v46 + 152LL))(v46);
    (*(void (**)(uint64_t))(*(void *)v46 + 544LL))(v46);
    if (v3 != (*(unsigned int (**)(uint64_t))(*(void *)v46 + 152LL))(v46))
    {
      int v4 = operator new(4uLL);
      _DWORD *v4 = 1886545251;
      *(void *)buf = v4;
      *(void *)&buf[8] = v4 + 1;
      *(void *)&buf[16] = v4 + 1;
      strcpy(&buf[24], "cwdv");
      buf[32] = 0;
      LODWORD(v54) = 3;
      v56 = 0LL;
      uint64_t v57 = 0LL;
      v55 = (uint64_t *)&v56;
      int v58 = 44739242;
      CFTypeRef v59 = 0LL;
      sub_3710DC((uint64_t *)&__p, (uint64_t)a1, (uint64_t)buf);
      if (v59) {
        CFRelease(v59);
      }
      sub_32C8C(v56);
      if (*(void *)buf)
      {
        *(void *)&buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }

      if (__val != 1)
      {
        v30 = (os_log_t *)sub_138E8(13);
        v31 = *v30;
        if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
        {
          std::to_string(&v45, __val);
          int size = (char)v45.__r_.__value_.__s.__size_;
          std::string::size_type v33 = v45.__r_.__value_.__r.__words[0];
          sub_23FE8((uint64_t)&v42, a1 + 2);
          v34 = &v45;
          if (size < 0) {
            v34 = (std::string *)v33;
          }
          if (v44 >= 0) {
            v35 = &v42;
          }
          else {
            v35 = v42;
          }
          *(_DWORD *)buf = 136315906;
          *(void *)&buf[4] = "Device_Codec_Aspen.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1651;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = v34;
          *(_WORD *)&buf[28] = 2080;
          *(void *)&buf[30] = v35;
          _os_log_impl( &dword_0,  v31,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Encountered %s receiver ports in device %s (expected 1)",  buf,  0x26u);
          if (SHIBYTE(v44) < 0) {
            operator delete(v42);
          }
        }

        v36 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v36, "Encountered %s receiver ports in device %s (expected 1)");
      }

      sub_B8CBC((uint64_t *)buf, (uint64_t *)(v49 + 16), "", 1656);
      if (v3) {
        uint64_t v5 = 0LL;
      }
      else {
        uint64_t v5 = 1919443299LL;
      }
      (*(void (**)(void, uint64_t))(**(void **)buf + 104LL))(*(void *)buf, v5);
      __int16 v6 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        int v7 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }

      uint64_t v40 = v46;
      v41 = v47;
      if (v47)
      {
        p_shared_weak_owners = (unint64_t *)&v47->__shared_weak_owners_;
        do
          unint64_t v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
      }

      sub_1873B0((uint64_t *)&v42, &v40);
      *(_DWORD *)buf = 1852011125;
      *(void *)&buf[8] = &buf[8];
      *(void *)&buf[16] = &buf[8];
      *(void *)&buf[24] = 0LL;
      uint64_t v11 = v44;
      if (v44)
      {
        v13 = (void **)v42;
        v12 = v43;
        uint64_t v14 = *v43;
        *(void *)(v14 + 8) = *((void *)v42 + 1);
        *v13[1] = v14;
        uint64_t v15 = *(void *)&buf[8];
        *(void *)(*(void *)&buf[8] + 8LL) = v12;
        void *v12 = v15;
        *(void *)&buf[8] = v13;
        v13[1] = &buf[8];
        *(void *)&buf[24] = v11;
        uint64_t v44 = 0LL;
      }

      sub_1873B0(&v37, (uint64_t *)(v49 + 16));
      *(_DWORD *)&buf[32] = 1886418288;
      uint64_t v54 = (uint64_t)&v54;
      v55 = &v54;
      v56 = 0LL;
      v16 = v39;
      if (v39)
      {
        uint64_t v18 = v37;
        v17 = v38;
        uint64_t v19 = *v38;
        *(void *)(v19 + 8) = *(void *)(v37 + 8);
        **(void **)(v18 + 8) = v19;
        uint64_t v20 = v54;
        *(void *)(v54 + 8) = v17;
        uint64_t *v17 = v20;
        uint64_t v54 = v18;
        *(void *)(v18 + 8) = &v54;
        v56 = v16;
        v39 = 0LL;
      }

      sub_EDEBC((uint64_t)&v45, (unsigned int *)buf, 2LL);
      for (uint64_t i = 40LL; i != -24; i -= 32LL)
        sub_85B80((uint64_t *)&buf[i]);
      sub_85B80(&v37);
      sub_85B80((uint64_t *)&v42);
      if (v41) {
        std::__shared_weak_count::__release_weak(v41);
      }
      uint64_t v22 = sub_546E0();
      sub_101870(v22, &v45, 0);
      sub_EDF34((void *)v45.__r_.__value_.__l.__size_);
      sub_85B80((uint64_t *)&__p);
    }

    v23 = v47;
    if (v47)
    {
      p_shared_owners = (unint64_t *)&v47->__shared_owners_;
      do
        unint64_t v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }

  sub_85B80(v51);
}

void sub_186ACC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  sub_85B80(&a26);
  sub_7A768((uint64_t)&a24);
  sub_85B80(&a29);
  _Unwind_Resume(a1);
}

void sub_186C38(int a1, os_unfair_lock_s *a2)
{
  if (!a2)
  {
    int v4 = (os_log_t *)sub_138E8(13);
    uint64_t v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
      {
        int v6 = 136315394;
        int v7 = "Device_Codec_Aspen.cpp";
        __int16 v8 = 1024;
        int v9 = 1564;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: IAPManager passed clientData as NULL.",  (uint8_t *)&v6,  0x12u);
      }
    }
  }

  if (a1 == 1819176821) {
    sub_186D20(a2);
  }
}

void sub_186D20(os_unfair_lock_s *a1)
{
  v2 = operator new(4uLL);
  *(void *)__p = v2;
  _DWORD *v2 = 1886154613;
  *(void *)&__p[8] = v2 + 1;
  *(void *)&__p[16] = v2 + 1;
  strcpy(&__p[24], "cwdv");
  BYTE2(v23) = 0;
  LODWORD(v25) = 3;
  v27[0] = 0LL;
  v27[1] = 0LL;
  v26 = v27;
  int v28 = 44739242;
  CFTypeRef cf = 0LL;
  sub_3710DC((uint64_t *)v18, (uint64_t)a1, (uint64_t)__p);
  sub_EDD50(v20, v18);
  sub_85B80((uint64_t *)v18);
  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(v27[0]);
  if (*(void *)__p)
  {
    *(void *)&__p[8] = *(void *)__p;
    operator delete(*(void **)__p);
  }

  if (v21 != 1)
  {
    int v3 = (os_log_t *)sub_138E8(13);
    int v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
      {
        uint64_t v5 = v21;
        sub_2CA1C(v18, 1886154613LL);
        int v6 = v19;
        int v7 = (void **)v18[0];
        sub_23FE8((uint64_t)v16, a1 + 2);
        __int16 v8 = v18;
        if (v6 < 0) {
          __int16 v8 = v7;
        }
        if (v17 >= 0) {
          int v9 = v16;
        }
        else {
          int v9 = (void **)v16[0];
        }
        *(_DWORD *)__p = 136316418;
        *(void *)&__p[4] = "Device_Codec_Aspen.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 1615;
        *(_WORD *)&__p[18] = 2048;
        *(void *)&__p[20] = v5;
        *(_WORD *)&__p[28] = 2080;
        v23 = v8;
        __int16 v24 = 2080;
        unint64_t v25 = v9;
        LOWORD(v26) = 1024;
        *(_DWORD *)((char *)&v26 + 2) = 1;
        _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Found %lu ports of type '%s' in device %s (looking for exactly %d)",  __p,  0x36u);
        if (v17 < 0) {
          operator delete(v16[0]);
        }
        if (v19 < 0) {
          operator delete(v18[0]);
        }
      }
    }
  }

  for (uint64_t i = (uint64_t *)v20[1]; i != v20; uint64_t i = (uint64_t *)i[1])
  {
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)i[2] + 152LL))(i[2]);
    sub_17382C(i[2]);
    if (v11 != (*(unsigned int (**)(uint64_t))(*(void *)i[2] + 152LL))(i[2]))
    {
      uint64_t v12 = sub_546E0();
      v13 = (std::__shared_weak_count *)i[3];
      *(void *)__p = i[2];
      *(void *)&__p[8] = v13;
      if (v13)
      {
        p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
        do
          unint64_t v15 = __ldxr(p_shared_weak_owners);
        while (__stxr(v15 + 1, p_shared_weak_owners));
      }

      sub_1013F4(v12, (uint64_t *)__p);
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }

  sub_1BB88(v20);
}

void sub_186FB8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (v20 < 0) {
    operator delete(v19);
  }
  sub_1BB88(&a16);
  _Unwind_Resume(a1);
}

void *sub_18702C(void *result, uint64_t a2)
{
  if ((_DWORD)result == 1819176821)
  {
    if (!a2)
    {
      int v4 = (os_log_t *)sub_138E8(13);
      uint64_t v5 = *v4;
      if (*v4)
      {
        if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
        {
          int v6 = 136315394;
          int v7 = "Device_Codec_Aspen.cpp";
          __int16 v8 = 1024;
          int v9 = 1587;
          _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: IAPManager passed clientData as NULL.",  (uint8_t *)&v6,  0x12u);
        }
      }
    }

    int v3 = (void *)(a2 + 512);
    result = (void *)sub_67420(v3, (uint64_t)&qword_48F4A0);
    if ((_DWORD)result) {
      return sub_67564(v3, (unsigned int *)&qword_48F4A0);
    }
  }

  return result;
}

void *sub_187128(void *a1)
{
  v13[0] = &off_485A70;
  v13[3] = v13;
  unint64_t v10 = v9;
  sub_67F30((uint64_t)v13, v9);
  if (!v10)
  {
    uint64_t v12 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
    int v3 = a1 + 1;
LABEL_9:
    a1[6] = 0LL;
    *a1 = v3;
    goto LABEL_16;
  }

  if (v10 == v9)
  {
    uint64_t v12 = v11;
    (*(void (**)(void *, void *))(v9[0] + 24LL))(v9, v11);
    v2 = v12;
  }

  else
  {
    v2 = (void *)(*(uint64_t (**)(void))(*v10 + 16LL))();
    uint64_t v12 = v2;
  }

  a1[1] = 0LL;
  a1[2] = 0LL;
  int v3 = a1 + 1;
  if (!v2) {
    goto LABEL_9;
  }
  if (v2 == v11)
  {
    a1[6] = a1 + 3;
    (*(void (**)(void *))(v11[0] + 24LL))(v11);
  }

  else
  {
    a1[6] = (*(uint64_t (**)(void *))(*v2 + 16LL))(v2);
  }

  int v4 = v12;
  *a1 = v3;
  if (v4 == v11)
  {
    uint64_t v5 = 4LL;
    int v4 = v11;
  }

  else
  {
    if (!v4) {
      goto LABEL_16;
    }
    uint64_t v5 = 5LL;
  }

  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_16:
  int v6 = v10;
  if (v10 == v9)
  {
    uint64_t v7 = 4LL;
    int v6 = v9;
    goto LABEL_20;
  }

  if (v10)
  {
    uint64_t v7 = 5LL;
LABEL_20:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }

  return a1;
}

void sub_1872AC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v18 = a17;
  if (a17 == &a14)
  {
    uint64_t v19 = 4LL;
    uint64_t v18 = &a14;
  }

  else
  {
    if (!a17) {
      goto LABEL_6;
    }
    uint64_t v19 = 5LL;
  }

  (*(void (**)(void))(*(void *)v18 + 8 * v19))();
LABEL_6:
  int v20 = a13;
  if (a13 == &a10)
  {
    uint64_t v21 = 4LL;
    int v20 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_11;
    }
    uint64_t v21 = 5LL;
  }

  (*(void (**)(void))(*(void *)v20 + 8 * v21))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t sub_187320(uint64_t a1)
{
  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    int v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        int v3 = (void *)v3[2];
      }

      while (v3);
      *(void *)(a1 + 8) = v2;
    }

    sub_68040(v2);
  }

  return a1;
}

void sub_18736C(uint64_t a1)
{
  unsigned __int8 v1 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_68314(v1 + 6);
    }
    operator delete(v1);
  }

uint64_t *sub_1873B0(uint64_t *a1, uint64_t *a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  sub_85C34(a1, *a2, a2[1]);
  return a1;
}

void sub_1873E4(_Unwind_Exception *a1)
{
}

void *sub_1873F8(void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a3)
  {
    sub_7A840(a1, a3);
    int v6 = (char *)a1[1];
    memmove(v6, a2, 4 * a3);
    a1[1] = &v6[4 * a3];
  }

  return a1;
}

void sub_18745C(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_187478( unsigned int **a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, uint64_t a6, char *__src)
{
  if (a2 != a3)
  {
    uint64_t v12 = a4;
    if (a4 != a5)
    {
      v13 = a2;
      uint64_t v35 = a6 + 16;
      do
      {
        unsigned int v14 = *v13;
        if (*v13 >= *v12)
        {
          if (*v12 >= v14)
          {
            unint64_t v15 = *(char **)(a6 + 8);
            unint64_t v16 = *(void *)(a6 + 16);
            if ((unint64_t)v15 >= v16)
            {
              int v20 = *(char **)a6;
              unint64_t v21 = ((uint64_t)&v15[-*(void *)a6] >> 2) + 1;
              if (v21 >> 62) {
                sub_7A87C();
              }
              unint64_t v22 = v16 - (void)v20;
              unint64_t v23 = (uint64_t)(v16 - (void)v20) >> 1;
              if (v23 > v21) {
                unint64_t v21 = v23;
              }
              if (v22 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v24 = v21;
              }
              uint64_t v40 = v35;
              if (v24)
              {
                v26 = (char *)sub_7A890(v24);
              }

              else
              {
                v26 = 0LL;
                uint64_t v25 = 0LL;
              }

              uint64_t v28 = __src - v20;
              uint64_t v29 = (__src - v20) >> 2;
              v30 = &v26[4 * v29];
              __p = v26;
              uint64_t v37 = v30;
              v39 = &v26[4 * v25];
              if (v29 == v25)
              {
                if (v28 < 1)
                {
                  if (v20 == __src) {
                    unint64_t v32 = 1LL;
                  }
                  else {
                    unint64_t v32 = v28 >> 1;
                  }
                  std::string::size_type v33 = (char *)sub_7A890(v32);
                  v30 = &v33[v32 & 0xFFFFFFFFFFFFFFFCLL];
                  __p = v33;
                  uint64_t v37 = v30;
                  v39 = &v33[4 * v34];
                  if (v26) {
                    operator delete(v26);
                  }
                }

                else
                {
                  if (v29 >= -1) {
                    unint64_t v31 = v29 + 1;
                  }
                  else {
                    unint64_t v31 = v29 + 2;
                  }
                  v30 -= 4 * (v31 >> 1);
                  uint64_t v37 = v30;
                }
              }

              *(_DWORD *)v30 = *v13;
              v38 = v30 + 4;
              __src = sub_1876D4((void **)a6, (uint64_t)&__p, __src);
              if (__p) {
                operator delete(__p);
              }
            }

            else if (__src == v15)
            {
              *(_DWORD *)__src = v14;
              *(void *)(a6 + 8) = __src + 4;
            }

            else
            {
              char v17 = v15 - 4;
              uint64_t v18 = *(_DWORD **)(a6 + 8);
              while (v17 < v15)
              {
                int v19 = *(_DWORD *)v17;
                v17 += 4;
                *v18++ = v19;
              }

              *(void *)(a6 + 8) = v18;
              if (v15 != __src + 4) {
                memmove(&v15[-4 * ((v15 - (__src + 4)) >> 2)], __src, v15 - (__src + 4));
              }
              v27 = v13;
              *(_DWORD *)__src = *v27;
            }

            __src += 4;
            ++v13;
          }

          ++v12;
        }

        else
        {
          ++v13;
        }
      }

      while (v13 != a3 && v12 != a5);
    }
  }

  *a1 = a3;
  a1[1] = a5;
  a1[2] = (unsigned int *)a6;
  a1[3] = (unsigned int *)__src;
}

void sub_1876BC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1876D4(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(char **)(a2 + 8);
  int v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    __int16 v8 = __src;
    uint64_t v7 = *(char **)(a2 + 8);
    do
    {
      int v9 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v7 - 1) = v9;
      v7 -= 4;
    }

    while (v8 != v6);
  }

  *(void *)(a2 + 8) = v7;
  unint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(char **)(a2 + 8);
  }

  *(void *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unsigned int v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  unint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void *sub_1877A0()
{
  result = operator new(0x10uLL);
  void *result = &off_473968;
  return result;
}

void sub_1877C4(uint64_t a1, void *a2)
{
  *a2 = &off_473968;
}

BOOL sub_1877DC()
{
  uint64_t v0 = sub_5954C();
  return (*(unsigned int (**)(uint64_t))(*(void *)v0 + 40LL))(v0) == 543711587;
}

void sub_18780C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_484A28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_18781C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_484A28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_18783C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_BYTE *sub_18784C(_BYTE *a1, uint64_t a2, CFStringRef *a3)
{
  v7[0] = qword_48F450;
  *(uint64_t *)((char *)v7 + 5) = *(uint64_t *)((char *)&qword_48F450 + 5);
  sub_86550(v8, (uint64_t)&unk_48F460);
  __int16 v9 = word_48F478;
  sub_1738D4(a1, v7, a2, a3);
  sub_32C8C((void *)v8[1]);
  return a1;
}

void sub_1878D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_1878E4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_485B48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1878F4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_485B48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_187914(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_187924(uint64_t a1, uint64_t a2, char **a3)
{
  char v18 = 1;
  sub_86550(v19, (uint64_t)&unk_48F400);
  __int16 v20 = v20 & 0xF800 | 0x416;
  memset(v16, 0, sizeof(v16));
  qmemcpy(v9, "ottpiwcpttpe", sizeof(v9));
  char v10 = 1;
  sub_86550(v11, (uint64_t)&unk_48F400);
  __int16 v12 = v12 & 0xF800 | 0x416;
  sub_F9530((uint64_t)v13, *(unsigned int *)v9);
  CFStringRef v7 = CFStringCreateWithCString(0LL, "TTY Output", 0x600u);
  char v8 = 1;
  sub_15A9C8((void *)a1, (uint64_t *)v17, a2, (uint64_t)v16, (uint64_t)v13, (uint64_t)&v7, a3);
  sub_19DFC((uint64_t)&v7);
  sub_19DFC((uint64_t)&v15);
  sub_19DFC((uint64_t)&v14);
  sub_19DFC((uint64_t)v13);
  sub_32C8C((void *)v11[1]);
  sub_32C8C((void *)v19[1]);
  *(void *)a1 = off_486140;
  *(_BYTE *)(a1 + 520) = 0;
  return a1;
}

void sub_187A84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  char v10 = va_arg(va1, void *);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_19DFC((uint64_t)va);
  sub_88540((uint64_t)va1);
  sub_32C8C(v10);
  sub_32C8C(*(void **)(v2 - 104));
  _Unwind_Resume(a1);
}

uint64_t sub_187AC8(uint64_t a1)
{
  *(void *)a1 = off_486140;
  return sub_F8158(a1);
}

void sub_187AD8(void *a1)
{
  *a1 = off_486140;
  uint64_t v1 = (void *)sub_F8158((uint64_t)a1);
  operator delete(v1);
}

uint64_t sub_187AF8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 520);
}

void sub_187B00(uint64_t a1, char a2, char a3)
{
  *(_BYTE *)(a1 + 520) = a2 & a3;
  sub_CC160(a1);
}

void sub_187B0C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_486108;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_187B1C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_486108;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_187B3C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_187B4C(uint64_t a1, uint64_t a2, char **a3)
{
  char v18 = 1;
  sub_86550(v19, (uint64_t)&unk_48F400);
  __int16 v20 = v20 & 0xF800 | 0x417;
  memset(v16, 0, sizeof(v16));
  qmemcpy(v9, "ittpiwcpttpe", sizeof(v9));
  char v10 = 1;
  sub_86550(v11, (uint64_t)&unk_48F400);
  __int16 v12 = v12 & 0xF800 | 0x417;
  sub_F9530((uint64_t)v13, *(unsigned int *)v9);
  CFStringRef v7 = CFStringCreateWithCString(0LL, "TTY Input", 0x600u);
  char v8 = 1;
  sub_15A9C8((void *)a1, (uint64_t *)v17, a2, (uint64_t)v16, (uint64_t)v13, (uint64_t)&v7, a3);
  sub_19DFC((uint64_t)&v7);
  sub_19DFC((uint64_t)&v15);
  sub_19DFC((uint64_t)&v14);
  sub_19DFC((uint64_t)v13);
  sub_32C8C((void *)v11[1]);
  sub_32C8C((void *)v19[1]);
  *(void *)a1 = off_485C98;
  *(_BYTE *)(a1 + 520) = 0;
  return a1;
}

void sub_187CAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  char v10 = va_arg(va1, void *);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_19DFC((uint64_t)va);
  sub_88540((uint64_t)va1);
  sub_32C8C(v10);
  sub_32C8C(*(void **)(v2 - 104));
  _Unwind_Resume(a1);
}

uint64_t sub_187CF0(uint64_t a1)
{
  *(void *)a1 = off_485C98;
  return sub_F8158(a1);
}

void sub_187D00(void *a1)
{
  *a1 = off_485C98;
  uint64_t v1 = (void *)sub_F8158((uint64_t)a1);
  operator delete(v1);
}

uint64_t sub_187D20(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 520);
}

void sub_187D28(uint64_t a1, char a2, char a3)
{
  *(_BYTE *)(a1 + 520) = a2 & a3;
  sub_CC160(a1);
}

void sub_187D34(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_485C60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_187D44(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_485C60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_187D64(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_187D74(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_485C28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_187D84(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_485C28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_187DA4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_187DB4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_485BB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_187DC4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_485BB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_187DE4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_187DF4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_485BF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_187E04(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_485BF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_187E24(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double sub_187E34(AudioObjectID a1, AudioObjectPropertyElement a2)
{
  if (!a1)
  {
    char v10 = (os_log_t *)sub_138E8(13);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      inAddress.mSelector = 136315394;
      *(void *)&inAddress.mScope = "Device_Codec_Aspen.cpp";
      __int16 v17 = 1024;
      int v18 = 132;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&inAddress,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  double outData = 0.0;
  double v15 = 0.0;
  *(void *)&inAddress.mSelector = 0x6F75747076646223LL;
  inAddress.mElement = a2;
  UInt32 ioDataSize = 16;
  if (AudioObjectHasProperty(a1, &inAddress)) {
    AudioObjectGetPropertyData(a1, &inAddress, 0, 0LL, &ioDataSize, &outData);
  }
  switch(a2)
  {
    case 1u:
      double v8 = 2.0;
      double v5 = outData;
      if (v15 <= 2.0) {
        double v8 = v15;
      }
      double v15 = v8;
      double v6 = -76.0;
      goto LABEL_14;
    case 2u:
      double v9 = v15;
      if (v15 > 0.0) {
        double v9 = 0.0;
      }
      double v15 = v9;
      double result = -58.0;
      if (outData >= -58.0) {
        double result = outData;
      }
      break;
    case 3u:
    case 5u:
      double v4 = 2.0;
      double v5 = outData;
      if (v15 <= 2.0) {
        double v4 = v15;
      }
      double v15 = v4;
      double v6 = -58.0;
LABEL_14:
      double result = v6;
      if (v5 >= v6) {
        double result = v5;
      }
      break;
    case 4u:
      double result = outData;
      if (outData < -58.0) {
        double result = -58.0;
      }
      break;
    default:
      double result = outData;
      break;
  }

  return result;
}

void sub_188020(_Unwind_Exception *a1)
{
}

void sub_18803C(uint64_t **a1, unsigned int *a2, unsigned int *a3)
{
  int v6 = ((uint64_t (*)(uint64_t **))(*a1)[2])(a1);
  uint64_t v7 = sub_138E8(13);
  if ((*(_BYTE *)(v7 + 8) & 1) != 0)
  {
    double v8 = *(os_log_s **)v7;
    if (*(void *)v7)
    {
      if (os_log_type_enabled(*(os_log_t *)v7, OS_LOG_TYPE_DEBUG))
      {
        sub_2CA1C(v44, *a3);
        if (v45 >= 0) {
          double v9 = v44;
        }
        else {
          double v9 = (void **)v44[0];
        }
        char v10 = v42;
        sub_2CA1C(v42, a3[1]);
        if (v43 < 0) {
          char v10 = (void **)v42[0];
        }
        unsigned int v11 = a3[1];
        unsigned int v35 = a3[2];
        uint64_t v36 = *((void *)a3 + 2);
        uint64_t v37 = *((void *)a3 + 3);
        sub_2CA1C(v40, *a2);
        int v12 = v41;
        v13 = (void **)v40[0];
        sub_2CA1C(__p, a2[1]);
        uint64_t v14 = v40;
        if (v12 < 0) {
          uint64_t v14 = v13;
        }
        if (v39 >= 0) {
          double v15 = __p;
        }
        else {
          double v15 = (void **)__p[0];
        }
        unsigned int v16 = a2[1];
        unsigned int v17 = a2[2];
        *(_DWORD *)buf = 136317954;
        v47 = "StandardUtilities.h";
        __int16 v48 = 1024;
        int v49 = 870;
        __int16 v50 = 2080;
        v51 = v9;
        __int16 v52 = 2080;
        v53 = v10;
        __int16 v54 = 1024;
        unsigned int v55 = v11;
        __int16 v56 = 1024;
        unsigned int v57 = v35;
        __int16 v58 = 2048;
        uint64_t v59 = v36;
        __int16 v60 = 2048;
        uint64_t v61 = v37;
        __int16 v62 = 2080;
        v63 = v14;
        __int16 v64 = 2080;
        v65 = v15;
        __int16 v66 = 1024;
        unsigned int v67 = v16;
        __int16 v68 = 1024;
        unsigned int v69 = v17;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to unregister ClientCallbackInfo (mAddress.mSelector: '%s'; mAddress.mScope: '%s' / %u; m"
          "Address.mElement: %u; mProc: %p; mData: %p) for trigger (mSelector: '%s'; mScope: '%s' / %u; mElement: %u)",
          buf,
          0x66u);
        if (v39 < 0) {
          operator delete(__p[0]);
        }
        if (v41 < 0) {
          operator delete(v40[0]);
        }
        if (v43 < 0) {
          operator delete(v42[0]);
        }
        if (v45 < 0) {
          operator delete(v44[0]);
        }
      }
    }
  }

  int v18 = a1 + 11;
  int v19 = sub_67F40((uint64_t)(a1 + 11), (uint64_t)a2);
  __int16 v20 = v19;
  if (a1 + 12 == (uint64_t **)v19)
  {
    unint64_t v32 = (os_log_t *)sub_138E8(13);
    std::string::size_type v33 = *v32;
    if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v47 = "StandardUtilities.h";
      __int16 v48 = 1024;
      int v49 = 873;
      _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Attempt to unregister with an unknown trigger address.",  buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempt to unregister with an unknown trigger address.");
  }

  unint64_t v21 = v19 + 6;
  for (uint64_t i = (uint64_t *)v19[7]; ; uint64_t i = (uint64_t *)i[1])
  {
    if (i == v21) {
      goto LABEL_42;
    }
  }

  if (i == v21)
  {
LABEL_42:
    uint64_t v29 = (os_log_t *)sub_138E8(13);
    v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v47 = "StandardUtilities.h";
      __int16 v48 = 1024;
      int v49 = 875;
      _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Attempt to unregister with a trigger address for which the ClientCallb ackInfo has never been registered.",  buf,  0x12u);
    }

    unint64_t v31 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error( v31,  "Attempt to unregister with a trigger address for which the ClientCallbackInfo has never been registered.");
  }

  uint64_t v23 = *i;
  *(void *)(v23 + 8) = i[1];
  *(void *)i[1] = v23;
  --v20[8];
  operator delete(i);
  if (v20[8])
  {
    if (!v6) {
      return;
    }
    goto LABEL_40;
  }

  unint64_t v24 = (uint64_t *)v20[1];
  if (v24)
  {
    do
    {
      uint64_t v25 = v24;
      unint64_t v24 = (uint64_t *)*v24;
    }

    while (v24);
  }

  else
  {
    v26 = v20;
    do
    {
      uint64_t v25 = (uint64_t *)v26[2];
      BOOL v27 = *v25 == (void)v26;
      v26 = v25;
    }

    while (!v27);
  }

  if (*v18 == v20) {
    *int v18 = v25;
  }
  uint64_t v28 = a1[12];
  a1[13] = (uint64_t *)((char *)a1[13] - 1);
  sub_911E8(v28, v20);
  sub_68314(v20 + 6);
  operator delete(v20);
  if (v6) {
LABEL_40:
  }
    ((void (*)(uint64_t **))(*a1)[3])(a1);
}

void sub_1884C8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, void *a29, uint64_t a30, int a31, __int16 a32, char a33, char a34)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)v34 + 24LL))(v34);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_188578(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
      && *(_DWORD *)a1 == *(_DWORD *)a2
      && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
      && *(void *)(a1 + 16) == *(void *)(a2 + 16)
      && *(void *)(a1 + 24) == *(void *)(a2 + 24);
}

_DWORD *sub_1885D4(void *a1, unsigned int *a2, unsigned int *a3)
{
  int v6 = (*(uint64_t (**)(void *))(*a1 + 16LL))(a1);
  uint64_t v7 = sub_138E8(13);
  if ((*(_BYTE *)(v7 + 8) & 1) != 0)
  {
    double v8 = *(os_log_s **)v7;
    if (*(void *)v7)
    {
      if (os_log_type_enabled(*(os_log_t *)v7, OS_LOG_TYPE_DEBUG))
      {
        int v50 = v6;
        sub_2CA1C(v58, *a3);
        if (v60 >= 0) {
          double v9 = v58;
        }
        else {
          double v9 = (void **)v58[0];
        }
        char v10 = &v55;
        sub_2CA1C(&v55, a3[1]);
        if (v57 < 0) {
          char v10 = v55;
        }
        unsigned int v11 = a3[1];
        unsigned int v47 = a3[2];
        uint64_t v48 = *((void *)a3 + 2);
        uint64_t v49 = *((void *)a3 + 3);
        sub_2CA1C(v53, *a2);
        int v12 = v54;
        v13 = (void **)v53[0];
        sub_2CA1C(__p, a2[1]);
        uint64_t v14 = v53;
        if (v12 < 0) {
          uint64_t v14 = v13;
        }
        if (v52 >= 0) {
          double v15 = __p;
        }
        else {
          double v15 = (void **)__p[0];
        }
        unsigned int v16 = a2[1];
        unsigned int v17 = a2[2];
        *(_DWORD *)buf = 136317954;
        *(void *)&uint8_t buf[4] = "StandardUtilities.h";
        __int16 v62 = 1024;
        *(_DWORD *)v63 = 835;
        *(_WORD *)&v63[4] = 2080;
        *(void *)&v63[6] = v9;
        *(_WORD *)&v63[14] = 2080;
        *(void *)&v63[16] = v10;
        *(_WORD *)&v63[24] = 1024;
        unsigned int v64 = v11;
        __int16 v65 = 1024;
        unsigned int v66 = v47;
        __int16 v67 = 2048;
        uint64_t v68 = v48;
        __int16 v69 = 2048;
        uint64_t v70 = v49;
        __int16 v71 = 2080;
        v72 = v14;
        __int16 v73 = 2080;
        v74 = v15;
        __int16 v75 = 1024;
        unsigned int v76 = v16;
        __int16 v77 = 1024;
        unsigned int v78 = v17;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to register ClientCallbackInfo (mAddress.mSelector: '%s'; mAddress.mScope: '%s' / %u; mAd"
          "dress.mElement: %u; mProc: %p; mData: %p) for trigger (mSelector: '%s'; mScope: '%s' / %u; mElement: %u)",
          buf,
          0x66u);
        if (v52 < 0) {
          operator delete(__p[0]);
        }
        int v6 = v50;
        if (v54 < 0) {
          operator delete(v53[0]);
        }
        if (SHIBYTE(v57) < 0) {
          operator delete(v55);
        }
        if (v60 < 0) {
          operator delete(v58[0]);
        }
      }
    }
  }

  int v18 = (void **)(a1 + 11);
  int v19 = sub_67F40((uint64_t)(a1 + 11), (uint64_t)a2);
  __int16 v20 = (uint64_t **)v19;
  if (a1 + 12 != v19)
  {
    unint64_t v21 = v19 + 6;
    for (uint64_t i = (void *)v19[7]; i != v21; uint64_t i = (void *)i[1])
    {
      if (sub_188578((uint64_t)(i + 2), (uint64_t)a3))
      {
        if (i != v21)
        {
          char v41 = (os_log_t *)sub_138E8(13);
          v42 = *v41;
          if (*v41)
          {
            if (os_log_type_enabled(*v41, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "StandardUtilities.h";
              __int16 v62 = 1024;
              *(_DWORD *)v63 = 843;
              _os_log_impl( &dword_0,  v42,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Attempt to register with a trigger address for which the Clien tCallbackInfo has already been added.",  buf,  0x12u);
            }
          }

          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error( exception,  "Attempt to register with a trigger address for which the ClientCallbackInfo has already been added.");
        }

        break;
      }
    }

    double result = operator new(0x30uLL);
    result[6] = a3[2];
    uint64_t v31 = *(void *)a3;
    *((_OWORD *)result + 2) = *((_OWORD *)a3 + 1);
    *((void *)result + 1) = v21;
    *((void *)result + 2) = v31;
    unint64_t v32 = v20[6];
    *(void *)double result = v32;
    v32[1] = (uint64_t)result;
    v20[6] = (uint64_t *)result;
    v20[8] = (uint64_t *)((char *)v20[8] + 1);
    if (v6) {
      return (_DWORD *)(*(uint64_t (**)(void *))(*a1 + 24LL))(a1);
    }
    return result;
  }

  unsigned int v55 = &v55;
  __int16 v56 = &v55;
  uint64_t v57 = 0LL;
  uint64_t v23 = operator new(0x30uLL);
  uint64_t v24 = *(void *)a3;
  v23[1] = &v55;
  v23[2] = v24;
  *((_DWORD *)v23 + 6) = a3[2];
  *((_OWORD *)v23 + 2) = *((_OWORD *)a3 + 1);
  void *v23 = &v55;
  unsigned int v55 = v23;
  __int16 v56 = &v55;
  uint64_t v57 = 1LL;
  *(void *)buf = *(void *)a2;
  *(_DWORD *)&buf[8] = a2[2];
  unsigned int v55 = &v55;
  *(void *)&v63[2] = v23;
  *(void *)&v63[10] = v23;
  void *v23 = &v63[2];
  v23[1] = &v63[2];
  *(void *)&v63[18] = 1LL;
  uint64_t v57 = 0LL;
  uint64_t v25 = *v20;
  if (!*v20)
  {
    BOOL v27 = (uint64_t *)v20;
    uint64_t v25 = (uint64_t *)v20;
    goto LABEL_43;
  }

  uint64_t v26 = a1[17];
  if (!v26) {
LABEL_37:
  }
    sub_82CEC();
  BOOL v27 = (uint64_t *)v20;
  while ((*(unsigned int (**)(uint64_t, _BYTE *, uint64_t *))(*(void *)v26 + 48LL))(v26, buf, v25 + 4))
  {
    uint64_t v28 = (uint64_t *)*v25;
    BOOL v27 = v25;
    if (!*v25) {
      goto LABEL_43;
    }
LABEL_36:
    uint64_t v26 = a1[17];
    uint64_t v25 = v28;
    if (!v26) {
      goto LABEL_37;
    }
  }

  uint64_t v29 = a1[17];
  if (!v29) {
    goto LABEL_37;
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t *, _BYTE *))(*(void *)v29 + 48LL))(v29, v25 + 4, buf))
  {
    BOOL v27 = v25 + 1;
    uint64_t v28 = (uint64_t *)v25[1];
    if (!v28) {
      goto LABEL_43;
    }
    goto LABEL_36;
  }

  if (*v27)
  {
    sub_68314(&v63[2]);
    sub_68314(&v55);
    uint64_t v44 = (os_log_t *)sub_138E8(13);
    char v45 = *v44;
    if (*v44 && os_log_type_enabled(*v44, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "StandardUtilities.h";
      __int16 v62 = 1024;
      *(_DWORD *)v63 = 850;
      _os_log_impl( &dword_0,  v45,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Failed to register trigger / ClientCallbackInfo",  buf,  0x12u);
    }

    uint64_t v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v46, "Failed to register trigger / ClientCallbackInfo");
  }

void sub_188BDC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, void *a29, uint64_t a30, int a31, __int16 a32, char a33, char a34)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)v34 + 24LL))(v34);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_188CBC(AudioObjectID a1, uint64_t a2, UInt32 a3, const void *a4, _DWORD *a5)
{
  uint64_t v10 = sub_138E8(13);
  if ((*(_BYTE *)(v10 + 8) & 1) != 0)
  {
    unsigned int v11 = *(os_log_s **)v10;
    if (*(void *)v10)
    {
      if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
      {
        __p.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)__p.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_613AC((uint64_t)&v73, (unsigned int *)&__p);
        int v12 = v73.__m_.__opaque[15] >= 0 ? &v73 : (std::mutex *)v73.__m_.__sig;
        buf.mSelector = 136315906;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        __int16 v63 = 1024;
        int v64 = 166;
        __int16 v65 = 2080;
        *(void *)unsigned int v66 = v12;
        *(_WORD *)&v66[8] = 1024;
        *(_DWORD *)&v66[10] = a1;
        _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to synchronize the property %s on id %u.",  (uint8_t *)&buf,  0x22u);
        if (v73.__m_.__opaque[15] < 0) {
          operator delete((void *)v73.__m_.__sig);
        }
      }
    }
  }

  AudioObjectID v57 = a1;
  uint64_t v58 = *(void *)a2;
  int v59 = *(_DWORD *)(a2 + 8);
  UInt32 v60 = a3;
  uint64_t v61 = a4;
  unint64_t v13 = sub_1899A8((uint64_t)&v57);
  if (HIDWORD(v13)) {
    BOOL v14 = 0;
  }
  else {
    BOOL v14 = *a5 == (_DWORD)v13;
  }
  int v15 = v14;
  uint64_t v16 = sub_138E8(13);
  uint64_t v17 = *(void *)(v16 + 8);
  if (v15)
  {
    if ((v17 & 1) == 0) {
      return 0LL;
    }
    int v18 = *(os_log_s **)v16;
    if (!*(void *)v16 || !os_log_type_enabled(*(os_log_t *)v16, OS_LOG_TYPE_DEBUG)) {
      return 0LL;
    }
    buf.mSelector = 136315650;
    *(void *)&buf.mScope = "HALPropertySynchronizer.h";
    __int16 v63 = 1024;
    int v64 = 191;
    __int16 v65 = 1024;
    *(_DWORD *)unsigned int v66 = a1;
LABEL_20:
    _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a no tification on id %u.",  (uint8_t *)&buf,  0x18u);
    return 0LL;
  }

  if ((v17 & 1) != 0)
  {
    int v19 = *(os_log_s **)v16;
    if (*(void *)v16)
    {
      if (os_log_type_enabled(*(os_log_t *)v16, OS_LOG_TYPE_DEBUG))
      {
        __p.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)__p.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_613AC((uint64_t)&v73, (unsigned int *)&__p);
        __int16 v20 = v73.__m_.__opaque[15] >= 0 ? &v73 : (std::mutex *)v73.__m_.__sig;
        buf.mSelector = 136315906;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        __int16 v63 = 1024;
        int v64 = 199;
        __int16 v65 = 2080;
        *(void *)unsigned int v66 = v20;
        *(_WORD *)&v66[8] = 1024;
        *(_DWORD *)&v66[10] = a1;
        _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d About to call AudioObjectSetPropertyData to set property: %s on id %u.",  (uint8_t *)&buf,  0x22u);
        if (v73.__m_.__opaque[15] < 0) {
          operator delete((void *)v73.__m_.__sig);
        }
      }
    }
  }

  AudioObjectPropertyAddress buf = *(AudioObjectPropertyAddress *)a2;
  uint64_t v21 = AudioObjectSetPropertyData(a1, &buf, a3, a4, 4u, a5);
  if (!(_DWORD)v21)
  {
    unint64_t v28 = sub_1899A8((uint64_t)&v57);
    if (!HIDWORD(v28) && *a5 == (_DWORD)v28)
    {
      uint64_t v29 = sub_138E8(13);
      if ((*(_BYTE *)(v29 + 8) & 1) == 0) {
        return 0LL;
      }
      int v18 = *(os_log_s **)v29;
      if (!*(void *)v29 || !os_log_type_enabled(*(os_log_t *)v29, OS_LOG_TYPE_DEBUG)) {
        return 0LL;
      }
      buf.mSelector = 136315650;
      *(void *)&buf.mScope = "HALPropertySynchronizer.h";
      __int16 v63 = 1024;
      int v64 = 219;
      __int16 v65 = 1024;
      *(_DWORD *)unsigned int v66 = a1;
      goto LABEL_20;
    }

    memset(v73.__m_.__opaque, 0, sizeof(v73.__m_.__opaque));
    v73.__m_.__uint64_t sig = 850045863LL;
    memset(__p.__cv_.__opaque, 0, sizeof(__p.__cv_.__opaque));
    __p.__cv_.__uint64_t sig = 1018212795LL;
    char v56 = 0;
    sub_7D684(&inClientData, a1, (AudioObjectPropertyAddress *)a2, (uint64_t)&__p, (uint64_t)&v73, (uint64_t)&v56);
    for (uint64_t i = 2000LL; ; i += (std::chrono::system_clock::now().__d_.__rep_ - v34.__d_.__rep_) / -1000)
    {
      unint64_t v32 = sub_1899A8((uint64_t)&v57);
      int v33 = v32;
      uint64_t v21 = HIDWORD(v32);
      if (HIDWORD(v32)) {
        goto LABEL_95;
      }
      if (*a5 == (_DWORD)v32) {
        break;
      }
      if (i <= 0)
      {
        uint64_t v46 = (os_log_t *)sub_138E8(13);
        uint64_t v21 = 2003329396LL;
        unsigned int v47 = *v46;
        if (*v46 && os_log_type_enabled(*v46, OS_LOG_TYPE_ERROR))
        {
          uint64_t v50 = *(void *)a2;
          int v51 = *(_DWORD *)(a2 + 8);
          sub_613AC((uint64_t)&__lk, (unsigned int *)&v50);
          uint64_t v48 = v53 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
          BOOL v49 = *a5 == v33;
          buf.mSelector = 136316930;
          *(void *)&buf.mScope = "HALPropertySynchronizer.h";
          __int16 v63 = 1024;
          int v64 = 248;
          __int16 v65 = 2080;
          *(void *)unsigned int v66 = "set";
          *(_WORD *)&v66[8] = 2080;
          *(void *)&v66[10] = v48;
          *(_WORD *)&v66[18] = 2080;
          *(void *)&v66[20] = "set";
          *(_WORD *)&v66[28] = 1024;
          BOOL v67 = v49;
          __int16 v68 = 1024;
          int v69 = 0;
          __int16 v70 = 1024;
          AudioObjectID v71 = a1;
          _os_log_impl( &dword_0,  v47,  OS_LOG_TYPE_ERROR,  "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.",  (uint8_t *)&buf,  0x42u);
          if (v53 < 0) {
            operator delete(__lk.__m_);
          }
        }

void sub_1895A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, std::condition_variable *a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36)
{
}

void sub_189620(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  sub_9005C();
  if (byte_48CC70)
  {
    if ((byte_48E812 & 1) == 0)
    {
      if (sub_14B98C(@"DisableCodecWindFilter", @"com.apple.audio.virtualaudio", &v17))
      {
        double v4 = (os_log_t *)sub_138E8(13);
        double v5 = *v4;
        if (*v4)
        {
          BOOL v6 = os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT);
          int v7 = v17;
          if (v6)
          {
            buf.mSelector = 136315906;
            *(void *)&buf.mScope = "RunTimeDefaults.cpp";
            __int16 v19 = 1024;
            int v20 = 1292;
            __int16 v21 = 2080;
            unint64_t v22 = "DisableCodecWindFilter";
            __int16 v23 = 1024;
            int v24 = v17;
            _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Default %s: %d.", (uint8_t *)&buf, 0x22u);
          }
        }

        else
        {
          int v7 = v17;
        }

        byte_48E811 = v7 != 0;
      }

      byte_48E812 = 1;
    }

    if (byte_48E811)
    {
      uint64_t v10 = (os_log_t *)sub_138E8(17);
      uint64_t v2 = *v10;
      if (*v10)
      {
        if (os_log_type_enabled(*v10, OS_LOG_TYPE_INFO))
        {
          buf.mSelector = 136315394;
          *(void *)&buf.mScope = "Device_Codec_Aspen.cpp";
          __int16 v19 = 1024;
          int v20 = 1827;
          double v9 = "%25s:%-5d The defaults write to disable the codec wind filter has been specified.";
          goto LABEL_17;
        }

        goto LABEL_18;
      }
    }
  }

  else
  {
    double v8 = (os_log_t *)sub_138E8(17);
    uint64_t v2 = *v8;
    if (*v8)
    {
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_INFO))
      {
        buf.mSelector = 136315394;
        *(void *)&buf.mScope = "Device_Codec_Aspen.cpp";
        __int16 v19 = 1024;
        int v20 = 1822;
        double v9 = "%25s:%-5d Use of codec wind filter is not allowed on this device. Disabling it.";
LABEL_17:
        _os_log_impl(&dword_0, v2, OS_LOG_TYPE_INFO, v9, (uint8_t *)&buf, 0x12u);
      }

unint64_t sub_1899A8(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 4);
  *(void *)&buf.mSelector = *(void *)(a1 + 4);
  UInt32 v3 = *(_DWORD *)(a1 + 16);
  buf.mElement = *(_DWORD *)(a1 + 12);
  unint64_t v4 = sub_36EF4((AudioObjectID *)a1, &buf, v3, *(const void **)(a1 + 24));
  char v6 = v5;
  if ((_DWORD)v4)
  {
    int v7 = (os_log_t *)sub_138E8(13);
    double v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v20, v4);
        int v9 = v21;
        uint64_t v10 = (void **)v20[0];
        uint64_t v16 = *v2;
        int v17 = *((_DWORD *)v2 + 2);
        sub_613AC((uint64_t)__p, (unsigned int *)&v16);
        unsigned int v11 = v20;
        if (v9 < 0) {
          unsigned int v11 = v10;
        }
        if (v19 >= 0) {
          int v12 = __p;
        }
        else {
          int v12 = (void **)__p[0];
        }
        AudioObjectID v13 = *(_DWORD *)a1;
        buf.mSelector = 136316418;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        __int16 v23 = 1024;
        int v24 = 176;
        __int16 v25 = 1024;
        int v26 = v4;
        __int16 v27 = 2080;
        unint64_t v28 = v11;
        __int16 v29 = 2080;
        v30 = v12;
        __int16 v31 = 1024;
        AudioObjectID v32 = v13;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) reading property data for property %s on id %u.",  (uint8_t *)&buf,  0x32u);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
        if (v21 < 0) {
          operator delete(v20[0]);
        }
      }
    }
  }

  unint64_t v14 = HIDWORD(v4);
  if (!v6) {
    unint64_t v14 = 0LL;
  }
  return v14 | (v4 << 32);
}

void sub_189B50(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_189B70(uint64_t a1)
{
  *(void *)a1 = off_4736F8;
  uint64_t v2 = *(void *)(a1 + 664);
  *(void *)(a1 + 664) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  sub_67FE8(a1 + 600);
  *(void *)(a1 + 512) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 536));
  sub_189BF4((uint64_t *)(a1 + 504));
  uint64_t v3 = *(void *)(a1 + 496);
  *(void *)(a1 + 496) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  return sub_36F1E0(a1);
}

void sub_189BF4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    uint64_t v3 = (void *)sub_15A0A0(v2);
    operator delete(v3);
  }

uint64_t sub_189C20(uint64_t a1)
{
  uint64_t v2 = sub_B1F7C(a1, (uint64_t)"AudioObjectPropertyListenerRelay mutex");
  sub_187128((void *)(v2 + 88));
  return a1;
}

void sub_189C54(_Unwind_Exception *a1)
{
}

uint64_t sub_189C70(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 8) + 16LL))( *(void *)(a1 + 8),  &qword_48F4B0);
  if ((_DWORD)result)
  {
    uint64_t v3 = (os_log_t *)sub_138E8(17);
    unint64_t v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_INFO))
      {
        int v6 = 136315394;
        int v7 = "Device_Codec_Aspen.cpp";
        __int16 v8 = 1024;
        int v9 = 105;
        _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_INFO,  "%25s:%-5d Requesting that the codec enable microphone power.",  (uint8_t *)&v6,  0x12u);
      }
    }

    uint64_t v5 = *(void *)(a1 + 8);
    int v6 = 1;
    return sub_189E54(v5);
  }

  return result;
}

uint64_t sub_189D64(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 8) + 16LL))( *(void *)(a1 + 8),  &qword_48F4B0);
  if ((_DWORD)result)
  {
    uint64_t v3 = (os_log_t *)sub_138E8(17);
    unint64_t v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_INFO))
      {
        int v6 = 136315394;
        int v7 = "Device_Codec_Aspen.cpp";
        __int16 v8 = 1024;
        int v9 = 114;
        _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_INFO,  "%25s:%-5d Requesting that the codec disable microphone power.",  (uint8_t *)&v6,  0x12u);
      }
    }

    uint64_t v5 = *(void *)(a1 + 8);
    int v6 = 0;
    return sub_189E54(v5);
  }

  return result;
}

uint64_t sub_189E54(uint64_t a1)
{
  uint64_t result = sub_F2FAC(a1);
  if ((_DWORD)result)
  {
    int v2 = result;
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = v2;
  }

  return result;
}

void sub_189ED0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_4738E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_189EE0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_4738E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_189F00(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_189F14(unint64_t a1)
{
  uint64_t v1 = (void *)sub_1958B8(a1);
  operator delete(v1);
}

uint64_t sub_189F28(uint64_t a1, void *a2)
{
  void (***v171)(std::string *__return_ptr, void, std::string *);
  unint64_t *v172;
  unint64_t v173;
  std::string::size_type v174;
  std::__shared_weak_count *v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  __int128 v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t v184;
  __int128 v185;
  id v186;
  os_log_s *v187;
  uint64_t v188;
  std::string *v189;
  const char *v190;
  os_log_s *v191;
  uint32_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::string::size_type v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  id v203;
  uint64_t v204;
  std::string *v205;
  int v206;
  int v207;
  const char *v208;
  _OWORD *v209;
  std::__shared_count v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  void *v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  unint64_t *v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t *v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  __int128 v228;
  std::__shared_weak_count *shared_owners;
  unint64_t v230;
  unint64_t *v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t *v234;
  unint64_t v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  uint64_t v240;
  os_log_s *v241;
  os_log_s *v242;
  void *v243;
  std::__shared_weak_count *v244;
  unint64_t v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count *v248;
  os_log_t *v249;
  os_log_s *v250;
  os_log_s *v251;
  os_log_s *v252;
  void *v253;
  uint64_t v254;
  void *v255;
  uint64_t *v256;
  os_log_s *v257;
  os_log_s *v258;
  std::__shared_weak_count *v259;
  int v260;
  unint64_t *v261;
  unint64_t v262;
  uint64_t v263;
  std::__shared_weak_count *v264;
  std::string *size;
  int *v266;
  std::string::size_type v267;
  os_log_s *v268;
  os_log_s *v269;
  std::string::pointer data;
  unint64_t *v271;
  unint64_t v272;
  std::__shared_weak_count *v273;
  _DWORD *v274;
  uint64_t v275;
  int v276;
  id v277;
  void *v278;
  os_log_s *v279;
  _BYTE *v280;
  std::string::size_type v281;
  uint64_t v282;
  id v283;
  void *v284;
  os_log_s *v285;
  int v286;
  _BYTE *v287;
  _BYTE *v288;
  _BYTE *v289;
  id v290;
  void *v291;
  os_log_s *v292;
  _BYTE *v293;
  std::__shared_weak_count *v294;
  std::__shared_weak_count *v295;
  std::__shared_weak_count *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  BOOL v300;
  _DWORD *v301;
  char *v302;
  char *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  unsigned int *v307;
  uint64_t v308;
  uint64_t v309;
  _OWORD *v310;
  uint64_t v311;
  int v312;
  int v313;
  char *v314;
  unint64_t v315;
  _DWORD *v316;
  id v317;
  os_log_s *v318;
  int v319;
  std::string::size_type v320;
  int v321;
  std::string *v322;
  os_log_s *v323;
  const char *v324;
  char *v325;
  uint64_t v326;
  unint64_t v327;
  uint64_t v328;
  unint64_t v329;
  char *v330;
  char *v331;
  char *v332;
  int v333;
  uint64_t v334;
  id v335;
  int v336;
  std::string::size_type v337;
  int v338;
  std::string *v339;
  unint64_t *v340;
  unint64_t v341;
  os_log_s *v342;
  os_log_s *v343;
  os_log_s *v344;
  os_log_s *v345;
  uint64_t v346;
  const char *v347;
  std::__shared_weak_count *v348;
  unint64_t *p_shared_owners;
  unint64_t v350;
  std::string *v351;
  unint64_t v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t v355;
  uint8x8_t v356;
  void *v357;
  void *i;
  unint64_t v359;
  void *v360;
  unint64_t v361;
  float v362;
  BOOL v363;
  unint64_t v364;
  unint64_t v365;
  int8x8_t prime;
  char **v367;
  void *v368;
  void *v369;
  uint64_t v370;
  void **v371;
  unint64_t v372;
  uint8x8_t v373;
  unint64_t v374;
  uint8x8_t v375;
  uint64_t v376;
  void *j;
  unint64_t v378;
  uint64_t v379;
  void *v380;
  unint64_t v381;
  float v382;
  unint64_t *v383;
  unint64_t v384;
  os_log_s *v385;
  os_log_s *v386;
  void *v387;
  const char *v388;
  os_log_s *v389;
  void *v390;
  void *k;
  NSUserDefaults *v392;
  void *v393;
  void *v394;
  unsigned int v395;
  os_log_s *v396;
  os_log_s *v397;
  uint64_t v398;
  void *v399;
  std::string::size_type v400;
  CFNumberRef v401;
  os_log_s *v402;
  os_log_s *v403;
  void *m;
  std::__shared_weak_count *v405;
  std::__shared_weak_count *v406;
  std::__shared_weak_count *v407;
  uint64_t v408;
  BOOL v409;
  unint64_t *v410;
  unint64_t v411;
  uint64_t v412;
  os_log_s *v413;
  os_log_s *v414;
  os_log_s *v415;
  _BYTE *v416;
  int v417;
  std::string *v418;
  std::string::size_type v419;
  int32x2_t v420;
  int64x2_t v421;
  int8x16_t v422;
  os_log_s *v423;
  os_log_s *v424;
  uint64_t *v425;
  os_log_s *v426;
  os_log_s *v427;
  os_log_s *v428;
  os_log_s *v429;
  os_log_s *v430;
  os_log_s *v431;
  os_log_s *v432;
  std::__shared_weak_count *v433;
  unint64_t *v434;
  unint64_t v435;
  void *v437;
  uint64_t v438;
  id v439;
  void *v440;
  void *v441;
  os_log_s *v442;
  void *v443;
  std::string *p_dst;
  std::logic_error *v445;
  uint64_t v446;
  id v447;
  os_log_s *v448;
  os_log_s *v449;
  std::runtime_error *exception;
  std::runtime_error *v451;
  uint64_t v452;
  id v453;
  os_log_s *v454;
  os_log_s *v455;
  uint64_t v456;
  id v457;
  os_log_s *v458;
  os_log_s *v459;
  os_log_s *v460;
  os_log_s *log;
  uint64_t loga;
  _DWORD *v464;
  BOOL v465;
  std::string::size_type v466;
  __int128 v467;
  std::__shared_count v468;
  __int128 v469;
  __int128 v470;
  uint64_t *v471;
  os_signpost_id_t v472;
  std::string v473;
  CFStringRef v474;
  CFStringRef v475;
  CFStringRef v476;
  uint64_t *v477;
  void *v478;
  unint64_t v479;
  CFTypeRef v480[2];
  int64_t v481;
  CFStringRef v482[2];
  CFTypeRef cf;
  CFTypeRef v484;
  unsigned __int8 v485;
  CFStringRef v486[2];
  std::string v487;
  std::string __p;
  std::string __dst;
  uint64_t cap;
  void *v491;
  void *v492;
  _BYTE buf[56];
  const char *v494;
  int v495;
  _BYTE v496[28];
  _BYTE v497[28];
  unint64_t v498;
  unint64_t v499;
  unint64_t v4 = (os_log_s *)*(id *)sub_138E8(24);
  uint64_t v5 = v4;
  if (v4 && os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    int v6 = (void *)(a1 + 712);
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "DSPChain.mm";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 607;
    *(_WORD *)&buf[18] = 2080;
    *(void *)&buf[20] = v6;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Initializing DSP chain %s", buf, 0x1Cu);
  }

  if ((sub_14F834() & 1) == 0 && sub_EAA74("VA_DSPInitialization", 0x14uLL) == &qword_4938E0)
  {
    os_signpost_id_t v8 = 0LL;
  }

  else
  {
    unsigned __int8 v7 = atomic_load((unsigned __int8 *)&qword_493908);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
    {
      qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_493908);
    }

    os_signpost_id_t v8 = os_signpost_id_generate((os_log_t)qword_493900);
    unsigned __int8 v9 = atomic_load((unsigned __int8 *)&qword_493908);
    if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
    {
      qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_493908);
    }

    uint64_t v10 = (os_log_s *)(id)qword_493900;
    unsigned int v11 = v10;
    if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
    {
      int v12 = (void *)(a1 + 712);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315138;
      *(void *)&uint8_t buf[4] = v12;
      _os_signpost_emit_with_name_impl( &dword_0,  v11,  OS_SIGNPOST_INTERVAL_BEGIN,  v8,  "VA_DSPInitialization",  "Initializing DSP: %s",  buf,  0xCu);
    }
  }

  v472 = v8;
  uint64_t v13 = sub_138E8(42);
  if ((*(_BYTE *)(v13 + 8) & 1) != 0)
  {
    unint64_t v14 = (os_log_s *)*(id *)v13;
    if (v14)
    {
      int v15 = v14;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "SignpostUtilities.h";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 91;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "kDSPInitialization";
        _os_log_impl(&dword_0, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d Starting measurement for signpost %s", buf, 0x1Cu);
      }
    }
  }

  if (!*(void *)(a1 + 1128)) {
    goto LABEL_152;
  }
  v478 = 0LL;
  v479 = 0LL;
  v477 = (uint64_t *)&v478;
  (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(void *)a1 + 184LL))(v497, a1);
  sub_1478DC((uint64_t)buf, *(CFDictionaryRef *)(a1 + 1128));
  sub_1478DC((uint64_t)&__dst, *(CFDictionaryRef *)(a1 + 1128));
  __dst.__r_.__value_.__l.__size_ = (int64_t)(cap - __dst.__r_.__value_.__l.__cap_) >> 3;
  while (1)
  {
    if (*(void *)buf && *(void *)&buf[8] != (uint64_t)(*(void *)&buf[24] - *(void *)&buf[16]) >> 3)
    {
      std::string::size_type v16 = __dst.__r_.__value_.__r.__words[0];
      goto LABEL_29;
    }

    std::string::size_type v16 = __dst.__r_.__value_.__r.__words[0];
    if (!__dst.__r_.__value_.__r.__words[0]
      || __dst.__r_.__value_.__l.__size_ == (int64_t)(cap - __dst.__r_.__value_.__l.__cap_) >> 3)
    {
      break;
    }

LABEL_362:
        v187 = 0LL;
      }

      else
      {
        v186 = *(id *)sub_138E8(24);
        if (!v186) {
          goto LABEL_362;
        }
        v187 = (os_log_s *)v186;
        if (os_log_type_enabled(v187, OS_LOG_TYPE_DEFAULT))
        {
          v188 = (*(uint64_t (**)(void))(**(void **)v168 + 24LL))(*(void *)v168);
          sub_2CA1C(&__dst, v188);
          if ((__dst.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v189 = &__dst;
          }
          else {
            v189 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "DSPChain.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 845;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = v189;
          *(_WORD *)&buf[28] = 2048;
          *(void *)&buf[30] = a1;
          v190 = "%25s:%-5d ***** VolumeCommand: thermal processor type not found '%s' in dspchain: %p";
          v191 = v187;
          v192 = 38;
          goto LABEL_359;
        }
      }

      goto LABEL_364;
    }

    goto LABEL_379;
  }

LABEL_361:
      }
    }
  }

  v209 = (_OWORD *)(a1 + 376);
  if (*(_BYTE *)(a1 + 392)) {
    goto LABEL_365;
  }
  if (!*(_BYTE *)(a1 + 796))
  {
    if (!*(void *)(a1 + 784)) {
      goto LABEL_365;
    }
    sub_B8F68((uint64_t *)buf, (uint64_t *)(*(void *)(a1 + 776) + 16LL), "", 1965);
    v259 = *(std::__shared_weak_count **)&buf[8];
    v260 = *(_DWORD *)(*(void *)buf + 264LL);
    if (*(void *)&buf[8])
    {
      v261 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        v262 = __ldaxr(v261);
      while (__stlxr(v262 - 1, v261));
      if (!v262)
      {
        ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
        std::__shared_weak_count::__release_weak(v259);
      }
    }

    if (v260 > 1647718501)
    {
    }

    else if (v260 != 1633759844 && v260 != 1634231920 && v260 != 1635085420)
    {
      goto LABEL_365;
    }

    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 120LL))(a1, 1751474546LL)
      || !*(_BYTE *)(a1 + 796))
    {
      goto LABEL_365;
    }
  }

  memset(buf, 0, 24);
  if (qword_4919C8 != -1) {
    dispatch_once(&qword_4919C8, &stru_473A98);
  }
  if (off_4919D0)
  {
    v254 = off_4919D0(2LL, buf);
    v255 = *(void **)buf;
    v256 = (uint64_t *)(a1 + 736);
    *(void *)(a1 + 736) = v254;
    if (v255)
    {
      *(void *)&buf[8] = v255;
      operator delete(v255);
      v254 = *v256;
    }

    if (v254 == 561211748)
    {
      v257 = (os_log_s *)*(id *)sub_138E8(24);
      v258 = v257;
      if (v257 && os_log_type_enabled(v257, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "DSPChain.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 890;
        _os_log_impl( &dword_0,  v258,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PlaybackDosimetry : ADAM Failed to create a session",  buf,  0x12u);
      }

      goto LABEL_365;
    }
  }

  else
  {
    v254 = 560033897LL;
    v256 = (uint64_t *)(a1 + 736);
    *(void *)(a1 + 736) = 560033897LL;
  }

  sub_7D084(buf, "VA_AUSPL");
  if (qword_4919C8 != -1) {
    dispatch_once(&qword_4919C8, &stru_473A98);
  }
  if (off_4919F8) {
    off_4919F8(v254, 0LL, buf);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  __p.__r_.__value_.__r.__words[0] = 0LL;
  LODWORD(cf) = 0;
  sub_19273C(a1, &__p, (float *)&cf);
  sub_192A74((void *)a1, (const __CFDictionary *)__p.__r_.__value_.__l.__data_, *(float *)&cf);
  v263 = *v256;
  if (qword_4919C8 != -1) {
    dispatch_once(&qword_4919C8, &stru_473A98);
  }
  if (off_491A08) {
    off_491A08(v263);
  }
  v264 = *(std::__shared_weak_count **)(a1 + 816);
  *(void *)(a1 + 808) = 0LL;
  *(void *)(a1 + 816) = 0LL;
  if (v264) {
    std::__shared_weak_count::__release_weak(v264);
  }
  *(_DWORD *)(a1 + 800) = 1701868910;
  sub_9DCB8((uint64_t *)&__dst, (void *)(a1 + 768));
  int size = (std::string *)__dst.__r_.__value_.__l.__size_;
  if ((std::string *)__dst.__r_.__value_.__l.__size_ != &__dst)
  {
    v266 = (int *)(a1 + 800);
    do
    {
      v267 = size->__r_.__value_.__l.__cap_;
      if ((*(_WORD *)(v267 + 184) & 1) == 0)
      {
        if (*(void *)(a1 + 816))
        {
          v268 = (os_log_s *)*(id *)sub_138E8(24);
          v269 = v268;
          if (v268 && os_log_type_enabled(v268, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "DSPChain.mm";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 743;
            _os_log_impl( &dword_0,  v269,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d PlaybackDosimetry: multiple output ports?",  buf,  0x12u);
          }

          v267 = size->__r_.__value_.__l.__cap_;
        }

        data = size[1].__r_.__value_.__l.__data_;
        if (data)
        {
          v271 = (unint64_t *)(data + 16);
          do
            v272 = __ldxr(v271);
          while (__stxr(v272 + 1, v271));
        }

        *(void *)(a1 + 808) = v267;
        v273 = *(std::__shared_weak_count **)(a1 + 816);
        *(void *)(a1 + 816) = data;
        if (v273) {
          std::__shared_weak_count::__release_weak(v273);
        }
        v274 = (_DWORD *)size->__r_.__value_.__l.__cap_;
        if (v274[37] == 1885566825)
        {
          *v266 = 1701865584;
        }

        else
        {
          v275 = (*(uint64_t (**)(_DWORD *))(*(void *)v274 + 112LL))(v274);
          if ((v275 & 0xFF00000000LL) != 0) {
            v276 = v275;
          }
          else {
            v276 = 1701868910;
          }
          *v266 = v276;
          v277 = *(id *)sub_138E8(24);
          v278 = v277;
          if (v277)
          {
            v279 = (os_log_s *)v277;
            if (os_log_type_enabled(v279, OS_LOG_TYPE_DEFAULT))
            {
              sub_2CA1C(v497, *v266);
              v280 = v497;
              if (v497[23] < 0) {
                v280 = *(_BYTE **)v497;
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
              *(void *)&uint8_t buf[4] = "DSPChain.mm";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 759;
              *(_WORD *)&buf[18] = 2080;
              *(void *)&buf[20] = v280;
              _os_log_impl( &dword_0,  v279,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d PlaybackDosimetry: device's default endpoint type: %s",  buf,  0x1Cu);
              if ((v497[23] & 0x80000000) != 0) {
                operator delete(*(void **)v497);
              }
            }
          }

          if (*v266 == 1701865584)
          {
            v281 = size->__r_.__value_.__l.__cap_;
            if (*(_DWORD *)(v281 + 148) == 1885544823)
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 0;
              if ((sub_1FFB50((void *)v281, 0, (float *)buf) & 1) == 0)
              {
                v282 = sub_195228(*(void *)(size->__r_.__value_.__l.__cap_ + 192), (int *)(a1 + 800));
                if ((_DWORD)v282)
                {
                  v283 = *(id *)sub_138E8(24);
                  v284 = v283;
                  if (v283)
                  {
                    v285 = (os_log_s *)v283;
                    if (os_log_type_enabled(v285, OS_LOG_TYPE_ERROR))
                    {
                      v460 = v285;
                      sub_2CA1C(v497, v282);
                      v286 = v497[23];
                      v287 = *(_BYTE **)v497;
                      sub_2CA1C(v496, *v266);
                      v288 = v497;
                      if (v286 < 0) {
                        v288 = v287;
                      }
                      v289 = v496;
                      if (v496[23] < 0) {
                        v289 = *(_BYTE **)v496;
                      }
                      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                      *(void *)&uint8_t buf[4] = "DSPChain.mm";
                      *(_WORD *)&_BYTE buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 773;
                      *(_WORD *)&buf[18] = 2080;
                      *(void *)&buf[20] = v288;
                      *(_WORD *)&buf[28] = 2080;
                      *(void *)&buf[30] = v289;
                      v285 = v460;
                      _os_log_impl( &dword_0,  v460,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PlaybackDosimetry: Failed to fetch 3rd party user selected endpoint type. err: '%s', d efault endpoint type: %s",  buf,  0x26u);
                      if ((v496[23] & 0x80000000) != 0) {
                        operator delete(*(void **)v496);
                      }
                      if ((v497[23] & 0x80000000) != 0) {
                        operator delete(*(void **)v497);
                      }
                    }
                  }
                }

                else
                {
                  v290 = *(id *)sub_138E8(24);
                  v291 = v290;
                  if (v290)
                  {
                    v292 = (os_log_s *)v290;
                    if (os_log_type_enabled(v292, OS_LOG_TYPE_DEFAULT))
                    {
                      sub_2CA1C(v497, *v266);
                      v293 = v497;
                      if (v497[23] < 0) {
                        v293 = *(_BYTE **)v497;
                      }
                      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                      *(void *)&uint8_t buf[4] = "DSPChain.mm";
                      *(_WORD *)&_BYTE buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 767;
                      *(_WORD *)&buf[18] = 2080;
                      *(void *)&buf[20] = v293;
                      _os_log_impl( &dword_0,  v292,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d PlaybackDosimetry: 3rd party user selected endpoint type: %s",  buf,  0x1Cu);
                      if ((v497[23] & 0x80000000) != 0) {
                        operator delete(*(void **)v497);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      int size = (std::string *)size->__r_.__value_.__l.__size_;
    }

    while (size != &__dst);
  }

  v471 = (uint64_t *)(a1 + 808);
  sub_1BB88((uint64_t *)&__dst);
  v294 = *(std::__shared_weak_count **)(a1 + 816);
  if (!v294) {
    goto LABEL_562;
  }
  v295 = std::__shared_weak_count::lock(v294);
  *(void *)&v497[8] = v295;
  if (!v295) {
    goto LABEL_562;
  }
  v296 = v295;
  *(void *)v497 = *v471;
  v297 = *(void *)v497;
  if (!*(void *)v497) {
    goto LABEL_558;
  }
  v298 = *(void *)(*(void *)v497 + 192LL);
  if (!v298) {
    goto LABEL_558;
  }
  v299 = (*(uint64_t (**)(void))(**(void **)v497 + 112LL))(*(void *)v497);
  v300 = (v299 & 0xFF00000000LL) != 0 && v299 == 1701865584LL;
  if (!v300) {
    goto LABEL_558;
  }
  v301 = operator new(0xCuLL);
  v302 = (char *)(v301 + 3);
  *(void *)v301 = 0x6F757470766F6C64LL;
  v301[2] = 0;
  if (*(_DWORD *)(v297 + 148) == 1885544823)
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 0;
    if ((sub_1FFB50((void *)v297, 0, (float *)buf) & 1) == 0)
    {
      v303 = (char *)sub_87E70(2uLL);
      *(void *)(v303 + 12) = 0x676C6F6275736476LL;
      *((_DWORD *)v303 + 5) = 0;
      v302 = v303 + 24;
      v304 = *(void *)v301;
      *((_DWORD *)v303 + 2) = v301[2];
      *(void *)v303 = v304;
      operator delete(v301);
      v301 = v303;
    }
  }

  v305 = 0LL;
  else {
    v306 = (v302 - (char *)v301) / 12;
  }
  v464 = v301;
  loga = v298;
  while (2)
  {
    v307 = &v301[3 * v305];
    v308 = *(void *)v307;
    *(_DWORD *)&v496[8] = v307[2];
    *(void *)v496 = v308;
    if ((*(unsigned int (**)(uint64_t, _BYTE *, void, uint64_t))(*(void *)v298 + 336LL))( v298,  v496,  sub_1941B8,  a1))
    {
      v309 = v298;
      v310 = v209;
      v311 = v306;
      v312 = (*(uint64_t (**)(uint64_t))(*(void *)v309 + 120LL))(v309);
      v313 = v312;
      *(void *)AudioObjectPropertyAddress buf = *(void *)v307;
      *(_DWORD *)&buf[8] = v307[2];
      v314 = *(char **)(a1 + 832);
      v315 = *(void *)(a1 + 840);
      if ((unint64_t)v314 >= v315)
      {
        v325 = *(char **)(a1 + 824);
        v326 = (v314 - v325) >> 4;
        v327 = v326 + 1;
        v328 = v315 - (void)v325;
        if (v328 >> 3 > v327) {
          v327 = v328 >> 3;
        }
        if (v327)
        {
          if (v327 >> 60) {
            sub_7A8C4();
          }
          v329 = v327;
          v330 = (char *)operator new(16 * v327);
        }

        else
        {
          v330 = 0LL;
          v329 = 0LL;
        }

        v331 = &v330[16 * v326];
        *(_DWORD *)v331 = v313;
        *(void *)(v331 + 4) = *(void *)buf;
        *((_DWORD *)v331 + 3) = *(_DWORD *)&buf[8];
        v332 = v331;
        v306 = v311;
        if (v314 != v325)
        {
          do
          {
            v333 = *((_DWORD *)v314 - 4);
            v314 -= 16;
            *((_DWORD *)v332 - 4) = v333;
            v332 -= 16;
            v334 = *(void *)(v314 + 4);
            *((_DWORD *)v332 + 3) = *((_DWORD *)v314 + 3);
            *(void *)(v332 + 4) = v334;
          }

          while (v314 != v325);
          v314 = *(char **)(a1 + 824);
        }

        v209 = v310;
        *(void *)(a1 + 824) = v332;
        v316 = v331 + 16;
        *(void *)(a1 + 832) = v331 + 16;
        *(void *)(a1 + 840) = &v330[16 * v329];
        v298 = loga;
        if (v314) {
          operator delete(v314);
        }
      }

      else
      {
        *(_DWORD *)v314 = v312;
        *(void *)(v314 + 4) = *(void *)buf;
        *((_DWORD *)v314 + 3) = *(_DWORD *)&buf[8];
        v316 = v314 + 16;
        v306 = v311;
        v209 = v310;
        v298 = loga;
      }

      *(void *)(a1 + 832) = v316;
      *(_DWORD *)AudioObjectPropertyAddress buf = (*(uint64_t (**)(uint64_t))(*(void *)v298 + 120LL))(v298);
      v301 = v464;
      sub_32A38((uint64_t **)(a1 + 848), (uint64_t *)(a1 + 856), *(unsigned int *)buf, buf);
      v335 = *(id *)sub_138E8(24);
      if (v335)
      {
        v318 = (os_log_s *)v335;
        if (os_log_type_enabled(v318, OS_LOG_TYPE_DEFAULT))
        {
          sub_2CA1C(&__dst, *v307);
          v336 = (char)__dst.__r_.__value_.__s.__size_;
          v337 = __dst.__r_.__value_.__r.__words[0];
          v338 = (*(uint64_t (**)(uint64_t))(*(void *)v298 + 120LL))(v298);
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          v339 = &__dst;
          if (v336 < 0) {
            v339 = (std::string *)v337;
          }
          *(void *)&uint8_t buf[4] = "DSPChain.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2495;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = v339;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v338;
          *(_WORD *)&buf[34] = 2048;
          *(void *)&buf[36] = a1;
          v323 = v318;
          v324 = "%25s:%-5d PlaybackDosimetry : registered device property(%s) listener with device [%u], %p";
          goto LABEL_550;
        }

        goto LABEL_552;
      }

        v204 = v197;
        goto LABEL_362;
      }

      if ((*(unsigned int (**)(uint64_t))(*(void *)*v184 + 112LL))(*v184))
      {
        v195 = sub_138E8(2);
        if ((*(_BYTE *)(v195 + 8) & 1) == 0) {
          goto LABEL_364;
        }
        v196 = *(id *)v195;
        if (!v196) {
          goto LABEL_364;
        }
        v197 = (os_log_s *)v196;
        if (os_log_type_enabled(v197, OS_LOG_TYPE_DEBUG))
        {
          sub_33464(&v552, (unsigned int *)&v535);
          v198 = &v552;
          if ((v552.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            v198 = (std::string *)v552.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)v539 = 136315650;
          *(void *)&v539[4] = v188;
          *(_WORD *)&v539[12] = 1024;
          *(_DWORD *)&v539[14] = 4186;
          *(_WORD *)&v539[18] = 2080;
          *(void *)&v539[20] = v198;
          v199 = v197;
          v200 = "%25s:%-5d Ignoring hidden VAD [%s]";
          goto LABEL_359;
        }

        goto LABEL_361;
      }

LABEL_553:
      v318 = 0LL;
    }

    else
    {
      v317 = *(id *)sub_138E8(24);
      if (!v317) {
        goto LABEL_553;
      }
      v318 = (os_log_s *)v317;
      if (os_log_type_enabled(v318, OS_LOG_TYPE_DEFAULT))
      {
        sub_2CA1C(&__dst, *v307);
        v319 = (char)__dst.__r_.__value_.__s.__size_;
        v320 = __dst.__r_.__value_.__r.__words[0];
        v321 = (*(uint64_t (**)(uint64_t))(*(void *)v298 + 120LL))(v298);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        v322 = &__dst;
        if (v319 < 0) {
          v322 = (std::string *)v320;
        }
        *(void *)&uint8_t buf[4] = "DSPChain.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2500;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v322;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = v321;
        *(_WORD *)&buf[34] = 2048;
        *(void *)&buf[36] = a1;
        v323 = v318;
        v324 = "%25s:%-5d PlaybackDosimetry : could not register device property(%s) listener with device [%u], %p";
LABEL_550:
        _os_log_impl(&dword_0, v323, OS_LOG_TYPE_DEFAULT, v324, buf, 0x2Cu);
      }

LABEL_552:
    }

    if (++v305 != v306) {
      continue;
    }
    break;
  }

  if (v301) {
    operator delete(v301);
  }
  v296 = *(std::__shared_weak_count **)&v497[8];
  if (*(void *)&v497[8])
  {
LABEL_558:
    v340 = (unint64_t *)&v296->__shared_owners_;
    do
      v341 = __ldaxr(v340);
    while (__stlxr(v341 - 1, v340));
    if (!v341)
    {
      ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
      std::__shared_weak_count::__release_weak(v296);
    }
  }

LABEL_562:
  if (*(void *)(a1 + 824) == *(void *)(a1 + 832))
  {
    v342 = (os_log_s *)*(id *)sub_138E8(24);
    v343 = v342;
    if (v342 && os_log_type_enabled(v342, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "DSPChain.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2465;
      _os_log_impl( &dword_0,  v343,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d PlaybackDosimetry : no wireless headphone devices found to register properties",  buf,  0x12u);
    }
  }

  sub_193CC0((_BYTE *)a1, v471, *(unsigned int *)(a1 + 800));
  v344 = (os_log_s *)*(id *)sub_138E8(24);
  v345 = v344;
  if (v344 && os_log_type_enabled(v344, OS_LOG_TYPE_DEFAULT))
  {
    v346 = *(void *)(a1 + 736);
    v347 = "Y";
    v300 = *(_BYTE *)(a1 + 797) == 0;
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    if (v300) {
      v347 = "N";
    }
    *(void *)&uint8_t buf[4] = "DSPChain.mm";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 882;
    *(_WORD *)&buf[18] = 2048;
    *(void *)&buf[20] = v346;
    *(_WORD *)&buf[28] = 2080;
    *(void *)&buf[30] = v347;
    _os_log_impl( &dword_0,  v345,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d PlaybackDosimetry : ADAM Client Initialized: %llu, report SPL: %s",  buf,  0x26u);
  }

  if (__p.__r_.__value_.__r.__words[0]) {
    CFRelease(__p.__r_.__value_.__l.__data_);
  }
LABEL_365:
  v210 = *(std::__shared_count *)(a1 + 8);
  v468 = v210;
  v211 = *(std::__shared_weak_count **)(a1 + 16);
  if (v210.__shared_owners_)
  {
    v212 = (unint64_t *)(v210.__shared_owners_ + 16);
    do
      v213 = __ldxr(v212);
    while (__stxr(v213 + 1, v212));
  }

  v214 = (std::__shared_weak_count *)operator new(0x98uLL);
  *(_OWORD *)&v214->__shared_owners_ = 0u;
  v215 = (unint64_t *)&v214->__shared_owners_;
  v214->__vftable = (std::__shared_weak_count_vtbl *)off_473D20;
  v214[1].std::__shared_count = 0u;
  v216 = (unint64_t)&v214[1];
  v214[1].__shared_weak_owners_ = (uint64_t)&v214[1];
  v217 = operator new(0x30uLL);
  v218 = (std::__shared_weak_count *)v217;
  v217[1] = 0LL;
  v219 = v217 + 1;
  v217[2] = 0LL;
  *v217 = off_473D58;
  v217[3] = 0LL;
  v217[4] = 0LL;
  v217[5] = (char *)v214 + 40;
  v214[2].__vftable = (std::__shared_weak_count_vtbl *)(v217 + 3);
  v214[2].__shared_owners_ = (uint64_t)v217;
  do
    v220 = __ldxr(v219);
  while (__stxr(v220 + 1, v219));
  v221 = v217 + 2;
  do
    v222 = __ldxr(v221);
  while (__stxr(v222 + 1, v221));
  v217[3] = v217 + 3;
  v217[4] = v217;
  do
    v223 = __ldaxr(v219);
  while (__stlxr(v223 - 1, v219));
  if (!v223)
  {
    (*(void (**)(void *))(*v217 + 16LL))(v217);
    std::__shared_weak_count::__release_weak(v218);
  }

  LOBYTE(v214[2].__shared_weak_owners_) = 0;
  LOBYTE(v214[3].__shared_owners_) = 0;
  LOWORD(v214[3].__shared_weak_owners_) = 0;
  v214[4].std::__shared_count = v468;
  if (v211)
  {
    v224 = (unint64_t *)&v211->__shared_weak_owners_;
    do
      v225 = __ldxr(v224);
    while (__stxr(v225 + 1, v224));
  }

  v226 = mach_absolute_time();
  v227 = __udivti3(125 * v226, (v226 * (unsigned __int128)0x7DuLL) >> 64, 3LL, 0LL);
  v214[4].__shared_weak_owners_ = v227;
  v214[5].__vftable = (std::__shared_weak_count_vtbl *)v227;
  LOBYTE(v214[5].__shared_owners_) = 0;
  BYTE4(v214[5].__shared_owners_) = 0;
  LOBYTE(v214[5].__shared_weak_owners_) = 0;
  BYTE4(v214[5].__shared_weak_owners_) = 0;
  LODWORD(v214[6].__vftable) = 0;
  if (v211) {
    std::__shared_weak_count::__release_weak(v211);
  }
  *(void *)&v228 = v214 + 1;
  *((void *)&v228 + 1) = v214;
  shared_owners = (std::__shared_weak_count *)v214[1].__shared_owners_;
  if (!shared_owners)
  {
    do
      v233 = __ldxr(v215);
    while (__stxr(v233 + 1, v215));
    v234 = (unint64_t *)&v214->__shared_weak_owners_;
    do
      v235 = __ldxr(v234);
    while (__stxr(v235 + 1, v234));
    v214[1].__vftable = (std::__shared_weak_count_vtbl *)&v214[1];
    v214[1].__shared_owners_ = (uint64_t)v214;
    goto LABEL_391;
  }

  if (shared_owners->__shared_owners_ == -1)
  {
    do
      v230 = __ldxr(v215);
    while (__stxr(v230 + 1, v215));
    v469 = v228;
    v231 = (unint64_t *)&v214->__shared_weak_owners_;
    do
      v232 = __ldxr(v231);
    while (__stxr(v232 + 1, v231));
    v214[1].__vftable = (std::__shared_weak_count_vtbl *)&v214[1];
    v214[1].__shared_owners_ = (uint64_t)v214;
    std::__shared_weak_count::__release_weak(shared_owners);
    v228 = v469;
    do
LABEL_391:
      v236 = __ldaxr(v215);
    while (__stlxr(v236 - 1, v215));
    if (!v236)
    {
      v470 = v228;
      ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
      std::__shared_weak_count::__release_weak(v214);
      v228 = v470;
    }
  }

  v237 = *(std::__shared_weak_count **)(a1 + 384);
  *v209 = v228;
  if (v237)
  {
    v238 = (unint64_t *)&v237->__shared_owners_;
    do
      v239 = __ldaxr(v238);
    while (__stlxr(v239 - 1, v238));
    if (!v239)
    {
      ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
      std::__shared_weak_count::__release_weak(v237);
    }
  }

  v240 = *(void *)(a1 + 872);
  *(_BYTE *)(a1 + 392) = 1;
  if (v240)
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 1635087726;
    AUPBPropertiesChanged(*(void *)(v240 + 16), 1LL, buf, 0LL, 0LL);
  }

  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 56LL))( a1,  1685287015LL,  1668572518LL,  0LL))
  {
    v241 = (os_log_s *)*(id *)sub_138E8(24);
    v242 = v241;
    if (v241 && os_log_type_enabled(v241, OS_LOG_TYPE_DEFAULT))
    {
      v243 = (void *)(a1 + 712);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "DSPChain.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 635;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = v243;
      _os_log_impl( &dword_0,  v242,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Registering DSP chain %s for ControlEffortValueManager updates",  buf,  0x1Cu);
    }

    sub_868B0();
    v244 = *(std::__shared_weak_count **)(a1 + 16);
    if (v244)
    {
      v245 = *(void *)(a1 + 8);
      v246 = (unint64_t *)&v244->__shared_weak_owners_;
      do
        v247 = __ldxr(v246);
      while (__stxr(v247 + 1, v246));
      v248 = std::__shared_weak_count::lock(v244);
      *(void *)&v497[8] = v248;
      if (v248)
      {
        *(void *)v497 = v245;
        if (!v245)
        {
          v348 = v248;
          goto LABEL_665;
        }

        v249 = (os_log_t *)sub_138E8(24);
        v250 = *v249;
        if (*v249 && os_log_type_enabled(*v249, OS_LOG_TYPE_DEFAULT))
        {
          else {
            __dst = *(std::string *)(v245 + 712);
          }
          v351 = &__dst;
          if ((__dst.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            v351 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "ControlEffortValueManager.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 68;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = v351;
          _os_log_impl( &dword_0,  v250,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Adding chain %s to the control effort manager map",  buf,  0x1Cu);
        }

        std::recursive_mutex::lock(&stru_48C9D8);
        v352 = 0x9DDFEA08EB382D69LL * (((8 * v245) + 8LL) ^ HIDWORD(v245));
        v353 = 0x9DDFEA08EB382D69LL * (HIDWORD(v245) ^ (v352 >> 47) ^ v352);
        v354 = 0x9DDFEA08EB382D69LL * (v353 ^ (v353 >> 47));
        v355 = *((void *)&xmmword_48CA18 + 1);
        if (*((void *)&xmmword_48CA18 + 1))
        {
          v356 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_48CA18 + 8));
          v356.i16[0] = vaddlv_u8(v356);
          if (v356.u32[0] > 1uLL)
          {
            v216 = 0x9DDFEA08EB382D69LL * (v353 ^ (v353 >> 47));
            if (v354 >= *((void *)&xmmword_48CA18 + 1)) {
              v216 = v354 % *((void *)&xmmword_48CA18 + 1);
            }
          }

          else
          {
            v216 = v354 & (*((void *)&xmmword_48CA18 + 1) - 1LL);
          }

          v357 = *(void **)(xmmword_48CA18 + 8 * v216);
          if (v357)
          {
            for (uint64_t i = (void *)*v357; i; uint64_t i = (void *)*i)
            {
              v359 = i[1];
              if (v359 == v354)
              {
                if (i[2] == v245) {
                  goto LABEL_664;
                }
              }

              else
              {
                if (v356.u32[0] > 1uLL)
                {
                  if (v359 >= *((void *)&xmmword_48CA18 + 1)) {
                    v359 %= *((void *)&xmmword_48CA18 + 1);
                  }
                }

                else
                {
                  v359 &= *((void *)&xmmword_48CA18 + 1) - 1LL;
                }

                if (v359 != v216) {
                  break;
                }
              }
            }
          }
        }

        v360 = operator new(0x28uLL);
        *v360 = 0LL;
        v360[1] = v354;
        v360[2] = v245;
        v360[3] = v245;
        v360[4] = v244;
        do
          v361 = __ldxr(v246);
        while (__stxr(v361 + 1, v246));
        v362 = (float)(unint64_t)(qword_48CA30 + 1);
        if (!v355 || (float)(*(float *)&dword_48CA38 * (float)v355) < v362)
        {
          v363 = 1LL;
          if (v355 >= 3) {
            v363 = (v355 & (v355 - 1)) != 0;
          }
          v364 = v363 | (2 * v355);
          v365 = vcvtps_u32_f32(v362 / *(float *)&dword_48CA38);
          if (v364 <= v365) {
            prime = (int8x8_t)v365;
          }
          else {
            prime = (int8x8_t)v364;
          }
          if (*(void *)&prime == 1LL)
          {
            prime = (int8x8_t)2LL;
            v367 = &selRef_IsSimulatedDevice_;
          }

          else
          {
            v367 = &selRef_IsSimulatedDevice_;
            if ((*(void *)&prime & (*(void *)&prime - 1LL)) != 0) {
              prime = (int8x8_t)std::__next_prime(*(void *)&prime);
            }
          }

          v355 = (unint64_t)v367[324];
          if (*(void *)&prime <= v355)
          {
            if (*(void *)&prime < v355)
            {
              v374 = vcvtps_u32_f32((float)(unint64_t)qword_48CA30 / *(float *)&dword_48CA38);
              if (v355 < 3
                || (v375 = (uint8x8_t)vcnt_s8((int8x8_t)v355), v375.i16[0] = vaddlv_u8(v375), v375.u32[0] > 1uLL))
              {
                v374 = std::__next_prime(v374);
              }

              else
              {
                v376 = 1LL << -(char)__clz(v374 - 1);
                if (v374 >= 2) {
                  v374 = v376;
                }
              }

              if (*(void *)&prime <= v374) {
                prime = (int8x8_t)v374;
              }
              if (*(void *)&prime >= v355)
              {
                v355 = (unint64_t)v367[324];
              }

              else
              {
                if (prime) {
                  goto LABEL_620;
                }
                v437 = (void *)xmmword_48CA18;
                *(void *)&xmmword_48CA18 = 0LL;
                if (v437) {
                  operator delete(v437);
                }
                v355 = 0LL;
                v367[324] = 0LL;
              }
            }
          }

          else
          {
LABEL_620:
            if (*(void *)&prime >> 61) {
              sub_7A8C4();
            }
            v368 = operator new(8LL * *(void *)&prime);
            v369 = (void *)xmmword_48CA18;
            *(void *)&xmmword_48CA18 = v368;
            if (v369) {
              operator delete(v369);
            }
            v370 = 0LL;
            v367[324] = (char *)prime;
            do
              *(void *)(xmmword_48CA18 + 8 * v370++) = 0LL;
            while (*(void *)&prime != v370);
            v371 = (void **)qword_48CA28;
            if (qword_48CA28)
            {
              v372 = *(void *)(qword_48CA28 + 8);
              v373 = (uint8x8_t)vcnt_s8(prime);
              v373.i16[0] = vaddlv_u8(v373);
              if (v373.u32[0] > 1uLL)
              {
                if (v372 >= *(void *)&prime) {
                  v372 %= *(void *)&prime;
                }
              }

              else
              {
                v372 &= *(void *)&prime - 1LL;
              }

              *(void *)(xmmword_48CA18 + 8 * v372) = &qword_48CA28;
              for (j = *v371; j; v372 = v378)
              {
                v378 = j[1];
                if (v373.u32[0] > 1uLL)
                {
                  if (v378 >= *(void *)&prime) {
                    v378 %= *(void *)&prime;
                  }
                }

                else
                {
                  v378 &= *(void *)&prime - 1LL;
                }

                if (v378 != v372)
                {
                  if (!*(void *)(xmmword_48CA18 + 8 * v378))
                  {
                    *(void *)(xmmword_48CA18 + 8 * v378) = v371;
                    goto LABEL_645;
                  }

                  *v371 = (void *)*j;
                  *j = **(void **)(xmmword_48CA18 + 8 * v378);
                  **(void **)(xmmword_48CA18 + 8 * v378) = j;
                  j = v371;
                }

                v378 = v372;
LABEL_645:
                v371 = (void **)j;
                j = (void *)*j;
              }
            }

            v355 = (unint64_t)prime;
          }

          if ((v355 & (v355 - 1)) != 0)
          {
            if (v354 >= v355) {
              v216 = v354 % v355;
            }
            else {
              v216 = v354;
            }
          }

          else
          {
            v216 = (v355 - 1) & v354;
          }
        }

        v379 = xmmword_48CA18;
        v380 = *(void **)(xmmword_48CA18 + 8 * v216);
        if (v380)
        {
          *v360 = *v380;
          goto LABEL_662;
        }

        *v360 = qword_48CA28;
        qword_48CA28 = (uint64_t)v360;
        *(void *)(v379 + 8 * v216) = &qword_48CA28;
        if (*v360)
        {
          v381 = *(void *)(*v360 + 8LL);
          if ((v355 & (v355 - 1)) != 0)
          {
            if (v381 >= v355) {
              v381 %= v355;
            }
          }

          else
          {
            v381 &= v355 - 1;
          }

          v380 = (void *)(xmmword_48CA18 + 8 * v381);
LABEL_662:
          *v380 = v360;
        }

        ++qword_48CA30;
LABEL_664:
        std::recursive_mutex::unlock(&stru_48C9D8);
        v382 = COERCE_FLOAT(atomic_load((unsigned int *)&dword_48CA48));
        (*(void (**)(unint64_t, uint64_t, uint64_t, void, float))(*(void *)v245 + 72LL))( v245,  1685287015LL,  1668572518LL,  0LL,  v382);
        v348 = *(std::__shared_weak_count **)&v497[8];
        if (*(void *)&v497[8])
        {
LABEL_665:
          v383 = (unint64_t *)&v348->__shared_owners_;
          do
            v384 = __ldaxr(v383);
          while (__stlxr(v384 - 1, v383));
          if (!v384)
          {
            ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
            std::__shared_weak_count::__release_weak(v348);
          }
        }
      }

      std::__shared_weak_count::__release_weak(v244);
    }
  }

  else
  {
    v251 = (os_log_s *)*(id *)sub_138E8(24);
    v252 = v251;
    if (v251 && os_log_type_enabled(v251, OS_LOG_TYPE_DEFAULT))
    {
      v253 = (void *)(a1 + 712);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "DSPChain.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 641;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = v253;
      _os_log_impl( &dword_0,  v252,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Not registering DSP chain %s for ControlEffortValueManager updates",  buf,  0x1Cu);
    }
  }

  if (_os_feature_enabled_impl("AudioDSP", "gm_coex_mitigation")
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 56LL))( a1,  1685287015LL,  1735222127LL,  0LL))
  {
    v385 = (os_log_s *)*(id *)sub_138E8(24);
    v386 = v385;
    if (v385 && os_log_type_enabled(v385, OS_LOG_TYPE_INFO))
    {
      v387 = (void *)(a1 + 712);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "DSPChain.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 649;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = v387;
      v388 = "%25s:%-5d Registering DSP chain %s for GM Interference mitigation";
      goto LABEL_682;
    }
  }

  else
  {
    v389 = (os_log_s *)*(id *)sub_138E8(24);
    v386 = v389;
    if (v389 && os_log_type_enabled(v389, OS_LOG_TYPE_INFO))
    {
      v390 = (void *)(a1 + 712);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "DSPChain.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 655;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = v390;
      v388 = "%25s:%-5d Not registering DSP chain %s for GM Interference mitigation";
LABEL_682:
      _os_log_impl(&dword_0, v386, OS_LOG_TYPE_INFO, v388, buf, 0x1Cu);
    }
  }

  for (k = *(void **)(a1 + 1080); k != *(void **)(a1 + 1088); k += 17)
  {
    if ((unint64_t)(*k - 5LL) <= 1)
    {
      v392 = -[NSUserDefaults initWithSuiteName:]( objc_alloc(&OBJC_CLASS___NSUserDefaults),  "initWithSuiteName:",  @"com.apple.audio.virtualaudio");
      v393 = (void *)objc_claimAutoreleasedReturnValue(-[NSUserDefaults valueForKey:](v392, "valueForKey:", @"windAndDynamics"));
      v394 = v393;
      if (v393)
      {
        v395 = [v393 unsignedIntValue] & 3;
        *(void *)&buf[8] = v395;
        v495 = 3;
        sub_190DD0(a1, 6uLL, (uint64_t)buf);
        sub_9DBD0((uint64_t)&buf[8]);
        buf[8] = v395 > 1;
        v495 = 0;
        sub_190DD0(a1, 5uLL, (uint64_t)buf);
        sub_9DBD0((uint64_t)&buf[8]);
      }

      break;
    }
  }

  if (!*(void *)(a1 + 1072)) {
    goto LABEL_778;
  }
  v396 = (os_log_s *)*(id *)sub_138E8(24);
  v397 = v396;
  if (v396 && os_log_type_enabled(v396, OS_LOG_TYPE_DEFAULT))
  {
    v398 = *(void *)(a1 + 1072);
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "DSPChain.mm";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2991;
    *(_WORD *)&buf[18] = 2112;
    *(void *)&buf[20] = v398;
    _os_log_impl( &dword_0,  v397,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Executing post initialize actions described in dictionary %@",  buf,  0x1Cu);
  }

  sub_1478DC((uint64_t)buf, *(CFDictionaryRef *)(a1 + 1072));
  sub_1478DC((uint64_t)&__dst, *(CFDictionaryRef *)(a1 + 1072));
  v399 = (void *)(a1 + 768);
  __dst.__r_.__value_.__l.__size_ = (int64_t)(cap - __dst.__r_.__value_.__l.__cap_) >> 3;
  while (2)
  {
    if (*(void *)buf && *(void *)&buf[8] != (uint64_t)(*(void *)&buf[24] - *(void *)&buf[16]) >> 3)
    {
      v400 = __dst.__r_.__value_.__r.__words[0];
LABEL_701:
      if (*(_OWORD *)buf == __PAIR128__(__dst.__r_.__value_.__l.__size_, v400)) {
        goto LABEL_770;
      }
      sub_148B9C(&cf, buf);
      v401 = sub_1581F8(&cf);
      if ((_DWORD)v401 == 1936745841)
      {
        v402 = (os_log_s *)*(id *)sub_138E8(20);
        v403 = v402;
        if (v402 && os_log_type_enabled(v402, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v497 = 136315394;
          *(void *)&v497[4] = "DSPChain.mm";
          *(_WORD *)&v497[12] = 1024;
          *(_DWORD *)&v497[14] = 2999;
          _os_log_impl(&dword_0, v403, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Getting SpEQ data from FDR", v497, 0x12u);
        }

        for (m = *(void **)(a1 + 776); m != v399; m = (void *)m[1])
        {
          v405 = (std::__shared_weak_count *)m[3];
          if (v405)
          {
            v406 = std::__shared_weak_count::lock(v405);
            if (v406)
            {
              v407 = v406;
              v408 = m[2];
              if (v408) {
                v409 = *(_DWORD *)(v408 + 144) == 1886613611;
              }
              else {
                v409 = 0;
              }
              v410 = (unint64_t *)&v406->__shared_owners_;
              do
                v411 = __ldaxr(v410);
              while (__stlxr(v411 - 1, v410));
              if (!v411)
              {
                ((void (*)(std::__shared_weak_count *))v406->__on_zero_shared)(v406);
                std::__shared_weak_count::__release_weak(v407);
              }

              if (v409)
              {
                if (m != v399)
                {
                  sub_B8F68((uint64_t *)v480, m + 2, "", 3012);
                  sub_191948((uint64_t)v497, *((void *)v480[0] + 24), COERCE_DOUBLE(1869968496LL));
                  memset(&__p, 0, sizeof(__p));
                  v417 = v497[24];
                  v418 = (std::string *)v497;
                  if (!v497[24]) {
                    v418 = &__p;
                  }
                  v419 = v418->__r_.__value_.__r.__words[0];
                  v420 = vdup_n_s32(v497[24] == 0);
                  v421.i64[0] = v420.u32[0];
                  v421.i64[1] = v420.u32[1];
                  v422 = vandq_s8(*(int8x16_t *)&v497[8], (int8x16_t)vcgezq_s64(vshlq_n_s64(v421, 0x3FuLL)));
                  *(_OWORD *)&v418->__r_.__value_.__r.__words[1] = 0uLL;
                  v418->__r_.__value_.__r.__words[0] = 0LL;
                  *(void *)v496 = v419;
                  *(int8x16_t *)&v496[8] = v422;
                  if (__p.__r_.__value_.__r.__words[0]) {
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  if (v417 && *(void *)v497) {
                    operator delete(*(void **)v497);
                  }
                  if (*(void *)v496 == *(void *)&v496[8])
                  {
                    v423 = (os_log_s *)*(id *)sub_138E8(24);
                    v424 = v423;
                    if (v423 && os_log_type_enabled(v423, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)v497 = 136315394;
                      *(void *)&v497[4] = "DSPChain.mm";
                      *(_WORD *)&v497[12] = 1024;
                      *(_DWORD *)&v497[14] = 3017;
                      _os_log_impl( &dword_0,  v424,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Unable to retrieve data source info from speaker",  v497,  0x12u);
                    }
                  }

                  sub_380650((uint64_t *)&__p, (uint64_t)v496);
                  v425 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
                  if (__p.__r_.__value_.__r.__words[0])
                  {
                    v426 = (os_log_s *)*(id *)sub_138E8(20);
                    v427 = v426;
                    if (v426 && os_log_type_enabled(v426, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)v497 = 136315650;
                      *(void *)&v497[4] = "DSPChain.mm";
                      *(_WORD *)&v497[12] = 1024;
                      *(_DWORD *)&v497[14] = 3020;
                      *(_WORD *)&v497[18] = 2112;
                      *(void *)&v497[20] = v425;
                      _os_log_impl(&dword_0, v427, OS_LOG_TYPE_DEBUG, "%25s:%-5d FDR Speaker EQ data: %@", v497, 0x1Cu);
                    }

                    v477 = v425;
                    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t **, uint64_t, void))(*(void *)a1 + 112LL))( a1,  1685287015LL,  1936745841LL,  &v477,  8LL,  0LL))
                    {
                      v428 = (os_log_s *)*(id *)sub_138E8(24);
                      v429 = v428;
                      if (v428 && os_log_type_enabled(v428, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)v497 = 136315394;
                        *(void *)&v497[4] = "DSPChain.mm";
                        *(_WORD *)&v497[12] = 1024;
                        *(_DWORD *)&v497[14] = 3022;
                        _os_log_impl( &dword_0,  v429,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Failed to set property speq on the DSP!",  v497,  0x12u);
                      }
                    }

                    CFRelease(v425);
                  }

                  else
                  {
                    v431 = (os_log_s *)*(id *)sub_138E8(20);
                    v432 = v431;
                    if (v431 && os_log_type_enabled(v431, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)v497 = 136315394;
                      *(void *)&v497[4] = "DSPChain.mm";
                      *(_WORD *)&v497[12] = 1024;
                      *(_DWORD *)&v497[14] = 3026;
                      _os_log_impl( &dword_0,  v432,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d FDR doesn't have Speaker EQ data",  v497,  0x12u);
                    }
                  }

                  if (*(void *)v496)
                  {
                    *(void *)&v496[8] = *(void *)v496;
                    operator delete(*(void **)v496);
                  }

                  v433 = (std::__shared_weak_count *)v480[1];
                  if (v480[1])
                  {
                    v434 = (unint64_t *)((char *)v480[1] + 8);
                    do
                      v435 = __ldaxr(v434);
                    while (__stlxr(v435 - 1, v434));
                    if (!v435)
                    {
                      ((void (*)(std::__shared_weak_count *))v433->__on_zero_shared)(v433);
                      std::__shared_weak_count::__release_weak(v433);
                    }
                  }

                  goto LABEL_754;
                }

                break;
              }
            }
          }
        }

        v430 = (os_log_s *)*(id *)sub_138E8(24);
        v414 = v430;
        if (v430 && os_log_type_enabled(v430, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v497 = 136315394;
          *(void *)&v497[4] = "DSPChain.mm";
          *(_WORD *)&v497[12] = 1024;
          *(_DWORD *)&v497[14] = 3008;
          _os_log_impl( &dword_0,  v414,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Could not find speaker port for SpEQ data!",  v497,  0x12u);
        }
      }

      else
      {
        v412 = (uint64_t)v401;
        v413 = (os_log_s *)*(id *)sub_138E8(24);
        v414 = v413;
        if (v413)
        {
          v415 = v413;
          if (os_log_type_enabled(v415, OS_LOG_TYPE_DEFAULT))
          {
            sub_2CA1C(v496, v412);
            v416 = v496;
            if (v496[23] < 0) {
              v416 = *(_BYTE **)v496;
            }
            *(_DWORD *)v497 = 136315650;
            *(void *)&v497[4] = "DSPChain.mm";
            *(_WORD *)&v497[12] = 1024;
            *(_DWORD *)&v497[14] = 3032;
            *(_WORD *)&v497[18] = 2080;
            *(void *)&v497[20] = v416;
            _os_log_impl( &dword_0,  v415,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Unhandled post initialize action %s!",  v497,  0x1Cu);
            if ((v496[23] & 0x80000000) != 0) {
              operator delete(*(void **)v496);
            }
          }
        }
      }

LABEL_754:
      if (v484) {
        CFRelease(v484);
      }
      if (cf) {
        CFRelease(cf);
      }
      ++*(void *)&buf[8];
      continue;
    }

    break;
  }

  v400 = __dst.__r_.__value_.__r.__words[0];
  if (__dst.__r_.__value_.__r.__words[0]
    && __dst.__r_.__value_.__l.__size_ != (int64_t)(cap - __dst.__r_.__value_.__l.__cap_) >> 3)
  {
    goto LABEL_701;
  }

LABEL_778:
  sub_191798(&v472);
  return 1LL;
}

void sub_18DE04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_18E524(void *a1, uint64_t *a2)
{
  uint64_t v14 = a1 + 6;
  char v15 = 1;
  sub_190270((uint64_t)(a1 + 6));
  unint64_t v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v12 = *a2;
  uint64_t v13 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }

  uint64_t v7 = (*(uint64_t (**)(void *, uint64_t *, unint64_t))(*a1 + 32LL))( a1,  &v12,  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[4] - a1[3]) >> 3));
  os_signpost_id_t v8 = v13;
  if (v13)
  {
    unsigned __int8 v9 = (unint64_t *)&v13->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  sub_19032C(&v14);
  return v7;
}

void sub_18E5F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_18E610(uint64_t a1, void *a2, unint64_t a3)
{
  int v56 = (*(uint64_t (**)(void))(*(void *)*a2 + 144LL))(*a2);
  id v6 = *(id *)sub_138E8(24);
  uint64_t v7 = v6;
  if (v6)
  {
    os_signpost_id_t v8 = (os_log_s *)v6;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v57 = (*(uint64_t (**)(void))(*(void *)*a2 + 160LL))(*a2);
      char v58 = 1;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "DSPChain.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1715;
      *(_WORD *)&buf[18] = 2112;
      *(void *)&buf[20] = v57;
      __int16 v61 = 1024;
      int v62 = v56;
      __int16 v63 = 2048;
      unint64_t v64 = a3;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Adding DSP processor of type %@ with instance ID %u at chain index %lu",  buf,  0x2Cu);
      sub_19DFC((uint64_t)&v57);
    }
  }

  uint64_t v57 = a1 + 48;
  char v58 = 1;
  sub_190270(a1 + 48);
  unsigned __int8 v9 = (void **)(a1 + 24);
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3);
  if (v10 < a3)
  {
    uint64_t v49 = sub_138E8(13);
    id v50 = sub_8C7D4(1, *(void **)v49, *(void *)(v49 + 8));
    CFDictionaryRef v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
    uint64_t v52 = v51;
    if (v51 && os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "DSPChain.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1722;
      _os_log_impl( &dword_0,  v52,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::out_of_range): Bad index into DSP chain.",  buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Bad index into DSP chain.");
  }

  unsigned int v11 = (unsigned int *)(a1 + 680);
  *(_WORD *)&buf[2] = *(_WORD *)(a1 + 680);
  *(_WORD *)AudioObjectPropertyAddress buf = *(_WORD *)(a1 + 680);
  HIWORD(v59) = *(_WORD *)(a1 + 680);
  LOWORD(v59) = *(_WORD *)(a1 + 680) == 0;
  int v12 = *(_DWORD *)buf;
  unsigned int v13 = v59;
  while (1)
  {
    unsigned int v14 = __ldaxr(v11);
    if (v14 != v12) {
      break;
    }
    if (!__stlxr(v13, v11)) {
      goto LABEL_14;
    }
  }

  __clrex();
LABEL_14:
  if (*(_WORD *)(a1 + 680)) {
    uint64_t v15 = 400LL;
  }
  else {
    uint64_t v15 = 424LL;
  }
  if (*(_WORD *)(a1 + 680)) {
    uint64_t v16 = a1 + 400;
  }
  else {
    uint64_t v16 = a1 + 424;
  }
  uint64_t v54 = v15;
  uint64_t v55 = a1;
  if (v10 <= a3)
  {
    sub_1905F0( (void **)v16,  *(void *)(a1 + 24),  *(void *)(a1 + 32),  0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
    *(_DWORD *)AudioObjectPropertyAddress buf = v56;
    uint64_t v34 = a2[1];
    *(void *)&buf[8] = *a2;
    *(void *)&buf[16] = v34;
    if (v34)
    {
      __int128 v35 = (unint64_t *)(v34 + 8);
      do
        unint64_t v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }

    sub_190C94((void *)v16, (uint64_t)buf);
    std::chrono::steady_clock::time_point v37 = *(std::__shared_weak_count **)&buf[16];
    if (*(void *)&buf[16])
    {
      std::string::size_type v38 = (unint64_t *)(*(void *)&buf[16] + 8LL);
      do
        unint64_t v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }

    int v18 = *(char **)(v16 + 8);
  }

  else
  {
    int v17 = *(char **)(v16 + 8);
    int v18 = *(char **)(a1 + v15);
    if (v17 != v18)
    {
      do
      {
        char v19 = v17 - 24;
        sub_7A768((uint64_t)(v17 - 16));
        int v17 = v19;
      }

      while (v19 != v18);
    }

    uint64_t v20 = 0LL;
    unsigned int v21 = 0;
    *(void *)(v16 + 8) = v18;
    do
    {
      if (v20 == a3)
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = v56;
        uint64_t v22 = a2[1];
        *(void *)&buf[8] = *a2;
        *(void *)&buf[16] = v22;
        if (v22)
        {
          __int16 v23 = (unint64_t *)(v22 + 8);
          do
            unint64_t v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
        }

        sub_190C94((void *)v16, (uint64_t)buf);
        unsigned int v25 = *(std::__shared_weak_count **)&buf[16];
        if (*(void *)&buf[16])
        {
          int v26 = (unint64_t *)(*(void *)&buf[16] + 8LL);
          do
            unint64_t v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }

        int v18 = *(char **)(v16 + 8);
      }

      unint64_t v28 = (char *)*v9;
      __int16 v29 = (char *)*v9 + 24 * v20;
      if ((unint64_t)v18 >= *(void *)(v16 + 16))
      {
        int v18 = sub_1904B4((int64x2_t *)v16, (uint64_t)v29);
      }

      else
      {
        *(_DWORD *)int v18 = *v29;
        v30 = &v28[24 * v20];
        *((void *)v18 + 1) = *((void *)v30 + 1);
        uint64_t v31 = *((void *)v30 + 2);
        *((void *)v18 + 2) = v31;
        if (v31)
        {
          AudioObjectID v32 = (unint64_t *)(v31 + 8);
          do
            unint64_t v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }

        v18 += 24;
      }

      *(void *)(v16 + 8) = v18;
      uint64_t v20 = ++v21;
    }

    while (v10 > v21);
  }

  sub_1905F0( v9,  *(void *)(v55 + v54),  (uint64_t)v18,  0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v18[-*(void *)(v55 + v54)] >> 3));
  sub_19032C(&v57);
  sub_190828(v11);
  *(_BYTE *)(v55 + 448) = 1;
  __int128 v40 = *(void **)(v55 + 872);
  if (v40)
  {
    uint64_t v41 = *a2;
    uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 168LL))(v41);
    *(void *)AudioObjectPropertyAddress buf = *(void *)v42;
    *(_DWORD *)&buf[8] = *(_DWORD *)(v42 + 8);
    *(void *)&buf[16] = v41;
    sub_239B24(v40, a3, (unint64_t)buf);
    if (AUPBRegisterAU(v40[2], *(void *)&buf[16]))
    {
      uint64_t v44 = v40[3];
      uint64_t v43 = v40[4];
      if (0xAAAAAAAAAAAAAAABLL * ((v43 - v44) >> 3) > a3)
      {
        uint64_t v45 = v44 + 24LL * a3;
        uint64_t v46 = v43 - (v45 + 24);
        if (v43 != v45 + 24) {
          memmove((void *)v45, (const void *)(v45 + 24), v43 - (v45 + 24));
        }
        v40[4] = v45 + v46;
      }
    }
  }

  if (*(_BYTE *)(v55 + 392))
  {
    uint64_t v47 = *(void *)(v55 + 872);
    if (v47)
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 1635087726;
      AUPBPropertiesChanged(*(void *)(v47 + 16), 1LL, buf, 0LL, 0LL);
    }
  }

  return 0LL;
}

void sub_18EC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

uint64_t sub_18EC68(uint64_t a1, int a2)
{
  uint64_t v59 = 0LL;
  int v60 = 0LL;
  uint64_t v57 = a1 + 48;
  char v58 = 1;
  sub_190270(a1 + 48);
  unint64_t v4 = (unsigned int *)(a1 + 680);
  *(_WORD *)&buf[2] = *(_WORD *)(a1 + 680);
  *(_WORD *)AudioObjectPropertyAddress buf = *(_WORD *)(a1 + 680);
  HIWORD(v61) = *(_WORD *)(a1 + 680);
  LOWORD(v61) = *(_WORD *)(a1 + 680) == 0;
  while (1)
  {
    unsigned int v5 = __ldaxr(v4);
    if (v5 != *(_DWORD *)buf) {
      break;
    }
    if (!__stlxr(v61, v4)) {
      goto LABEL_6;
    }
  }

  __clrex();
LABEL_6:
  if (*(_WORD *)(a1 + 680)) {
    uint64_t v6 = 400LL;
  }
  else {
    uint64_t v6 = 424LL;
  }
  if (*(_WORD *)(a1 + 680)) {
    uint64_t v7 = (int64x2_t *)(a1 + 400);
  }
  else {
    uint64_t v7 = (int64x2_t *)(a1 + 424);
  }
  uint64_t v8 = v7->i64[1];
  uint64_t v9 = *(void *)(a1 + v6);
  if (v8 != v9)
  {
    do
    {
      uint64_t v10 = v8 - 24;
      sub_7A768(v8 - 16);
      uint64_t v8 = v10;
    }

    while (v10 != v9);
  }

  v7->i64[1] = v9;
  unsigned int v11 = (uint64_t *)(a1 + 24);
  uint64_t v12 = *(void *)(a1 + 32) - *(void *)(a1 + 24);
  if (v12)
  {
    uint64_t v13 = 0LL;
    unint64_t v14 = v12 / 24;
    if (v14 <= 1) {
      uint64_t v15 = 1LL;
    }
    else {
      uint64_t v15 = v14;
    }
    unsigned int v16 = -1;
    do
    {
      uint64_t v17 = *v11;
      int v18 = (_DWORD *)(*v11 + 24 * v13);
      if (*v18 == a2)
      {
        sub_91174(&v59, *(void *)(v17 + 24 * v13 + 8), *(void *)(v17 + 24 * v13 + 16));
        unsigned int v16 = v13;
      }

      else
      {
        unint64_t v19 = v7->u64[1];
        if (v19 >= v7[1].i64[0])
        {
          unint64_t v24 = sub_1904B4(v7, (uint64_t)v18);
        }

        else
        {
          *(_DWORD *)unint64_t v19 = *v18;
          uint64_t v20 = v17 + 24 * v13;
          *(void *)(v19 + 8) = *(void *)(v20 + 8);
          uint64_t v21 = *(void *)(v20 + 16);
          *(void *)(v19 + 16) = v21;
          if (v21)
          {
            uint64_t v22 = (unint64_t *)(v21 + 8);
            do
              unint64_t v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }

          unint64_t v24 = (char *)(v19 + 24);
        }

        v7->i64[1] = (uint64_t)v24;
      }

      ++v13;
    }

    while (v13 != v15);
  }

  else
  {
    unsigned int v16 = -1;
  }

  if (v59)
  {
    sub_1905F0( (void **)(a1 + 24),  *(void *)(a1 + v6),  v7->i64[1],  0xAAAAAAAAAAAAAAABLL * ((v7->i64[1] - *(void *)(a1 + v6)) >> 3));
    if (*(void *)(a1 + 32) == *(void *)(a1 + 24)) {
      *(_BYTE *)(a1 + 448) = 0;
    }
    sub_19032C(&v57);
    unsigned int v25 = *(void **)(a1 + 872);
    if (v25)
    {
      sub_28A7C4(v25, v16);
      uint64_t v26 = *(void *)(a1 + 872);
      *(_DWORD *)AudioObjectPropertyAddress buf = 1635087726;
      AUPBPropertiesChanged(*(void *)(v26 + 16), 1LL, buf, 0LL, 0LL);
    }

    sub_190828((unsigned int *)(a1 + 680));
    uint64_t v27 = v59;
    uint64_t v28 = mach_absolute_time();
    unint64_t v29 = __udivti3(125 * v28, (v28 * (unsigned __int128)0x7DuLL) >> 64, 3LL, 0LL);
    unint64_t v30 = v29 / 0x3E8;
    uint64_t v31 = (void *)(a1 + 696);
    AudioObjectID v32 = *(uint64_t **)(a1 + 696);
    unint64_t v33 = (uint64_t **)(a1 + 696);
    uint64_t v34 = (uint64_t **)(a1 + 696);
    if (v32)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v34 = (uint64_t **)v32;
          unint64_t v35 = v32[4];
          if (v30 >= v35) {
            break;
          }
          AudioObjectID v32 = *v34;
          unint64_t v33 = v34;
          if (!*v34) {
            goto LABEL_43;
          }
        }

        if (v35 >= v30) {
          break;
        }
        AudioObjectID v32 = v34[1];
        if (!v32)
        {
          unint64_t v33 = v34 + 1;
          goto LABEL_43;
        }
      }

      unint64_t v36 = (uint64_t *)v34;
    }

    else
    {
LABEL_43:
      unint64_t v36 = (uint64_t *)operator new(0x30uLL);
      v36[4] = v30;
      v36[5] = 0LL;
      uint64_t *v36 = 0LL;
      v36[1] = 0LL;
      v36[2] = (uint64_t)v34;
      *unint64_t v33 = v36;
      uint64_t v37 = **(void **)(a1 + 688);
      std::string::size_type v38 = v36;
      if (v37)
      {
        *(void *)(a1 + 688) = v37;
        std::string::size_type v38 = *v33;
      }

      sub_7A420(*(uint64_t **)(a1 + 696), v38);
      ++*(void *)(a1 + 704);
    }

    v36[5] = v27;
    id v42 = *(id *)sub_138E8(24);
    uint64_t v43 = v42;
    if (v42)
    {
      uint64_t v44 = (os_log_s *)v42;
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
      {
        int v45 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 144LL))(v27);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "DSPChain.mm";
        __int16 v63 = 1024;
        int v64 = 1846;
        __int16 v65 = 2048;
        unint64_t v66 = v29 / 0x3E8;
        __int16 v67 = 1024;
        int v68 = v45;
        _os_log_impl( &dword_0,  v44,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d At time(us) %lld, marking instanceID %u for deletion",  buf,  0x22u);
      }
    }

    if (v29 <= 0x3B9ACDE7)
    {
      uint64_t v46 = (os_log_s *)*(id *)sub_138E8(13);
      uint64_t v47 = v46;
      if (v46 && os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "DSPChain.mm";
        __int16 v63 = 1024;
        int v64 = 1848;
        _os_log_impl( &dword_0,  v47,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Unexpected current time result",  buf,  0x12u);
      }
    }

    uint64_t v48 = (void *)*v31;
    if (*v31)
    {
      unint64_t v49 = v30 - 1000000;
      do
      {
        unint64_t v50 = v48[4];
        BOOL v51 = v49 >= v50;
        if (v49 >= v50) {
          uint64_t v52 = v48 + 1;
        }
        else {
          uint64_t v52 = v48;
        }
        if (!v51) {
          uint64_t v31 = v48;
        }
        uint64_t v48 = (void *)*v52;
      }

      while (*v52);
    }

    *(void *)AudioObjectPropertyAddress buf = v31;
    sub_19094C(a1, (uint64_t **)buf);
    uint64_t v41 = 0LL;
  }

  else
  {
    unint64_t v39 = (os_log_s *)*(id *)sub_138E8(13);
    __int128 v40 = v39;
    if (v39 && os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "DSPChain.mm";
      __int16 v63 = 1024;
      int v64 = 1807;
      _os_log_impl( &dword_0,  v40,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: No instance to delete",  buf,  0x12u);
    }

    sub_19032C(&v57);
    uint64_t v41 = 1685220966LL;
  }

  id v53 = v60;
  if (v60)
  {
    p_shared_owners = (unint64_t *)&v60->__shared_owners_;
    do
      unint64_t v55 = __ldaxr(p_shared_owners);
    while (__stlxr(v55 - 1, p_shared_owners));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }

  return v41;
}

void sub_18F1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  sub_7A768((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18F23C(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v10 = a1 + 48;
  char v11 = 1;
  sub_92F80(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 24);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 32) - v6) >> 3) <= a2)
  {
    int v8 = 0;
    uint64_t v7 = 1685220966LL;
  }

  else
  {
    uint64_t v7 = 0LL;
    int v8 = *(_DWORD *)(v6 + 24LL * a2);
  }

  *a3 = v8;
  sub_93128((uint64_t)&v10);
  return v7;
}

BOOL sub_18F2D8(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return sub_1903A4(a1, a2, a3, a4) != 0;
}

uint64_t sub_18F2F4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = sub_1903A4(a1, a2, a3, a5);
  if (!v8) {
    return 4294967246LL;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v8 + 64LL))( v8,  a3,  a4,  a5,  0LL);
  if ((_DWORD)result) {
    return 4294967246LL;
  }
  return result;
}

uint64_t sub_18F350(uint64_t a1, int a2, uint64_t a3, uint64_t a4, float a5)
{
  uint64_t v8 = sub_1903A4(a1, a2, a3, a4);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, float))(*(void *)v8 + 72LL))( v8,  a3,  a4,  0LL,  a5);
  }
  else {
    return 4294967246LL;
  }
}

uint64_t sub_18F3B0()
{
  return 0LL;
}

BOOL sub_18F3B8(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return sub_35A88(a1, a2, a3, a4) != 0;
}

uint64_t sub_18F3D4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = sub_35A88(a1, a2, a3, a6);
  if (result) {
    return (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)result + 40LL))( result,  a3,  a4,  a5,  a6,  0LL) == 0;
  }
  return result;
}

uint64_t sub_18F438(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = sub_35A88(a1, a2, a3, a6);
  if (v10) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v10 + 56LL))( v10,  a3,  a4,  a5,  a6,  0LL);
  }
  else {
    return 4294967246LL;
  }
}

BOOL sub_18F4A4(uint64_t a1, int a2)
{
  uint64_t v11 = a1 + 48;
  char v12 = 1;
  sub_92F80(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  if (v4 == v5)
  {
    BOOL v8 = 0LL;
  }

  else
  {
    uint64_t v6 = v4 + 24;
    do
    {
      int v7 = (*(uint64_t (**)(void))(**(void **)(v6 - 16) + 152LL))(*(void *)(v6 - 16));
      BOOL v8 = v7 == a2;
      BOOL v9 = v7 == a2 || v6 == v5;
      v6 += 24LL;
    }

    while (!v9);
  }

  sub_93128((uint64_t)&v11);
  return v8;
}

void sub_18F530( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_18F544(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 796) && *(_BYTE *)(a1 + 797))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, float *, void))(*(void *)a1 + 64LL))( a1,  1936747629LL,  3LL,  &v17,  0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, float *, void))(*(void *)a1 + 64LL))( a1,  1936747629LL,  5LL,  &v16,  0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, float *, void))(*(void *)a1 + 64LL))( a1,  1936747629LL,  7LL,  &v15,  0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, float *, void))(*(void *)a1 + 64LL))( a1,  1936747629LL,  8LL,  &v13,  0LL);
    (*(void (**)(uint64_t, uint64_t, void, float *, void))(*(void *)a1 + 64LL))( a1,  1936747629LL,  0LL,  &v14,  0LL);
    float v4 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 792)));
    float v5 = v17 + v4;
    float v6 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 792)));
    float v7 = v15;
    float v8 = v16 + v6;
    float v16 = v16 + v6;
    float v17 = v5;
    uint64_t v9 = *(void *)(a1 + 736);
    float v10 = v5;
    float v12 = v13;
    float v11 = v14;
    if (qword_4919C8 != -1) {
      dispatch_once(&qword_4919C8, &stru_473A98);
    }
    if (off_491A20) {
      off_491A20(v9, 0LL, a2, v10, v8, v7, v11, v12);
    }
  }

void *sub_18F6D8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  return sub_7F2E0( a2,  *(void **)(a1 + 336),  *(void **)(a1 + 344),  (uint64_t)(*(void *)(a1 + 344) - *(void *)(a1 + 336)) >> 4);
}

void sub_18F6F4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v30 = *(void *)(a1 + 32);
  if (v30 == v3)
  {
    uint64_t v25 = sub_138E8(13);
    id v26 = sub_8C7D4(1, *(void **)v25, *(void *)(v25 + 8));
    uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    uint64_t v28 = v27;
    if (v27 && os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      __int128 v40 = "DSPChain.mm";
      __int16 v41 = 1024;
      int v42 = 1143;
      _os_log_impl(&dword_0, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  do
  {
    v36[1] = *(_DWORD *)v3;
    uint64_t v5 = *(void *)(v3 + 8);
    float v4 = *(std::__shared_weak_count **)(v3 + 16);
    uint64_t v37 = v5;
    std::string::size_type v38 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        unint64_t v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }

    v36[0] = 0;
    int v8 = (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *))(*(void *)v5 + 224LL))(v5, 1LL, v36);
    if (v8)
    {
      uint64_t v20 = sub_138E8(13);
      id v21 = sub_8C7D4(1, *(void **)v20, *(void *)(v20 + 8));
      uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
      unint64_t v23 = v22;
      if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        __int128 v40 = "DSPChain.mm";
        __int16 v41 = 1024;
        int v42 = 1151;
        _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Unexpected error from GetBusCount",  buf,  0x12u);
      }

      unint64_t v24 = __cxa_allocate_exception(0x10uLL);
      *(void *)unint64_t v24 = &off_4865A0;
      v24[2] = v8;
    }

    if (!*(void *)(a2 + 40) && v36[0])
    {
      unint64_t v9 = 1LL;
      do
      {
        uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v5 + 128LL))(v5, 1LL, v9 - 1);
        __int128 v11 = *(_OWORD *)(v10 + 16);
        v34[0] = *(_OWORD *)v10;
        v34[1] = v11;
        uint64_t v35 = *(void *)(v10 + 32);
        sub_2F6E8((void *)a2, (uint64_t)v34);
        id v12 = *(id *)sub_138E8(24);
        float v13 = v12;
        if (v12)
        {
          float v14 = (os_log_s *)v12;
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            sub_2CC00(&v33, (uint64_t)v34);
            if ((v33.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              float v15 = &v33;
            }
            else {
              float v15 = (std::string *)v33.__r_.__value_.__r.__words[0];
            }
            uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 152LL))(v5);
            sub_2CA1C(__p, v16);
            float v17 = __p;
            if (v32 < 0) {
              float v17 = (void **)__p[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            __int128 v40 = "DSPChain.mm";
            __int16 v41 = 1024;
            int v42 = 1162;
            __int16 v43 = 1024;
            int v44 = v9 - 1;
            __int16 v45 = 2080;
            uint64_t v46 = v15;
            __int16 v47 = 2080;
            uint64_t v48 = v17;
            _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Bus: %d Format: %s AU: %s", buf, 0x2Cu);
            if (v32 < 0) {
              operator delete(__p[0]);
            }
          }
        }

        if (v9 >= v36[0]) {
          break;
        }
        ++v9;
      }

      while (!*(void *)(a2 + 40));
    }

    if (v4)
    {
      int v18 = (unint64_t *)&v4->__shared_owners_;
      do
        unint64_t v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }

    v3 += 24LL;
  }

  while (v3 != v30);
}

void sub_18FAFC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
}

void sub_18FB6C(id a1)
{
  uint64_t v1 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v1) {
    goto LABEL_5;
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    int v3 = 136315138;
    float v4 = dlerror();
    _os_log_error_impl( &dword_0,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "dlerror : libAudioIssueDetector ADAM: %s",  (uint8_t *)&v3,  0xCu);
  }

  uint64_t v1 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1);
  if (v1)
  {
LABEL_5:
    off_4919D0 = dlsym(v1, "AudioDataAnalysisManagerCreate");
    off_4919D8 = dlsym(v1, "AudioDataAnalysisManagerDispose");
    qword_4919E0 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerReset");
    off_4919E8 = dlsym(v1, "AudioDataAnalysisManagerUpdateReportingSessions");
    qword_4919F0 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerCreateNodePCM");
    off_4919F8 = dlsym(v1, "AudioDataAnalysisManagerCreateNodeSPL");
    qword_491A00 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerRemoveNode");
    off_491A08 = dlsym(v1, "AudioDataAnalysisManagerInitialize");
    qword_491A10 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerIsSessionInitialized");
    qword_491A18 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerProcessAudio");
    off_491A20 = (uint64_t (*)(void, void, void, float, float, float, float, float))dlsym(v1, "AudioDataAnalysisManagerProcessSPL");
    qword_491A28 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerCreateNodeEnvSPL");
    qword_491A30 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerCreateNodeEnvSoundClass");
    qword_491A38 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerProcessEnvSPL");
    qword_491A40 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerProcessEnvSoundClass");
    off_491A48 = dlsym(v1, "AudioDataAnalysisManagerSetDeviceInfo");
    qword_491A50 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerRegisterDeviceInfo");
    qword_491A58 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerSetDeviceConnectionState");
    off_491A60 = dlsym(v1, "AudioDataAnalysisManagerStartServices");
    off_491A68 = dlsym(v1, "AudioDataAnalysisManagerConnectedWiredDeviceIsHeadphone");
    qword_491A70 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerSetApplicationBundleID");
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    double v2 = dlerror();
    int v3 = 136315138;
    float v4 = v2;
    _os_log_error_impl( &dword_0,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "dlerror : libAudioIssueDetector ADAM: %s",  (uint8_t *)&v3,  0xCu);
  }

void sub_18FE8C(uint64_t a1, unsigned int **a2)
{
  float v4 = *(unsigned int ***)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      uint64_t v5 = v4 - 4;
      sub_2DBF4(v4 - 2);
      sub_2DBF4(v5);
      float v4 = v5;
    }

    while (v5 != a2);
  }

  *(void *)(a1 + 8) = a2;
}

uint64_t sub_18FEE4(uint64_t a1, unsigned int **a2)
{
  *(void *)a1 = 0LL;
  *(_DWORD *)(a1 + 8) = 0;
  sub_2DB30(a1, a2);
  *(void *)(a1 + 16) = 0LL;
  *(_DWORD *)(a1 + 24) = 0;
  sub_2DB30(a1 + 16, a2 + 2);
  return a1;
}

void sub_18FF28(_Unwind_Exception *a1)
{
}

uint64_t sub_18FF3C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    float v4 = (unsigned int **)(i - 32);
    *(void *)(a1 + 16) = i - 32;
    sub_2DBF4((unsigned int **)(i - 16));
    sub_2DBF4(v4);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_18FF9C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
  {
    uint64_t v3 = *(unsigned int ***)(*(void *)(a1 + 16) + 8LL);
    float v4 = *(unsigned int ***)(*(void *)(a1 + 8) + 8LL);
    while (v3 != v4)
    {
      sub_2DBF4(v3 + 2);
      sub_2DBF4(v3);
      v3 += 4;
    }
  }

  return a1;
}

void *sub_18FFF8(uint64_t a1, size_t __size)
{
  if (!a1)
  {
    uint64_t v11 = sub_138E8(13);
    id v12 = sub_8C7D4(1, *(void **)v11, *(void *)(v11 + 8));
    float v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    float v14 = v13;
    if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315394;
      uint64_t v22 = "DSPChain.mm";
      __int16 v23 = 1024;
      int v24 = 122;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::invalid_argument) [inOwner is NULL]: specified buffer owner is NULL",  (uint8_t *)&v21,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1013D0(exception, "specified buffer owner is NULL");
  }

  int v2 = __size;
  if (!(_DWORD)__size)
  {
    uint64_t v16 = sub_138E8(13);
    id v17 = sub_8C7D4(1, *(void **)v16, *(void *)(v16 + 8));
    int v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    unint64_t v19 = v18;
    if (v18 && os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315394;
      uint64_t v22 = "DSPChain.mm";
      __int16 v23 = 1024;
      int v24 = 123;
      _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::invalid_argument): specified buffer size is 0",  (uint8_t *)&v21,  0x12u);
    }

    uint64_t v20 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1013D0(v20, "specified buffer size is 0");
  }

  float v4 = &qword_48F5F0;
  while (1)
  {
    uint64_t v5 = *v4;
    if (*(void *)(v5 + 32)) {
      BOOL v6 = 0;
    }
    else {
      BOOL v6 = *(_DWORD *)(v5 + 24) >= __size;
    }
    if (v6)
    {
      unint64_t v7 = *(void **)(v5 + 16);
      *(void *)(v5 + 32) = a1;
    }

    else
    {
      unint64_t v7 = 0LL;
    }

    float v4 = (uint64_t *)(v5 + 8);
    if (v7) {
      return v7;
    }
  }

  unint64_t v7 = malloc(__size);
  int v8 = operator new(0x28uLL);
  v8[1] = &qword_48F5E8;
  v8[2] = v7;
  *((_DWORD *)v8 + 6) = v2;
  v8[4] = a1;
  uint64_t v9 = qword_48F5E8;
  *int v8 = qword_48F5E8;
  *(void *)(v9 + 8) = v8;
  qword_48F5E8 = (uint64_t)v8;
  ++qword_48F5F8;
  return v7;
}

void sub_190250(_Unwind_Exception *a1)
{
}

void sub_190270(uint64_t a1)
{
  pthread_t v2 = pthread_self();
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 168));
  uint64_t v3 = *(_opaque_pthread_t **)(a1 + 232);
  if (v2)
  {
    if (v3 && v2 == v3) {
      goto LABEL_4;
    }
  }

  else if (!v3)
  {
LABEL_4:
    uint64_t v4 = *(void *)(a1 + 240) + 1LL;
    goto LABEL_9;
  }

  if (sub_93344(a1))
  {
    sub_939A0((void *)(a1 + 248), (unint64_t)v2);
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)a1);
  }

  std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 168));
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)a1);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 168));
  uint64_t v4 = 1LL;
  *(void *)(a1 + 232) = v2;
LABEL_9:
  *(void *)(a1 + 240) = v4;
  std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 168));
}

void sub_190314(_Unwind_Exception *a1)
{
}

_BYTE *sub_19032C(_BYTE *a1)
{
  if (a1[8])
  {
    uint64_t v2 = *(void *)a1;
    uint64_t v3 = (std::recursive_mutex *)(*(void *)a1 + 168LL);
    std::recursive_mutex::lock(v3);
    unint64_t v4 = *(void *)(v2 + 240);
    if (v4 < 2)
    {
      *(void *)(v2 + 232) = 0LL;
      *(void *)(v2 + 240) = 0LL;
      std::recursive_mutex::unlock(v3);
      std::__shared_mutex_base::unlock((std::__shared_mutex_base *)v2);
    }

    else
    {
      *(void *)(v2 + 240) = v4 - 1;
      std::recursive_mutex::unlock(v3);
    }
  }

  return a1;
}

uint64_t sub_1903A4(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = a1 + 48;
  char v16 = 1;
  sub_92F80(a1 + 48);
  if (*(void *)(a1 + 32) == *(void *)(a1 + 24))
  {
LABEL_6:
    uint64_t v12 = 0LL;
  }

  else
  {
    unsigned int v8 = 1;
    while (1)
    {
      uint64_t v9 = sub_2EEBC(a1, v8 - 1);
      uint64_t v10 = v9;
      if (v9)
      {
      }
    }

    if ((*(unsigned int (**)(uint64_t, uint64_t, char *, uint64_t, void))(*(void *)v10 + 64LL))( v10,  a3,  v14,  a4,  0LL))
    {
      uint64_t v12 = 0LL;
    }

    else
    {
      uint64_t v12 = v10;
    }
  }

  sub_93128((uint64_t)&v15);
  return v12;
}

void sub_19049C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

char *sub_1904B4(int64x2_t *a1, uint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_7A87C();
  }
  BOOL v6 = a1 + 1;
  if (0x5555555555555556LL * ((a1[1].i64[0] - a1->i64[0]) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556LL * ((a1[1].i64[0] - a1->i64[0]) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - a1->i64[0]) >> 3) >= 0x555555555555555LL) {
    unint64_t v7 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v7 = v3;
  }
  uint64_t v25 = (uint64_t *)v6;
  unsigned int v8 = (char *)sub_8D44C(v7);
  uint64_t v10 = &v8[24 * v2];
  *(_DWORD *)uint64_t v10 = *(_DWORD *)a2;
  *((void *)v10 + 1) = *(void *)(a2 + 8);
  uint64_t v11 = *(void *)(a2 + 16);
  *((void *)v10 + 2) = v11;
  if (v11)
  {
    uint64_t v12 = (unint64_t *)(v11 + 8);
    do
      unint64_t v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }

  uint64_t v15 = a1->i64[0];
  unint64_t v14 = a1->u64[1];
  if (v14 == a1->i64[0])
  {
    int64x2_t v18 = vdupq_n_s64(v14);
    char v16 = &v8[24 * v2];
  }

  else
  {
    char v16 = &v8[24 * v2];
    do
    {
      int v17 = *(_DWORD *)(v14 - 24);
      v14 -= 24LL;
      *((_DWORD *)v16 - 6) = v17;
      v16 -= 24;
      *(_OWORD *)(v16 + 8) = *(_OWORD *)(v14 + 8);
      *(void *)(v14 + 8) = 0LL;
      *(void *)(v14 + 16) = 0LL;
    }

    while (v14 != v15);
    int64x2_t v18 = *a1;
  }

  unint64_t v19 = v10 + 24;
  a1->i64[0] = (uint64_t)v16;
  a1->i64[1] = (uint64_t)(v10 + 24);
  int64x2_t v23 = v18;
  uint64_t v20 = a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)&v8[24 * v9];
  uint64_t v24 = v20;
  uint64_t v22 = v18.i64[0];
  sub_190C44((uint64_t)&v22);
  return v19;
}

void **sub_1905F0(void **result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  unint64_t v7 = result;
  uint64_t v8 = (uint64_t)result[2];
  uint64_t v9 = (char *)*result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)*result) >> 3) >= a4)
  {
    uint64_t v20 = (char *)result[1];
    if (0xAAAAAAAAAAAAAAABLL * ((v20 - v9) >> 3) >= a4)
    {
      if (a2 != a3)
      {
        do
        {
          id v26 = v9 + 8;
          *(_DWORD *)uint64_t v9 = *(_DWORD *)v6;
          v9 += 24;
          uint64_t result = (void **)sub_91174(v26, *(void *)(v6 + 8), *(void *)(v6 + 16));
          v6 += 24LL;
        }

        while (v6 != a3);
        uint64_t v20 = (char *)v7[1];
      }

      if (v20 != v9)
      {
        do
        {
          uint64_t v27 = v20 - 24;
          uint64_t result = (void **)sub_7A768((uint64_t)(v20 - 16));
          uint64_t v20 = v27;
        }

        while (v27 != v9);
      }

      v7[1] = v9;
    }

    else
    {
      uint64_t v21 = a2 + 8 * ((v20 - v9) >> 3);
      if (v20 != v9)
      {
        uint64_t result = (void **)(v9 + 8);
        do
        {
          *((_DWORD *)result - 2) = *(_DWORD *)v6;
          uint64_t result = (void **)(sub_91174(result, *(void *)(v6 + 8), *(void *)(v6 + 16)) + 3);
          v6 += 24LL;
        }

        while (v6 != v21);
        uint64_t v9 = (char *)v7[1];
      }

      uint64_t v22 = v9;
      if (v21 != a3)
      {
        uint64_t v22 = v9;
        do
        {
          *(_DWORD *)uint64_t v22 = *(_DWORD *)v21;
          uint64_t v23 = *(void *)(v21 + 16);
          *((void *)v22 + 1) = *(void *)(v21 + 8);
          *((void *)v22 + 2) = v23;
          if (v23)
          {
            uint64_t v24 = (unint64_t *)(v23 + 8);
            do
              unint64_t v25 = __ldxr(v24);
            while (__stxr(v25 + 1, v24));
          }

          v21 += 24LL;
          v22 += 24;
        }

        while (v21 != a3);
      }

      v7[1] = v22;
    }
  }

  else
  {
    if (v9)
    {
      uint64_t v10 = (char *)result[1];
      uint64_t v11 = *result;
      if (v10 != v9)
      {
        do
        {
          uint64_t v12 = v10 - 24;
          sub_7A768((uint64_t)(v10 - 16));
          uint64_t v10 = v12;
        }

        while (v12 != v9);
        uint64_t v11 = *v7;
      }

      v7[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0LL;
      *unint64_t v7 = 0LL;
      v7[1] = 0LL;
      uint64_t v7[2] = 0LL;
    }

    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_39;
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v14 = 2 * v13;
    if (2 * v13 <= a4) {
      uint64_t v14 = a4;
    }
    unint64_t v15 = v13 >= 0x555555555555555LL ? 0xAAAAAAAAAAAAAAALL : v14;
    if (v15 > 0xAAAAAAAAAAAAAAALL) {
LABEL_39:
    }
      sub_7A87C();
    uint64_t result = (void **)sub_8D44C(v15);
    *unint64_t v7 = result;
    v7[1] = result;
    uint64_t v7[2] = &result[3 * v16];
    while (v6 != a3)
    {
      *(_DWORD *)uint64_t result = *(_DWORD *)v6;
      int v17 = *(unint64_t **)(v6 + 16);
      result[1] = *(void **)(v6 + 8);
      result[2] = v17;
      if (v17)
      {
        int64x2_t v18 = v17 + 1;
        do
          unint64_t v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }

      v6 += 24LL;
      result += 3;
    }

    v7[1] = result;
  }

  return result;
}

void sub_190828(unsigned int *a1)
{
  HIWORD(v5) = *(_WORD *)a1 == 0;
  LOWORD(v5) = *(_WORD *)a1;
  HIWORD(v4) = HIWORD(v5);
  LOWORD(v4) = HIWORD(v5);
  while (1)
  {
    unsigned int v1 = __ldaxr(a1);
    if (v1 != v5) {
      break;
    }
    if (!__stlxr(v4, a1)) {
      return;
    }
  }

  __clrex();
  unint64_t v2 = (os_log_s *)*(id *)sub_138E8(13);
  unint64_t v3 = v2;
  if (v2)
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      unint64_t v7 = "AtomicUtils.h";
      __int16 v8 = 1024;
      int v9 = 147;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: this shouldn't happen: failed to atomically swap banks.",  buf,  0x12u);
    }
  }
}

void sub_19094C(uint64_t a1, uint64_t **a2)
{
  unint64_t v2 = *(uint64_t **)(a1 + 688);
  if (v2 != *a2)
  {
    do
    {
      uint64_t v5 = v2[5];
      id v6 = *(id *)sub_138E8(24);
      unint64_t v7 = v6;
      if (v6)
      {
        __int16 v8 = (os_log_s *)v6;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v9 = mach_absolute_time();
          int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 144LL))(v5);
          unint64_t v11 = __udivti3(125 * v9, (v9 * (unsigned __int128)0x7DuLL) >> 64, 3LL, 0LL);
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          uint64_t v23 = "DSPChain.mm";
          __int16 v24 = 1024;
          int v25 = 1866;
          __int16 v26 = 2048;
          unint64_t v27 = v11 / 0x3E8;
          __int16 v28 = 1024;
          int v29 = v10;
          _os_log_impl(&dword_0, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Time(us): %lld: deleting instanceID: %u", buf, 0x22u);
        }
      }

      if (v5)
      {
        sub_654FC();
        uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 144LL))(v5);
        (*(void (**)(uint64_t *, uint64_t))(qword_4913D0 + 104))(&qword_4913D0, v12);
      }

      else
      {
        unint64_t v13 = (os_log_s *)*(id *)sub_138E8(13);
        uint64_t v14 = v13;
        if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v23 = "DSPChain.mm";
          __int16 v24 = 1024;
          int v25 = 1875;
          _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: NULL pointer instead of valid IDSPProcessorManagedInstance pointer found",  buf,  0x12u);
        }
      }

      unint64_t v15 = (uint64_t *)v2[1];
      if (v15)
      {
        do
        {
          uint64_t v16 = v15;
          unint64_t v15 = (uint64_t *)*v15;
        }

        while (v15);
      }

      else
      {
        do
        {
          uint64_t v16 = (uint64_t *)v2[2];
          BOOL v17 = *v16 == (void)v2;
          unint64_t v2 = v16;
        }

        while (!v17);
      }

      unint64_t v2 = v16;
    }

    while (v16 != *a2);
    int64x2_t v18 = *(uint64_t **)(a1 + 688);
    if (v18 != v16)
    {
      do
      {
        unint64_t v19 = (uint64_t *)v18[1];
        uint64_t v20 = v18;
        if (v19)
        {
          do
          {
            uint64_t v21 = v19;
            unint64_t v19 = (uint64_t *)*v19;
          }

          while (v19);
        }

        else
        {
          do
          {
            uint64_t v21 = (uint64_t *)v20[2];
            BOOL v17 = *v21 == (void)v20;
            uint64_t v20 = v21;
          }

          while (!v17);
        }

        --*(void *)(a1 + 704);
        sub_911E8(*(uint64_t **)(a1 + 696), v18);
        operator delete(v18);
        int64x2_t v18 = v21;
      }

      while (v21 != v16);
    }
  }

void sub_190C28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_190C44(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    sub_7A768(i - 16);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_190C94(void *result, uint64_t a2)
{
  uint64_t v3 = (char **)result;
  unsigned int v4 = result + 2;
  unint64_t v5 = result[2];
  unint64_t v6 = result[1];
  if (v6 >= v5)
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *result) >> 3);
    unint64_t v9 = v8 + 1;
    if (v8 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_7A87C();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *result) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555LL) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v23 = v4;
    uint64_t v12 = (char *)sub_8D44C(v11);
    uint64_t v14 = &v12[24 * v8];
    *(_DWORD *)uint64_t v14 = *(_DWORD *)a2;
    *(_OWORD *)(v14 + 8) = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 8) = 0LL;
    *(void *)(a2 + 16) = 0LL;
    unint64_t v7 = v14 + 24;
    uint64_t v16 = *v3;
    unint64_t v15 = (unint64_t)v3[1];
    if ((char *)v15 == *v3)
    {
      int64x2_t v18 = vdupq_n_s64(v15);
    }

    else
    {
      do
      {
        int v17 = *(_DWORD *)(v15 - 24);
        v15 -= 24LL;
        *((_DWORD *)v14 - 6) = v17;
        v14 -= 24;
        *(_OWORD *)(v14 + 8) = *(_OWORD *)(v15 + 8);
        *(void *)(v15 + 8) = 0LL;
        *(void *)(v15 + 16) = 0LL;
      }

      while ((char *)v15 != v16);
      int64x2_t v18 = *(int64x2_t *)v3;
    }

    *uint64_t v3 = v14;
    v3[1] = v7;
    int64x2_t v21 = v18;
    unint64_t v19 = v3[2];
    v3[2] = &v12[24 * v13];
    uint64_t v22 = v19;
    uint64_t v20 = v18.i64[0];
    uint64_t result = (void *)sub_190C44((uint64_t)&v20);
  }

  else
  {
    *(_DWORD *)unint64_t v6 = *(_DWORD *)a2;
    *(_OWORD *)(v6 + 8) = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 8) = 0LL;
    *(void *)(a2 + 16) = 0LL;
    unint64_t v7 = (char *)(v6 + 24);
  }

  v3[1] = v7;
  return result;
}

void sub_190DD0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  unint64_t v5 = (uint64_t **)(a1 + 1112);
  unint64_t v6 = *(void **)(a1 + 1112);
  if (v6)
  {
    unint64_t v7 = (uint64_t **)(a1 + 1112);
    do
    {
      unint64_t v8 = v6[4];
      BOOL v9 = v8 >= a2;
      if (v8 >= a2) {
        unint64_t v10 = v6;
      }
      else {
        unint64_t v10 = v6 + 1;
      }
      if (v9) {
        unint64_t v7 = (uint64_t **)v6;
      }
      unint64_t v6 = (void *)*v10;
    }

    while (*v10);
    if (v7 != v5 && (unint64_t)v7[4] <= a2 && sub_192178((uint64_t)(v7 + 5), a3))
    {
      unint64_t v11 = (os_log_s *)*(id *)sub_138E8(24);
      uint64_t v12 = v11;
      if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = (void *)(v4 + 712);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "DSPChain.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3054;
        __int16 v75 = 1024;
        *(_DWORD *)unsigned int v76 = a2;
        *(_WORD *)&v76[4] = 2080;
        *(void *)&v76[6] = v13;
        _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Overlay tuning condition matches cache for use case %u in chain %s. Skipping application",  buf,  0x22u);
      }

      return;
    }
  }

  char v58 = v5;
  if (a2 == 4)
  {
    sub_191B68((uint64_t **)(v4 + 1104), 2uLL);
  }

  uint64_t v14 = *(void *)(v4 + 1080);
  uint64_t v15 = *(void *)(v4 + 1088);
  if (v14 != v15)
  {
    uint64_t v59 = 0LL;
    while (1)
    {
      if (*(void *)v14 == a2)
      {
        if (a2 == 4)
        {
          if (*(_DWORD *)(a3 + 88) != 1) {
            goto LABEL_91;
          }
          if (*(_DWORD *)(v14 + 96) != 2)
          {
            unint64_t v55 = (os_log_t *)sub_138E8(13);
            int v56 = *v55;
            if (*v55 && os_log_type_enabled(*v55, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "ConditionalOverlayTunings.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 91;
              _os_log_impl( &dword_0,  v56,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Malformed SoundAutoConfig ConditionalOverlayTuning",  buf,  0x12u);
            }

            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "Malformed SoundAutoConfig ConditionalOverlayTuning");
          }

          *(void *)AudioObjectPropertyAddress buf = *(void *)(a3 + 8);
          sub_C590C(&buf[8], (__int128 *)(a3 + 16));
          sub_C590C(v77, (__int128 *)(a3 + 48));
          __int16 v80 = *(_WORD *)(a3 + 80);
          if (*(_DWORD *)(v14 + 96) != 2) {
            sub_22BBD4();
          }
          sub_86550((uint64_t *)&__p, v14 + 16);
          sub_16D268(&v69, (void *)(v14 + 40));
          sub_16D268(&v71, (void *)(v14 + 64));
          unsigned __int16 v73 = *(_WORD *)(v14 + 88);
          BOOL v16 = v73 < 0x100u || HIBYTE(v80) && v80 == v73;
          if (v68)
          {
            if (!buf[4]) {
              goto LABEL_53;
            }
            int v17 = v67;
            if (!v67) {
              goto LABEL_53;
            }
            int64x2_t v18 = &v67;
            do
            {
              unint64_t v19 = v17;
              uint64_t v20 = v18;
              unsigned int v21 = *((_DWORD *)v17 + 7);
              uint64_t v22 = v17 + 1;
              if (v21 >= *(_DWORD *)buf)
              {
                uint64_t v22 = v19;
                int64x2_t v18 = (void **)v19;
              }

              int v17 = (void *)*v22;
            }

            while (v17);
            if (v18 == &v67) {
              goto LABEL_53;
            }
            if (v21 < *(_DWORD *)buf) {
              unint64_t v19 = v20;
            }
            if (*(_DWORD *)buf < *((_DWORD *)v19 + 7)) {
              goto LABEL_53;
            }
          }

          if (v70[1] && (!v76[12] || v70 == (char **)sub_889A4((uint64_t)&v69, (void **)&buf[8])))
          {
LABEL_53:
            int v24 = 0;
          }

          else
          {
            if (v72[1])
            {
              int v23 = v79;
              if (v79) {
                int v23 = v72 != (char **)sub_889A4((uint64_t)&v71, v77);
              }
            }

            else
            {
              int v23 = 1;
            }

            int v24 = v16 & v23;
          }

          sub_88C08(v72[0]);
          sub_88C08(v70[0]);
          sub_32C8C(v67);
          if (v79 && v78 < 0) {
            operator delete(v77[0]);
          }
          if (v76[12] && (v76[11] & 0x80000000) != 0) {
            operator delete(*(void **)&buf[8]);
          }
          if (!v24) {
            goto LABEL_91;
          }
LABEL_63:
          int v25 = (os_log_t *)sub_138E8(24);
          __int16 v26 = *v25;
          if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_DEFAULT))
          {
            unint64_t v27 = (void *)(v14 + 112);
            sub_2CA1C(&__p, *(unsigned int *)(v14 + 104));
            p_p = &__p;
            if (v68 < 0) {
              p_p = __p;
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            *(void *)&uint8_t buf[4] = "ConditionalOverlayTunings.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 67;
            __int16 v75 = 2080;
            *(void *)unsigned int v76 = v27;
            *(_WORD *)&v76[8] = 2080;
            *(void *)&v76[10] = p_p;
            _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Loading overlay tuning from path %s for prop %s",  buf,  0x26u);
            if (SHIBYTE(v68) < 0) {
              operator delete(__p);
            }
          }

          sub_155560(buf, v14 + 112);
          uint64_t v29 = *(unsigned int *)(v14 + 104);
          int v64 = *(_DWORD *)(v14 + 104);
          uint64_t v30 = *(const void **)buf;
          uint64_t v65 = *(void *)buf;
          if (*(void *)buf)
          {
            uint64_t v63 = *(void *)buf;
            uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, void))(*(void *)v4 + 112LL))( v4,  1685287015LL,  v29,  &v63,  8LL,  0LL);
            if ((_DWORD)v31)
            {
              id v32 = *(id *)sub_138E8(24);
              std::string v33 = v32;
              if (v32)
              {
                uint64_t v34 = (os_log_s *)v32;
                if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v35 = v4;
                  sub_2CA1C(&__p, v29);
                  int v36 = SHIBYTE(v68);
                  uint64_t v37 = (void **)__p;
                  sub_2CA1C(v61, v31);
                  std::string::size_type v38 = &__p;
                  if (v36 < 0) {
                    std::string::size_type v38 = v37;
                  }
                  unint64_t v39 = v61;
                  if (v62 < 0) {
                    unint64_t v39 = (void **)v61[0];
                  }
                  *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                  *(void *)&uint8_t buf[4] = "DSPChain.mm";
                  *(_WORD *)&_BYTE buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 3091;
                  __int16 v75 = 2080;
                  *(void *)unsigned int v76 = v38;
                  *(_WORD *)&v76[8] = 2080;
                  *(void *)&v76[10] = v39;
                  _os_log_impl( &dword_0,  v34,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Failure to set property %s on the graph. Error: %s",  buf,  0x26u);
                  if (v62 < 0) {
                    operator delete(v61[0]);
                  }
                  uint64_t v4 = v35;
                  if (SHIBYTE(v68) < 0) {
                    operator delete(__p);
                  }
                }
              }
            }

            else
            {
              ++v59;
            }

            CFRelease(v30);
          }

          else
          {
            __int128 v40 = (os_log_s *)*(id *)sub_138E8(24);
            __int16 v41 = v40;
            if (v40 && os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "DSPChain.mm";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3082;
              _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Conditional tuning returned an invalid CFDictionary. Skipping",  buf,  0x12u);
            }
          }

          goto LABEL_91;
        }

        if ((sub_192178(a3, v14 + 8) & 1) != 0) {
          goto LABEL_63;
        }
      }

LABEL_91:
      v14 += 136LL;
      if (v14 == v15)
      {
        if (v59)
        {
          int v42 = (os_log_s *)*(id *)sub_138E8(24);
          __int16 v43 = v42;
          if (v42 && os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
          {
            int v44 = (void *)(v4 + 712);
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            *(void *)&uint8_t buf[4] = "DSPChain.mm";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3102;
            __int16 v75 = 1024;
            *(_DWORD *)unsigned int v76 = a2;
            *(_WORD *)&v76[4] = 2080;
            *(void *)&v76[6] = v44;
            _os_log_impl( &dword_0,  v43,  OS_LOG_TYPE_INFO,  "%25s:%-5d Caching overlay tuning condition for use case %u in chain %s.",  buf,  0x22u);
          }

          __int16 v45 = *(uint64_t **)(v4 + 1112);
          uint64_t v46 = v58;
          __int16 v47 = v58;
          if (v45)
          {
            while (1)
            {
              while (1)
              {
                __int16 v47 = (uint64_t **)v45;
                unint64_t v48 = v45[4];
                if (v48 <= a2) {
                  break;
                }
                __int16 v45 = *v47;
                uint64_t v46 = v47;
                if (!*v47) {
                  goto LABEL_105;
                }
              }

              if (v48 >= a2) {
                break;
              }
              __int16 v45 = v47[1];
              if (!v45)
              {
                uint64_t v46 = v47 + 1;
                goto LABEL_105;
              }
            }

            unint64_t v50 = v47;
          }

          else
          {
LABEL_105:
            unint64_t v49 = v46;
            unint64_t v50 = operator new(0x88uLL);
            v50[4] = a2;
            *((_BYTE *)v50 + 48) = 0;
            *((_DWORD *)v50 + 32) = 0;
            *unint64_t v50 = 0LL;
            v50[1] = 0LL;
            v50[2] = v47;
            *unint64_t v49 = v50;
            uint64_t v51 = **(void **)(v4 + 1104);
            uint64_t v52 = v50;
            if (v51)
            {
              *(void *)(v4 + 1104) = v51;
              uint64_t v52 = *v49;
            }

            sub_7A420(*(uint64_t **)(v4 + 1112), v52);
            ++*(void *)(v4 + 1120);
          }

          uint64_t v53 = *((unsigned int *)v50 + 32);
          uint64_t v54 = *(unsigned int *)(a3 + 88);
          if ((_DWORD)v53 == -1)
          {
            if ((_DWORD)v54 != -1) {
              goto LABEL_113;
            }
          }

          else
          {
            if ((_DWORD)v54 == -1)
            {
              ((void (*)(_BYTE *, void *))off_473AB8[v53])(buf, v50 + 6);
              *((_DWORD *)v50 + 32) = -1;
              return;
            }

      unint64_t v48 = -1LL;
      unint64_t v49 = v15;
LABEL_92:
      unint64_t v50 = v49 - v42;
      if (v49 - v42 == 4)
      {
        v74 = v43;
        uint64_t v51 = bswap32(*(_DWORD *)((char *)&v19->__r_.__value_.__l.__data_ + v42));
        uint64_t v52 = *((void *)&v75 + 1);
        if (*((void *)&v75 + 1) >= v22)
        {
          uint64_t v57 = (void *)v75;
          char v58 = (uint64_t)(*((void *)&v75 + 1) - v75) >> 2;
          uint64_t v59 = v58 + 1;
          else {
            int v60 = v59;
          }
          if (v60) {
            int v60 = (unint64_t)sub_7A890(v60);
          }
          else {
            unsigned int v61 = 0LL;
          }
          char v62 = (unsigned int *)(v60 + 4 * v58);
          *char v62 = v51;
          uint64_t v53 = (uint64_t)(v62 + 1);
          while (v52 != (void)v75)
          {
            uint64_t v63 = *(_DWORD *)(v52 - 4);
            v52 -= 4LL;
            *--char v62 = v63;
          }

          uint64_t v22 = v60 + 4 * v61;
          *(void *)&__int16 v75 = v62;
          if (v57) {
            operator delete(v57);
          }
        }

        else
        {
          **((_DWORD **)&v75 + 1) = v51;
          uint64_t v53 = *((void *)&v75 + 1) + 4LL;
        }

        *(void *)&int v64 = v75;
        *((void *)&v64 + 1) = v53;
        __int16 v75 = v64;
        __int16 v43 = v74;
      }

      else
      {
        uint64_t v54 = (os_log_t *)sub_138E8(13);
        unint64_t v55 = *v54;
        if (*v54 && os_log_type_enabled(*v54, OS_LOG_TYPE_INFO))
        {
          std::string::basic_string(&__p, &__str, v42, v50, (std::allocator<char> *)&v81);
          p_p = &__p;
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "StandardUtilities.cpp";
          v83 = 1024;
          v84 = 779;
          unint64_t v85 = 2080;
          v86 = (const char *)p_p;
          _os_log_impl( &dword_0,  v55,  OS_LOG_TYPE_INFO,  "%25s:%-5d Skipping... 4cc code is not of size 4 : %s",  buf,  0x1Cu);
        }
      }

      uint64_t v15 = __str.__r_.__value_.__s.__size_;
      BOOL v16 = __str.__r_.__value_.__l.__size_;
      int64x2_t v18 = (std::string *)__str.__r_.__value_.__r.__words[0];
      uint64_t v65 = &__str;
      if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0)
      {
        unint64_t v66 = __str.__r_.__value_.__s.__size_;
      }

      else
      {
        unint64_t v66 = __str.__r_.__value_.__l.__size_;
        uint64_t v65 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }

      __int16 v67 = v66 > v48;
      uint64_t v68 = v66 - v48;
      if (!v67) {
        break;
      }
      ++v43;
      uint64_t v69 = (std::string *)((char *)v65 + v48);
      while (1)
      {
        __int16 v70 = v69->__r_.__value_.__s.__data_[0];
        if (v70 != 44 && v70 != 32) {
          break;
        }
        uint64_t v69 = (std::string *)((char *)v69 + 1);
        if (!--v68) {
          goto LABEL_38;
        }
      }

      int v42 = (char *)v69 - (char *)v65;
    }

    while ((char *)v69 - (char *)v65 != -1);
LABEL_38:
    int v23 = sub_138E8(13);
    if ((*(_BYTE *)(v23 + 8) & 1) != 0)
    {
      int v24 = *(os_log_s **)v23;
      if (*(void *)v23)
      {
        if (os_log_type_enabled(*(os_log_t *)v23, OS_LOG_TYPE_DEBUG))
        {
          sub_F6EB0(&__p, (unsigned int *)v75, *((unsigned int **)&v75 + 1));
          int v25 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "StandardUtilities.cpp";
          v83 = 1024;
          v84 = 789;
          unint64_t v85 = 2080;
          v86 = (const char *)v25;
          _os_log_impl(&dword_0, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d FCC in Vector: %s", buf, 0x1Cu);
        }
      }
    }

    *(_OWORD *)unsigned int v76 = v75;
    __int16 v77 = v22;
    __int16 v26 = 1;
    char v78 = 1;
    if ((char)__str.__r_.__value_.__s.__size_ < 0)
    {
      operator delete(__str.__r_.__value_.__l.__data_);
      __int16 v26 = v78;
    }
  }

  else
  {
    __int16 v26 = 0;
    LOBYTE(v76[0]) = 0;
    char v78 = 0;
  }

  if (v26) {
    unint64_t v27 = (unsigned int **)v76;
  }
  else {
    unint64_t v27 = a1 + 62;
  }
  __int16 v28 = (*((uint64_t (**)(unsigned int **, void))*a1 + 55))(a1, 0LL);
  uint64_t v29 = v28;
  if (v26) {
    uint64_t v30 = (unsigned int **)&v76[1];
  }
  else {
    uint64_t v30 = a1 + 63;
  }
  uint64_t v31 = *v30 - *v27;
  if (v31 == v28)
  {
    id v32 = (*((uint64_t (**)(unsigned int **, unsigned int **))*a1 + 62))(a1, v27);
    std::string v33 = (uint64_t)*v30;
    uint64_t v34 = *v27;
    if ((v32 & 1) != 0)
    {
      *a2 = 0LL;
      a2[1] = 0LL;
      a2[2] = 0LL;
      sub_7A5B8(a2, v34, v33, (v33 - (uint64_t)v34) >> 2);
      goto LABEL_72;
    }

    uint64_t v31 = (v33 - (uint64_t)v34) >> 2;
  }

  uint64_t v35 = v29;
  if (v31 != v29)
  {
    int v36 = (os_log_t *)sub_138E8(26);
    uint64_t v37 = *v36;
    if (*v36)
    {
      if (os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
      {
        std::string::size_type v38 = *v30 - *v27;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "Device_HapticDebug_Aspen.cpp";
        v83 = 1024;
        v84 = 134;
        unint64_t v85 = 2048;
        v86 = (const char *)v38;
        unsigned int v87 = 2048;
        unsigned int v88 = v35;
        _os_log_impl( &dword_0,  v37,  OS_LOG_TYPE_ERROR,  "%25s:%-5d # of haptic debug inputs (%lu) does not equal %zu",  buf,  0x26u);
      }
    }
  }

  if (((*((uint64_t (**)(unsigned int **, unsigned int **))*a1 + 62))(a1, v27) & 1) == 0)
  {
    unint64_t v39 = (os_log_t *)sub_138E8(26);
    __int128 v40 = *v39;
    if (*v39)
    {
      if (os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
      {
        sub_8F640(&__p, *v27, *v30);
        __int16 v41 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "Device_HapticDebug_Aspen.cpp";
        v83 = 1024;
        v84 = 135;
        unint64_t v85 = 2080;
        v86 = (const char *)v41;
        _os_log_impl(&dword_0, v40, OS_LOG_TYPE_ERROR, "%25s:%-5d Unsupported input in list %s", buf, 0x1Cu);
      }
    }
  }

  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
LABEL_72:
  if (v78)
  {
    if (v76[0])
    {
      v76[1] = v76[0];
      operator delete(v76[0]);
    }
  }

  *a4 = v24;
  a4[1] = (uint64_t)v23;
}

  if (!*(void *)(a6 + 56))
  {
    unsigned int v87 = (os_log_t *)sub_138E8(13);
    unsigned int v88 = *v87;
    if (*v87 && os_log_type_enabled(*v87, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 199;
      _os_log_impl(&dword_0, v88, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    goto LABEL_121;
  }

  if ((v75 & 1) == 0)
  {
    __int16 v77 = v72;
    while (*((_DWORD *)v77 + 8) != 1869442665)
    {
      v77 += 64;
      if (v77 == v73) {
        goto LABEL_98;
      }
    }

    uint64_t v72 = v77;
  }

void sub_1916C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33, uint64_t a34, void *__p, uint64_t a36, int a37, __int16 a38, char a39, char a40, uint64_t a41, uint64_t a42)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

os_signpost_id_t *sub_191798(os_signpost_id_t *a1)
{
  uint64_t v2 = sub_138E8(42);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    uint64_t v3 = (os_log_s *)*(id *)v2;
    if (v3)
    {
      uint64_t v4 = v3;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      {
        int v10 = 136315650;
        unint64_t v11 = "SignpostUtilities.h";
        __int16 v12 = 1024;
        int v13 = 91;
        __int16 v14 = 2080;
        uint64_t v15 = "kDSPInitialization";
        _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Ending measurement for signpost %s",  (uint8_t *)&v10,  0x1Cu);
      }
    }
  }

  if (*a1)
  {
    unsigned __int8 v5 = atomic_load((unsigned __int8 *)&qword_493908);
    if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
    {
      qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_493908);
    }

    unint64_t v6 = (os_log_s *)(id)qword_493900;
    unint64_t v7 = v6;
    os_signpost_id_t v8 = *a1;
    if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
    {
      LOWORD(v10) = 0;
      _os_signpost_emit_with_name_impl( &dword_0,  v7,  OS_SIGNPOST_INTERVAL_END,  v8,  "VA_DSPInitialization",  (const char *)&unk_420CC6,  (uint8_t *)&v10,  2u);
    }
  }

  return a1;
}

void sub_19193C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

double sub_191948(uint64_t a1, uint64_t a2, double a3)
{
  int v9 = 1936941859;
  double v10 = a3;
  sub_1919F8((uint64_t)v5, a2);
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (v8)
  {
    double result = *(double *)&v6;
    *(_OWORD *)a1 = v6;
    *(void *)(a1 + 16) = v7;
    *(_BYTE *)(a1 + 24) = 1;
  }

  return result;
}

uint64_t sub_1919B8(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  return a1;
}

void sub_1919F8(uint64_t a1, uint64_t a2)
{
  if ((sub_5C3C4(a2) & 1) != 0)
  {
    int v11 = 2003329396;
    LOBYTE(v12[0]) = 0;
    unsigned __int8 v14 = 0;
    unsigned int v4 = sub_5C41C(a2);
    unsigned int v10 = v4;
    if (v4)
    {
      sub_8683C(__p, v4 >> 2);
      int v5 = sub_5C474(a2);
      int v11 = v5;
      if (v5)
      {
        int v6 = 0;
        *(_DWORD *)a1 = v5;
        *(_BYTE *)(a1 + 8) = 0;
        *(_BYTE *)(a1 + 32) = 0;
      }

      else
      {
        uint64_t v7 = (void *)sub_908DC((uint64_t)v12, (uint64_t)__p);
        int v8 = v14;
        *(_DWORD *)a1 = v11;
        *(_BYTE *)(a1 + 8) = 0;
        *(_BYTE *)(a1 + 32) = 0;
        if (v8)
        {
          *(_OWORD *)(a1 + 8) = *(_OWORD *)v12;
          *(void *)(a1 + 24) = v13;
          v7[1] = 0LL;
          uint64_t v7[2] = 0LL;
          *uint64_t v7 = 0LL;
          int v6 = 1;
          *(_BYTE *)(a1 + 32) = 1;
        }

        else
        {
          int v6 = 0;
        }
      }

      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
        int v6 = v14;
      }

      if (v6)
      {
        if (v12[0])
        {
          v12[1] = v12[0];
          operator delete(v12[0]);
        }
      }
    }

    else
    {
      *(_DWORD *)a1 = 0;
      *(void *)(a1 + 16) = 0LL;
      *(void *)(a1 + 24) = 0LL;
      *(void *)(a1 + 8) = 0LL;
      *(_BYTE *)(a1 + 32) = 1;
    }
  }

  else
  {
    *(_DWORD *)a1 = 2003332927;
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 32) = 0;
  }

void sub_191B68(uint64_t **a1, unint64_t a2)
{
  unsigned int v4 = (uint64_t *)(a1 + 1);
  uint64_t v3 = a1[1];
  if (v3)
  {
    int v5 = v4;
    int v6 = v3;
    do
    {
      unint64_t v7 = v6[4];
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        int v9 = (uint64_t **)v6;
      }
      else {
        int v9 = (uint64_t **)(v6 + 1);
      }
      if (v8) {
        int v5 = v6;
      }
      int v6 = *v9;
    }

    while (*v9);
    if (v5 != v4 && v5[4] <= a2)
    {
      unsigned int v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          int v11 = v10;
          unsigned int v10 = (uint64_t *)*v10;
        }

        while (v10);
      }

      else
      {
        __int16 v12 = v5;
        do
        {
          int v11 = (uint64_t *)v12[2];
          BOOL v13 = *v11 == (void)v12;
          __int16 v12 = v11;
        }

        while (!v13);
      }

      if (*a1 == v5) {
        *a1 = v11;
      }
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      sub_911E8(v3, v5);
      sub_9DBD0((uint64_t)(v5 + 6));
      operator delete(v5);
    }
  }

uint64_t sub_191C34(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_191C64(uint64_t result, _BYTE *a2, _BYTE *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 80LL);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      *a2 = *a3;
      return result;
    }

    double result = ((uint64_t (*)(char *, uint64_t))off_473AB8[v5])(&v6, v4);
  }

  *(_BYTE *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 80) = 0;
  return result;
}

void sub_191CD0(uint64_t *a1, uint64_t a2, int *a3)
{
  uint64_t v4 = *a1;
  if (*(_DWORD *)(*a1 + 80) == 1)
  {
    int v6 = *a3;
    *(_BYTE *)(a2 + 4) = *((_BYTE *)a3 + 4);
    *(_DWORD *)a2 = v6;
    sub_1165B8((std::string *)(a2 + 8), (const std::string *)(a3 + 2));
    sub_1165B8((std::string *)(a2 + 40), (const std::string *)(a3 + 10));
    *(_WORD *)(a2 + 72) = *((_WORD *)a3 + 36);
  }

  else
  {
    uint64_t v11 = *(void *)a3;
    sub_C590C(&__p, (__int128 *)(a3 + 2));
    sub_C590C(&v15, (__int128 *)(a3 + 10));
    __int16 v18 = *((_WORD *)a3 + 36);
    uint64_t v7 = *(unsigned int *)(v4 + 80);
    if ((_DWORD)v7 != -1) {
      ((void (*)(char *, uint64_t))off_473AB8[v7])(&v19, v4);
    }
    *(_DWORD *)(v4 + 80) = -1;
    *(void *)uint64_t v4 = v11;
    *(_BYTE *)(v4 + 8) = 0;
    *(_BYTE *)(v4 + 32) = 0;
    int v8 = v14;
    if (v14)
    {
      __int128 v9 = __p;
      *(void *)(v4 + 24) = v13;
      *(_OWORD *)(v4 + 8) = v9;
      uint64_t v13 = 0LL;
      __int128 __p = 0uLL;
      *(_BYTE *)(v4 + 32) = 1;
    }

    *(_BYTE *)(v4 + 40) = 0;
    *(_BYTE *)(v4 + 64) = 0;
    if (v17)
    {
      __int128 v10 = v15;
      *(void *)(v4 + 56) = v16;
      *(_OWORD *)(v4 + 40) = v10;
      uint64_t v16 = 0LL;
      __int128 v15 = 0uLL;
      *(_BYTE *)(v4 + 64) = 1;
    }

    *(_WORD *)(v4 + 72) = v18;
    *(_DWORD *)(v4 + 80) = 1;
    if (v8)
    {
      if (SHIBYTE(v13) < 0) {
        operator delete((void *)__p);
      }
    }
  }

void sub_191E48( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a17)
  {
    if (a16 < 0) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(exception_object);
}

void sub_191E6C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  if (*(_DWORD *)(*a1 + 80) == 2)
  {
    if (a2 != a3)
    {
      sub_52A24(a2, *(void **)a3, (void *)(a3 + 8));
      sub_16C238((uint64_t **)(a2 + 24), *(void **)(a3 + 24), (void *)(a3 + 32));
      sub_16C238((uint64_t **)(a2 + 48), *(void **)(a3 + 48), (void *)(a3 + 56));
    }

    *(_WORD *)(a2 + 72) = *(_WORD *)(a3 + 72);
  }

  else
  {
    sub_86550((uint64_t *)&v16, a3);
    sub_16D268(&v19, (void *)(a3 + 24));
    sub_16D268(&v22, (void *)(a3 + 48));
    __int16 v25 = *(_WORD *)(a3 + 72);
    uint64_t v6 = *(unsigned int *)(v4 + 80);
    if ((_DWORD)v6 != -1) {
      ((void (*)(char *, uint64_t))off_473AB8[v6])(&v26, v4);
    }
    *(void *)uint64_t v4 = v16;
    uint64_t v7 = v17;
    *(void *)(v4 + 8) = v17;
    uint64_t v8 = v4 + 8;
    *(_DWORD *)(v4 + 80) = -1;
    uint64_t v9 = v18;
    *(void *)(v4 + 16) = v18;
    if (v9)
    {
      uint64_t v7[2] = v8;
      uint64_t v16 = &v17;
      char v17 = 0LL;
      uint64_t v18 = 0LL;
    }

    else
    {
      *(void *)uint64_t v4 = v8;
    }

    *(void *)(v4 + 24) = v19;
    __int128 v10 = v20;
    *(void *)(v4 + 32) = v20;
    uint64_t v11 = v4 + 32;
    uint64_t v12 = v21;
    *(void *)(v4 + 40) = v21;
    if (v12)
    {
      *((void *)v10 + 2) = v11;
      char v19 = &v20;
      uint64_t v20 = 0LL;
      uint64_t v21 = 0LL;
    }

    else
    {
      *(void *)(v4 + 24) = v11;
    }

    *(void *)(v4 + 48) = v22;
    uint64_t v13 = v23;
    *(void *)(v4 + 56) = v23;
    uint64_t v14 = v4 + 56;
    uint64_t v15 = v24;
    *(void *)(v4 + 64) = v24;
    if (v15)
    {
      *(void *)(v13 + 16) = v14;
      uint64_t v22 = &v23;
      uint64_t v23 = 0LL;
      uint64_t v24 = 0LL;
      uint64_t v13 = 0LL;
    }

    else
    {
      *(void *)(v4 + 48) = v14;
    }

    *(_WORD *)(v4 + 72) = v25;
    *(_DWORD *)(v4 + 80) = 2;
    sub_88C08((char *)v13);
    sub_88C08(v20);
    sub_32C8C(v17);
  }

void sub_19202C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, char *a14)
{
}

uint64_t sub_192050(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 80LL);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 3)
    {
      *a2 = *a3;
      return result;
    }

    double result = ((uint64_t (*)(char *, uint64_t))off_473AB8[v5])(&v6, v4);
  }

  *(_DWORD *)(v4 + 80) = -1;
  *(void *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 80) = 3;
  return result;
}

uint64_t sub_1920CC(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v4 = *(_DWORD **)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 80LL);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 4)
    {
      *a2 = *a3;
      return result;
    }

    double result = ((uint64_t (*)(char *, _DWORD *))off_473AB8[v5])(&v6, v4);
  }

  _DWORD *v4 = *a3;
  v4[20] = 4;
  return result;
}

uint64_t sub_192140(uint64_t a1)
{
  return a1;
}

uint64_t sub_192178(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 88);
  int v3 = *(_DWORD *)(a2 + 88);
  BOOL v4 = v3 == v2;
  BOOL v6 = v3 == -1;
  LODWORD(v5) = v3 == -1;
  if (v6) {
    BOOL v4 = 0;
  }
  if ((_DWORD)v2 == -1) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = v4;
  }
  BOOL v6 = (_DWORD)v2 == -1 || !v4;
  if (!v6)
  {
    uint64_t v9 = &v8;
    return ((uint64_t (*)(char **, uint64_t, uint64_t))off_473BA8[v2])(&v9, a1 + 8, a2 + 8);
  }

  return v5;
}

BOOL sub_1921EC(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  return *a2 == *a3;
}

uint64_t sub_192200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(unsigned __int8 *)(a3 + 4);
  if (*(_BYTE *)(a2 + 4)) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    if ((*(_BYTE *)(a2 + 4) != 0) != (v5 != 0)) {
      return 0LL;
    }
  }

  else if (*(_DWORD *)a2 != *(_DWORD *)a3)
  {
    return 0LL;
  }

  uint64_t result = sub_11A8D4((unsigned __int8 *)(a2 + 8), (unsigned __int8 *)(a3 + 8));
  if ((_DWORD)result)
  {
    uint64_t result = sub_11A8D4((unsigned __int8 *)(a2 + 40), (unsigned __int8 *)(a3 + 40));
    if ((_DWORD)result)
    {
      uint64_t result = (*(_BYTE *)(a2 + 73) != 0) == (*(_BYTE *)(a3 + 73) != 0);
      if (*(_BYTE *)(a2 + 73))
      {
        if (*(_BYTE *)(a3 + 73)) {
          return *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)(a3 + 72);
        }
      }
    }
  }

  return result;
}

BOOL sub_1922BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 16) != *(void *)(a3 + 16)) {
    return 0LL;
  }
  int v5 = *(void **)a2;
  if (*(void *)a2 != a2 + 8)
  {
    BOOL v6 = *(void **)a3;
    while (*((_DWORD *)v5 + 7) == *((_DWORD *)v6 + 7))
    {
      uint64_t v7 = (void *)v5[1];
      char v8 = v5;
      if (v7)
      {
        do
        {
          int v5 = v7;
          uint64_t v7 = (void *)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          int v5 = (void *)v8[2];
          BOOL v25 = *v5 == (void)v8;
          char v8 = v5;
        }

        while (!v25);
      }

      uint64_t v9 = (void *)v6[1];
      if (v9)
      {
        do
        {
          __int128 v10 = v9;
          uint64_t v9 = (void *)*v9;
        }

        while (v9);
      }

      else
      {
        do
        {
          __int128 v10 = (void *)v6[2];
          BOOL v25 = *v10 == (void)v6;
          BOOL v6 = v10;
        }

        while (!v25);
      }

      BOOL v6 = v10;
      if (v5 == (void *)(a2 + 8)) {
        goto LABEL_16;
      }
    }

    return 0LL;
  }

BOOL sub_192508(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return ((*a2 ^ *a3) & 3LL) == 0;
}

BOOL sub_192520(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return *a2 == *a3;
}

uint64_t sub_192534(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v6 = _os_assert_log(0LL);
    uint64_t result = _os_crash(v6);
    __break(1u);
  }

  else
  {
    if (*(_BYTE *)(a1 + 40)) {
      caulk::semaphore::~semaphore((caulk::semaphore *)(a1 + 24));
    }
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        unint64_t v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }

    return a1;
  }

  return result;
}

void sub_1925B8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_473D58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1925C8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_473D58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_1925E8(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_192630(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_473D20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_192640(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_473D20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_192660(uint64_t a1)
{
  if (*(void *)(a1 + 48))
  {
    if (*(_BYTE *)(a1 + 80))
    {
      caulk::semaphore::~semaphore((caulk::semaphore *)(a1 + 64));
      *(_BYTE *)(a1 + 80) = 0;
    }

    caulk::semaphore::semaphore((caulk::semaphore *)(a1 + 64), 0);
    *(_BYTE *)(a1 + 80) = 1;
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
    *(void *)(a1 + 48) = 0LL;
    *(void *)(a1 + 56) = 0LL;
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        unint64_t v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }

    caulk::semaphore::timed_wait((caulk::semaphore *)(a1 + 64), -1.0);
    __dmb(9u);
  }

  int v5 = *(std::__shared_weak_count **)(a1 + 104);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  sub_192534(a1 + 40);
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 32);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_19273C(uint64_t a1, void *a2, float *a3)
{
  if (a2 && a3)
  {
    if (*(void *)(a1 + 784) >= 2uLL)
    {
      uint64_t v6 = (os_log_s *)*(id *)sub_138E8(24);
      uint64_t v7 = v6;
      if (v6 && os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void *)(a1 + 784);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "DSPChain.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2862;
        __int16 v20 = 2048;
        uint64_t v21 = v8;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d PlaybackDosimetry: Associated ports = %lu > 1. Using first port.",  buf,  0x1Cu);
      }
    }

    sub_B8F68((uint64_t *)buf, (uint64_t *)(*(void *)(a1 + 776) + 16LL), "", 2863);
    sub_200F50(*(uint64_t *)buf);
    float v9 = sub_200CDC(*(uint64_t *)buf);
    sub_2012E0((CFDictionaryRef *)&cf, *(uint64_t *)buf);
    *a3 = v9;
    CFTypeRef v10 = cf;
    CFTypeRef v16 = cf;
    __int16 v17 = 0;
    if (cf)
    {
      CFRetain(cf);
      *a2 = v16;
      sub_13850((uint64_t)&v16);
      CFRelease(v10);
    }

    else
    {
      *a2 = 0LL;
      sub_13850((uint64_t)&v16);
    }

    uint64_t v13 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      uint64_t v14 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)*(id *)sub_138E8(24);
    uint64_t v12 = v11;
    if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "DSPChain.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2857;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PlaybackDosimetry: invalid volume curve or sensitivity pointers",  buf,  0x12u);
    }
  }

void sub_192974( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 buf)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    uint64_t v13 = sub_138E8(24);
    id v14 = sub_8C7D4(1, *(void **)v13, *(void *)(v13 + 8));
    unint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    CFTypeRef v16 = v15;
    if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315394;
      *(void *)((char *)&buf + 4) = "DSPChain.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 2875;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PlaybackDosimetry : Failed to set volume curve and sensitivity",  (uint8_t *)&buf,  0x12u);
    }

    __cxa_end_catch();
    JUMPOUT(0x192940LL);
  }

  _Unwind_Resume(a1);
}

void sub_192A74(void *a1, const __CFDictionary *a2, float a3)
{
  if (a1[98])
  {
    *(_OWORD *)uint64_t v100 = 0u;
    *(_OWORD *)v101 = 0u;
    *(_OWORD *)std::string::size_type v99 = 0u;
    sub_B8F68((uint64_t *)&v97, (uint64_t *)(a1[97] + 16LL), "", 2702);
    uint64_t v6 = (const void *)v97[31];
    *(void *)&buf.mSelector = v6;
    LOBYTE(buf.mElement) = *((_BYTE *)v97 + 256);
    if (LOBYTE(buf.mElement)) {
      BOOL v7 = v6 == 0LL;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      CFRetain(v6);
      uint64_t v6 = *(const void **)&buf.mSelector;
    }

    v100[1] = v6;
    sub_19DFC((uint64_t)&buf);
    buf.mSelector = 0;
    if (sub_1FFB50(v97, 0, (float *)&buf.mSelector))
    {
      uint64_t v8 = 1LL;
      *(void *)&v101[0] = 1LL;
    }

    else
    {
      uint64_t v8 = 0LL;
    }

    if (*((_DWORD *)v97 + 37) == 1885544823)
    {
      CFArrayRef Mutable = (CFArrayRef)v97;
      std::string::size_type v112 = v98;
      if (v98)
      {
        p_shared_weak_owners = (unint64_t *)&v98->__shared_weak_owners_;
        do
          unint64_t v12 = __ldxr(p_shared_weak_owners);
        while (__stxr(v12 + 1, p_shared_weak_owners));
      }

      sub_B8F68((uint64_t *)&v113, (uint64_t *)&Mutable, "", 2521);
      uint64_t v13 = *((void *)v113 + 24);
      if (v13)
      {
        LODWORD(cf) = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 120LL))(v13);
        strcpy((char *)&buf, "diabbolg");
        BYTE1(buf.mElement) = 0;
        HIWORD(buf.mElement) = 0;
        unint64_t v14 = sub_36EF4((AudioObjectID *)&cf, &buf, 0, 0LL);
        *((void *)&v17 + 1) = v15;
        *(void *)&__int128 v17 = v14;
        uint64_t v16 = v17 >> 32;
        if ((v16 & 0xFF00000000LL) != 0) {
          uint64_t v18 = v16;
        }
        else {
          uint64_t v18 = 0LL;
        }
        switch((int)v18)
        {
          case 8194:
          case 8207:
          case 8211:
            unint64_t v39 = @"AirPods";
            goto LABEL_91;
          case 8195:
            unint64_t v39 = @"Powerbeats3";
            goto LABEL_91;
          case 8197:
            unint64_t v39 = @"BeatsX";
            goto LABEL_91;
          case 8198:
            unint64_t v39 = @"Beats Solo3";
            goto LABEL_91;
          case 8201:
            unint64_t v39 = @"Beats Studio3";
            goto LABEL_91;
          case 8202:
            unint64_t v39 = @"AirPods Max";
            goto LABEL_91;
          case 8203:
            unint64_t v39 = @"Powerbeats Pro";
            goto LABEL_91;
          case 8204:
            unint64_t v39 = @"Beats Solo Pro";
            goto LABEL_91;
          case 8205:
            unint64_t v39 = @"Powerbeats";
            goto LABEL_91;
          case 8206:
          case 8212:
          case 8228:
            unint64_t v39 = @"AirPods Pro";
            goto LABEL_91;
          case 8208:
          case 8209:
          case 8210:
          case 8217:
          case 8218:
          case 8219:
          case 8221:
          case 8222:
          case 8223:
          case 8224:
          case 8229:
          case 8230:
            char v19 = (void *)objc_claimAutoreleasedReturnValue( +[CBProductInfo productInfoWithProductID:]( &OBJC_CLASS___CBProductInfo,  "productInfoWithProductID:",  v18));
            __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([v19 productName]);
            BOOL v21 = v20 == 0LL;

            if (!v21)
            {
              uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v19 productName]);
              v99[0] = (CFTypeRef)objc_claimAutoreleasedReturnValue(+[NSString stringWithString:](&OBJC_CLASS___NSString, "stringWithString:", v22));

LABEL_92:
              snprintf((char *)&cf, 7uLL, "0x%x", v18);
              sub_7D084(&buf, (char *)&cf);
              if ((SBYTE3(v119) & 0x80u) == 0) {
                p_AudioObjectPropertyAddress buf = (const char *)&buf;
              }
              else {
                p_AudioObjectPropertyAddress buf = *(const char **)&buf.mSelector;
              }
              v100[0] = CFStringCreateWithCString(kCFAllocatorDefault, p_buf, 0x600u);
              if (SBYTE3(v119) < 0) {
                operator delete(*(void **)&buf.mSelector);
              }
              goto LABEL_97;
            }

LABEL_65:
            (*(void (**)(AudioObjectPropertyAddress *__return_ptr))(*(void *)v113 + 144LL))(&buf);
            v99[0] = *(CFTypeRef *)&buf.mSelector;
            sub_19DFC((uint64_t)&buf);
            if ((_DWORD)v18) {
              goto LABEL_92;
            }
LABEL_97:
            if (sub_1FF9AC(v113))
            {
              v99[1] = @"Apple Inc.";
            }

            else
            {
              CFMutableDictionaryRef v46 = v113;
              int v47 = *((_DWORD *)v113 + 36);
              if (v47 == 1885892674 || v47 == 1886216820 || v47 == 1885892706)
              {
                if (*((void *)v113 + 24))
                {
                  if ((*(unsigned int (**)(CFMutableDictionaryRef))(*(void *)v113 + 152LL))(v113))
                  {
                    strcpy((char *)&buf, "dinvbolg");
                    BYTE1(buf.mElement) = 0;
                    HIWORD(buf.mElement) = 0;
                    if ((*(unsigned int (**)(CFMutableDictionaryRef, AudioObjectPropertyAddress *))(*(void *)v46 + 16LL))( v46,  &buf))
                    {
                      LODWORD(cf) = 0;
                      LODWORD(v106) = 4;
                      strcpy((char *)&buf, "dinvbolg");
                      BYTE1(buf.mElement) = 0;
                      HIWORD(buf.mElement) = 0;
                      (*(void (**)(CFMutableDictionaryRef, AudioObjectPropertyAddress *, void, void, uint64_t *, CFTypeRef *))(*(void *)v46 + 40LL))( v46,  &buf,  0LL,  0LL,  &v106,  &cf);
                      if ((_DWORD)cf)
                      {
                        snprintf((char *)&cf, 7uLL, "0x%x", (_DWORD)cf);
                        sub_7D084(&buf, (char *)&cf);
                        unint64_t v48 = (SBYTE3(v119) & 0x80u) == 0 ? (const char *)&buf : *(const char **)&buf.mSelector;
                        v99[1] = CFStringCreateWithCString(kCFAllocatorDefault, v48, 0x600u);
                        if (SBYTE3(v119) < 0) {
                          operator delete(*(void **)&buf.mSelector);
                        }
                      }
                    }
                  }
                }
              }
            }

            break;
          case 8214:
            unint64_t v39 = @"Beats Studio Buds +";
            goto LABEL_91;
          case 8215:
            unint64_t v39 = @"Beats Studio Pro";
LABEL_91:
            v99[0] = v39;
            goto LABEL_92;
          default:
            goto LABEL_65;
        }
      }

      else
      {
        v99[0] = @"Unknown";
      }

      unint64_t v49 = v114;
      if (v114)
      {
        p_shared_owners = (unint64_t *)&v114->__shared_owners_;
        do
          unint64_t v51 = __ldaxr(p_shared_owners);
        while (__stlxr(v51 - 1, p_shared_owners));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }

      if (v112) {
        std::__shared_weak_count::__release_weak(v112);
      }
      float v29 = 1.0;
      goto LABEL_119;
    }

    CFArrayRef Mutable = (CFArrayRef)v97;
    std::string::size_type v112 = v98;
    if (v98)
    {
      uint64_t v23 = (unint64_t *)&v98->__shared_weak_owners_;
      do
        unint64_t v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }

    sub_B8F68((uint64_t *)&v113, (uint64_t *)&Mutable, "", 2627);
    uint64_t v25 = v8 | 2;
    *(void *)&v101[0] = v8 | 2;
    int v26 = *((_DWORD *)v113 + 66);
    if (v26 > 1647718501)
    {
      if (v26 != 1752709424 && v26 != 2004367664) {
        goto LABEL_58;
      }
      v99[0] = @"MFi";
    }

    else
    {
      if (v26 <= 1647521841)
      {
        if (v26 != 1214329654 && v26 != 1214394677) {
          goto LABEL_58;
        }
LABEL_42:
        v99[0] = @"EarPods";
        v99[1] = @"Apple Inc.";
        float v29 = flt_400460[MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 2];
        goto LABEL_51;
      }

      if (v26 != 1647521842 && v26 != 1647522096)
      {
LABEL_58:
        uint64_t v34 = *((void *)v113 + 24);
        if (!v34)
        {
          v99[0] = @"Wired";
          *(void *)&v101[0] = v8 | 6;
          __int128 v40 = (os_log_s *)*(id *)sub_138E8(24);
          __int16 v41 = v40;
          if (v40 && os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
          {
            buf.mSelector = 136315394;
            *(void *)&buf.mScope = "DSPChain.mm";
            __int16 v116 = 1024;
            int v117 = 2686;
            _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PlaybackDosimetry : Cannot get device UID, assumed headset jack",  (uint8_t *)&buf,  0x12u);
          }

          goto LABEL_186;
        }

        strcpy((char *)&buf, "nartbolg");
        BYTE1(buf.mElement) = 0;
        HIWORD(buf.mElement) = 0;
        unint64_t v35 = sub_5C2F8(v34);
        *((void *)&v37 + 1) = v36;
        *(void *)&__int128 v37 = v35;
        if (((v37 >> 32) & 0xFF00000000LL) != 0 && HIDWORD(v35) == 1970496032LL)
        {
          (*(void (**)(AudioObjectPropertyAddress *__return_ptr))(*(void *)v113 + 144LL))(&buf);
          v99[0] = *(CFTypeRef *)&buf.mSelector;
          sub_19DFC((uint64_t)&buf);
        }

        else
        {
          uint64_t v25 = v8 | 0x12;
          *(void *)&v101[0] = v8 | 0x12;
          v99[0] = @"Wired";
        }

        (*(void (**)(CFTypeRef *__return_ptr, uint64_t))(*(void *)v34 + 448LL))(&cf, v34);
        int v42 = (const __CFString *)cf;
        v100[1] = cf;
        CFRetain(@"Codec");
        CFTypeID v43 = CFGetTypeID(@"Codec");
        if (v43 == CFStringGetTypeID())
        {
          if (v42) {
            CFComparisonResult v44 = CFStringCompare(v42, @"Codec", 0LL);
          }
          else {
            CFComparisonResult v44 = kCFCompareLessThan;
          }
          CFRelease(@"Codec");
          if (!v42)
          {
LABEL_178:
            if (v44)
            {
              v93 = (os_log_s *)*(id *)sub_138E8(24);
              uint64_t v94 = v93;
              if (v93 && os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
              {
                buf.mSelector = 136315650;
                *(void *)&buf.mScope = "DSPChain.mm";
                __int16 v116 = 1024;
                int v117 = 2679;
                __int16 v118 = 2112;
                double v119 = *(double *)&cf;
                _os_log_impl( &dword_0,  v94,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d PlaybackDosimetry : Wired Device UID: %@",  (uint8_t *)&buf,  0x1Cu);
              }

              goto LABEL_184;
            }

LABEL_183:
            *(void *)&v101[0] = v25 | 4;
LABEL_184:
LABEL_186:
            float v29 = 0.92;
LABEL_51:
            uint64_t v31 = v114;
            if (v114)
            {
              id v32 = (unint64_t *)&v114->__shared_owners_;
              do
                unint64_t v33 = __ldaxr(v32);
              while (__stlxr(v33 - 1, v32));
              if (!v33)
              {
                ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                std::__shared_weak_count::__release_weak(v31);
              }
            }

            if (v112) {
              std::__shared_weak_count::__release_weak(v112);
            }
LABEL_119:
            v95 = v97;
            id v96 = v98;
            if (v98)
            {
              uint64_t v52 = (unint64_t *)&v98->__shared_weak_owners_;
              do
                unint64_t v53 = __ldxr(v52);
              while (__stxr(v53 + 1, v52));
            }

            CFMutableDictionaryRef v113 = a2;
            LOWORD(v114) = 0;
            CFArrayRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
            LOWORD(v112) = 257;
            *(double *)&CFTypeRef cf = COERCE_DOUBLE(CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks));
            __int16 v110 = 257;
            sub_51BD8(&v113, @"OutputMap", (uint64_t)&cf);
            sub_51BD8(&v113, @"InputMap", (uint64_t)&Mutable);
            float v108 = 0.0;
            int Count = (int)cf;
            sub_1A0E8C((CFArrayRef *)&cf, Count - 1, &v108);
            float v55 = (float)((float)(a3 + -12.83) - v108) + 13.0;
            int v56 = (os_log_s *)*(id *)sub_138E8(24);
            uint64_t v57 = v56;
            if (v56 && os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
            {
              buf.mSelector = 136316162;
              *(void *)&buf.mScope = "DSPChain.mm";
              __int16 v116 = 1024;
              int v117 = 2766;
              __int16 v118 = 2048;
              double v119 = a3;
              __int16 v120 = 2048;
              double v121 = v108;
              __int16 v122 = 2048;
              double v123 = v55;
              _os_log_impl( &dword_0,  v57,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d PlaybackDosimetry: senstivity: %.2f, max output volume: %.2f offset: %.2f",  (uint8_t *)&buf,  0x30u);
            }

            float v58 = 80.0 - v55;
            float v59 = 74.0 - v55;
            int v60 = (os_log_s *)*(id *)sub_138E8(24);
            unsigned int v61 = v60;
            if (v60 && os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
            {
              buf.mSelector = 136315906;
              *(void *)&buf.mScope = "DSPChain.mm";
              __int16 v116 = 1024;
              int v117 = 2771;
              __int16 v118 = 2048;
              double v119 = v58;
              __int16 v120 = 2048;
              double v121 = v59;
              _os_log_impl( &dword_0,  v61,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d PlaybackDosimetry: mapped 80dB volume: %.2f, mapped 74dB volume: %.2f",  (uint8_t *)&buf,  0x26u);
            }

            float v62 = sub_1952D4(&Mutable, (CFArrayRef *)&cf, v59);
            float v63 = sub_1952D4(&Mutable, (CFArrayRef *)&cf, v58);
            int v64 = (os_log_s *)*(id *)sub_138E8(24);
            uint64_t v65 = v64;
            if (v64 && os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
            {
              buf.mSelector = 136315906;
              *(void *)&buf.mScope = "DSPChain.mm";
              __int16 v116 = 1024;
              int v117 = 2777;
              __int16 v118 = 2048;
              double v119 = v63;
              __int16 v120 = 2048;
              double v121 = v62;
              _os_log_impl( &dword_0,  v65,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d PlaybackDosimetry: target dB volume at 80dB: %.2fdB, at 74dB: %.2fdB",  (uint8_t *)&buf,  0x26u);
            }

            sub_B8F68(&v106, (uint64_t *)&v95, "", 2779);
            uint64_t v66 = *(void *)(v106 + 192);
            if (v66
              && ((*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, void))(*(void *)v66 + 256LL))( &v104,  v66,  1LL,  *(unsigned int *)(v106 + 144)),  v105))
            {
              __int16 v67 = std::__shared_weak_count::lock(v105);
              uint64_t v103 = v67;
              if (v67)
              {
                uint64_t v68 = v67;
                uint64_t v102 = v104;
                float v69 = -1.0;
                if (v104)
                {
                  uint64_t v70 = (*(uint64_t (**)(uint64_t))(*(void *)v104 + 128LL))(v104);
                  float v71 = -1.0;
                  if (v72)
                  {
                    uint64_t v73 = v70;
                    float v74 = sub_757A4(v70, v62);
                    float v75 = sub_757A4(v73, v63);
                    sub_64424(v73, v74);
                    float v77 = v76;
                    sub_64424(v73, v75);
                    float v79 = v78;
                    float v71 = v74 / v29;
                    float v69 = v75 / v29;
                    __int16 v80 = (os_log_s *)*(id *)sub_138E8(24);
                    v81 = v80;
                    if (v80 && os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
                    {
                      buf.mSelector = 136316674;
                      *(void *)&buf.mScope = "DSPChain.mm";
                      __int16 v116 = 1024;
                      int v117 = 2798;
                      __int16 v118 = 2048;
                      double v119 = v69;
                      __int16 v120 = 2048;
                      double v121 = v71;
                      __int16 v122 = 2048;
                      double v123 = v77;
                      __int16 v124 = 2048;
                      double v125 = v79;
                      __int16 v126 = 2048;
                      double v127 = v29;
                      _os_log_impl( &dword_0,  v81,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d PlaybackDosimetry: target scalar volume at 80dB: %.2f, at 74dB: %.2f convert back to d B: %.2f, %.2f scalar coefficient: %.4f",  (uint8_t *)&buf,  0x44u);
                    }
                  }
                }

                else
                {
                  float v71 = -1.0;
                }

                uint64_t v82 = (unint64_t *)&v68->__shared_owners_;
                do
                  unint64_t v83 = __ldaxr(v82);
                while (__stlxr(v83 - 1, v82));
                if (!v83)
                {
                  ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                  std::__shared_weak_count::__release_weak(v68);
                }
              }

              else
              {
                float v69 = -1.0;
                float v71 = -1.0;
              }

              if (v105) {
                std::__shared_weak_count::__release_weak(v105);
              }
            }

            else
            {
              float v69 = -1.0;
              float v71 = -1.0;
            }

            v84 = v107;
            if (v107)
            {
              unint64_t v85 = (unint64_t *)&v107->__shared_owners_;
              do
                unint64_t v86 = __ldaxr(v85);
              while (__stlxr(v86 - 1, v85));
              if (!v86)
              {
                ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                std::__shared_weak_count::__release_weak(v84);
              }
            }

            sub_13818((uint64_t)&cf);
            sub_13818((uint64_t)&Mutable);
            sub_13850((uint64_t)&v113);
            if (v96) {
              std::__shared_weak_count::__release_weak(v96);
            }
            CFMutableDictionaryRef v113 = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
            LOWORD(v114) = 257;
            sub_1A3138((uint64_t)&v113, @"ScalarVolume74", v71);
            sub_1A3138((uint64_t)&v113, @"ScalarVolume80", v69);
            *(void *)&v101[1] = v113;
            unsigned int v87 = (os_log_s *)*(id *)sub_138E8(24);
            unsigned int v88 = v87;
            if (v87 && os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
            {
              buf.mSelector = 136317442;
              *(void *)&buf.mScope = "DSPChain.mm";
              __int16 v116 = 1024;
              int v117 = 2730;
              __int16 v118 = 2112;
              double v119 = *(double *)v99;
              __int16 v120 = 2112;
              double v121 = *(double *)v100;
              __int16 v122 = 2112;
              double v123 = *(double *)&v99[1];
              __int16 v124 = 2112;
              double v125 = *(double *)&v100[1];
              __int16 v126 = 2048;
              double v127 = v101[0];
              __int16 v128 = 2048;
              double v129 = a3;
              __int16 v130 = 2048;
              double v131 = v71;
              __int16 v132 = 2048;
              double v133 = v69;
              _os_log_impl( &dword_0,  v88,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d PlaybackDosimetry : Device Info: {Name: '%@' Model: '%@' Manufacture: '%@' UUID: '%@' device f lag: '%0llx' sensitivity: %.4f scalar74: %.4f scalar80: %.4f}",  (uint8_t *)&buf,  0x62u);
            }

            uint64_t v89 = a1[92];
            if (qword_4919C8 != -1) {
              dispatch_once(&qword_4919C8, &stru_473A98);
            }
            if (off_491A48) {
              off_491A48(v89, v99);
            }
            if (v100[0]) {
              CFRelease(v100[0]);
            }
            if (v99[1]) {
              CFRelease(v99[1]);
            }
            sub_13850((uint64_t)&v113);
            v90 = v98;
            if (v98)
            {
              unsigned int v91 = (unint64_t *)&v98->__shared_owners_;
              do
                unint64_t v92 = __ldaxr(v91);
              while (__stlxr(v92 - 1, v91));
              if (!v92)
              {
                ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                std::__shared_weak_count::__release_weak(v90);
              }
            }

            return;
          }
        }

        else
        {
          CFRelease(@"Codec");
          if (!v42) {
            goto LABEL_183;
          }
          CFComparisonResult v44 = kCFCompareGreaterThan;
        }

        CFRelease(v42);
        goto LABEL_178;
      }

      v99[0] = @"Beats";
      v99[1] = @"Apple Inc.";
    }

    float v29 = 1.0;
    goto LABEL_51;
  }

  float v9 = (os_log_s *)*(id *)sub_138E8(24);
  CFTypeRef v10 = v9;
  if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    buf.mSelector = 136315394;
    *(void *)&buf.mScope = "DSPChain.mm";
    __int16 v116 = 1024;
    int v117 = 2746;
    _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PlaybackDosimetry : no associated ports in dspchain?",  (uint8_t *)&buf,  0x12u);
  }
}

        unint64_t v152 = operator new(0x20uLL);
        v152[2] = v52;
        v152[3] = v51;
        v153 = v427;
        *unint64_t v152 = v427;
        v152[1] = &v427;
        *(void *)(v153 + 8) = v152;
        *(void *)&v427 = v152;
        *(void *)&v428 = v428 + 1;
        v154 = (std::__shared_weak_count *)a6[1];
        if (v154)
        {
          std::string::size_type v155 = std::__shared_weak_count::lock(v154);
          v156 = v155;
          if (v155)
          {
            v157 = *a6;
            std::string::size_type v158 = (unint64_t *)&v155->__shared_weak_owners_;
            do
              int64x2_t v159 = __ldxr(v158);
            while (__stxr(v159 + 1, v158));
            v160 = (unint64_t *)&v155->__shared_owners_;
            do
              v161 = __ldaxr(v160);
            while (__stlxr(v161 - 1, v160));
            if (!v161)
            {
              ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
              std::__shared_weak_count::__release_weak(v156);
            }

  if (v95 && *(_BYTE *)(v96 + 364) && *v95)
  {
    uint64_t v150 = 0LL;
    uint64_t v151 = (void **)(v95 + 4);
    do
    {
      bzero(*v151, *((unsigned int *)v151 - 1));
      ++v150;
      v151 += 2;
    }

    while (v150 < *v95);
  }

  return 0LL;
}

void sub_193AB0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, std::__shared_weak_count *a25, char a26, uint64_t a27, uint64_t a28, char a29, uint64_t a30, char a31, uint64_t a32, char a33, uint64_t a34, void *__p, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  sub_7A768((uint64_t)&a33);
  if (v40) {
    std::__shared_weak_count::__release_weak(v40);
  }
  sub_7A768((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_193CC0(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  if (a1[796])
  {
    int v5 = (std::__shared_weak_count *)a2[1];
    if (v5)
    {
      BOOL v7 = std::__shared_weak_count::lock(v5);
      if (v7)
      {
        uint64_t v8 = v7;
        uint64_t v9 = *a2;
        if (!v9)
        {
LABEL_40:
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            unint64_t v28 = __ldaxr(p_shared_owners);
          while (__stlxr(v28 - 1, p_shared_owners));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }

          return;
        }

        if (!a1[798])
        {
          int v16 = 1;
          goto LABEL_26;
        }

        if ((_DWORD)a3 == 1701865584 || (_DWORD)a3 == 1701868910)
        {
          if (!(*(unsigned int (**)(uint64_t))(*(void *)v9 + 456LL))(v9))
          {
            int v16 = 0;
LABEL_25:
            if (a1[798])
            {
LABEL_30:
              LODWORD(__p[0]) = v16;
              (*(void (**)(_BYTE *, uint64_t, uint64_t, void **, uint64_t, void))(*(void *)a1 + 112LL))( a1,  1936747629LL,  21LL,  __p,  4LL,  0LL);
              uint64_t v22 = (os_log_s *)*(id *)sub_138E8(24);
              uint64_t v23 = v22;
              if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
              {
                unint64_t v24 = "*running*";
                unint64_t v35 = "DSPChain.mm";
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                if (v16) {
                  unint64_t v24 = "*bypassed*";
                }
                __int16 v36 = 1024;
                int v37 = 713;
                __int16 v38 = 2080;
                *(void *)unint64_t v39 = v24;
                _os_log_impl(&dword_0, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry: AUSPL is %s", buf, 0x1Cu);
              }

              a1[797] = v16 ^ 1;
              if (*(_DWORD *)(v9 + 144) == 1886152047)
              {
                uint64_t v25 = (os_log_s *)*(id *)sub_138E8(24);
                int v26 = v25;
                if (v25 && os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                  unint64_t v35 = "DSPChain.mm";
                  __int16 v36 = 1024;
                  int v37 = 726;
                  _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d PlaybackDosimetry: PortType is BluetoothLEOutput. Will not report SPL data",  buf,  0x12u);
                }

                a1[797] = 0;
              }

              goto LABEL_40;
            }

void sub_194174(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  sub_19DFC((uint64_t)va1);
  sub_19DFC((uint64_t)va2);
  sub_7A768((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1941B8(unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (a2 != 1)
  {
    uint64_t v19 = sub_138E8(13);
    id v20 = sub_8C7D4(1, *(void **)v19, *(void *)(v19 + 8));
    BOOL v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    uint64_t v22 = v21;
    if (v21 && os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      id v32 = "DSPChain.mm";
      __int16 v33 = 1024;
      int v34 = 2339;
      __int16 v35 = 1024;
      unsigned int v36 = a2;
      __int16 v37 = 1024;
      *(_DWORD *)__int16 v38 = a1;
      *(_WORD *)&v38[4] = 2048;
      *(void *)&v38[6] = a4;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): PlaybackDosimetry : DeviceVolumeChangeHandler called with %u property addresses? should be 1. deviceID: %u client: %p",  buf,  0x28u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error( exception,  "PlaybackDosimetry : DeviceVolumeChangeHandler called with %u property addresses? should be 1. deviceID: %u client: %p");
  }

  if (!a3)
  {
    uint64_t v24 = sub_138E8(13);
    id v25 = sub_8C7D4(1, *(void **)v24, *(void *)(v24 + 8));
    int v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    unint64_t v27 = v26;
    if (v26 && os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      id v32 = "DSPChain.mm";
      __int16 v33 = 1024;
      int v34 = 2344;
      __int16 v35 = 1024;
      unsigned int v36 = a1;
      __int16 v37 = 2048;
      *(void *)__int16 v38 = a4;
      _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): PlaybackDosimetry : DeviceVolumeChangeHandler called with NULL propert y addresses?  deviceID: %u client: %p",  buf,  0x22u);
    }

    unint64_t v28 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error( v28,  "PlaybackDosimetry : DeviceVolumeChangeHandler called with NULL property addresses?  deviceID: %u client: %p");
  }

  uint64_t result = 560232035LL;
  uint64_t v8 = *(void *)(a4 + 856);
  if (v8)
  {
    uint64_t v9 = a4 + 856;
    do
    {
      unsigned int v10 = *(_DWORD *)(v8 + 28);
      BOOL v11 = v10 >= a1;
      if (v10 >= a1) {
        int v12 = (uint64_t *)v8;
      }
      else {
        int v12 = (uint64_t *)(v8 + 8);
      }
      if (v11) {
        uint64_t v9 = v8;
      }
      uint64_t v8 = *v12;
    }

    while (*v12);
    if (v9 != a4 + 856 && *(_DWORD *)(v9 + 28) <= a1)
    {
      uint64_t v13 = sub_EAD14();
      uint64_t v14 = operator new(0x28uLL);
      *uint64_t v14 = &off_473E48;
      v14[1] = a4;
      v14[2] = a3;
      *((_DWORD *)v14 + 6) = a1;
      char v14[4] = a4;
      char v30 = v14;
      int v15 = sub_EAF70(v13, a1, (uint64_t)v29);
      int v16 = v30;
      if (v30 == v29)
      {
        uint64_t v17 = 4LL;
        int v16 = v29;
      }

      else
      {
        if (!v30)
        {
          if (v15) {
            return 0LL;
          }
          return 1717660012LL;
        }

        uint64_t v17 = 5LL;
      }

      (*(void (**)(void))(*v16 + 8 * v17))();
      if ((v15 & 1) != 0) {
        return 0LL;
      }
      return 1717660012LL;
    }
  }

  return result;
}

void sub_194490( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t v14 = a12;
  if (a12 == v12)
  {
    uint64_t v15 = 4LL;
    uint64_t v14 = &a9;
  }

  else
  {
    if (!a12) {
      goto LABEL_6;
    }
    uint64_t v15 = 5LL;
  }

  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

__n128 sub_1944EC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &off_473E48;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_19452C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_473E48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_194554(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    int v68 = *(_DWORD *)(a1 + 24);
    unint64_t v4 = *(const AudioObjectPropertyAddress **)(a1 + 16);
    uint64_t v64 = *(void *)(a1 + 8);
    int v65 = v68;
    uint64_t v66 = *(void *)(a1 + 32);
    uint64_t v67 = v3;
    AudioObjectPropertySelector mSelector = v4->mSelector;
    if (v4->mSelector == 1836414053)
    {
      if ((sub_194CB0((uint64_t)&v67) & 1) == 0)
      {
        BOOL result = sub_194DCC((uint64_t)&v64);
        if (!result) {
          return result;
        }
        outData[0] = 0.0;
        ioDataSize[0] = 4;
        AudioObjectGetPropertyData(*(_DWORD *)(a1 + 24), v4, 0, 0LL, ioDataSize, outData);
        if (LODWORD(outData[0]) == 1) {
          sub_194ECC(*(void **)(a1 + 8), *(_DWORD *)(a1 + 24), -3.4028e38);
        }
      }

      return 1LL;
    }

    if (mSelector != 1970496630)
    {
      if (mSelector == 1987013732)
      {
        if ((sub_194CB0((uint64_t)&v67) & 1) == 0)
        {
          BOOL result = sub_194DCC((uint64_t)&v64);
          if (!result) {
            return result;
          }
          outData[0] = 0.0;
          ioDataSize[0] = 4;
          AudioObjectGetPropertyData(*(_DWORD *)(a1 + 24), v4, 0, 0LL, ioDataSize, outData);
          sub_194ECC(*(void **)(a1 + 8), *(_DWORD *)(a1 + 24), outData[0]);
        }
      }

      else
      {
        id v19 = *(id *)sub_138E8(24);
        id v20 = v19;
        if (v19)
        {
          BOOL v21 = (os_log_s *)v19;
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            sub_2CA1C(ioDataSize, v4->mSelector);
            if (v62 >= 0) {
              uint64_t v22 = ioDataSize;
            }
            else {
              uint64_t v22 = *(UInt32 **)ioDataSize;
            }
            int v23 = *(_DWORD *)(a1 + 24);
            outData[0] = 4.8153e-34;
            *(void *)&outData[1] = "DSPChain.mm";
            __int16 v70 = 1024;
            int v71 = 2439;
            __int16 v72 = 2080;
            *(void *)uint64_t v73 = v22;
            *(_WORD *)&v73[8] = 1024;
            *(_DWORD *)&v73[10] = v23;
            _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d PlaybackDosimetry: unknown selector for property handler %s device: %u",  (uint8_t *)outData,  0x22u);
            if (v62 < 0) {
              operator delete(*(void **)ioDataSize);
            }
          }
        }
      }

      return 1LL;
    }

    BOOL result = sub_194DCC((uint64_t)&v64);
    if (!result) {
      return result;
    }
    unsigned int v63 = 1701868910;
    uint64_t v11 = sub_195228(v3, (int *)&v63);
    if ((_DWORD)v11)
    {
      uint64_t v12 = sub_138E8(17);
      uint64_t v13 = sub_138E8(28);
      char v14 = 0;
      uint64_t v15 = 0LL;
      *(void *)double outData = 0x100000002LL;
      uint64_t v16 = *(void *)(v12 + 8);
      while (1)
      {
        uint64_t v17 = SLODWORD(outData[v15]);
        char v18 = v14;
        if (((v16 & v17) != 0) != ((*(void *)(v13 + 8) & v17) != 0)) {
          break;
        }
        char v14 = 1;
        uint64_t v15 = 1LL;
        if ((v18 & 1) != 0) {
          goto LABEL_38;
        }
      }

      if ((v16 & v17) == 0) {
        uint64_t v12 = v13;
      }
LABEL_38:
      uint64_t v35 = sub_138E8(24);
      char v36 = 0;
      uint64_t v37 = 0LL;
      *(void *)double outData = 0x100000002LL;
      uint64_t v38 = *(void *)(v12 + 8);
      while (1)
      {
        uint64_t v39 = SLODWORD(outData[v37]);
        char v40 = v36;
        if (((v38 & v39) != 0) != ((*(void *)(v35 + 8) & v39) != 0)) {
          break;
        }
        char v36 = 1;
        uint64_t v37 = 1LL;
        if ((v40 & 1) != 0) {
          goto LABEL_44;
        }
      }

      if ((v38 & v39) == 0) {
        uint64_t v12 = v35;
      }
LABEL_44:
      id v41 = *(id *)v12;
      if (v41)
      {
        __int16 v42 = (os_log_s *)v41;
        if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(ioDataSize, v11);
          if (v62 >= 0) {
            CFTypeID v43 = ioDataSize;
          }
          else {
            CFTypeID v43 = *(UInt32 **)ioDataSize;
          }
          outData[0] = 4.8152e-34;
          *(void *)&outData[1] = "DSPChain.mm";
          __int16 v70 = 1024;
          int v71 = 2434;
          __int16 v72 = 2080;
          *(void *)uint64_t v73 = v43;
          _os_log_impl( &dword_0,  v42,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PlaybackDosimetry: failed to fetch user selected endpoint type. err '%s'",  (uint8_t *)outData,  0x1Cu);
LABEL_50:
          if (v62 < 0) {
            operator delete(*(void **)ioDataSize);
          }
          goto LABEL_77;
        }

        goto LABEL_77;
      }
    }

    else
    {
      unsigned int v24 = v63;
      uint64_t v25 = *(void *)(a1 + 8);
      if (v63 == *(_DWORD *)(v25 + 800)) {
        return 1LL;
      }
      sub_193CC0((_BYTE *)v25, (uint64_t *)(v25 + 808), v63);
      uint64_t v26 = *(void *)(a1 + 8);
      uint64_t v27 = *(unsigned int *)(v26 + 800);
      *(_DWORD *)(v26 + 800) = v24;
      uint64_t v28 = sub_138E8(17);
      uint64_t v29 = sub_138E8(28);
      char v30 = 0;
      uint64_t v31 = 0LL;
      *(void *)double outData = 0x100000002LL;
      uint64_t v32 = *(void *)(v28 + 8);
      while (1)
      {
        uint64_t v33 = SLODWORD(outData[v31]);
        char v34 = v30;
        if (((v32 & v33) != 0) != ((*(void *)(v29 + 8) & v33) != 0)) {
          break;
        }
        char v30 = 1;
        uint64_t v31 = 1LL;
        if ((v34 & 1) != 0) {
          goto LABEL_54;
        }
      }

      if ((v32 & v33) == 0) {
        uint64_t v28 = v29;
      }
LABEL_54:
      uint64_t v44 = sub_138E8(24);
      char v45 = 0;
      uint64_t v46 = 0LL;
      *(void *)double outData = 0x100000002LL;
      uint64_t v47 = *(void *)(v28 + 8);
      while (1)
      {
        uint64_t v48 = SLODWORD(outData[v46]);
        char v49 = v45;
        if (((v47 & v48) != 0) != ((*(void *)(v44 + 8) & v48) != 0)) {
          break;
        }
        char v45 = 1;
        uint64_t v46 = 1LL;
        if ((v49 & 1) != 0) {
          goto LABEL_60;
        }
      }

      if ((v47 & v48) == 0) {
        uint64_t v28 = v44;
      }
LABEL_60:
      id v50 = *(id *)v28;
      if (v50)
      {
        __int16 v42 = (os_log_s *)v50;
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
        {
          sub_2CA1C(ioDataSize, v27);
          if (v62 >= 0) {
            unint64_t v51 = ioDataSize;
          }
          else {
            unint64_t v51 = *(UInt32 **)ioDataSize;
          }
          uint64_t v52 = v59;
          sub_2CA1C(v59, *(unsigned int *)(*(void *)(a1 + 8) + 800LL));
          if (v60 < 0) {
            uint64_t v52 = (void **)v59[0];
          }
          (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)v3 + 128LL))(theString, v3);
          sub_48E98(__p, theString[0]);
          if (v58 >= 0) {
            unint64_t v53 = __p;
          }
          else {
            unint64_t v53 = (void **)__p[0];
          }
          uint64_t v54 = *(void *)(a1 + 8);
          float v55 = "N";
          if (*(_BYTE *)(v54 + 796) && *(_BYTE *)(v54 + 797)) {
            float v55 = "Y";
          }
          outData[0] = 4.8155e-34;
          *(void *)&outData[1] = "DSPChain.mm";
          __int16 v70 = 1024;
          int v71 = 2427;
          __int16 v72 = 2080;
          *(void *)uint64_t v73 = v51;
          *(_WORD *)&v73[8] = 2080;
          *(void *)&v73[10] = v52;
          __int16 v74 = 2080;
          float v75 = v53;
          __int16 v76 = 2080;
          float v77 = v55;
          _os_log_impl( &dword_0,  v42,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d PlaybackDosimetry: Device category changed from '%s' to '%s' for bluetooth audio device with UID  %s, report SPL: %s",  (uint8_t *)outData,  0x3Au);
          if (v58 < 0) {
            operator delete(__p[0]);
          }
          sub_19DFC((uint64_t)theString);
          if (v60 < 0) {
            operator delete(v59[0]);
          }
          goto LABEL_50;
        }

void sub_194C40( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_194CB0(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  strcpy((char *)v13, "newsbolg");
  BYTE1(v13[2]) = 0;
  HIWORD(v13[2]) = 0;
  unint64_t v3 = sub_5C2F8(v2);
  *((void *)&v6 + 1) = v4;
  *(void *)&__int128 v6 = v3;
  uint64_t v5 = v6 >> 32;
  BOOL v7 = (v5 & 0xFF00000000LL) == 0 || (_DWORD)v5 == 0;
  uint64_t v8 = !v7;
  if (!v7)
  {
    int v9 = (os_log_s *)*(id *)sub_138E8(24);
    uint64_t v10 = v9;
    if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      int v11 = *(_DWORD *)(a1 + 8);
      v13[0] = 136315650;
      *(void *)&v13[1] = "DSPChain.mm";
      __int16 v14 = 1024;
      int v15 = 2361;
      __int16 v16 = 1024;
      int v17 = v11;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d PlaybackDosimetry : NOT setting device initiated volume change on AUSPL, device in Software Volume Mode, device: %u",  (uint8_t *)v13,  0x18u);
    }
  }

  return v8;
}

BOOL sub_194DCC(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(*(void *)a1 + 796LL);
  if (!*(_BYTE *)(*(void *)a1 + 796LL))
  {
    unint64_t v3 = (os_log_s *)*(id *)sub_138E8(24);
    uint64_t v4 = v3;
    if (v3 && os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v5 = *(_DWORD *)(a1 + 8);
      uint64_t v6 = *(void *)(a1 + 16);
      int v8 = 136315906;
      int v9 = "DSPChain.mm";
      __int16 v10 = 1024;
      int v11 = 2371;
      __int16 v12 = 1024;
      int v13 = v5;
      __int16 v14 = 2048;
      uint64_t v15 = v6;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PlaybackDosimetry : DevicePropertyChangeHandler called on dspchain that does not have AUSPL? deviceID: %u client: %p",  (uint8_t *)&v8,  0x22u);
    }
  }

  return v1 != 0;
}

uint64_t sub_194ECC(void *a1, int a2, float a3)
{
  uint64_t v6 = (os_log_s *)*(id *)sub_138E8(24);
  BOOL v7 = v6;
  if (v6 && os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    uint64_t v22 = "DSPChain.mm";
    __int16 v23 = 1024;
    int v24 = 391;
    __int16 v25 = 2048;
    double v26 = a3;
    __int16 v27 = 1024;
    int v28 = a2;
    _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d PlaybackDosimetry : setting device initiated volume change on AUSPL: %.2fdB device: %u",  buf,  0x22u);
  }

  uint64_t v8 = (*(uint64_t (**)(void *, uint64_t, void, void, float))(*a1 + 72LL))( a1,  1936747629LL,  0LL,  0LL,  a3);
  if ((_DWORD)v8)
  {
    id v9 = *(id *)sub_138E8(24);
    __int16 v10 = v9;
    if (v9)
    {
      int v11 = (os_log_s *)v9;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        sub_2CA1C(__p, v8);
        __int16 v12 = v20 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        uint64_t v22 = "DSPChain.mm";
        __int16 v23 = 1024;
        int v24 = 394;
        __int16 v25 = 2080;
        double v26 = *(double *)&v12;
        __int16 v27 = 1024;
        int v28 = a2;
        _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d PlaybackDosimetry : Failed to set volume change on AUSPL: %s, device: %u",  buf,  0x22u);
        if (v20 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  uint64_t result = sub_2FC9D4();
  unsigned int v14 = *(_DWORD *)(result + 8);
  if (v14)
  {
    uint64_t result = sub_AADB0(a1 + 125, 0);
    if ((_DWORD)result)
    {
      LODWORD(__p[0]) = 0;
      (*(void (**)(void *, uint64_t, uint64_t, void **, void))(*a1 + 64LL))( a1,  1685287015LL,  1936749423LL,  __p,  0LL);
      *(float *)__int128 __p = *(float *)__p + 13.0;
      float v18 = 0.0;
      (*(void (**)(void *, uint64_t, uint64_t, float *, void))(*a1 + 64LL))( a1,  1685287015LL,  1819176045LL,  &v18,  0LL);
      float v15 = (float)((float)v14 - *(float *)__p) - v18;
      __int16 v16 = (os_log_s *)*(id *)sub_138E8(20);
      int v17 = v16;
      if (v16)
      {
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          uint64_t v22 = "DSPChain.mm";
          __int16 v23 = 1024;
          int v24 = 409;
          __int16 v25 = 2048;
          double v26 = v15;
          _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d [VolumeLimit] Setting loudness target to : %f dB",  buf,  0x1Cu);
        }
      }

      return (*(uint64_t (**)(void *, uint64_t, uint64_t, void, float))(*a1 + 72LL))( a1,  1685287015LL,  1818977907LL,  0LL,  v15);
    }
  }

  return result;
}

void sub_19520C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_195228(uint64_t a1, int *a2)
{
  if (!a1) {
    return 560227702LL;
  }
  uint64_t v7 = 0x676C6F6275736476LL;
  int v8 = 0;
  int v6 = 1701868910;
  int v5 = 4;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, int *))(*(void *)a1 + 40LL))( a1,  &v7,  0LL,  0LL,  &v5,  &v6);
  uint64_t result = 0LL;
  *a2 = v6;
  return result;
}

float sub_1952D4(CFArrayRef *a1, CFArrayRef *a2, float a3)
{
  int v6 = (os_log_s *)*(id *)sub_138E8(24);
  uint64_t v7 = v6;
  if (v6 && os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(float *)AudioObjectPropertyAddress buf = 4.8152e-34;
    __int16 v23 = "DSPChain.mm";
    __int16 v24 = 1024;
    int v25 = 2806;
    __int16 v26 = 2048;
    double v27 = a3;
    _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d PlaybackDosimetry: interpolating output volume %.2f",  buf,  0x1Cu);
  }

  float v21 = 0.0;
  if (*a2) {
    unsigned int Count = CFArrayGetCount(*a2);
  }
  else {
    unsigned int Count = 0;
  }
  float v9 = -1.0;
  if (*a1)
  {
    unsigned int v10 = CFArrayGetCount(*a1);
    if (Count >= 2)
    {
      unsigned int v11 = v10;
      if (v10 >= 2)
      {
        unsigned int v12 = 0;
        while (1)
        {
          *(float *)AudioObjectPropertyAddress buf = 0.0;
          sub_1A0E8C(a2, v12, buf);
          if (Count == ++v12)
          {
            unsigned int v12 = Count;
            break;
          }
        }

        int v13 = (os_log_s *)*(id *)sub_138E8(24);
        unsigned int v14 = v13;
        if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(float *)AudioObjectPropertyAddress buf = 4.8152e-34;
          __int16 v23 = "DSPChain.mm";
          __int16 v24 = 1024;
          int v25 = 2827;
          __int16 v26 = 1024;
          LODWORD(v27) = v12;
          _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry: target index: %u", buf, 0x18u);
        }

        if (v12 >= Count)
        {
          unsigned int v15 = v11 - 1;
          __int16 v16 = a1;
        }

        else
        {
          if (v12)
          {
            *(float *)AudioObjectPropertyAddress buf = -1.0;
            float v19 = -1.0;
            float v20 = -1.0;
            float v18 = -1.0;
            sub_1A0E8C(a2, v12, buf);
            sub_1A0E8C(a2, v12 - 1, &v20);
            sub_1A0E8C(a1, v12, &v19);
            sub_1A0E8C(a1, v12 - 1, &v18);
            return v19
                 + (float)((float)(v18 - v19) * (float)((float)(a3 - *(float *)buf) / (float)(v20 - *(float *)buf)));
          }

          __int16 v16 = a1;
          unsigned int v15 = 0;
        }

        sub_1A0E8C(v16, v15, &v21);
        return v21;
      }
    }
  }

  return v9;
}

uint64_t sub_19556C(uint64_t a1, int a2, int a3)
{
  uint64_t v12 = a1 + 48;
  char v13 = 1;
  sub_92F80(a1 + 48);
  if (*(void *)(a1 + 32) == *(void *)(a1 + 24))
  {
LABEL_7:
    uint64_t v9 = 0LL;
  }

  else
  {
    int v6 = -1;
    unsigned int v7 = 1;
    while (1)
    {
      uint64_t v8 = sub_2EEBC(a1, v7 - 1);
      uint64_t v9 = v8;
      if (v8)
      {
      }
    }
  }

  sub_93128((uint64_t)&v12);
  return v9;
}

void sub_195644( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_195658(void *a1, uint64_t a2, std::__shared_weak_count *this)
{
  *a1 = a2;
  if (!this)
  {
    a1[1] = 0LL;
LABEL_5:
    sub_9D954();
  }

  uint64_t v4 = std::__shared_weak_count::lock(this);
  a1[1] = v4;
  if (!v4) {
    goto LABEL_5;
  }
  return a1;
}

void sub_19569C(std::__shared_weak_count *a1)
{
}

uint64_t sub_1956B0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void sub_1956D0(std::__shared_weak_count *a1)
{
}

uint64_t sub_1956E4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void sub_195700(uint64_t **a1, const __CFString *a2, unsigned int a3)
{
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_195770( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1957A4(uint64_t **a1, void **a2, uint64_t a3, uint64_t a4)
{
  char v7 = (uint64_t **)sub_845D8((uint64_t)a1, &v12, a2);
  if (!*v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = operator new(0x50uLL);
    v10[1] = a1 + 1;
    v9[2] = *(_OWORD *)a3;
    *((void *)v9 + 6) = *(void *)(a3 + 16);
    *(void *)(a3 + 8) = 0LL;
    *(void *)(a3 + 16) = 0LL;
    *(void *)a3 = 0LL;
    *(_OWORD *)((char *)v9 + 56) = *(_OWORD *)a4;
    *((void *)v9 + 9) = *(void *)(a4 + 16);
    *(void *)(a4 + 8) = 0LL;
    *(void *)(a4 + 16) = 0LL;
    *(void *)a4 = 0LL;
    char v11 = 1;
    sub_32C38(a1, v12, v8, (uint64_t *)v9);
    v10[0] = 0LL;
    sub_8455C((uint64_t)v10);
  }

void *sub_195860(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  CFStringRef v5 = CFStringCreateWithBytes(0LL, (const UInt8 *)__s, v4, 0x8000100u, 0);
  *a1 = &off_483688;
  a1[1] = v5;
  return a1;
}

unint64_t sub_1958B8(unint64_t a1)
{
  *(void *)a1 = &off_4739B0;
  uint64_t v2 = (uint64_t *)(a1 + 360);
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 360) + 16LL));
  if ((v3 & 1) != 0) {
    sub_AE118(*v2);
  }
  if (*(_BYTE *)(a1 + 796))
  {
    uint64_t v4 = *(void *)(a1 + 824);
    uint64_t v5 = *(void *)(a1 + 832);
    if (v4 != v5)
    {
      while (1)
      {
        uint64_t v60 = *(void *)(v4 + 4);
        int v61 = *(_DWORD *)(v4 + 12);
        uint64_t v6 = sub_EAD14();
        int v7 = *(_DWORD *)v4;
        uint64_t v8 = operator new(0x20uLL);
        uint64_t v9 = v60;
        *uint64_t v8 = &off_473E90;
        v8[1] = v9;
        *((_DWORD *)v8 + 4) = v61;
        uint64_t v8[3] = a1;
        float v59 = (uint64_t **)v8;
        sub_EAF70(v6, v7, (uint64_t)&v57);
        unsigned int v10 = v59;
        if (v59 == &v57) {
          break;
        }
        if (v59)
        {
          uint64_t v11 = 5LL;
LABEL_9:
          ((void (*)(void))(*v10)[v11])();
        }

        v4 += 16LL;
        if (v4 == v5) {
          goto LABEL_11;
        }
      }

      unsigned int v10 = &v57;
      uint64_t v11 = 4LL;
      goto LABEL_9;
    }

void sub_195F5C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

void sub_195FD4(void *a1)
{
  if (a1)
  {
    sub_195FD4(*a1);
    sub_195FD4(a1[1]);
    sub_9DBD0((uint64_t)(a1 + 6));
    operator delete(a1);
  }

void sub_196014(void ***a1)
{
  int v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136LL;
        sub_196198(v4);
      }

      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_196084(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_18FE8C((uint64_t)v2, (unsigned int **)*v2);
    operator delete(**a1);
  }

void sub_1960C4(void ***a1)
{
  int v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 24;
        sub_7A768((uint64_t)(v4 - 16));
        uint64_t v4 = v6;
      }

      while (v6 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_196138(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 264);
  if (v2)
  {
    do
    {
      unsigned __int8 v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
  }

  uint64_t v4 = *(void **)(a1 + 248);
  *(void *)(a1 + 248) = 0LL;
  if (v4) {
    operator delete(v4);
  }
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 168));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 112));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 64));
  std::mutex::~mutex((std::mutex *)a1);
}

uint64_t sub_196198(uint64_t a1)
{
  return sub_9DBD0(a1 + 16);
}

void *sub_1961D0(uint64_t a1)
{
  uint64_t result = operator new(0x20uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_473E90;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  result[3] = *(void *)(a1 + 24);
  return result;
}

uint64_t sub_196214(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &off_473E90;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 24) = *(void *)(result + 24);
  return result;
}

uint64_t sub_196244(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 8);
  int v6 = *(_DWORD *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v2 + 344LL))(v2, &v5, v3);
  return 1LL;
}

void sub_19628C(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  if ((int)a3 > 1684434035)
  {
    if ((_DWORD)a3 != 1936749172)
    {
      if ((_DWORD)a3 == 1684434036)
      {
        unint64_t v14 = (os_log_s *)*(id *)sub_138E8(24);
        unint64_t v15 = v14;
        if (v14 && os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "DSPChain.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 453;
          _os_log_impl(&dword_0, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d Creating default DSP chain.", buf, 0x12u);
        }

        unint64_t v16 = operator new(0x470uLL);
        sub_196EFC((uint64_t)v16, (__int128 *)a2);
        goto LABEL_26;
      }

void sub_196D9C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t sub_196EFC(uint64_t a1, __int128 *a2)
{
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = &off_4739B0;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  sub_93AF4(a1 + 48);
  *(void *)(a1 + 336) = 0LL;
  *(void *)(a1 + 344) = 0LL;
  *(void *)(a1 + 352) = 0LL;
  sub_1976F4((void *)(a1 + 360));
  *(void *)(a1 + 376) = 0LL;
  *(void *)(a1 + 384) = 0LL;
  *(_BYTE *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_WORD *)(a1 + 448) = 256;
  __int128 v4 = xmmword_493168;
  __int128 v5 = unk_493178;
  *(_OWORD *)(a1 + 456) = xmmword_493168;
  *(_OWORD *)(a1 + 472) = v5;
  uint64_t v6 = qword_493188;
  *(void *)(a1 + 488) = qword_493188;
  *(_DWORD *)(a1 + 496) = 4096;
  *(void *)(a1 + 536) = v6;
  *(_OWORD *)(a1 + 504) = v4;
  *(_OWORD *)(a1 + 520) = v5;
  __int128 v7 = unk_493178;
  *(_OWORD *)(a1 + 544) = xmmword_493168;
  *(_OWORD *)(a1 + 560) = v7;
  *(void *)(a1 + 576) = qword_493188;
  *(void *)(a1 + 584) = 0LL;
  sub_2FC98(a1 + 504, (AudioStreamBasicDescription *)(a1 + 504), (AudioStreamBasicDescription *)(a1 + 544));
  __int128 v8 = xmmword_493168;
  __int128 v9 = unk_493178;
  *(_OWORD *)(a1 + 592) = xmmword_493168;
  *(_OWORD *)(a1 + 608) = v9;
  uint64_t v10 = qword_493188;
  *(void *)(a1 + 624) = qword_493188;
  *(_OWORD *)(a1 + 632) = v8;
  *(_OWORD *)(a1 + 648) = v9;
  *(void *)(a1 + 664) = v10;
  *(void *)(a1 + 672) = 0LL;
  sub_2FC98(a1 + 592, (AudioStreamBasicDescription *)(a1 + 592), (AudioStreamBasicDescription *)(a1 + 632));
  *(_WORD *)(a1 + 682) = 1;
  *(_WORD *)(a1 + 680) = 0;
  *(void *)(a1 + 704) = 0LL;
  *(void *)(a1 + 696) = 0LL;
  *(void *)(a1 + 688) = a1 + 696;
  uint64_t v11 = (_OWORD *)(a1 + 712);
  if (*((char *)a2 + 23) < 0)
  {
    sub_24054((_BYTE *)(a1 + 712), *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v12 = *a2;
    *(void *)(a1 + 728) = *((void *)a2 + 2);
    *uint64_t v11 = v12;
  }

  *(void *)(a1 + 760) = 0LL;
  *(_OWORD *)(a1 + 744) = 0u;
  *(void *)(a1 + 768) = a1 + 768;
  *(void *)(a1 + 776) = a1 + 768;
  *(void *)(a1 + 784) = 0LL;
  *(void *)(a1 + 790) = 0LL;
  *(_BYTE *)(a1 + 798) = 1;
  *(_DWORD *)(a1 + 800) = 1701868910;
  *(_OWORD *)(a1 + 856) = 0u;
  *(void *)(a1 + 840) = 0LL;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(void *)(a1 + 848) = a1 + 856;
  unint64_t v13 = (char *)operator new(0x38uLL);
  unint64_t v14 = (const char *)(a1 + 712);
  uint64_t v15 = CFStringCreateWithCString(0LL, v14, 0x600u);
  *(void *)AudioObjectPropertyAddress buf = v15;
  buf[8] = 1;
  *(void *)unint64_t v13 = off_478260;
  *(_OWORD *)(v13 + 8) = 0u;
  *(_OWORD *)(v13 + 24) = 0u;
  *((void *)v13 + 5) = 0LL;
  sub_239E48((uint64_t)v13, v15);
  AUPBRegister(&unk_48C098, v13, v13 + 16);
  *(void *)unint64_t v13 = &off_479BE0;
  *((void *)v13 + 6) = a1;
  *(void *)(a1 + 872) = v13;
  sub_19DFC((uint64_t)buf);
  *(void *)(a1 + 880) = 850045863LL;
  *(void *)(a1 + 960) = 0LL;
  *(_DWORD *)(a1 + 968) = 0;
  *(void *)(a1 + 976) = 0LL;
  *(void *)(a1 + 992) = 0LL;
  *(void *)(a1 + 984) = 0LL;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_DWORD *)(a1 + 952) = 0;
  *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)&qword_402EFC;
  *(void *)&buf[16] = 2LL;
  sub_83660(a1 + 1000, (int *)buf, 3LL);
  *(void *)(a1 + 1120) = 0LL;
  *(void *)(a1 + 1112) = 0LL;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(void *)(a1 + 1104) = a1 + 1112;
  *(void *)(a1 + 1128) = 0LL;
  unint64_t v16 = (os_log_s *)*(id *)sub_138E8(24);
  uint64_t v17 = v16;
  if (v16 && os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    else {
      unint64_t v18 = *(void **)a2;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "DSPChain.mm";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 532;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&buf[20] = v18;
    _os_log_impl(&dword_0, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d Creating DSP chain %s", buf, 0x1Cu);
  }

  return a1;
}

void sub_1972B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, void **a17, void **a18)
{
  a18 = (void **)(v18 + 424);
  sub_1960C4(&a18);
  a18 = (void **)(v18 + 400);
  sub_1960C4(&a18);
  sub_7A768(v18 + 376);
  sub_7A768(a15);
  a18 = (void **)(v18 + 336);
  sub_7A668(&a18);
  sub_196138(a16);
  a18 = a17;
  sub_1960C4(&a18);
  unint64_t v22 = *(std::__shared_weak_count **)(v18 + 16);
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  _Unwind_Resume(a1);
}

void sub_1974A4(uint64_t a1, uint64_t a2)
{
  __int128 v4 = (std::__shared_weak_count *)operator new(0x20uLL);
  v4->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_473C08;
  v4->__shared_weak_owners_ = 0LL;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  *(void *)&__int128 v6 = a2;
  *((void *)&v6 + 1) = v4;
  __int128 v7 = (void *)(a2 + 8);
  if (a2)
  {
    __int128 v8 = *(std::__shared_weak_count **)(a2 + 16);
    if (v8)
    {
      if (v8->__shared_owners_ != -1) {
        goto LABEL_15;
      }
      do
        unint64_t v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      __int128 v19 = v6;
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v11 = __ldxr(p_shared_weak_owners);
      while (__stxr(v11 + 1, p_shared_weak_owners));
      *__int128 v7 = a2;
      *(void *)(a2 + 16) = v4;
      std::__shared_weak_count::__release_weak(v8);
      __int128 v6 = v19;
    }

    else
    {
      do
        unint64_t v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      unint64_t v13 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      *__int128 v7 = a2;
      *(void *)(a2 + 16) = v4;
    }

    do
      unint64_t v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      __int128 v20 = v6;
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      __int128 v6 = v20;
    }
  }

void sub_197604(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_197628(std::__shared_weak_count *a1)
{
}

uint64_t sub_19763C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void sub_19765C(std::__shared_weak_count *a1)
{
}

uint64_t sub_197670(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void sub_197690(std::__shared_weak_count *a1)
{
}

uint64_t sub_1976A4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void sub_1976C4(std::__shared_weak_count *a1)
{
}

uint64_t sub_1976D8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void sub_1976F4(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)operator new(0xC0uLL);
  *(_OWORD *)&v2->__shared_owners_ = 0u;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__vftable = (std::__shared_weak_count_vtbl *)off_473CE8;
  v2[1].std::__shared_count = 0u;
  v2[2].__vftable = 0LL;
  *(_OWORD *)&v2[3].__shared_weak_owners_ = 0u;
  v2[3].__shared_owners_ = (uint64_t)&v2[3].__shared_weak_owners_;
  LOBYTE(v2[1].__shared_weak_owners_) = 0;
  *(_OWORD *)&v2[2].__shared_owners_ = 0u;
  LODWORD(v2[3].__vftable) = 0;
  std::recursive_mutex::recursive_mutex((std::recursive_mutex *)&v2[4].__shared_owners_);
  v2[7].__vftable = 0LL;
  v2[7].__shared_owners_ = 0LL;
  v2[7].__shared_weak_owners_ = 0LL;
  sub_7D084(__p, "measuredWattsParameterID");
  unint64_t v14 = __p;
  *((_DWORD *)sub_ACE84((uint64_t **)&v2[3].__shared_owners_, __p, (_OWORD **)&v14) + 14) = -1;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  sub_7D084(__p, "modelledWattsParameterID");
  unint64_t v14 = __p;
  *((_DWORD *)sub_ACE84((uint64_t **)&v2[3].__shared_owners_, __p, (_OWORD **)&v14) + 14) = -1;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  *a1 = v2 + 1;
  a1[1] = v2;
  shared_owners = (std::__shared_weak_count *)v2[1].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1) {
      return;
    }
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    v2[1].__vftable = (std::__shared_weak_count_vtbl *)&v2[1];
    v2[1].__shared_owners_ = (uint64_t)v2;
    std::__shared_weak_count::__release_weak(shared_owners);
  }

  else
  {
    do
      unint64_t v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    unint64_t v9 = (unint64_t *)&v2->__shared_weak_owners_;
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v2[1].__vftable = (std::__shared_weak_count_vtbl *)&v2[1];
    v2[1].__shared_owners_ = (uint64_t)v2;
  }

  do
    unint64_t v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }

void sub_1978E0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_AD8B8((void ***)&__p);
  std::recursive_mutex::~recursive_mutex(v15);
  sub_88C08(*(char **)(v14 + 88));
  unint64_t v18 = *(std::__shared_weak_count **)(v14 + 64);
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v19 = *v16;
  uint64_t *v16 = 0LL;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
  }
  __int128 v20 = *(std::__shared_weak_count **)(v14 + 32);
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v14);
  operator delete(v21);
  _Unwind_Resume(a1);
}

void sub_19796C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_473CE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19797C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_473CE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

void sub_19799C(uint64_t a1)
{
  unint64_t v5 = (void **)(a1 + 168);
  sub_AD8B8(&v5);
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 104));
  sub_88C08(*(char **)(a1 + 88));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  __int128 v4 = *(std::__shared_weak_count **)(a1 + 32);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t sub_197A20(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = a1 + 48;
  char v13 = 1;
  sub_190270(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 32) - *(void *)(a1 + 24);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = 0LL;
  unint64_t v6 = v4 / 24;
  uint64_t v7 = v6 <= 1 ? 1LL : v6;
  uint64_t v8 = 8LL;
  do
  {
    uint64_t v9 = *(void *)(a1 + 24);
    if ((*(unsigned int (**)(void))(**(void **)(v9 + v8) + 208LL))(*(void *)(v9 + v8)))
    {
      unsigned int v10 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v9 + v8) + 176LL))(*(void *)(v9 + v8), a2);
      if (v10) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = v5;
      }
    }

    v8 += 24LL;
    --v7;
  }

  while (v7);
  if (!(_DWORD)v5)
  {
LABEL_12:
    uint64_t v5 = 0LL;
    *(_BYTE *)(a1 + 449) = a2;
  }

  sub_19032C(&v12);
  return v5;
}

void sub_197AF8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void sub_197B10(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (unsigned int **)**a1;
  if (v2)
  {
    uint64_t v4 = (unsigned int **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 2;
        sub_2DBF4(v4);
      }

      while (v4 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

BOOL sub_197B80(uint64_t a1)
{
  uint64_t v12 = a1 + 48;
  char v13 = 1;
  sub_92F80(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v2 == v3)
  {
    BOOL v6 = 0LL;
  }

  else
  {
    uint64_t v4 = v2 + 24;
    do
    {
      char v14 = 0;
      int v5 = (*(uint64_t (**)(void, uint64_t, void, char *))(**(void **)(v4 - 16) + 248LL))( *(void *)(v4 - 16),  1LL,  0LL,  &v14);
      if (v5)
      {
        uint64_t v9 = (os_log_s *)*(id *)sub_138E8(13);
        unsigned int v10 = v9;
        if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          unint64_t v16 = "DSPChain.mm";
          __int16 v17 = 1024;
          int v18 = 1545;
          _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (stat) [error stat is an error]: Unexpected error from HasStaticChannelCountForBus",  buf,  0x12u);
        }

        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &off_4865A0;
        exception[2] = v5;
      }

      BOOL v6 = v14 != 0;
      if (v14) {
        BOOL v7 = 1;
      }
      else {
        BOOL v7 = v4 == v3;
      }
      v4 += 24LL;
    }

    while (!v7);
  }

  sub_93128((uint64_t)&v12);
  return v6;
}

void sub_197CF8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_197D18(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 496) == 4096) {
    return;
  }
  *(void *)unsigned int v10 = a1 + 48;
  v10[8] = 1;
  sub_190270(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 32) - *(void *)(a1 + 24);
  if (!v2)
  {
    sub_19032C(v10);
LABEL_15:
    *(_DWORD *)(a1 + 496) = 4096;
    return;
  }

  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (v2 >> 3);
  unint64_t v4 = 1LL;
  uint64_t v5 = 8LL;
  do
  {
    int v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 24) + v5) + 136LL))( *(void *)(*(void *)(a1 + 24) + v5),  4096LL);
    if (v6) {
      BOOL v7 = 1;
    }
    else {
      BOOL v7 = v4 >= v3;
    }
    ++v4;
    v5 += 24LL;
  }

  while (!v7);
  sub_19032C(v10);
  if (!v6) {
    goto LABEL_15;
  }
  uint64_t v8 = (os_log_s *)*(id *)sub_138E8(13);
  uint64_t v9 = v8;
  if (v8)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unsigned int v10 = 136315394;
      *(void *)&v10[4] = "DSPChain.mm";
      __int16 v11 = 1024;
      int v12 = 1581;
      _os_log_impl(&dword_0, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d FailIf failed, goto Exit", v10, 0x12u);
    }
  }
}

void sub_197E84(_Unwind_Exception *exception_object)
{
}

void sub_197EA0(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    uint64_t v29 = sub_138E8(13);
    id v30 = sub_8C7D4(1, *(void **)v29, *(void *)(v29 + 8));
    uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
    uint64_t v32 = v31;
    if (v31 && os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "DSPChain.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1996;
      _os_log_impl(&dword_0, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(a1 + 64));
  if ((v3 & 1) != 0 && (*(_BYTE *)(a2 + 56) & 2) != 0)
  {
    unint64_t v4 = __udivti3( 125LL * *(void *)(a2 + 8),  (*(unint64_t *)(a2 + 8) * (unsigned __int128)0x7DuLL) >> 64,  3LL,  0LL);
    if (*(void *)(a1 + 88) <= v4)
    {
      unint64_t v5 = v4;
      int v6 = *(std::__shared_weak_count **)(a1 + 80);
      if (v6)
      {
        BOOL v7 = std::__shared_weak_count::lock(v6);
        uint64_t v38 = v7;
        if (v7)
        {
          uint64_t v8 = *(void *)(a1 + 72);
          uint64_t v37 = v8;
          if (v8)
          {
            uint64_t v36 = 0LL;
            (*(void (**)(uint64_t, uint64_t, uint64_t, char *, void))(*(void *)v8 + 64LL))( v8,  1685287015LL,  1987340658LL,  (char *)&v36 + 4,  0LL);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, void))(*(void *)v8 + 64LL))( v8,  1685287015LL,  1987339123LL,  &v36,  0LL);
            unint64_t v9 = *(void *)(a1 + 16);
            unsigned int v10 = *(std::__shared_weak_count **)(a1 + 32);
            if (v10)
            {
              p_shared_owners = (unint64_t *)&v10->__shared_owners_;
              do
                unint64_t v12 = __ldxr(p_shared_owners);
              while (__stxr(v12 + 1, p_shared_owners));
              p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
              do
                unint64_t v14 = __ldxr(p_shared_weak_owners);
              while (__stxr(v14 + 1, p_shared_weak_owners));
              do
                unint64_t v15 = __ldaxr(p_shared_owners);
              while (__stlxr(v15 - 1, p_shared_owners));
              if (!v15)
              {
                ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
                std::__shared_weak_count::__release_weak(v10);
              }

              *(void *)&__int128 v16 = v9;
              *((void *)&v16 + 1) = v10;
              __int128 v34 = v16;
              BOOL v17 = v10 == 0LL;
              int v18 = (unint64_t *)&v10->__shared_weak_owners_;
              do
                unint64_t v19 = __ldxr(v18);
              while (__stxr(v19 + 1, v18));
            }

            else
            {
              __int128 v34 = v9;
              BOOL v17 = 1;
            }

            int v22 = v36;
            int v21 = HIDWORD(v36);
            sub_92104();
            uint64_t v23 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*caulk::alloc::realtime_safe_resource + 16LL))( caulk::alloc::realtime_safe_resource,  56LL,  8LL);
            *(_DWORD *)(v23 + 16) = 0;
            *(_OWORD *)(v23 + 24) = v34;
            *(_DWORD *)(v23 + 40) = v21;
            *(_DWORD *)(v23 + 44) = v22;
            *(void *)uint64_t v23 = off_473AF0;
            *(void *)(v23 + 8) = 0LL;
            caulk::concurrent::messenger::enqueue( (caulk::concurrent::messenger *)&unk_4A9D88,  (caulk::concurrent::message *)v23);
            unsigned __int8 v24 = atomic_load((unsigned __int8 *)(a1 + 65));
            if ((v24 & 1) != 0 && *(void *)(a1 + 96) <= v5)
            {
              int v35 = 0;
              sub_198518(v37, (uint64_t)&v35);
              *(void *)AudioObjectPropertyAddress buf = v9;
              *(void *)&buf[8] = v10;
              if (!v17)
              {
                unint64_t v25 = (unint64_t *)&v10->__shared_weak_owners_;
                do
                  unint64_t v26 = __ldxr(v25);
                while (__stxr(v26 + 1, v25));
              }

              *(_DWORD *)&buf[16] = v35;
              sub_92104();
              sub_198810((uint64_t)buf);
              if (*(void *)&buf[8]) {
                std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
              }
              *(void *)(a1 + 96) = v5 + 2000000000;
            }

            if (!v17) {
              std::__shared_weak_count::__release_weak(v10);
            }
            __int128 v20 = v38;
            if (!v38) {
              goto LABEL_36;
            }
          }

          else
          {
            __int128 v20 = v7;
          }

          uint64_t v27 = (unint64_t *)&v20->__shared_owners_;
          do
            unint64_t v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
      }

void sub_19823C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint8_t buf, std::__shared_weak_count *a15, __int16 a16, __int16 a17, uint64_t a18, __int16 a19, uint64_t a20, int a21)
{
  if ((v22 & 1) == 0) {
    std::__shared_weak_count::__release_weak(v21);
  }
  sub_7A768((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_198518(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 64LL))( a1,  1685287015LL,  1685218159LL,  a2,  0LL);
}

void sub_198590( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    unint64_t v15 = __cxa_begin_catch(exception_object);
    uint64_t v16 = sub_138E8(13);
    id v17 = sub_8C7D4(1, *(void **)v16, *(void *)(v16 + 8));
    int v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    if (v18)
    {
      unint64_t v19 = v18;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        int v20 = v15[2];
        LODWORD(a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 429;
        WORD1(a10) = 1024;
        DWORD1(a10) = v20;
        WORD4(a10) = 2080;
        *(void *)((char *)&a10 + 10) = "";
        a12 = 1024;
        a13 = 280;
        int v21 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
        char v22 = v19;
        uint32_t v23 = 40;
LABEL_13:
        _os_log_impl(&dword_0, v22, OS_LOG_TYPE_ERROR, v21, (uint8_t *)&a9, v23);
        goto LABEL_14;
      }

      goto LABEL_14;
    }
  }

  else
  {
    unsigned __int8 v24 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      unint64_t v25 = v24;
      uint64_t v26 = sub_138E8(13);
      id v27 = sub_8C7D4(1, *(void **)v26, *(void *)(v26 + 8));
      unint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
      if (v28)
      {
        unint64_t v19 = v28;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          uint64_t v29 = (*(uint64_t (**)(void *))(*(void *)v25 + 16LL))(v25);
          LODWORD(a9) = 136316162;
          *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
          WORD6(a9) = 1024;
          *(_DWORD *)((char *)&a9 + 14) = 430;
          WORD1(a10) = 2080;
          *(void *)((char *)&a10 + 4) = v29;
          WORD6(a10) = 2080;
          *(void *)((char *)&a10 + 14) = "";
          HIWORD(a13) = 1024;
          a14 = 280;
          int v21 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
          char v22 = v19;
          uint32_t v23 = 44;
          goto LABEL_13;
        }

uint64_t sub_198810(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*caulk::alloc::realtime_safe_resource + 16LL))( caulk::alloc::realtime_safe_resource,  56LL,  8LL);
  *(void *)(v2 + 8) = 0LL;
  *(_DWORD *)(v2 + 16) = 0;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)a1;
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(_DWORD *)(v2 + 40) = *(_DWORD *)(a1 + 16);
  *(void *)uint64_t v2 = off_473B40;
  return caulk::concurrent::messenger::enqueue( (caulk::concurrent::messenger *)&unk_4A9D88,  (caulk::concurrent::message *)v2);
}

void sub_198880(caulk::concurrent::message *this)
{
  *(void *)this = off_473B68;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);
}

void sub_1988B8(caulk::concurrent::message *this)
{
  *(void *)this = off_473B68;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);
  operator delete(v3);
}

caulk::concurrent::message **sub_1988F4(caulk::concurrent::message *a1)
{
  uint64_t v2 = a1;
  sub_198938((uint64_t)a1);
  return sub_198EE8(&v2);
}

void sub_198924(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_198938(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    p_shared_weak_owners = (unint64_t *)&v1->__shared_weak_owners_;
    do
      unint64_t v4 = __ldxr(p_shared_weak_owners);
    while (__stxr(v4 + 1, p_shared_weak_owners));
    float v5 = *(float *)(a1 + 40);
    id v17 = std::__shared_weak_count::lock(v1);
    if (v17)
    {
      uint64_t v16 = v2;
      if (v2)
      {
        unsigned __int8 v6 = atomic_load((unsigned __int8 *)(v2 + 65));
        if ((v6 & 1) != 0)
        {
          float v7 = *(float *)(v2 + 120);
          float v8 = fabsf(v5);
          float v9 = fabsf(v7);
          if (v8 < v9) {
            float v8 = v9;
          }
          if (v8 >= 1.0) {
            float v10 = v8 * 0.00000011921;
          }
          else {
            float v10 = 0.00000011921;
          }
          if (vabds_f32(v5, v7) > v10)
          {
            if (v5 >= 11.0)
            {
              __int16 v11 = (os_log_s *)*(id *)sub_138E8(41);
              unint64_t v12 = v11;
              if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                char v22 = "DSPChain.mm";
                __int16 v23 = 1024;
                int v24 = 346;
                __int16 v25 = 2048;
                uint64_t v26 = 0x4026000000000000LL;
                __int16 v27 = 2048;
                double v28 = v5;
                _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d DSPGraphParameterUpdater::UpdateAULoudnessNormalizerParameters() - auln output gain above th reshold %.2fdB. Gain is %.2f.",  buf,  0x26u);
              }
            }

            *(float *)&CFDictionaryRef valuePtr = v5;
            CFNumberRef cf = CFNumberCreate(0LL, kCFNumberFloatType, &valuePtr);
            if (!cf)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Could not construct");
            }

            sub_59370(&v29, "DRCOutputGain");
            CFRetain(cf);
            CFNumberRef v30 = cf;
            v19[0] = &v29;
            v19[1] = 1LL;
            CFDictionaryRef valuePtr = sub_5A950((uint64_t)v19);
            sub_E5360((uint64_t)valuePtr, 1073741838LL, 18LL);
            if (valuePtr) {
              CFRelease(valuePtr);
            }
            if (v30) {
              CFRelease(v30);
            }
            if (v29) {
              CFRelease(v29);
            }
            CFRelease(cf);
            *(float *)(v16 + 120) = v5;
          }
        }
      }
    }
  }

  else
  {
    id v17 = 0LL;
  }

  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_198BD4( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 buf, __int128 a16, __int16 a17, __int16 a18, int a19, int a20)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v20);
  sub_7A768((uint64_t)&a9);
  if (a2 == 3)
  {
    __int16 v23 = __cxa_begin_catch(a1);
    uint64_t v24 = sub_138E8(13);
    id v25 = sub_8C7D4(1, *(void **)v24, *(void *)(v24 + 8));
    uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    __int16 v27 = v26;
    if (v26)
    {
      __int16 v27 = v26;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        int v28 = v23[2];
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 429;
        WORD1(a16) = 1024;
        DWORD1(a16) = v28;
        WORD4(a16) = 2080;
        *(void *)((char *)&a16 + 10) = "";
        a18 = 1024;
        a19 = 288;
        CFStringRef v29 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
        CFNumberRef v30 = v27;
        uint32_t v31 = 40;
LABEL_13:
        _os_log_impl(&dword_0, v30, OS_LOG_TYPE_ERROR, v29, (uint8_t *)&buf, v31);
        goto LABEL_14;
      }

      goto LABEL_14;
    }
  }

  else
  {
    uint64_t v32 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      unint64_t v33 = v32;
      uint64_t v34 = sub_138E8(13);
      id v35 = sub_8C7D4(1, *(void **)v34, *(void *)(v34 + 8));
      uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
      __int16 v27 = v36;
      if (v36)
      {
        __int16 v27 = v36;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        {
          uint64_t v37 = (*(uint64_t (**)(void *))(*(void *)v33 + 16LL))(v33);
          LODWORD(buf) = 136316162;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 430;
          WORD1(a16) = 2080;
          *(void *)((char *)&a16 + 4) = v37;
          WORD6(a16) = 2080;
          *(void *)((char *)&a16 + 14) = "";
          HIWORD(a19) = 1024;
          a20 = 288;
          CFStringRef v29 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
          CFNumberRef v30 = v27;
          uint32_t v31 = 44;
          goto LABEL_13;
        }

caulk::concurrent::message **sub_198EE8(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  *(void *)uint64_t v2 = off_473B68;
  unsigned __int8 v3 = (std::__shared_weak_count *)*((void *)v2 + 4);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  caulk::concurrent::message::~message(v2);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*caulk::alloc::realtime_safe_resource
                                                                                 + 24LL))( caulk::alloc::realtime_safe_resource,  v2,  56LL,  8LL);
  return a1;
}

void sub_198F54(caulk::concurrent::message *this)
{
  *(void *)this = off_473B68;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);
}

void sub_198F8C(caulk::concurrent::message *this)
{
  *(void *)this = off_473B68;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);
  operator delete(v3);
}

void sub_198FC8(caulk::concurrent::message *this)
{
  *(void *)this = off_473B18;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);
}

void sub_199000(caulk::concurrent::message *this)
{
  *(void *)this = off_473B18;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);
  operator delete(v3);
}

caulk::concurrent::message **sub_19903C(caulk::concurrent::message *a1)
{
  uint64_t v2 = a1;
  sub_199080(a1);
  return sub_199664(&v2);
}

void sub_19906C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_199080(void *a1)
{
  uint64_t v1 = (std::__shared_weak_count *)a1[4];
  if (!v1)
  {
    uint64_t v26 = 0LL;
    goto LABEL_26;
  }

  uint64_t v2 = a1[3];
  p_shared_weak_owners = (unint64_t *)&v1->__shared_weak_owners_;
  do
    unint64_t v4 = __ldxr(p_shared_weak_owners);
  while (__stxr(v4 + 1, p_shared_weak_owners));
  uint64_t v24 = a1[5];
  uint64_t v26 = std::__shared_weak_count::lock(v1);
  if (v26)
  {
    uint64_t v25 = v2;
    if (v2)
    {
      unsigned __int8 v5 = atomic_load((unsigned __int8 *)(v2 + 64));
      if ((v5 & 1) != 0)
      {
        float v6 = *(float *)(v2 + 104);
        float v7 = fabsf(*((float *)&v24 + 1));
        float v8 = fabsf(v6);
        if (v7 < v8) {
          float v7 = v8;
        }
        float v9 = v7 >= 1.0 ? v7 * 0.00000011921 : 0.00000011921;
        if (vabds_f32(*((float *)&v24 + 1), v6) > v9)
        {
LABEL_55:
          float v10 = *(std::__shared_weak_count **)(v2 + 80);
          if (v10)
          {
            __int16 v11 = std::__shared_weak_count::lock(v10);
            int v28 = v11;
            if (v11)
            {
              uint64_t v12 = *(void *)(v2 + 72);
              if (!v12)
              {
                id v17 = v11;
LABEL_42:
                p_shared_owners = (unint64_t *)&v17->__shared_owners_;
                do
                  unint64_t v21 = __ldaxr(p_shared_owners);
                while (__stlxr(v21 - 1, p_shared_owners));
                if (!v21)
                {
                  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
                  std::__shared_weak_count::__release_weak(v17);
                }

                goto LABEL_26;
              }

              sub_1996D0(buf, *(void *)(v12 + 1040), *(std::__shared_weak_count **)(v12 + 1048));
              __int16 v27 = 0LL;
              char v13 = *(std::__shared_weak_count **)&buf[8];
              if (*(void *)&buf[8])
              {
                __int16 v27 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)&buf[8]);
                if (v27)
                {
                  uint64_t v14 = *(void *)buf;
                  std::__shared_weak_count::__release_weak(v13);
                  if (v14 && (*(unsigned int (**)(uint64_t))(*(void *)v14 + 264LL))(v14))
                  {
                    (*(void (**)(uint64_t, BOOL, float))(*(void *)v14 + 256LL))( v14,  *(float *)&v24 > 0.0,  *((float *)&v24 + 1));
                    if (*(float *)&v24 <= 0.0)
                    {
                      char v22 = (os_log_s *)*(id *)sub_138E8(41);
                      __int16 v23 = v22;
                      if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                        *(void *)&uint8_t buf[4] = "DSPChain.mm";
                        *(_WORD *)&_BYTE buf[12] = 1024;
                        *(_DWORD *)&buf[14] = 325;
                        _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d DSPGraphParameterUpdater::Reset() - resetting last slider position and ramp status.",  buf,  0x12u);
                      }

                      if (*(_BYTE *)(v25 + 108)) {
                        *(_BYTE *)(v25 + 108) = 0;
                      }
                      if (*(_BYTE *)(v25 + 116)) {
                        *(_BYTE *)(v25 + 116) = 0;
                      }
                    }

                    else
                    {
                      *(_DWORD *)(v25 + 112) = v24;
                      *(_BYTE *)(v25 + 116) = 1;
                      *(_DWORD *)(v25 + 104) = HIDWORD(v24);
                      *(_BYTE *)(v25 + 108) = 1;
                    }
                  }
                }

                else
                {
                  std::__shared_weak_count::__release_weak(v13);
                }
              }

              if (v27)
              {
                int v18 = (unint64_t *)&v27->__shared_owners_;
                do
                  unint64_t v19 = __ldaxr(v18);
                while (__stlxr(v19 - 1, v18));
                if (!v19)
                {
                  ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                  std::__shared_weak_count::__release_weak(v27);
                }
              }

              id v17 = v28;
              if (v28) {
                goto LABEL_42;
              }
            }
          }
        }
      }
    }
  }

void sub_1993A4( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, __int128 buf, __int128 a18, __int16 a19, __int16 a20, int a21, int a22)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A768((uint64_t)&a13);
  sub_7A768((uint64_t)&a15);
  sub_7A768((uint64_t)&a11);
  if (a2 == 3)
  {
    uint64_t v24 = __cxa_begin_catch(a1);
    uint64_t v25 = sub_138E8(13);
    id v26 = sub_8C7D4(1, *(void **)v25, *(void *)(v25 + 8));
    __int16 v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    int v28 = v27;
    if (v27)
    {
      int v28 = v27;
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        int v29 = v24[2];
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 429;
        WORD1(a18) = 1024;
        DWORD1(a18) = v29;
        WORD4(a18) = 2080;
        *(void *)((char *)&a18 + 10) = "";
        a20 = 1024;
        a21 = 270;
        CFNumberRef v30 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
        uint32_t v31 = v28;
        uint32_t v32 = 40;
LABEL_13:
        _os_log_impl(&dword_0, v31, OS_LOG_TYPE_ERROR, v30, (uint8_t *)&buf, v32);
        goto LABEL_14;
      }

      goto LABEL_14;
    }
  }

  else
  {
    unint64_t v33 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      uint64_t v34 = v33;
      uint64_t v35 = sub_138E8(13);
      id v36 = sub_8C7D4(1, *(void **)v35, *(void *)(v35 + 8));
      uint64_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
      int v28 = v37;
      if (v37)
      {
        int v28 = v37;
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          uint64_t v38 = (*(uint64_t (**)(void *))(*(void *)v34 + 16LL))(v34);
          LODWORD(buf) = 136316162;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 430;
          WORD1(a18) = 2080;
          *(void *)((char *)&a18 + 4) = v38;
          WORD6(a18) = 2080;
          *(void *)((char *)&a18 + 14) = "";
          HIWORD(a21) = 1024;
          a22 = 270;
          CFNumberRef v30 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
          uint32_t v31 = v28;
          uint32_t v32 = 44;
          goto LABEL_13;
        }

caulk::concurrent::message **sub_199664(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  *(void *)uint64_t v2 = off_473B18;
  unsigned __int8 v3 = (std::__shared_weak_count *)*((void *)v2 + 4);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  caulk::concurrent::message::~message(v2);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*caulk::alloc::realtime_safe_resource
                                                                                 + 24LL))( caulk::alloc::realtime_safe_resource,  v2,  56LL,  8LL);
  return a1;
}

void sub_1996D0(void *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  if (a3)
  {
    p_shared_owners = (unint64_t *)&a3->__shared_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    *a1 = a2;
    a1[1] = a3;
    p_shared_weak_owners = (unint64_t *)&a3->__shared_weak_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    do
      unint64_t v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))a3->__on_zero_shared)(a3);
      std::__shared_weak_count::__release_weak(a3);
    }
  }

  else
  {
    *a1 = a2;
    a1[1] = 0LL;
  }

void sub_199754(caulk::concurrent::message *this)
{
  *(void *)this = off_473B18;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);
}

void sub_19978C(caulk::concurrent::message *this)
{
  *(void *)this = off_473B18;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);
  operator delete(v3);
}

void *sub_1997C8(void *a1)
{
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  unsigned __int8 v3 = (std::__shared_weak_count *)a1[1];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void *sub_199804(void *a1)
{
  *a1 = &off_473E00;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  unsigned __int8 v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void sub_19984C(void *__p)
{
  void *__p = &off_473E00;
  uint64_t v2 = (void *)__p[3];
  if (v2)
  {
    __p[4] = v2;
    operator delete(v2);
  }

  unsigned __int8 v3 = (std::__shared_weak_count *)__p[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  operator delete(__p);
}

void *sub_199894(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x30uLL);
  void *v2 = &off_473E00;
  sub_199D94((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1998D4(_Unwind_Exception *a1)
{
}

uint64_t sub_1998E8(uint64_t a1, void *a2)
{
  *a2 = &off_473E00;
  return sub_199D94((uint64_t)(a2 + 1), a1 + 8);
}

void sub_199904(uint64_t a1)
{
}

void sub_19990C(void *a1)
{
}

void sub_199934(void *a1, unsigned int *a2)
{
  unsigned int v3 = *a2;
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_48E898);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_48E898))
  {
    byte_48E890 = sub_14E4A8();
    __cxa_guard_release(&qword_48E898);
  }

  if (byte_48E890)
  {
    unint64_t v5 = (os_log_s *)*(id *)sub_138E8(24);
    float v6 = v5;
    if (v5)
    {
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        uint64_t v35 = "DSPChain.mm";
        __int16 v36 = 1024;
        int v37 = 2213;
        _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d No device orientation based stereo channel swap due to defaults",  buf,  0x12u);
      }
    }
  }

  else
  {
    unint64_t v7 = (std::__shared_weak_count *)a1[2];
    if (v7)
    {
      unint64_t v8 = std::__shared_weak_count::lock(v7);
      if (v8)
      {
        float v9 = v8;
        uint64_t v10 = a1[1];
        if (v10)
        {
          uint64_t v32 = v10 + 48;
          char v33 = 1;
          sub_92F80(v10 + 48);
          uint64_t v12 = (int *)a1[3];
          for (uint64_t i = (unsigned int *)a1[4]; v12 != (int *)i; v12 += 2)
          {
            uint64_t v14 = *v12;
            uint64_t v13 = v12[1];
            uint64_t v15 = sub_1903A4(v10, *v12, v13, 0LL);
            if (!v15)
            {
              uint64_t v25 = (os_log_s *)*(id *)sub_138E8(13);
              id v26 = v25;
              if (v25 && os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                uint64_t v35 = "DSPChain.mm";
                __int16 v36 = 1024;
                int v37 = 2224;
                _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_ERROR,  "%25s:%-5d POSTCONDITION FAILURE (std::logic_error).",  buf,  0x12u);
              }

              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(exception, "Postcondition failure.");
            }

            uint64_t v16 = sub_138E8(24);
            if ((*(_BYTE *)(v16 + 8) & 1) != 0)
            {
              id v17 = *(id *)v16;
              if (v17)
              {
                int v18 = (os_log_s *)v17;
                if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
                {
                  sub_2CA1C(v30, v14);
                  int v19 = v31;
                  int v20 = (void **)v30[0];
                  sub_2CA1C(__p, v13);
                  unint64_t v21 = v30;
                  if (v19 < 0) {
                    unint64_t v21 = v20;
                  }
                  char v22 = __p;
                  if (v29 < 0) {
                    char v22 = (void **)__p[0];
                  }
                  *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
                  uint64_t v35 = "DSPChain.mm";
                  __int16 v36 = 1024;
                  int v37 = 2226;
                  __int16 v38 = 2080;
                  uint64_t v39 = v21;
                  __int16 v40 = 2080;
                  __int128 v41 = v22;
                  __int16 v42 = 1024;
                  unsigned int v43 = v3;
                  _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Updating {%s, %s} with orientation of %d",  buf,  0x2Cu);
                  if (v29 < 0) {
                    operator delete(__p[0]);
                  }
                  if (v31 < 0) {
                    operator delete(v30[0]);
                  }
                }
              }
            }

            (*(void (**)(uint64_t, uint64_t, void, void, float))(*(void *)v15 + 72LL))( v15,  v13,  0LL,  0LL,  (float)v3);
          }

          sub_93128((uint64_t)&v32);
        }

        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          unint64_t v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
  }

void sub_199CE8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
}

uint64_t sub_199D94(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  if (v3)
  {
    unsigned __int8 v4 = (unint64_t *)(v3 + 16);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 32) = 0LL;
  sub_8420C( (char *)(a1 + 16),  *(uint64_t **)(a2 + 16),  *(uint64_t **)(a2 + 24),  (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
  return a1;
}

void sub_199DF4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_199E0C(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 80) = -1;
  uint64_t v3 = *(unsigned int *)(a2 + 80);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_473B80[v3])(&v5, a1, a2);
    *(_DWORD *)(a1 + 80) = v3;
  }

  return a1;
}

void sub_199E6C(_Unwind_Exception *a1)
{
}

void sub_199E80(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

_BYTE *sub_199E8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = (__int128 *)(a3 + 40);
  *(void *)a2 = *(void *)a3;
  float v6 = (_BYTE *)(a2 + 40);
  sub_C590C((_BYTE *)(a2 + 8), (__int128 *)(a3 + 8));
  uint64_t result = sub_C590C(v6, v5);
  *(_WORD *)(a2 + 72) = *(_WORD *)(a3 + 72);
  return result;
}

void sub_199EF0(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 32))
  {
  }

  _Unwind_Resume(exception_object);
}

void *sub_199F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_16D268((void *)(a2 + 48), (void *)(a3 + 48));
  *(_WORD *)(a2 + 72) = *(_WORD *)(a3 + 72);
  return result;
}

void sub_199F60(_Unwind_Exception *a1)
{
}

void sub_199F84(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void sub_199F90(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

uint64_t sub_199F9C(uint64_t a1, int a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80LL))(a1);
  if ((_DWORD)result)
  {
    int v12 = a2 ^ 1;
    id v5 = *(id *)sub_138E8(24);
    float v6 = v5;
    if (v5)
    {
      unint64_t v7 = (os_log_s *)v5;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a1 + 735) < 0)
        {
          sub_24054(__p, *(void **)(a1 + 712), *(void *)(a1 + 720));
        }

        else
        {
          *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 712);
          uint64_t v11 = *(void *)(a1 + 728);
        }

        unint64_t v8 = "Deactivating";
        if (a2) {
          unint64_t v8 = "Activating";
        }
        uint64_t v14 = "DSPChain.mm";
        __int16 v15 = 1024;
        int v16 = 3167;
        float v9 = __p;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        if (v11 < 0) {
          float v9 = (void **)__p[0];
        }
        __int16 v17 = 2080;
        int v18 = v8;
        __int16 v19 = 2080;
        int v20 = v9;
        _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s processing block for graph %s", buf, 0x26u);
        if (SHIBYTE(v11) < 0) {
          operator delete(__p[0]);
        }
      }
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, uint64_t, void))(*(void *)a1 + 112LL))( a1,  1685287015LL,  1852797026LL,  &v12,  4LL,  0LL);
  }

  return result;
}

void sub_19A13C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19A158()
{
  uint64_t v0 = (os_log_t *)sub_138E8(6);
  uint64_t v1 = *v0;
  if (*v0 && os_log_type_enabled(*v0, OS_LOG_TYPE_DEBUG))
  {
    buf[0] = 136315394;
    *(void *)&buf[1] = "SingletonFactory_Aspen.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 42;
    _os_log_impl( &dword_0,  v1,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Beginning instantiation of singletons.",  (uint8_t *)buf,  0x12u);
  }

  uint64_t v2 = sub_138E8(10);
  uint64_t v3 = sub_138E8(6);
  char v4 = 0;
  uint64_t v5 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v6 = *(void *)(v2 + 8);
  while (1)
  {
    uint64_t v7 = (int)buf[v5];
    char v8 = v4;
    if (((v6 & v7) != 0) != ((*(void *)(v3 + 8) & v7) != 0)) {
      break;
    }
    char v4 = 1;
    uint64_t v5 = 1LL;
    if ((v8 & 1) != 0) {
      goto LABEL_10;
    }
  }

  if ((v6 & v7) == 0) {
    uint64_t v2 = v3;
  }
LABEL_10:
  float v9 = *(os_log_s **)v2;
  if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    buf[0] = 136315394;
    *(void *)&buf[1] = "SystemSettingsManager_Aspen.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 1027;
    _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to create SystemSettingsManager.",  (uint8_t *)buf,  0x12u);
  }

  if (qword_4927E0)
  {
    v200 = (os_log_t *)sub_138E8(13);
    v201 = *v200;
    if (*v200 && os_log_type_enabled(*v200, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "SystemSettingsManager_Aspen.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 1029;
      _os_log_impl( &dword_0,  v201,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): sSystemSettingsManager is not NULL!",  (uint8_t *)buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "sSystemSettingsManager is not NULL!");
LABEL_314:
  }

  uint64_t v10 = (char *)operator new(0x228uLL);
  *(void *)uint64_t v10 = off_4782D0;
  *((_DWORD *)v10 + 2) = 0;
  else {
    int v11 = 0;
  }
  *((_DWORD *)v10 + 3) = v11;
  *((_OWORD *)v10 + 1) = xmmword_4031D0;
  *((void *)v10 + 4) = 0x200000001LL;
  *((_DWORD *)v10 + 10) = 2;
  *((_OWORD *)v10 + 3) = xmmword_4031E0;
  *((_DWORD *)v10 + 16) = 0;
  v10[68] = 0;
  *((_DWORD *)v10 + 18) = 0;
  *(void *)AudioObjectPropertyAddress buf = _NSConcreteStackBlock;
  *(void *)&buf[2] = 0x40000000LL;
  *(void *)&uint8_t buf[4] = sub_23D01C;
  *(void *)&buf[6] = &unk_478440;
  v274 = v10;
  int v12 = operator new(0x88uLL);
  sub_23D024((uint64_t)v12, (uint64_t)"com.apple.mediaexperience.silentmode", buf);
  *((void *)v10 + 10) = v12;
  uint64_t v13 = operator new(0x88uLL);
  v272[0] = _NSConcreteStackBlock;
  v272[1] = 0x40000000LL;
  v272[2] = sub_23D0B8;
  v272[3] = &unk_478460;
  v272[4] = v10;
  sub_23D024((uint64_t)v13, (uint64_t)"com.apple.preferences-sounds.surround_sound.changed", v272);
  *((void *)v10 + 11) = v13;
  uint64_t v14 = operator new(0x88uLL);
  *(void *)&__int128 v257 = _NSConcreteStackBlock;
  *((void *)&v257 + 1) = 0x40000000LL;
  v258 = sub_23D0C0;
  v259 = &unk_478480;
  v260 = v10;
  sub_23D024((uint64_t)v14, (uint64_t)"com.apple.preferences-sounds.highQuality-enabled.changed", &v257);
  *((void *)v10 + 12) = v14;
  __int16 v15 = operator new(0x88uLL);
  *(void *)&__int128 __p = _NSConcreteStackBlock;
  *((void *)&__p + 1) = 0x40000000LL;
  v254 = sub_23D0C8;
  v255 = &unk_4784A0;
  v256 = v10;
  sub_23D024((uint64_t)v15, (uint64_t)"com.apple.accessibility.hac.status", &__p);
  *((void *)v10 + 13) = v15;
  int v16 = operator new(0x88uLL);
  *(void *)&__int128 v249 = _NSConcreteStackBlock;
  *((void *)&v249 + 1) = 0x40000000LL;
  v250 = sub_23D0D0;
  v251 = &unk_4784C0;
  v252 = v10;
  sub_23D024((uint64_t)v16, (uint64_t)"com.apple.accessibility.hearing.earpiece.noise.cancel.status", &v249);
  *((void *)v10 + 14) = v16;
  __int16 v17 = operator new(0x88uLL);
  p_isa = _NSConcreteStackBlock;
  uint64_t v245 = 0x40000000LL;
  v246 = sub_23D0D8;
  v247 = &unk_4784E0;
  v248 = v10;
  sub_23D024((uint64_t)v17, (uint64_t)"_AXNotification_PersonalMediaEnabled", &p_isa);
  *((void *)v10 + 15) = v17;
  int v18 = operator new(0x88uLL);
  v243[0] = _NSConcreteStackBlock;
  v243[1] = 0x40000000LL;
  v243[2] = sub_23D0E0;
  v243[3] = &unk_478500;
  v243[4] = v10;
  sub_23D024((uint64_t)v18, (uint64_t)"_AXNotification_personalAudioAccommodationTypes", v243);
  *((void *)v10 + 16) = v18;
  __int16 v19 = operator new(0x88uLL);
  v242[0] = _NSConcreteStackBlock;
  v242[1] = 0x40000000LL;
  v242[2] = sub_23D0E8;
  v242[3] = &unk_478520;
  v242[4] = v10;
  sub_23D024((uint64_t)v19, (uint64_t)"_AXNotification_currentEnrollmentProgress", v242);
  *((void *)v10 + 17) = v19;
  int v20 = operator new(0x88uLL);
  v241[0] = _NSConcreteStackBlock;
  v241[1] = 0x40000000LL;
  v241[2] = sub_23D0F0;
  v241[3] = &unk_478540;
  v241[4] = v10;
  sub_23D024((uint64_t)v20, (uint64_t)"com.apple.accessibility.hearing.ringtone.stream.status", v241);
  *((void *)v10 + 18) = v20;
  unint64_t v21 = operator new(0x88uLL);
  v240[0] = _NSConcreteStackBlock;
  v240[1] = 0x40000000LL;
  v240[2] = sub_23D0F8;
  v240[3] = &unk_478560;
  v240[4] = v10;
  sub_23D024((uint64_t)v21, (uint64_t)"_AXNotification_HearingAidSystemSoundsStream", v240);
  *((void *)v10 + 19) = v21;
  char v22 = operator new(0x88uLL);
  v239[0] = _NSConcreteStackBlock;
  v239[1] = 0x40000000LL;
  v239[2] = sub_23D100;
  v239[3] = &unk_478580;
  v239[4] = v10;
  sub_23D024((uint64_t)v22, (uint64_t)"_AXNotification_HearingAidsCallAudioRoute", v239);
  *((void *)v10 + 20) = v22;
  __int16 v23 = operator new(0x88uLL);
  v238[0] = _NSConcreteStackBlock;
  v238[1] = 0x40000000LL;
  v238[2] = sub_23D108;
  v238[3] = &unk_4785A0;
  v238[4] = v10;
  sub_23D024((uint64_t)v23, (uint64_t)"_AXNotification_HearingAidsMediaAudioRoute", v238);
  *((void *)v10 + 21) = v23;
  unint64_t v24 = operator new(0x88uLL);
  v237[0] = _NSConcreteStackBlock;
  v237[1] = 0x40000000LL;
  v237[2] = sub_23D110;
  v237[3] = &unk_4785C0;
  v237[4] = v10;
  sub_23D024((uint64_t)v24, (uint64_t)"com.apple.mobilemusicsettings.latenightmode", v237);
  *((void *)v10 + 22) = v24;
  uint64_t v25 = operator new(0x88uLL);
  v236[0] = _NSConcreteStackBlock;
  v236[1] = 0x40000000LL;
  v236[2] = sub_23D118;
  v236[3] = &unk_4785E0;
  v236[4] = v10;
  sub_23D024((uint64_t)v25, (uint64_t)"com.apple.preferences-sounds.enhancedialog", v236);
  *((void *)v10 + 23) = v25;
  id v26 = operator new(0x88uLL);
  v235[0] = _NSConcreteStackBlock;
  v235[1] = 0x40000000LL;
  v235[2] = sub_23D120;
  v235[3] = &unk_478600;
  v235[4] = v10;
  sub_23D024((uint64_t)v26, (uint64_t)"com.apple.preferences-sounds.enhancedialoguelevel", v235);
  *((void *)v10 + 24) = v26;
  v234[0] = _NSConcreteStackBlock;
  v234[1] = 0x40000000LL;
  v234[2] = sub_23D128;
  v234[3] = &unk_478620;
  v234[4] = v10;
  __int16 v27 = operator new(0x88uLL);
  sub_23D024((uint64_t)v27, (uint64_t)"com.apple.maggie.tbd", v234);
  *((void *)v10 + 25) = v27;
  v233[0] = _NSConcreteStackBlock;
  v233[1] = 0x40000000LL;
  v233[2] = sub_23D130;
  v233[3] = &unk_478640;
  v233[4] = v10;
  int v28 = operator new(0x88uLL);
  sub_23D024((uint64_t)v28, (uint64_t)"CARAutomaticDNDStatusChangedNotification", v233);
  *((void *)v10 + 26) = v28;
  v232[0] = _NSConcreteStackBlock;
  v232[1] = 0x40000000LL;
  v232[2] = sub_23D138;
  v232[3] = &unk_478660;
  v232[4] = v10;
  char v29 = operator new(0x88uLL);
  sub_23D024((uint64_t)v29, (uint64_t)"com.apple.system.powermanagement.poweradapter", v232);
  *((void *)v10 + 27) = v29;
  v231[0] = _NSConcreteStackBlock;
  v231[1] = 0x40000000LL;
  v231[2] = sub_23D140;
  v231[3] = &unk_478680;
  v231[4] = v10;
  CFNumberRef v30 = operator new(0x88uLL);
  sub_23D024((uint64_t)v30, (uint64_t)"com.apple.audio.virtualaudio.EnableBassReduction", v231);
  *((void *)v10 + 28) = v30;
  v230[0] = _NSConcreteStackBlock;
  v230[1] = 0x40000000LL;
  v230[2] = sub_23D148;
  v230[3] = &unk_4786A0;
  v230[4] = v10;
  char v31 = operator new(0x88uLL);
  sub_23D024((uint64_t)v31, (uint64_t)"com.apple.coremedia.vibration", v230);
  *((void *)v10 + 29) = v31;
  v229[0] = _NSConcreteStackBlock;
  v229[1] = 0x40000000LL;
  v229[2] = sub_23D150;
  v229[3] = &unk_4786C0;
  v229[4] = v10;
  uint64_t v32 = operator new(0x88uLL);
  sub_23D024((uint64_t)v32, (uint64_t)"com.apple.accessibility.voiceovertouch.status", v229);
  *((void *)v10 + 30) = v32;
  char v33 = operator new(0x88uLL);
  v228[0] = _NSConcreteStackBlock;
  v228[1] = 0x40000000LL;
  v228[2] = sub_23D158;
  v228[3] = &unk_4786E0;
  v228[4] = v10;
  sub_23D024((uint64_t)v33, (uint64_t)"HAENRLSStatusDidChange", v228);
  *((void *)v10 + 31) = v33;
  *((void *)v10 + 32) = 0LL;
  uint64_t v34 = operator new(0x88uLL);
  v227[0] = _NSConcreteStackBlock;
  v227[1] = 0x40000000LL;
  v227[2] = sub_23D21C;
  v227[3] = &unk_478700;
  v227[4] = v10;
  sub_23D024((uint64_t)v34, (uint64_t)"HAENUnknownWiredDeviceStatusChanged", v227);
  *((void *)v10 + 35) = 0LL;
  *((void *)v10 + 36) = 0LL;
  *((void *)v10 + 33) = v34;
  *((void *)v10 + 34) = v10 + 280;
  *((void *)v10 + 37) = v10 + 304;
  *((void *)v10 + 38) = 0LL;
  *((void *)v10 + 41) = 0LL;
  *((void *)v10 + 42) = 0LL;
  *((void *)v10 + 39) = 0LL;
  *((void *)v10 + 40) = v10 + 328;
  *((void *)v10 + 43) = v10 + 352;
  *((void *)v10 + 44) = 0LL;
  *((void *)v10 + 47) = 0LL;
  *((void *)v10 + 48) = 0LL;
  *((void *)v10 + 45) = 0LL;
  *((void *)v10 + 46) = v10 + 376;
  *((void *)v10 + 50) = 0LL;
  *((void *)v10 + 51) = 0LL;
  *((void *)v10 + 49) = v10 + 400;
  v10[416] = (unsigned __int16)sub_8339C((uint64_t)@"InternalBuild") > 0x100u;
  v10[417] = (unsigned __int16)sub_8339C((uint64_t)@"RegionalBehaviorShutterClick") > 0x100u;
  *((void *)v10 + 54) = 0LL;
  *((void *)v10 + 55) = 0LL;
  *((void *)v10 + 53) = 0LL;
  uint64_t v35 = operator new(0x58uLL);
  sub_B1F7C((uint64_t)v35, (uint64_t)"SerializationContextMutex");
  *((void *)v10 + 56) = v35;
  *((void *)v10 + 57) = v10 + 456;
  *((void *)v10 + 58) = v10 + 456;
  *((void *)v10 + 59) = 0LL;
  v10[480] = 1;
  *((_DWORD *)v10 + 121) = 0;
  *((void *)v10 + 61) = 850045863LL;
  *((_OWORD *)v10 + 31) = 0u;
  *((_OWORD *)v10 + 32) = 0u;
  *((_OWORD *)v10 + 33) = 0u;
  *((void *)v10 + 68) = 0LL;
  uint64_t v36 = sub_138E8(10);
  if ((*(_BYTE *)(v36 + 8) & 1) != 0)
  {
    int v37 = *(os_log_s **)v36;
    if (*(void *)v36)
    {
      if (os_log_type_enabled(*(os_log_t *)v36, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v269 = 136315650;
        *(void *)&v269[4] = "SystemSettingsManager_Aspen.cpp";
        *(_WORD *)&v269[12] = 1024;
        *(_DWORD *)&v269[14] = 908;
        __int16 v270 = 2048;
        *(void *)v271 = v10;
        _os_log_impl( &dword_0,  v37,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d + SystemSettingsManager_Aspen[%p]::SystemSettingsManager_Aspen()",  v269,  0x1Cu);
      }
    }
  }

  if (!sub_23D2E0(*((void *)v10 + 10)))
  {
    __int16 v38 = (os_log_t *)sub_138E8(10);
    uint64_t v39 = *v38;
    if (*v38)
    {
      if (os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v269 = 136315394;
        *(void *)&v269[4] = "SystemSettingsManager_Aspen.cpp";
        *(_WORD *)&v269[12] = 1024;
        *(_DWORD *)&v269[14] = 914;
        _os_log_impl(&dword_0, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d Error initializing silent mode setting", v269, 0x12u);
      }
    }
  }

  if (!sub_23D2E0(*((void *)v10 + 11)))
  {
    __int16 v40 = (os_log_t *)sub_138E8(10);
    __int128 v41 = *v40;
    if (*v40)
    {
      if (os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v269 = 136315394;
        *(void *)&v269[4] = "SystemSettingsManager_Aspen.cpp";
        *(_WORD *)&v269[12] = 1024;
        *(_DWORD *)&v269[14] = 917;
        _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error initializing multichannel preference setting",  v269,  0x12u);
      }
    }
  }

  if (!sub_23D2E0(*((void *)v10 + 12)))
  {
    __int16 v42 = (os_log_t *)sub_138E8(10);
    unsigned int v43 = *v42;
    if (*v42)
    {
      if (os_log_type_enabled(*v42, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v269 = 136315394;
        *(void *)&v269[4] = "SystemSettingsManager_Aspen.cpp";
        *(_WORD *)&v269[12] = 1024;
        *(_DWORD *)&v269[14] = 920;
        _os_log_impl( &dword_0,  v43,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error initializing high quality audio preference setting",  v269,  0x12u);
      }
    }
  }

  if (!sub_23D2E0(*((void *)v10 + 13)))
  {
    uint64_t v44 = (os_log_t *)sub_138E8(10);
    unint64_t v45 = *v44;
    if (*v44)
    {
      if (os_log_type_enabled(*v44, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v269 = 136315394;
        *(void *)&v269[4] = "SystemSettingsManager_Aspen.cpp";
        *(_WORD *)&v269[12] = 1024;
        *(_DWORD *)&v269[14] = 923;
        _os_log_impl( &dword_0,  v45,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error initializing hearing aid compliance preference setting",  v269,  0x12u);
      }
    }
  }

  if (!sub_23D2E0(*((void *)v10 + 22)))
  {
    unint64_t v46 = (os_log_t *)sub_138E8(10);
    BOOL v47 = *v46;
    if (*v46)
    {
      if (os_log_type_enabled(*v46, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v269 = 136315394;
        *(void *)&v269[4] = "SystemSettingsManager_Aspen.cpp";
        *(_WORD *)&v269[12] = 1024;
        *(_DWORD *)&v269[14] = 926;
        _os_log_impl( &dword_0,  v47,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error initializing late night mode preference setting",  v269,  0x12u);
      }
    }
  }

  if (!sub_23D2E0(*((void *)v10 + 23)))
  {
    unint64_t v48 = (os_log_t *)sub_138E8(10);
    unint64_t v49 = *v48;
    if (*v48)
    {
      if (os_log_type_enabled(*v48, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v269 = 136315394;
        *(void *)&v269[4] = "SystemSettingsManager_Aspen.cpp";
        *(_WORD *)&v269[12] = 1024;
        *(_DWORD *)&v269[14] = 930;
        _os_log_impl( &dword_0,  v49,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error initializing enhance dialog mode preference setting",  v269,  0x12u);
      }
    }
  }

  if (!sub_23D2E0(*((void *)v10 + 24)))
  {
    id v50 = (os_log_t *)sub_138E8(10);
    unint64_t v51 = *v50;
    if (*v50)
    {
      if (os_log_type_enabled(*v50, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v269 = 136315394;
        *(void *)&v269[4] = "SystemSettingsManager_Aspen.cpp";
        *(_WORD *)&v269[12] = 1024;
        *(_DWORD *)&v269[14] = 934;
        _os_log_impl( &dword_0,  v51,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error initializing enhance dialog level preference setting",  v269,  0x12u);
      }
    }
  }

  if (!sub_23D2E0(*((void *)v10 + 31)))
  {
    unint64_t v52 = (os_log_t *)sub_138E8(10);
    unint64_t v53 = *v52;
    if (*v52)
    {
      if (os_log_type_enabled(*v52, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v269 = 136315394;
        *(void *)&v269[4] = "SystemSettingsManager_Aspen.cpp";
        *(_WORD *)&v269[12] = 1024;
        *(_DWORD *)&v269[14] = 937;
        _os_log_impl( &dword_0,  v53,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error initializing volume limit mode preference setting",  v269,  0x12u);
      }
    }
  }

  if (!sub_23D2E0(*((void *)v10 + 33)))
  {
    uint64_t v54 = (os_log_t *)sub_138E8(10);
    float v55 = *v54;
    if (*v54)
    {
      if (os_log_type_enabled(*v54, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v269 = 136315394;
        *(void *)&v269[4] = "SystemSettingsManager_Aspen.cpp";
        *(_WORD *)&v269[12] = 1024;
        *(_DWORD *)&v269[14] = 948;
        _os_log_impl( &dword_0,  v55,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error initializing volume limit unknown wired device setting",  v269,  0x12u);
      }
    }
  }

  if (!sub_23D2E0(*((void *)v10 + 14)))
  {
    int v56 = (os_log_t *)sub_138E8(10);
    __int128 v57 = *v56;
    if (*v56)
    {
      if (os_log_type_enabled(*v56, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v269 = 136315394;
        *(void *)&v269[4] = "SystemSettingsManager_Aspen.cpp";
        *(_WORD *)&v269[12] = 1024;
        *(_DWORD *)&v269[14] = 951;
        _os_log_impl( &dword_0,  v57,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error initializing anc preference setting",  v269,  0x12u);
      }
    }
  }

  if (!sub_23D2E0(*((void *)v10 + 15)))
  {
    char v58 = (os_log_t *)sub_138E8(10);
    unint64_t v59 = *v58;
    if (*v58)
    {
      if (os_log_type_enabled(*v58, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v269 = 136315394;
        *(void *)&v269[4] = "SystemSettingsManager_Aspen.cpp";
        *(_WORD *)&v269[12] = 1024;
        *(_DWORD *)&v269[14] = 954;
        _os_log_impl( &dword_0,  v59,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error initializing PME Enable Control Center setting",  v269,  0x12u);
      }
    }
  }

  if (!sub_23D2E0(*((void *)v10 + 16)))
  {
    uint64_t v60 = (os_log_t *)sub_138E8(10);
    unint64_t v61 = *v60;
    if (*v60)
    {
      if (os_log_type_enabled(*v60, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v269 = 136315394;
        *(void *)&v269[4] = "SystemSettingsManager_Aspen.cpp";
        *(_WORD *)&v269[12] = 1024;
        *(_DWORD *)&v269[14] = 957;
        _os_log_impl( &dword_0,  v61,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error initializing PME AudioAccommodationTypes setting",  v269,  0x12u);
      }
    }
  }

  if (!sub_23D2E0(*((void *)v10 + 17)))
  {
    unint64_t v62 = (os_log_t *)sub_138E8(10);
    unsigned int v63 = *v62;
    if (*v62)
    {
      if (os_log_type_enabled(*v62, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v269 = 136315394;
        *(void *)&v269[4] = "SystemSettingsManager_Aspen.cpp";
        *(_WORD *)&v269[12] = 1024;
        *(_DWORD *)&v269[14] = 960;
        _os_log_impl( &dword_0,  v63,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error initializing PME Enrollment setting",  v269,  0x12u);
      }
    }
  }

  if (!sub_23D2E0(*((void *)v10 + 18)))
  {
    unint64_t v64 = (os_log_t *)sub_138E8(10);
    unint64_t v65 = *v64;
    if (*v64)
    {
      if (os_log_type_enabled(*v64, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v269 = 136315394;
        *(void *)&v269[4] = "SystemSettingsManager_Aspen.cpp";
        *(_WORD *)&v269[12] = 1024;
        *(_DWORD *)&v269[14] = 963;
        _os_log_impl( &dword_0,  v65,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error initializing BTLE Hearing Aid Ringtone preference setting",  v269,  0x12u);
      }
    }
  }

  if (!sub_23D2E0(*((void *)v10 + 19)))
  {
    uint64_t v66 = (os_log_t *)sub_138E8(10);
    uint64_t v67 = *v66;
    if (*v66)
    {
      if (os_log_type_enabled(*v66, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v269 = 136315394;
        *(void *)&v269[4] = "SystemSettingsManager_Aspen.cpp";
        *(_WORD *)&v269[12] = 1024;
        *(_DWORD *)&v269[14] = 966;
        _os_log_impl( &dword_0,  v67,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error initializing BTLE Hearing Aid System Sounds preference setting",  v269,  0x12u);
      }
    }
  }

  if (!sub_23D2E0(*((void *)v10 + 20)))
  {
    int v68 = (os_log_t *)sub_138E8(10);
    unint64_t v69 = *v68;
    if (*v68)
    {
      if (os_log_type_enabled(*v68, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v269 = 136315394;
        *(void *)&v269[4] = "SystemSettingsManager_Aspen.cpp";
        *(_WORD *)&v269[12] = 1024;
        *(_DWORD *)&v269[14] = 969;
        _os_log_impl( &dword_0,  v69,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error initializing BTLE Hearing Aid Call Audio Routing preference setting",  v269,  0x12u);
      }
    }
  }

  if (!sub_23D2E0(*((void *)v10 + 21)))
  {
    __int16 v70 = (os_log_t *)sub_138E8(10);
    int v71 = *v70;
    if (*v70)
    {
      if (os_log_type_enabled(*v70, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v269 = 136315394;
        *(void *)&v269[4] = "SystemSettingsManager_Aspen.cpp";
        *(_WORD *)&v269[12] = 1024;
        *(_DWORD *)&v269[14] = 972;
        _os_log_impl( &dword_0,  v71,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error initializing BTLE Hearing Aid Media Audio Routing preference setting",  v269,  0x12u);
      }
    }
  }

  if (!sub_23D2E0(*((void *)v10 + 26)))
  {
    unint64_t v72 = (os_log_t *)sub_138E8(10);
    __int128 v73 = *v72;
    if (*v72)
    {
      if (os_log_type_enabled(*v72, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v269 = 136315394;
        *(void *)&v269[4] = "SystemSettingsManager_Aspen.cpp";
        *(_WORD *)&v269[12] = 1024;
        *(_DWORD *)&v269[14] = 975;
        _os_log_impl( &dword_0,  v73,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error initializing Car DnD state setting",  v269,  0x12u);
      }
    }
  }

  if (!sub_23D2E0(*((void *)v10 + 29)))
  {
    __int16 v74 = (os_log_t *)sub_138E8(10);
    float v75 = *v74;
    if (*v74)
    {
      if (os_log_type_enabled(*v74, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v269 = 136315394;
        *(void *)&v269[4] = "SystemSettingsManager_Aspen.cpp";
        *(_WORD *)&v269[12] = 1024;
        *(_DWORD *)&v269[14] = 984;
        _os_log_impl( &dword_0,  v75,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error initializing Vibration state setting",  v269,  0x12u);
      }
    }
  }

  if (!sub_23D2E0(*((void *)v10 + 30)))
  {
    unint64_t v76 = (os_log_t *)sub_138E8(10);
    float v77 = *v76;
    if (*v76)
    {
      if (os_log_type_enabled(*v76, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v269 = 136315394;
        *(void *)&v269[4] = "SystemSettingsManager_Aspen.cpp";
        *(_WORD *)&v269[12] = 1024;
        *(_DWORD *)&v269[14] = 987;
        _os_log_impl( &dword_0,  v77,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error initializing VoiceOver state setting",  v269,  0x12u);
      }
    }
  }

  if (!sub_23D2E0(*((void *)v10 + 28)))
  {
    float v78 = (os_log_t *)sub_138E8(10);
    unint64_t v79 = *v78;
    if (*v78)
    {
      if (os_log_type_enabled(*v78, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v269 = 136315394;
        *(void *)&v269[4] = "SystemSettingsManager_Aspen.cpp";
        *(_WORD *)&v269[12] = 1024;
        *(_DWORD *)&v269[14] = 990;
        _os_log_impl(&dword_0, v79, OS_LOG_TYPE_ERROR, "%25s:%-5d Error initializing reduce bass setting", v269, 0x12u);
      }
    }
  }

  *(void *)v269 = &off_4787B0;
  *(void *)&v269[8] = v10;
  *(void *)&v271[4] = v269;
  sub_23D36C((uint64_t)v10);
  sub_23D690((uint64_t)v10);
  sub_23D9EC((uint64_t)v10);
  sub_23DE24((uint64_t)v10);
  (*(void (**)(char *))(*(void *)v10 + 168LL))(v10);
  sub_23E2A8((uint64_t)v10);
  sub_23EBD0((uint64_t)v10);
  sub_23EF8C((uint64_t)v10);
  sub_23F348(v10);
  sub_23F648(v10);
  sub_23FA14(v10);
  sub_23C990((uint64_t)v10);
  sub_23FDE0((uint64_t)v10);
  sub_23FE28((uint64_t)v10);
  sub_23FF94((uint64_t)v10);
  sub_240110((uint64_t)v10);
  sub_240440((uint64_t)v10);
  uint64_t v80 = sub_138E8(10);
  if ((*(_BYTE *)(v80 + 8) & 1) != 0)
  {
    v81 = *(os_log_s **)v80;
    if (*(void *)v80)
    {
      if (os_log_type_enabled(*(os_log_t *)v80, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v263 = 136315650;
        v264 = "SystemSettingsManager_Aspen.cpp";
        __int16 v265 = 1024;
        int v266 = 1012;
        __int16 v267 = 2048;
        v268 = v10;
        _os_log_impl( &dword_0,  v81,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - SystemSettingsManager_Aspen[%p]::SystemSettingsManager_Aspen()",  v263,  0x1Cu);
      }
    }
  }

  qword_4927E0 = (uint64_t)v10;
  __int128 v82 = (os_log_t *)sub_138E8(6);
  unint64_t v83 = *v82;
  if (*v82 && os_log_type_enabled(*v82, OS_LOG_TYPE_DEBUG))
  {
    buf[0] = 136315394;
    *(void *)&buf[1] = "ObjectDestructionManager.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 30;
    _os_log_impl( &dword_0,  v83,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to create ObjectDestructionManager.",  (uint8_t *)buf,  0x12u);
  }

  if (qword_4A9BE8)
  {
    v203 = (os_log_t *)sub_138E8(13);
    v204 = *v203;
    if (*v203 && os_log_type_enabled(*v203, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "ObjectDestructionManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 31;
      _os_log_impl( &dword_0,  v204,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): sObjectDestructionManager is not NULL!",  (uint8_t *)buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "sObjectDestructionManager is not NULL!");
    goto LABEL_314;
  }

  unint64_t v84 = operator new(8uLL);
  void *v84 = 0LL;
  qword_4A9BE8 = (uint64_t)v84;
  unint64_t v85 = operator new(0x20uLL);
  v85[1] = 0LL;
  v85[2] = 0LL;
  *unint64_t v85 = off_46E130;
  v85[3] = &off_46E0E0;
  *(void *)&__int128 v226 = v85 + 3;
  *((void *)&v226 + 1) = v85;
  unint64_t v86 = (std::__shared_weak_count *)operator new(0x20uLL);
  v86->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v86->__shared_owners_;
  v86->__shared_weak_owners_ = 0LL;
  v86->__vftable = (std::__shared_weak_count_vtbl *)off_484BE8;
  v86[1].__vftable = (std::__shared_weak_count_vtbl *)&off_484B90;
  v261[0] = &off_484B18;
  v262 = v261;
  unsigned int v88 = (os_log_t *)sub_138E8(6);
  unint64_t v89 = *v88;
  if (*v88 && os_log_type_enabled(*v88, OS_LOG_TYPE_DEBUG))
  {
    buf[0] = 136315394;
    *(void *)&buf[1] = "TimeSyncClockDeviceManager.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 51;
    _os_log_impl( &dword_0,  v89,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Creating TimeSyncClockDeviceManager.",  (uint8_t *)buf,  0x12u);
  }

  if (qword_4A08A0)
  {
    v205 = (os_log_t *)sub_138E8(13);
    v206 = *v205;
    if (*v205 && os_log_type_enabled(*v205, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "TimeSyncClockDeviceManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 53;
      _os_log_impl( &dword_0,  v206,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): sTimeSyncClockDeviceManager is not NULL!",  (uint8_t *)buf,  0x12u);
    }

    v207 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v207, "sTimeSyncClockDeviceManager is not NULL!");
  }

  unint64_t v90 = (char *)operator new(0xB0uLL);
  __int128 v257 = v226;
  *(void *)&__int128 __p = v86 + 1;
  *((void *)&__p + 1) = v86;
  sub_32A6A0((uint64_t)buf, (uint64_t)v261);
  *(void *)unint64_t v90 = off_481980;
  uint64_t v91 = *((void *)&v257 + 1);
  *((void *)v90 + 1) = v257;
  *((void *)v90 + 2) = v91;
  if (v91)
  {
    unint64_t v92 = (unint64_t *)(v91 + 8);
    do
      unint64_t v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }

  uint64_t v94 = *((void *)&__p + 1);
  *((void *)v90 + 3) = __p;
  *((void *)v90 + 4) = v94;
  if (v94)
  {
    v95 = (unint64_t *)(v94 + 8);
    do
      unint64_t v96 = __ldxr(v95);
    while (__stxr(v96 + 1, v95));
  }

  sub_32A6A0((uint64_t)(v90 + 40), (uint64_t)buf);
  *((_OWORD *)v90 + 9) = 0u;
  *((void *)v90 + 11) = 0LL;
  *((void *)v90 + 10) = 0LL;
  *((void *)v90 + 9) = v90 + 80;
  *((_OWORD *)v90 + 6) = 0u;
  *((_OWORD *)v90 + 7) = 0u;
  *((_OWORD *)v90 + 8) = 0u;
  *((_OWORD *)v90 + 10) = 0u;
  if (!(void)v257)
  {
    v208 = (os_log_t *)sub_138E8(13);
    v209 = *v208;
    if (*v208 && os_log_type_enabled(*v208, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v272[0]) = 136315394;
      *(void *)((char *)v272 + 4) = "TimeSyncClockDeviceManager.cpp";
      WORD2(v272[1]) = 1024;
      *(_DWORD *)((char *)&v272[1] + 6) = 80;
      _os_log_impl( &dword_0,  v209,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): HALSystem is invalid",  (uint8_t *)v272,  0x12u);
    }

    v210 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v210, "HALSystem is invalid");
LABEL_288:
  }

  if (!(void)__p)
  {
    v211 = (os_log_t *)sub_138E8(13);
    v212 = *v211;
    if (*v211 && os_log_type_enabled(*v211, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v272[0]) = 136315394;
      *(void *)((char *)v272 + 4) = "TimeSyncClockDeviceManager.cpp";
      WORD2(v272[1]) = 1024;
      *(_DWORD *)((char *)&v272[1] + 6) = 81;
      _os_log_impl( &dword_0,  v212,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): TimeSyncSystem is invalid",  (uint8_t *)v272,  0x12u);
    }

    v210 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v210, "TimeSyncSystem is invalid");
    goto LABEL_288;
  }

  dispatch_queue_t v97 = dispatch_queue_create("VA TimeSyncClockDeviceManager Queue", 0LL);
  __int128 v98 = (dispatch_object_s *)*((void *)v90 + 21);
  *((void *)v90 + 21) = v97;
  if (v98) {
    dispatch_release(v98);
  }
  strcpy((char *)v272, "#klcbolg");
  BYTE1(v272[1]) = 0;
  WORD1(v272[1]) = 0;
  (*(void (**)(void, uint64_t, void *, uint64_t (*)(), void))(**((void **)v90 + 1) + 16LL))( *((void *)v90 + 1),  1LL,  v272,  sub_32A704,  0LL);
  qword_4A08A0 = (uint64_t)v90;
  __int128 v99 = *(_DWORD **)&buf[6];
  if (*(_DWORD **)&buf[6] == buf)
  {
    uint64_t v100 = 4LL;
    __int128 v99 = buf;
  }

  else
  {
    if (!*(void *)&buf[6]) {
      goto LABEL_132;
    }
    uint64_t v100 = 5LL;
  }

  (*(void (**)(void))(*(void *)v99 + 8 * v100))();
  do
LABEL_132:
    unint64_t v101 = __ldaxr(p_shared_owners);
  while (__stlxr(v101 - 1, p_shared_owners));
  if (!v101)
  {
    ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
    std::__shared_weak_count::__release_weak(v86);
  }

  __int128 v102 = (std::__shared_weak_count *)*((void *)&v257 + 1);
  if (*((void *)&v257 + 1))
  {
    uint64_t v103 = (unint64_t *)(*((void *)&v257 + 1) + 8LL);
    do
      unint64_t v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }

  v105 = v262;
  if (v262 == v261)
  {
    uint64_t v106 = 4LL;
    v105 = v261;
    goto LABEL_144;
  }

  if (v262)
  {
    uint64_t v106 = 5LL;
LABEL_144:
    (*(void (**)(void))(*v105 + 8 * v106))();
  }

  uint64_t v107 = sub_138E8(11);
  uint64_t v108 = sub_138E8(6);
  char v109 = 0;
  uint64_t v110 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v111 = *(void *)(v107 + 8);
  while (1)
  {
    uint64_t v112 = (int)buf[v110];
    char v113 = v109;
    if (((v111 & v112) != 0) != ((*(void *)(v108 + 8) & v112) != 0)) {
      break;
    }
    char v109 = 1;
    uint64_t v110 = 1LL;
    if ((v113 & 1) != 0) {
      goto LABEL_151;
    }
  }

  if ((v111 & v112) == 0) {
    uint64_t v107 = v108;
  }
LABEL_151:
  v114 = *(os_log_s **)v107;
  if (v114 && os_log_type_enabled(v114, OS_LOG_TYPE_DEBUG))
  {
    buf[0] = 136315394;
    *(void *)&buf[1] = "IAPManager.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 134;
    _os_log_impl(&dword_0, v114, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to create IAPManager.", (uint8_t *)buf, 0x12u);
  }

  if (qword_490F28)
  {
    v213 = (os_log_t *)sub_138E8(13);
    v214 = *v213;
    if (*v213 && os_log_type_enabled(*v213, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "IAPManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 136;
      _os_log_impl( &dword_0,  v214,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): sIAPManager is not NULL!",  (uint8_t *)buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "sIAPManager is not NULL!");
    goto LABEL_314;
  }

  int v115 = operator new(0xC8uLL);
  *int v115 = off_474238;
  v115[1] = 0LL;
  __int16 v116 = (char *)operator new(0x80uLL);
  *(void *)__int16 v116 = &off_47D5C0;
  *((void *)v116 + 1) = 0LL;
  int v117 = pthread_self();
  *((_DWORD *)v116 + 4) = sub_2F45FC(v117);
  *((void *)v116 + 3) = sub_1A3CF8;
  *((void *)v116 + 4) = v115;
  *((_DWORD *)v116 + 26) = 50;
  *((_DWORD *)v116 + 27) = 0;
  *((void *)v116 + 14) = 0LL;
  *((_DWORD *)v116 + 30) = 16777217;
  *(_OWORD *)(v116 + 40) = 0u;
  *(_OWORD *)(v116 + 56) = 0u;
  *(_OWORD *)(v116 + 72) = 0u;
  *(_OWORD *)(v116 + 88) = 0u;
  v115[2] = v116;
  sub_3781F0((uint64_t)(v115 + 3), (uint64_t)"RunLoopThread guard");
  *((_DWORD *)v115 + 40) = 378;
  v115[21] = v115 + 21;
  v115[22] = v115 + 21;
  v115[23] = 0LL;
  *((_DWORD *)v115 + 48) = 31;
  *((_BYTE *)v115 + 196) = 1;
  (*(void (**)(void))(*(void *)v115[2] + 16LL))(v115[2]);
  int v118 = (*(uint64_t (**)(void *))(v115[3] + 16LL))(v115 + 3);
  if (!v115[1])
  {
    sub_377BF0((uint64_t)(v115 + 3));
    if (!v115[1])
    {
      v198 = (os_log_t *)sub_138E8(13);
      v199 = *v198;
      if (*v198)
      {
        if (os_log_type_enabled(*v198, OS_LOG_TYPE_ERROR))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "RunLoopThread.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 53;
          _os_log_impl( &dword_0,  v199,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Received run loop ready signal but run loop is NULL!",  (uint8_t *)buf,  0x12u);
        }
      }
    }
  }

  uint64_t v119 = v115[2];
  if (v119) {
    atomic_load((unint64_t *)(v119 + 8));
  }
  if (v118) {
    (*(void (**)(void *))(v115[3] + 24LL))(v115 + 3);
  }
  qword_490F30 = (uint64_t)v115;
  __int16 v120 = operator new(0xB8uLL);
  sub_B1F7C((uint64_t)v120, (uint64_t)"IAPManager mutex");
  v120[21] = 0LL;
  *((_DWORD *)v120 + 22) = 0;
  v120[13] = 0LL;
  v120[14] = 0LL;
  v120[12] = v120 + 13;
  *((_BYTE *)v120 + 120) = 0;
  *((_DWORD *)v120 + 31) = 0;
  *((_BYTE *)v120 + 128) = 0;
  v120[18] = 0LL;
  v120[17] = v120 + 18;
  v120[22] = 0LL;
  v120[19] = 0LL;
  v120[20] = v120 + 21;
  uint64_t v121 = sub_138E8(11);
  uint64_t v122 = sub_138E8(6);
  char v123 = 0;
  uint64_t v124 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v125 = *(void *)(v121 + 8);
  while (1)
  {
    uint64_t v126 = (int)buf[v124];
    char v127 = v123;
    if (((v125 & v126) != 0) != ((*(void *)(v122 + 8) & v126) != 0)) {
      break;
    }
    char v123 = 1;
    uint64_t v124 = 1LL;
    if ((v127 & 1) != 0)
    {
      if ((v125 & 1) == 0) {
        goto LABEL_172;
      }
      goto LABEL_169;
    }
  }

  if ((v125 & v126) == 0) {
    uint64_t v121 = v122;
  }
  if ((*(void *)(v121 + 8) & 1) != 0)
  {
LABEL_169:
    __int16 v128 = *(os_log_s **)v121;
    if (v128 && os_log_type_enabled(v128, OS_LOG_TYPE_DEBUG))
    {
      buf[0] = 136315650;
      *(void *)&buf[1] = "IAPManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 171;
      HIWORD(buf[4]) = 2048;
      *(void *)&buf[5] = v120;
      _os_log_impl(&dword_0, v128, OS_LOG_TYPE_DEBUG, "%25s:%-5d + IAPManager[%p]::IAPManager()", (uint8_t *)buf, 0x1Cu);
    }
  }

LABEL_228:
  sub_19DFC((uint64_t)&v274);
  sub_19DFC((uint64_t)&buf[4]);
  sub_19DFC((uint64_t)buf);
  sub_19DFC((uint64_t)&p_isa);
  *(_OWORD *)AudioObjectPropertyAddress buf = v249;
  if (*((void *)&v249 + 1))
  {
    v172 = (unint64_t *)(*((void *)&v249 + 1) + 8LL);
    do
      unint64_t v173 = __ldxr(v172);
    while (__stxr(v173 + 1, v172));
  }

  int v174 = sub_370848((uint64_t *)buf);
  int v175 = v174;
  v176 = *(std::__shared_weak_count **)&buf[2];
  if (!*(void *)&buf[2]) {
    goto LABEL_235;
  }
  v177 = (unint64_t *)(*(void *)&buf[2] + 8LL);
  do
    unint64_t v178 = __ldaxr(v177);
  while (__stlxr(v178 - 1, v177));
  if (!v178)
  {
    ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
    std::__shared_weak_count::__release_weak(v176);
    if (v175) {
      goto LABEL_236;
    }
  }

  else
  {
LABEL_235:
    if (v174)
    {
LABEL_236:
      __int128 v179 = v249;
      __int128 v249 = 0uLL;
      v180 = (std::__shared_weak_count *)*((void *)v159 + 27);
      *((_OWORD *)v159 + 13) = v179;
      if (v180)
      {
        v181 = (unint64_t *)&v180->__shared_owners_;
        do
          unint64_t v182 = __ldaxr(v181);
        while (__stlxr(v182 - 1, v181));
        if (!v182)
        {
          ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
          std::__shared_weak_count::__release_weak(v180);
        }
      }
    }
  }

  sub_FCC10(v159, 1);
  v183 = (std::__shared_weak_count *)*((void *)&v249 + 1);
  if (*((void *)&v249 + 1))
  {
    v184 = (unint64_t *)(*((void *)&v249 + 1) + 8LL);
    do
      unint64_t v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
    }
  }

  uint64_t v186 = sub_138E8(7);
  uint64_t v187 = sub_138E8(6);
  char v188 = 0;
  uint64_t v189 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v190 = *(void *)(v186 + 8);
  while (1)
  {
    uint64_t v191 = (int)buf[v189];
    char v192 = v188;
    if (((v190 & v191) != 0) != ((*(void *)(v187 + 8) & v191) != 0)) {
      break;
    }
    char v188 = 1;
    uint64_t v189 = 1LL;
    if ((v192 & 1) != 0) {
      goto LABEL_253;
    }
  }

  if ((v190 & v191) == 0) {
    uint64_t v186 = v187;
  }
LABEL_253:
  v193 = *(os_log_s **)v186;
  if (v193 && os_log_type_enabled(v193, OS_LOG_TYPE_DEBUG))
  {
    buf[0] = 136315394;
    *(void *)&buf[1] = "DeviceManager.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 92;
    _os_log_impl( &dword_0,  v193,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to create DeviceManager.",  (uint8_t *)buf,  0x12u);
  }

  if (qword_48D7B0)
  {
    v224 = (os_log_t *)sub_138E8(13);
    v225 = *v224;
    if (*v224 && os_log_type_enabled(*v224, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "DeviceManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 94;
      _os_log_impl( &dword_0,  v225,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): sDeviceManager is not NULL!",  (uint8_t *)buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "sDeviceManager is not NULL!");
    goto LABEL_314;
  }

  v194 = operator new(0x88uLL);
  sub_B1F7C((uint64_t)v194, (uint64_t)"DeviceManagerMutex");
  v195 = operator new(0xA8uLL);
  void *v195 = off_4728B0;
  sub_B1F7C((uint64_t)(v195 + 1), (uint64_t)"DeviceListener_Aspen mutex");
  v195[13] = 0LL;
  v195[12] = v195 + 13;
  v195[15] = 0LL;
  v195[16] = 0LL;
  v195[14] = 0LL;
  *((_DWORD *)v195 + 34) = 3;
  v195[20] = 0LL;
  v195[19] = 0LL;
  v195[18] = v195 + 19;
  v194[11] = v195;
  v194[13] = v194 + 13;
  v194[14] = v194 + 13;
  v194[15] = 0LL;
  *((_BYTE *)v194 + 128) = 0;
  qword_48D7B0 = (uint64_t)v194;
  (*(void (**)(void *, void (*)(void *, int, uint64_t *), void *, int *))(*v195 + 16LL))( v195,  sub_E7528,  v194,  &dword_48D7B8);
  if (qword_4919C8 != -1) {
    dispatch_once(&qword_4919C8, &stru_473EE8);
  }
  if (off_491A60) {
    off_491A60();
  }
  sub_9EB48();
  v196 = (os_log_t *)sub_138E8(6);
  v197 = *v196;
  if (*v196)
  {
    if (os_log_type_enabled(*v196, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v263 = 136315394;
      v264 = "SingletonFactory_Aspen.cpp";
      __int16 v265 = 1024;
      int v266 = 79;
      _os_log_impl(&dword_0, v197, OS_LOG_TYPE_DEBUG, "%25s:%-5d Completed instantiation of singletons.", v263, 0x12u);
    }
  }

void sub_19CD28( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v16 + 24LL))(v16);
  }
  sub_68314(v17);
  sub_3781A4(v16);
  operator delete(v15);
  if (a2 == 3)
  {
    unint64_t v21 = (unsigned int *)__cxa_begin_catch(a1);
    char v22 = (os_log_t *)sub_138E8(6);
    __int16 v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(&__p, v21[2]);
      if (a15 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      LODWORD(STACK[0x3B0]) = 136315650;
      STACK[0x3B4] = (unint64_t)"SingletonFactory_Aspen.cpp";
      LOWORD(STACK[0x3BC]) = 1024;
      LODWORD(STACK[0x3BE]) = 68;
      LOWORD(STACK[0x3C2]) = 2080;
      STACK[0x3C4] = (unint64_t)p_p;
      _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d CAException thrown: %s",  (uint8_t *)&STACK[0x3B0],  0x1Cu);
      if (a15 < 0) {
        operator delete(__p);
      }
    }

void sub_19DAD4(id a1)
{
  uint64_t v1 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v1) {
    goto LABEL_5;
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    int v3 = 136315138;
    char v4 = dlerror();
    _os_log_error_impl( &dword_0,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "dlerror : libAudioIssueDetector ADAM: %s",  (uint8_t *)&v3,  0xCu);
  }

  uint64_t v1 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1);
  if (v1)
  {
LABEL_5:
    off_4919D0 = dlsym(v1, "AudioDataAnalysisManagerCreate");
    off_4919D8 = dlsym(v1, "AudioDataAnalysisManagerDispose");
    qword_4919E0 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerReset");
    off_4919E8 = dlsym(v1, "AudioDataAnalysisManagerUpdateReportingSessions");
    qword_4919F0 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerCreateNodePCM");
    off_4919F8 = dlsym(v1, "AudioDataAnalysisManagerCreateNodeSPL");
    qword_491A00 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerRemoveNode");
    off_491A08 = dlsym(v1, "AudioDataAnalysisManagerInitialize");
    qword_491A10 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerIsSessionInitialized");
    qword_491A18 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerProcessAudio");
    off_491A20 = (uint64_t (*)(void, void, void, float, float, float, float, float))dlsym(v1, "AudioDataAnalysisManagerProcessSPL");
    qword_491A28 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerCreateNodeEnvSPL");
    qword_491A30 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerCreateNodeEnvSoundClass");
    qword_491A38 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerProcessEnvSPL");
    qword_491A40 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerProcessEnvSoundClass");
    off_491A48 = dlsym(v1, "AudioDataAnalysisManagerSetDeviceInfo");
    qword_491A50 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerRegisterDeviceInfo");
    qword_491A58 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerSetDeviceConnectionState");
    off_491A60 = dlsym(v1, "AudioDataAnalysisManagerStartServices");
    off_491A68 = dlsym(v1, "AudioDataAnalysisManagerConnectedWiredDeviceIsHeadphone");
    qword_491A70 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerSetApplicationBundleID");
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    uint64_t v2 = dlerror();
    int v3 = 136315138;
    char v4 = v2;
    _os_log_error_impl( &dword_0,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "dlerror : libAudioIssueDetector ADAM: %s",  (uint8_t *)&v3,  0xCu);
  }

uint64_t sub_19DDF0(int a1)
{
  if (a1 == 5) {
    return 0LL;
  }
  if (a1 != 6)
  {
    uint64_t v3 = sub_138E8(13);
    id v4 = sub_8C7D4(1, *(void **)v3, *(void *)(v3 + 8));
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    uint64_t v6 = v5;
    if (v5)
    {
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        int v8 = 136315650;
        float v9 = "CPMSInterface.mm";
        __int16 v10 = 1024;
        int v11 = 133;
        __int16 v12 = 1024;
        int v13 = a1;
        _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unrecognized CPMS Client Qualifier data sent with kVirtualAudioDev icePropertyThermalBudgetRange: %u",  (uint8_t *)&v8,  0x18u);
      }
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error( exception,  "Unrecognized CPMS Client Qualifier data sent with kVirtualAudioDevicePropertyThermalBudgetRange: %u");
  }

  return 1LL;
}

void sub_19DF18(_Unwind_Exception *a1)
{
}

uint64_t *sub_19DF34(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t result = sub_845D8((uint64_t)a1, &v9, a2);
  if (!*result)
  {
    uint64_t v6 = (uint64_t **)result;
    uint64_t v7 = (char *)operator new(0x40uLL);
    int v8 = v7 + 32;
    if (*(char *)(a3 + 23) < 0)
    {
      sub_24054(v8, *(void **)a3, *(void *)(a3 + 8));
    }

    else
    {
      *(_OWORD *)int v8 = *(_OWORD *)a3;
      *((void *)v7 + 6) = *(void *)(a3 + 16);
    }

    *((_DWORD *)v7 + 14) = *(_DWORD *)(a3 + 24);
    return sub_32C38(a1, v9, v6, (uint64_t *)v7);
  }

  return result;
}

void sub_19DFDC(_Unwind_Exception *a1)
{
}

void sub_19DFF4(uint64_t a1, const void **a2, int a3, uint64_t a4, _DWORD *a5)
{
  __int16 v10 = (std::mutex *)(a1 + 344);
  std::mutex::lock((std::mutex *)(a1 + 344));
  if (!*a2)
  {
    uint64_t v20 = sub_138E8(13);
    id v21 = sub_8C7D4(1, *(void **)v20, *(void *)(v20 + 8));
    char v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    __int16 v23 = v22;
    if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 136315394;
      *(void **)((char *)__p + 4) = "CPMSInterface.mm";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 191;
      _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Initialized dictionary from CPMS is null!",  (uint8_t *)__p,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Initialized dictionary from CPMS is null!");
    goto LABEL_16;
  }

  sub_19E2D0((uint64_t)__p, *a2);
  uint64_t v11 = a4 + 8;
  sub_88C08(*(char **)(a4 + 8));
  __int16 v12 = (char *)__p[1];
  *(void **)a4 = __p[0];
  *(void *)(a4 + 8) = v12;
  int v13 = __p[2];
  *(void **)(a4 + 16) = __p[2];
  if (v13)
  {
    *((void *)v12 + 2) = v11;
    __p[0] = &__p[1];
    __p[1] = 0LL;
    __p[2] = 0LL;
    __int16 v12 = 0LL;
  }

  else
  {
    *(void *)a4 = v11;
  }

  sub_88C08(v12);
  uint64_t v14 = *(const __CFString ***)(a1 + 248);
  __int16 v15 = *(const __CFString ***)(a1 + 256);
  if (v14 != v15)
  {
    while (*v14)
    {
      sub_48100((uint64_t)v24, *v14);
      *(_OWORD *)__int128 __p = *(_OWORD *)v24;
      __p[2] = v25;
      v24[1] = 0LL;
      uint64_t v25 = 0LL;
      v24[0] = 0LL;
      int v28 = 100000;
      uint64_t v16 = (uint64_t **)sub_845D8(a4, &v26, __p);
      if (!*v16)
      {
        __int16 v17 = v16;
        int v18 = (void **)operator new(0x40uLL);
        *((_OWORD *)v18 + 2) = *(_OWORD *)__p;
        v18[6] = __p[2];
        memset(__p, 0, sizeof(__p));
        *((_DWORD *)v18 + 14) = 100000;
        sub_32C38((uint64_t **)a4, v26, v17, (uint64_t *)v18);
      }

      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v25) < 0) {
        operator delete(v24[0]);
      }
      if (++v14 == v15) {
        goto LABEL_14;
      }
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_16:
  }

void sub_19E26C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
}

void sub_19E2D0(uint64_t a1, const void *a2)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(a2))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_7D078(exception);
  }

  CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)a2);
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  sub_7E328(keys, Count);
  sub_7E328(values, Count);
  CFDictionaryGetKeysAndValues((CFDictionaryRef)a2, (const void **)keys[0], (const void **)values[0]);
  if (Count)
  {
    for (uint64_t i = 0LL; i != Count; ++i)
    {
      sub_48100((uint64_t)v13, (const __CFString *)keys[0][i]);
      int v7 = sub_A12A8((const __CFNumber *)values[0][i]);
      *(_OWORD *)__int128 __p = *(_OWORD *)v13;
      uint64_t v16 = v14;
      v13[1] = 0LL;
      uint64_t v14 = 0LL;
      v13[0] = 0LL;
      int v17 = v7;
      int v8 = (uint64_t **)sub_845D8(a1, &v20, __p);
      if (!*v8)
      {
        uint64_t v9 = v8;
        __int16 v10 = (char *)operator new(0x40uLL);
        uint64_t v11 = v10 + 32;
        if (SHIBYTE(v16) < 0)
        {
          sub_24054(v11, __p[0], (unint64_t)__p[1]);
          int v7 = v17;
        }

        else
        {
          *(_OWORD *)uint64_t v11 = *(_OWORD *)__p;
          *((void *)v10 + 6) = v16;
        }

        *((_DWORD *)v10 + 14) = v7;
        sub_32C38((uint64_t **)a1, v20, v9, (uint64_t *)v10);
      }

      if (SHIBYTE(v16) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v14) < 0) {
        operator delete(v13[0]);
      }
    }
  }

  if (values[0])
  {
    values[1] = values[0];
    operator delete(values[0]);
  }

  if (keys[0])
  {
    keys[1] = keys[0];
    operator delete(keys[0]);
  }

void sub_19E490( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, void *__p, uint64_t a25, uint64_t a26, void *a27, uint64_t a28)
{
}

const void **sub_19E52C(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_19E55C(uint64_t a1, CFDictionaryRef *a2)
{
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_7E414(exception);
  }

  CFIndex Count = CFDictionaryGetCount(*a2);
  uint64_t v6 = *(void *)(a1 + 248);
  uint64_t v5 = *(void *)(a1 + 256);
  int v7 = *a2;
  if (!*a2)
  {
    *(void *)AudioObjectPropertyAddress buf = 0LL;
    if (v6 != v5)
    {
      char v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v22, "Could not construct");
    }

    goto LABEL_21;
  }

  unint64_t v8 = Count;
  CFRetain(*a2);
  if (v6 == v5)
  {
    BOOL v11 = 0;
  }

  else
  {
    uint64_t v9 = v6 + 8;
    do
    {
      __int16 v10 = *(const void **)(v9 - 8);
      if (v10)
      {
        BOOL v11 = CFDictionaryContainsKey(v7, v10) != 0;
        if (v11) {
          break;
        }
      }

      else
      {
        BOOL v11 = 0;
      }

      BOOL v12 = v9 == v5;
      v9 += 8LL;
    }

    while (!v12);
  }

  CFRelease(v7);
  if (v8) {
    BOOL v13 = v11;
  }
  else {
    BOOL v13 = 0;
  }
  if (!v13 || v8 >= 5)
  {
LABEL_21:
    uint64_t v15 = sub_138E8(13);
    id v16 = sub_8C7D4(1, *(void **)v15, *(void *)(v15 + 8));
    int v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    int v18 = v17;
    if (v17)
    {
      __int16 v19 = v17;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        sub_19E824((uint64_t)__p, *a2);
        if (v24 >= 0) {
          uint64_t v20 = __p;
        }
        else {
          uint64_t v20 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "CPMSInterface.mm";
        __int16 v26 = 1024;
        int v27 = 212;
        __int16 v28 = 1024;
        int v29 = 0;
        __int16 v30 = 2080;
        char v31 = v20;
        _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Given CPMS dictionary was not valid. Returning %u for the dictionary: %s",  buf,  0x22u);
        if (v24 < 0) {
          operator delete(__p[0]);
        }
      }
    }

    id v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v21, "Given CPMS dictionary was not valid. Returning %u for the dictionary: %s");
  }

void sub_19E7B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_19E824(uint64_t a1, CFTypeRef cf)
{
  uint64_t v3 = CFCopyDescription(cf);
  sub_48188(a1, v3);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_19E868(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E884(uint64_t a1, CFDictionaryRef *a2, int a3, uint64_t **a4, _DWORD *a5)
{
  __int16 v10 = (std::mutex *)(a1 + 344);
  std::mutex::lock((std::mutex *)(a1 + 344));
  BOOL v11 = *(CFTypeRef **)(a1 + 248);
  for (uint64_t i = *(CFTypeRef **)(a1 + 256); v11 != i; ++v11)
  {
    BOOL v13 = (const __CFString *)*v11;
    if (*v11)
    {
      CFRetain(*v11);
      id v21 = v13;
      if (!*a2) {
        goto LABEL_13;
      }
      if (CFDictionaryContainsKey(*a2, v13))
      {
        if (!*a2)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
        }

        Value = (const __CFNumber *)CFDictionaryGetValue(*a2, v13);
        if (!Value)
        {
          int v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v18, "Could not find item");
        }

        int v15 = sub_A12A8(Value);
        sub_48100((uint64_t)__p, v13);
        char v22 = __p;
        *((_DWORD *)sub_19EAA4(a4, __p, (__int128 **)&v22) + 14) = v15;
        if (v20 < 0) {
          operator delete(__p[0]);
        }
      }

      CFRelease(v13);
    }

    else
    {
      id v21 = 0LL;
      if (!*a2)
      {
LABEL_13:
        id v16 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v16, "Could not construct");
      }
    }
  }

  *a5 = a3;
  std::mutex::unlock(v10);
}

void sub_19EA38( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, const void *a16)
{
}

char *sub_19EAA4(uint64_t **a1, void **a2, __int128 **a3)
{
  uint64_t v5 = (void **)sub_845D8((uint64_t)a1, &v12, a2);
  uint64_t v6 = (char *)*v5;
  if (!*v5)
  {
    int v7 = (uint64_t **)v5;
    uint64_t v6 = (char *)operator new(0x40uLL);
    unint64_t v8 = v6 + 32;
    uint64_t v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      sub_24054(v8, *(void **)v9, *((void *)v9 + 1));
    }

    else
    {
      __int128 v10 = *v9;
      *((void *)v6 + 6) = *((void *)v9 + 2);
      *(_OWORD *)unint64_t v8 = v10;
    }

    *((_DWORD *)v6 + 14) = 0;
    sub_32C38(a1, v12, v7, (uint64_t *)v6);
  }

  return v6;
}

void sub_19EB40(_Unwind_Exception *a1)
{
}

uint64_t *sub_19EB58(uint64_t **a1, void **a2, __int128 **a3)
{
  uint64_t v5 = (uint64_t **)sub_845D8((uint64_t)a1, &v14, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    int v7 = v5;
    uint64_t v6 = (uint64_t *)operator new(0x50uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    char v13 = 0;
    unint64_t v8 = v6 + 4;
    uint64_t v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      sub_24054(v8, *(void **)v9, *((void *)v9 + 1));
    }

    else
    {
      __int128 v10 = *v9;
      v6[6] = *((void *)v9 + 2);
      *(_OWORD *)unint64_t v8 = v10;
    }

    v6[7] = 0LL;
    v6[8] = 0LL;
    v6[9] = 0LL;
    char v13 = 1;
    sub_32C38(a1, v14, v7, v6);
    v12[0] = 0LL;
    sub_1576A8((uint64_t)v12);
  }

  return v6;
}

void sub_19EC20( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_19EC34(uint64_t a1, const __CFString *a2, int a3, float a4)
{
  if (!*(void *)cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  sub_48100((uint64_t)&__s1, *(const __CFString **)cf);
  if (*(void *)cf) {
    CFRelease(*(CFTypeRef *)cf);
  }
  uint64_t v8 = v28;
  if ((v28 & 0x80u) == 0) {
    size_t v9 = v28;
  }
  else {
    size_t v9 = __n;
  }
  uint64_t v10 = *(unsigned __int8 *)(a1 + 295);
  int v11 = (char)v10;
  if ((v10 & 0x80u) != 0LL) {
    uint64_t v10 = *(void *)(a1 + 280);
  }
  if (v9 != v10) {
    goto LABEL_25;
  }
  if (v11 >= 0) {
    uint64_t v12 = (unsigned __int8 *)(a1 + 272);
  }
  else {
    uint64_t v12 = *(unsigned __int8 **)(a1 + 272);
  }
  if ((v28 & 0x80) != 0)
  {
    if (memcmp(__s1, v12, __n)) {
      goto LABEL_25;
    }
    goto LABEL_20;
  }

  if (!v28)
  {
LABEL_20:
    if (a3)
    {
      *(void *)CFNumberRef cf = a1 + 272;
      int v14 = *((_DWORD *)sub_19EAA4((uint64_t **)(a1 + 64), (void **)(a1 + 272), (__int128 **)cf) + 14);
      *(void *)CFNumberRef cf = a1 + 320;
      else {
        int v15 = (const std::string *)(a1 + 272);
      }
      std::string::operator=(&v29, v15);
    }

    goto LABEL_25;
  }

  p_s1 = &__s1;
  while (*(unsigned __int8 *)p_s1 == *v12)
  {
    p_s1 = (void **)((char *)p_s1 + 1);
    ++v12;
    if (!--v8) {
      goto LABEL_20;
    }
  }

void sub_19EF98( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24, const void *a25)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19F01C(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v3 = *a2;
  if (*a2)
  {
    CFRetain(*a2);
    sub_3617C(&cf, v3);
  }

  else
  {
    CFTypeRef cf = 0LL;
  }

  uint64_t v4 = sub_138E8(16);
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
  {
    id v5 = *(id *)v4;
    if (v5)
    {
      uint64_t v6 = (os_log_s *)v5;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        int v7 = CFCopyDescription(cf);
        sub_48188((uint64_t)__p, v7);
        if (v7) {
          CFRelease(v7);
        }
        uint64_t v8 = __p;
        if (v43 < 0) {
          uint64_t v8 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "CPMSInterface.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 293;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = v8;
        _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d CPMS Haptics -- In Reference Dictionary: %s",  buf,  0x1Cu);
        if (v43 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  if (sub_1CBBF8())
  {
    *(void *)AudioObjectPropertyAddress buf = a1 + 296;
    size_t v9 = sub_19EB58((uint64_t **)(a1 + 96), (void **)(a1 + 296), (__int128 **)buf);
    if (cf)
    {
      uint64_t v10 = (int *)v9[7];
      int v11 = *v10;
      int v12 = v10[1];
      char v13 = (const __CFNumber *)sub_A15A4((const __CFDictionary *)cf, (const void *)qword_48F6C8);
      if (v13)
      {
        int v14 = sub_A12A8(v13);
        int v15 = v14;
        int v16 = v14 - v11;
        if (v14 < v11 || v14 > v12)
        {
          uint64_t v34 = sub_138E8(13);
          id v35 = sub_8C7D4(1, *(void **)v34, *(void *)(v34 + 8));
          unsigned int v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
          __int16 v37 = v36;
          if (v36 && os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "CPMSInterface.mm";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 244;
            _os_log_impl( &dword_0,  v37,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): SInt32 inRefernceValue is outside of the supported range!",  buf,  0x12u);
          }

          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "SInt32 inRefernceValue is outside of the supported range!");
          goto LABEL_43;
        }

        id v17 = (os_log_s *)*(id *)sub_138E8(16);
        int v18 = v17;
        if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "CPMSInterface.mm";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 245;
          *(_WORD *)&_BYTE buf[18] = 1024;
          *(_DWORD *)&buf[20] = v15;
          _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d CPMS Switch Haptics -- In Battery Referenced Value: %u ",  buf,  0x18u);
        }

        if (v12 == v11)
        {
          uint64_t v38 = sub_138E8(13);
          id v39 = sub_8C7D4(1, *(void **)v38, *(void *)(v38 + 8));
          __int16 v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
          __int128 v41 = v40;
          if (v40 && os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "CPMSInterface.mm";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 254;
            _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
          }

          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error((std::logic_error *)exception, "Precondition failure.");
          __int16 v31 = (void (*)(void *))&std::logic_error::~logic_error;
LABEL_44:
          __cxa_throw(exception, v32, v31);
        }

        goto LABEL_30;
      }

      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not find item");
    }

    else
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }

void sub_19F5F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12)
{
}

void sub_19F680(uint64_t a1)
{
  *(float *)(a1 + 240) = sub_19F870(a1, (const __CFString *)qword_48F6C0);
  float v2 = sub_19F870(a1, (const __CFString *)qword_48F6C8);
  *(float *)(a1 + 244) = v2;
  if (*(float *)(a1 + 240) == 0.0 || v2 == 0.0)
  {
    uint64_t v7 = sub_138E8(13);
    id v8 = sub_8C7D4(1, *(void **)v7, *(void *)(v7 + 8));
    size_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    uint64_t v10 = v9;
    if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      char v13 = "CPMSInterface.mm";
      __int16 v14 = 1024;
      int v15 = 491;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): CPMS Continuous Power for Actuator -- An Efficiency Factor is zero!",  (uint8_t *)&v12,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CPMS Continuous Power for Actuator -- An Efficiency Factor is zero!");
  }

  CFTypeRef v3 = (os_log_s *)*(id *)sub_138E8(16);
  uint64_t v4 = v3;
  if (v3 && os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    double v5 = *(float *)(a1 + 240);
    double v6 = *(float *)(a1 + 244);
    int v12 = 136315906;
    char v13 = "CPMSInterface.mm";
    __int16 v14 = 1024;
    int v15 = 493;
    __int16 v16 = 2048;
    double v17 = v5;
    __int16 v18 = 2048;
    double v19 = v6;
    _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d CPMS Continuous Power for Actuator -- Efficincy Factors: mHapticsEfficiencyFactor100ms %4.3f ; mHapticsE"
      "fficiencyFactorInstantaneous %4.3f",
      (uint8_t *)&v12,
      0x26u);
  }
}

void sub_19F854(_Unwind_Exception *a1)
{
}

float sub_19F870(uint64_t a1, const __CFString *a2)
{
  *(void *)AudioObjectPropertyAddress buf = __p;
  CFTypeRef v3 = sub_19EB58((uint64_t **)(a1 + 96), __p, (__int128 **)buf);
  double v5 = (_BYTE *)v3[7];
  uint64_t v4 = (_BYTE *)v3[8];
  int64_t v6 = v4 - v5;
  if (v4 == v5) {
    goto LABEL_20;
  }
  if (v6 < 0) {
    sub_7A87C();
  }
  uint64_t v7 = sub_7A890(v6 >> 2);
  memmove(v7, v5, v6);
  if (!(4 * (v6 >> 2)))
  {
LABEL_20:
    uint64_t v21 = sub_138E8(13);
    id v22 = sub_8C7D4(1, *(void **)v21, *(void *)(v21 + 8));
    __int16 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    char v24 = v23;
    if (v23 && os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      char v25 = __p;
      if (v28 < 0) {
        char v25 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "CPMSInterface.mm";
      __int16 v30 = 1024;
      int v31 = 467;
      __int16 v32 = 2080;
      double v33 = *(double *)&v25;
      _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): CPMS reference budget for timescale '%s' via Embedded Device Tree is Null!",  buf,  0x1Cu);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error( exception,  "CPMS reference budget for timescale '%s' via Embedded Device Tree is Null!");
  }

  int v8 = v7[1];
  uint64_t v9 = *(void *)(a1 + 120);
  if (v9 == *(void *)(a1 + 128))
  {
    int v11 = (uint64_t **)(a1 + 168);
    int v12 = (void **)sub_845D8((uint64_t)v11, buf, __p);
    char v13 = (char *)*v12;
    if (!*v12)
    {
      __int16 v14 = (uint64_t **)v12;
      char v13 = (char *)operator new(0x40uLL);
      int v15 = v13 + 32;
      if (SHIBYTE(v28) < 0)
      {
        sub_24054(v15, __p[0], (unint64_t)__p[1]);
      }

      else
      {
        *(_OWORD *)int v15 = *(_OWORD *)__p;
        *((void *)v13 + 6) = v28;
      }

      *((void *)v13 + 7) = 0LL;
      sub_32C38(v11, *(uint64_t *)buf, v14, (uint64_t *)v13);
    }

    float v10 = (float)*((unsigned int *)v13 + 15);
  }

  else
  {
    float v10 = (float)*(int *)(v9 + 4);
  }

  float v16 = (float)v8;
  double v17 = (os_log_s *)*(id *)sub_138E8(13);
  __int16 v18 = v17;
  if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    double v19 = __p;
    if (v28 < 0) {
      double v19 = (void **)__p[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
    *(void *)&uint8_t buf[4] = "CPMSInterface.mm";
    __int16 v30 = 1024;
    int v31 = 481;
    __int16 v32 = 2048;
    double v33 = v16;
    __int16 v34 = 2080;
    id v35 = v19;
    __int16 v36 = 2048;
    double v37 = v10;
    _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d maxReferenceVal: %4.3f || maxNominalValue from '%s' == %4.3f",  buf,  0x30u);
  }

  operator delete(v7);
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[0]);
  }
  return v10 / v16;
}

void sub_19FB70( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_19FBE0(void *a1, int a2, int a3)
{
  uint64_t v7 = (char *)a1[16];
  unint64_t v6 = a1[17];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (_BYTE *)a1[15];
    uint64_t v10 = (v7 - v9) >> 2;
    unint64_t v11 = v10 + 1;
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 1 > v11) {
      unint64_t v11 = v12 >> 1;
    }
    BOOL v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v11;
    }
    if (v14)
    {
      unint64_t v14 = (unint64_t)sub_7A890(v14);
      uint64_t v9 = (_BYTE *)a1[15];
      uint64_t v7 = (char *)a1[16];
    }

    else
    {
      uint64_t v15 = 0LL;
    }

    float v16 = (_DWORD *)(v14 + 4 * v10);
    unint64_t v6 = v14 + 4 * v15;
    _DWORD *v16 = a2;
    int v8 = (char *)(v16 + 1);
    while (v7 != v9)
    {
      int v17 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *--float v16 = v17;
    }

    a1[15] = v16;
    a1[16] = v8;
    a1[17] = v6;
    if (v9)
    {
      operator delete(v9);
      unint64_t v6 = a1[17];
    }
  }

  else
  {
    *(_DWORD *)uint64_t v7 = a2;
    int v8 = v7 + 4;
  }

  a1[16] = v8;
  if ((unint64_t)v8 < v6)
  {
    *(_DWORD *)int v8 = a3;
    __int16 v18 = v8 + 4;
    goto LABEL_31;
  }

  double v19 = (char *)a1[15];
  uint64_t v20 = (v8 - v19) >> 2;
  unint64_t v21 = v20 + 1;
  if ((unint64_t)(v20 + 1) >> 62) {
LABEL_35:
  }
    sub_7A87C();
  uint64_t v22 = v6 - (void)v19;
  if (v22 >> 1 > v21) {
    unint64_t v21 = v22 >> 1;
  }
  BOOL v13 = (unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL;
  unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
  if (!v13) {
    unint64_t v23 = v21;
  }
  if (v23)
  {
    unint64_t v23 = (unint64_t)sub_7A890(v23);
    double v19 = (char *)a1[15];
    int v8 = (char *)a1[16];
  }

  else
  {
    uint64_t v24 = 0LL;
  }

  char v25 = (_DWORD *)(v23 + 4 * v20);
  unint64_t v26 = v23 + 4 * v24;
  *char v25 = a3;
  __int16 v18 = v25 + 1;
  while (v8 != v19)
  {
    int v27 = *((_DWORD *)v8 - 1);
    v8 -= 4;
    *--char v25 = v27;
  }

  a1[15] = v25;
  a1[16] = v18;
  a1[17] = v26;
  if (v19) {
    operator delete(v19);
  }
LABEL_31:
  a1[16] = v18;
  uint64_t v28 = (os_log_s *)*(id *)sub_138E8(16);
  std::string v29 = v28;
  if (v28 && os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v30 = (int *)a1[15];
    int v31 = *v30;
    LODWORD(v30) = v30[1];
    int v32 = 136315906;
    double v33 = "CPMSInterface.mm";
    __int16 v34 = 1024;
    int v35 = 317;
    __int16 v36 = 1024;
    int v37 = v31;
    __int16 v38 = 1024;
    int v39 = (int)v30;
    _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d CPMS -- Nominal Budget returned from AEA: min '%u' ; max '%u'",
      (uint8_t *)&v32,
      0x1Eu);
  }
}

char *sub_19FE20(uint64_t a1, char *a2, const __CFString *a3, float a4)
{
  if (a4 == 0.0)
  {
    uint64_t v12 = sub_138E8(13);
    id v13 = sub_8C7D4(1, *(void **)v12, *(void *)(v12 + 8));
    unint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    uint64_t v15 = v14;
    if (v14 && os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int v17 = 136315394;
      *(void *)&v17[4] = "CPMSInterface.mm";
      __int16 v18 = 1024;
      int v19 = 341;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): CPMS Continuous Haptics -- EfficiencyFactor is zero! Sending a zero value to AHS!",  v17,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error( exception,  "CPMS Continuous Haptics -- EfficiencyFactor is zero! Sending a zero value to AHS!");
  }

  int v6 = sub_19EC34(a1, a3, 1, a4);
  uint64_t v7 = sub_138E8(16);
  if ((*(_BYTE *)(v7 + 8) & 1) != 0)
  {
    int v8 = (os_log_s *)*(id *)v7;
    if (v8)
    {
      uint64_t v9 = v8;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v10 = a2;
        if (a2[23] < 0) {
          uint64_t v10 = *(char **)a2;
        }
        *(_DWORD *)int v17 = 136315906;
        *(void *)&v17[4] = "CPMSInterface.mm";
        __int16 v18 = 1024;
        int v19 = 343;
        __int16 v20 = 2080;
        unint64_t v21 = v10;
        __int16 v22 = 1024;
        int v23 = v6;
        _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d CPMS Continuous Haptics -- Updated %s mwValue %u",  v17,  0x22u);
      }
    }
  }

  *(void *)int v17 = a2;
  uint64_t result = sub_AC098((uint64_t **)(a1 + 144), (void **)a2, (__int128 **)v17);
  *((_DWORD *)result + 14) = v6;
  return result;
}

void sub_1A0000(_Unwind_Exception *a1)
{
}

uint64_t sub_1A001C(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v2 = *a2;
  if (!*a2)
  {
    CFDictionaryRef theDict = 0LL;
LABEL_38:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  CFRetain(*a2);
  sub_3617C(&theDict, v2);
  if (!theDict) {
    goto LABEL_38;
  }
  int Count = CFDictionaryGetCount(theDict);
  id v5 = *(id *)sub_138E8(16);
  int v6 = v5;
  if (v5)
  {
    uint64_t v7 = (os_log_s *)v5;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = CFCopyDescription(theDict);
      sub_48188((uint64_t)__p, v8);
      if (v8) {
        CFRelease(v8);
      }
      uint64_t v9 = __p;
      if (v29 < 0) {
        uint64_t v9 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "CPMSInterface.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 366;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v9;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d CPMS Haptics -- In Reference Dictionary: %s",  buf,  0x1Cu);
      if (SHIBYTE(v29) < 0) {
        operator delete(__p[0]);
      }
    }
  }

  sub_19E55C(a1, &theDict);
  uint64_t v10 = (_DWORD *)(a1 + 88);
  unint64_t v11 = (uint64_t **)(a1 + 64);
  if (*(_DWORD *)(a1 + 88)) {
    sub_19E884(a1, &theDict, Count, v11, v10);
  }
  else {
    sub_19DFF4(a1, (const void **)&theDict, Count, (uint64_t)v11, v10);
  }
  uint64_t v12 = (_OWORD *)(a1 + 192);
  if (*(char *)(a1 + 215) < 0)
  {
    sub_24054(buf, *(void **)(a1 + 192), *(void *)(a1 + 200));
  }

  else
  {
    *(_OWORD *)AudioObjectPropertyAddress buf = *v12;
    *(void *)&buf[16] = *(void *)(a1 + 208);
  }

  sub_19FE20(a1, buf, (const __CFString *)qword_48F6C0, *(float *)(a1 + 240));
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  id v13 = (_OWORD *)(a1 + 216);
  if (*(char *)(a1 + 239) < 0)
  {
    sub_24054(__p, *(void **)(a1 + 216), *(void *)(a1 + 224));
  }

  else
  {
    *(_OWORD *)__int128 __p = *v13;
    uint64_t v29 = *(void *)(a1 + 232);
  }

  sub_19FE20(a1, (char *)__p, (const __CFString *)qword_48F6C8, *(float *)(a1 + 244));
  if (SHIBYTE(v29) < 0) {
    operator delete(__p[0]);
  }
  *(void *)AudioObjectPropertyAddress buf = a1 + 192;
  unint64_t v14 = sub_AC098((uint64_t **)(a1 + 144), (void **)(a1 + 192), (__int128 **)buf);
  *(void *)AudioObjectPropertyAddress buf = a1 + 216;
  uint64_t v15 = sub_AC098((uint64_t **)(a1 + 144), (void **)(a1 + 216), (__int128 **)buf);
  uint64_t v16 = *((unsigned int *)v14 + 14);
  if (!(_DWORD)v16 || (uint64_t v17 = *((unsigned int *)v15 + 14), !(_DWORD)v17))
  {
    uint64_t v22 = sub_138E8(13);
    id v23 = sub_8C7D4(1, *(void **)v22, *(void *)(v22 + 8));
    uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    char v25 = v24;
    if (v24 && os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "CPMSInterface.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 332;
      _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): mCalculatedAPC2Power not initialized; Sending a zero value to AHS!",
        buf,
        0x12u);
    }

    unint64_t v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v26, "mCalculatedAPC2Power not initialized; Sending a zero value to AHS!");
  }

  __int16 v18 = (os_log_s *)*(id *)sub_138E8(16);
  int v19 = v18;
  if (v18 && os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
    *(void *)&uint8_t buf[4] = "CPMSInterface.mm";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 333;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&buf[20] = v12;
    __int16 v31 = 1024;
    int v32 = v16;
    __int16 v33 = 2080;
    __int16 v34 = v13;
    __int16 v35 = 1024;
    int v36 = v17;
    _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d CPMS Continuous Haptics -- Out APC2 Values { %s : %u }, { %s : %u }",  buf,  0x32u);
  }

  if (theDict) {
    CFRelease(theDict);
  }
  return v16 | (v17 << 32);
}

void sub_1A0454( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, __int16 a11, char a12, char a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
}

void sub_1A04FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (uint64_t **)(a1 + 168);
  if (*(char *)(a1 + 295) < 0)
  {
    sub_24054(__p, *(void **)(a1 + 272), *(void *)(a1 + 280));
  }

  else
  {
    *(_OWORD *)__int128 __p = *(_OWORD *)(a1 + 272);
    uint64_t v8 = *(void *)(a1 + 288);
  }

  uint64_t v9 = a2;
  sub_1A05FC(v6, __p, (uint64_t)__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  if (*(char *)(a1 + 319) < 0)
  {
    sub_24054(__p, *(void **)(a1 + 296), *(void *)(a1 + 304));
  }

  else
  {
    *(_OWORD *)__int128 __p = *(_OWORD *)(a1 + 296);
    uint64_t v8 = *(void *)(a1 + 312);
  }

  uint64_t v9 = a3;
  sub_1A05FC(v6, __p, (uint64_t)__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  sub_19F680(a1);
}

void sub_1A05DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1A05FC(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t result = sub_845D8((uint64_t)a1, &v9, a2);
  if (!*result)
  {
    int v6 = (uint64_t **)result;
    uint64_t v7 = (uint64_t *)operator new(0x40uLL);
    uint64_t v8 = v7 + 4;
    if (*(char *)(a3 + 23) < 0)
    {
      sub_24054(v8, *(void **)a3, *(void *)(a3 + 8));
    }

    else
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)a3;
      v7[6] = *(void *)(a3 + 16);
    }

    v7[7] = *(void *)(a3 + 24);
    return sub_32C38(a1, v9, v6, v7);
  }

  return result;
}

void sub_1A06A4(_Unwind_Exception *a1)
{
}

void sub_1A06BC(uint64_t a1, uint64_t a2, int a3)
{
  int v6 = (std::mutex *)(a2 + 344);
  std::mutex::lock((std::mutex *)(a2 + 344));
  CFTypeRef cf = 0LL;
  if (!a3)
  {
    memset(buf, 0, 24);
    sub_7DCF4(buf, *(void *)(a2 + 16));
    id v13 = *(void **)a2;
    if (*(void *)a2 != a2 + 8)
    {
      do
      {
        sub_1A0B3C(buf, (const UInt8 *)v13 + 32, (int *)v13 + 14);
        unint64_t v14 = (void *)v13[1];
        if (v14)
        {
          do
          {
            uint64_t v15 = v14;
            unint64_t v14 = (void *)*v14;
          }

          while (v14);
        }

        else
        {
          do
          {
            uint64_t v15 = (void *)v13[2];
            BOOL v10 = *v15 == (void)v13;
            id v13 = v15;
          }

          while (!v10);
        }

        id v13 = v15;
      }

      while (v15 != (void *)(a2 + 8));
    }

    CFDictionaryRef v11 = sub_7C1F4((void ***)buf);
    v28[0] = buf;
    sub_7CFCC((void ***)v28);
    CFTypeRef v12 = cf;
    CFTypeRef cf = v11;
    if (!v12) {
      goto LABEL_32;
    }
LABEL_30:
    CFRelease(v12);
    goto LABEL_32;
  }

  if (a3 == 1)
  {
    memset(buf, 0, 24);
    sub_7DCF4(buf, *(void *)(a2 + 80));
    uint64_t v16 = *(void **)(a2 + 64);
    if (v16 != (void *)(a2 + 72))
    {
      do
      {
        sub_1A0B3C(buf, (const UInt8 *)v16 + 32, (int *)v16 + 14);
        uint64_t v17 = (void *)v16[1];
        if (v17)
        {
          do
          {
            __int16 v18 = v17;
            uint64_t v17 = (void *)*v17;
          }

          while (v17);
        }

        else
        {
          do
          {
            __int16 v18 = (void *)v16[2];
            BOOL v10 = *v18 == (void)v16;
            uint64_t v16 = v18;
          }

          while (!v10);
        }

        uint64_t v16 = v18;
      }

      while (v18 != (void *)(a2 + 72));
    }

    CFDictionaryRef v11 = sub_7C1F4((void ***)buf);
    v28[0] = buf;
    sub_7CFCC((void ***)v28);
    CFTypeRef v12 = cf;
    CFTypeRef cf = v11;
    if (!v12) {
      goto LABEL_32;
    }
    goto LABEL_30;
  }

  if (a3 != 2)
  {
    CFDictionaryRef v11 = 0LL;
    goto LABEL_32;
  }

  memset(buf, 0, 24);
  sub_7DCF4(buf, *(void *)(a2 + 48));
  uint64_t v7 = *(void **)(a2 + 32);
  if (v7 != (void *)(a2 + 40))
  {
    do
    {
      sub_1A0B3C(buf, (const UInt8 *)v7 + 32, (int *)v7 + 14);
      uint64_t v8 = (void *)v7[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = (void *)*v8;
        }

        while (v8);
      }

      else
      {
        do
        {
          uint64_t v9 = (void *)v7[2];
          BOOL v10 = *v9 == (void)v7;
          uint64_t v7 = v9;
        }

        while (!v10);
      }

      uint64_t v7 = v9;
    }

    while (v9 != (void *)(a2 + 40));
  }

  CFDictionaryRef v11 = sub_7C1F4((void ***)buf);
  v28[0] = buf;
  sub_7CFCC((void ***)v28);
  CFTypeRef v12 = cf;
  CFTypeRef cf = v11;
  if (v12) {
    goto LABEL_30;
  }
LABEL_32:
  uint64_t v19 = sub_138E8(13);
  if ((*(_BYTE *)(v19 + 8) & 1) != 0)
  {
    id v20 = *(id *)v19;
    if (v20)
    {
      unint64_t v21 = (os_log_s *)v20;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        sub_7D084(v28, off_473F08[a3]);
        if (v29 >= 0) {
          uint64_t v22 = v28;
        }
        else {
          uint64_t v22 = (void **)v28[0];
        }
        id v23 = CFCopyDescription(v11);
        sub_48188((uint64_t)__p, v23);
        if (v23) {
          CFRelease(v23);
        }
        uint64_t v24 = __p;
        if (v27 < 0) {
          uint64_t v24 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "CPMSInterface.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 455;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = v22;
        __int16 v32 = 2080;
        __int16 v33 = v24;
        _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Fetching cached CPMS speaker dictionary from %s: %s",  buf,  0x26u);
        if (v27 < 0) {
          operator delete(__p[0]);
        }
        if (v29 < 0) {
          operator delete(v28[0]);
        }
      }
    }
  }

  if (a3) {
    uint64_t v25 = 56LL;
  }
  else {
    uint64_t v25 = 24LL;
  }
  if (v11)
  {
    CFRetain(v11);
    *(void *)a1 = v11;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + v25);
    CFRelease(v11);
  }

  else
  {
    *(void *)a1 = 0LL;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + v25);
  }

  std::mutex::unlock(v6);
}

void sub_1A0A88( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, int a20, __int16 a21, char a22, char a23)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1A0B3C(void *a1, const UInt8 *a2, int *a3)
{
  int v6 = a1 + 2;
  unint64_t v7 = a1[2];
  unint64_t v8 = a1[1];
  if (v8 >= v7)
  {
    uint64_t v11 = (uint64_t)(v8 - *a1) >> 4;
    uint64_t v12 = v7 - *a1;
    uint64_t v13 = v12 >> 3;
    else {
      unint64_t v14 = v13;
    }
    id v20 = v6;
    if (v14) {
      unint64_t v14 = (unint64_t)sub_7BE90(v14);
    }
    else {
      uint64_t v15 = 0LL;
    }
    unint64_t v16 = v14;
    uint64_t v17 = (CFStringRef *)(v14 + 16 * v11);
    unint64_t v19 = v14 + 16 * v15;
    sub_1A0C58(v17, a2, a3);
    __int16 v18 = v17 + 2;
    sub_7DFF0(a1, &v16);
    unint64_t v10 = a1[1];
    uint64_t result = sub_7BEC4((uint64_t)&v16);
  }

  else
  {
    uint64_t result = (uint64_t)sub_1A0C58((CFStringRef *)a1[1], a2, a3);
    unint64_t v10 = v8 + 16;
    a1[1] = v8 + 16;
  }

  a1[1] = v10;
  return result;
}

void sub_1A0C38(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

CFStringRef *sub_1A0C58(CFStringRef *a1, const UInt8 *a2, int *a3)
{
  CFIndex v5 = *((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    CFIndex v6 = a2[23];
  }

  else
  {
    a2 = *(const UInt8 **)a2;
    CFIndex v6 = v5;
  }

  CFStringRef v7 = CFStringCreateWithBytes(0LL, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  int valuePtr = *a3;
  CFNumberRef v8 = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
  a1[1] = (CFStringRef)v8;
  if (!v8)
  {
    uint64_t v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v11, "Could not construct");
  }

  return a1;
}

void sub_1A0D48(_Unwind_Exception *a1)
{
  CFTypeRef v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_7DCC4((const void **)v1);
  _Unwind_Resume(a1);
}

CFArrayRef sub_1A0DAC(CFArrayRef *a1, unsigned int a2, void *a3)
{
  uint64_t result = *a1;
  if (result)
  {
    if (CFArrayGetCount(result) <= a2)
    {
      return 0LL;
    }

    else
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*a1, a2);
      *a3 = ValueAtIndex;
      return (const __CFArray *)(ValueAtIndex != 0LL);
    }
  }

  return result;
}

uint64_t sub_1A0E0C(CFArrayRef *a1, unsigned int a2, void *a3)
{
  CFTypeRef cf = 0LL;
  unsigned int v4 = sub_1A0DAC(a1, a2, &cf);
  uint64_t result = 0LL;
  if (v4)
  {
    CFIndex v6 = (const __CFNumber *)cf;
    if (cf)
    {
      CFTypeID v7 = CFGetTypeID(cf);
      if (v7 == CFNumberGetTypeID())
      {
        CFNumberGetValue(v6, kCFNumberSInt32Type, a3);
        return 1LL;
      }

      else
      {
        return 0LL;
      }
    }
  }

  return result;
}

CFTypeID sub_1A0E8C(CFArrayRef *a1, unsigned int a2, void *a3)
{
  CFTypeRef cf = 0LL;
  CFTypeID result = (CFTypeID)sub_1A0DAC(a1, a2, &cf);
  if ((_DWORD)result)
  {
    CFIndex v5 = (const __CFNumber *)cf;
    if (cf)
    {
      CFTypeID v6 = CFGetTypeID(cf);
      CFTypeID result = CFNumberGetTypeID();
      if (v6 == result) {
        return CFNumberGetValue(v5, kCFNumberFloat32Type, a3);
      }
    }
  }

  return result;
}

uint64_t sub_1A0F08(CFArrayRef *a1, unsigned int a2, void *a3)
{
  CFTypeRef cf = 0LL;
  unsigned int v4 = sub_1A0DAC(a1, a2, &cf);
  uint64_t result = 0LL;
  if (v4)
  {
    CFTypeRef v6 = cf;
    if (cf)
    {
      CFTypeID v7 = CFGetTypeID(cf);
      if (v7 == CFDictionaryGetTypeID())
      {
        *a3 = v6;
        return 1LL;
      }

      else
      {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t sub_1A0F84(os_unfair_lock_s *a1)
{
  CFTypeRef v2 = operator new(0x68uLL);
  sub_EC5B8((uint64_t)v2, 0);
  sub_1D5AE0(a1, (uint64_t)v2);
  sub_1D580C((uint64_t)a1, 0, 1751409257LL, (uint64_t)v2);
  CFTypeRef v3 = operator new(0x50uLL);
  sub_EC558((uint64_t)v3);
  sub_1D5AE0(a1, (uint64_t)v3);
  sub_1D55D4((uint64_t *)a1, 0, 1751409257LL, (uint64_t)v3);
  memset(__p, 0, sizeof(__p));
  CFStringRef v4 = CFStringCreateWithCString(0LL, "Haptic Debug Input", 0x600u);
  CFStringRef v14 = v4;
  char v15 = 1;
  CFStringRef v16 = v4;
  char v17 = 1;
  if (v4) {
    CFRetain(v4);
  }
  uint64_t v18 = 0LL;
  char v19 = 1;
  uint64_t v20 = 0LL;
  char v21 = 1;
  memset(v13, 0, sizeof(v13));
  CFIndex v5 = operator new(0x228uLL);
  v5[1] = 0LL;
  v5[2] = 0LL;
  *CFIndex v5 = off_485B80;
  CFStringRef v27 = CFStringCreateWithCString(0LL, "Haptic Debug Input", 0x600u);
  char v28 = 1;
  sub_7D084(&v25, "");
  sub_F9638((uint64_t)(v5 + 3), &qword_48F768, (uint64_t)a1, (uint64_t)__p, (uint64_t)&v16, (uint64_t)&v27, v13, &v25);
  v5[3] = &off_46FD40;
  *((_WORD *)v5 + 272) = 0;
  if (v26 < 0) {
    operator delete((void *)v25);
  }
  sub_19DFC((uint64_t)&v27);
  *(void *)&__int128 v23 = v5 + 3;
  *((void *)&v23 + 1) = v5;
  sub_AFDAC((uint64_t)&v23, v5 + 13, (uint64_t)(v5 + 3));
  __int128 v24 = v23;
  __int128 v23 = 0uLL;
  sub_3711D4((uint64_t)a1, (void ***)&v24);
  CFTypeRef v6 = (std::__shared_weak_count *)*((void *)&v24 + 1);
  if (*((void *)&v24 + 1))
  {
    CFTypeID v7 = (unint64_t *)(*((void *)&v24 + 1) + 8LL);
    do
      unint64_t v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v23 + 1);
  if (*((void *)&v23 + 1))
  {
    unint64_t v10 = (unint64_t *)(*((void *)&v23 + 1) + 8LL);
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  *(void *)&__int128 v25 = v13;
  sub_7A668((void ***)&v25);
  sub_19DFC((uint64_t)&v20);
  sub_19DFC((uint64_t)&v18);
  sub_19DFC((uint64_t)&v16);
  sub_19DFC((uint64_t)&v14);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  return 1LL;
}

void sub_1A1208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_1A12AC(uint64_t a1, unsigned int a2)
{
  if (a2 != 1751409257)
  {
    CFTypeRef v3 = (os_log_t *)sub_138E8(17);
    CFStringRef v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, a2);
      CFIndex v5 = v11 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      uint64_t v13 = "Device_HapticDebug_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 193;
      __int16 v16 = 2080;
      char v17 = v5;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).",  buf,  0x1Cu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }

    CFTypeRef v6 = (os_log_t *)sub_138E8(13);
    CFTypeID v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v13 = "Device_HapticDebug_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 194;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unsupported VirtualAudioPortType.",  buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }

  return 0LL;
}

void sub_1A1458(_Unwind_Exception *a1)
{
}

void sub_1A1474(unsigned int **a1@<X0>, void *a2@<X8>)
{
  CFStringRef v4 = (os_log_t *)sub_138E8(26);
  CFIndex v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
  {
    (*((void (**)(void **__return_ptr, unsigned int **))*a1 + 16))(v76, a1);
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "Device_HapticDebug_Aspen.cpp";
    __int16 v83 = 1024;
    int v84 = 127;
    __int16 v85 = 2112;
    unint64_t v86 = (const char *)v76[0];
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Device is %@", buf, 0x1Cu);
    sub_19DFC((uint64_t)v76);
  }

  unsigned __int8 v6 = atomic_load((unsigned __int8 *)&qword_48E888);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_48E888))
  {
    *(void *)AudioObjectPropertyAddress buf = 0LL;
    _DWORD buf[8] = 0;
    byte_48E870 = 0;
    qword_48E878 = 0LL;
    byte_48E880 = 0;
    sub_19DFC((uint64_t)buf);
    __cxa_guard_release(&qword_48E888);
  }

  if ((byte_48E868 & 1) == 0)
  {
    sub_14BBA4((uint64_t)&__p, @"TDMDebugInputs", 0LL);
    if (__p.__r_.__value_.__s.__data_[0])
    {
      if (__p.__r_.__value_.__l.__size_)
      {
        CFRetain((CFTypeRef)__p.__r_.__value_.__l.__size_);
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }

      else
      {
        std::string::size_type size = 0LL;
      }

      *(void *)AudioObjectPropertyAddress buf = size;
      _DWORD buf[8] = 0;
      sub_6A8C0((uint64_t)&qword_48E878, (uint64_t)buf);
      sub_19DFC((uint64_t)buf);
      byte_48E870 = qword_48E878 != 0;
      if (qword_48E878) {
        goto LABEL_15;
      }
      unint64_t v8 = (os_log_t *)sub_138E8(13);
      uint64_t v9 = *v8;
      if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "RunTimeDefaults.cpp";
        __int16 v83 = 1024;
        int v84 = 1629;
        __int16 v85 = 2080;
        unint64_t v86 = "TDMDebugInputs";
        _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: An invalid string was retrieved for defaults key %s",  buf,  0x1Cu);
      }

      if (byte_48E870)
      {
LABEL_15:
        unint64_t v10 = (os_log_t *)sub_138E8(13);
        char v11 = *v10;
        if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "RunTimeDefaults.cpp";
          __int16 v83 = 1024;
          int v84 = 1631;
          __int16 v85 = 2080;
          unint64_t v86 = "TDMDebugInputs";
          __int16 v87 = 2112;
          uint64_t v88 = qword_48E878;
          _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Defaults key %s was defined as %@",  buf,  0x26u);
        }
      }

      byte_48E868 = 1;
    }

    sub_19DFC((uint64_t)&__p.__r_.__value_.__l.__size_);
  }

  if (byte_48E870)
  {
    sub_48E98(&__str, (CFStringRef)qword_48E878);
    uint64_t v12 = (os_log_t *)sub_138E8(26);
    uint64_t v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_INFO))
    {
      p_str = &__str;
      if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "HapticDebugCapturesPolicy.cpp";
      __int16 v83 = 1024;
      int v84 = 77;
      __int16 v85 = 2080;
      unint64_t v86 = (const char *)p_str;
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_INFO,  "%25s:%-5d haptic input string read from defaults is %s",  buf,  0x1Cu);
    }

    std::string::size_type v15 = __str.__r_.__value_.__s.__size_;
    std::string::size_type v16 = __str.__r_.__value_.__l.__size_;
    if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v17 = __str.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v17 = __str.__r_.__value_.__l.__size_;
    }
    if (v17 <= 3)
    {
      int v71 = (os_log_t *)sub_138E8(13);
      unint64_t v72 = *v71;
      if (*v71 && os_log_type_enabled(*v71, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "HapticDebugCapturesPolicy.cpp";
        __int16 v83 = 1024;
        int v84 = 78;
        _os_log_impl(&dword_0, v72, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }

    uint64_t v18 = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      char v19 = &__str;
    }
    else {
      char v19 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    uint64_t v20 = v19;
    while (1)
    {
      int v21 = v20->__r_.__value_.__s.__data_[0];
      if (v21 != 44 && v21 != 32) {
        break;
      }
      uint64_t v20 = (std::string *)((char *)v20 + 1);
      if (!--v17) {
        goto LABEL_37;
      }
    }

    std::string::size_type v42 = (char *)v20 - (char *)v19;
    if ((char *)v20 - (char *)v19 == -1)
    {
LABEL_37:
      unint64_t v22 = 0LL;
      __int128 v75 = 0u;
      goto LABEL_38;
    }

    unint64_t v22 = 0LL;
    int v43 = 0;
    __int128 v75 = 0u;
    do
    {
      if (v43 == 8) {
        break;
      }
      std::string::size_type v44 = v42 + 1;
      if ((v15 & 0x80u) != 0LL) {
        std::string::size_type v15 = v16;
      }
      else {
        uint64_t v18 = &__str;
      }
      if (v15 > v44)
      {
        unint64_t v45 = (unsigned __int8 *)v18 + v44;
        unint64_t v46 = (unsigned __int8 *)v18 + v15;
LABEL_84:
        uint64_t v47 = 0LL;
        while (*v45 != asc_413F83[v47])
        {
          if (++v47 == 2)
          {
            if (++v45 != v46) {
              goto LABEL_84;
            }
            goto LABEL_91;
          }
        }

        if (v45 != v46)
        {
          unint64_t v48 = v45 - (unsigned __int8 *)v18;
          unint64_t v49 = v48;
          if (v48 != -1LL) {
            goto LABEL_92;
          }
        }
      }

void sub_1A1EBC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
  if ((void)a13) {
    operator delete((void *)a13);
  }
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A1F78(uint64_t a1)
{
  CFTypeRef v2 = (void *)xmmword_4A09A8;
  if ((void)xmmword_4A09A8)
  {
    __int128 v8 = xmmword_4A09A8;
    if (*((void *)&xmmword_4A09A8 + 1))
    {
      CFTypeRef v3 = (unint64_t *)(*((void *)&xmmword_4A09A8 + 1) + 8LL);
      do
        unint64_t v4 = __ldxr(v3);
      while (__stxr(v4 + 1, v3));
    }
  }

  else
  {
    sub_32E270((__n128 *)&v8);
    CFTypeRef v2 = (void *)v8;
  }

  sub_3318B0(v2, a1);
  CFIndex v5 = (std::__shared_weak_count *)*((void *)&v8 + 1);
  if (*((void *)&v8 + 1))
  {
    unsigned __int8 v6 = (unint64_t *)(*((void *)&v8 + 1) + 8LL);
    do
      unint64_t v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

void sub_1A2028( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

os_log_s *sub_1A203C(uint64_t a1, __int32 **a2)
{
  AudioObjectID v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
  __p.__r_.__value_.__r.__words[0] = 0x696E707473736323LL;
  LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
  sub_90764((uint64_t)buf, &v16, (AudioObjectPropertyAddress *)&__p, 0, 0LL);
  if (!v20) {
    return 0LL;
  }
  CFTypeRef v3 = *(unsigned int **)&v19[4];
  unint64_t v4 = *(unsigned int **)&v19[12];
  CFIndex v5 = (os_log_t *)sub_138E8(26);
  unsigned __int8 v6 = *v5;
  if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_INFO))
  {
    sub_8F640(&__p, v3, v4);
    unint64_t v7 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)char v19 = "Device_HapticDebug_Aspen.cpp";
    *(_WORD *)&v19[8] = 1024;
    *(_DWORD *)&v19[10] = 162;
    *(_WORD *)&v19[14] = 2080;
    *(void *)&v19[16] = v7;
    _os_log_impl(&dword_0, v6, OS_LOG_TYPE_INFO, "%25s:%-5d Valid haptic debug datasources: %s", buf, 0x1Cu);
  }

  __int128 v8 = *a2;
  uint64_t v9 = a2[1];
  if (*a2 == v9)
  {
LABEL_15:
    uint64_t v12 = (os_log_s *)(&dword_0 + 1);
  }

  else
  {
    while (1)
    {
      unint64_t v10 = wmemchr((const __int32 *)v3, *v8, v4 - v3);
      char v11 = v10 ? (unsigned int *)v10 : v4;
      if (v11 == v4) {
        break;
      }
      if (++v8 == v9) {
        goto LABEL_15;
      }
    }

    uint64_t v13 = (os_log_t *)sub_138E8(17);
    uint64_t v12 = *v13;
    if (*v13)
    {
      if (os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(&__p, *v8);
        __int16 v14 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)char v19 = "Device_HapticDebug_Aspen.cpp";
        *(_WORD *)&v19[8] = 1024;
        *(_DWORD *)&v19[10] = 174;
        *(_WORD *)&v19[14] = 2080;
        *(void *)&v19[16] = v14;
        _os_log_impl(&dword_0, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Haptic input source %s is not supported", buf, 0x1Cu);
      }

      uint64_t v12 = 0LL;
    }
  }

  if (v3) {
    operator delete(v3);
  }
  return v12;
}

void sub_1A2298(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1A22B8(uint64_t a1, AudioObjectPropertySelector a2, const __CFString *a3)
{
  CFIndex v5 = (void *)sub_36E3FC(a1, a2, a3, a3, 0LL);
  *CFIndex v5 = off_473F30;
  unsigned int v6 = sub_36AFE8((uint64_t)v5, 0);
  *(void *)(a1 + 496) = 0LL;
  *(void *)(a1 + 504) = 0LL;
  *(void *)(a1 + 512) = 0LL;
  strcpy(inAddress, "crsstpni");
  inAddress[9] = 0;
  *(_WORD *)&inAddress[10] = 0;
  if (AudioObjectHasProperty(a2, (const AudioObjectPropertyAddress *)inAddress))
  {
    uint64_t v7 = v6;
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
    uint64_t v9 = global_queue;
    if (global_queue) {
      dispatch_retain(global_queue);
    }
    uint64_t v10 = a1 + 496;
    dispatch_semaphore_t v11 = dispatch_semaphore_create(0LL);
    std::to_string(&v61, v6);
    uint64_t v12 = std::string::insert(&v61, 0LL, "hdds", 4uLL);
    __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0LL;
    v12->__r_.__value_.__l.__cap_ = 0LL;
    v12->__r_.__value_.__r.__words[0] = 0LL;
    __int16 v14 = std::string::append(&v62, ".dat", 4uLL);
    __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0LL;
    v14->__r_.__value_.__l.__cap_ = 0LL;
    v14->__r_.__value_.__r.__words[0] = 0LL;
    sub_313F0(inAddress);
    std::string::size_type size = v63.__r_.__value_.__s.__size_;
    if ((v63.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      std::string::size_type size = v63.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      sub_83A3C((std::string *)buf, (std::string *)inAddress);
      sub_83A3C(&v65.__pn_, &v63);
      sub_83AA0(&__p, (uint64_t)buf, &v65);
      if ((char)__p.__pn_.__r_.__value_.__s.__size_ < 0)
      {
        sub_24054(&__dst, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
      }

      else
      {
        std::__fs::filesystem::path __dst = __p;
      }

      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if ((inAddress[23] & 0x80000000) != 0) {
        operator delete(*(void **)inAddress);
      }
    }

    else
    {
      std::__fs::filesystem::path __dst = *(std::__fs::filesystem::path *)inAddress;
    }

    if ((__dst.__pn_.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::__fs::filesystem::path *)__dst.__pn_.__r_.__value_.__r.__words[0];
    }
    dispatch_fd_t v18 = open((const char *)p_dst, 0);
    if ((v18 & 0x80000000) == 0)
    {
      *(void *)AudioObjectPropertyAddress inAddress = 0LL;
      *(void *)&inAddress[8] = inAddress;
      *(void *)&inAddress[16] = 0x4002000000LL;
      *(void *)&inAddress[24] = sub_1A2D68;
      *(void *)&inAddress[32] = sub_1A2D8C;
      int v71 = 0LL;
      uint64_t v72 = 0LL;
      int v70 = 0LL;
      __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)_NSConcreteStackBlock;
      __p.__pn_.__r_.__value_.__l.__size_ = 1174405120LL;
      __p.__pn_.__r_.__value_.__l.__cap_ = (std::string::size_type)sub_1A2DA4;
      uint64_t v58 = &unk_474158;
      unint64_t v59 = inAddress;
      dispatch_object_t object = v11;
      if (v11) {
        dispatch_retain(v11);
      }
      dispatch_read(v18, 0xFFFFFFFFFFFFFFFFLL, v9, &__p);
      dispatch_time_t v19 = dispatch_time(0LL, 1000000000LL);
      dispatch_semaphore_wait(v11, v19);
      float v55 = v9;
      int v56 = (void *)(a1 + 496);
      close(v18);
      int v21 = *(char **)(*(void *)&inAddress[8] + 40LL);
      char v20 = *(_BYTE **)(*(void *)&inAddress[8] + 48LL);
      uint64_t v22 = v20 - v21;
      unint64_t v23 = (v20 - v21) >> 2;
      uint64_t v24 = *(void *)(a1 + 512);
      __int128 v25 = *(char **)(a1 + 496);
      if (v23 <= (v24 - (uint64_t)v25) >> 2)
      {
        unsigned int v28 = (void **)(a1 + 504);
        unsigned int v29 = *(_BYTE **)(a1 + 504);
        unint64_t v30 = (v29 - v25) >> 2;
        if (v30 >= v23)
        {
          if (v20 != v21) {
            memmove(*(void **)(a1 + 496), v21, v20 - v21);
          }
          uint64_t v10 = a1 + 496;
        }

        else
        {
          uint64_t v31 = &v21[4 * v30];
          if (v29 != v25)
          {
            memmove(*(void **)(a1 + 496), v21, v29 - v25);
            __int128 v25 = (char *)*v28;
          }

          uint64_t v22 = v20 - v31;
          if (v20 != v31) {
            memmove(v25, v31, v20 - v31);
          }
          uint64_t v10 = a1 + 496;
        }
      }

      else
      {
        if (v25)
        {
          *(void *)(a1 + 504) = v25;
          operator delete(v25);
          uint64_t v24 = 0LL;
          void *v56 = 0LL;
          *(void *)(a1 + 504) = 0LL;
          *(void *)(a1 + 512) = 0LL;
        }

        if (v22 < 0) {
          sub_7A87C();
        }
        uint64_t v26 = v24 >> 1;
        if (v24 >> 1 <= v23) {
          uint64_t v26 = (v20 - v21) >> 2;
        }
        else {
          unint64_t v27 = v26;
        }
        uint64_t v10 = a1 + 496;
        sub_7A840(v56, v27);
        unsigned int v28 = (void **)(a1 + 504);
        __int128 v25 = *(char **)(a1 + 504);
        if (v20 != v21) {
          memmove(*(void **)(a1 + 504), v21, v20 - v21);
        }
      }

      *unsigned int v28 = &v25[v22];
      char v32 = (os_log_t *)sub_138E8(26);
      uint64_t v33 = *v32;
      uint64_t v9 = v55;
      if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_DEFAULT))
      {
        sub_F6EB0(&v65.__pn_, *(unsigned int **)(a1 + 496), *(unsigned int **)(a1 + 504));
        __int16 v34 = (v65.__pn_.__r_.__value_.__s.__size_ & 0x80u) == 0
            ? &v65
            : (std::__fs::filesystem::path *)v65.__pn_.__r_.__value_.__r.__words[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "Device_HapticDebug_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 80;
        *(_WORD *)&_BYTE buf[18] = 2048;
        *(void *)&buf[20] = v7;
        __int16 v67 = 2080;
        uint64_t v68 = (uint64_t)v34;
        _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Haptic debug (read) -- channels: %zu, default datasources: %s",  buf,  0x26u);
      }

      if (object) {
        dispatch_release(object);
      }
      _Block_object_dispose(inAddress, 8);
      if (v70)
      {
        int v71 = v70;
        operator delete(v70);
      }
    }

    if (v7 != (uint64_t)(*(void *)(a1 + 504) - *(void *)(a1 + 496)) >> 2)
    {
      LODWORD(v63.__r_.__value_.__l.__data_) = a2;
      v65.__pn_.__r_.__value_.__r.__words[0] = 0x696E707473737263LL;
      LODWORD(v65.__pn_.__r_.__value_.__r.__words[1]) = 0;
      sub_90764((uint64_t)inAddress, (AudioObjectID *)&v63, (AudioObjectPropertyAddress *)&v65, 0, 0LL);
      int v35 = *(_DWORD *)inAddress;
      if (*(_DWORD *)inAddress || !inAddress[32])
      {
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &off_4865A0;
        exception[2] = v35;
      }

      memset(buf, 0, 24);
      int v36 = *(void **)&inAddress[8];
      sub_7A5B8( buf,  *(const void **)&inAddress[8],  *(uint64_t *)&inAddress[16],  (uint64_t)(*(void *)&inAddress[16] - *(void *)&inAddress[8]) >> 2);
      if (v36) {
        operator delete(v36);
      }
      int v37 = *(void **)v10;
      if (*(void *)v10)
      {
        *(void *)(a1 + 504) = v37;
        operator delete(v37);
        *(void *)uint64_t v10 = 0LL;
        *(void *)(v10 + 8) = 0LL;
        *(void *)(v10 + 16) = 0LL;
      }

      *(_OWORD *)(a1 + 496) = *(_OWORD *)buf;
      *(void *)(a1 + 512) = *(void *)&buf[16];
      uint64_t v38 = (os_log_t *)sub_138E8(26);
      int v39 = *v38;
      if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v41 = *(unsigned int **)(a1 + 496);
        __int16 v40 = *(unsigned int **)(a1 + 504);
        sub_F6EB0((std::string *)buf, v41, v40);
        std::string::size_type v42 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
        *(_DWORD *)AudioObjectPropertyAddress inAddress = 136315906;
        *(void *)&inAddress[4] = "Device_HapticDebug_Aspen.cpp";
        *(_WORD *)&inAddress[12] = 1024;
        *(_DWORD *)&inAddress[14] = 87;
        *(_WORD *)&inAddress[18] = 2048;
        *(void *)&inAddress[20] = v40 - v41;
        *(_WORD *)&inAddress[28] = 2080;
        *(void *)&inAddress[30] = v42;
        _os_log_impl( &dword_0,  v39,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Haptic debug (write) -- channels: %zu, driver datasources: %s",  inAddress,  0x26u);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }

      if ((__dst.__pn_.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v43 = &__dst;
      }
      else {
        int v43 = (std::__fs::filesystem::path *)__dst.__pn_.__r_.__value_.__r.__words[0];
      }
      dispatch_fd_t v44 = open((const char *)v43, 1537, 504LL);
      if ((v44 & 0x80000000) == 0)
      {
        unint64_t v45 = dispatch_data_create(*(const void **)(a1 + 496), *(void *)(a1 + 504) - *(void *)(a1 + 496), v9, 0LL);
        *(void *)AudioObjectPropertyAddress inAddress = _NSConcreteStackBlock;
        *(void *)&inAddress[8] = 1174405120LL;
        *(void *)&inAddress[16] = sub_1A2E14;
        *(void *)&inAddress[24] = &unk_474188;
        *(void *)&inAddress[32] = v11;
        if (v11) {
          dispatch_retain(v11);
        }
        dispatch_write(v44, v45, v9, inAddress);
        dispatch_time_t v46 = dispatch_time(0LL, 1000000000LL);
        dispatch_semaphore_wait(v11, v46);
        dispatch_release(v45);
        close(v44);
        if (*(void *)&inAddress[32]) {
          dispatch_release(*(dispatch_object_t *)&inAddress[32]);
        }
      }
    }

    if (v7 != (uint64_t)(*(void *)(a1 + 504) - *(void *)(a1 + 496)) >> 2)
    {
      uint64_t v47 = (os_log_t *)sub_138E8(13);
      unint64_t v48 = *v47;
      if (*v47)
      {
        if (os_log_type_enabled(*v47, OS_LOG_TYPE_ERROR))
        {
          uint64_t v49 = (uint64_t)(*(void *)(a1 + 504) - *(void *)(a1 + 496)) >> 2;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "Device_HapticDebug_Aspen.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 106;
          *(_WORD *)&_BYTE buf[18] = 2048;
          *(void *)&buf[20] = v7;
          __int16 v67 = 2048;
          uint64_t v68 = v49;
          _os_log_impl( &dword_0,  v48,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Number of data sources %zu does not match number of channels %zu.",  buf,  0x26u);
        }
      }
    }

    std::string::size_type v50 = (os_log_t *)sub_138E8(26);
    unsigned int v51 = *v50;
    if (*v50 && os_log_type_enabled(*v50, OS_LOG_TYPE_DEFAULT))
    {
      sub_F6EB0(&v65.__pn_, *(unsigned int **)(a1 + 496), *(unsigned int **)(a1 + 504));
      uint64_t v52 = (v65.__pn_.__r_.__value_.__s.__size_ & 0x80u) == 0
          ? &v65
          : (std::__fs::filesystem::path *)v65.__pn_.__r_.__value_.__r.__words[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_HapticDebug_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 107;
      *(_WORD *)&_BYTE buf[18] = 2048;
      *(void *)&buf[20] = v7;
      __int16 v67 = 2080;
      uint64_t v68 = (uint64_t)v52;
      _os_log_impl( &dword_0,  v51,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Haptic debug -- channels: %zu, default datasources: %s",  buf,  0x26u);
    }

    if (v11) {
      dispatch_release(v11);
    }
    if (v9) {
      dispatch_release(v9);
    }
  }

  return a1;
}

void sub_1A2BAC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, dispatch_object_t a20, uint64_t a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, void *a27, uint64_t a28, int a29, __int16 a30, char a31, char a32, uint64_t a33, void *a34, uint64_t a35, int a36, __int16 a37, char a38, char a39, uint64_t a40, void *__p, uint64_t a42, int a43, __int16 a44, char a45, char a46, void *a47, uint64_t a48, int a49, __int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a46 < 0) {
    operator delete(__p);
  }
  if (v59) {
    dispatch_release(v59);
  }
  if (v60) {
    dispatch_release(v60);
  }
  std::string v63 = *v61;
  if (*v61)
  {
    *(void *)(v58 + 504) = v63;
    operator delete(v63);
  }

  sub_36F1E0(v58);
  _Unwind_Resume(a1);
}

void sub_1A2D50(void *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  JUMPOUT(0x1A2D48LL);
}

void sub_1A2D60()
{
}

__n128 sub_1A2D68(void *a1, uint64_t a2)
{
  a1[5] = 0LL;
  a1[6] = 0LL;
  a1[7] = 0LL;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0LL;
  *(void *)(a2 + 48) = 0LL;
  *(void *)(a2 + 56) = 0LL;
  return result;
}

void sub_1A2D8C(uint64_t a1)
{
  CFTypeRef v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }

uint64_t sub_1A2DA4(uint64_t a1, dispatch_data_t data, int a3)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000LL;
  v5[2] = sub_1A2F40;
  v5[3] = &unk_474130;
  v5[4] = *(void *)(a1 + 32);
  int v6 = a3;
  dispatch_data_apply(data, v5);
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

uint64_t sub_1A2E14(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    CFIndex v5 = (os_log_t *)sub_138E8(26);
    int v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = 136315650;
        uint64_t v9 = "Device_HapticDebug_Aspen.cpp";
        __int16 v10 = 1024;
        int v11 = 96;
        __int16 v12 = 1024;
        int v13 = a3;
        _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Error (write): %d", (uint8_t *)&v8, 0x18u);
      }
    }
  }

  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1A2EF0(uint64_t a1, uint64_t a2)
{
  CFTypeRef v3 = *(dispatch_object_s **)(a2 + 32);
  *(void *)(a1 + 32) = v3;
  if (v3) {
    dispatch_retain(v3);
  }
}

void sub_1A2F08(uint64_t a1)
{
  uint64_t v1 = *(dispatch_object_s **)(a1 + 32);
  if (v1) {
    dispatch_release(v1);
  }
}

void sub_1A2F18(uint64_t a1, uint64_t a2)
{
  CFTypeRef v3 = *(dispatch_object_s **)(a2 + 40);
  *(void *)(a1 + 40) = v3;
  if (v3) {
    dispatch_retain(v3);
  }
}

void sub_1A2F30(uint64_t a1)
{
  uint64_t v1 = *(dispatch_object_s **)(a1 + 40);
  if (v1) {
    dispatch_release(v1);
  }
}

uint64_t sub_1A2F40(uint64_t a1, int a2, int a3, char *__src, uint64_t a5)
{
  if (*(_DWORD *)(a1 + 40))
  {
    int v6 = (os_log_t *)sub_138E8(26);
    uint64_t v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = *(_DWORD *)(a1 + 40);
        int v10 = 136315650;
        int v11 = "Device_HapticDebug_Aspen.cpp";
        __int16 v12 = 1024;
        int v13 = 70;
        __int16 v14 = 1024;
        int v15 = v8;
        _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Error (read): %d", (uint8_t *)&v10, 0x18u);
      }
    }
  }

  return 1LL;
}

uint64_t sub_1A3034(void *a1)
{
  *a1 = off_4741C8;
  sub_68314(a1 + 18);
  return sub_3781A4((uint64_t)a1);
}

void sub_1A3064(void *a1)
{
  *a1 = off_4741C8;
  sub_68314(a1 + 18);
  CFTypeRef v2 = (void *)sub_3781A4((uint64_t)a1);
  operator delete(v2);
}

uint64_t sub_1A3098(uint64_t a1, char *a2)
{
  uint64_t result = sub_4DDC(a1, a2);
  if ((_DWORD)result)
  {
    if ((sub_58B0(a1) & 1) != 0)
    {
      return 1LL;
    }

    else
    {
      *a2 = 0;
      sub_563C(a1);
      return 0LL;
    }
  }

  return result;
}

BOOL sub_1A30E4()
{
  uint64_t v0 = pthread_self();
  uint64_t v1 = (_opaque_pthread_t *)atomic_load(qword_48F838);
  int v2 = pthread_equal(v0, v1);
  if (v2)
  {
    ++dword_48F8B0;
    sub_563C((uint64_t)&qword_48F828);
  }

  return v2 != 0;
}

uint64_t sub_1A3138(uint64_t a1, const void *a2, float a3)
{
  float valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0LL, kCFNumberFloat32Type, &valuePtr);
  CFNumberRef v7 = v5;
  char v8 = 1;
  if (*(_BYTE *)(a1 + 9) && v5 && *(void *)a1) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)a1, a2, v5);
  }
  return sub_1348C((uint64_t)&v7);
}

void sub_1A31A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1A31BC(uint64_t a1, const void *a2, double a3)
{
  double valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0LL, kCFNumberFloat64Type, &valuePtr);
  CFNumberRef v7 = v5;
  char v8 = 1;
  if (*(_BYTE *)(a1 + 9) && v5 && *(void *)a1) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)a1, a2, v5);
  }
  return sub_1348C((uint64_t)&v7);
}

void sub_1A322C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1A3240(uint64_t result, const void *a2, char *cStr)
{
  if (cStr)
  {
    uint64_t v4 = result;
    CFStringRef v5 = CFStringCreateWithCString(0LL, cStr, 0x600u);
    CFStringRef v6 = v5;
    char v7 = 1;
    if (v5 && *(_BYTE *)(v4 + 9))
    {
      if (*(void *)v4) {
        CFDictionarySetValue(*(CFMutableDictionaryRef *)v4, a2, v5);
      }
    }

    return sub_19DFC((uint64_t)&v6);
  }

  return result;
}

void sub_1A32B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1A32C8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1A3B4C(a1);
  operator delete(v1);
}

uint64_t sub_1A32DC(uint64_t a1, void *a2, int *a3)
{
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6) {
    atomic_load((unint64_t *)(v6 + 8));
  }
  if (!a2)
  {
    int v21 = (os_log_t *)sub_138E8(13);
    uint64_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      int v24 = 136315394;
      __int128 v25 = "RunLoopThread.cpp";
      __int16 v26 = 1024;
      int v27 = 94;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::invalid_argument) [source is NULL]: source is NULL.",  (uint8_t *)&v24,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1013D0(exception, "source is NULL.");
  }

  uint64_t v7 = a1 + 24;
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 16LL))(a1 + 24);
  uint64_t v9 = (unsigned int *)(a1 + 160);
  int v10 = *(_DWORD *)(a1 + 160);
  if (v10 == -1) {
    int v11 = 2;
  }
  else {
    int v11 = 1;
  }
  do
    unsigned int v12 = __ldxr(v9);
  while (__stxr(v12 + v11, v9));
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v7 + 24LL))(a1 + 24);
  }
  *a3 = v10;
  CFRetain(a2);
  int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16LL))(a1 + 24);
  int v14 = *a3;
  int v15 = operator new(0x20uLL);
  v15[6] = v14;
  uint64_t v16 = *(void *)(a1 + 168);
  *((void *)v15 + 1) = a1 + 168;
  *((void *)v15 + 2) = a2;
  *(void *)int v15 = v16;
  *(void *)(v16 + 8) = v15;
  *(void *)(a1 + 168) = v15;
  ++*(void *)(a1 + 184);
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v7 + 24LL))(a1 + 24);
  }
  CFRunLoopAddSource(*(CFRunLoopRef *)(a1 + 8), (CFRunLoopSourceRef)a2, kCFRunLoopDefaultMode);
  CFRunLoopWakeUp(*(CFRunLoopRef *)(a1 + 8));
  std::string::size_type v17 = (os_log_t *)sub_138E8(13);
  dispatch_fd_t v18 = *v17;
  if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_DEBUG))
  {
    int v19 = *a3;
    int v24 = 136315906;
    __int128 v25 = "RunLoopThread.cpp";
    __int16 v26 = 1024;
    int v27 = 108;
    __int16 v28 = 2048;
    unsigned int v29 = a2;
    __int16 v30 = 1024;
    int v31 = v19;
    _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Added source %p and set outSourceID to %u",  (uint8_t *)&v24,  0x22u);
  }

  return 0LL;
}

void sub_1A3554(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

uint64_t sub_1A35A8( void *a1, const void *(__cdecl *a2)(const void *), void (__cdecl *a3)(const void *), uint64_t a4)
{
  uint64_t v8 = a1[2];
  if (v8) {
    atomic_load((unint64_t *)(v8 + 8));
  }
  if (!a2)
  {
    dispatch_fd_t v18 = (os_log_t *)sub_138E8(13);
    int v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.version) = 136315394;
      *(CFIndex *)((char *)&buf.version + 4) = (CFIndex)"RunLoopThread.cpp";
      WORD2(buf.info) = 1024;
      *(_DWORD *)((char *)&buf.info + 6) = 118;
      _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::invalid_argument) [callback is NULL]: callback is NULL.",  (uint8_t *)&buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1013D0(exception, "callback is NULL.");
  }

  if (!a3)
  {
    int v13 = (os_log_t *)sub_138E8(13);
    int v14 = *v13;
    if (*v13)
    {
      if (os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.version) = 136315394;
        *(CFIndex *)((char *)&buf.version + 4) = (CFIndex)"RunLoopThread.cpp";
        WORD2(buf.info) = 1024;
        *(_DWORD *)((char *)&buf.info + 6) = 119;
        _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d clientData is NULL. This may be dangerous / an error.",  (uint8_t *)&buf,  0x12u);
      }
    }
  }

  uint64_t v9 = (os_log_t *)sub_138E8(13);
  int v10 = *v9;
  if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf.version) = 136315906;
    *(CFIndex *)((char *)&buf.version + 4) = (CFIndex)"RunLoopThread.cpp";
    WORD2(buf.info) = 1024;
    *(_DWORD *)((char *)&buf.info + 6) = 123;
    WORD1(buf.retain) = 2048;
    *(const void *(__cdecl **)(const void *))((char *)&buf.retain + 4) = a2;
    WORD2(buf.release) = 2048;
    *(void (__cdecl **)(const void *))((char *)&buf.release + 6) = a3;
    _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to create source from callback %p / clientData %p.",  (uint8_t *)&buf,  0x26u);
  }

  buf.version = 0LL;
  buf.info = a3;
  memset(&buf.retain, 0, 56);
  buf.perform = (void (__cdecl *)(void *))a2;
  CFRunLoopSourceRef v11 = CFRunLoopSourceCreate(kCFAllocatorDefault, 0LL, &buf);
  if (v11)
  {
    uint64_t v12 = (*(uint64_t (**)(void *, CFRunLoopSourceRef, uint64_t))(*a1 + 16LL))(a1, v11, a4);
    CFRelease(v11);
  }

  else
  {
    int v15 = (os_log_t *)sub_138E8(13);
    uint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315394;
      uint64_t v22 = "RunLoopThread.cpp";
      __int16 v23 = 1024;
      int v24 = 127;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d CFRunLoopSourceCreate() failed.",  (uint8_t *)&v21,  0x12u);
    }

    return 1LL;
  }

  return v12;
}

void sub_1A388C(_Unwind_Exception *a1)
{
}

BOOL sub_1A38A8(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    atomic_load((unint64_t *)(v4 + 8));
  }
  uint64_t v5 = sub_1A3ABC(a1, a2);
  if (!v5) {
    return 1LL;
  }
  uint64_t v6 = (__CFRunLoopSource *)v5;
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 16LL))(a1 + 24);
  uint64_t v8 = *(void **)(a1 + 176);
  if (v8 == (void *)(a1 + 168))
  {
LABEL_7:
    if (v7) {
LABEL_11:
    }
      (*(void (**)(uint64_t))(*(void *)(a1 + 24) + 24LL))(a1 + 24);
  }

  else
  {
    while (1)
    {
      uint64_t v9 = v8[1];
      if (*((_DWORD *)v8 + 6) == a2) {
        break;
      }
      uint64_t v8 = (void *)v8[1];
      if (v9 == a1 + 168) {
        goto LABEL_7;
      }
    }

    uint64_t v11 = *v8;
    *(void *)(v11 + 8) = v9;
    *(void *)v8[1] = v11;
    --*(void *)(a1 + 184);
    operator delete(v8);
    if (v7) {
      goto LABEL_11;
    }
  }

  CFRunLoopRemoveSource(*(CFRunLoopRef *)(a1 + 8), v6, kCFRunLoopDefaultMode);
  CFRunLoopWakeUp(*(CFRunLoopRef *)(a1 + 8));
  CFRelease(v6);
  uint64_t v12 = (os_log_t *)sub_138E8(13);
  int v13 = *v12;
  if (*v12)
  {
    BOOL result = os_log_type_enabled(*v12, OS_LOG_TYPE_DEBUG);
    if (!result) {
      return result;
    }
    int v14 = 136315650;
    int v15 = "RunLoopThread.cpp";
    __int16 v16 = 1024;
    int v17 = 168;
    __int16 v18 = 1024;
    int v19 = a2;
    _os_log_impl(&dword_0, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d Removed outSourceID %u", (uint8_t *)&v14, 0x18u);
  }

  return 0LL;
}

void sub_1A3A58(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

uint64_t sub_1A3A64(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3) {
    atomic_load((unint64_t *)(v3 + 8));
  }
  uint64_t v4 = (__CFRunLoopSource *)sub_1A3ABC(a1, a2);
  if (!v4) {
    return 1LL;
  }
  CFRunLoopSourceSignal(v4);
  CFRunLoopWakeUp(*(CFRunLoopRef *)(a1 + 8));
  return 0LL;
}

uint64_t sub_1A3AB4(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_1A3ABC(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3) {
    atomic_load((unint64_t *)(v3 + 8));
  }
  uint64_t v4 = (void *)(a1 + 24);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 16LL))(a1 + 24);
  for (uint64_t i = v4[19]; ; uint64_t i = *(void *)(i + 8))
  {
    if ((void *)i == v4 + 18)
    {
      uint64_t v7 = 0LL;
      if (!v5) {
        return v7;
      }
      goto LABEL_10;
    }

    if (*(_DWORD *)(i + 24) == a2) {
      break;
    }
  }

  uint64_t v7 = *(void *)(i + 16);
  if (!v5) {
    return v7;
  }
LABEL_10:
  (*(void (**)(void *))(*v4 + 24LL))(v4);
  return v7;
}

uint64_t sub_1A3B4C(uint64_t a1)
{
  *(void *)a1 = off_474238;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    atomic_load((unint64_t *)(v2 + 8));
  }
  uint64_t v3 = a1 + 24;
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 16LL))(a1 + 24);
  while (1)
  {
    uint64_t v5 = *(void *)(a1 + 176);
    if (v5 == a1 + 168) {
      break;
    }
    (*(void (**)(uint64_t, void))(*(void *)a1 + 32LL))(a1, *(unsigned int *)(v5 + 24));
  }

  if (atomic_load((unint64_t *)(*(void *)(a1 + 16) + 8LL)))
  {
    CFRunLoopStop(*(CFRunLoopRef *)(a1 + 8));
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v3 + 64LL))(a1 + 24, 500000000LL))
    {
      uint64_t v7 = (os_log_t *)sub_138E8(13);
      uint64_t v8 = *v7;
      if (*v7)
      {
        if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
        {
          int v10 = 136315650;
          uint64_t v11 = "RunLoopThread.cpp";
          __int16 v12 = 1024;
          int v13 = 79;
          __int16 v14 = 1024;
          int v15 = 500;
          _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Thread stop timeout timed out after %u milliseconds",  (uint8_t *)&v10,  0x18u);
        }
      }
    }
  }

  *(void *)(a1 + 16) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24LL))(a1 + 24);
  }
  sub_68314((void *)(a1 + 168));
  sub_3781A4(a1 + 24);
  return a1;
}

void sub_1A3CE0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1A3CF8(uint64_t a1)
{
  kern_return_t v10;
  _opaque_pthread_t *v11;
  thread_act_t v12;
  kern_return_t v13;
  os_log_t *v14;
  os_log_s *v15;
  int v16;
  os_log_t *v17;
  os_log_s *v18;
  os_log_t *v19;
  os_log_s *v20;
  os_log_t *v21;
  os_log_s *v22;
  const char *v23;
  kern_return_t v24;
  integer_t policy_info;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  if (a1)
  {
    uint64_t v2 = a1 + 24;
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 16LL))(a1 + 24);
    CFRunLoopRef Current = CFRunLoopGetCurrent();
    *(void *)(a1 + 8) = Current;
    if (!Current)
    {
      int v17 = (os_log_t *)sub_138E8(13);
      __int16 v18 = *v17;
      if (*v17)
      {
        if (os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)CFRunLoopSourceContext buf = 136315394;
          int v27 = "RunLoopThread.cpp";
          __int16 v28 = 1024;
          unsigned int v29 = 249;
          _os_log_impl(&dword_0, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d CFRunLoopGetCurrent() failed.", buf, 0x12u);
        }
      }
    }

    sub_377FD4(a1 + 24);
    if (!*(_BYTE *)(a1 + 196)) {
      goto LABEL_9;
    }
    uint64_t v5 = *(void *)(a1 + 16);
    *(_DWORD *)(v5 + 104) = *(_DWORD *)(a1 + 192);
    *(_WORD *)(v5 + 121) = 0;
    uint64_t v7 = (_opaque_pthread_t *)atomic_load((unint64_t *)(v5 + 8));
    if (!v7) {
      goto LABEL_9;
    }
    int v8 = *(_DWORD *)(v5 + 104);
    if (*(_BYTE *)(v5 + 122)
      && (policy_info = 0, v9 = pthread_mach_thread_np(v7), (int v10 = thread_policy_set(v9, 1u, &policy_info, 1u)) != 0))
    {
      int v24 = v10;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CFRunLoopSourceContext buf = 136315650;
        int v27 = "CAPThread.cpp";
        __int16 v28 = 1024;
        unsigned int v29 = 161;
        __int16 v30 = 1024;
        LODWORD(v31) = v24;
        __int16 v23 = "%25s:%-5d  CAPThread::SetPriority: failed to set the fixed-priority policy, Error: 0x%X";
        goto LABEL_33;
      }
    }

    else
    {
      uint64_t v11 = pthread_self();
      policy_info = v8 - sub_2F45FC(v11);
      __int16 v12 = pthread_mach_thread_np(v7);
      int v13 = thread_policy_set(v12, 3u, &policy_info, 1u);
      if (!v13)
      {
LABEL_9:
        if (v3) {
          (*(void (**)(uint64_t))(*(void *)v2 + 24LL))(a1 + 24);
        }
        if (Current)
        {
          if (!(*(unsigned int (**)(uint64_t, void (*)(), uint64_t, integer_t *))(*(void *)a1 + 24LL))( a1,  sub_1A41A4,  a1,  &policy_info))
          {
            CFRunLoopRun();
            __int16 v14 = (os_log_t *)sub_138E8(13);
            int v15 = *v14;
            if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)CFRunLoopSourceContext buf = 136315394;
              int v27 = "RunLoopThread.cpp";
              __int16 v28 = 1024;
              unsigned int v29 = 217;
              _os_log_impl(&dword_0, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d CFRunLoopRun() returned", buf, 0x12u);
            }

            __int16 v16 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 16LL))(a1 + 24);
            (*(void (**)(uint64_t))(*(void *)v2 + 80LL))(a1 + 24);
            if (v16) {
              (*(void (**)(uint64_t))(*(void *)v2 + 24LL))(a1 + 24);
            }
          }
        }

        else
        {
          int v19 = (os_log_t *)sub_138E8(13);
          char v20 = *v19;
          if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)CFRunLoopSourceContext buf = 136315394;
            int v27 = "RunLoopThread.cpp";
            __int16 v28 = 1024;
            unsigned int v29 = 226;
            _os_log_impl(&dword_0, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d PrepareRunLoop() failed.", buf, 0x12u);
          }
        }

        goto LABEL_25;
      }

      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CFRunLoopSourceContext buf = 136315650;
        int v27 = "CAPThread.cpp";
        __int16 v28 = 1024;
        unsigned int v29 = 168;
        __int16 v30 = 1024;
        LODWORD(v31) = v13;
        __int16 v23 = "%25s:%-5d  CAPThread::SetPriority: failed to set the precedence policy, Error: 0x%X";
LABEL_33:
        _os_log_impl(&dword_0, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, v23, buf, 0x18u);
      }
    }

    __break(1u);
    return;
  }

void sub_1A413C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

void sub_1A41A4()
{
  uint64_t v0 = (os_log_t *)sub_138E8(13);
  uint64_t v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v2 = 136315394;
      int v3 = "RunLoopThread.cpp";
      __int16 v4 = 1024;
      int v5 = 29;
      _os_log_impl( &dword_0,  v1,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Shim callback was executed! It should not be possible to get here.",  (uint8_t *)&v2,  0x12u);
    }
  }

uint64_t sub_1A4264(unsigned int *a1, int *a2)
{
  int v4 = *a2;
  uint64_t result = 1LL;
  if (*a2 > 1869832546)
  {
    switch(v4)
    {
      case 1986947428:
        return result;
      case 1937208176:
        BOOL v7 = ((*(uint64_t (**)(unsigned int *))(*(void *)a1 + 376LL))(a1) & 0xFF00000000LL) == 0;
        return !v7;
      case 1869832547:
        unsigned int v6 = atomic_load(a1 + 132);
        BOOL v7 = v6 == 0;
        return !v7;
    }

void sub_1A44F4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_19DFC((uint64_t)&a12);
  _Unwind_Resume(a1);
}

BOOL sub_1A4528(uint64_t a1, int *a2)
{
  int v3 = *a2;
  if (*a2 <= 1869832546)
  {
    if (v3 != 1650551140 && v3 != 1767989616) {
      goto LABEL_10;
    }
    return 0LL;
  }

  if (v3 != 1869832547)
  {
    if (v3 != 1986947428)
    {
LABEL_10:
      sub_1AB114((uint64_t)&v6, a2);
      return sub_36854C(a1, &v6);
    }

    return 0LL;
  }

  return 1LL;
}

uint64_t sub_1A45C0(uint64_t a1, int *a2, UInt32 a3, const void *a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    char v11 = (os_log_t *)sub_138E8(13);
    uint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)a2;
      int v20 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v19);
      uint64_t v13 = v22 >= 0 ? __p : (void **)__p[0];
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.mScope = "Device_Bluetooth_Aspen.cpp";
      __int16 v24 = 1024;
      int v25 = 542;
      __int16 v26 = 2080;
      int v27 = v13;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  (uint8_t *)&buf,  0x1Cu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((a3 != 0) == (a4 == 0LL))
  {
    char v15 = (os_log_t *)sub_138E8(13);
    __int16 v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)a2;
      int v20 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&v19);
      if (v22 >= 0) {
        int v17 = __p;
      }
      else {
        int v17 = (void **)__p[0];
      }
      buf.AudioObjectPropertySelector mSelector = 136316162;
      *(void *)&buf.mScope = "Device_Bluetooth_Aspen.cpp";
      __int16 v24 = 1024;
      int v25 = 543;
      __int16 v26 = 2080;
      int v27 = v17;
      __int16 v28 = 1024;
      UInt32 v29 = a3;
      __int16 v30 = 2048;
      int v31 = a4;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        (uint8_t *)&buf,
        0x2Cu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }

    __int16 v18 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v18 = &off_4865A0;
    v18[2] = 561211770;
  }

  int v8 = *a2;
  uint64_t result = 4LL;
  if (*a2 <= 1869832546)
  {
    if (v8 == 1650551140) {
      return result;
    }
    int v10 = 1767989616;
    goto LABEL_9;
  }

  if (v8 != 1869832547 && v8 != 1937208176)
  {
    int v10 = 1986947428;
LABEL_9:
    if (v8 != v10)
    {
      sub_1AB114((uint64_t)&buf, a2);
      return sub_21524(a1, &buf, a3, a4);
    }
  }

  return result;
}

void sub_1A48C8(uint64_t a1, uint64_t a2, UInt32 a3, const void *a4, UInt32 *a5, int *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    UInt32 v29 = (os_log_t *)sub_138E8(13);
    __int16 v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
    {
      std::__fs::filesystem::path __p = *(void **)a2;
      int v42 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)v46, (unsigned int *)&__p);
      int v31 = v47 >= 0 ? v46 : (void **)v46[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_Bluetooth_Aspen.cpp";
      __int16 v49 = 1024;
      int v50 = 571;
      __int16 v51 = 2080;
      uint64_t v52 = (const char *)v31;
      _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v47 < 0) {
        operator delete(v46[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((a3 != 0) == (a4 == 0LL))
  {
    uint64_t v33 = (os_log_t *)sub_138E8(13);
    __int16 v34 = *v33;
    if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
    {
      std::__fs::filesystem::path __p = *(void **)a2;
      int v42 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)v46, (unsigned int *)&__p);
      int v35 = v47 >= 0 ? v46 : (void **)v46[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "Device_Bluetooth_Aspen.cpp";
      __int16 v49 = 1024;
      int v50 = 572;
      __int16 v51 = 2080;
      uint64_t v52 = (const char *)v35;
      __int16 v53 = 1024;
      LODWORD(v54[0]) = a3;
      WORD2(v54[0]) = 2048;
      *(void *)((char *)v54 + 6) = a4;
      _os_log_impl( &dword_0,  v34,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v47 < 0) {
        operator delete(v46[0]);
      }
    }

    int v36 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v36 = &off_4865A0;
    v36[2] = 561211770;
  }

  if (!a6)
  {
    int v37 = (os_log_t *)sub_138E8(13);
    uint64_t v38 = *v37;
    if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
    {
      std::__fs::filesystem::path __p = *(void **)a2;
      int v42 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)v46, (unsigned int *)&__p);
      int v39 = v47 >= 0 ? v46 : (void **)v46[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_Bluetooth_Aspen.cpp";
      __int16 v49 = 1024;
      int v50 = 573;
      __int16 v51 = 2080;
      uint64_t v52 = "outData";
      __int16 v53 = 2080;
      v54[0] = v39;
      _os_log_impl( &dword_0,  v38,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
      if (v47 < 0) {
        operator delete(v46[0]);
      }
    }

    __int16 v40 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v40 = &off_4865A0;
    v40[2] = 561211770;
  }

  int v12 = *(_DWORD *)a2;
  if (*(int *)a2 <= 1819046767)
  {
    if (v12 <= 1651796338)
    {
      if (v12 == 1650551140)
      {
        int v13 = *(_DWORD *)(a1 + 532);
        goto LABEL_31;
      }

      if (v12 != 1651796336) {
        goto LABEL_32;
      }
    }

    else if (v12 != 1651796339)
    {
      if (v12 != 1651798131)
      {
        if (v12 == 1767989616)
        {
          int v13 = *(unsigned __int8 *)(a1 + 496);
LABEL_31:
          *a6 = v13;
          return;
        }

        goto LABEL_32;
      }

      sub_1AB114((uint64_t)buf, (int *)a2);
      (*(void (**)(uint64_t, _BYTE *, void, void, UInt32 *, int *))(*(void *)a1 + 40LL))( a1,  buf,  0LL,  0LL,  a5,  a6);
      int v14 = sub_1A724C(*a6);
      goto LABEL_27;
    }

    sub_1AB114((uint64_t)buf, (int *)a2);
    (*(void (**)(uint64_t, _BYTE *, void, void, UInt32 *, int *))(*(void *)a1 + 40LL))( a1,  buf,  0LL,  0LL,  a5,  a6);
    int v14 = sub_1A70DC(*a6);
    goto LABEL_27;
  }

  if (v12 > 1937208175)
  {
    if (v12 == 1937208176)
    {
      uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 376LL))(a1);
      if ((v16 & 0xFF00000000LL) != 0) {
        int v13 = v16;
      }
      else {
        int v13 = 0;
      }
      goto LABEL_31;
    }

    if (v12 != 1970496630)
    {
      if (v12 != 2004054901) {
        goto LABEL_32;
      }
LABEL_18:
      sub_232A4(a1, (const AudioObjectPropertyAddress *)a2, a3, a4, a5, (float *)a6);
      goto LABEL_19;
    }

    sub_232A4(a1, (const AudioObjectPropertyAddress *)a2, a3, a4, a5, (float *)a6);
    int v14 = sub_14FE28(*a6);
LABEL_27:
    *a6 = v14;
    return;
  }

  switch(v12)
  {
    case 1819046768:
      goto LABEL_18;
    case 1869832547:
      unsigned int v15 = atomic_load((unsigned int *)(a1 + 528));
      int v13 = v15 == 1;
      goto LABEL_31;
    case 1935762278:
      sub_1AB114((uint64_t)buf, (int *)a2);
      (*(void (**)(uint64_t, _BYTE *, void, void, UInt32 *, int *))(*(void *)a1 + 40LL))( a1,  buf,  0LL,  0LL,  a5,  a6);
LABEL_19:
      int v13 = *a6 != 0;
      goto LABEL_31;
  }

void sub_1A5020( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_19DFC((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_1A5054(uint64_t a1, int *a2, UInt32 a3, const void *a4, UInt32 a5, float *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    unsigned __int8 v78 = (os_log_t *)sub_138E8(13);
    unint64_t v79 = *v78;
    if (*v78 && os_log_type_enabled(*v78, OS_LOG_TYPE_ERROR))
    {
      CFStringRef theString = *(CFStringRef *)a2;
      int v96 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&theString);
      uint64_t v80 = v100 >= 0 ? __p : (void **)__p[0];
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.mScope = "Device_Bluetooth_Aspen.cpp";
      __int16 v104 = 1024;
      int v105 = 640;
      __int16 v106 = 2080;
      uint64_t v107 = (const char *)v80;
      _os_log_impl( &dword_0,  v79,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  (uint8_t *)&buf,  0x1Cu);
      if (v100 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((a3 != 0) == (a4 == 0LL))
  {
    __int128 v82 = (os_log_t *)sub_138E8(13);
    __int16 v83 = *v82;
    if (*v82 && os_log_type_enabled(*v82, OS_LOG_TYPE_ERROR))
    {
      CFStringRef theString = *(CFStringRef *)a2;
      int v96 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&theString);
      int v84 = v100 >= 0 ? __p : (void **)__p[0];
      buf.AudioObjectPropertySelector mSelector = 136316162;
      *(void *)&buf.mScope = "Device_Bluetooth_Aspen.cpp";
      __int16 v104 = 1024;
      int v105 = 641;
      __int16 v106 = 2080;
      uint64_t v107 = (const char *)v84;
      __int16 v108 = 1024;
      *(_DWORD *)char v109 = a3;
      *(_WORD *)&v109[4] = 2048;
      *(void *)&v109[6] = a4;
      _os_log_impl( &dword_0,  v83,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        (uint8_t *)&buf,
        0x2Cu);
      if (v100 < 0) {
        operator delete(__p[0]);
      }
    }

    __int16 v85 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v85 = &off_4865A0;
    v85[2] = 561211770;
  }

  if (!a6)
  {
    unint64_t v86 = (os_log_t *)sub_138E8(13);
    __int16 v87 = *v86;
    if (*v86 && os_log_type_enabled(*v86, OS_LOG_TYPE_ERROR))
    {
      CFStringRef theString = *(CFStringRef *)a2;
      int v96 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&theString);
      uint64_t v88 = v100 >= 0 ? __p : (void **)__p[0];
      buf.AudioObjectPropertySelector mSelector = 136315906;
      *(void *)&buf.mScope = "Device_Bluetooth_Aspen.cpp";
      __int16 v104 = 1024;
      int v105 = 642;
      __int16 v106 = 2080;
      uint64_t v107 = "inData";
      __int16 v108 = 2080;
      *(void *)char v109 = v88;
      _os_log_impl( &dword_0,  v87,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  (uint8_t *)&buf,  0x26u);
      if (v100 < 0) {
        operator delete(__p[0]);
      }
    }

    unint64_t v89 = __cxa_allocate_exception(0x10uLL);
    *(void *)unint64_t v89 = &off_4865A0;
    v89[2] = 561211770;
  }

  if (((*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 24LL))(a1, a2) & 1) == 0)
  {
    unint64_t v90 = (os_log_t *)sub_138E8(13);
    uint64_t v91 = *v90;
    if (*v90 && os_log_type_enabled(*v90, OS_LOG_TYPE_ERROR))
    {
      CFStringRef theString = *(CFStringRef *)a2;
      int v96 = a2[2];
      sub_613AC((uint64_t)__p, (unsigned int *)&theString);
      unint64_t v92 = v100 >= 0 ? __p : (void **)__p[0];
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.mScope = "Device_Bluetooth_Aspen.cpp";
      __int16 v104 = 1024;
      int v105 = 643;
      __int16 v106 = 2080;
      uint64_t v107 = (const char *)v92;
      _os_log_impl( &dword_0,  v91,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not settable.",  (uint8_t *)&buf,  0x1Cu);
      if (v100 < 0) {
        operator delete(__p[0]);
      }
    }

    unint64_t v93 = __cxa_allocate_exception(0x10uLL);
    *(void *)unint64_t v93 = &off_4865A0;
    v93[2] = 1852797029;
  }

  int v12 = *a2;
  if (*a2 == 1651797100)
  {
    float v26 = *a6;
    uint64_t v27 = sub_138E8(17);
    uint64_t v28 = sub_138E8(28);
    char v29 = 0;
    uint64_t v30 = 0LL;
    *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002LL;
    uint64_t v31 = *(void *)(v27 + 8);
    while (1)
    {
      uint64_t v32 = *((int *)&buf.mSelector + v30);
      char v33 = v29;
      if (((v31 & v32) != 0) != ((*(void *)(v28 + 8) & v32) != 0)) {
        break;
      }
      char v29 = 1;
      uint64_t v30 = 1LL;
      if ((v33 & 1) != 0) {
        goto LABEL_49;
      }
    }

    if ((v31 & v32) == 0) {
      uint64_t v27 = v28;
    }
LABEL_49:
    __int128 v57 = *(os_log_s **)v27;
    if (v57 && os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)a1 + 128LL))(&theString, a1);
      sub_48E98(__p, theString);
      if (v100 >= 0) {
        uint64_t v58 = __p;
      }
      else {
        uint64_t v58 = (void **)__p[0];
      }
      buf.AudioObjectPropertySelector mSelector = 136315906;
      *(void *)&buf.mScope = "Device_Bluetooth_Aspen.cpp";
      __int16 v104 = 1024;
      int v105 = 661;
      __int16 v106 = 2080;
      uint64_t v107 = (const char *)v58;
      __int16 v108 = 1024;
      *(float *)char v109 = v26;
      _os_log_impl( &dword_0,  v57,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Bluetooth audio device with UID %s: setting low latency mode to %u",  (uint8_t *)&buf,  0x22u);
      if (v100 < 0) {
        operator delete(__p[0]);
      }
      sub_19DFC((uint64_t)&theString);
    }

    sub_1AB114((uint64_t)&buf, a2);
    sub_3686A0(a1, &buf, a3, a4, a5, a6);
  }

  else if (v12 == 1936745838)
  {
    float v18 = *a6;
    uint64_t v19 = sub_138E8(17);
    uint64_t v20 = sub_138E8(28);
    char v21 = 0;
    uint64_t v22 = 0LL;
    *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002LL;
    uint64_t v23 = *(void *)(v19 + 8);
    while (1)
    {
      uint64_t v24 = *((int *)&buf.mSelector + v22);
      char v25 = v21;
      if (((v23 & v24) != 0) != ((*(void *)(v20 + 8) & v24) != 0)) {
        break;
      }
      char v21 = 1;
      uint64_t v22 = 1LL;
      if ((v25 & 1) != 0) {
        goto LABEL_29;
      }
    }

    if ((v23 & v24) == 0) {
      uint64_t v19 = v20;
    }
LABEL_29:
    __int128 v41 = *(os_log_s **)v19;
    if (v41 && os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)a1 + 128LL))(&theString, a1);
      sub_48E98(__p, theString);
      if (v100 >= 0) {
        int v42 = __p;
      }
      else {
        int v42 = (void **)__p[0];
      }
      buf.AudioObjectPropertySelector mSelector = 136315906;
      *(void *)&buf.mScope = "Device_Bluetooth_Aspen.cpp";
      __int16 v104 = 1024;
      int v105 = 668;
      __int16 v106 = 2080;
      uint64_t v107 = (const char *)v42;
      __int16 v108 = 1024;
      *(float *)char v109 = v18;
      _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Bluetooth audio device with UID %s: setting spatial A2DP mode to %u",  (uint8_t *)&buf,  0x22u);
      if (v100 < 0) {
        operator delete(__p[0]);
      }
      sub_19DFC((uint64_t)&theString);
    }

    v94[0] = v18;
    int v101 = 0;
    UInt32 v102 = 4;
    strcpy((char *)&buf, "papsbolg");
    BYTE1(buf.mElement) = 0;
    HIWORD(buf.mElement) = 0;
    if ((*(unsigned int (**)(uint64_t, AudioObjectPropertyAddress *))(*(void *)a1 + 16LL))(a1, &buf)
      && (strcpy((char *)&buf, "papsbolg"),
          BYTE1(buf.mElement) = 0,
          HIWORD(buf.mElement) = 0,
          (*(void (**)(uint64_t, AudioObjectPropertyAddress *, void, void, UInt32 *, int *))(*(void *)a1 + 40LL))( a1,  &buf,  0LL,  0LL,  &v102,  &v101),  v101))
    {
      uint64_t v43 = sub_138E8(17);
      uint64_t v44 = sub_138E8(28);
      char v45 = 0;
      uint64_t v46 = 0LL;
      *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002LL;
      uint64_t v47 = *(void *)(v43 + 8);
      while (1)
      {
        uint64_t v48 = *((int *)&buf.mSelector + v46);
        char v49 = v45;
        if (((v47 & v48) != 0) != ((*(void *)(v44 + 8) & v48) != 0)) {
          break;
        }
        char v45 = 1;
        uint64_t v46 = 1LL;
        if ((v49 & 1) != 0) {
          goto LABEL_95;
        }
      }

      if ((v47 & v48) == 0) {
        uint64_t v43 = v44;
      }
LABEL_95:
      int v71 = *(os_log_s **)v43;
      if (v71 && os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)a1 + 128LL))(v98, a1);
        sub_48E98(__p, v98[0]);
        int v72 = v100;
        __int128 v73 = (void **)__p[0];
        sub_2CA1C(&theString, 1936745838LL);
        int v74 = __p;
        if (v72 < 0) {
          int v74 = v73;
        }
        if (v97 >= 0) {
          p_CFStringRef theString = &theString;
        }
        else {
          p_CFStringRef theString = (void *)theString;
        }
        buf.AudioObjectPropertySelector mSelector = 136316162;
        *(void *)&buf.mScope = "Device_Bluetooth_Aspen.cpp";
        __int16 v104 = 1024;
        int v105 = 901;
        __int16 v106 = 2080;
        uint64_t v107 = (const char *)v74;
        __int16 v108 = 2080;
        *(void *)char v109 = p_theString;
        *(_WORD *)&v109[8] = 1024;
        *(float *)&v109[10] = v18;
        _os_log_impl( &dword_0,  v71,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Bluetooth audio device with UID %s: setting %s to %u",  (uint8_t *)&buf,  0x2Cu);
        if (v97 < 0) {
          operator delete((void *)theString);
        }
        if (v100 < 0) {
          operator delete(__p[0]);
        }
        sub_19DFC((uint64_t)v98);
      }

      strcpy((char *)&buf, "nepsbolg");
      BYTE1(buf.mElement) = 0;
      HIWORD(buf.mElement) = 0;
      sub_3686A0(a1, &buf, 0, 0LL, v102, v94);
      unint64_t v76 = (dispatch_queue_s *)sub_869B4();
      unint64_t v77 = operator new(8uLL);
      *unint64_t v77 = a1;
      dispatch_async_f(v76, v77, (dispatch_function_t)sub_1AB46C);
    }

    else
    {
      uint64_t v50 = sub_138E8(17);
      uint64_t v51 = sub_138E8(28);
      char v52 = 0;
      uint64_t v53 = 0LL;
      *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002LL;
      uint64_t v54 = *(void *)(v50 + 8);
      while (1)
      {
        uint64_t v55 = *((int *)&buf.mSelector + v53);
        char v56 = v52;
        if (((v54 & v55) != 0) != ((*(void *)(v51 + 8) & v55) != 0)) {
          break;
        }
        char v52 = 1;
        uint64_t v53 = 1LL;
        if ((v56 & 1) != 0) {
          goto LABEL_75;
        }
      }

      if ((v54 & v55) == 0) {
        uint64_t v50 = v51;
      }
LABEL_75:
      __int128 v64 = *(os_log_s **)v50;
      if (v64 && os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)a1 + 128LL))(v98, a1);
        sub_48E98(__p, v98[0]);
        int v65 = v100;
        std::string::size_type v66 = (void **)__p[0];
        sub_2CA1C(&theString, 1936745838LL);
        __int16 v67 = __p;
        if (v65 < 0) {
          __int16 v67 = v66;
        }
        if (v97 >= 0) {
          uint64_t v68 = &theString;
        }
        else {
          uint64_t v68 = (void *)theString;
        }
        buf.AudioObjectPropertySelector mSelector = 136316162;
        *(void *)&buf.mScope = "Device_Bluetooth_Aspen.cpp";
        __int16 v104 = 1024;
        int v105 = 908;
        __int16 v106 = 2080;
        uint64_t v107 = (const char *)v67;
        __int16 v108 = 2080;
        *(void *)char v109 = v68;
        *(_WORD *)&v109[8] = 1024;
        *(float *)&v109[10] = v18;
        _os_log_impl( &dword_0,  v64,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Bluetooth audio device with UID %s: could not set %s to %u because spatial audio is not supported",  (uint8_t *)&buf,  0x2Cu);
        if (v97 < 0) {
          operator delete((void *)theString);
        }
        if (v100 < 0) {
          operator delete(__p[0]);
        }
        sub_19DFC((uint64_t)v98);
      }
    }
  }

  else if (v12 == 1869832547)
  {
    float v13 = *a6;
    if ((sub_14F834() & 1) == 0 && sub_EAA74("VA_SetOwnership", 0xFuLL) == &qword_4938E0)
    {
      unsigned int v15 = 0LL;
    }

    else
    {
      unsigned __int8 v14 = atomic_load((unsigned __int8 *)&qword_493908);
      if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
      {
        qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
        __cxa_guard_release(&qword_493908);
      }

      unsigned int v15 = (char *)os_signpost_id_generate((os_log_t)qword_493900);
      unsigned __int8 v16 = atomic_load((unsigned __int8 *)&qword_493908);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
      {
        qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
        __cxa_guard_release(&qword_493908);
      }

      if ((unint64_t)(v15 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v17 = (os_log_s *)qword_493900;
        if (os_signpost_enabled((os_log_t)qword_493900))
        {
          buf.AudioObjectPropertySelector mSelector = 67109120;
          *(float *)&buf.mScope = v13;
          _os_signpost_emit_with_name_impl( &dword_0,  v17,  OS_SIGNPOST_INTERVAL_BEGIN,  (os_signpost_id_t)v15,  "VA_SetOwnership",  "Setting kVirtualAudioPortPropertyOwnsSharedAudioConnection to %d",  (uint8_t *)&buf,  8u);
        }
      }
    }

    __p[0] = v15;
    uint64_t v69 = sub_138E8(42);
    if ((*(_BYTE *)(v69 + 8) & 1) != 0)
    {
      int v70 = *(os_log_s **)v69;
      if (*(void *)v69)
      {
        if (os_log_type_enabled(*(os_log_t *)v69, OS_LOG_TYPE_DEBUG))
        {
          buf.AudioObjectPropertySelector mSelector = 136315650;
          *(void *)&buf.mScope = "SignpostUtilities.h";
          __int16 v104 = 1024;
          int v105 = 76;
          __int16 v106 = 2080;
          uint64_t v107 = "kOwnsSharedConnection";
          _os_log_impl( &dword_0,  v70,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Starting measurement for signpost %s",  (uint8_t *)&buf,  0x1Cu);
        }
      }
    }

    sub_1AB114((uint64_t)&buf, a2);
    sub_3686A0(a1, &buf, a3, a4, a5, a6);
    sub_1AB2D4((os_signpost_id_t *)__p);
  }

  else
  {
    sub_1AB114((uint64_t)v94, a2);
    uint64_t v34 = sub_138E8(17);
    uint64_t v35 = sub_138E8(28);
    char v36 = 0;
    uint64_t v37 = 0LL;
    *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002LL;
    uint64_t v38 = *(void *)(v34 + 8);
    while (1)
    {
      uint64_t v39 = *((int *)&buf.mSelector + v37);
      char v40 = v36;
      if (((v38 & v39) != 0) != ((*(void *)(v35 + 8) & v39) != 0)) {
        break;
      }
      char v36 = 1;
      uint64_t v37 = 1LL;
      if ((v40 & 1) != 0) {
        goto LABEL_60;
      }
    }

    if ((v38 & v39) == 0) {
      uint64_t v34 = v35;
    }
LABEL_60:
    unint64_t v59 = *(os_log_s **)v34;
    if (v59 && os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)a1 + 128LL))(v98, a1);
      sub_48E98(__p, v98[0]);
      int v60 = v100;
      std::string v61 = (void **)__p[0];
      sub_2CA1C(&theString, LODWORD(v94[0]));
      std::string v62 = __p;
      if (v60 < 0) {
        std::string v62 = v61;
      }
      if (v97 >= 0) {
        std::string v63 = &theString;
      }
      else {
        std::string v63 = (void *)theString;
      }
      buf.AudioObjectPropertySelector mSelector = 136315906;
      *(void *)&buf.mScope = "Device_Bluetooth_Aspen.cpp";
      __int16 v104 = 1024;
      int v105 = 674;
      __int16 v106 = 2080;
      uint64_t v107 = (const char *)v62;
      __int16 v108 = 2080;
      *(void *)char v109 = v63;
      _os_log_impl( &dword_0,  v59,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Bluetooth audio device with UID %s: Setting Bluetooth property %s.",  (uint8_t *)&buf,  0x26u);
      if (v97 < 0) {
        operator delete((void *)theString);
      }
      if (v100 < 0) {
        operator delete(__p[0]);
      }
      sub_19DFC((uint64_t)v98);
    }

    sub_1AB114((uint64_t)&buf, a2);
    sub_3686A0(a1, &buf, a3, a4, a5, a6);
  }

void sub_1A5ED8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_19DFC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1A5F4C(void *a1)
{
  for (uint64_t i = 0LL; i != 17; ++i)
  {
    inAddress.AudioObjectPropertySelector mSelector = dword_401D18[i];
    *(void *)&inAddress.mScope = 1735159650LL;
    AudioObjectID v3 = (*(uint64_t (**)(void *))(*(void *)a1 + 120LL))(a1);
    AudioObjectRemovePropertyListener(v3, &inAddress, (AudioObjectPropertyListenerProc)sub_1A73C0, a1);
  }

  sub_1D0E48((uint64_t)a1);
  return sub_369228((uint64_t)a1);
}

uint64_t sub_1A5FE0(os_unfair_lock_s *a1)
{
  int v2 = (char *)operator new(0x18uLL);
  v5[1] = (unsigned int *)(v2 + 24);
  v5[2] = (unsigned int *)(v2 + 24);
  *(_OWORD *)int v2 = xmmword_403200;
  *((void *)v2 + 2) = 1735159650LL;
  v5[0] = (unsigned int *)v2;
  sub_1D0888((char *)a1, v5);
  for (uint64_t i = 0LL; i != 17; ++i)
    sub_1A6144(a1, dword_401D18[i]);
  sub_1A63F0((uint64_t)a1);
  if (sub_38A9E4((uint64_t)a1))
  {
    v6[0] = &off_4744B0;
    v6[1] = a1;
    v6[3] = v6;
  }

  operator delete(v2);
  return 1LL;
}

void sub_1A60D0(_Unwind_Exception *a1)
{
}

uint64_t sub_1A60E8(uint64_t a1)
{
  return *(void *)(a1 + 516);
}

uint64_t sub_1A60F4()
{
  return 1LL;
}

uint64_t sub_1A60FC()
{
  uint64_t v0 = sub_5954C();
  uint64_t v1 = operator new(0x10uLL);
  v1[2] = 0;
  *(void *)uint64_t v1 = &off_474B00;
  return (*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)v0 + 328LL))(v0, v1);
}

void sub_1A6144(void *a1, uint64_t a2)
{
  inAddress.AudioObjectPropertySelector mSelector = a2;
  *(void *)&inAddress.mScope = 1735159650LL;
  if ((*(unsigned int (**)(void *, AudioObjectPropertyAddress *))(*(void *)a1 + 16LL))(a1, &inAddress))
  {
    AudioObjectID v4 = (*(uint64_t (**)(void *))(*(void *)a1 + 120LL))(a1);
    uint64_t v5 = AudioObjectAddPropertyListener(v4, &inAddress, (AudioObjectPropertyListenerProc)sub_1A73C0, a1);
    if ((_DWORD)v5)
    {
      uint64_t v6 = sub_138E8(17);
      uint64_t v7 = sub_138E8(28);
      char v8 = 0;
      uint64_t v9 = 0LL;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
      uint64_t v10 = *(void *)(v6 + 8);
      while (1)
      {
        uint64_t v11 = *(int *)&buf[4 * v9];
        char v12 = v8;
        if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
          break;
        }
        char v8 = 1;
        uint64_t v9 = 1LL;
        if ((v12 & 1) != 0) {
          goto LABEL_9;
        }
      }

      if ((v10 & v11) == 0) {
        uint64_t v6 = v7;
      }
LABEL_9:
      float v13 = *(os_log_s **)v6;
      if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        unsigned __int8 v14 = v22;
        sub_2CA1C(v22, v5);
        if (v23 < 0) {
          unsigned __int8 v14 = (void **)v22[0];
        }
        sub_2CA1C(v20, a2);
        if (v21 >= 0) {
          unsigned int v15 = v20;
        }
        else {
          unsigned int v15 = (void **)v20[0];
        }
        (*(void (**)(CFStringRef *__return_ptr, void *))(*(void *)a1 + 128LL))(theString, a1);
        sub_48E98(__p, theString[0]);
        if (v19 >= 0) {
          unsigned __int8 v16 = __p;
        }
        else {
          unsigned __int8 v16 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
        *(void *)&uint8_t buf[4] = "Device_Bluetooth_Aspen.cpp";
        __int16 v26 = 1024;
        int v27 = 927;
        __int16 v28 = 1024;
        int v29 = v5;
        __int16 v30 = 2080;
        uint64_t v31 = v14;
        __int16 v32 = 2080;
        char v33 = v15;
        __int16 v34 = 2080;
        uint64_t v35 = v16;
        _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error %d ('%s') adding property %s listener to bluetooth device with UID %s",  buf,  0x36u);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
        sub_19DFC((uint64_t)theString);
        if (v21 < 0) {
          operator delete(v20[0]);
        }
        if (v23 < 0) {
          operator delete(v22[0]);
        }
      }
    }
  }

void sub_1A63A4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void sub_1A63F0(uint64_t a1)
{
  int v2 = (dispatch_queue_s *)sub_869B4();
  AudioObjectID v3 = operator new(8uLL);
  *AudioObjectID v3 = a1;
  dispatch_async_f(v2, v3, (dispatch_function_t)sub_1A649C);
}

void *sub_1A643C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_4744B0;
  result[1] = v3;
  return result;
}

uint64_t sub_1A6470(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_4744B0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1A648C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 472LL))(*(void *)(a1 + 8));
}

void sub_1A649C(uint64_t *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *a1;
  if ((sub_14F834() & 1) == 0 && sub_EAA74("VA_HandleInEarStatusEvent", 0x19uLL) == &qword_4938E0)
  {
    os_signpost_id_t v4 = 0LL;
  }

  else
  {
    unsigned __int8 v3 = atomic_load((unsigned __int8 *)&qword_493908);
    if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
    {
      qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_493908);
    }

    os_signpost_id_t v4 = os_signpost_id_generate((os_log_t)qword_493900);
    unsigned __int8 v5 = atomic_load((unsigned __int8 *)&qword_493908);
    if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
    {
      qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_493908);
    }

    if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v6 = (os_log_s *)qword_493900;
      if (os_signpost_enabled((os_log_t)qword_493900))
      {
        unint64_t v7 = sub_1A6D54(*(_DWORD *)(v2 + 268));
        if (HIDWORD(v7) == 1) {
          int v9 = 1;
        }
        else {
          int v9 = 2;
        }
        if ((_DWORD)v7 == 1) {
          int v10 = 1;
        }
        else {
          int v10 = v9;
        }
        if ((_DWORD)v7 == -1 || (v8 & 0xFF00000000LL) == 0) {
          int v12 = -1;
        }
        else {
          int v12 = v10;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v12;
        _os_signpost_emit_with_name_impl( &dword_0,  v6,  OS_SIGNPOST_INTERVAL_BEGIN,  v4,  "VA_HandleInEarStatusEvent",  "Updating InEarStatus for BT ports because headset status is %d",  buf,  8u);
      }
    }
  }

  os_signpost_id_t v51 = v4;
  uint64_t v13 = sub_138E8(42);
  if ((*(_BYTE *)(v13 + 8) & 1) != 0)
  {
    unsigned __int8 v14 = *(os_log_s **)v13;
    if (*(void *)v13)
    {
      if (os_log_type_enabled(*(os_log_t *)v13, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "SignpostUtilities.h";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 79;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = "kInEarStatusEvent";
        _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d Starting measurement for signpost %s", buf, 0x1Cu);
      }
    }
  }

  unsigned int v15 = *(_DWORD *)(v2 + 500);
  unsigned int v16 = *(_DWORD *)(v2 + 504);
  int v17 = *(_DWORD *)(v2 + 508);
  int v18 = *(unsigned __int8 *)(v2 + 512);
  uint64_t v19 = sub_1A6D54(*(_DWORD *)(v2 + 268));
  uint64_t v21 = v19;
  int v22 = v20;
  BOOL v24 = v15 == (_DWORD)v19 && v16 == HIDWORD(v19) && v17 == (_DWORD)v20;
  if (!v24 || v18 != BYTE4(v20))
  {
    *(void *)(v2 + 500) = v19;
    *(_DWORD *)(v2 + 508) = v20;
    unint64_t v43 = HIDWORD(v20);
    *(_BYTE *)(v2 + 512) = BYTE4(v20);
    uint64_t v25 = sub_138E8(17);
    uint64_t v26 = sub_138E8(28);
    char v27 = 0;
    uint64_t v28 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v29 = *(void *)(v25 + 8);
    while (1)
    {
      uint64_t v30 = *(int *)&buf[4 * v28];
      char v31 = v27;
      if (((v29 & v30) != 0) != ((*(void *)(v26 + 8) & v30) != 0)) {
        break;
      }
      char v27 = 1;
      uint64_t v28 = 1LL;
      if ((v31 & 1) != 0) {
        goto LABEL_40;
      }
    }

    if ((v29 & v30) == 0) {
      uint64_t v25 = v26;
    }
LABEL_40:
    __int16 v32 = *(os_log_s **)v25;
    if (v32 && os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      int v42 = v1;
      (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)v2 + 128LL))(theString, v2);
      char v41 = v18;
      sub_48E98(&v44, theString[0]);
      int v33 = SHIBYTE(v47);
      __int16 v34 = (void **)v44;
      sub_F9154(&__p, v2 + 500);
      uint64_t v35 = &v44;
      if (v33 < 0) {
        uint64_t v35 = v34;
      }
      p_p = &__p;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_Bluetooth_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 724;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v35;
      *(_WORD *)&_BYTE buf[28] = 2080;
      uint64_t v54 = p_p;
      _os_log_impl( &dword_0,  v32,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Bluetooth device with UID %s: headset status %s",  buf,  0x26u);
      uint64_t v1 = v42;
      LOBYTE(v18) = v41;
      if (SHIBYTE(v47) < 0) {
        operator delete(v44);
      }
      sub_19DFC((uint64_t)theString);
    }

    memset(buf, 0, 24);
    strcpy(&buf[24], "cwdv");
    BYTE2(v54) = 0;
    int v55 = 3;
    v57[0] = 0LL;
    v57[1] = 0LL;
    char v56 = v57;
    CFTypeRef cf = 0LL;
    int v58 = 44731050;
    sub_3710DC((uint64_t *)&__p, v2, (uint64_t)buf);
    if (cf) {
      CFRelease(cf);
    }
    sub_32C8C(v57[0]);
    if (*(void *)buf)
    {
      *(void *)&_DWORD buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }

    std::string::size_type size = (std::string *)__p.__r_.__value_.__l.__size_;
    uint64_t v44 = (void *)__PAIR64__(v16, v15);
    int v45 = v17;
    char v46 = v18;
    uint64_t v47 = v21;
    int v48 = v22;
    for (char i = v43; size != &__p; size = (std::string *)size->__r_.__value_.__l.__size_)
    {
      sub_B8CBC((uint64_t *)theString, (uint64_t *)&size->__r_.__value_.__l.__cap_, "", 729);
      uint64_t v38 = (std::__shared_weak_count *)theString[1];
      (*((void (**)(CFStringRef, void **, uint64_t *))theString[0]->isa + 68))(theString[0], &v44, &v47);
      if (v38)
      {
        p_shared_owners = (unint64_t *)&v38->__shared_owners_;
        do
          unint64_t v40 = __ldaxr(p_shared_owners);
        while (__stlxr(v40 - 1, p_shared_owners));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
    }

    sub_85B80((uint64_t *)&__p);
  }

  sub_1A6F44(&v51);
  operator delete(v1);
}

void sub_1A69F4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, os_signpost_id_t a23, __int16 a24, char a25, char a26, uint64_t a27, uint64_t buf, int a29, __int16 a30, int a31, int a32, uint64_t a33, __int16 a34, __int16 a35, int a36, uint64_t a37, int a38, uint64_t a39, uint64_t a40, uint64_t a41, CFTypeRef cf)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_19DFC((uint64_t)&a24);
  sub_1A6F44(&a23);
  if (a2 == 3)
  {
    uint64_t v44 = __cxa_begin_catch(exception_object);
    int v45 = (os_log_t *)sub_138E8(13);
    os_log_t v46 = *v45;
    if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_ERROR))
    {
      int v47 = v44[2];
      LODWORD(buf) = 136316162;
      *(uint64_t *)((char *)&buf + 4) = (uint64_t)"StandardUtilities.h";
      a30 = 1024;
      *(_DWORD *)(&a30 + 1) = 429;
      HIWORD(a31) = 1024;
      a32 = v47;
      LOWORD(a33) = 2080;
      *(uint64_t *)((char *)&a33 + 2) = (uint64_t)"";
      a35 = 1024;
      a36 = 98;
      int v48 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      char v49 = v46;
      uint32_t v50 = 40;
LABEL_17:
      _os_log_impl(&dword_0, v49, OS_LOG_TYPE_ERROR, v48, (uint8_t *)&buf, v50);
    }
  }

  else
  {
    os_signpost_id_t v51 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      char v52 = v51;
      uint64_t v53 = (os_log_t *)sub_138E8(13);
      os_log_t v54 = *v53;
      if (*v53 && os_log_type_enabled(*v53, OS_LOG_TYPE_ERROR))
      {
        uint64_t v55 = (*(uint64_t (**)(void *))(*(void *)v52 + 16LL))(v52);
        LODWORD(buf) = 136316162;
        *(uint64_t *)((char *)&buf + 4) = (uint64_t)"StandardUtilities.h";
        a30 = 1024;
        *(_DWORD *)(&a30 + 1) = 430;
        HIWORD(a31) = 2080;
        *(void *)(&a31 + 1) = v55;
        WORD2(a33) = 2080;
        *(uint64_t *)((char *)&a33 + 6) = (uint64_t)"";
        HIWORD(a36) = 1024;
        LODWORD(a37) = 98;
        int v48 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        char v49 = v54;
        uint32_t v50 = 44;
        goto LABEL_17;
      }
    }

    else
    {
      char v56 = (os_log_t *)sub_138E8(13);
      os_log_t v57 = *v56;
      if (*v56 && os_log_type_enabled(*v56, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(uint64_t *)((char *)&buf + 4) = (uint64_t)"StandardUtilities.h";
        a30 = 1024;
        *(_DWORD *)(&a30 + 1) = 431;
        HIWORD(a31) = 2080;
        *(void *)(&a31 + 1) = "";
        WORD2(a33) = 1024;
        *(_DWORD *)((char *)&a33 + 6) = 98;
        int v48 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        char v49 = v57;
        uint32_t v50 = 34;
        goto LABEL_17;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x1A6940LL);
}

void sub_1A6D1C( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
}

uint64_t sub_1A6D54(AudioObjectID a1)
{
  *(void *)&v17.AudioObjectPropertySelector mSelector = 0x676C6F6269656465LL;
  v17.mElement = 0;
  if (AudioObjectHasProperty(a1, &v17))
  {
    v17.mElement = 0;
    AudioObjectID v18 = a1;
    *(void *)&v17.AudioObjectPropertySelector mSelector = 0x676C6F6269657370LL;
    unint64_t v3 = sub_36EF4(&v18, &v17, 0, 0LL);
    if ((_DWORD)v3 || !v2)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_4865A0;
      exception[2] = v3;
    }

    else
    {
      v17.mElement = 0;
      AudioObjectID v18 = a1;
      *(void *)&v17.AudioObjectPropertySelector mSelector = 0x676C6F6269657373LL;
      unint64_t v5 = sub_36EF4(&v18, &v17, 0, 0LL);
      if ((_DWORD)v5 || !v4)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &off_4865A0;
        exception[2] = v5;
      }

      else
      {
        v17.mElement = 0;
        AudioObjectID v18 = a1;
        *(void *)&v17.AudioObjectPropertySelector mSelector = 0x676C6F6270726973LL;
        unint64_t v7 = sub_36EF4(&v18, &v17, 0, 0LL);
        if ((_DWORD)v7 || !v6)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          *(void *)exception = &off_4865A0;
          exception[2] = v7;
        }

        else
        {
          v17.mElement = 0;
          AudioObjectID v18 = a1;
          *(void *)&v17.AudioObjectPropertySelector mSelector = 0x676C6F6269656465LL;
          int v9 = sub_36EF4(&v18, &v17, 0, 0LL);
          if (!v9 && v8)
          {
            unint64_t v10 = HIDWORD(v3);
            unint64_t v11 = HIDWORD(v5);
            unint64_t v12 = HIDWORD(v7);
            unsigned int v13 = sub_1A70DC(v10);
            uint64_t v14 = sub_1A70DC(v11);
            sub_1A724C(v12);
            return v13 | (unint64_t)(v14 << 32);
          }

          exception = __cxa_allocate_exception(0x10uLL);
          *(void *)exception = &off_4865A0;
          exception[2] = v9;
        }
      }
    }
  }

  return -1LL;
}

os_signpost_id_t *sub_1A6F44(os_signpost_id_t *a1)
{
  uint64_t v2 = sub_138E8(42);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    unint64_t v3 = *(os_log_s **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v8 = 136315650;
        int v9 = "SignpostUtilities.h";
        __int16 v10 = 1024;
        int v11 = 79;
        __int16 v12 = 2080;
        unsigned int v13 = "kInEarStatusEvent";
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Ending measurement for signpost %s",  (uint8_t *)&v8,  0x1Cu);
      }
    }
  }

  if (*a1)
  {
    unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_493908);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
    {
      qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_493908);
    }

    os_signpost_id_t v5 = *a1;
    if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      char v6 = (os_log_s *)qword_493900;
      if (os_signpost_enabled((os_log_t)qword_493900))
      {
        LOWORD(v8) = 0;
        _os_signpost_emit_with_name_impl( &dword_0,  v6,  OS_SIGNPOST_INTERVAL_END,  v5,  "VA_HandleInEarStatusEvent",  (const char *)&unk_420CC6,  (uint8_t *)&v8,  2u);
      }
    }
  }

  return a1;
}

void sub_1A70D0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

uint64_t sub_1A70DC(unsigned int a1)
{
  if (a1 >= 4)
  {
    unint64_t v3 = (os_log_t *)sub_138E8(13);
    unsigned __int8 v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, 1768256368LL);
      if (v8 >= 0) {
        os_signpost_id_t v5 = __p;
      }
      else {
        os_signpost_id_t v5 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      __int16 v10 = "Device_Bluetooth_Aspen.cpp";
      __int16 v11 = 1024;
      int v12 = 228;
      __int16 v13 = 1024;
      unsigned int v14 = a1;
      __int16 v15 = 2080;
      unsigned int v16 = v5;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unknown value (%u) for Bluetooth property (%s)",  buf,  0x22u);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unknown value (%u) for Bluetooth property (%s)");
  }

  return dword_401D5C[a1];
}

void sub_1A7230(_Unwind_Exception *a1)
{
}

uint64_t sub_1A724C(int a1)
{
  if ((a1 - 1) >= 3)
  {
    unint64_t v3 = (os_log_t *)sub_138E8(13);
    unsigned __int8 v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, 1886546291LL);
      if (v8 >= 0) {
        os_signpost_id_t v5 = __p;
      }
      else {
        os_signpost_id_t v5 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      __int16 v10 = "Device_Bluetooth_Aspen.cpp";
      __int16 v11 = 1024;
      int v12 = 246;
      __int16 v13 = 1024;
      int v14 = a1;
      __int16 v15 = 2080;
      unsigned int v16 = v5;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unknown value (%u) for Bluetooth property (%s)",  buf,  0x22u);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unknown value (%u) for Bluetooth property (%s)");
  }

  return dword_401D6C[a1 - 1];
}

void sub_1A73A4(_Unwind_Exception *a1)
{
}

uint64_t sub_1A73C0(uint64_t a1, unsigned int a2, uint64_t a3, os_unfair_lock_s *a4)
{
  if (a2)
  {
    uint64_t v6 = 0LL;
    uint64_t v7 = a2;
    do
    {
      uint64_t v8 = sub_138E8(17);
      uint64_t v9 = sub_138E8(28);
      char v10 = 0;
      uint64_t v11 = 0LL;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
      uint64_t v12 = *(void *)(v8 + 8);
      while (1)
      {
        uint64_t v13 = *(int *)&buf[4 * v11];
        char v14 = v10;
        if (((v12 & v13) != 0) != ((*(void *)(v9 + 8) & v13) != 0)) {
          break;
        }
        char v10 = 1;
        uint64_t v11 = 1LL;
        if ((v14 & 1) != 0) {
          goto LABEL_9;
        }
      }

      if ((v12 & v13) == 0) {
        uint64_t v8 = v9;
      }
LABEL_9:
      __int16 v15 = *(os_log_s **)v8;
      if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        sub_2CA1C(v69, *(unsigned int *)(a3 + 12 * v6));
        if (v70 >= 0) {
          unsigned int v16 = v69;
        }
        else {
          unsigned int v16 = (void **)v69[0];
        }
        (*(void (**)(CFStringRef *__return_ptr, os_unfair_lock_s *))(*(void *)&a4->_os_unfair_lock_opaque
                                                                              + 128LL))( theString,  a4);
        sub_48E98(__p, theString[0]);
        AudioObjectPropertyAddress v17 = __p;
        if (v68 < 0) {
          AudioObjectPropertyAddress v17 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "Device_Bluetooth_Aspen.cpp";
        __int16 v72 = 1024;
        int v73 = 946;
        __int16 v74 = 2080;
        __int128 v75 = v16;
        __int16 v76 = 2080;
        unint64_t v77 = v17;
        _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Received notification (%s) from bluetooth audio device with UID %s",  buf,  0x26u);
        if (v68 < 0) {
          operator delete(__p[0]);
        }
        sub_19DFC((uint64_t)theString);
        if (v70 < 0) {
          operator delete(v69[0]);
        }
      }

      AudioObjectID v18 = (int *)(a3 + 12 * v6);
      int v19 = *v18;
      if (*v18 <= 1768256367)
      {
        if (v19 <= 1685283694)
        {
          if (v19 <= 1668051826)
          {
            if (v19 == 1650549606)
            {
              uint64_t v47 = sub_869B4();
              int v22 = operator new(8uLL);
              *int v22 = a4;
              char v23 = (dispatch_queue_s *)v47;
              BOOL v24 = (void (__cdecl *)(void *))sub_1AA3A0;
            }

            else
            {
              if (v19 != 1651466595) {
                goto LABEL_76;
              }
              uint64_t v33 = sub_869B4();
              int v22 = operator new(8uLL);
              *int v22 = a4;
              char v23 = (dispatch_queue_s *)v33;
              BOOL v24 = (void (__cdecl *)(void *))sub_1A9858;
            }

            goto LABEL_72;
          }

          if (v19 == 1668051827) {
            goto LABEL_64;
          }
          if (v19 != 1668506479) {
            goto LABEL_76;
          }
          sub_1A7C7C(a4, 1);
        }

        else
        {
          if (v19 > 1752327776)
          {
            if (v19 != 1752327777 && v19 != 1752462195)
            {
              if (v19 != 1768252517) {
                goto LABEL_76;
              }
              uint64_t v21 = sub_869B4();
              int v22 = operator new(8uLL);
              *int v22 = a4;
              char v23 = (dispatch_queue_s *)v21;
              BOOL v24 = (void (__cdecl *)(void *))sub_1AA8E4;
              goto LABEL_72;
            }

            goto LABEL_64;
          }

          if (v19 == 1685283695)
          {
            sub_1A7C7C(a4, 0);
          }

          else
          {
            if (v19 != 1718772584) {
              goto LABEL_76;
            }
            dispatch_time_t v35 = dispatch_time(0LL, 0LL);
            char v36 = (dispatch_queue_s *)sub_869B4();
            dispatch_after(v35, v36, &stru_474480);
          }
        }
      }

      else
      {
        if (v19 > 1936745317)
        {
          if (v19 <= 1936747875)
          {
            if (v19 != 1936745318 && v19 != 1936746611) {
              goto LABEL_76;
            }
          }

          else if (v19 != 1936747876)
          {
            if (v19 == 1936747877)
            {
              uint64_t v40 = sub_138E8(17);
              uint64_t v41 = sub_138E8(28);
              char v42 = 0;
              uint64_t v43 = 0LL;
              *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
              uint64_t v44 = *(void *)(v40 + 8);
              while (1)
              {
                uint64_t v45 = *(int *)&buf[4 * v43];
                char v46 = v42;
                if (((v44 & v45) != 0) != ((*(void *)(v41 + 8) & v45) != 0)) {
                  break;
                }
                char v42 = 1;
                uint64_t v43 = 1LL;
                if ((v46 & 1) != 0) {
                  goto LABEL_82;
                }
              }

              if ((v44 & v45) == 0) {
                uint64_t v40 = v41;
              }
LABEL_82:
              uint64_t v55 = *(os_log_s **)v40;
              if (v55 && os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                *(void *)&uint8_t buf[4] = "Device_Bluetooth_Aspen.cpp";
                __int16 v72 = 1024;
                int v73 = 991;
                _os_log_impl(&dword_0, v55, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Handling PME update from buds", buf, 0x12u);
              }

              sub_1A8240((uint64_t)a4, *v18);
              (*(void (**)(os_unfair_lock_s *))(*(void *)&a4->_os_unfair_lock_opaque + 472LL))(a4);
              goto LABEL_73;
            }

            if (v19 == 1970496630)
            {
              AudioObjectID v25 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a4->_os_unfair_lock_opaque + 120LL))(a4);
              atomic_store(sub_1A9524(v25), &a4[123]._os_unfair_lock_opaque);
              uint64_t v26 = sub_138E8(17);
              uint64_t v27 = sub_138E8(28);
              char v28 = 0;
              uint64_t v29 = 0LL;
              *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
              uint64_t v30 = *(void *)(v26 + 8);
              while (1)
              {
                uint64_t v31 = *(int *)&buf[4 * v29];
                char v32 = v28;
                if (((v30 & v31) != 0) != ((*(void *)(v27 + 8) & v31) != 0)) {
                  break;
                }
                char v28 = 1;
                uint64_t v29 = 1LL;
                if ((v32 & 1) != 0) {
                  goto LABEL_98;
                }
              }

              if ((v30 & v31) == 0) {
                uint64_t v26 = v27;
              }
LABEL_98:
              std::string v61 = *(os_log_s **)v26;
              if (!v61 || !os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_73;
              }
              uint64_t v62 = atomic_load(&a4[123]._os_unfair_lock_opaque);
              sub_2CA1C(v69, v62);
              if (v70 >= 0) {
                std::string v63 = v69;
              }
              else {
                std::string v63 = (void **)v69[0];
              }
              (*(void (**)(CFStringRef *__return_ptr, os_unfair_lock_s *))(*(void *)&a4->_os_unfair_lock_opaque
                                                                                    + 128LL))( theString,  a4);
              sub_48E98(__p, theString[0]);
              __int128 v64 = __p;
              if (v68 < 0) {
                __int128 v64 = (void **)__p[0];
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
              *(void *)&uint8_t buf[4] = "Device_Bluetooth_Aspen.cpp";
              __int16 v72 = 1024;
              int v73 = 816;
              __int16 v74 = 2080;
              __int128 v75 = v63;
              __int16 v76 = 2080;
              unint64_t v77 = v64;
              unint64_t v59 = v61;
              int v60 = "%25s:%-5d Device category changed to '%s' for bluetooth audio device with UID %s";
            }

            else
            {
LABEL_76:
              uint64_t v48 = sub_138E8(17);
              uint64_t v49 = sub_138E8(28);
              char v50 = 0;
              uint64_t v51 = 0LL;
              *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
              uint64_t v52 = *(void *)(v48 + 8);
              while (1)
              {
                uint64_t v53 = *(int *)&buf[4 * v51];
                char v54 = v50;
                if (((v52 & v53) != 0) != ((*(void *)(v49 + 8) & v53) != 0)) {
                  break;
                }
                char v50 = 1;
                uint64_t v51 = 1LL;
                if ((v54 & 1) != 0) {
                  goto LABEL_88;
                }
              }

              if ((v52 & v53) == 0) {
                uint64_t v48 = v49;
              }
LABEL_88:
              char v56 = *(os_log_s **)v48;
              if (!v56 || !os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_73;
              }
              sub_2CA1C(v69, *v18);
              if (v70 >= 0) {
                os_log_t v57 = v69;
              }
              else {
                os_log_t v57 = (void **)v69[0];
              }
              (*(void (**)(CFStringRef *__return_ptr, os_unfair_lock_s *))(*(void *)&a4->_os_unfair_lock_opaque
                                                                                    + 128LL))( theString,  a4);
              sub_48E98(__p, theString[0]);
              int v58 = __p;
              if (v68 < 0) {
                int v58 = (void **)__p[0];
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
              *(void *)&uint8_t buf[4] = "Device_Bluetooth_Aspen.cpp";
              __int16 v72 = 1024;
              int v73 = 998;
              __int16 v74 = 2080;
              __int128 v75 = v57;
              __int16 v76 = 2080;
              unint64_t v77 = v58;
              unint64_t v59 = v56;
              int v60 = "%25s:%-5d Unhandled notification (%s) from bluetooth audio device with UID %s";
            }

            _os_log_impl(&dword_0, v59, OS_LOG_TYPE_DEFAULT, v60, buf, 0x26u);
            if (v68 < 0) {
              operator delete(__p[0]);
            }
            sub_19DFC((uint64_t)theString);
            if (v70 < 0) {
              operator delete(v69[0]);
            }
            goto LABEL_73;
          }

void sub_1A7C18( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1A7C7C(os_unfair_lock_s *a1, int a2)
{
  uint64_t v4 = sub_138E8(17);
  uint64_t v5 = sub_138E8(28);
  char v6 = 0;
  uint64_t v7 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = *(int *)&buf[4 * v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1LL;
    if ((v10 & 1) != 0) {
      goto LABEL_7;
    }
  }

  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
LABEL_7:
  uint64_t v11 = *(os_log_s **)v4;
  if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = a2 ? "take" : "relinquish";
    sub_23FE8((uint64_t)&__p, a1 + 2);
    uint64_t v13 = SHIBYTE(v32) >= 0 ? &__p : (void **)__p;
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "Device_Bluetooth_Aspen.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 685;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&buf[20] = v12;
    *(_WORD *)&_BYTE buf[28] = 2080;
    *(void *)&_BYTE buf[30] = v13;
    _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Bluetooth initiated %s request on physical device %s.",  buf,  0x26u);
    if (SHIBYTE(v32) < 0) {
      operator delete(__p);
    }
  }

  char v14 = operator new(8uLL);
  *char v14 = 0x70687062706D6274LL;
  uint64_t v41 = v14;
  char v42 = v14 + 1;
  uint64_t v43 = v14 + 1;
  strcpy((char *)&v44, "cwdv");
  char v45 = 0;
  int v46 = 3;
  v48[0] = 0LL;
  v48[1] = 0LL;
  uint64_t v47 = v48;
  int v49 = 44739242;
  CFTypeRef cf = 0LL;
  if (!a2 || !sub_14EBAC()) {
    goto LABEL_31;
  }
  sub_203048((uint64_t *)&__p, &v41);
  if (!v32)
  {
    sub_85B80((uint64_t *)&__p);
LABEL_31:
    std::string __p = a1;
    uint64_t v31 = 0LL;
    char v32 = 0LL;
    uint64_t v33 = 0LL;
    sub_7A5B8(&v31, v41, (uint64_t)v42, (v42 - (_BYTE *)v41) >> 2);
    uint64_t v34 = v44;
    char v35 = v45;
    int v36 = v46;
    sub_86550(v37, (uint64_t)&v47);
    int v38 = v49;
    CFTypeRef v24 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v39 = v24;
    char v40 = a2;
    AudioObjectID v25 = (dispatch_queue_s *)sub_869B4();
    *(void *)AudioObjectPropertyAddress buf = __p;
    memset(&buf[8], 0, 24);
    sub_7A5B8(&buf[8], v31, (uint64_t)v32, (v32 - (_BYTE *)v31) >> 2);
    *(void *)&buf[32] = v34;
    char v53 = v35;
    int v54 = v36;
    sub_86550(v55, (uint64_t)v37);
    int v56 = v38;
    CFTypeRef v26 = v39;
    if (v39) {
      CFRetain(v39);
    }
    CFTypeRef v57 = v26;
    char v58 = v40;
    uint64_t v27 = operator new(0x68uLL);
    v27[1] = 0LL;
    char v28 = *(const void **)&buf[8];
    void *v27 = *(void *)buf;
    v27[2] = 0LL;
    v27[3] = 0LL;
    sub_7A5B8(v27 + 1, v28, *(uint64_t *)&buf[16], (uint64_t)(*(void *)&buf[16] - (void)v28) >> 2);
    v27[4] = *(void *)&buf[32];
    *((_BYTE *)v27 + 40) = v53;
    *((_DWORD *)v27 + 12) = v54;
    sub_86550(v27 + 7, (uint64_t)v55);
    *((_DWORD *)v27 + 20) = v56;
    CFTypeRef v29 = v57;
    if (v57) {
      CFRetain(v57);
    }
    v27[11] = v29;
    *((_BYTE *)v27 + 96) = v58;
    uint64_t v51 = 0LL;
    dispatch_async_f(v25, v27, (dispatch_function_t)sub_1AAD74);
    sub_1AB070(&v51);
    if (v57) {
      CFRelease(v57);
    }
    sub_32C8C((void *)v55[1]);
    if (*(void *)&buf[8])
    {
      *(void *)&buf[16] = *(void *)&buf[8];
      operator delete(*(void **)&buf[8]);
    }

    if (v39) {
      CFRelease(v39);
    }
    sub_32C8C((void *)v37[1]);
    if (v31)
    {
      char v32 = v31;
      operator delete(v31);
    }

    goto LABEL_45;
  }

  uint64_t v15 = sub_138E8(17);
  uint64_t v16 = sub_138E8(28);
  char v17 = 0;
  uint64_t v18 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v19 = *(void *)(v15 + 8);
  while (1)
  {
    uint64_t v20 = *(int *)&buf[4 * v18];
    char v21 = v17;
    if (((v19 & v20) != 0) != ((*(void *)(v16 + 8) & v20) != 0)) {
      break;
    }
    char v17 = 1;
    uint64_t v18 = 1LL;
    if ((v21 & 1) != 0) {
      goto LABEL_27;
    }
  }

  if ((v19 & v20) == 0) {
    uint64_t v15 = v16;
  }
LABEL_27:
  int v22 = *(os_log_s **)v15;
  if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "Device_Bluetooth_Aspen.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 695;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&buf[20] = "take";
    _os_log_impl(&dword_0, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Ignoring Bluetooth initiated %s request.", buf, 0x1Cu);
  }

  char v23 = v32;
  sub_85B80((uint64_t *)&__p);
  if (!v23) {
    goto LABEL_31;
  }
LABEL_45:
  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(v48[0]);
  if (v41)
  {
    char v42 = v41;
    operator delete(v41);
  }

void sub_1A818C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23)
{
}

void sub_1A8240(uint64_t a1, int a2)
{
  uint64_t v4 = (dispatch_queue_s *)sub_869B4();
  uint64_t v5 = operator new(0x10uLL);
  *(void *)uint64_t v5 = a1;
  v5[2] = a2;
  dispatch_async_f(v4, v5, (dispatch_function_t)sub_1A82FC);
}

void sub_1A8294(id a1)
{
  uint64_t v1 = sub_5954C();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v1 + 304LL))(v1))
  {
    uint64_t v2 = sub_5954C();
    unint64_t v3 = operator new(0x10uLL);
    v3[2] = 0;
    *(void *)unint64_t v3 = &off_474BC0;
    (*(void (**)(uint64_t, _DWORD *))(*(void *)v2 + 328LL))(v2, v3);
  }

void sub_1A82FC(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  sub_371034((uint64_t *)buf, *(void *)a1);
  sub_EDD50(&v20, buf);
  sub_85B80((uint64_t *)buf);
  for (char i = v21; i != &v20; char i = (uint64_t *)i[1])
  {
    uint64_t v5 = i[2];
    uint64_t v4 = (std::__shared_weak_count *)i[3];
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        unint64_t v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }

    uint64_t v8 = sub_138E8(17);
    uint64_t v9 = sub_138E8(28);
    char v10 = 0;
    uint64_t v11 = 0LL;
    __p[0] = (void *)0x100000002LL;
    uint64_t v12 = *(void *)(v8 + 8);
    while (1)
    {
      uint64_t v13 = *((int *)__p + v11);
      char v14 = v10;
      if (((v12 & v13) != 0) != ((*(void *)(v9 + 8) & v13) != 0)) {
        break;
      }
      char v10 = 1;
      uint64_t v11 = 1LL;
      if ((v14 & 1) != 0) {
        goto LABEL_11;
      }
    }

    if ((v12 & v13) == 0) {
      uint64_t v8 = v9;
    }
LABEL_11:
    uint64_t v15 = *(os_log_s **)v8;
    if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      sub_2CA1C(v23, *(unsigned int *)(a1 + 8));
      if (v24 >= 0) {
        uint64_t v16 = v23;
      }
      else {
        uint64_t v16 = (void **)v23[0];
      }
      (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)v2 + 128LL))(theString, v2);
      sub_48E98(__p, theString[0]);
      if (v26 >= 0) {
        char v17 = __p;
      }
      else {
        char v17 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      char v28 = "Device_Bluetooth_Aspen.cpp";
      __int16 v29 = 1024;
      int v30 = 885;
      __int16 v31 = 2080;
      char v32 = v16;
      __int16 v33 = 2080;
      uint64_t v34 = v17;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Bluetooth property %s has changed for BT device UID %s",  buf,  0x26u);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
      sub_19DFC((uint64_t)theString);
      if (v24 < 0) {
        operator delete(v23[0]);
      }
    }

    LODWORD(v23[0]) = *(_DWORD *)(a1 + 8);
    sub_8ED70(buf, (uint64_t)v23, 1LL);
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v5 + 448LL))(v5, buf);
    sub_68314(buf);
    if (v4)
    {
      uint64_t v18 = (unint64_t *)&v4->__shared_owners_;
      do
        unint64_t v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }

  sub_1BB88(&v20);
  operator delete((void *)a1);
}

void sub_1A85B4( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, ...)
{
  __int128 buf = va_arg(va1, _OWORD);
  __int128 v30 = va_arg(va1, _OWORD);
  uint64_t v31 = va_arg(va1, void);
  uint64_t v32 = va_arg(va1, void);
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_85B80((uint64_t *)va1);
  if (a2 == 3)
  {
    char v14 = __cxa_begin_catch(a1);
    uint64_t v15 = (os_log_t *)sub_138E8(13);
    os_log_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      int v17 = v14[2];
      LODWORD(buf) = 136316162;
      *(void *)(bufa + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)(bufa + 14) = 429;
      WORD1(v30) = 1024;
      DWORD1(v30) = v17;
      WORD4(v30) = 2080;
      *(void *)((char *)&v30 + 10) = "";
      WORD1(v31) = 1024;
      HIDWORD(v31) = 98;
      uint64_t v18 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      unint64_t v19 = v16;
      uint32_t v20 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v19, OS_LOG_TYPE_ERROR, v18, (uint8_t *)bufa, v20);
    }
  }

  else
  {
    char v21 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      int v22 = v21;
      char v23 = (os_log_t *)sub_138E8(13);
      os_log_t v24 = *v23;
      if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
      {
        uint64_t v25 = (*(uint64_t (**)(void *))(*(void *)v22 + 16LL))(v22);
        LODWORD(buf) = 136316162;
        *(void *)(bufa + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)(bufa + 14) = 430;
        WORD1(v30) = 2080;
        *(void *)((char *)&v30 + 4) = v25;
        WORD6(v30) = 2080;
        *(void *)((char *)&v30 + 14) = "";
        HIWORD(v31) = 1024;
        LODWORD(v32) = 98;
        uint64_t v18 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        unint64_t v19 = v24;
        uint32_t v20 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      char v26 = (os_log_t *)sub_138E8(13);
      os_log_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)(bufa + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)(bufa + 14) = 431;
        WORD1(v30) = 2080;
        *(void *)((char *)&v30 + 4) = "";
        WORD6(v30) = 1024;
        *(_DWORD *)((char *)&v30 + 14) = 98;
        uint64_t v18 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        unint64_t v19 = v27;
        uint32_t v20 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x1A856CLL);
}

void sub_1A88B0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  sub_371034(v38, *a1);
  sub_EDD50(&v29, v38);
  sub_85B80(v38);
  for (char i = v30; i != &v29; char i = (uint64_t *)i[1])
  {
    uint64_t v4 = (unsigned int *)i[2];
    unint64_t v3 = (std::__shared_weak_count *)i[3];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        unint64_t v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }

    uint64_t v7 = v4[36];
    AudioObjectID v8 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 120LL))(v1);
    sub_F9584((uint64_t)v38, v7, v8);
    uint64_t v9 = sub_138E8(17);
    uint64_t v10 = sub_138E8(28);
    char v11 = 0;
    uint64_t v12 = 0LL;
    *(void *)__int128 buf = 0x100000002LL;
    uint64_t v13 = *(void *)(v9 + 8);
    while (1)
    {
      uint64_t v14 = *(int *)&buf[4 * v12];
      char v15 = v11;
      if (((v13 & v14) != 0) != ((*(void *)(v10 + 8) & v14) != 0)) {
        break;
      }
      char v11 = 1;
      uint64_t v12 = 1LL;
      if ((v15 & 1) != 0) {
        goto LABEL_11;
      }
    }

    if ((v13 & v14) == 0) {
      uint64_t v9 = v10;
    }
LABEL_11:
    os_log_t v16 = *(os_log_s **)v9;
    if (v16 && os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)v1 + 128LL))(theString, v1);
      sub_48E98(v36, theString[0]);
      if (v37 >= 0) {
        int v17 = v36;
      }
      else {
        int v17 = (void **)v36[0];
      }
      uint64_t v18 = v4[36];
      unint64_t v19 = "unknown";
      sub_7D084(v33, v19);
      int v20 = v34;
      char v21 = (void **)v33[0];
      uint64_t v22 = v39;
      if (!v39) {
        uint64_t v22 = v38[0];
      }
      if (v40) {
        char v23 = v40;
      }
      else {
        char v23 = (const __CFString *)v22;
      }
      sub_48E98(__p, v23);
      os_log_t v24 = v33;
      if (v20 < 0) {
        os_log_t v24 = v21;
      }
      uint64_t v25 = __p;
      if (v32 < 0) {
        uint64_t v25 = (void **)__p[0];
      }
      *(_DWORD *)__int128 buf = 136316162;
      *(void *)&uint8_t buf[4] = "Device_Bluetooth_Aspen.cpp";
      __int16 v42 = 1024;
      int v43 = 850;
      __int16 v44 = 2080;
      char v45 = v17;
      __int16 v46 = 2080;
      uint64_t v47 = v24;
      __int16 v48 = 2080;
      int v49 = v25;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Bluetooth audio device with UID %s and port type %s, changed name to %s",  buf,  0x30u);
      if (v32 < 0) {
        operator delete(__p[0]);
      }
      if (v34 < 0) {
        operator delete(v33[0]);
      }
      if (v37 < 0) {
        operator delete(v36[0]);
      }
      sub_19DFC((uint64_t)theString);
    }

    (*(void (**)(unsigned int *, uint64_t *))(*(void *)v4 + 128LL))(v4, v38);
    sub_19DFC((uint64_t)&v40);
    sub_19DFC((uint64_t)&v39);
    sub_19DFC((uint64_t)v38);
    if (v3)
    {
      char v26 = (unint64_t *)&v3->__shared_owners_;
      do
        unint64_t v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }

  sub_1BB88(&v29);
  operator delete(a1);
}

void sub_1A8C10( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26, char a27, uint64_t a28, void *a29, uint64_t a30, int a31, __int16 a32, char a33, char a34, uint64_t a35)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_85B80(&a35);
  if (a2 == 3)
  {
    int v38 = __cxa_begin_catch(exception_object);
    uint64_t v39 = (os_log_t *)sub_138E8(13);
    os_log_t v40 = *v39;
    if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
    {
      int v41 = v38[2];
      *(_DWORD *)(v35 - sub_7A768(v14 - 176) = 136316162;
      uint64_t v42 = v35 - 176;
      *(void *)(v42 + 4) = "StandardUtilities.h";
      *(_WORD *)(v35 - 164) = 1024;
      *(_DWORD *)(v42 + 14) = 429;
      *(_WORD *)(v35 - 158) = 1024;
      *(_DWORD *)(v35 - 156) = v41;
      *(_WORD *)(v35 - 152) = 2080;
      *(void *)(v42 + 26) = "";
      *(_WORD *)(v35 - 142) = 1024;
      *(_DWORD *)(v35 - 140) = 98;
      int v43 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      __int16 v44 = (uint8_t *)(v35 - 176);
      char v45 = v40;
      uint32_t v46 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v45, OS_LOG_TYPE_ERROR, v43, v44, v46);
    }
  }

  else
  {
    uint64_t v47 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      __int16 v48 = v47;
      int v49 = (os_log_t *)sub_138E8(13);
      os_log_t v50 = *v49;
      if (*v49 && os_log_type_enabled(*v49, OS_LOG_TYPE_ERROR))
      {
        uint64_t v51 = (*(uint64_t (**)(void *))(*(void *)v48 + 16LL))(v48);
        *(_DWORD *)(v35 - sub_7A768(v14 - 176) = 136316162;
        uint64_t v52 = v35 - 176;
        *(void *)(v52 + 4) = "StandardUtilities.h";
        *(_WORD *)(v35 - 164) = 1024;
        *(_DWORD *)(v52 + 14) = 430;
        *(_WORD *)(v35 - 158) = 2080;
        *(void *)(v52 + 20) = v51;
        *(_WORD *)(v35 - 148) = 2080;
        *(void *)(v52 + 30) = "";
        *(_WORD *)(v35 - 138) = 1024;
        *(_DWORD *)(v35 - 136) = 98;
        int v43 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        __int16 v44 = (uint8_t *)(v35 - 176);
        char v45 = v50;
        uint32_t v46 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      char v53 = (os_log_t *)sub_138E8(13);
      os_log_t v54 = *v53;
      if (*v53 && os_log_type_enabled(*v53, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)(v35 - sub_7A768(v14 - 176) = 136315906;
        uint64_t v55 = v35 - 176;
        *(void *)(v55 + 4) = "StandardUtilities.h";
        *(_WORD *)(v35 - 164) = 1024;
        *(_DWORD *)(v55 + 14) = 431;
        *(_WORD *)(v35 - 158) = 2080;
        *(void *)(v55 + 20) = "";
        *(_WORD *)(v35 - 148) = 1024;
        *(_DWORD *)(v55 + 30) = 98;
        int v43 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        __int16 v44 = (uint8_t *)(v35 - 176);
        char v45 = v54;
        uint32_t v46 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x1A8BC8LL);
}

void sub_1A8F6C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  strcpy((char *)v28, "mtslbolg");
  BYTE1(v28[1]) = 0;
  WORD1(v28[1]) = 0;
  unint64_t v4 = sub_5C2F8(v2);
  if ((_DWORD)v4) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v3 == 0LL;
  }
  if (v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = v4;
  }

  uint64_t v6 = sub_138E8(17);
  uint64_t v7 = sub_138E8(28);
  char v8 = 0;
  uint64_t v9 = 0LL;
  unint64_t v10 = HIDWORD(v4);
  v28[0] = 0x100000002LL;
  uint64_t v11 = *(void *)(v6 + 8);
  while (1)
  {
    uint64_t v12 = *((int *)v28 + v9);
    char v13 = v8;
    if (((v11 & v12) != 0) != ((*(void *)(v7 + 8) & v12) != 0)) {
      break;
    }
    char v8 = 1;
    uint64_t v9 = 1LL;
    if ((v13 & 1) != 0) {
      goto LABEL_11;
    }
  }

  if ((v11 & v12) == 0) {
    uint64_t v6 = v7;
  }
LABEL_11:
  uint64_t v14 = *(os_log_s **)v6;
  if (v14 && os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)v2 + 128LL))(theString, v2);
    sub_48E98(&__p, theString[0]);
    if (v27 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)__int128 buf = 136315906;
    __int128 v30 = "Device_Bluetooth_Aspen.cpp";
    __int16 v31 = 1024;
    int v32 = 829;
    __int16 v33 = 1024;
    int v34 = v10;
    __int16 v35 = 2080;
    int v36 = p_p;
    _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Audio listen mode changed to %u for bluetooth audio device with UID %s",  buf,  0x22u);
    if (v27 < 0) {
      operator delete(__p);
    }
    sub_19DFC((uint64_t)theString);
  }

  sub_371034((uint64_t *)buf, v2);
  sub_EDD50((uint64_t *)&__p, buf);
  sub_85B80((uint64_t *)buf);
  for (uint64_t i = v26; (void **)i != &__p; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v17 = *(void *)(i + 16);
    uint64_t v18 = *(std::__shared_weak_count **)(i + 24);
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        unint64_t v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
    }

    LODWORD(theString[0]) = 1819505773;
    sub_8ED70(buf, (uint64_t)theString, 1LL);
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v17 + 448LL))(v17, buf);
    sub_68314(buf);
    if (v18)
    {
      char v21 = (unint64_t *)&v18->__shared_owners_;
      do
        unint64_t v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }

  sub_1BB88((uint64_t *)&__p);
  operator delete(a1);
}

void sub_1A9244( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 buf, __int128 a16, __int16 a17, __int16 a18, int a19, int a20)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_19DFC((uint64_t)&a10);
  if (a2 == 3)
  {
    unint64_t v22 = __cxa_begin_catch(a1);
    char v23 = (os_log_t *)sub_138E8(13);
    os_log_t v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      int v25 = v22[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a16) = 1024;
      DWORD1(a16) = v25;
      WORD4(a16) = 2080;
      *(void *)((char *)&a16 + 10) = "";
      a18 = 1024;
      a19 = 98;
      uint64_t v26 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      char v27 = v24;
      uint32_t v28 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v27, OS_LOG_TYPE_ERROR, v26, (uint8_t *)&buf, v28);
    }
  }

  else
  {
    uint64_t v29 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      __int128 v30 = v29;
      __int16 v31 = (os_log_t *)sub_138E8(13);
      os_log_t v32 = *v31;
      if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
      {
        uint64_t v33 = (*(uint64_t (**)(void *))(*(void *)v30 + 16LL))(v30);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a16) = 2080;
        *(void *)((char *)&a16 + 4) = v33;
        WORD6(a16) = 2080;
        *(void *)((char *)&a16 + 14) = "";
        HIWORD(a19) = 1024;
        a20 = 98;
        uint64_t v26 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        char v27 = v32;
        uint32_t v28 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      int v34 = (os_log_t *)sub_138E8(13);
      os_log_t v35 = *v34;
      if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a16) = 2080;
        *(void *)((char *)&a16 + 4) = "";
        WORD6(a16) = 1024;
        *(_DWORD *)((char *)&a16 + 14) = 98;
        uint64_t v26 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        char v27 = v35;
        uint32_t v28 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x1A91D8LL);
}

uint64_t sub_1A9524(AudioObjectID a1)
{
  buf.AudioObjectPropertySelector mSelector = 0;
  BOOL v2 = sub_14B98C(@"fakevehicle", @"com.apple.audio.virtualaudio", &buf);
  if (buf.mSelector) {
    BOOL v3 = v2;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    uint64_t v4 = sub_138E8(17);
    uint64_t v5 = sub_138E8(28);
    char v6 = 0;
    uint64_t v7 = 0LL;
    *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002LL;
    uint64_t v8 = *(void *)(v4 + 8);
    while (1)
    {
      uint64_t v9 = *((int *)&buf.mSelector + v7);
      char v10 = v6;
      if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
        break;
      }
      char v6 = 1;
      uint64_t v7 = 1LL;
      if ((v10 & 1) != 0) {
        goto LABEL_18;
      }
    }

    if ((v8 & v9) == 0) {
      uint64_t v4 = v5;
    }
LABEL_18:
    uint64_t v23 = sub_138E8(23);
    char v24 = 0;
    uint64_t v25 = 0LL;
    *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002LL;
    uint64_t v26 = *(void *)(v4 + 8);
    while (1)
    {
      uint64_t v27 = *((int *)&buf.mSelector + v25);
      char v28 = v24;
      if (((v26 & v27) != 0) != ((*(void *)(v23 + 8) & v27) != 0)) {
        break;
      }
      char v24 = 1;
      uint64_t v25 = 1LL;
      if ((v28 & 1) != 0) {
        goto LABEL_24;
      }
    }

    if ((v26 & v27) == 0) {
      uint64_t v4 = v23;
    }
LABEL_24:
    uint64_t v29 = 1701869160LL;
    __int128 v30 = *(os_log_s **)v4;
    if (v30 && os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      buf.AudioObjectPropertySelector mSelector = 136315394;
      *(void *)&buf.mScope = "Device_Bluetooth_Aspen.cpp";
      __int16 v41 = 1024;
      int v42 = 149;
      _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Default fakevehicle is set. Pretending that this BT device is a car kit.",  (uint8_t *)&buf,  0x12u);
    }
  }

  else
  {
    AudioObjectID v39 = a1;
    strcpy((char *)&buf, "tacdbolg");
    BYTE1(buf.mElement) = 0;
    HIWORD(buf.mElement) = 0;
    unint64_t v11 = sub_36EF4(&v39, &buf, 0, 0LL);
    *((void *)&v14 + 1) = v12;
    *(void *)&__int128 v14 = v11;
    uint64_t v13 = v14 >> 32;
    if ((v13 & 0xFF00000000LL) != 0) {
      unsigned int v15 = v13;
    }
    else {
      unsigned int v15 = 0;
    }
    uint64_t v16 = sub_138E8(17);
    uint64_t v17 = sub_138E8(28);
    char v18 = 0;
    uint64_t v19 = 0LL;
    *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002LL;
    uint64_t v20 = *(void *)(v16 + 8);
    while (1)
    {
      uint64_t v21 = *((int *)&buf.mSelector + v19);
      char v22 = v18;
      if (((v20 & v21) != 0) != ((*(void *)(v17 + 8) & v21) != 0)) {
        break;
      }
      char v18 = 1;
      uint64_t v19 = 1LL;
      if ((v22 & 1) != 0) {
        goto LABEL_29;
      }
    }

    if ((v20 & v21) == 0) {
      uint64_t v16 = v17;
    }
LABEL_29:
    uint64_t v31 = sub_138E8(23);
    char v32 = 0;
    uint64_t v33 = 0LL;
    *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002LL;
    uint64_t v34 = *(void *)(v16 + 8);
    while (1)
    {
      uint64_t v35 = *((int *)&buf.mSelector + v33);
      char v36 = v32;
      if (((v34 & v35) != 0) != ((*(void *)(v31 + 8) & v35) != 0)) {
        break;
      }
      char v32 = 1;
      uint64_t v33 = 1LL;
      if ((v36 & 1) != 0) {
        goto LABEL_35;
      }
    }

    if ((v34 & v35) == 0) {
      uint64_t v16 = v31;
    }
LABEL_35:
    char v37 = *(os_log_s **)v16;
    if (v37 && os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.mScope = "Device_Bluetooth_Aspen.cpp";
      __int16 v41 = 1024;
      int v42 = 155;
      __int16 v43 = 1024;
      unsigned int v44 = v15;
      _os_log_impl(&dword_0, v37, OS_LOG_TYPE_DEFAULT, "%25s:%-5d BT Category is %u", (uint8_t *)&buf, 0x18u);
    }

    return sub_14FE28(v15);
  }

  return v29;
}

void sub_1A9858(unsigned int **a1)
{
  BOOL v2 = *a1;
  strcpy(buf, "caobbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  unint64_t v4 = sub_5C2F8((uint64_t)v2);
  if ((_DWORD)v4) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v3 == 0LL;
  }
  if (v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = v4;
  }

  unint64_t v6 = v4 & 0xFFFFFFFF00000000LL;
  if ((sub_14F834() & 1) == 0 && sub_EAA74("VA_HandleOwnershipEvent", 0x17uLL) == &qword_4938E0)
  {
    os_signpost_id_t v8 = 0LL;
  }

  else
  {
    unsigned __int8 v7 = atomic_load((unsigned __int8 *)&qword_493908);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
    {
      qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_493908);
    }

    os_signpost_id_t v8 = os_signpost_id_generate((os_log_t)qword_493900);
    unsigned __int8 v9 = atomic_load((unsigned __int8 *)&qword_493908);
    if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
    {
      qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_493908);
    }

    if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      char v10 = (os_log_s *)qword_493900;
      if (os_signpost_enabled((os_log_t)qword_493900))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v6 == 0x100000000LL;
        _os_signpost_emit_with_name_impl( &dword_0,  v10,  OS_SIGNPOST_INTERVAL_BEGIN,  v8,  "VA_HandleOwnershipEvent",  "Begin updating port routability, ownership = %d",  buf,  8u);
      }
    }
  }

  os_signpost_id_t v40 = v8;
  uint64_t v11 = sub_138E8(42);
  if ((*(_BYTE *)(v11 + 8) & 1) != 0)
  {
    uint64_t v12 = *(os_log_s **)v11;
    if (*(void *)v11)
    {
      if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "SignpostUtilities.h";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 82;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = "kOwnershipChange";
        _os_log_impl(&dword_0, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Starting measurement for signpost %s", buf, 0x1Cu);
      }
    }
  }

  if (v6 == 0x100000000LL) {
    unsigned int v13 = 1;
  }
  else {
    unsigned int v13 = 2;
  }
  atomic_store(v13, v2 + 132);
  uint64_t v14 = sub_138E8(17);
  uint64_t v15 = sub_138E8(28);
  char v16 = 0;
  uint64_t v17 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v18 = *(void *)(v14 + 8);
  while (1)
  {
    uint64_t v19 = *(int *)&buf[4 * v17];
    char v20 = v16;
    if (((v18 & v19) != 0) != ((*(void *)(v15 + 8) & v19) != 0)) {
      break;
    }
    char v16 = 1;
    uint64_t v17 = 1LL;
    if ((v20 & 1) != 0) {
      goto LABEL_26;
    }
  }

  if ((v18 & v19) == 0) {
    uint64_t v14 = v15;
  }
LABEL_26:
  uint64_t v21 = *(os_log_s **)v14;
  if (v21 && os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    if (v6 == 0x100000000LL) {
      char v22 = "true";
    }
    else {
      char v22 = "false";
    }
    (*(void (**)(CFStringRef *__return_ptr, unsigned int *))(*(void *)v2 + 128LL))(&theString, v2);
    sub_48E98(&__p, theString);
    if (v39 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "Device_Bluetooth_Aspen.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 789;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&buf[20] = v22;
    *(_WORD *)&_BYTE buf[28] = 2080;
    char v45 = p_p;
    _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Audio connection ownership changed to %s for bluetooth audio device with UID %s",  buf,  0x26u);
    if (v39 < 0) {
      operator delete(__p);
    }
    sub_19DFC((uint64_t)&theString);
  }

  memset(buf, 0, 24);
  strcpy(&buf[24], "cwdv");
  BYTE2(v45) = 0;
  int v46 = 3;
  v48[0] = 0LL;
  v48[1] = 0LL;
  uint64_t v47 = v48;
  CFTypeRef cf = 0LL;
  int v49 = 44731050;
  sub_3710DC((uint64_t *)&__p, (uint64_t)v2, (uint64_t)buf);
  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(v48[0]);
  if (*(void *)buf)
  {
    *(void *)&_DWORD buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }

  if (v6 == 0x100000000LL)
  {
    v36[0] = 0LL;
    v36[1] = 0LL;
    CFStringRef theString = (CFStringRef)v36;
    *(_DWORD *)AudioObjectPropertyAddress buf = 1886418288;
    sub_EE1E8((uint64_t *)&buf[8], &__p);
    sub_10179C((uint64_t **)&theString, *(unsigned int *)buf, (int *)buf);
    sub_85B80((uint64_t *)&buf[8]);
    uint64_t v24 = sub_546E0();
    sub_101870(v24, &theString, 0);
    sub_EDF34(v36[0]);
  }

  else
  {
    uint64_t v25 = sub_546E0();
    sub_103CF8(v25, (uint64_t)&__p, 0LL, 0);
  }

  for (uint64_t i = v38; (void **)i != &__p; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v27 = *(std::__shared_weak_count **)(i + 24);
    uint64_t v41 = *(void *)(i + 16);
    int v42 = v27;
    if (v27)
    {
      p_shared_weak_owners = (unint64_t *)&v27->__shared_weak_owners_;
      do
        unint64_t v29 = __ldxr(p_shared_weak_owners);
      while (__stxr(v29 + 1, p_shared_weak_owners));
    }

    sub_B8CBC((uint64_t *)&theString, &v41, "", 806);
    CFStringRef v30 = theString;
    int v43 = 1869832547;
    sub_8ED70(buf, (uint64_t)&v43, 1LL);
    (*((void (**)(CFStringRef, _BYTE *))v30->isa + 56))(v30, buf);
    sub_68314(buf);
    uint64_t v31 = (std::__shared_weak_count *)v36[0];
    if (v36[0])
    {
      char v32 = v36[0] + 1;
      do
        unint64_t v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }

    if (v42) {
      std::__shared_weak_count::__release_weak(v42);
    }
  }

  kdebug_trace(721684540LL, 0LL, 0LL, 0LL, 0LL);
  sub_85B80((uint64_t *)&__p);
  sub_1AA208(&v40);
  operator delete(a1);
}

void sub_1A9E60( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, os_signpost_id_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t buf, int a20, __int16 a21, int a22, int a23, uint64_t a24, __int16 a25, __int16 a26, int a27, uint64_t a28, int a29, uint64_t a30, uint64_t a31, uint64_t a32, CFTypeRef cf)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_19DFC((uint64_t)&a9);
  sub_1AA208(&a15);
  if (a2 == 3)
  {
    uint64_t v35 = __cxa_begin_catch(exception_object);
    char v36 = (os_log_t *)sub_138E8(13);
    os_log_t v37 = *v36;
    if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
    {
      int v38 = v35[2];
      LODWORD(buf) = 136316162;
      *(uint64_t *)((char *)&buf + 4) = (uint64_t)"StandardUtilities.h";
      a21 = 1024;
      *(_DWORD *)(&a21 + 1) = 429;
      HIWORD(a22) = 1024;
      a23 = v38;
      LOWORD(a24) = 2080;
      *(uint64_t *)((char *)&a24 + 2) = (uint64_t)"";
      a26 = 1024;
      a27 = 98;
      char v39 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      os_signpost_id_t v40 = v37;
      uint32_t v41 = 40;
LABEL_15:
      _os_log_impl(&dword_0, v40, OS_LOG_TYPE_ERROR, v39, (uint8_t *)&buf, v41);
    }
  }

  else
  {
    int v42 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      int v43 = v42;
      unsigned int v44 = (os_log_t *)sub_138E8(13);
      os_log_t v45 = *v44;
      if (*v44 && os_log_type_enabled(*v44, OS_LOG_TYPE_ERROR))
      {
        uint64_t v46 = (*(uint64_t (**)(void *))(*(void *)v43 + 16LL))(v43);
        LODWORD(buf) = 136316162;
        *(uint64_t *)((char *)&buf + 4) = (uint64_t)"StandardUtilities.h";
        a21 = 1024;
        *(_DWORD *)(&a21 + 1) = 430;
        HIWORD(a22) = 2080;
        *(void *)(&a22 + 1) = v46;
        WORD2(a24) = 2080;
        *(uint64_t *)((char *)&a24 + 6) = (uint64_t)"";
        HIWORD(a27) = 1024;
        LODWORD(a28) = 98;
        char v39 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        os_signpost_id_t v40 = v45;
        uint32_t v41 = 44;
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v47 = (os_log_t *)sub_138E8(13);
      os_log_t v48 = *v47;
      if (*v47 && os_log_type_enabled(*v47, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(uint64_t *)((char *)&buf + 4) = (uint64_t)"StandardUtilities.h";
        a21 = 1024;
        *(_DWORD *)(&a21 + 1) = 431;
        HIWORD(a22) = 2080;
        *(void *)(&a22 + 1) = "";
        WORD2(a24) = 1024;
        *(_DWORD *)((char *)&a24 + 6) = 98;
        char v39 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        os_signpost_id_t v40 = v48;
        uint32_t v41 = 34;
        goto LABEL_15;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x1A9D80LL);
}

void sub_1AA1D0()
{
}

os_signpost_id_t *sub_1AA208(os_signpost_id_t *a1)
{
  uint64_t v2 = sub_138E8(42);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    char v3 = *(os_log_s **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v8 = 136315650;
        unsigned __int8 v9 = "SignpostUtilities.h";
        __int16 v10 = 1024;
        int v11 = 82;
        __int16 v12 = 2080;
        unsigned int v13 = "kOwnershipChange";
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Ending measurement for signpost %s",  (uint8_t *)&v8,  0x1Cu);
      }
    }
  }

  if (*a1)
  {
    unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_493908);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
    {
      qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_493908);
    }

    os_signpost_id_t v5 = *a1;
    if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v6 = (os_log_s *)qword_493900;
      if (os_signpost_enabled((os_log_t)qword_493900))
      {
        LOWORD(v8) = 0;
        _os_signpost_emit_with_name_impl( &dword_0,  v6,  OS_SIGNPOST_INTERVAL_END,  v5,  "VA_HandleOwnershipEvent",  (const char *)&unk_420CC6,  (uint8_t *)&v8,  2u);
      }
    }
  }

  return a1;
}

void sub_1AA394(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

void sub_1AA3A0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = sub_138E8(17);
  uint64_t v4 = sub_138E8(28);
  char v5 = 0;
  uint64_t v6 = 0LL;
  v23[0] = 0x100000002LL;
  uint64_t v7 = *(void *)(v3 + 8);
  while (1)
  {
    uint64_t v8 = *((int *)v23 + v6);
    char v9 = v5;
    if (((v7 & v8) != 0) != ((*(void *)(v4 + 8) & v8) != 0)) {
      break;
    }
    char v5 = 1;
    uint64_t v6 = 1LL;
    if ((v9 & 1) != 0) {
      goto LABEL_7;
    }
  }

  if ((v7 & v8) == 0) {
    uint64_t v3 = v4;
  }
LABEL_7:
  __int16 v10 = *(os_log_s **)v3;
  if (v10 && os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)v2 + 128LL))(theString, v2);
    sub_48E98(&__p, theString[0]);
    if (v22 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    uint64_t v25 = "Device_Bluetooth_Aspen.cpp";
    __int16 v26 = 1024;
    int v27 = 772;
    __int16 v28 = 2080;
    unint64_t v29 = p_p;
    _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Audio connection failed for bluetooth audio device with UID %s",  buf,  0x1Cu);
    if (v22 < 0) {
      operator delete(__p);
    }
    sub_19DFC((uint64_t)theString);
  }

  sub_371034((uint64_t *)buf, v2);
  sub_EDD50((uint64_t *)&__p, buf);
  sub_85B80((uint64_t *)buf);
  for (uint64_t i = v21; (void **)i != &__p; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v13 = *(void *)(i + 16);
    uint64_t v14 = *(std::__shared_weak_count **)(i + 24);
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        unint64_t v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }

    LODWORD(theString[0]) = 1935762278;
    sub_8ED70(buf, (uint64_t)theString, 1LL);
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v13 + 448LL))(v13, buf);
    sub_68314(buf);
    if (v14)
    {
      uint64_t v17 = (unint64_t *)&v14->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }

  sub_1BB88((uint64_t *)&__p);
  operator delete(a1);
}

void sub_1AA604( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 buf, __int128 a16, __int16 a17, __int16 a18, int a19, int a20)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_19DFC((uint64_t)&a10);
  if (a2 == 3)
  {
    char v22 = __cxa_begin_catch(a1);
    uint64_t v23 = (os_log_t *)sub_138E8(13);
    os_log_t v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      int v25 = v22[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a16) = 1024;
      DWORD1(a16) = v25;
      WORD4(a16) = 2080;
      *(void *)((char *)&a16 + 10) = "";
      a18 = 1024;
      a19 = 98;
      __int16 v26 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      int v27 = v24;
      uint32_t v28 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v27, OS_LOG_TYPE_ERROR, v26, (uint8_t *)&buf, v28);
    }
  }

  else
  {
    unint64_t v29 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      CFStringRef v30 = v29;
      uint64_t v31 = (os_log_t *)sub_138E8(13);
      os_log_t v32 = *v31;
      if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
      {
        uint64_t v33 = (*(uint64_t (**)(void *))(*(void *)v30 + 16LL))(v30);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a16) = 2080;
        *(void *)((char *)&a16 + 4) = v33;
        WORD6(a16) = 2080;
        *(void *)((char *)&a16 + 14) = "";
        HIWORD(a19) = 1024;
        a20 = 98;
        __int16 v26 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        int v27 = v32;
        uint32_t v28 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      uint64_t v34 = (os_log_t *)sub_138E8(13);
      os_log_t v35 = *v34;
      if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a16) = 2080;
        *(void *)((char *)&a16 + 4) = "";
        WORD6(a16) = 1024;
        *(_DWORD *)((char *)&a16 + 14) = 98;
        __int16 v26 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        int v27 = v35;
        uint32_t v28 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x1AA5C8LL);
}

void sub_1AA8E4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  strcpy((char *)v20, "edeibolg");
  BYTE1(v20[1]) = 0;
  WORD1(v20[1]) = 0;
  unint64_t v4 = sub_5C2F8(v2);
  if ((_DWORD)v4) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v3 == 0LL;
  }
  if (v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = v4;
  }

  uint64_t v6 = sub_138E8(17);
  uint64_t v7 = sub_138E8(28);
  char v8 = 0;
  uint64_t v9 = 0LL;
  v20[0] = 0x100000002LL;
  uint64_t v10 = *(void *)(v6 + 8);
  while (1)
  {
    uint64_t v11 = *((int *)v20 + v9);
    char v12 = v8;
    if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
      break;
    }
    char v8 = 1;
    uint64_t v9 = 1LL;
    if ((v12 & 1) != 0) {
      goto LABEL_11;
    }
  }

  if ((v10 & v11) == 0) {
    uint64_t v6 = v7;
  }
LABEL_11:
  uint64_t v13 = *(os_log_s **)v6;
  if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)v2 + 128LL))(theString, v2);
    sub_48E98(__p, theString[0]);
    uint64_t v14 = "en";
    if (!HIDWORD(v4)) {
      uint64_t v14 = "dis";
    }
    char v22 = "Device_Bluetooth_Aspen.cpp";
    __int16 v23 = 1024;
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    int v24 = 759;
    if (v19 >= 0) {
      uint64_t v15 = __p;
    }
    else {
      uint64_t v15 = (void **)__p[0];
    }
    __int16 v25 = 2080;
    __int16 v26 = v14;
    __int16 v27 = 2080;
    uint32_t v28 = v15;
    _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Headset detection %sabled for Bluetooth device with UID %s",  buf,  0x26u);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    sub_19DFC((uint64_t)theString);
  }

  sub_1A63F0(v2);
  operator delete(a1);
}

void sub_1AAB14( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 buf, __int128 a16, __int16 a17, __int16 a18, int a19, int a20)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_19DFC((uint64_t)&a10);
  if (a2 == 3)
  {
    char v22 = __cxa_begin_catch(a1);
    __int16 v23 = (os_log_t *)sub_138E8(13);
    os_log_t v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      int v25 = v22[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a16) = 1024;
      DWORD1(a16) = v25;
      WORD4(a16) = 2080;
      *(void *)((char *)&a16 + 10) = "";
      a18 = 1024;
      a19 = 98;
      __int16 v26 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      __int16 v27 = v24;
      uint32_t v28 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v27, OS_LOG_TYPE_ERROR, v26, (uint8_t *)&buf, v28);
    }
  }

  else
  {
    unint64_t v29 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      CFStringRef v30 = v29;
      uint64_t v31 = (os_log_t *)sub_138E8(13);
      os_log_t v32 = *v31;
      if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
      {
        uint64_t v33 = (*(uint64_t (**)(void *))(*(void *)v30 + 16LL))(v30);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a16) = 2080;
        *(void *)((char *)&a16 + 4) = v33;
        WORD6(a16) = 2080;
        *(void *)((char *)&a16 + 14) = "";
        HIWORD(a19) = 1024;
        a20 = 98;
        __int16 v26 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        __int16 v27 = v32;
        uint32_t v28 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      uint64_t v34 = (os_log_t *)sub_138E8(13);
      os_log_t v35 = *v34;
      if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a16) = 2080;
        *(void *)((char *)&a16 + 4) = "";
        WORD6(a16) = 1024;
        *(_DWORD *)((char *)&a16 + 14) = 98;
        __int16 v26 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        __int16 v27 = v35;
        uint32_t v28 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x1AAAA8LL);
}

uint64_t *sub_1AAD74(uint64_t a1)
{
  uint64_t v5 = a1;
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = sub_546E0();
  sub_3710DC(v6, v2, a1 + 8);
  sub_103CF8(v3, (uint64_t)v6, *(unsigned __int8 *)(a1 + 96), 0);
  sub_85B80(v6);
  return sub_1AB070(&v5);
}

void sub_1AAE10( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 buf, __int128 a14, __int16 a15, __int16 a16, int a17, int a18)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_85B80(&a10);
  if (a2 == 3)
  {
    char v20 = __cxa_begin_catch(a1);
    uint64_t v21 = (os_log_t *)sub_138E8(13);
    os_log_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      int v23 = v20[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a14) = 1024;
      DWORD1(a14) = v23;
      WORD4(a14) = 2080;
      *(void *)((char *)&a14 + 10) = "";
      a16 = 1024;
      a17 = 98;
      os_log_t v24 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      int v25 = v22;
      uint32_t v26 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v25, OS_LOG_TYPE_ERROR, v24, (uint8_t *)&buf, v26);
    }
  }

  else
  {
    __int16 v27 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      uint32_t v28 = v27;
      unint64_t v29 = (os_log_t *)sub_138E8(13);
      os_log_t v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        uint64_t v31 = (*(uint64_t (**)(void *))(*(void *)v28 + 16LL))(v28);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a14) = 2080;
        *(void *)((char *)&a14 + 4) = v31;
        WORD6(a14) = 2080;
        *(void *)((char *)&a14 + 14) = "";
        HIWORD(a17) = 1024;
        a18 = 98;
        os_log_t v24 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        int v25 = v30;
        uint32_t v26 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      os_log_t v32 = (os_log_t *)sub_138E8(13);
      os_log_t v33 = *v32;
      if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a14) = 2080;
        *(void *)((char *)&a14 + 4) = "";
        WORD6(a14) = 1024;
        *(_DWORD *)((char *)&a14 + 14) = 98;
        os_log_t v24 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        int v25 = v33;
        uint32_t v26 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x1AADD8LL);
}

uint64_t *sub_1AB070(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    uint64_t v3 = *(const void **)(v2 + 88);
    if (v3) {
      CFRelease(v3);
    }
    sub_32C8C(*(void **)(v2 + 64));
    unint64_t v4 = *(void **)(v2 + 8);
    if (v4)
    {
      *(void *)(v2 + 16) = v4;
      operator delete(v4);
    }

    operator delete((void *)v2);
  }

  return a1;
}

uint64_t sub_1AB0CC(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 88);
  if (v2) {
    CFRelease(v2);
  }
  sub_32C8C(*(void **)(a1 + 64));
  uint64_t v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(void *)(a1 + 16) = v3;
    operator delete(v3);
  }

  return a1;
}

uint64_t sub_1AB114(uint64_t result, int *a2)
{
  int v2 = *a2;
  if (*a2 <= 1685025636)
  {
    if (v2 > 1651797099)
    {
      switch(v2)
      {
        case 1651797100:
          uint64_t v3 = 0x676C6F626C6F6C61LL;
          goto LABEL_30;
        case 1651798131:
          uint64_t v3 = 0x676C6F6270726973LL;
          goto LABEL_30;
        case 1668051827:
          uint64_t v3 = 0x676C6F62636C7373LL;
          goto LABEL_30;
      }
    }

    else
    {
      if (v2 == 1651796325 || v2 == 1651796336)
      {
        uint64_t v3 = 0x676C6F6269657370LL;
        goto LABEL_30;
      }

      if (v2 == 1651796339)
      {
        uint64_t v3 = 0x676C6F6269657373LL;
        goto LABEL_30;
      }
    }
  }

  else if (v2 <= 1869832546)
  {
    switch(v2)
    {
      case 1685025637:
        uint64_t v3 = 0x676C6F62646F7365LL;
        goto LABEL_30;
      case 1685026403:
        uint64_t v3 = 0x676C6F62646F7663LL;
        goto LABEL_30;
      case 1718772584:
        uint64_t v3 = 0x676C6F6266726368LL;
        goto LABEL_30;
    }
  }

  else if (v2 > 1936745837)
  {
    if (v2 == 1936745838)
    {
      uint64_t v3 = 0x676C6F627370656ELL;
      goto LABEL_30;
    }

    if (v2 == 1952609377)
    {
      uint64_t v3 = 0x676C6F6261746274LL;
      goto LABEL_30;
    }
  }

  else
  {
    if (v2 == 1869832547)
    {
      uint64_t v3 = 0x676C6F62626F6163LL;
      goto LABEL_30;
    }

    if (v2 == 1935762278)
    {
      uint64_t v3 = 0x676C6F6262616366LL;
LABEL_30:
      *(void *)uint64_t result = v3;
      *(_DWORD *)(result + 8) = 0;
      return result;
    }
  }

  *(void *)uint64_t result = *(void *)a2;
  *(_DWORD *)(result + 8) = a2[2];
  return result;
}

os_signpost_id_t *sub_1AB2D4(os_signpost_id_t *a1)
{
  uint64_t v2 = sub_138E8(42);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    uint64_t v3 = *(os_log_s **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v8 = 136315650;
        uint64_t v9 = "SignpostUtilities.h";
        __int16 v10 = 1024;
        int v11 = 76;
        __int16 v12 = 2080;
        uint64_t v13 = "kOwnsSharedConnection";
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Ending measurement for signpost %s",  (uint8_t *)&v8,  0x1Cu);
      }
    }
  }

  if (*a1)
  {
    unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_493908);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
    {
      qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_493908);
    }

    os_signpost_id_t v5 = *a1;
    if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v6 = (os_log_s *)qword_493900;
      if (os_signpost_enabled((os_log_t)qword_493900))
      {
        LOWORD(v8) = 0;
        _os_signpost_emit_with_name_impl( &dword_0,  v6,  OS_SIGNPOST_INTERVAL_END,  v5,  "VA_SetOwnership",  (const char *)&unk_420CC6,  (uint8_t *)&v8,  2u);
      }
    }
  }

  return a1;
}

void sub_1AB460(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

void sub_1AB46C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  sub_371034((uint64_t *)buf, *a1);
  sub_EDD50(&v23, buf);
  sub_85B80((uint64_t *)buf);
  for (uint64_t i = v24; i != &v23; uint64_t i = (uint64_t *)i[1])
  {
    uint64_t v4 = i[2];
    uint64_t v3 = (std::__shared_weak_count *)i[3];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        unint64_t v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }

    strcpy((char *)v28, "nepsbolg");
    BYTE1(v28[1]) = 0;
    WORD1(v28[1]) = 0;
    unint64_t v8 = sub_5C2F8(v1);
    if ((_DWORD)v8 || !v7)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_4865A0;
      exception[2] = v8;
    }

    uint64_t v9 = sub_138E8(17);
    uint64_t v10 = sub_138E8(28);
    char v11 = 0;
    uint64_t v12 = 0LL;
    unint64_t v13 = HIDWORD(v8);
    v28[0] = 0x100000002LL;
    uint64_t v14 = *(void *)(v9 + 8);
    while (1)
    {
      uint64_t v15 = *((int *)v28 + v12);
      char v16 = v11;
      if (((v14 & v15) != 0) != ((*(void *)(v10 + 8) & v15) != 0)) {
        break;
      }
      char v11 = 1;
      uint64_t v12 = 1LL;
      if ((v16 & 1) != 0) {
        goto LABEL_13;
      }
    }

    if ((v14 & v15) == 0) {
      uint64_t v9 = v10;
    }
LABEL_13:
    uint64_t v17 = *(os_log_s **)v9;
    if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)v1 + 128LL))(theString, v1);
      sub_48E98(__p, theString[0]);
      unint64_t v18 = __p;
      if (v27 < 0) {
        unint64_t v18 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      os_log_t v30 = "Device_Bluetooth_Aspen.cpp";
      __int16 v31 = 1024;
      int v32 = 868;
      __int16 v33 = 1024;
      int v34 = v13;
      __int16 v35 = 2080;
      char v36 = v18;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d BluetoothSpatialAudioEnabled changed to %d for BT device UID %s ",  buf,  0x22u);
      if (v27 < 0) {
        operator delete(__p[0]);
      }
      sub_19DFC((uint64_t)theString);
    }

    LODWORD(__p[0]) = 1936745838;
    sub_8ED70(buf, (uint64_t)__p, 1LL);
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v4 + 448LL))(v4, buf);
    sub_68314(buf);
    if (v3)
    {
      char v19 = (unint64_t *)&v3->__shared_owners_;
      do
        unint64_t v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }

  sub_1BB88(&v23);
  operator delete(a1);
}

void sub_1AB764( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, __int128 buf, __int128 a22, __int16 a23, __int16 a24, int a25, int a26, uint64_t a27)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_85B80(&a27);
  if (a2 == 3)
  {
    unint64_t v29 = __cxa_begin_catch(a1);
    os_log_t v30 = (os_log_t *)sub_138E8(13);
    os_log_t v31 = *v30;
    if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
    {
      int v32 = v29[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a22) = 1024;
      DWORD1(a22) = v32;
      WORD4(a22) = 2080;
      *(void *)((char *)&a22 + 10) = "";
      a24 = 1024;
      a25 = 98;
      __int16 v33 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      int v34 = v31;
      uint32_t v35 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v34, OS_LOG_TYPE_ERROR, v33, (uint8_t *)&buf, v35);
    }
  }

  else
  {
    char v36 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      os_log_t v37 = v36;
      int v38 = (os_log_t *)sub_138E8(13);
      os_log_t v39 = *v38;
      if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
      {
        uint64_t v40 = (*(uint64_t (**)(void *))(*(void *)v37 + 16LL))(v37);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a22) = 2080;
        *(void *)((char *)&a22 + 4) = v40;
        WORD6(a22) = 2080;
        *(void *)((char *)&a22 + 14) = "";
        HIWORD(a25) = 1024;
        a26 = 98;
        __int16 v33 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        int v34 = v39;
        uint32_t v35 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      uint32_t v41 = (os_log_t *)sub_138E8(13);
      os_log_t v42 = *v41;
      if (*v41 && os_log_type_enabled(*v41, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a22) = 2080;
        *(void *)((char *)&a22 + 4) = "";
        WORD6(a22) = 1024;
        *(_DWORD *)((char *)&a22 + 14) = 98;
        __int16 v33 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        int v34 = v42;
        uint32_t v35 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x1AB6ECLL);
}

char *sub_1ABA50(AudioObjectID a1, const __CFString *a2)
{
  UInt32 ioDataSize = 4;
  LODWORD(outData[0]) = 0;
  inAddress.__r_.__value_.__r.__words[0] = 0x676C6F6262647470LL;
  LODWORD(inAddress.__r_.__value_.__r.__words[1]) = 0;
  OSStatus PropertyData = AudioObjectGetPropertyData( a1,  (const AudioObjectPropertyAddress *)&inAddress,  0,  0LL,  &ioDataSize,  outData);
  if (PropertyData)
  {
    uint64_t v5 = sub_138E8(17);
    uint64_t v6 = sub_138E8(28);
    char v7 = 0;
    uint64_t v8 = 0LL;
    *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002LL;
    uint64_t v9 = *(void *)(v5 + 8);
    while (1)
    {
      uint64_t v10 = *((int *)&buf.mSelector + v8);
      char v11 = v7;
      if (((v9 & v10) != 0) != ((*(void *)(v6 + 8) & v10) != 0)) {
        break;
      }
      char v7 = 1;
      uint64_t v8 = 1LL;
      if ((v11 & 1) != 0) {
        goto LABEL_8;
      }
    }

    if ((v9 & v10) == 0) {
      uint64_t v5 = v6;
    }
LABEL_8:
    uint64_t v12 = *(os_log_s **)v5;
    if (v12 && os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.mScope = "Device_Bluetooth_Aspen.cpp";
      __int16 v153 = 1024;
      int v154 = 113;
      __int16 v155 = 1024;
      *(_DWORD *)uint64_t v156 = PropertyData;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error %d getting bluetooth audio device type",  (uint8_t *)&buf,  0x18u);
    }
  }

  uint64_t v13 = LODWORD(outData[0]);
  if (LODWORD(outData[0]) == 1953853033)
  {
    uint64_t v14 = (char *)operator new(0x358uLL);
    sub_36E3FC((uint64_t)v14, a1, a2, a2, 0LL);
    *(void *)uint64_t v14 = off_474280;
    *((_DWORD *)v14 + 123) = sub_1A9524(a1);
    LODWORD(inAddress.__r_.__value_.__l.__data_) = a1;
    strcpy((char *)&buf, "paaibolg");
    BYTE1(buf.mElement) = 0;
    HIWORD(buf.mElement) = 0;
    unint64_t v15 = sub_36EF4((AudioObjectID *)&inAddress, &buf, 0, 0LL);
    *((void *)&v18 + 1) = v16;
    *(void *)&__int128 v18 = v15;
    uint64_t v17 = v18 >> 32;
    if ((v17 & 0xFF00000000LL) != 0) {
      int v19 = v17;
    }
    else {
      int v19 = 0;
    }
    uint64_t v20 = sub_138E8(17);
    uint64_t v21 = sub_138E8(28);
    char v22 = 0;
    uint64_t v23 = 0LL;
    *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002LL;
    uint64_t v24 = *(void *)(v20 + 8);
    while (1)
    {
      uint64_t v25 = *((int *)&buf.mSelector + v23);
      char v26 = v22;
      if (((v24 & v25) != 0) != ((*(void *)(v21 + 8) & v25) != 0)) {
        break;
      }
      char v22 = 1;
      uint64_t v23 = 1LL;
      if ((v26 & 1) != 0) {
        goto LABEL_35;
      }
    }

    if ((v24 & v25) == 0) {
      uint64_t v20 = v21;
    }
LABEL_35:
    uint64_t v36 = sub_138E8(23);
    char v37 = 0;
    uint64_t v38 = 0LL;
    *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002LL;
    uint64_t v39 = *(void *)(v20 + 8);
    while (1)
    {
      uint64_t v40 = *((int *)&buf.mSelector + v38);
      char v41 = v37;
      if (((v39 & v40) != 0) != ((*(void *)(v36 + 8) & v40) != 0)) {
        break;
      }
      char v37 = 1;
      uint64_t v38 = 1LL;
      if ((v41 & 1) != 0) {
        goto LABEL_41;
      }
    }

    if ((v39 & v40) == 0) {
      uint64_t v20 = v36;
    }
LABEL_41:
    os_log_t v42 = *(os_log_s **)v20;
    if (v42 && os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.mScope = "Device_Bluetooth_Aspen.cpp";
      __int16 v153 = 1024;
      int v154 = 163;
      __int16 v155 = 1024;
      *(_DWORD *)uint64_t v156 = v19;
      _os_log_impl(&dword_0, v42, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Apple device: %u", (uint8_t *)&buf, 0x18u);
    }

    v14[496] = v19 != 0;
    strcpy((char *)&buf, "edeibolg");
    BYTE1(buf.mElement) = 0;
    HIWORD(buf.mElement) = 0;
    v14[497] = AudioObjectHasProperty(a1, &buf) != 0;
    *(void *)(v14 + 500) = sub_1A6D54(a1);
    *(void *)(v14 + 508) = v43;
    if ((sub_14E87C() & 1) != 0)
    {
      uint64_t v44 = 0x100000001LL;
    }

    else
    {
      LODWORD(inAddress.__r_.__value_.__l.__data_) = a1;
      strcpy((char *)&buf, "pswsbolg");
      BYTE1(buf.mElement) = 0;
      HIWORD(buf.mElement) = 0;
      unint64_t v45 = sub_36EF4((AudioObjectID *)&inAddress, &buf, 0, 0LL);
      *((void *)&v47 + 1) = v46;
      *(void *)&__int128 v47 = v45;
      uint64_t v44 = v47 >> 32;
    }

    *(void *)(v14 + 516) = v44;
    LODWORD(inAddress.__r_.__value_.__l.__data_) = a1;
    strcpy((char *)&buf, "dgswbolg");
    BYTE1(buf.mElement) = 0;
    HIWORD(buf.mElement) = 0;
    unint64_t v48 = sub_36EF4((AudioObjectID *)&inAddress, &buf, 0, 0LL);
    *((void *)&v51 + 1) = v49;
    *(void *)&__int128 v51 = v48;
    uint64_t v50 = v51 >> 32;
    BOOL v53 = (v50 & 0xFF00000000LL) != 0 && (_DWORD)v50 != 0;
    v14[524] = v53;
    strcpy((char *)&buf, "caobbolg");
    BYTE1(buf.mElement) = 0;
    HIWORD(buf.mElement) = 0;
    if (AudioObjectHasProperty(a1, &buf))
    {
      LODWORD(inAddress.__r_.__value_.__l.__data_) = a1;
      strcpy((char *)&buf, "caobbolg");
      BYTE1(buf.mElement) = 0;
      HIWORD(buf.mElement) = 0;
      unint64_t v55 = sub_36EF4((AudioObjectID *)&inAddress, &buf, 0, 0LL);
      if ((_DWORD)v55 || !v54)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &off_4865A0;
        exception[2] = v55;
      }

      uint64_t v56 = sub_138E8(17);
      uint64_t v57 = sub_138E8(28);
      char v58 = 0;
      uint64_t v59 = 0LL;
      unint64_t v60 = HIDWORD(v55);
      *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002LL;
      uint64_t v61 = *(void *)(v56 + 8);
      while (1)
      {
        uint64_t v62 = *((int *)&buf.mSelector + v59);
        char v63 = v58;
        if (((v61 & v62) != 0) != ((*(void *)(v57 + 8) & v62) != 0)) {
          break;
        }
        char v58 = 1;
        uint64_t v59 = 1LL;
        if ((v63 & 1) != 0) {
          goto LABEL_66;
        }
      }

      if ((v61 & v62) == 0) {
        uint64_t v56 = v57;
      }
LABEL_66:
      int v71 = *(os_log_s **)v56;
      if (v71 && os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
      {
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.mScope = "Device_Bluetooth_Aspen.cpp";
        __int16 v153 = 1024;
        int v154 = 262;
        __int16 v155 = 1024;
        *(_DWORD *)uint64_t v156 = a1;
        *(_WORD *)&v156[4] = 1024;
        *(_DWORD *)&v156[6] = v60;
        _os_log_impl( &dword_0,  v71,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Bluetooth audio device with UID %u: ownership (%u)",  (uint8_t *)&buf,  0x1Eu);
      }

      if ((_DWORD)v60) {
        int v72 = 1;
      }
      else {
        int v72 = 2;
      }
      goto LABEL_78;
    }

    uint64_t v64 = sub_138E8(17);
    uint64_t v65 = sub_138E8(28);
    char v66 = 0;
    uint64_t v67 = 0LL;
    *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002LL;
    uint64_t v68 = *(void *)(v64 + 8);
    while (1)
    {
      uint64_t v69 = *((int *)&buf.mSelector + v67);
      char v70 = v66;
      if (((v68 & v69) != 0) != ((*(void *)(v65 + 8) & v69) != 0)) {
        break;
      }
      char v66 = 1;
      uint64_t v67 = 1LL;
      if ((v70 & 1) != 0) {
        goto LABEL_74;
      }
    }

    if ((v68 & v69) == 0) {
      uint64_t v64 = v65;
    }
LABEL_74:
    int v73 = *(os_log_s **)v64;
    if (v73)
    {
      BOOL v74 = os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT);
      int v72 = 0;
      if (!v74)
      {
LABEL_78:
        *((_DWORD *)v14 + 132) = v72;
        LODWORD(inAddress.__r_.__value_.__l.__data_) = a1;
        strcpy((char *)&buf, "diabbolg");
        BYTE1(buf.mElement) = 0;
        HIWORD(buf.mElement) = 0;
        unint64_t v75 = sub_36EF4((AudioObjectID *)&inAddress, &buf, 0, 0LL);
        *((void *)&v78 + 1) = v76;
        *(void *)&__int128 v78 = v75;
        uint64_t v77 = v78 >> 32;
        if ((v77 & 0xFF00000000LL) != 0 && (unsigned int v79 = v77 - 8194, v79 <= 0x24)) {
          int v80 = dword_401D78[v79];
        }
        else {
          int v80 = 0;
        }
        uint64_t v81 = sub_138E8(17);
        uint64_t v82 = sub_138E8(28);
        char v83 = 0;
        uint64_t v84 = 0LL;
        *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002LL;
        uint64_t v85 = *(void *)(v81 + 8);
        while (1)
        {
          uint64_t v86 = *((int *)&buf.mSelector + v84);
          char v87 = v83;
          if (((v85 & v86) != 0) != ((*(void *)(v82 + 8) & v86) != 0)) {
            break;
          }
          char v83 = 1;
          uint64_t v84 = 1LL;
          if ((v87 & 1) != 0) {
            goto LABEL_88;
          }
        }

        if ((v85 & v86) == 0) {
          uint64_t v81 = v82;
        }
LABEL_88:
        uint64_t v88 = sub_138E8(23);
        char v89 = 0;
        uint64_t v90 = 0LL;
        *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002LL;
        uint64_t v91 = *(void *)(v81 + 8);
        while (1)
        {
          uint64_t v92 = *((int *)&buf.mSelector + v90);
          char v93 = v89;
          if (((v91 & v92) != 0) != ((*(void *)(v88 + 8) & v92) != 0)) {
            break;
          }
          char v89 = 1;
          uint64_t v90 = 1LL;
          if ((v93 & 1) != 0) {
            goto LABEL_94;
          }
        }

        if ((v91 & v92) == 0) {
          uint64_t v81 = v88;
        }
LABEL_94:
        uint64_t v94 = *(os_log_s **)v81;
        if (v94 && os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
        {
          snprintf((char *)&buf, 7uLL, "0x%x", v80);
          sub_7D084(&inAddress, (char *)&buf);
          v95 = (inAddress.__r_.__value_.__s.__size_ & 0x80u) == 0
              ? &inAddress
              : (std::string *)inAddress.__r_.__value_.__r.__words[0];
          buf.AudioObjectPropertySelector mSelector = 136315650;
          *(void *)&buf.mScope = "Device_Bluetooth_Aspen.cpp";
          __int16 v153 = 1024;
          int v154 = 139;
          __int16 v155 = 2080;
          *(void *)uint64_t v156 = v95;
          _os_log_impl(&dword_0, v94, OS_LOG_TYPE_DEFAULT, "%25s:%-5d BT ProductID is %s", (uint8_t *)&buf, 0x1Cu);
        }

        *((_DWORD *)v14 + 133) = v80;
        uint64_t v96 = sub_138E8(17);
        uint64_t v97 = sub_138E8(28);
        char v98 = 0;
        uint64_t v99 = 0LL;
        *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002LL;
        uint64_t v100 = *(void *)(v96 + 8);
        while (1)
        {
          uint64_t v101 = *((int *)&buf.mSelector + v99);
          char v102 = v98;
          if (((v100 & v101) != 0) != ((*(void *)(v97 + 8) & v101) != 0)) {
            break;
          }
          char v98 = 1;
          uint64_t v99 = 1LL;
          if ((v102 & 1) != 0)
          {
            if ((v100 & 1) == 0) {
              goto LABEL_120;
            }
            goto LABEL_109;
          }
        }

        if ((v100 & v101) == 0) {
          uint64_t v96 = v97;
        }
        if ((*(void *)(v96 + 8) & 1) != 0)
        {
LABEL_109:
          uint64_t v103 = *(os_log_s **)v96;
          if (v103 && os_log_type_enabled(v103, OS_LOG_TYPE_DEBUG))
          {
            sub_48E98(&inAddress, a2);
            int size = (char)inAddress.__r_.__value_.__s.__size_;
            std::string::size_type v105 = inAddress.__r_.__value_.__r.__words[0];
            uint64_t v106 = atomic_load((unsigned int *)v14 + 123);
            sub_2CA1C(outData, v106);
            p_std::string inAddress = &inAddress;
            if (size < 0) {
              p_std::string inAddress = (std::string *)v105;
            }
            if (v150 >= 0) {
              __int16 v108 = outData;
            }
            else {
              __int16 v108 = (void **)outData[0];
            }
            buf.AudioObjectPropertySelector mSelector = 136315906;
            *(void *)&buf.mScope = "Device_Bluetooth_Aspen.cpp";
            __int16 v153 = 1024;
            int v154 = 359;
            __int16 v155 = 2080;
            *(void *)uint64_t v156 = p_inAddress;
            *(_WORD *)&v156[8] = 2080;
            *(void *)&v156[10] = v108;
            _os_log_impl( &dword_0,  v103,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Port endpoint type for Bluetooth device %s is %s",  (uint8_t *)&buf,  0x26u);
            if (v150 < 0) {
              operator delete(outData[0]);
            }
          }
        }

void sub_1AC9C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_36F1E0((uint64_t)v19);
  operator delete(v19);
  _Unwind_Resume(a1);
}

CFStringRef sub_1ACAAC(uint64_t a1, CFStringRef *a2, CFStringRef *a3)
{
  if (*a3)
  {
    if (!*a2 || !CFStringHasSuffix(*a2, *a3))
    {
      uint64_t v9 = (os_log_t *)sub_138E8(13);
      uint64_t v10 = *v9;
      if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        uint64_t v21 = "Device_Bluetooth_Aspen.cpp";
        __int16 v22 = 1024;
        int v23 = 317;
        _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): invalid UID",  buf,  0x12u);
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "invalid UID");
    }

    ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(kCFAllocatorDefault, *a2, *a3);
    __int128 v18 = ArrayBySeparatingStrings;
    __int16 v19 = 1;
    if (!ArrayBySeparatingStrings)
    {
      uint64_t v12 = (os_log_t *)sub_138E8(13);
      uint64_t v13 = *v12;
      if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        uint64_t v21 = "Device_Bluetooth_Aspen.cpp";
        __int16 v22 = 1024;
        int v23 = 320;
        _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): couldn't break apart UID",  buf,  0x12u);
      }

      uint64_t v14 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v14, "couldn't break apart UID");
    }

    CFStringRef v7 = CFStringCreateByCombiningStrings(kCFAllocatorDefault, ArrayBySeparatingStrings, &stru_486F70);
    *(void *)a1 = v7;
    *(_BYTE *)(a1 + 8) = 1;
    if (!v7)
    {
      unint64_t v15 = (os_log_t *)sub_138E8(13);
      uint64_t v16 = *v15;
      if (*v15)
      {
        if (os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v21 = "Device_Bluetooth_Aspen.cpp";
          __int16 v22 = 1024;
          int v23 = 323;
          _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): couldn't create port partnership UID",  buf,  0x12u);
        }
      }

      uint64_t v17 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v17, "couldn't create port partnership UID");
    }

    return (CFStringRef)sub_13818((uint64_t)&v18);
  }

  else
  {
    CFStringRef result = CFStringCreateWithCString(0LL, "", 0x600u);
    *(void *)a1 = result;
    *(_BYTE *)(a1 + 8) = 1;
  }

  return result;
}

void sub_1ACD80( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::string *sub_1ACDE4(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "[ Processing Info: ", 0x13uLL);
  memset(&v35, 0, sizeof(v35));
  std::string::append(&v35, "[ ", 2uLL);
  sub_2DB6FC(&__p, (unsigned int *)(a2 + 8));
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(&v35, (const std::string::value_type *)p_p, size);
  std::string::append(&v35, "; ", 2uLL);
  sub_2FCA4C(&__p, (void *)(a2 + 24));
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v6 = &__p;
  }
  else {
    uint64_t v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v7 = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v7 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(&v35, (const std::string::value_type *)v6, v7);
  if (*(_BYTE *)(a2 + 56)) {
    sub_2FCA4C(&__p, (void *)(a2 + 40));
  }
  else {
    sub_7D084(&__p, "");
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v8 = &__p;
  }
  else {
    uint64_t v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v9 = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v9 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(&v35, (const std::string::value_type *)v8, v9);
  std::string::append(&v35, "; Default Output Port: ", 0x17uLL);
  sub_1263EC(&__p, (os_unfair_lock_s **)(a2 + 64));
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v10 = &__p;
  }
  else {
    uint64_t v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v11 = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v11 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(&v35, (const std::string::value_type *)v10, v11);
  std::string::append(&v35, "; Diagnostics Context: ", 0x17uLL);
  sub_7D084(&v36, "{ ");
  uint64_t v12 = (_DWORD *)(a2 + 124);
  sub_33464(&__p, (unsigned int *)(a2 + 124));
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v13 = &__p;
  }
  else {
    uint64_t v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v14 = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v14 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(&v36, (const std::string::value_type *)v13, v14);
  std::string::append(&v36, ", ", 2uLL);
  int v15 = sub_1D72C0((_DWORD *)(a2 + 120));
  if ((v15 & 1) != 0)
  {
    std::string::append(&v36, "call-like: 1, ", 0xEuLL);
    std::to_string(&v37, *(unsigned __int8 *)(a2 + 156));
    uint64_t v16 = std::string::insert(&v37, 0LL, "SharePlay active: ", 0x12uLL);
    __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__l.__cap_ = v16->__r_.__value_.__l.__cap_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0LL;
    v16->__r_.__value_.__l.__cap_ = 0LL;
    v16->__r_.__value_.__r.__words[0] = 0LL;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int128 v18 = &__p;
    }
    else {
      __int128 v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v19 = __p.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v19 = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(&v36, (const std::string::value_type *)v18, v19);
  }

  int v20 = *(_DWORD *)(a2 + 136);
  if (v20 == 1986556788 || v20 == 1987211117 || v20 == 1987208039)
  {
    if (v15) {
      std::string::append(&v36, ", ", 2uLL);
    }
    std::string::append(&v36, "speech detection: 1", 0x13uLL);
    if (*v12 != 1986224492) {
      goto LABEL_63;
    }
LABEL_61:
    std::string::append(&v36, ", ", 2uLL);
LABEL_62:
    std::string::append(&v36, "continuity: 1", 0xDuLL);
LABEL_63:
    int v15 = 1;
    goto LABEL_64;
  }

  if (*v12 == 1986224492)
  {
    if (!v15) {
      goto LABEL_62;
    }
    goto LABEL_61;
  }

void sub_1AD3D4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_1AD4D8(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "[ ", 2uLL);
  std::string::append(a1, "Reconfig Context: ", 0x12uLL);
  if (*(_BYTE *)(a2 + 212))
  {
    uint64_t v4 = *(unsigned int *)(a2 + 208);
    else {
      uint64_t v5 = off_46F498[v4];
    }
  }

  else
  {
    uint64_t v5 = "Unknown";
  }

  sub_7D084(&__p, v5);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)p_p, size);
  std::string::append(a1, "; Route Info: ", 0xEuLL);
  sub_1ACDE4(&__p, a2);
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    uint64_t v8 = &__p;
  }
  else {
    uint64_t v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v9 = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v9 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v8, v9);
  return std::string::append(a1, " ]", 2uLL);
}

void sub_1AD610( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1AD650(uint64_t a1, int a2, double a3, double a4, double a5)
{
  double v10 = cos(a3);
  switch(a2)
  {
    case 0:
      double v11 = __exp10(a5 * 0.05);
      uint64_t result = 0LL;
      *(void *)a1 = 0LL;
      *(void *)(a1 + 8) = 0LL;
      *(void *)(a1 + 24) = 0LL;
      *(void *)(a1 + 32) = 0LL;
      *(double *)(a1 + 16) = v11;
      return result;
    case 1:
      double v13 = __exp10(a5 * 0.05);
      double v14 = sin(a3) / (a4 + a4);
      double v15 = 1.0;
      double v16 = (1.0 - v10) * 0.5;
      double v17 = v16 + v16;
      double v18 = v14 + 1.0;
      double v19 = -2.0;
      goto LABEL_5;
    case 2:
      double v13 = __exp10(a5 * 0.05);
      double v14 = sin(a3) / (a4 + a4);
      double v15 = 1.0;
      double v16 = (v10 + 1.0) * 0.5;
      double v19 = -2.0;
      double v17 = v16 * -2.0;
      double v18 = v14 + 1.0;
LABEL_5:
      double v20 = v10 * v19;
      double v21 = v15 - v14;
      double v22 = v16;
      goto LABEL_18;
    case 3:
      double v13 = __exp10(a5 * 0.05);
      double v22 = sin(a3) / (a4 + a4);
      double v16 = -v22;
      double v18 = v22 + 1.0;
      double v20 = v10 * -2.0;
      double v21 = 1.0 - v22;
      double v17 = 0.0;
      goto LABEL_18;
    case 4:
      double v13 = __exp10(a5 * 0.05);
      double v23 = sin(a3) / (a4 + a4);
      double v17 = v10 * -2.0;
      double v16 = 1.0;
      double v18 = v23 + 1.0;
      double v21 = 1.0 - v23;
      double v22 = 1.0;
      goto LABEL_17;
    case 5:
      double v13 = __exp10(a5 * 0.05);
      double v24 = sin(a3) / (a4 + a4);
      double v16 = v24 + 1.0;
      double v17 = v10 * -2.0;
      double v22 = 1.0 - v24;
      double v21 = 1.0 - v24;
      double v20 = v10 * -2.0;
      double v18 = v24 + 1.0;
      goto LABEL_18;
    case 6:
      double v25 = __exp10(a5 * 0.5 * 0.05);
      double v26 = sin(a3) / (a4 / v25 + a4 / v25);
      double v27 = v25 * v26;
      goto LABEL_16;
    case 7:
      double v28 = sin(a3) / (a4 + a4);
      double v29 = __exp10(a5 * 0.5 * 0.05);
      double v30 = sqrt(v29);
      double v13 = 1.0;
      double v31 = v28 * (v30 + v30);
      double v32 = v10 * (v29 + -1.0);
      double v33 = v10 * (v29 + 1.0);
      double v34 = v29 + 1.0 + v32;
      double v18 = v34 + v31;
      double v20 = (v29 + -1.0 + v33) * -2.0;
      double v21 = v34 - v31;
      double v35 = v29 + 1.0 - v32;
      double v22 = v29 * (v35 + v31);
      double v36 = v29 + v29;
      double v37 = v29 + -1.0 - v33;
      goto LABEL_12;
    case 8:
      double v38 = sin(a3) / (a4 + a4);
      double v29 = __exp10(a5 * 0.5 * 0.05);
      double v39 = sqrt(v29);
      double v13 = 1.0;
      double v31 = v38 * (v39 + v39);
      double v40 = v10 * (v29 + -1.0);
      double v41 = v10 * (v29 + 1.0);
      double v42 = v29 + 1.0 - v40;
      double v18 = v42 + v31;
      double v20 = v29 + -1.0 - v41 + v29 + -1.0 - v41;
      double v21 = v42 - v31;
      double v35 = v29 + 1.0 + v40;
      double v22 = v29 * (v35 + v31);
      double v36 = v29 * -2.0;
      double v37 = v29 + -1.0 + v41;
LABEL_12:
      double v17 = v36 * v37;
      double v16 = v29 * (v35 - v31);
      goto LABEL_18;
    case 9:
      double v43 = a5 * 0.5;
      double v44 = __exp10(a5 * 0.5 * 0.25 * 0.05);
      double v45 = __exp10(v43 * 0.75 * 0.05);
      uint64_t result = 0LL;
      double v46 = (1.0 - v45 * v10 - sqrt((1.0 - v10 * v10) * -(v45 * v45) + (v45 + v45) * (1.0 - v10))) / (1.0 - v45);
      *(double *)(a1 + 16) = v44 * (v46 * -2.0 + 1.0 + v46 * v46);
      *(void *)(a1 + 24) = 0LL;
      *(void *)(a1 + 32) = 0LL;
      __asm { FMOV            V1.2D, #-2.0 }

      _Q1.f64[1] = v46;
      *(float64x2_t *)a1 = vmulq_n_f64(_Q1, v46);
      return result;
    case 10:
      double v52 = __exp10(a5 * 0.05);
      double v53 = tan(a3 / (a4 + a4));
      uint64_t result = 0LL;
      double v54 = (1.0 - v53 * (4.0 / (v52 + 1.0))) * 0.5 / (v53 * (4.0 / (v52 + 1.0)) + 1.0);
      double v55 = (v52 + -1.0 + v52 + -1.0) * ((0.5 - v54) * 0.5);
      double v56 = v10 * (v54 + 0.5) * -2.0;
      double v57 = v54 + v54;
      *(double *)a1 = v56;
      *(double *)(a1 + 8) = v57;
      *(double *)(a1 + 16) = v55 + 1.0;
      *(double *)(a1 + 24) = v56;
      double v58 = v57 - v55;
      goto LABEL_19;
    case 11:
      double v25 = __exp10(a5 * 0.5 * 0.05);
      double v26 = sin(a3) / (a4 + a4);
      double v27 = v26 * v25;
LABEL_16:
      double v59 = v26 / v25;
      double v13 = 1.0;
      double v18 = v59 + 1.0;
      double v17 = v10 * -2.0;
      double v21 = 1.0 - v59;
      double v22 = v27 + 1.0;
      double v16 = 1.0 - v27;
LABEL_17:
      double v20 = v17;
LABEL_18:
      uint64_t result = 0LL;
      double v60 = 1.0 / v18;
      *(double *)a1 = v20 * v60;
      *(double *)(a1 + 8) = v60 * v21;
      *(double *)(a1 + 16) = v13 * v60 * v22;
      *(double *)(a1 + 24) = v13 * v60 * v17;
      double v58 = v13 * v60 * v16;
LABEL_19:
      *(double *)(a1 + 32) = v58;
      break;
    default:
      uint64_t result = 4294967246LL;
      break;
  }

  return result;
}

uint64_t sub_1ADB34(uint64_t a1)
{
  *(void *)a1 = off_4744F8;
  uint64_t v2 = (void **)(a1 + 56);
  uint64_t v4 = (void **)(a1 + 80);
  sub_1AF2FC(&v4);
  uint64_t v4 = v2;
  sub_1AF2FC(&v4);
  return a1;
}

void sub_1ADB88(char *a1)
{
  *(void *)a1 = off_4744F8;
  uint64_t v2 = (void **)(a1 + 56);
  uint64_t v3 = (void **)(a1 + 80);
  sub_1AF2FC(&v3);
  uint64_t v3 = v2;
  sub_1AF2FC(&v3);
  operator delete(a1);
}

uint64_t sub_1ADBDC(uint64_t a1, _DWORD *a2)
{
  BOOL v2 = *a2 == 1885762592 || *a2 == 1853059700;
  return *a2 == 1936092532 || v2;
}

void sub_1ADC20(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  int v7 = *a2;
  if (*a2 == 1936092532)
  {
    if (a5 != 40)
    {
      double v17 = (os_log_t *)sub_138E8(13);
      double v15 = *v17;
      if (!*v17 || !os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR)) {
        goto LABEL_29;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "HP_FormatList.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 754;
      double v16 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioStreamPropertyVirtualFormat";
      goto LABEL_28;
    }

    __int128 v9 = *(_OWORD *)(a6 + 16);
    *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)a6;
    *(_OWORD *)&buf[16] = v9;
    uint64_t v32 = *(void *)(a6 + 32);
    if ((sub_1AE190(a1, (uint64_t)buf) & 1) != 0)
    {
      sub_1AE28C((uint64_t *)(a1 + 80), (__int128 *)buf, *(double *)(a1 + 16));
      sub_1AE428(a1, (__int128 *)buf);
      return;
    }

    double v18 = (os_log_t *)sub_138E8(13);
    double v19 = *v18;
    if (!*v18 || !os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR)) {
      goto LABEL_38;
    }
    int v27 = 136315394;
    double v28 = "HP_FormatList.cpp";
    __int16 v29 = 1024;
    int v30 = 760;
    double v20 = "%25s:%-5d EXCEPTION (kAudioDeviceUnsupportedFormatError): given format is not supported for kAudioStreamProp"
          "ertyVirtualFormat";
    goto LABEL_33;
  }

  if (v7 == 1885762592)
  {
    if (a5 != 40)
    {
      double v21 = (os_log_t *)sub_138E8(13);
      double v15 = *v21;
      if (!*v21 || !os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR)) {
        goto LABEL_29;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "HP_FormatList.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 770;
      double v16 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioStreamPropertyPhysicalFormat";
      goto LABEL_28;
    }

    __int128 v10 = *(_OWORD *)(a6 + 16);
    *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)a6;
    *(_OWORD *)&buf[16] = v10;
    uint64_t v32 = *(void *)(a6 + 32);
    if ((sub_1AE190(a1, (uint64_t)buf) & 1) != 0)
    {
      double v12 = *(double *)(a1 + 16);
      uint64_t v11 = a1 + 16;
      sub_1AE28C((uint64_t *)(v11 + 40), (__int128 *)buf, v12);
      if ((*(unsigned int (**)(void, _BYTE *))(**(void **)(v11 - 8) + 176LL))(*(void *)(v11 - 8), buf))
      {
        __int128 v13 = *(_OWORD *)&buf[16];
        *(_OWORD *)uint64_t v11 = *(_OWORD *)buf;
        *(_OWORD *)(v11 + 16) = v13;
        *(void *)(v11 + 32) = v32;
      }

      return;
    }

    double v24 = (os_log_t *)sub_138E8(13);
    double v19 = *v24;
    if (!*v24 || !os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR)) {
      goto LABEL_38;
    }
    int v27 = 136315394;
    double v28 = "HP_FormatList.cpp";
    __int16 v29 = 1024;
    int v30 = 776;
    double v20 = "%25s:%-5d EXCEPTION (kAudioDeviceUnsupportedFormatError): given format is not supported for kAudioStreamProp"
          "ertyPhysicalFormat";
LABEL_33:
    double v25 = (uint8_t *)&v27;
LABEL_37:
    _os_log_impl(&dword_0, v19, OS_LOG_TYPE_ERROR, v20, v25, 0x12u);
LABEL_38:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    int v23 = 560226676;
LABEL_39:
    exception[2] = v23;
  }

  if (v7 == 1853059700)
  {
    if (a5 == 8)
    {
      double v8 = *(double *)a6;
      if (*(double *)a6 == 0.0 || sub_76C6C(a1, *(double *)a6))
      {
        sub_1AE07C(a1, v8);
        return;
      }

      double v26 = (os_log_t *)sub_138E8(13);
      double v19 = *v26;
      if (!*v26 || !os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR)) {
        goto LABEL_38;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "HP_FormatList.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 746;
      double v20 = "%25s:%-5d EXCEPTION (kAudioDeviceUnsupportedFormatError): given sample rate is not supported for kAudioDev"
            "icePropertyNominalSampleRate";
      double v25 = buf;
      goto LABEL_37;
    }

    double v14 = (os_log_t *)sub_138E8(13);
    double v15 = *v14;
    if (!*v14 || !os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
LABEL_29:
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_4865A0;
      int v23 = 561211770;
      goto LABEL_39;
    }

    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "HP_FormatList.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 740;
    double v16 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertyNominalSampleRate";
LABEL_28:
    _os_log_impl(&dword_0, v15, OS_LOG_TYPE_ERROR, v16, buf, 0x12u);
    goto LABEL_29;
  }

uint64_t sub_1AE04C()
{
  return 6LL;
}

double sub_1AE054(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a2 <= 5) {
    *(_DWORD *)a3 = *(_DWORD *)&aTrsnRsntmfsamf[4 * a2];
  }
  double result = NAN;
  *(void *)(a3 + 4) = -3587560918LL;
  return result;
}

uint64_t sub_1AE07C(uint64_t a1, double a2)
{
  uint64_t result = sub_76C6C(a1, a2);
  if ((_DWORD)result)
  {
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = (double *)(a1 + 16);
    __int128 v7 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)__int128 v13 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)&_BYTE v13[16] = v7;
    *(void *)&v13[32] = *(void *)(a1 + 48);
    *(double *)__int128 v13 = a2;
    if (!sub_1AE5E8(v5, *(void *)(a1 + 64), (__int128 *)v13) && *(_DWORD *)&v13[8] == 1819304813)
    {
      __int128 v9 = *(_OWORD *)(a1 + 32);
      *(_OWORD *)__int128 v13 = *(_OWORD *)v6;
      *(_OWORD *)&_BYTE v13[16] = v9;
      uint64_t v10 = *(void *)(a1 + 48);
      *(void *)&v13[24] = 0LL;
      *(void *)&v13[32] = v10;
      *(double *)__int128 v13 = a2;
      *(_DWORD *)&_BYTE v13[16] = 0;
      sub_1AE28C((uint64_t *)(a1 + 56), (__int128 *)v13, *v6);
      v8.n128_u64[0] = *(void *)v13;
      if (*(double *)v13 != a2)
      {
        __int128 v11 = *(_OWORD *)(a1 + 32);
        *(_OWORD *)__int128 v13 = *(_OWORD *)v6;
        *(_OWORD *)&_BYTE v13[16] = v11;
        *(_DWORD *)&v13[36] = HIDWORD(*(void *)(a1 + 48));
        *(double *)__int128 v13 = a2;
        memset(&v13[12], 0, 24);
        sub_1AE28C((uint64_t *)(a1 + 56), (__int128 *)v13, *v6);
      }
    }

    uint64_t result = (*(uint64_t (**)(void, _BYTE *, __n128))(**(void **)(a1 + 8) + 176LL))( *(void *)(a1 + 8),  v13,  v8);
    if ((_DWORD)result)
    {
      __int128 v12 = *(_OWORD *)&v13[16];
      *(_OWORD *)uint64_t v6 = *(_OWORD *)v13;
      *(_OWORD *)(a1 + 32) = v12;
      *(void *)(a1 + 48) = *(void *)&v13[32];
    }
  }

  return result;
}

uint64_t sub_1AE190(uint64_t a1, uint64_t a2)
{
  if (*(double *)a2 == 0.0 || (uint64_t result = sub_76C6C(a1, *(double *)a2), (_DWORD)result))
  {
    int v5 = *(_DWORD *)(a2 + 8);
    if (!v5
      || (uint64_t v12 = 0LL,
          __int128 v10 = 0u,
          __int128 v11 = 0u,
          DWORD2(v10) = v5,
          uint64_t result = sub_1AE5E8(*(void *)(a1 + 56), *(void *)(a1 + 64), &v10),
          (_DWORD)result))
    {
      int v6 = *(_DWORD *)(a2 + 28);
      if (v6)
      {
        uint64_t v12 = 0LL;
        __int128 v10 = 0u;
        __int128 v11 = 0u;
        HIDWORD(v11) = v6;
        uint64_t result = sub_1AE5E8(*(void *)(a1 + 56), *(void *)(a1 + 64), &v10);
        if (!(_DWORD)result) {
          return result;
        }
      }

      else
      {
        uint64_t result = 1LL;
      }

      if (v5 == 1819304813)
      {
        uint64_t v12 = 0LL;
        __int128 v10 = 0u;
        __int128 v11 = 0u;
        __int128 v7 = *(_OWORD *)(a2 + 16);
        v8[0] = *(_OWORD *)a2;
        v8[1] = v7;
        uint64_t v9 = *(void *)(a2 + 32);
        DWORD2(v10) = DWORD2(v8[0]);
        HIDWORD(v10) = sub_ABE30(v8, 0);
        LODWORD(v12) = v9;
        return sub_1AE5E8(*(void *)(a1 + 56), *(void *)(a1 + 64), &v10);
      }
    }
  }

  return result;
}

void sub_1AE28C(uint64_t *a1, __int128 *a2, double a3)
{
  __int128 v5 = a2[1];
  __int128 v35 = *a2;
  __int128 v36 = v5;
  uint64_t v37 = *((void *)a2 + 4);
  *(void *)&__int128 v35 = 0LL;
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if (*a1 == v7)
  {
LABEL_29:
    __int128 v24 = *(_OWORD *)v6;
    __int128 v25 = *(_OWORD *)(v6 + 16);
    *((void *)a2 + 4) = *(void *)(v6 + 32);
    *a2 = v24;
    a2[1] = v25;
    double v26 = *(double **)(*a1 + 40);
  }

  else
  {
    double v8 = *(double *)a2;
    int v9 = DWORD2(v35);
    int v10 = v36;
    int v11 = DWORD1(v36);
    int v12 = DWORD2(v36);
    int v13 = HIDWORD(v36);
    uint64_t v14 = *a1;
    int v15 = v37;
    while (1)
    {
      if (!v9 || ((v16 = *(_DWORD *)(v14 + 8)) != 0 ? (BOOL v17 = v9 == v16) : (BOOL v17 = 1), v17))
      {
        if (!v10 || ((int v18 = *(_DWORD *)(v14 + 16)) != 0 ? (v19 = v10 == v18) : (v19 = 1), v19))
        {
          if ((!v11 || (int v20 = *(_DWORD *)(v14 + 20)) == 0 || v11 == v20)
            && (!v12 || (int v21 = *(_DWORD *)(v14 + 24)) == 0 || v12 == v21)
            && (!v13 || (int v22 = *(_DWORD *)(v14 + 28)) == 0 || v13 == v22)
            && (!v15 || (int v23 = *(_DWORD *)(v14 + 32)) == 0 || v15 == v23))
          {
          }
        }
      }

      v14 += 64LL;
      if (v14 == v7) {
        goto LABEL_29;
      }
    }

    if (v8 == 0.0) {
      double v27 = a3;
    }
    else {
      double v27 = v8;
    }
    for (uint64_t i = *(double **)(v14 + 40); i != *(double **)(v14 + 48); i += 2)
    {
      if (*i <= v27 && i[1] >= v27)
      {
        __int128 v32 = *(_OWORD *)v14;
        __int128 v33 = *(_OWORD *)(v14 + 16);
        *((void *)a2 + 4) = *(void *)(v14 + 32);
        *a2 = v32;
        a2[1] = v33;
        goto LABEL_31;
      }
    }

    __int128 v30 = *(_OWORD *)v14;
    __int128 v31 = *(_OWORD *)(v14 + 16);
    *((void *)a2 + 4) = *(void *)(v14 + 32);
    *a2 = v30;
    a2[1] = v31;
    double v26 = *(double **)(v14 + 40);
  }

  double v27 = sub_D85A4(*v26, v26[1]);
LABEL_31:
  *(double *)a2 = v27;
}

double sub_1AE428(uint64_t a1, __int128 *a2)
{
  __int128 v3 = a2[1];
  __int128 v9 = *a2;
  __int128 v10 = v3;
  uint64_t v11 = *((void *)a2 + 4);
  if (DWORD2(v9) == 1819304813 && (~HIDWORD(v9) & 9) == 0)
  {
    LODWORD(v11) = 32;
    *(_OWORD *)AudioObjectPropertyAddress buf = v9;
    *(_DWORD *)&_BYTE buf[28] = HIDWORD(v10);
    HIDWORD(v13) = HIDWORD(v11);
    *(_OWORD *)&_BYTE buf[12] = xmmword_403210;
    LODWORD(v13) = 0;
    sub_1AE28C((uint64_t *)(a1 + 56), (__int128 *)buf, *(double *)(a1 + 16));
    if (*(_DWORD *)&buf[8] != 1819304813 || *(double *)buf != *(double *)&v9 || *(_DWORD *)&buf[28] != HIDWORD(v10))
    {
      uint64_t v6 = (os_log_t *)sub_138E8(13);
      uint64_t v7 = *v6;
      if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_FormatList.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 242;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): no reasonable format could be found",  buf,  0x12u);
      }

      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_4865A0;
      exception[2] = 1852797029;
    }

    __int128 v9 = *(_OWORD *)buf;
    __int128 v10 = *(_OWORD *)&buf[16];
    uint64_t v11 = v13;
  }

  if ((*(unsigned int (**)(void, __int128 *))(**(void **)(a1 + 8) + 176LL))(*(void *)(a1 + 8), &v9))
  {
    double result = *(double *)&v9;
    __int128 v5 = v10;
    *(_OWORD *)(a1 + 16) = v9;
    *(_OWORD *)(a1 + 32) = v5;
    *(void *)(a1 + 48) = v11;
  }

  return result;
}

BOOL sub_1AE5E8(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5 = a3[1];
  __int128 __s1 = *a3;
  __int128 v31 = v5;
  uint64_t v32 = *((void *)a3 + 4);
  *(void *)&__int128 __s1 = 0LL;
  double v6 = *(double *)a3;
  uint64_t v29 = 0LL;
  memset(v28, 0, sizeof(v28));
  if (memcmp(&__s1, v28, 0x24uLL))
  {
    if (a1 == a2) {
      return 0LL;
    }
    int v7 = DWORD2(__s1);
    int v8 = v31;
    int v9 = DWORD1(v31);
    int v10 = DWORD2(v31);
    int v11 = HIDWORD(v31);
    int v12 = v32;
    while (1)
    {
      if (!v7 || ((v13 = *(_DWORD *)(a1 + 8)) != 0 ? (BOOL v14 = v7 == v13) : (BOOL v14 = 1), v14))
      {
        if (!v8 || ((int v15 = *(_DWORD *)(a1 + 16)) != 0 ? (v16 = v8 == v15) : (v16 = 1), v16))
        {
          if ((!v9 || (int v17 = *(_DWORD *)(a1 + 20)) == 0 || v9 == v17)
            && (!v10 || (int v18 = *(_DWORD *)(a1 + 24)) == 0 || v10 == v18)
            && (!v11 || (int v19 = *(_DWORD *)(a1 + 28)) == 0 || v11 == v19)
            && (!v12 || (int v20 = *(_DWORD *)(a1 + 32)) == 0 || v12 == v20))
          {
          }
        }
      }

      a1 += 64LL;
      if (a1 == a2) {
        return 0LL;
      }
    }

    if (v6 != 0.0)
    {
      __int128 v25 = *(double **)(a1 + 40);
      double v26 = *(double **)(a1 + 48);
      do
      {
        BOOL result = v25 != v26;
        if (v25 == v26) {
          break;
        }
        BOOL v27 = *v25 > v6;
        if (v25[1] < v6) {
          BOOL v27 = 1;
        }
        v25 += 2 * v27;
        BOOL result = 1LL;
      }

      while (v27);
      return result;
    }

    return 1LL;
  }

  if (v6 == 0.0) {
    return 1LL;
  }
  if (a1 == a2)
  {
    char v22 = 0;
  }

  else
  {
    char v22 = 0;
    do
    {
      int v23 = *(double **)(a1 + 40);
      while (v23 != *(double **)(a1 + 48))
      {
        BOOL v24 = *v23 > v6;
        if (v23[1] < v6) {
          BOOL v24 = 1;
        }
        v23 += 2 * v24;
        if (!v24)
        {
          char v22 = 1;
          break;
        }
      }

      a1 += 64LL;
    }

    while (a1 != a2);
  }

  return v22 & 1;
}

void *sub_1AE7B8(void *result, char *__src, char *a3, unint64_t a4)
{
  double v6 = __src;
  int v7 = result;
  uint64_t v8 = result[2];
  int v9 = (char *)*result;
  if (a4 > (v8 - *result) >> 4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0LL;
      *int v7 = 0LL;
      v7[1] = 0LL;
      uint64_t v7[2] = 0LL;
    }

    if (a4 >> 60) {
      goto LABEL_23;
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    unint64_t v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0LL ? 0xFFFFFFFFFFFFFFFLL : v10;
    if (v11 >> 60) {
LABEL_23:
    }
      sub_7A87C();
    BOOL result = sub_7BE90(v11);
    int v9 = (char *)result;
    *int v7 = result;
    v7[1] = result;
    uint64_t v7[2] = &result[2 * v12];
    size_t v13 = a3 - v6;
    if (v13) {
      BOOL result = memmove(result, v6, v13);
    }
    BOOL v14 = (void **)(v7 + 1);
    goto LABEL_22;
  }

  BOOL v14 = (void **)(result + 1);
  int v15 = (_BYTE *)result[1];
  unint64_t v16 = (v15 - v9) >> 4;
  if (v16 >= a4)
  {
    size_t v13 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    int v18 = (void *)*result;
LABEL_21:
    BOOL result = memmove(v18, __src, v13);
    goto LABEL_22;
  }

  int v17 = &__src[16 * v16];
  if (v15 != v9)
  {
    BOOL result = memmove((void *)*result, __src, v15 - v9);
    int v9 = (char *)*v14;
  }

  size_t v13 = a3 - v17;
  if (v13)
  {
    int v18 = v9;
    __src = v17;
    goto LABEL_21;
  }

double sub_1AE8F0(uint64_t a1, double *a2, uint64_t a3, char a4, __n128 a5)
{
LABEL_1:
  int v9 = (unint64_t *)(a2 - 2);
  uint64_t v10 = (double *)a1;
  while (2)
  {
    a1 = (uint64_t)v10;
    uint64_t v11 = (char *)a2 - (char *)v10;
    unint64_t v12 = ((char *)a2 - (char *)v10) >> 4;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return a5.n128_f64[0];
      case 2uLL:
        a5.n128_u64[0] = *v9;
        if (*(double *)v9 < *v10)
        {
          __int128 v75 = *(_OWORD *)v10;
          *(_OWORD *)uint64_t v10 = *(_OWORD *)v9;
          a5.n128_u64[0] = v75;
          *(_OWORD *)int v9 = v75;
        }

        return a5.n128_f64[0];
      case 3uLL:
        sub_1AEF7C(v10, v10 + 2, a2 - 2);
        return a5.n128_f64[0];
      case 4uLL:
        a5.n128_u64[0] = sub_1AF020(v10, v10 + 2, v10 + 4, (unint64_t *)a2 - 2).n128_u64[0];
        return a5.n128_f64[0];
      case 5uLL:
        a5.n128_u64[0] = sub_1AF0BC(v10, v10 + 2, v10 + 4, (unint64_t *)v10 + 6, (unint64_t *)a2 - 2).n128_u64[0];
        return a5.n128_f64[0];
      default:
        if (v11 <= 383)
        {
          __int128 v35 = v10 + 2;
          BOOL v37 = v10 == a2 || v35 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v37)
            {
              uint64_t v38 = 0LL;
              double v39 = v10;
              do
              {
                double v40 = v35;
                a5.n128_f64[0] = v39[2];
                if (a5.n128_f64[0] < *v39)
                {
                  uint64_t v41 = *((void *)v39 + 3);
                  uint64_t v42 = v38;
                  while (1)
                  {
                    *(_OWORD *)((char *)v10 + v42 + 16) = *(_OWORD *)((char *)v10 + v42);
                    if (!v42) {
                      break;
                    }
                    double v43 = *(double *)((char *)v10 + v42 - 16);
                    v42 -= 16LL;
                    if (a5.n128_f64[0] >= v43)
                    {
                      double v44 = (double *)((char *)v10 + v42 + 16);
                      goto LABEL_72;
                    }
                  }

                  double v44 = v10;
LABEL_72:
                  *double v44 = a5.n128_f64[0];
                  *((void *)v44 + 1) = v41;
                }

                __int128 v35 = v40 + 2;
                v38 += 16LL;
                double v39 = v40;
              }

              while (v40 + 2 != a2);
            }
          }

          else if (!v37)
          {
            do
            {
              uint64_t v68 = (uint64_t)v35;
              a5.n128_u64[0] = *(void *)(a1 + 16);
              if (a5.n128_f64[0] < *(double *)a1)
              {
                uint64_t v69 = *(void *)(a1 + 24);
                char v70 = v35;
                do
                {
                  *(_OWORD *)char v70 = *((_OWORD *)v70 - 1);
                  double v71 = *(v70 - 4);
                  v70 -= 2;
                }

                while (a5.n128_f64[0] < v71);
                *char v70 = a5.n128_f64[0];
                *((void *)v70 + 1) = v69;
              }

              v35 += 2;
              a1 = v68;
            }

            while ((double *)(v68 + 16) != a2);
          }

          return a5.n128_f64[0];
        }

        if (!a3)
        {
          if (v10 != a2)
          {
            int64_t v45 = (v12 - 2) >> 1;
            int64_t v46 = v45;
            do
            {
              int64_t v47 = v46;
              if (v45 >= v46)
              {
                uint64_t v48 = (2 * v46) | 1;
                uint64_t v49 = &v10[2 * v48];
                if (2 * v47 + 2 < (uint64_t)v12 && *v49 < v49[2])
                {
                  v49 += 2;
                  uint64_t v48 = 2 * v47 + 2;
                }

                uint64_t v50 = &v10[2 * v47];
                double v51 = *v50;
                if (*v49 >= *v50)
                {
                  uint64_t v52 = *((void *)v50 + 1);
                  do
                  {
                    double v53 = v50;
                    uint64_t v50 = v49;
                    *(_OWORD *)double v53 = *(_OWORD *)v49;
                    if (v45 < v48) {
                      break;
                    }
                    uint64_t v54 = 2 * v48;
                    uint64_t v48 = (2 * v48) | 1;
                    uint64_t v49 = &v10[2 * v48];
                    uint64_t v55 = v54 + 2;
                    if (v55 < (uint64_t)v12 && *v49 < v49[2])
                    {
                      v49 += 2;
                      uint64_t v48 = v55;
                    }
                  }

                  while (*v49 >= v51);
                  *uint64_t v50 = v51;
                  *((void *)v50 + 1) = v52;
                }
              }

              int64_t v46 = v47 - 1;
            }

            while (v47);
            uint64_t v56 = (unint64_t)v11 >> 4;
            do
            {
              uint64_t v57 = 0LL;
              __int128 v76 = *(_OWORD *)v10;
              double v58 = v10;
              do
              {
                double v59 = v58;
                v58 += 2 * v57 + 2;
                uint64_t v60 = 2 * v57;
                uint64_t v57 = (2 * v57) | 1;
                uint64_t v61 = v60 + 2;
                if (v61 < v56 && *v58 < v58[2])
                {
                  v58 += 2;
                  uint64_t v57 = v61;
                }

                *(_OWORD *)double v59 = *(_OWORD *)v58;
              }

              while (v57 <= (uint64_t)((unint64_t)(v56 - 2) >> 1));
              a2 -= 2;
              if (v58 == a2)
              {
                a5.n128_u64[0] = v76;
                *(_OWORD *)double v58 = v76;
              }

              else
              {
                *(_OWORD *)double v58 = *(_OWORD *)a2;
                a5.n128_u64[0] = v76;
                *(_OWORD *)a2 = v76;
                uint64_t v62 = (char *)v58 - (char *)v10 + 16;
                if (v62 >= 17)
                {
                  unint64_t v63 = (((unint64_t)v62 >> 4) - 2) >> 1;
                  uint64_t v64 = &v10[2 * v63];
                  a5.n128_f64[0] = *v58;
                  if (*v64 < *v58)
                  {
                    uint64_t v65 = *((void *)v58 + 1);
                    do
                    {
                      char v66 = v58;
                      double v58 = v64;
                      *(_OWORD *)char v66 = *(_OWORD *)v64;
                      if (!v63) {
                        break;
                      }
                      unint64_t v63 = (v63 - 1) >> 1;
                      uint64_t v64 = &v10[2 * v63];
                    }

                    while (*v64 < a5.n128_f64[0]);
                    *double v58 = a5.n128_f64[0];
                    *((void *)v58 + 1) = v65;
                  }
                }
              }
            }

            while (v56-- > 2);
          }

          return a5.n128_f64[0];
        }

        unint64_t v13 = v12 >> 1;
        BOOL v14 = &v10[2 * (v12 >> 1)];
        if ((unint64_t)v11 < 0x801)
        {
          sub_1AEF7C((double *)(a1 + 16 * (v12 >> 1)), (double *)a1, a2 - 2);
        }

        else
        {
          sub_1AEF7C((double *)a1, (double *)(a1 + 16 * (v12 >> 1)), a2 - 2);
          sub_1AEF7C((double *)(a1 + 16), v14 - 2, a2 - 4);
          sub_1AEF7C((double *)(a1 + 32), (double *)(a1 + 16 + 16 * v13), a2 - 6);
          sub_1AEF7C(v14 - 2, v14, (double *)(a1 + 16 + 16 * v13));
          __n128 v73 = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *(__n128 *)BOOL v14 = v73;
        }

        --a3;
        if ((a4 & 1) == 0 && *(double *)(a1 - 16) >= *(double *)a1)
        {
          a5 = *(__n128 *)a1;
          if (*(double *)a1 >= *(double *)v9)
          {
            unint64_t v29 = a1 + 16;
            do
            {
              uint64_t v10 = (double *)v29;
              v29 += 16LL;
            }

            while (a5.n128_f64[0] >= *v10);
          }

          else
          {
            uint64_t v10 = (double *)a1;
            do
            {
              double v28 = v10[2];
              v10 += 2;
            }

            while (a5.n128_f64[0] >= v28);
          }

          __int128 v30 = a2;
          if (v10 < a2)
          {
            __int128 v30 = a2;
            do
            {
              double v31 = *(v30 - 2);
              v30 -= 2;
            }

            while (a5.n128_f64[0] < v31);
          }

          while (v10 < v30)
          {
            __int128 v74 = *(_OWORD *)v10;
            *(_OWORD *)uint64_t v10 = *(_OWORD *)v30;
            *(_OWORD *)__int128 v30 = v74;
            do
            {
              double v32 = v10[2];
              v10 += 2;
            }

            while (a5.n128_f64[0] >= v32);
            do
            {
              double v33 = *(v30 - 2);
              v30 -= 2;
            }

            while (a5.n128_f64[0] < v33);
          }

          double v34 = v10 - 2;
          a4 = 0;
          *(__n128 *)double v34 = a5;
          continue;
        }

        __n128 v15 = *(__n128 *)a1;
        unint64_t v16 = a1;
        do
        {
          int v17 = (double *)v16;
          double v18 = *(double *)(v16 + 16);
          v16 += 16LL;
        }

        while (v18 < v15.n128_f64[0]);
        int v19 = a2;
        if (v17 == (double *)a1)
        {
          int v19 = a2;
          do
          {
            double v21 = *(v19 - 2);
            v19 -= 2;
          }

          while (v21 >= v15.n128_f64[0]);
        }

        else
        {
          do
          {
            double v20 = *(v19 - 2);
            v19 -= 2;
          }

          while (v20 >= v15.n128_f64[0]);
        }

        if (v16 < (unint64_t)v19)
        {
          unint64_t v22 = v16;
          int v23 = v19;
          do
          {
            __int128 v24 = *(_OWORD *)v22;
            *(_OWORD *)unint64_t v22 = *(_OWORD *)v23;
            *(_OWORD *)int v23 = v24;
            do
            {
              int v17 = (double *)v22;
              double v25 = *(double *)(v22 + 16);
              v22 += 16LL;
            }

            while (v25 < v15.n128_f64[0]);
            do
            {
              double v26 = *(v23 - 2);
              v23 -= 2;
            }

            while (v26 >= v15.n128_f64[0]);
          }

          while (v22 < (unint64_t)v23);
        }

        *(__n128 *)int v17 = v15;
        if (v16 < (unint64_t)v19)
        {
LABEL_29:
          sub_1AE8F0(a1, v17, a3, a4 & 1);
          a4 = 0;
          uint64_t v10 = v17 + 2;
          continue;
        }

        BOOL v27 = sub_1AF184(a1, (uint64_t)v17);
        uint64_t v10 = v17 + 2;
        if (!sub_1AF184((uint64_t)(v17 + 2), (uint64_t)a2))
        {
          if (v27) {
            continue;
          }
          goto LABEL_29;
        }

        a2 = v17;
        if (!v27) {
          goto LABEL_1;
        }
        return a5.n128_f64[0];
    }
  }

double *sub_1AEF7C(double *result, double *a2, double *a3)
{
  double v3 = *a2;
  double v4 = *a3;
  if (*a2 >= *result)
  {
    if (v4 < v3)
    {
      __int128 v6 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v6;
      if (*a2 < *result)
      {
        __int128 v7 = *(_OWORD *)result;
        *(_OWORD *)BOOL result = *(_OWORD *)a2;
        *(_OWORD *)a2 = v7;
      }
    }
  }

  else
  {
    if (v4 >= v3)
    {
      __int128 v8 = *(_OWORD *)result;
      *(_OWORD *)BOOL result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v8;
      if (*a3 >= *a2) {
        return result;
      }
      __int128 v5 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
    }

    else
    {
      __int128 v5 = *(_OWORD *)result;
      *(_OWORD *)BOOL result = *(_OWORD *)a3;
    }

    *(_OWORD *)a3 = v5;
  }

  return result;
}

__n128 sub_1AF020(double *a1, double *a2, double *a3, unint64_t *a4)
{
  result.n128_u64[0] = *a4;
  if (*(double *)a4 < *a3)
  {
    __n128 result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    result.n128_f64[0] = *a3;
    if (*a3 < *a2)
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      result.n128_f64[0] = *a2;
      if (*a2 < *a1)
      {
        __n128 result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }

  return result;
}

__n128 sub_1AF0BC(double *a1, double *a2, double *a3, unint64_t *a4, unint64_t *a5)
{
  result.n128_u64[0] = *a5;
  if (*(double *)a5 < *(double *)a4)
  {
    __n128 result = *(__n128 *)a4;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(__n128 *)a5 = result;
    result.n128_u64[0] = *a4;
    if (*(double *)a4 < *a3)
    {
      __n128 result = *(__n128 *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(__n128 *)a4 = result;
      result.n128_f64[0] = *a3;
      if (*a3 < *a2)
      {
        __n128 result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = result;
        result.n128_f64[0] = *a2;
        if (*a2 < *a1)
        {
          __n128 result = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }

  return result;
}

BOOL sub_1AF184(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1LL;
  switch(v4)
  {
    case 0LL:
    case 1LL:
      return result;
    case 2LL:
      __int128 v6 = (_OWORD *)(a2 - 16);
      if (*(double *)(a2 - 16) < *(double *)a1)
      {
        __int128 v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *__int128 v6 = v7;
      }

      return result;
    case 3LL:
      sub_1AEF7C((double *)a1, (double *)(a1 + 16), (double *)(a2 - 16));
      return 1LL;
    case 4LL:
      sub_1AF020((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32), (unint64_t *)(a2 - 16));
      return 1LL;
    case 5LL:
      sub_1AF0BC( (double *)a1,  (double *)(a1 + 16),  (double *)(a1 + 32),  (unint64_t *)(a1 + 48),  (unint64_t *)(a2 - 16));
      return 1LL;
    default:
      __int128 v8 = (double *)(a1 + 32);
      sub_1AEF7C((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32));
      uint64_t v9 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1LL;
      }
      uint64_t v10 = 0LL;
      int v11 = 0;
      break;
  }

  while (1)
  {
    double v12 = *(double *)v9;
    if (*(double *)v9 < *v8)
    {
      uint64_t v13 = *(void *)(v9 + 8);
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        double v15 = *(double *)(a1 + v14 + 16);
        v14 -= 16LL;
        if (v12 >= v15)
        {
          uint64_t v16 = a1 + v14 + 48;
          goto LABEL_12;
        }
      }

      uint64_t v16 = a1;
LABEL_12:
      *(double *)uint64_t v16 = v12;
      *(void *)(v16 + 8) = v13;
      if (++v11 == 8) {
        return v9 + 16 == a2;
      }
    }

    __int128 v8 = (double *)v9;
    v10 += 16LL;
    v9 += 16LL;
    if (v9 == a2) {
      return 1LL;
    }
  }

void sub_1AF2FC(void ***a1)
{
  BOOL v2 = *a1;
  if (*v2)
  {
    sub_1AF33C((uint64_t *)v2);
    operator delete(**a1);
  }

void sub_1AF33C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 64LL)
  {
    uint64_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }

  a1[1] = v2;
}

uint64_t sub_1AF390(uint64_t a1, uint64_t *a2)
{
  uint64_t v11 = *a2;
  uint64_t v4 = (uint64_t)a2 + 4;
  int v3 = *((_DWORD *)a2 + 1);
  unsigned int v12 = *(_DWORD *)(v4 + 4);
  __int128 v5 = (_DWORD *)sub_6C2A0(*(void **)(a1 + 8), v3, v12);
  if (*(_DWORD *)a2 == 1853059700) {
    return 1LL;
  }
  if (*(_DWORD *)a2 == 1853059619) {
    return 0LL;
  }
  if (!v5)
  {
    __int128 v8 = (os_log_t *)sub_138E8(13);
    uint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v14 = "HP_FormatList.cpp";
      __int16 v15 = 1024;
      int v16 = 1468;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError) [theStream is NULL]: no stream for given scope and element",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  HIDWORD(v11) = 1735159650;
  unsigned int v7 = v12;
  if (v12) {
    unsigned int v7 = v12 - v5[23] + 1;
  }
  unsigned int v12 = v7;
  return (*(uint64_t (**)(_DWORD *, uint64_t *))(*(void *)v5 + 40LL))(v5, &v11);
}

uint64_t sub_1AF504(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = *a2;
  uint64_t v9 = (uint64_t)a2 + 4;
  int v8 = *((_DWORD *)a2 + 1);
  unsigned int v22 = *(_DWORD *)(v9 + 4);
  uint64_t v10 = (_DWORD *)sub_6C2A0(*(void **)(a1 + 8), v8, v22);
  if (*(_DWORD *)a2 == 1853059700) {
    return 8LL;
  }
  if (*(_DWORD *)a2 != 1853059619)
  {
    if (!v10)
    {
      __int16 v15 = (os_log_t *)sub_138E8(13);
      int v16 = *v15;
      if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_FormatList.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1507;
        _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError) [theStream is NULL]: no stream for given scope and element",  buf,  0x12u);
      }

      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_4865A0;
      exception[2] = 2003332927;
    }

    HIDWORD(v21) = 1735159650;
    unsigned int v11 = v22;
    if (v22) {
      unsigned int v11 = v22 - v10[23] + 1;
    }
    goto LABEL_7;
  }

  if (v22)
  {
    if (!v10)
    {
      double v18 = (os_log_t *)sub_138E8(13);
      int v19 = *v18;
      if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_FormatList.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1499;
        _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError) [theStream is NULL]: no stream for given scope and element",  buf,  0x12u);
      }

      double v20 = __cxa_allocate_exception(0x10uLL);
      *(void *)double v20 = &off_4865A0;
      uint64_t v20[2] = 2003332927;
    }

    HIDWORD(v21) = 1735159650;
    unsigned int v11 = v22 - v10[23] + 1;
LABEL_7:
    unsigned int v22 = v11;
    return (*(uint64_t (**)(_DWORD *, uint64_t *, uint64_t, uint64_t))(*(void *)v10 + 48LL))(v10, &v21, a3, a4);
  }

  memset(buf, 0, sizeof(buf));
  sub_1AFCB4(a1, (uint64_t)buf);
  int v13 = *(_DWORD *)buf;
  int v14 = *(_DWORD *)&buf[8];
  if (*(void *)buf) {
    operator delete(*(void **)buf);
  }
  return (v14 - v13) & 0xFFFFFFF0;
}

void sub_1AF7B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1AF7D8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6, uint64_t a7)
{
  int v14 = *(void **)(a1 + 8);
  unsigned int v15 = a2[2];
  uint64_t v16 = sub_6C2A0(v14, a2[1], v15);
  if (*a2 != 1853059700)
  {
    if (!v16)
    {
      uint64_t v38 = (os_log_t *)sub_138E8(13);
      double v39 = *v38;
      if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
      {
        int v44 = 136315394;
        int64_t v45 = "HP_FormatList.cpp";
        __int16 v46 = 1024;
        int v47 = 1630;
        _os_log_impl( &dword_0,  v39,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError) [theStream is NULL]: no stream for given scope and element",  (uint8_t *)&v44,  0x12u);
      }

      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_4865A0;
      exception[2] = 2003332927;
    }

    return (*(uint64_t (**)(uint64_t, _DWORD *, uint64_t, uint64_t, uint64_t, double *, uint64_t))(*(void *)v16 + 64LL))( v16,  a2,  a3,  a4,  a5,  a6,  a7);
  }

  if (v15)
  {
    if (!v16)
    {
      int v17 = (os_log_t *)sub_138E8(13);
      double v18 = *v17;
      if (*v17)
      {
        if (os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
        {
          int v44 = 136315394;
          int64_t v45 = "HP_FormatList.cpp";
          __int16 v46 = 1024;
          int v47 = 1622;
          _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError) [theStream is NULL]: no stream for given scope and element",  (uint8_t *)&v44,  0x12u);
        }
      }

      int v19 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v19 = &off_4865A0;
      void v19[2] = 2003332927;
    }

    return (*(uint64_t (**)(uint64_t, _DWORD *, uint64_t, uint64_t, uint64_t, double *, uint64_t))(*(void *)v16 + 64LL))( v16,  a2,  a3,  a4,  a5,  a6,  a7);
  }

  if ((_DWORD)a5 != 8)
  {
    uint64_t v41 = (os_log_t *)sub_138E8(13);
    uint64_t v42 = *v41;
    if (*v41 && os_log_type_enabled(*v41, OS_LOG_TYPE_ERROR))
    {
      int v44 = 136315394;
      int64_t v45 = "HP_FormatList.cpp";
      __int16 v46 = 1024;
      int v47 = 1588;
      _os_log_impl( &dword_0,  v42,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): wrong data size for kAudioDevicePropertyNominalSampleRate",  (uint8_t *)&v44,  0x12u);
    }

    double v43 = __cxa_allocate_exception(0x10uLL);
    *(void *)double v43 = &off_4865A0;
    v43[2] = 561211770;
  }

  char v21 = 0;
  double v22 = *a6;
LABEL_12:
  while (2)
  {
    char v23 = v21;
    BOOL v24 = (v21 & 1) == 0;
    if ((v21 & 1) != 0) {
      uint64_t v25 = 63LL;
    }
    else {
      uint64_t v25 = 66LL;
    }
    if (v24) {
      uint64_t v26 = 65LL;
    }
    else {
      uint64_t v26 = 62LL;
    }
    unint64_t v27 = v14[v25] - v14[v26];
    if ((v27 & 0x7FFFFFFF8LL) == 0)
    {
      char v21 = 1;
      if ((v23 & 1) == 0) {
        continue;
      }
      goto LABEL_34;
    }

    break;
  }

  unint64_t v28 = 0LL;
  unint64_t v29 = (v27 >> 3);
  while (1)
  {
    uint64_t v30 = *(void *)(a1 + 8);
    uint64_t v31 = v30 + 496;
    if ((v23 & 1) != 0) {
      uint64_t v32 = 496LL;
    }
    else {
      uint64_t v32 = 520LL;
    }
    if ((v23 & 1) == 0) {
      uint64_t v31 = v30 + 520;
    }
    uint64_t v33 = *(void *)(v30 + v32);
    if (v28 < (*(void *)(v31 + 8) - v33) >> 3)
    {
      uint64_t v34 = *(void *)(v33 + 8 * v28);
      if (v34)
      {
        if (sub_76C6C(*(void *)(v34 + 104), v22)) {
          return sub_1AE07C(*(void *)(v34 + 104), v22);
        }
      }
    }

    if (++v28 >= v29)
    {
      if ((v23 & 1) == 0)
      {
        int v14 = *(void **)(a1 + 8);
        char v21 = 1;
        goto LABEL_12;
      }

uint64_t sub_1AFC84()
{
  return 6LL;
}

double sub_1AFC8C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a2 <= 5) {
    *(_DWORD *)a3 = *(_DWORD *)&aTrsnRsntmfsamf[4 * a2];
  }
  double result = NAN;
  *(void *)(a3 + 4) = -3587560918LL;
  return result;
}

void sub_1AFCB4(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)a2;
  __int128 v68 = 0uLL;
  uint64_t v65 = 0LL;
  char v66 = 0LL;
  unint64_t v67 = 0LL;
  int v3 = *(void **)(a1 + 8);
  unint64_t v4 = v3[63] - v3[62];
  uint64_t v5 = v4 & 0x7FFFFFFF8LL;
  BOOL v6 = (v4 & 0x7FFFFFFF8LL) == 0;
  if (*(_BYTE *)(a1 + 16))
  {
    if (v5)
    {
      unint64_t v7 = 0LL;
      int v8 = 0LL;
      uint64_t v62 = (v4 >> 3);
      char v9 = 1;
      do
      {
        uint64_t v10 = *(void *)(*(void *)(a1 + 8) + 496LL);
        if (v7 >= (*(void *)(*(void *)(a1 + 8) + 504LL) - v10) >> 3) {
          uint64_t v11 = 0LL;
        }
        else {
          uint64_t v11 = *(void *)(v10 + 8 * v7);
        }
        char v66 = v8;
        int v12 = sub_765E4(*(void *)(v11 + 104));
        int v13 = v8;
        if (v12)
        {
          for (unsigned int i = 0; i != v12; ++i)
          {
            sub_76BF4(*(void *)(v11 + 104), i, &v68);
            if ((v9 & 1) != 0)
            {
              __int128 v15 = v68;
              uint64_t v16 = v66;
              if ((unint64_t)v66 >= v67)
              {
                double v18 = v65;
                int64_t v19 = (v66 - v65) >> 4;
                unint64_t v20 = v19 + 1;
                uint64_t v21 = v67 - (void)v65;
                else {
                  unint64_t v22 = v20;
                }
                if (v22) {
                  unint64_t v22 = (unint64_t)sub_7BE90(v22);
                }
                else {
                  uint64_t v23 = 0LL;
                }
                BOOL v24 = (char *)(v22 + 16 * v19);
                *(_OWORD *)BOOL v24 = v15;
                uint64_t v25 = v24;
                if (v16 != v18)
                {
                  do
                  {
                    *((_OWORD *)v25 - 1) = *((_OWORD *)v16 - 1);
                    v25 -= 16;
                    v16 -= 16;
                  }

                  while (v16 != v18);
                  uint64_t v16 = v18;
                }

                int v17 = v24 + 16;
                uint64_t v65 = v25;
                unint64_t v67 = v22 + 16 * v23;
                if (v16) {
                  operator delete(v16);
                }
              }

              else
              {
                *(void *)char v66 = v68;
                *((void *)v16 + 1) = *((void *)&v15 + 1);
                int v17 = v16 + 16;
              }

              char v66 = v17;
            }

            else
            {
              sub_1B0220((double *)&v68, (double **)a2, (void **)&v65);
            }
          }

          int v13 = v65;
          int v8 = v66;
        }

        sub_1AE7B8((void *)a2, v13, v8, (v8 - v13) >> 4);
        char v9 = 0;
        ++v7;
        int v8 = v13;
      }

      while (v7 != v62);
      int v3 = *(void **)(a1 + 8);
    }

    unint64_t v26 = v3[66] - v3[65];
    if ((v26 & 0x7FFFFFFF8LL) != 0)
    {
      unint64_t v27 = 0LL;
      uint64_t v63 = (v26 >> 3);
      do
      {
        uint64_t v28 = *(void *)(a1 + 8);
        uint64_t v29 = *(void *)(v28 + 528);
        uint64_t v30 = *(void *)(v28 + 520);
        if (v27 >= (v29 - v30) >> 3) {
          uint64_t v31 = 0LL;
        }
        else {
          uint64_t v31 = *(void *)(v30 + 8 * v27);
        }
        uint64_t v32 = v65;
        char v66 = v65;
        int v33 = sub_765E4(*(void *)(v31 + 104));
        if (v33)
        {
          for (unsigned int j = 0; j != v33; ++j)
          {
            sub_76BF4(*(void *)(v31 + 104), j, &v68);
            if (v6)
            {
              __int128 v35 = v68;
              __int128 v36 = v66;
              if ((unint64_t)v66 >= v67)
              {
                uint64_t v38 = v65;
                int64_t v39 = (v66 - v65) >> 4;
                unint64_t v40 = v39 + 1;
                uint64_t v41 = v67 - (void)v65;
                else {
                  unint64_t v42 = v40;
                }
                if (v42) {
                  unint64_t v42 = (unint64_t)sub_7BE90(v42);
                }
                else {
                  uint64_t v43 = 0LL;
                }
                int v44 = (char *)(v42 + 16 * v39);
                *(_OWORD *)int v44 = v35;
                int64_t v45 = v44;
                if (v36 != v38)
                {
                  do
                  {
                    *((_OWORD *)v45 - 1) = *((_OWORD *)v36 - 1);
                    v45 -= 16;
                    v36 -= 16;
                  }

                  while (v36 != v38);
                  __int128 v36 = v38;
                }

                BOOL v37 = v44 + 16;
                uint64_t v65 = v45;
                unint64_t v67 = v42 + 16 * v43;
                if (v36) {
                  operator delete(v36);
                }
              }

              else
              {
                *(void *)char v66 = v68;
                *((void *)v36 + 1) = *((void *)&v35 + 1);
                BOOL v37 = v36 + 16;
              }

              char v66 = v37;
            }

            else
            {
              sub_1B0220((double *)&v68, (double **)a2, (void **)&v65);
            }
          }

          __int16 v46 = v65;
          uint64_t v32 = v66;
        }

        else
        {
          __int16 v46 = v32;
        }

        sub_1AE7B8((void *)a2, v46, v32, (v32 - v46) >> 4);
        BOOL v6 = 0;
        ++v27;
      }

      while (v27 != v63);
    }

    else
    {
      __int16 v46 = v65;
    }
  }

  else
  {
    if (v5)
    {
      unint64_t v47 = 0LL;
      __int16 v46 = 0LL;
      uint64_t v48 = (v4 >> 3);
      do
      {
        uint64_t v49 = *(void *)(*(void *)(a1 + 8) + 496LL);
        if (v47 >= (*(void *)(*(void *)(a1 + 8) + 504LL) - v49) >> 3) {
          uint64_t v50 = 0LL;
        }
        else {
          uint64_t v50 = *(void *)(v49 + 8 * v47);
        }
        int v51 = sub_765E4(*(void *)(v50 + 104));
        if (v51)
        {
          for (unsigned int k = 0; k != v51; ++k)
          {
            char v66 = v46;
            sub_76BF4(*(void *)(v50 + 104), k, &v68);
            sub_7674C((double *)&v68, (double **)a2, (double **)&v65);
            __int16 v46 = v65;
            sub_1AE7B8((void *)a2, v65, v66, (v66 - v65) >> 4);
          }
        }

        ++v47;
      }

      while (v47 != v48);
      int v3 = *(void **)(a1 + 8);
    }

    else
    {
      __int16 v46 = 0LL;
    }

    unint64_t v53 = v3[66] - v3[65];
    if ((v53 & 0x7FFFFFFF8LL) != 0)
    {
      unint64_t v54 = 0LL;
      uint64_t v55 = (v53 >> 3);
      do
      {
        uint64_t v56 = *(void *)(a1 + 8);
        uint64_t v57 = *(void *)(v56 + 528);
        uint64_t v58 = *(void *)(v56 + 520);
        if (v54 >= (v57 - v58) >> 3) {
          uint64_t v59 = 0LL;
        }
        else {
          uint64_t v59 = *(void *)(v58 + 8 * v54);
        }
        int v60 = sub_765E4(*(void *)(v59 + 104));
        if (v60)
        {
          for (unsigned int m = 0; m != v60; ++m)
          {
            char v66 = v46;
            sub_76BF4(*(void *)(v59 + 104), m, &v68);
            sub_7674C((double *)&v68, (double **)a2, (double **)&v65);
            __int16 v46 = v65;
            sub_1AE7B8((void *)a2, v65, v66, (v66 - v65) >> 4);
          }
        }

        ++v54;
      }

      while (v54 != v55);
    }
  }

  if (v46) {
    operator delete(v46);
  }
}

void sub_1B01DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B0220(double *a1, double **a2, void **a3)
{
  unint64_t v4 = *a2;
  int v3 = a2[1];
  if (*a2 != v3)
  {
    do
    {
      double v8 = a1[1];
      if (v8 >= *v4)
      {
        double v9 = v4[1];
        if (*a1 <= v9)
        {
          if (*a1 >= *v4) {
            double v10 = *a1;
          }
          else {
            double v10 = *v4;
          }
          if (v9 >= v8) {
            uint64_t v11 = *((void *)a1 + 1);
          }
          else {
            uint64_t v11 = *((void *)v4 + 1);
          }
          int v13 = (double *)a3[1];
          unint64_t v12 = (unint64_t)a3[2];
          if ((unint64_t)v13 >= v12)
          {
            uint64_t v15 = ((char *)v13 - (_BYTE *)*a3) >> 4;
            unint64_t v16 = v15 + 1;
            uint64_t v17 = v12 - (void)*a3;
            if (v17 >> 3 > v16) {
              unint64_t v16 = v17 >> 3;
            }
            else {
              unint64_t v18 = v16;
            }
            if (v18) {
              unint64_t v18 = (unint64_t)sub_7BE90(v18);
            }
            else {
              uint64_t v19 = 0LL;
            }
            unint64_t v20 = (double *)(v18 + 16 * v15);
            *unint64_t v20 = v10;
            *((void *)v20 + 1) = v11;
            unint64_t v22 = (char *)*a3;
            uint64_t v21 = (char *)a3[1];
            uint64_t v23 = v20;
            if (v21 != *a3)
            {
              do
              {
                *((_OWORD *)v23 - 1) = *((_OWORD *)v21 - 1);
                v23 -= 2;
                v21 -= 16;
              }

              while (v21 != v22);
              uint64_t v21 = (char *)*a3;
            }

            int v14 = v20 + 2;
            *a3 = v23;
            a3[1] = v20 + 2;
            a3[2] = (void *)(v18 + 16 * v19);
            if (v21) {
              operator delete(v21);
            }
          }

          else
          {
            double *v13 = v10;
            *((void *)v13 + 1) = v11;
            int v14 = v13 + 2;
          }

          a3[1] = v14;
          int v3 = a2[1];
        }
      }

      v4 += 2;
    }

    while (v4 != v3);
  }

void sub_1B036C(uint64_t *a1, __int128 *a2)
{
  __int128 v3 = a2[1];
  __int128 v125 = *a2;
  __int128 v126 = v3;
  uint64_t v4 = *((void *)a2 + 4);
  uint64_t v127 = v4;
  *(void *)&__int128 v125 = 0LL;
  __int128 v124 = *(__int128 *)((char *)a2 + 40);
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
LABEL_52:
    sub_1B0E10((uint64_t)&v119, (uint64_t)&v125, (uint64_t *)&v124);
    unint64_t v22 = a1[2];
    unint64_t v23 = a1[1];
    if (v23 < v22)
    {
      __int128 v24 = v120;
      uint64_t v25 = v121;
      *(_OWORD *)unint64_t v23 = v119;
      *(_OWORD *)(v23 + 16) = v24;
      *(void *)(v23 + 32) = v25;
      *(void *)(v23 + 40) = 0LL;
      *(void *)(v23 + 48) = 0LL;
      *(void *)(v23 + 56) = 0LL;
      *(_OWORD *)(v23 + 40) = *(_OWORD *)__p;
      *(void *)(v23 + 56) = v123;
      __p[0] = 0LL;
      __p[1] = 0LL;
      uint64_t v123 = 0LL;
      uint64_t v26 = v23 + 64;
      goto LABEL_54;
    }

    uint64_t v27 = (uint64_t)(v23 - *a1) >> 6;
    unint64_t v28 = v27 + 1;
    uint64_t v29 = v22 - *a1;
    if (v29 >> 5 > v28) {
      unint64_t v28 = v29 >> 5;
    }
    else {
      unint64_t v30 = v28;
    }
    uint64_t v135 = a1 + 2;
    uint64_t v31 = (char *)sub_85830(v30);
    uint64_t v32 = (uint64_t)&v31[64 * v27];
    uint64_t v34 = &v31[64 * v33];
    __int128 v35 = v120;
    uint64_t v36 = v121;
    *(_OWORD *)uint64_t v32 = v119;
    *(_OWORD *)(v32 + 16) = v35;
    *(void *)(v32 + 32) = v36;
    *(void *)(v32 + 40) = 0LL;
    *(void *)(v32 + 48) = 0LL;
    *(void *)(v32 + 56) = 0LL;
    *(_OWORD *)(v32 + 40) = *(_OWORD *)__p;
    *(void *)(v32 + 56) = v123;
    __p[0] = 0LL;
    __p[1] = 0LL;
    uint64_t v123 = 0LL;
    uint64_t v37 = v32 + 64;
    uint64_t v38 = sub_1B0EC8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, v32, v32);
    int64x2_t v39 = *(int64x2_t *)a1;
    *a1 = v38;
    a1[1] = v37;
    int64x2_t v133 = v39;
    uint64_t v40 = a1[2];
    a1[2] = (uint64_t)v34;
    uint64_t v134 = v40;
    uint64_t v132 = (char *)v39.i64[0];
    sub_1B0E68((uint64_t)&v132);
    uint64_t v41 = __p[0];
    a1[1] = v37;
    if (!v41) {
      return;
    }
LABEL_129:
    __p[1] = v41;
    operator delete(v41);
    return;
  }

  int v7 = BYTE12(v125) & 1;
  while (1)
  {
    unsigned int v8 = *(_DWORD *)(v6 + 8);
    BOOL v9 = v8 != 0;
    if (!v8)
    {
      BOOL v12 = 0;
LABEL_16:
      BOOL v10 = v8 == 1819304813;
LABEL_17:
      BOOL v13 = DWORD2(v125) == 1819304813;
      goto LABEL_18;
    }

    BOOL v10 = v8 == 1819304813;
    if (DWORD2(v125) && v8 != DWORD2(v125))
    {
      BOOL v12 = DWORD2(v125) != 1819304813 && v8 < DWORD2(v125);
      if (v8 == 1819304813) {
        BOOL v12 = 1;
      }
      goto LABEL_16;
    }

    if (v8 != 1819304813 || DWORD2(v125) != 1819304813)
    {
      BOOL v12 = 0;
      BOOL v9 = 0;
      goto LABEL_17;
    }

    if ((*(_BYTE *)(v6 + 12) & 0x40) == 0) {
      break;
    }
    BOOL v13 = 1;
    BOOL v10 = 1;
    BOOL v12 = (BYTE12(v125) & 0x40) == 0;
    BOOL v9 = v12;
LABEL_18:
    BOOL v14 = v10 && !v9;
    BOOL v15 = !v14 || !v13;
    if (!v15 && (*(_DWORD *)(v6 + 12) & 1) != v7)
    {
      BOOL v12 = v7 != 0;
      LOBYTE(v9) = 1;
    }

    BOOL v16 = v12;
    if (v9) {
      goto LABEL_48;
    }
    unsigned int v17 = *(_DWORD *)(v6 + 32);
    if (v17)
    {
      BOOL v16 = v17 > v4;
      if ((_DWORD)v4)
      {
        if (v17 != (_DWORD)v4) {
          goto LABEL_48;
        }
      }
    }

    unsigned int v18 = *(_DWORD *)(v6 + 28);
    if (!v18)
    {
      BOOL v16 = v12;
LABEL_48:
      if (!v16) {
        goto LABEL_64;
      }
      goto LABEL_49;
    }

    BOOL v14 = v18 == HIDWORD(v126);
    BOOL v19 = v18 < HIDWORD(v126);
    if (!v14 && HIDWORD(v126) != 0) {
      BOOL v12 = v19;
    }
    if (!v12) {
      goto LABEL_64;
    }
LABEL_49:
    v6 += 64LL;
    if (v6 == v5) {
      goto LABEL_52;
    }
  }

  if ((BYTE12(v125) & 0x40) == 0)
  {
    BOOL v12 = 0;
    BOOL v9 = 0;
    BOOL v13 = 1;
    BOOL v10 = 1;
    goto LABEL_18;
  }

  unsigned int v8 = 1819304813;
LABEL_64:
  if (v8 && DWORD2(v125) && v8 != DWORD2(v125)
    || (int v42 = *(_DWORD *)(v6 + 16)) != 0 && (_DWORD)v126 && v42 != (_DWORD)v126
    || (int v43 = *(_DWORD *)(v6 + 20)) != 0 && DWORD1(v126) && v43 != DWORD1(v126)
    || (int v44 = *(_DWORD *)(v6 + 24)) != 0 && DWORD2(v126) && v44 != DWORD2(v126)
    || (int v45 = *(_DWORD *)(v6 + 28)) != 0 && HIDWORD(v126) && v45 != HIDWORD(v126)
    || (int v46 = *(_DWORD *)(v6 + 32)) != 0 && (_DWORD)v4 && v46 != (_DWORD)v4
    || !sub_2854C(v6, (uint64_t)&v125))
  {
    sub_1B0E10((uint64_t)&v119, (uint64_t)&v125, (uint64_t *)&v124);
    uint64_t v53 = *a1;
    unint64_t v52 = a1[1];
    uint64_t v54 = v6 - *a1;
    uint64_t v55 = v54 >> 6;
    unint64_t v56 = a1[2];
    if (v52 < v56)
    {
      if (v6 != v52)
      {
        uint64_t v57 = v6 + 64;
        unint64_t v58 = v52 - 64;
        uint64_t v59 = a1[1];
        while (v58 < v52)
        {
          __int128 v60 = *(_OWORD *)(v58 + 16);
          uint64_t v61 = *(void *)(v58 + 32);
          *(_OWORD *)uint64_t v59 = *(_OWORD *)v58;
          *(_OWORD *)(v59 + 16) = v60;
          *(void *)(v59 + 32) = v61;
          *(void *)(v59 + 40) = 0LL;
          *(void *)(v59 + 48) = 0LL;
          *(void *)(v59 + 56) = 0LL;
          *(_OWORD *)(v59 + 40) = *(_OWORD *)(v58 + 40);
          *(void *)(v59 + 56) = *(void *)(v58 + 56);
          *(void *)(v58 + 40) = 0LL;
          *(void *)(v58 + 48) = 0LL;
          *(void *)(v58 + 56) = 0LL;
          v59 += 64LL;
          v58 += 64LL;
        }

        a1[1] = v59;
        if (v52 != v57)
        {
          uint64_t v66 = (uint64_t)(v52 - v57) >> 6 << 6;
          unint64_t v67 = v52 - 24;
          do
          {
            uint64_t v68 = v6 + v66;
            __int128 v69 = *(_OWORD *)(v6 + v66 - 64);
            __int128 v70 = *(_OWORD *)(v6 + v66 - 48);
            *(void *)(v67 - 8) = *(void *)(v6 + v66 - 32);
            *(_OWORD *)(v67 - 24) = v70;
            *(_OWORD *)(v67 - 40) = v69;
            double v71 = *(void **)v67;
            if (*(void *)v67)
            {
              *(void *)(v67 + 8) = v71;
              operator delete(v71);
              *(void *)unint64_t v67 = 0LL;
              *(void *)(v67 + 8) = 0LL;
              *(void *)(v67 + 16) = 0LL;
            }

            int v72 = (void *)(v68 - 24);
            *(_OWORD *)unint64_t v67 = *(_OWORD *)(v68 - 24);
            *(void *)(v67 + 16) = *(void *)(v68 - 8);
            *int v72 = 0LL;
            v72[1] = 0LL;
            v72[2] = 0LL;
            v67 -= 64LL;
            v66 -= 64LL;
          }

          while (v66);
        }

        __int128 v73 = v119;
        __int128 v74 = v120;
        *(void *)(v6 + 32) = v121;
        *(_OWORD *)uint64_t v6 = v73;
        *(_OWORD *)(v6 + 16) = v74;
        __int128 v75 = (void *)(v53 + (v55 << 6));
        uint64_t v77 = v75 + 5;
        __int128 v76 = (void *)v75[5];
        if (v76)
        {
          v75[6] = v76;
          operator delete(v76);
          *uint64_t v77 = 0LL;
          v75[6] = 0LL;
          v75[7] = 0LL;
        }

        *(_OWORD *)uint64_t v77 = *(_OWORD *)__p;
        v75[7] = v123;
        __p[0] = 0LL;
        __p[1] = 0LL;
        uint64_t v123 = 0LL;
        return;
      }

      __int128 v78 = v119;
      __int128 v79 = v120;
      *(void *)(v6 + 32) = v121;
      *(_OWORD *)uint64_t v6 = v78;
      *(_OWORD *)(v6 + 16) = v79;
      int v80 = (void *)(v53 + (v55 << 6));
      v80[6] = 0LL;
      v80[7] = 0LL;
      v80[5] = 0LL;
      *(_OWORD *)(v80 + 5) = *(_OWORD *)__p;
      v80[7] = v123;
      __p[0] = 0LL;
      __p[1] = 0LL;
      uint64_t v123 = 0LL;
      uint64_t v26 = v6 + 64;
LABEL_54:
      a1[1] = v26;
      return;
    }

    unint64_t v62 = ((uint64_t)(v52 - v53) >> 6) + 1;
    if (v62 >> 58) {
      sub_7A87C();
    }
    uint64_t v63 = v56 - v53;
    if (v63 >> 5 > v62) {
      unint64_t v62 = v63 >> 5;
    }
    else {
      unint64_t v64 = v62;
    }
    uint64_t v131 = a1 + 2;
    if (v64) {
      unint64_t v64 = (unint64_t)sub_85830(v64);
    }
    else {
      uint64_t v65 = 0LL;
    }
    unint64_t v81 = v64 + (v55 << 6);
    uint64_t v128 = (char *)v64;
    *(void *)&__int128 v129 = v81;
    *((void *)&v129 + 1) = v81;
    char v130 = (char *)(v64 + (v65 << 6));
    if (v55 == v65)
    {
      if (v54 < 1)
      {
        if (v6 == v53) {
          unint64_t v83 = 1LL;
        }
        else {
          unint64_t v83 = v54 >> 5;
        }
        uint64_t v135 = a1 + 2;
        uint64_t v84 = (char *)sub_85830(v83);
        uint64_t v86 = v129;
        if (*((void *)&v129 + 1) == (void)v129)
        {
          int64x2_t v91 = vdupq_n_s64(v129);
          char v87 = &v84[64 * (v83 >> 2)];
        }

        else
        {
          char v87 = &v84[64 * (v83 >> 2) + *((void *)&v129 + 1) - v129];
          uint64_t v88 = &v84[64 * (v83 >> 2)];
          do
          {
            __int128 v89 = *(_OWORD *)(v86 + 16);
            uint64_t v90 = *(void *)(v86 + 32);
            *(_OWORD *)uint64_t v88 = *(_OWORD *)v86;
            *((_OWORD *)v88 + 1) = v89;
            *((void *)v88 + 4) = v90;
            *((void *)v88 + 5) = 0LL;
            *((void *)v88 + 6) = 0LL;
            *((void *)v88 + 7) = 0LL;
            *(_OWORD *)(v88 + 40) = *(_OWORD *)(v86 + 40);
            *((void *)v88 + 7) = *(void *)(v86 + 56);
            *(void *)(v86 + 40) = 0LL;
            *(void *)(v86 + 48) = 0LL;
            *(void *)(v86 + 56) = 0LL;
            v88 += 64;
            v86 += 64LL;
          }

          while (v88 != v87);
          int64x2_t v91 = (int64x2_t)v129;
        }

        uint64_t v92 = v128;
        char v93 = v130;
        uint64_t v128 = v84;
        *(void *)&__int128 v129 = &v84[64 * (v83 >> 2)];
        int64x2_t v133 = v91;
        *((void *)&v129 + 1) = v87;
        char v130 = &v84[64 * v85];
        uint64_t v132 = v92;
        uint64_t v134 = (uint64_t)v93;
        sub_1B0E68((uint64_t)&v132);
        unint64_t v81 = *((void *)&v129 + 1);
      }

      else
      {
        unint64_t v82 = v55 + 2;
        if (v55 >= -1) {
          unint64_t v82 = v55 + 1;
        }
        v81 -= v82 >> 1 << 6;
        *(void *)&__int128 v129 = v81;
        *((void *)&v129 + 1) = v81;
      }
    }

    __int128 v94 = v120;
    uint64_t v95 = v121;
    *(_OWORD *)unint64_t v81 = v119;
    *(_OWORD *)(v81 + 16) = v94;
    *(void *)(v81 + 32) = v95;
    *(void *)(v81 + 40) = 0LL;
    *(void *)(v81 + 48) = 0LL;
    *(void *)(v81 + 56) = 0LL;
    *(_OWORD *)(v81 + 40) = *(_OWORD *)__p;
    *(void *)(v81 + 56) = v123;
    __p[0] = 0LL;
    __p[1] = 0LL;
    uint64_t v123 = 0LL;
    *((void *)&v129 + 1) += 64LL;
    uint64_t v96 = sub_1B0EC8((uint64_t)(a1 + 2), v6, v6, *a1, *a1, v129, v129);
    *(void *)&__int128 v129 = v96;
    uint64_t v97 = a1[1];
    uint64_t v98 = *((void *)&v129 + 1);
    if (v6 != v97)
    {
      do
      {
        __int128 v99 = *(_OWORD *)(v6 + 16);
        uint64_t v100 = *(void *)(v6 + 32);
        *(_OWORD *)uint64_t v98 = *(_OWORD *)v6;
        *(_OWORD *)(v98 + 16) = v99;
        *(void *)(v98 + 32) = v100;
        *(void *)(v98 + 40) = 0LL;
        *(void *)(v98 + 48) = 0LL;
        *(void *)(v98 + 56) = 0LL;
        *(_OWORD *)(v98 + 40) = *(_OWORD *)(v6 + 40);
        *(void *)(v98 + 56) = *(void *)(v6 + 56);
        *(void *)(v6 + 40) = 0LL;
        *(void *)(v6 + 48) = 0LL;
        *(void *)(v6 + 56) = 0LL;
        v98 += 64LL;
        v6 += 64LL;
      }

      while (v6 != v97);
      uint64_t v96 = v129;
      uint64_t v6 = a1[1];
    }

    uint64_t v101 = *a1;
    *a1 = v96;
    a1[1] = v98;
    uint64_t v102 = a1[2];
    a1[2] = (uint64_t)v130;
    *((void *)&v129 + 1) = v6;
    char v130 = (char *)v102;
    uint64_t v128 = (char *)v101;
    *(void *)&__int128 v129 = v101;
    sub_1B0E68((uint64_t)&v128);
    uint64_t v41 = __p[0];
    if (!__p[0]) {
      return;
    }
    goto LABEL_129;
  }

  unint64_t v47 = *(char **)(v6 + 40);
  uint64_t v48 = *(double **)(v6 + 48);
  uint64_t v49 = *((void *)&v124 + 1);
  if (v47 == (char *)v48)
  {
    uint64_t v48 = *(double **)(v6 + 40);
LABEL_132:
    unint64_t v103 = *(void *)(v6 + 56);
    if ((unint64_t)v48 >= v103)
    {
      uint64_t v105 = ((char *)v48 - v47) >> 4;
      unint64_t v106 = v105 + 1;
      uint64_t v107 = v103 - (void)v47;
      if (v107 >> 3 > v106) {
        unint64_t v106 = v107 >> 3;
      }
      else {
        unint64_t v108 = v106;
      }
      if (v108) {
        unint64_t v108 = (unint64_t)sub_7BE90(v108);
      }
      else {
        uint64_t v109 = 0LL;
      }
      char v115 = (void *)(v108 + 16 * v105);
      unint64_t v116 = v108 + 16 * v109;
      *char v115 = v124;
      v115[1] = v49;
      __int16 v104 = v115 + 2;
      int v118 = *(char **)(v6 + 40);
      int v117 = *(char **)(v6 + 48);
      if (v117 != v118)
      {
        do
        {
          *((_OWORD *)v115 - 1) = *((_OWORD *)v117 - 1);
          v115 -= 2;
          v117 -= 16;
        }

        while (v117 != v118);
        int v117 = *(char **)(v6 + 40);
      }

      *(void *)(v6 + 40) = v115;
      *(void *)(v6 + 48) = v104;
      *(void *)(v6 + 56) = v116;
      if (v117) {
        operator delete(v117);
      }
    }

    else
    {
      *(void *)uint64_t v48 = v124;
      *((void *)v48 + 1) = v49;
      __int16 v104 = v48 + 2;
    }

    *(void *)(v6 + 48) = v104;
  }

  else
  {
    uint64_t v50 = *(double **)(v6 + 40);
    while (1)
    {
      double v51 = *v50;
      v50 += 2;
      if (v50 == v48) {
        goto LABEL_132;
      }
    }

    double v110 = v50[1];
    if (*(double *)&v124 >= v51 || *((double *)&v124 + 1) > v110)
    {
      if (*(double *)&v124 < v51 || *((double *)&v124 + 1) > v110)
      {
        if (*(double *)&v124 < v51 || *(double *)&v124 > v110 || *((double *)&v124 + 1) <= v110)
        {
          __int128 v119 = v124;
          sub_1B0BF8(v6 + 40, (char *)v50, &v119);
        }

        else
        {
          v50[1] = *((double *)&v124 + 1);
        }
      }
    }

    else
    {
      *(void *)uint64_t v50 = v124;
    }
  }

void sub_1B0BC8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1B0BF8(uint64_t a1, char *__src, _OWORD *a3)
{
  uint64_t v6 = *(char **)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    BOOL v12 = *(char **)a1;
    unint64_t v13 = ((uint64_t)&v6[-*(void *)a1] >> 4) + 1;
    if (v13 >> 60) {
      sub_7A87C();
    }
    uint64_t v14 = __src - v12;
    uint64_t v15 = (__src - v12) >> 4;
    uint64_t v16 = v7 - (void)v12;
    if (v16 >> 3 > v13) {
      unint64_t v13 = v16 >> 3;
    }
    else {
      unint64_t v17 = v13;
    }
    if (v17)
    {
      BOOL v19 = (char *)sub_7BE90(v17);
    }

    else
    {
      BOOL v19 = 0LL;
      uint64_t v18 = 0LL;
    }

    unint64_t v20 = &v19[16 * v15];
    uint64_t v21 = &v19[16 * v18];
    if (v15 == v18)
    {
      if (v14 < 1)
      {
        if (v12 == __src) {
          unint64_t v23 = 1LL;
        }
        else {
          unint64_t v23 = v14 >> 3;
        }
        __int128 v24 = (char *)sub_7BE90(v23);
        unint64_t v20 = &v24[16 * (v23 >> 2)];
        uint64_t v21 = &v24[16 * v25];
        if (v19) {
          operator delete(v19);
        }
      }

      else
      {
        unint64_t v22 = v15 + 2;
        if (v15 >= -1) {
          unint64_t v22 = v15 + 1;
        }
        v20 -= 16 * (v22 >> 1);
      }
    }

    *(_OWORD *)unint64_t v20 = *a3;
    uint64_t v26 = *(char **)a1;
    uint64_t v27 = v20;
    if (*(char **)a1 != __src)
    {
      unint64_t v28 = __src;
      uint64_t v29 = v20;
      do
      {
        uint64_t v27 = v29 - 16;
        *((_OWORD *)v29 - 1) = *((_OWORD *)v28 - 1);
        v28 -= 16;
        v29 -= 16;
      }

      while (v28 != v26);
    }

    unint64_t v30 = *(_BYTE **)(a1 + 8);
    uint64_t v31 = v30 - __src;
    if (v30 != __src) {
      memmove(v20 + 16, __src, v30 - __src);
    }
    uint64_t v32 = *(char **)a1;
    *(void *)a1 = v27;
    *(void *)(a1 + 8) = &v20[v31 + 16];
    *(void *)(a1 + 16) = v21;
    if (v32) {
      operator delete(v32);
    }
  }

  else if (__src == v6)
  {
    *(_OWORD *)__src = *a3;
    *(void *)(a1 + 8) = __src + 16;
  }

  else
  {
    unsigned int v8 = __src + 16;
    BOOL v9 = v6 - 16;
    BOOL v10 = *(_OWORD **)(a1 + 8);
    while (v9 < v6)
    {
      __int128 v11 = *(_OWORD *)v9;
      v9 += 16;
      *v10++ = v11;
    }

    *(void *)(a1 + 8) = v10;
    if (v6 != v8) {
      memmove(&v6[-16 * ((v6 - v8) >> 4)], __src, v6 - v8);
    }
    *(_OWORD *)__src = *a3;
  }

void sub_1B0DF8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B0E10(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 48) = 0LL;
  *(void *)(a1 + 56) = 0LL;
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  unsigned int v8 = operator new(0x10uLL);
  *unsigned int v8 = v6;
  v8[1] = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v8 + 2;
  *(void *)(a1 + 56) = v8 + 2;
  return a1;
}

uint64_t sub_1B0E68(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 64;
    __int128 v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }

    else
    {
      v2 -= 64LL;
    }
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1B0EC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t result = a7; a3 != a5; a3 -= 64LL)
  {
    __int128 v8 = *(_OWORD *)(a3 - 48);
    uint64_t v9 = *(void *)(a3 - 32);
    *(_OWORD *)(result - 64) = *(_OWORD *)(a3 - 64);
    *(_OWORD *)(result - 48) = v8;
    *(void *)(result - 32) = v9;
    *(void *)(result - 24) = 0LL;
    *(void *)(result - 16) = 0LL;
    *(void *)(result - 8) = 0LL;
    *(_OWORD *)(result - 24) = *(_OWORD *)(a3 - 24);
    *(void *)(result - 8) = *(void *)(a3 - 8);
    result -= 64LL;
    *(void *)(a3 - 24) = 0LL;
    *(void *)(a3 - 16) = 0LL;
    *(void *)(a3 - 8) = 0LL;
  }

  return result;
}

uint64_t sub_1B0F18(uint64_t a1, int *a2, uint64_t a3, void *a4)
{
  uint64_t v8 = *(void *)(*(void *)a2 + 24LL);
  sub_B8CBC(&v92, (uint64_t *)(v8 + 32), "", 59);
  uint64_t v9 = *(void *)(v92 + 192);
  if (!v9)
  {
    uint64_t v66 = (os_log_t *)sub_138E8(13);
    unint64_t v67 = *v66;
    if (*v66 && os_log_type_enabled(*v66, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void *__return_ptr))(*(void *)v92 + 144LL))(v82);
      uint64_t v68 = v82[0];
      sub_2CA1C(buf, *(unsigned int *)(v92 + 144));
      if (v100 >= 0) {
        __int128 v69 = buf;
      }
      else {
        __int128 v69 = *(_BYTE **)buf;
      }
      *(_DWORD *)__int128 v94 = 136315906;
      *(void *)&v94[4] = "RoutingHandler_Playback_Unk.cpp";
      *(_WORD *)&v94[12] = 1024;
      *(_DWORD *)&v94[14] = 66;
      __int16 v95 = 2112;
      uint64_t v96 = v68;
      __int16 v97 = 2080;
      v98[0] = v69;
      _os_log_impl( &dword_0,  v67,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [ioDevice is NULL]: \"could not get device for port \\\"%@\\" "\" (type: '%s').\""",  v94,  0x26u);
      if (v100 < 0) {
        operator delete(*(void **)buf);
      }
      sub_19DFC((uint64_t)v82);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003329396;
  }

  uint64_t v10 = *(unsigned int *)(v92 + 144);
  sub_1B6C7C(*(os_unfair_lock_s **)(v92 + 192), 1, a2[3], *(void *)(v8 + 72), a3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 248LL))(&v90, v9, 1LL, v10);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 256LL))(&v88, v9, 1LL, v10);
  if (!v91 || v91->__shared_owners_ == -1)
  {
    uint64_t v63 = (os_log_t *)sub_138E8(13);
    unint64_t v64 = *v63;
    if (*v63 && os_log_type_enabled(*v63, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 v94 = 136315394;
      *(void *)&v94[4] = "RoutingHandler_Playback_Unk.cpp";
      *(_WORD *)&v94[12] = 1024;
      *(_DWORD *)&v94[14] = 73;
      _os_log_impl( &dword_0,  v64,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to locate mute control.",  v94,  0x12u);
    }

    uint64_t v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v65, "Unable to locate mute control.");
  }

  int v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 240LL))(v9, v10);
  uint64_t v86 = 0x6F7574706D757465LL;
  int v87 = v11;
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v9 + 16LL))(v9, &v86))
  {
    *(_DWORD *)__int128 v94 = 0;
    (*(void (**)(uint64_t, uint64_t *, void, void, uint64_t, _BYTE *))(*(void *)v9 + 48LL))( v9,  &v86,  0LL,  0LL,  4LL,  v94);
  }

  BOOL v12 = (char *)operator new(0x30uLL);
  int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 120LL))(v9);
  *(void *)__int128 v94 = v92;
  *(void *)&v94[8] = v93;
  if (v93)
  {
    p_shared_weak_owners = (unint64_t *)&v93->__shared_weak_owners_;
    do
      unint64_t v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
  }

  sub_CAE54(&v83, (uint64_t *)v94, 1LL);
  *(void *)BOOL v12 = off_484140;
  *((_DWORD *)v12 + 2) = v13;
  *((void *)v12 + 2) = v12 + 16;
  *((void *)v12 + 3) = v12 + 16;
  *((void *)v12 + 4) = 0LL;
  uint64_t v16 = v85;
  if (v85)
  {
    uint64_t v18 = v83;
    unint64_t v17 = v84;
    uint64_t v19 = *v84;
    *(void *)(v19 + 8) = *(void *)(v83 + 8);
    **(void **)(v18 + 8) = v19;
    uint64_t v20 = *((void *)v12 + 2);
    *(void *)(v20 + 8) = v17;
    void *v17 = v20;
    *((void *)v12 + 2) = v18;
    *(void *)(v18 + 8) = v12 + 16;
    *((void *)v12 + 4) = v16;
    uint64_t v85 = 0LL;
  }

  strcpy(v12 + 40, "duar");
  uint64_t v21 = operator new(0x18uLL);
  unint64_t v22 = *(void **)(a3 + 8);
  *uint64_t v21 = a3;
  v21[1] = v22;
  v21[2] = v12;
  *unint64_t v22 = v21;
  uint64_t v23 = *(void *)(a3 + 16) + 1LL;
  *(void *)(a3 + 8) = v21;
  *(void *)(a3 + 16) = v23;
  sub_CCAB4((uint64_t)v12);
  sub_85B80(&v83);
  if (*(void *)&v94[8]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v94[8]);
  }
  sub_1D2530(v94, v9, v92);
  *(_DWORD *)AudioObjectPropertyAddress buf = *(_DWORD *)(v92 + 144);
  sub_7A22C((uint64_t)v82, (unsigned int *)buf, 1LL);
  __int128 v24 = *(unsigned int **)a2;
  memset(v79, 0, sizeof(v79));
  sub_105E0C((char **)&v80, *(_DWORD *)(a1 + 8), a2, v79);
  buf[0] = 0;
  buf[16] = 0;
  uint64_t v25 = sub_10A5F4( (uint64_t *)v94,  0,  1,  v24,  (uint64_t)(a2 + 30),  (__int128 *)(a2 + 6),  (uint64_t)buf,  &v80,  0LL,  (uint64_t)v82,  (__int128 *)a2 + 11);
  *(void *)AudioObjectPropertyAddress buf = &v80;
  sub_7A668((void ***)buf);
  int v80 = 0LL;
  unint64_t v81 = 0LL;
  if (!v89 || (v26 = std::__shared_weak_count::lock(v89), (v81 = v26) == 0LL) || (uint64_t v27 = v88, (v80 = v88) == 0LL))
  {
    __int128 v60 = (os_log_t *)sub_138E8(13);
    uint64_t v61 = *v60;
    if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandler_Playback_Unk.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 105;
      _os_log_impl( &dword_0,  v61,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to locate volume control.",  buf,  0x12u);
    }

    unint64_t v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v62, "Unable to locate volume control.");
  }

  unint64_t v28 = v26;
  *(void *)AudioObjectPropertyAddress buf = (*(double (**)(void *))(*v88 + 96LL))(v88);
  *(void *)&_DWORD buf[8] = v29;
  (*(void (**)(void *, _BYTE *, uint64_t, void, void))(*v27 + 80LL))(v27, buf, 0x100000000LL, 0LL, 0LL);
  p_shared_owners = (unint64_t *)&v28->__shared_owners_;
  do
    unint64_t v31 = __ldaxr(p_shared_owners);
  while (__stlxr(v31 - 1, p_shared_owners));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }

  a4[2] = v25;
  a4[3] = 0LL;
  uint64_t v32 = operator new(0x68uLL);
  sub_CB19C(buf, (uint64_t)v88, v89);
  double v71 = *(std::__shared_weak_count **)&buf[8];
  __int128 v78 = *(_OWORD *)buf;
  *(void *)AudioObjectPropertyAddress buf = 0LL;
  *(void *)&_DWORD buf[8] = 0LL;
  sub_CAF18((uint64_t)v32, &v78);
  a4[4] = v32;
  if (v71)
  {
    uint64_t v33 = (unint64_t *)&v71->__shared_owners_;
    do
      unint64_t v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }

  __int128 v35 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    uint64_t v36 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }

  uint64_t v38 = operator new(0x68uLL);
  sub_150BF4(buf, v90, v91);
  int v72 = *(std::__shared_weak_count **)&buf[8];
  __int128 v77 = *(_OWORD *)buf;
  *(void *)AudioObjectPropertyAddress buf = 0LL;
  *(void *)&_DWORD buf[8] = 0LL;
  sub_CAF18((uint64_t)v38, &v77);
  a4[5] = v38;
  if (v72)
  {
    int64x2_t v39 = (unint64_t *)&v72->__shared_owners_;
    do
      unint64_t v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }

  uint64_t v41 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    int v42 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }

  int v44 = operator new(0x68uLL);
  sub_CAEBC((uint64_t *)buf);
  __int128 v73 = *(std::__shared_weak_count **)&buf[8];
  __int128 v76 = *(_OWORD *)buf;
  *(void *)AudioObjectPropertyAddress buf = 0LL;
  *(void *)&_DWORD buf[8] = 0LL;
  sub_CAF18((uint64_t)v44, &v76);
  a4[6] = v44;
  if (v73)
  {
    int v45 = (unint64_t *)&v73->__shared_owners_;
    do
      unint64_t v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }

  unint64_t v47 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    uint64_t v48 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }

  uint64_t v50 = operator new(0x68uLL);
  sub_CB144((uint64_t *)buf);
  __int128 v74 = *(std::__shared_weak_count **)&buf[8];
  __int128 v75 = *(_OWORD *)buf;
  *(void *)AudioObjectPropertyAddress buf = 0LL;
  *(void *)&_DWORD buf[8] = 0LL;
  sub_CAF18((uint64_t)v50, &v75);
  a4[7] = v50;
  if (v74)
  {
    double v51 = (unint64_t *)&v74->__shared_owners_;
    do
      unint64_t v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }

  uint64_t v53 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    uint64_t v54 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }

  sub_32C8C((void *)v82[1]);
  sub_85D64(*(void **)((char *)&v98[7] + 2));
  sub_85D64(*(void **)((char *)&v98[4] + 2));
  *(void *)AudioObjectPropertyAddress buf = (char *)v98 + 2;
  sub_85DA4((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = &v94[8];
  sub_85DA4((void ***)buf);
  if (v89) {
    std::__shared_weak_count::__release_weak(v89);
  }
  if (v91) {
    std::__shared_weak_count::__release_weak(v91);
  }
  unint64_t v56 = v93;
  if (v93)
  {
    uint64_t v57 = (unint64_t *)&v93->__shared_owners_;
    do
      unint64_t v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }

  return 0LL;
}

void sub_1B1838( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27, uint64_t a28, uint64_t a29, char a30, uint64_t a31, uint64_t a32, char a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, std::__shared_weak_count *a39, uint64_t a40, std::__shared_weak_count *a41)
{
}

void sub_1B19F4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (int *)(a4 + 16);
  if (!*(_BYTE *)(a4 + 20)) {
    uint64_t v10 = (int *)(a4 + 12);
  }
  uint64_t v11 = *v10;
  sub_DB44C((uint64_t)v43, 1, *v10, *(_DWORD *)(a2 + 264));
  if ((byte_48E7CC & 1) == 0)
  {
    byte_48E7CC = 1;
    *(void *)AudioObjectPropertyAddress buf = 0LL;
    unsigned int v12 = sub_14BC34(@"MinOutputVolume", (void **)buf);
    float v13 = *(double *)buf;
    if (!v12) {
      float v13 = 0.0;
    }
    byte_48E7C4 = v12;
    dword_48E7C8 = LODWORD(v13);
    if (!v12) {
      goto LABEL_12;
    }
    uint64_t v14 = (os_log_t *)sub_138E8(13);
    unint64_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "RunTimeDefaults.cpp";
      __int16 v47 = 1024;
      int v48 = 810;
      __int16 v49 = 2080;
      uint64_t v50 = "MinOutputVolume";
      __int16 v51 = 2048;
      double v52 = *(float *)&dword_48E7C8;
      _os_log_impl(&dword_0, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined to %f dB", buf, 0x26u);
    }
  }

  if (byte_48E7C4)
  {
    unint64_t v42 = dword_48E7C8 | 0x100000000LL;
    goto LABEL_13;
  }

void sub_1B1E24( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B1E64(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a2)
  {
    uint64_t v92 = (os_log_t *)sub_138E8(13);
    char v93 = *v92;
    if (*v92 && os_log_type_enabled(*v92, OS_LOG_TYPE_ERROR))
    {
      *(float *)unint64_t v108 = 4.8151e-34;
      uint64_t v109 = "RoutingHandlerUtilities_Aspen.cpp";
      __int16 v110 = 1024;
      int v111 = 393;
      _os_log_impl(&dword_0, v93, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v108, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  sub_1B19F4((unint64_t *)v108, (uint64_t)a3, a4, a5, a6);
  uint64_t v11 = (os_log_t *)sub_138E8(20);
  unsigned int v12 = *v11;
  if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
  {
    sub_2CA1C(v103, a3[36]);
    int v13 = SBYTE3(v105);
    uint64_t v14 = *(_BYTE **)v103;
    sub_D9F00(&__p, (uint64_t)v108);
    unint64_t v15 = v103;
    if (v13 < 0) {
      unint64_t v15 = v14;
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 396;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)uint64_t v107 = v15;
    *(_WORD *)&v107[8] = 2080;
    *(void *)&v107[10] = p_p;
    _os_log_impl(&dword_0, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d VolumeProperties for Port: %s is %s", buf, 0x26u);
    if (SBYTE3(v105) < 0) {
      operator delete(*(void **)v103);
    }
  }

  double v17 = (*(double (**)(uint64_t))(*(void *)a1 + 96LL))(a1);
  double v19 = v18;
  *(double *)&__int128 v101 = v17;
  *((double *)&v101 + 1) = v18;
  unsigned int v20 = a3[36];
  if (v20 != 1886745455 && v20 != 1885892727) {
    goto LABEL_26;
  }
  if ((sub_1CA280() & 1) != 0)
  {
    if (!(_BYTE)v109)
    {
LABEL_21:
      int v23 = 1;
      goto LABEL_28;
    }

    double v17 = *(float *)v108;
LABEL_18:
    double v21 = (*(double (**)(uint64_t))(*(void *)a1 + 104LL))(a1);
    if (v21 != v22) {
      double v17 = v21 + (v17 + 76.0) / 78.0 * (v22 - v21);
    }
    *(double *)&__int128 v101 = v17;
    goto LABEL_21;
  }

  if (MGGetBoolAnswer(@"YiUtBQygkHRhLcdO3LFB4A"))
  {
    int v23 = MGGetBoolAnswer(@"DeviceSupportsUSBTypeC");
    if ((_BYTE)v109)
    {
      double v17 = *(float *)v108;
      *(double *)&__int128 v101 = *(float *)v108;
      if (v23) {
        goto LABEL_18;
      }
    }
  }

  else
  {
LABEL_26:
    int v23 = 0;
    if ((_BYTE)v109)
    {
      double v17 = *(float *)v108;
      *(double *)&__int128 v101 = *(float *)v108;
    }
  }

void sub_1B29A0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, std::__shared_weak_count *a34)
{
  if (a34) {
    std::__shared_weak_count::__release_weak(a34);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B2A3C(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v12 = (os_log_t *)sub_138E8(19);
  int v13 = *v12;
  if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
  {
    sub_2DB6FC(&__p, (unsigned int *)(a2 + 8));
    uint64_t v14 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 581;
    __int16 v53 = 2080;
    uint64_t v54 = v14;
    _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Creating PerVAD Software Volume Control for %s",  buf,  0x1Cu);
  }

  uint64_t v15 = *(void *)(a4 + 192);
  if (!v15)
  {
    uint64_t v36 = (os_log_t *)sub_138E8(13);
    uint64_t v37 = *v36;
    if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 584;
      _os_log_impl(&dword_0, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  sub_1B31E4((uint64_t *)buf, *(void *)(a4 + 192), 1869968496LL, 0, 0, 74);
  *a1 = *(_OWORD *)buf;
  unint64_t v16 = *(uint64_t (**)(uint64_t, _BYTE *))(*(void *)v15 + 16LL);
  strcpy(buf, "cvodbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  if ((v16(v15, buf) & 1) == 0) {
    goto LABEL_19;
  }
  sub_1B3280(&v50, v15, COERCE_DOUBLE(1735159650LL));
  if (!v51 || !v50)
  {
    sub_8D840((uint64_t)&v50);
LABEL_19:
    int v24 = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    char v43 = 0;
    goto LABEL_20;
  }

  sub_1473F4((uint64_t)&v48, v50);
  double v17 = v48;
  double v18 = v49;
  uint64_t v39 = v48;
  if (v48 == v49)
  {
    uint64_t v31 = (os_log_t *)sub_138E8(20);
    os_log_t v32 = *v31;
    if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v15 + 128LL))(v46, v15);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 544;
      __int16 v53 = 2112;
      uint64_t v54 = (std::string *)v46[0];
      double v21 = "%25s:%-5d Device %@ VolumeCurveProperty returned empty array";
      double v22 = v32;
      os_log_type_t v23 = OS_LOG_TYPE_DEFAULT;
LABEL_36:
      _os_log_impl(&dword_0, v22, v23, v21, buf, 0x1Cu);
      sub_19DFC((uint64_t)v46);
    }
  }

  else
  {
    do
    {
      if (*v17 != 0.0)
      {
        unint64_t v33 = (os_log_t *)sub_138E8(20);
        uint64_t v34 = *v33;
        if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_DEFAULT))
        {
          sub_7D084(v44, "VolumeCurve: ");
          sub_1B33B8((uint64_t)v46, v39, v18, (uint64_t)v44);
          if (v47 >= 0) {
            uint64_t v35 = v46;
          }
          else {
            uint64_t v35 = (void **)v46[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 559;
          __int16 v53 = 2080;
          uint64_t v54 = (std::string *)v35;
          _os_log_impl(&dword_0, v34, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Volume curve entries: %s", buf, 0x1Cu);
          if (v47 < 0) {
            operator delete(v46[0]);
          }
          if (v45 < 0) {
            operator delete(v44[0]);
          }
        }

        memset(&__p, 0, sizeof(__p));
        sub_14A928(&__p, v39, (uint64_t)v18, v18 - v39);
        int v24 = 1;
        goto LABEL_48;
      }

      ++v17;
    }

    while (v17 != v49);
    double v19 = (os_log_t *)sub_138E8(20);
    os_log_t v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v15 + 128LL))(v46, v15);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 552;
      __int16 v53 = 2112;
      uint64_t v54 = (std::string *)v46[0];
      double v21 = "%25s:%-5d Device %@ VolumeCurveProperty returned array of zeroes.";
      double v22 = v20;
      os_log_type_t v23 = OS_LOG_TYPE_ERROR;
      goto LABEL_36;
    }
  }

  int v24 = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
LABEL_48:
  char v43 = v24;
  if (v39) {
    operator delete(v39);
  }
  sub_8D840((uint64_t)&v50);
LABEL_20:
  sub_1B35D8((uint64_t)buf, (uint64_t)&__p);
  uint64_t v25 = *(void *)a1;
  sub_1B35D8((uint64_t)v40, (uint64_t)buf);
  sub_1B1E64(v25, a3, (unsigned int *)a4, a5, a2, 1LL, (uint64_t)v40);
  if (v41 && v40[0])
  {
    v40[1] = v40[0];
    operator delete(v40[0]);
  }

  int v26 = *(_DWORD *)(a4 + 264);
  if (v26 == 1635085420 || v26 == 1633759844)
  {
    uint64_t v27 = operator new(0x28uLL);
    sub_1B3654((uint64_t)v27, v15, 1);
    char v28 = operator new(0x18uLL);
    uint64_t v29 = *(void **)(a6 + 8);
    *char v28 = a6;
    v28[1] = v29;
    _OWORD v28[2] = v27;
    *uint64_t v29 = v28;
    uint64_t v30 = *(void *)(a6 + 16) + 1LL;
    *(void *)(a6 + 8) = v28;
    *(void *)(a6 + 16) = v30;
    (*(void (**)(void *))(*(void *)v27 + 16LL))(v27);
  }

  if (BYTE4(v54) && *(void *)buf)
  {
    *(void *)&_DWORD buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }

  if (v24)
  {
    if (__p.__r_.__value_.__r.__words[0]) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }

void sub_1B2FFC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, char a32)
{
  if (__p) {
    operator delete(__p);
  }
  sub_8D840((uint64_t)&a32);
  if (a2 == 1)
  {
    uint64_t v37 = __cxa_begin_catch(a1);
    uint64_t v38 = (os_log_t *)sub_138E8(20);
    uint64_t v39 = *v38;
    if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v40 = (*(uint64_t (**)(void *))(*(void *)v37 + 16LL))(v37);
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v33 + 128LL))(&a29, v33);
      uint64_t v41 = a29;
      *(_DWORD *)(v35 - 144) = 136315906;
      *(void *)(v34 + 4) = "RoutingHandlerUtilities_Aspen.cpp";
      *(_WORD *)(v35 - 132) = 1024;
      *(_DWORD *)(v34 + 14) = 567;
      *(_WORD *)(v35 - 126) = 2080;
      *(void *)(v34 + 20) = v40;
      *(_WORD *)(v35 - 116) = 2112;
      *(void *)(v34 + 30) = v41;
      _os_log_impl( &dword_0,  v39,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Caught exception %s getting volume curve from device %@",  (uint8_t *)(v35 - 144),  0x26u);
      sub_19DFC((uint64_t)&a29);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B2C70LL);
  }

  sub_7A768(v32);
  _Unwind_Resume(a1);
}

uint64_t sub_1B31E4(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6)
{
  unsigned int v12 = operator new(0x1F8uLL);
  v12[1] = 0LL;
  void v12[2] = 0LL;
  void *v12 = off_483A38;
  uint64_t result = sub_1C88B8((uint64_t)(v12 + 3), a2, a3, a4, a5, a6, 0LL);
  *a1 = result;
  a1[1] = (uint64_t)v12;
  return result;
}

void sub_1B3268(_Unwind_Exception *a1)
{
}

uint64_t sub_1B3280(_BYTE *a1, uint64_t a2, double a3)
{
  int v9 = 1685026403;
  double v10 = a3;
  if ((sub_5C3C4(a2) & 1) == 0)
  {
    LOBYTE(v14) = 0;
    char v15 = 0;
    LOBYTE(v7) = 0;
    char v8 = 0;
    sub_8D840((uint64_t)&v14);
LABEL_8:
    *a1 = 0;
    a1[8] = 0;
    return sub_8D840((uint64_t)&v7);
  }

  LOBYTE(v14) = 0;
  char v15 = 0;
  LOBYTE(v7) = 0;
  char v8 = 0;
  sub_8D840((uint64_t)&v14);
  uint64_t v14 = 0LL;
  uint64_t v5 = v14;
  CFTypeRef v12 = v14;
  sub_158524(&v11, &v12);
  char v8 = 1;
  uint64_t v7 = v11;
  if (v5) {
    CFRelease(v5);
  }
  *(void *)a1 = v7;
  uint64_t v7 = 0LL;
  a1[8] = 1;
  return sub_8D840((uint64_t)&v7);
}

void sub_1B33B8(uint64_t a1, float *a2, float *a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    uint64_t v7 = (void *)(a4 + 8);
    do
    {
      unint64_t v22 = *(void *)(a4 + 16);
      unint64_t v8 = v22;
      *(_OWORD *)std::string __p = *(_OWORD *)a4;
      *(void *)(a4 + 8) = 0LL;
      *(void *)(a4 + 16) = 0LL;
      *(void *)a4 = 0LL;
      float v9 = *v6;
      double v10 = (char *)HIBYTE(v8);
      int v11 = (char)v10;
      else {
        CFTypeRef v12 = (char *)__p[1];
      }
      sub_D0924((uint64_t)&v24, (unint64_t)(v12 + 2));
      if ((v24.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        int v13 = &v24;
      }
      else {
        int v13 = (std::string *)v24.__r_.__value_.__r.__words[0];
      }
      if (v12)
      {
        if (v11 >= 0) {
          uint64_t v14 = __p;
        }
        else {
          uint64_t v14 = (void **)__p[0];
        }
        memmove(v13, v14, (size_t)v12);
      }

      strcpy(&v12[(void)v13], ", ");
      std::to_string(&v23, v9);
      if ((v23.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        char v15 = &v23;
      }
      else {
        char v15 = (std::string *)v23.__r_.__value_.__r.__words[0];
      }
      if ((v23.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type size = v23.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type size = v23.__r_.__value_.__l.__size_;
      }
      double v17 = std::string::append(&v24, (const std::string::value_type *)v15, size);
      std::string::size_type v18 = v17->__r_.__value_.__r.__words[0];
      v25[0] = v17->__r_.__value_.__l.__size_;
      *(void *)((char *)v25 + 7) = *(std::string::size_type *)((char *)&v17->__r_.__value_.__r.__words[1] + 7);
      unsigned __int8 v19 = v17->__r_.__value_.__s.__size_;
      v17->__r_.__value_.__l.__size_ = 0LL;
      v17->__r_.__value_.__l.__cap_ = 0LL;
      v17->__r_.__value_.__r.__words[0] = 0LL;
      *(void *)a4 = v18;
      *uint64_t v7 = v25[0];
      *(void *)(a4 + 15) = *(void *)((char *)v25 + 7);
      *(_BYTE *)(a4 + 23) = v19;
      if (v11 < 0) {
        operator delete(__p[0]);
      }
      ++v6;
    }

    while (v6 != a3);
  }

  *(_OWORD *)a1 = *(_OWORD *)a4;
  *(void *)(a1 + 16) = *(void *)(a4 + 16);
  *(void *)(a4 + 8) = 0LL;
  *(void *)(a4 + 16) = 0LL;
  *(void *)a4 = 0LL;
}

void sub_1B3590( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (v25 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B35D8(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(void *)a1 = 0LL;
    *(void *)(a1 + 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    sub_14A928( (void *)a1,  *(const void **)a2,  *(void *)(a2 + 8),  (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    *(_BYTE *)(a1 + 24) = 1;
  }

  return a1;
}

void sub_1B3630(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 24))
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_1B3654(uint64_t result, uint64_t a2, int a3)
{
  *(void *)uint64_t result = &off_4745E0;
  *(void *)(result + 8) = a2;
  *(_DWORD *)(result + 16) = 1937204590;
  *(_DWORD *)(result + 20) = a3;
  *(_DWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 28) = 0;
  *(_BYTE *)(result + 32) = 0;
  if (!a2)
  {
    uint64_t v3 = (os_log_t *)sub_138E8(13);
    __int128 v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
      {
        int v6 = 136315394;
        uint64_t v7 = "RoutingHandlerAction_BluetoothSoftwareVolume.h";
        __int16 v8 = 1024;
        int v9 = 28;
        _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v6,  0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  return result;
}

void sub_1B3768(_Unwind_Exception *exception_object)
{
}

void sub_1B3784(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_483A38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1B3794(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_483A38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1B37B4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1B37C4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v14 = (os_log_t *)sub_138E8(18);
  char v15 = *v14;
  if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_DEFAULT))
  {
    sub_2DB6FC(&__p, (unsigned int *)(a2 + 8));
    unint64_t v16 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 641;
    __int16 v39 = 2080;
    uint64_t v40 = v16;
    _os_log_impl(&dword_0, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating Global Volume Control for %s", buf, 0x1Cu);
  }

  uint64_t v17 = *(void *)(a4 + 192);
  if (!v17)
  {
    uint64_t v32 = (os_log_t *)sub_138E8(13);
    uint64_t v33 = *v32;
    if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 644;
      _os_log_impl(&dword_0, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  (*(void (**)(_BYTE *__return_ptr, void, uint64_t, void))(*(void *)v17 + 256LL))( buf,  *(void *)(a4 + 192),  1LL,  *(unsigned int *)(a4 + 144));
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  if (!*(void *)&buf[8]) {
    goto LABEL_32;
  }
  std::string::size_type v18 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)&buf[8]);
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v18;
  if (v18)
  {
    uint64_t v19 = *(void *)buf;
    __p.__r_.__value_.__r.__words[0] = *(void *)buf;
  }

  else
  {
    uint64_t v19 = 0LL;
  }

  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
  }
  if (!v19)
  {
LABEL_32:
    uint64_t v29 = (os_log_t *)sub_138E8(13);
    uint64_t v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 647;
      _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to locate output volume control",  buf,  0x12u);
    }

    uint64_t v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v31, "Unable to locate output volume control");
  }

  LOBYTE(v35[0]) = 0;
  char v36 = 0;
  sub_1B1E64(v19, a3, (unsigned int *)a4, a5, a2, 0LL, (uint64_t)v35);
  if (v36 && v35[0])
  {
    v35[1] = v35[0];
    operator delete(v35[0]);
  }

  int v20 = *(_DWORD *)(a4 + 264);
  if ((v20 == 1635085420 || v20 == 1633759844) && ((a7 & 1) != 0 || sub_203C24(*(void *)(a4 + 192))))
  {
    double v21 = operator new(0x28uLL);
    *double v21 = &off_4745E0;
    v21[1] = v17;
    *((_DWORD *)v21 + 4) = 1937204590;
    *((_BYTE *)v21 + 32) = 0;
    *(void *)((char *)v21 + 20) = 0LL;
    *((_BYTE *)v21 + 28) = 0;
    unint64_t v22 = operator new(0x18uLL);
    std::string v23 = *(void **)(a6 + 8);
    *unint64_t v22 = a6;
    v22[1] = v23;
    v22[2] = v21;
    void *v23 = v22;
    uint64_t v24 = *(void *)(a6 + 16) + 1LL;
    *(void *)(a6 + 8) = v22;
    *(void *)(a6 + 16) = v24;
    sub_174CC0((uint64_t)v21);
  }

  *a1 = v19;
  a1[1] = (uint64_t)v18;
  if (v18)
  {
    p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
    do
      unint64_t v26 = __ldxr(p_shared_weak_owners);
    while (__stxr(v26 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      unint64_t v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

void sub_1B3BB0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17)
{
}

void sub_1B3C0C( unint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(void *)(a3 + 192))
  {
    uint64_t v128 = (os_log_t *)sub_138E8(13);
    __int128 v129 = *v128;
    if (*v128 && os_log_type_enabled(*v128, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      __int16 v142 = 1024;
      int v143 = 675;
      _os_log_impl(&dword_0, v129, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint64_t v12 = *(unsigned int *)(a3 + 144);
  if ((_DWORD)v12 == 1886216809 || (_DWORD)v12 == 1886680169 || (_DWORD)v12 == 1886222185)
  {
    if (!a2) {
      goto LABEL_67;
    }
    unint64_t v16 = (os_log_t *)sub_138E8(19);
    uint64_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT))
    {
      sub_2CA1C(&v133, v12);
      int v18 = SHIBYTE(v134);
      uint64_t v19 = (void **)v133;
      sub_2CA1C(__p, a4);
      int v20 = &v133;
      if (v18 < 0) {
        int v20 = v19;
      }
      if (v140 >= 0) {
        double v21 = __p;
      }
      else {
        double v21 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      __int16 v142 = 1024;
      int v143 = 77;
      __int16 v144 = 2080;
      double v145 = *(double *)&v20;
      __int16 v146 = 2080;
      *(void *)uint64_t v147 = v21;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d CheckCodecInputGainDefaultForCall input port: %s output port: %s",  buf,  0x26u);
      if (v140 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v134) < 0) {
        operator delete(v133);
      }
    }

    if ((_DWORD)v12 == 1886216809 && (_DWORD)a4 == 1886545251)
    {
      unint64_t v22 = &qword_48E788;
      if ((byte_48E790 & 1) == 0)
      {
        byte_48E790 = 1;
        *(void *)AudioObjectPropertyAddress buf = 0LL;
        unsigned int v23 = sub_14BC34(@"HandsetUplinkGain", (void **)buf);
        float v24 = *(double *)buf;
        if (!v23) {
          float v24 = 0.0;
        }
        LOBYTE(qword_48E788) = v23;
        *((float *)&qword_48E788 + 1) = v24;
        if (v23)
        {
          int v25 = (os_log_t *)sub_138E8(13);
          unint64_t v26 = *v25;
          if (*v25)
          {
            if (os_log_type_enabled(*v25, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
              *(void *)&uint8_t buf[4] = "RunTimeDefaults.cpp";
              __int16 v142 = 1024;
              int v143 = 746;
              __int16 v144 = 2080;
              double v145 = COERCE_DOUBLE("HandsetUplinkGain");
              __int16 v146 = 2048;
              *(double *)uint64_t v147 = *((float *)&qword_48E788 + 1);
LABEL_42:
              _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Defaults key %s was defined to %f dB",  buf,  0x26u);
            }
          }
        }
      }
    }

    else if ((_DWORD)v12 == 1886216809 && (_DWORD)a4 == 1886613611 {
           || (_DWORD)v12 == 1886216809 && (_DWORD)a4 == 1885892727)
    }
    {
      unint64_t v22 = &qword_48E798;
      if ((byte_48E7A0 & 1) == 0)
      {
        byte_48E7A0 = 1;
        *(void *)AudioObjectPropertyAddress buf = 0LL;
        unsigned int v27 = sub_14BC34(@"SpeakerphoneUplinkGain", (void **)buf);
        float v28 = *(double *)buf;
        if (!v27) {
          float v28 = 0.0;
        }
        LOBYTE(qword_48E798) = v27;
        *((float *)&qword_48E798 + 1) = v28;
        if (v27)
        {
          uint64_t v29 = (os_log_t *)sub_138E8(13);
          unint64_t v26 = *v29;
          if (*v29)
          {
            if (os_log_type_enabled(*v29, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
              *(void *)&uint8_t buf[4] = "RunTimeDefaults.cpp";
              __int16 v142 = 1024;
              int v143 = 762;
              __int16 v144 = 2080;
              double v145 = COERCE_DOUBLE("SpeakerphoneUplinkGain");
              __int16 v146 = 2048;
              *(double *)uint64_t v147 = *((float *)&qword_48E798 + 1);
              goto LABEL_42;
            }
          }
        }
      }
    }

    else
    {
      if ((_DWORD)v12 != 1886222185 || (_DWORD)a4 != 1885892727)
      {
        if ((_DWORD)v12 != 1886680169 || (_DWORD)a4 != 1886680175) {
          goto LABEL_67;
        }
        unint64_t v22 = &qword_48E7B8;
        if ((byte_48E7C0 & 1) != 0) {
          goto LABEL_61;
        }
        byte_48E7C0 = 1;
        *(void *)AudioObjectPropertyAddress buf = 0LL;
        unsigned int v33 = sub_14BC34(@"TTYUplinkGain", (void **)buf);
        float v34 = *(double *)buf;
        if (!v33) {
          float v34 = 0.0;
        }
        LOBYTE(qword_48E7B8) = v33;
        *((float *)&qword_48E7B8 + 1) = v34;
        if (!v33) {
          goto LABEL_61;
        }
        uint64_t v35 = (os_log_t *)sub_138E8(13);
        unint64_t v26 = *v35;
        if (!*v35 || !os_log_type_enabled(*v35, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_61;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "RunTimeDefaults.cpp";
        __int16 v142 = 1024;
        int v143 = 794;
        __int16 v144 = 2080;
        double v145 = COERCE_DOUBLE("TTYUplinkGain");
        __int16 v146 = 2048;
        *(double *)uint64_t v147 = *((float *)&qword_48E7B8 + 1);
        goto LABEL_42;
      }

      unint64_t v22 = &qword_48E7A8;
      if ((byte_48E7B0 & 1) == 0)
      {
        byte_48E7B0 = 1;
        *(void *)AudioObjectPropertyAddress buf = 0LL;
        unsigned int v30 = sub_14BC34(@"HeadsetUplinkGain", (void **)buf);
        float v31 = *(double *)buf;
        if (!v30) {
          float v31 = 0.0;
        }
        LOBYTE(qword_48E7A8) = v30;
        *((float *)&qword_48E7A8 + 1) = v31;
        if (v30)
        {
          uint64_t v32 = (os_log_t *)sub_138E8(13);
          unint64_t v26 = *v32;
          if (*v32)
          {
            if (os_log_type_enabled(*v32, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
              *(void *)&uint8_t buf[4] = "RunTimeDefaults.cpp";
              __int16 v142 = 1024;
              int v143 = 778;
              __int16 v144 = 2080;
              double v145 = COERCE_DOUBLE("HeadsetUplinkGain");
              __int16 v146 = 2048;
              *(double *)uint64_t v147 = *((float *)&qword_48E7A8 + 1);
              goto LABEL_42;
            }
          }
        }
      }
    }

LABEL_111:
    uint64_t v73 = v37 | 0x100000000LL;
    goto LABEL_129;
  }

LABEL_124:
    uint64_t v70 = v58 & 0xFF00000000LL;
    if (v78 == 1.1755e-38) {
      uint64_t v70 = 0LL;
    }
    goto LABEL_128;
  }

  unint64_t v60 = sub_2D0190(a8, a7);
  if (!v61) {
    goto LABEL_95;
  }
  unint64_t v64 = *(void *)(v60 + 8);
  unint64_t v62 = v60 + 8;
  unint64_t v63 = v64;
  if (!v64) {
    goto LABEL_95;
  }
  unint64_t v65 = v62;
  do
  {
    unsigned int v66 = *(_DWORD *)(v63 + 28);
    BOOL v67 = v66 >= v12;
    else {
      __int128 v68 = (unint64_t *)(v63 + 8);
    }
    if (v67) {
      unint64_t v65 = v63;
    }
    unint64_t v63 = *v68;
  }

  while (*v68);
  if (v65 != v62 && *(_DWORD *)(v65 + 28) <= v12)
  {
    uint64_t v59 = *(unsigned int *)(v65 + 32);
    unint64_t v69 = 0x100000000LL;
  }

  else
  {
LABEL_95:
    unint64_t v69 = 0LL;
    uint64_t v59 = 0LL;
  }

  if (HIDWORD(v69))
  {
    unint64_t v58 = v59 | v69;
    goto LABEL_113;
  }

  uint64_t v70 = 0LL;
LABEL_128:
  uint64_t v73 = v70 | v59;
LABEL_129:
  LODWORD(v133) = 0;
  HIDWORD(v133) = a7;
  __int128 v134 = *(_OWORD *)sub_2FC95C();
  int v135 = 0;
  uint64_t v137 = 0LL;
  uint64_t v138 = 0LL;
  uint64_t v136 = 0LL;
  unint64_t v83 = sub_2D7684(a6, (uint64_t)&v133, 0LL);
  unint64_t v85 = v84;
  int v86 = *(_DWORD *)(a3 + 264);
  float v87 = 0.0;
  if ((sub_1B4AFC(v12, v86) & 1) != 0)
  {
LABEL_130:
    LOBYTE(v88) = 0;
    goto LABEL_159;
  }

  sub_1B4BD8((uint64_t)buf, a7, v86, a5);
  unint64_t v89 = sub_2D8530(a6, (uint64_t)buf);
  if (*(void *)&v147[2])
  {
    uint64_t v148 = *(void *)&v147[2];
    operator delete(*(void **)&v147[2]);
  }

  if (BYTE4(v89))
  {
    float v87 = *(float *)&v89;
    unint64_t v88 = HIDWORD(v89);
  }

  else
  {
    unint64_t v97 = sub_2CFFF4(a8, a7);
    if (!v98) {
      goto LABEL_130;
    }
    unint64_t v101 = *(void *)(v97 + 8);
    unint64_t v99 = v97 + 8;
    unint64_t v100 = v101;
    if (!v101) {
      goto LABEL_130;
    }
    unint64_t v102 = v99;
    do
    {
      unsigned int v103 = *(_DWORD *)(v100 + 28);
      BOOL v104 = v103 >= v12;
      else {
        uint64_t v105 = (unint64_t *)(v100 + 8);
      }
      if (v104) {
        unint64_t v102 = v100;
      }
      unint64_t v100 = *v105;
    }

    while (*v105);
    float v87 = *(float *)(v102 + 32);
    LOBYTE(v88) = 1;
  }

  uint64_t v90 = sub_138E8(20);
  uint64_t v91 = sub_138E8(38);
  char v92 = 0;
  uint64_t v93 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v94 = *(void *)(v90 + 8);
  while (1)
  {
    uint64_t v95 = *(int *)&buf[4 * v93];
    char v96 = v92;
    if (((v94 & v95) != 0) != ((*(void *)(v91 + 8) & v95) != 0)) {
      break;
    }
    char v92 = 1;
    uint64_t v93 = 1LL;
    if ((v96 & 1) != 0)
    {
      if ((v94 & 1) == 0) {
        goto LABEL_159;
      }
      goto LABEL_156;
    }
  }

  if ((v94 & v95) == 0) {
    uint64_t v90 = v91;
  }
  if ((*(void *)(v90 + 8) & 1) != 0)
  {
LABEL_156:
    unint64_t v106 = *(os_log_s **)v90;
    if (v106 && os_log_type_enabled(v106, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      __int16 v142 = 1024;
      int v143 = 160;
      __int16 v144 = 2048;
      double v145 = v87;
      _os_log_impl(&dword_0, v106, OS_LOG_TYPE_DEBUG, "%25s:%-5d Returning minimum volume %f.", buf, 0x1Cu);
    }
  }

            unint64_t v65 = sub_335D30(v203);
LABEL_125:
            unsigned int v66 = 0;
            BOOL v67 = v203;
LABEL_126:
            uint64_t v94 = sub_138E8(16);
            uint64_t v95 = sub_138E8(33);
            char v96 = 0;
            unint64_t v97 = 0LL;
            *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
            char v98 = *(void *)(v94 + 8);
            while (1)
            {
              unint64_t v99 = *(int *)&buf[4 * v97];
              unint64_t v100 = v96;
              if (((v98 & v99) != 0) != ((*(void *)(v95 + 8) & v99) != 0)) {
                break;
              }
              char v96 = 1;
              unint64_t v97 = 1LL;
              if ((v100 & 1) != 0)
              {
                if ((v98 & 1) == 0) {
                  goto LABEL_144;
                }
                goto LABEL_134;
              }
            }

            if ((v98 & v99) == 0) {
              uint64_t v94 = v95;
            }
            if ((*(void *)(v94 + 8) & 1) != 0)
            {
LABEL_134:
              unint64_t v101 = *(os_log_s **)v94;
              if (v101 && os_log_type_enabled(v101, OS_LOG_TYPE_DEBUG))
              {
                sub_7D084(&__p, __s);
                unint64_t v102 = v210;
                unsigned int v103 = (void **)__p;
                sub_155138(&v207, (unsigned int *)v65);
                BOOL v104 = &__p;
                if (v102 < 0) {
                  BOOL v104 = v103;
                }
                uint64_t v105 = &v207;
                if ((v207.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  uint64_t v105 = (std::string *)v207.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
                *(void *)&uint8_t buf[4] = "AggregateDevice_Multi.cpp";
                v215 = 1024;
                v216 = 626;
                v217 = 2080;
                *(void *)v218 = v104;
                *(_WORD *)&v218[8] = 1024;
                *(_DWORD *)&v218[10] = v38;
                *(_WORD *)&v218[14] = 1024;
                *(_DWORD *)&v218[16] = v34;
                *(_WORD *)&v218[20] = 2080;
                *(void *)&v218[22] = v105;
                _os_log_impl( &dword_0,  v101,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Channel layout information for %s client stream index %d (for underlying stream index %d): %s",  buf,  0x32u);
                uint64_t v32 = v195;
                if (v210 < 0) {
                  operator delete(__p);
                }
              }
            }

void sub_1B4AA8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B4AFC(int a1, int a2)
{
  BOOL v2 = a1 == 1886222185 && a2 == 1970496068;
  uint64_t v3 = v2;
  if (v2)
  {
    __int128 v4 = (os_log_t *)sub_138E8(19);
    uint64_t v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = 136315394;
        __int16 v8 = "RoutingHandlerUtilities_Aspen.cpp";
        __int16 v9 = 1024;
        int v10 = 107;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Wired Generic USB Device detected... Bypassing input volume range.",  (uint8_t *)&v7,  0x12u);
      }
    }
  }

  return v3;
}

uint64_t sub_1B4BD8(uint64_t a1, int a2, int a3, uint64_t a4)
{
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)sub_2FC95C();
  *(_DWORD *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 48) = 0LL;
  sub_7A5B8( (void *)(a1 + 32),  *(const void **)a4,  *(void *)(a4 + 8),  (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  sub_2CE7A0((_DWORD *)a1);
  return a1;
}

void sub_1B4C44(_Unwind_Exception *exception_object)
{
  __int128 v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(exception_object);
}

void sub_1B4C60( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2)
  {
    uint64_t v80 = (os_log_t *)sub_138E8(13);
    char v81 = *v80;
    if (*v80 && os_log_type_enabled(*v80, OS_LOG_TYPE_ERROR))
    {
      *(float *)char v98 = 4.8151e-34;
      unint64_t v99 = "RoutingHandlerUtilities_Aspen.cpp";
      __int16 v100 = 1024;
      *(_DWORD *)unint64_t v101 = 734;
      _os_log_impl(&dword_0, v81, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v98, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  sub_1B3C0C((unint64_t *)v98, 0, a3, a4, a5, a6, a7, a8);
  *(void *)&__int128 v92 = (*(double (**)(uint64_t))(*(void *)a1 + 104LL))(a1);
  *((void *)&v92 + 1) = v11;
  uint64_t v90 = 0x696E707476646223LL;
  int v91 = 0;
  if ((_BYTE)v100
    && (*(unsigned int (**)(void, uint64_t *))(**(void **)(a3 + 192) + 16LL))(*(void *)(a3 + 192), &v90))
  {
    if (v104)
    {
      if (v103 != qword_4A8610 && !*(_BYTE *)(v103 + 40))
      {
        double v12 = *((float *)&v99 + 1);
        if (*((double *)&v92 + 1) < *((float *)&v99 + 1))
        {
          unint64_t v83 = (os_log_t *)sub_138E8(13);
          unint64_t v84 = *v83;
          if (*v83 && os_log_type_enabled(*v83, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 751;
            *(_WORD *)&_BYTE buf[18] = 2048;
            *(double *)unint64_t v97 = v12;
            *(_WORD *)&v97[8] = 2048;
            *(void *)&v97[10] = *((void *)&v92 + 1);
            _os_log_impl( &dword_0,  v84,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Routing database error: Routing database specified a maximum d ecibel volume (%f) above ioVolumeControl's maximum hardware range (%f).",  buf,  0x26u);
          }

          unint64_t v85 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error( v85,  "Routing database error: Routing database specified a maximum decibel volume (%f) above ioVolumeControl's max imum hardware range (%f).");
        }
      }
    }

    *((double *)&v92 + 1) = *((float *)&v99 + 1);
    uint64_t v13 = sub_138E8(19);
    uint64_t v14 = sub_138E8(38);
    char v15 = 0;
    uint64_t v16 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v17 = *(void *)(v13 + 8);
    while (1)
    {
      uint64_t v18 = *(int *)&buf[4 * v16];
      char v19 = v15;
      if (((v17 & v18) != 0) != ((*(void *)(v14 + 8) & v18) != 0)) {
        break;
      }
      char v15 = 1;
      uint64_t v16 = 1LL;
      if ((v19 & 1) != 0) {
        goto LABEL_25;
      }
    }

    if ((v17 & v18) == 0) {
      uint64_t v13 = v14;
    }
LABEL_25:
    float v31 = *(os_log_s **)v13;
    if (v31 && os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 755;
      *(_WORD *)&_BYTE buf[18] = 2048;
      *(void *)unint64_t v97 = *((void *)&v92 + 1);
      float v28 = "%25s:%-5d Reconfigured input volume control's maximum decibel volume to %f.";
      uint64_t v29 = v31;
      uint32_t v30 = 28;
LABEL_28:
      _os_log_impl(&dword_0, v29, OS_LOG_TYPE_DEBUG, v28, buf, v30);
    }
  }

  else
  {
    uint64_t v20 = sub_138E8(19);
    uint64_t v21 = sub_138E8(38);
    char v22 = 0;
    uint64_t v23 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v24 = *(void *)(v20 + 8);
    while (1)
    {
      uint64_t v25 = *(int *)&buf[4 * v23];
      char v26 = v22;
      if (((v24 & v25) != 0) != ((*(void *)(v21 + 8) & v25) != 0)) {
        break;
      }
      char v22 = 1;
      uint64_t v23 = 1LL;
      if ((v26 & 1) != 0)
      {
        if ((v24 & 1) == 0) {
          goto LABEL_29;
        }
        goto LABEL_20;
      }
    }

    if ((v24 & v25) == 0) {
      uint64_t v20 = v21;
    }
    if ((*(void *)(v20 + 8) & 1) == 0) {
      goto LABEL_29;
    }
LABEL_20:
    unsigned int v27 = *(os_log_s **)v20;
    if (v27 && os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 759;
      float v28 = "%25s:%-5d Skipped setting device input max volume in decibels: the routing database did not request it or ha"
            "rdware does not support volume control.";
      uint64_t v29 = v27;
      uint32_t v30 = 18;
      goto LABEL_28;
    }
  }

void sub_1B57CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, std::__shared_weak_count *a25)
{
}

void sub_1B5828(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unsigned int v6 = (unsigned __int16)sub_2D4C90(a3 + 8, a2);
  if (v6 <= 0x100) {
    LOBYTE(v6) = 0;
  }
  if ((_BYTE)v6)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 144LL))(&v42, a1);
    uint64_t v7 = v42;
    for (uint64_t i = v43; v7 != i; v7 += 16LL)
    {
      __int16 v9 = *(std::__shared_weak_count **)(v7 + 8);
      if (v9)
      {
        int v10 = *(void ***)v7;
        p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
        do
          unint64_t v12 = __ldxr(p_shared_weak_owners);
        while (__stxr(v12 + 1, p_shared_weak_owners));
        uint64_t v13 = std::__shared_weak_count::lock(v9);
        uint64_t v41 = v13;
        if (v13)
        {
          uint64_t v14 = v13;
          uint64_t v40 = v10;
          if (!v10) {
            goto LABEL_38;
          }
          int v15 = (*((uint64_t (**)(void **))*v10 + 19))(v10);
          if (!v15) {
            goto LABEL_38;
          }
          uint64_t v16 = operator new(0x68uLL);
          sub_CB19C(&v38, (uint64_t)v10, v9);
          __int128 v39 = v38;
          __int128 v38 = 0uLL;
          sub_CAF18((uint64_t)v16, &v39);
          unint64_t v18 = a4[12];
          unint64_t v17 = a4[13];
          if (v18 >= v17)
          {
            uint64_t v20 = a4[11];
            uint64_t v21 = (uint64_t)(v18 - v20) >> 4;
            unint64_t v22 = v21 + 1;
            uint64_t v23 = v17 - v20;
            if (v23 >> 3 > v22) {
              unint64_t v22 = v23 >> 3;
            }
            else {
              unint64_t v24 = v22;
            }
            if (v24) {
              unint64_t v24 = (unint64_t)sub_7BE90(v24);
            }
            else {
              uint64_t v25 = 0LL;
            }
            unint64_t v26 = v24 + 16 * v21;
            *(_DWORD *)unint64_t v26 = v15;
            *(void *)(v26 + 8) = v16;
            float v28 = (char *)a4[11];
            unsigned int v27 = (char *)a4[12];
            unint64_t v29 = v26;
            if (v27 != v28)
            {
              do
              {
                *(_OWORD *)(v29 - 16) = *((_OWORD *)v27 - 1);
                v29 -= 16LL;
                v27 -= 16;
              }

              while (v27 != v28);
              unsigned int v27 = (char *)a4[11];
            }

            unint64_t v19 = v26 + 16;
            a4[11] = v29;
            a4[12] = v26 + 16;
            a4[13] = v24 + 16 * v25;
            if (v27) {
              operator delete(v27);
            }
          }

          else
          {
            *(_DWORD *)unint64_t v18 = v15;
            *(void *)(v18 + 8) = v16;
            unint64_t v19 = v18 + 16;
          }

          a4[12] = v19;
          uint32_t v30 = (std::__shared_weak_count *)*((void *)&v39 + 1);
          if (*((void *)&v39 + 1))
          {
            float v31 = (unint64_t *)(*((void *)&v39 + 1) + 8LL);
            do
              unint64_t v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }

          uint64_t v33 = (std::__shared_weak_count *)*((void *)&v38 + 1);
          if (*((void *)&v38 + 1))
          {
            uint64_t v34 = (unint64_t *)(*((void *)&v38 + 1) + 8LL);
            do
              unint64_t v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }

          uint64_t v14 = v41;
          if (v41)
          {
LABEL_38:
            p_shared_owners = (unint64_t *)&v14->__shared_owners_;
            do
              unint64_t v37 = __ldaxr(p_shared_owners);
            while (__stlxr(v37 - 1, p_shared_owners));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
          }
        }

        std::__shared_weak_count::__release_weak(v9);
      }
    }

    uint64_t v40 = (void **)&v42;
    sub_A0CF0(&v40);
  }

void sub_1B5AD4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, char a16)
{
  a14 = (void **)&a16;
  sub_A0CF0(&a14);
  _Unwind_Resume(a1);
}

BOOL sub_1B5B3C(uint64_t a1, uint64_t a2, __int32 a3, int a4)
{
  BOOL v4 = 1LL;
  if (a4 != 1633759844 && a4 != 1634231920 && a4 != 1635085420)
  {
    sub_2D4928(&__p, a1 + 8, a2);
    if (v12)
    {
      unsigned int v6 = v11;
      uint64_t v7 = wmemchr((const __int32 *)__p, a3, ((char *)v11 - (_BYTE *)__p) >> 2);
      if (v7) {
        __int16 v8 = v7;
      }
      else {
        __int16 v8 = v6;
      }
      BOOL v4 = v8 == v11;
      if (v12 && __p)
      {
        uint64_t v11 = (__int32 *)__p;
        operator delete(__p);
      }
    }
  }

  return v4;
}

BOOL sub_1B5BF0(uint64_t a1)
{
  BOOL result = 1LL;
  if ((int)a1 <= 1918990111)
  {
    if ((int)a1 > 1768778863)
    {
      if ((int)a1 <= 1768781425)
      {
        if ((_DWORD)a1 == 1768778864) {
          return result;
        }
        if ((_DWORD)a1 == 1768779619) {
          return 0LL;
        }
        int v6 = 1768781411;
        goto LABEL_46;
      }

      if ((int)a1 > 1836021359)
      {
        if ((_DWORD)a1 == 1836021360) {
          return 0LL;
        }
        int v4 = 1836281204;
      }

      else
      {
        if ((_DWORD)a1 == 1768781426) {
          return result;
        }
        int v4 = 1835229549;
      }
    }

    else
    {
      if ((int)a1 <= 1735222131)
      {
        if ((_DWORD)a1 == 1701013792 || (_DWORD)a1 == 1701013869) {
          return 0LL;
        }
        int v6 = 1701017120;
        goto LABEL_46;
      }

      if ((int)a1 > 1768057202)
      {
        if ((_DWORD)a1 == 1768057203) {
          return 0LL;
        }
        int v4 = 1768776806;
      }

      else
      {
        if ((_DWORD)a1 == 1735222132) {
          return 0LL;
        }
        int v4 = 1751212899;
      }
    }

    goto LABEL_41;
  }

  if ((int)a1 <= 1986884454)
  {
    if ((int)a1 <= 1936747373)
    {
      if ((_DWORD)a1 == 1918990112) {
        return result;
      }
      if ((_DWORD)a1 == 1919776355) {
        return 0LL;
      }
      int v4 = 1936745328;
    }

    else
    {
      if ((int)a1 > 1986098035)
      {
        if ((_DWORD)a1 == 1986098036) {
          return 0LL;
        }
        int v6 = 1986556788;
        goto LABEL_46;
      }

      if ((_DWORD)a1 == 1936747374) {
        return 0LL;
      }
      int v4 = 1937007472;
    }

void sub_1B5F60(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  if (*(_DWORD *)(a2 + 144) != 1886216809 || *(void *)(a2 + 96) == *(void *)(a2 + 104))
  {
    int v31 = 0;
  }

  else
  {
    sub_14C918(buf);
    uint64_t v12 = *(void *)buf;
    uint64_t v13 = *(void *)&buf[8];
    if (*(void *)buf) {
      operator delete(*(void **)buf);
    }
    if (v12 != v13)
    {
      sub_14C918(&v84);
      __int128 v14 = *(_OWORD *)&v84.__r_.__value_.__l.__data_;
      if (v84.__r_.__value_.__r.__words[0] == v84.__r_.__value_.__l.__size_)
      {
        uint64_t v70 = (os_log_t *)sub_138E8(13);
        float v71 = *v70;
        if (*v70 && os_log_type_enabled(*v70, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 415;
          _os_log_impl( &dword_0,  v71,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Expected non-empty result from Defaults_GetOverriddenBuiltInMicSubPorts",  buf,  0x12u);
        }

        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error( exception,  "Expected non-empty result from Defaults_GetOverriddenBuiltInMicSubPorts");
      }

      int v15 = (os_log_t *)sub_138E8(23);
      __int16 v16 = *v15;
      if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_INFO))
      {
        sub_8F640(&__p, (unsigned int *)v14, *((unsigned int **)&v14 + 1));
        unint64_t v17 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 416;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&_BYTE buf[20] = v17;
        _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_INFO,  "%25s:%-5d Attempting to find an internal ID for data sources specified by preference: %s",  buf,  0x1Cu);
      }

      uint64_t v18 = *(void *)(a2 + 96);
      uint64_t v19 = *(void *)(a2 + 104);
      if (v18 == v19)
      {
LABEL_28:
        unsigned int v27 = (os_log_t *)sub_138E8(23);
        uint64_t v24 = 1870033508LL;
        float v28 = *v27;
        if (!*v27 || !os_log_type_enabled(*v27, OS_LOG_TYPE_INFO))
        {
LABEL_98:
          if ((void)v14) {
            operator delete((void *)v14);
          }
          uint64_t v61 = sub_138E8(20);
          if ((*(_BYTE *)(v61 + 8) & 1) != 0)
          {
            unint64_t v62 = *(os_log_s **)v61;
            if (*(void *)v61)
            {
              if (os_log_type_enabled(*(os_log_t *)v61, OS_LOG_TYPE_DEBUG))
              {
                sub_2CA1C(&v84, v24);
                if ((v84.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  unint64_t v63 = &v84;
                }
                else {
                  unint64_t v63 = (std::string *)v84.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 208;
                *(_WORD *)&_BYTE buf[18] = 2080;
                *(void *)&_BYTE buf[20] = v63;
                _os_log_impl( &dword_0,  v62,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Resolved sub-port set inquiry using system defaults override: %s.",  buf,  0x1Cu);
              }
            }
          }

          *(_DWORD *)AudioObjectPropertyAddress buf = v24;
          sub_852D0(a1, (__int32 *)buf, 1LL);
          return;
        }

        sub_2CA1C(&__p, 1870033508LL);
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 432;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&_BYTE buf[20] = p_p;
        uint32_t v30 = "%25s:%-5d Did not find a matching internal ID for data sources specified by preference.  Using %s";
      }

      else
      {
LABEL_15:
        uint64_t v20 = *(unsigned int **)(*(void *)v18 + 32LL);
        uint64_t v21 = *(unsigned int **)(*(void *)v18 + 40LL);
        while (1)
        {
          if (v20 == v21)
          {
            v18 += 16LL;
            if (v18 != v19) {
              goto LABEL_15;
            }
            goto LABEL_28;
          }

          unint64_t v22 = (const void *)*((void *)v20 + 1);
          uint64_t v23 = *((void *)v20 + 2) - (void)v22;
          uint64_t v24 = *v20;
          BOOL v25 = (_DWORD)v24 == 1634495520 || v23 == 4;
          BOOL v26 = v25 && *((void *)&v14 + 1) - (void)v14 == v23;
          v20 += 16;
        }

        uint64_t v59 = (os_log_t *)sub_138E8(23);
        float v28 = *v59;
        if (!*v59 || !os_log_type_enabled(*v59, OS_LOG_TYPE_INFO)) {
          goto LABEL_98;
        }
        sub_2CA1C(&__p, v24);
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          char v60 = &__p;
        }
        else {
          char v60 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 426;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&_BYTE buf[20] = v60;
        uint32_t v30 = "%25s:%-5d Found matching internal ID: %s";
      }

      _os_log_impl(&dword_0, v28, OS_LOG_TYPE_INFO, v30, buf, 0x1Cu);
      goto LABEL_98;
    }

    int v31 = 1;
  }

  sub_195658(&v84, *(void *)(a2 + 80), *(std::__shared_weak_count **)(a2 + 88));
  std::string::size_type size = (std::__shared_weak_count *)v84.__r_.__value_.__l.__size_;
  *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)&v84.__r_.__value_.__l.__data_;
  if (v84.__r_.__value_.__l.__size_)
  {
    uint64_t v33 = (unint64_t *)(v84.__r_.__value_.__l.__size_ + 16);
    do
      unint64_t v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }

  unint64_t v35 = sub_1B6A5C(a3 + 80, (unint64_t *)buf);
  if (size) {
    std::__shared_weak_count::__release_weak(size);
  }
  uint64_t v36 = (std::__shared_weak_count *)v84.__r_.__value_.__l.__size_;
  if (v84.__r_.__value_.__l.__size_)
  {
    unint64_t v37 = (unint64_t *)(v84.__r_.__value_.__l.__size_ + 8);
    do
      unint64_t v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }

  if ((void *)(a3 + 88) != v35 && v35[6] != v35[7])
  {
    uint64_t v39 = sub_138E8(20);
    if ((*(_BYTE *)(v39 + 8) & 1) != 0)
    {
      uint64_t v40 = *(os_log_s **)v39;
      if (*(void *)v39)
      {
        if (os_log_type_enabled(*(os_log_t *)v39, OS_LOG_TYPE_DEBUG))
        {
          sub_8F640(&v84, (unsigned int *)v35[6], (unsigned int *)v35[7]);
          uint64_t v41 = (v84.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v84 : (std::string *)v84.__r_.__value_.__r.__words[0];
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 223;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&_BYTE buf[20] = v41;
          _os_log_impl( &dword_0,  v40,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Resolved sub-port set inquiry using client-specified sub-ports: %s.",  buf,  0x1Cu);
        }
      }
    }

    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
    sub_7A5B8(a1, (const void *)v35[6], v35[7], (uint64_t)(v35[7] - v35[6]) >> 2);
    return;
  }

  if (v31)
  {
    uint64_t v42 = *(void *)(a3 + 112);
    uint64_t v45 = *(void *)(v42 + 16);
    uint64_t v43 = v42 + 16;
    uint64_t v44 = v45;
    if (v45)
    {
      unsigned int v46 = *(_DWORD *)(a3 + 12);
      uint64_t v47 = v43;
      do
      {
        unsigned int v48 = *(_DWORD *)(v44 + 32);
        BOOL v49 = v48 >= v46;
        if (v48 >= v46) {
          uint32_t v50 = (uint64_t *)v44;
        }
        else {
          uint32_t v50 = (uint64_t *)(v44 + 8);
        }
        if (v49) {
          uint64_t v47 = v44;
        }
        uint64_t v44 = *v50;
      }

      while (*v50);
      if (v47 != v43 && *(_DWORD *)(v47 + 32) <= v46 && *(_BYTE *)(v47 + 81))
      {
        unsigned int v51 = *(unsigned __int16 *)(v47 + 80);
        if (v51 >= 0x100 && v51 != 0)
        {
          uint64_t v53 = sub_5954C();
          if ((*(unsigned int (**)(uint64_t))(*(void *)v53 + 184LL))(v53) <= 1)
          {
            sub_38DB00(buf, 0x6D633032u, *(void *)(a2 + 96), *(void *)(a2 + 104));
            uint64_t v54 = *(void *)buf;
            if (*(void *)buf) {
              a4 = sub_389D10(*(uint64_t *)buf, a2 + 568);
            }
            unint64_t v64 = *(std::__shared_weak_count **)&buf[8];
            if (*(void *)&buf[8])
            {
              unint64_t v65 = (unint64_t *)(*(void *)&buf[8] + 8LL);
              do
                unint64_t v66 = __ldaxr(v65);
              while (__stlxr(v66 - 1, v65));
              if (!v66)
              {
                ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                std::__shared_weak_count::__release_weak(v64);
              }
            }

            if (!v54)
            {
              uint64_t v73 = (os_log_t *)sub_138E8(13);
              char v74 = *v73;
              if (*v73 && os_log_type_enabled(*v73, OS_LOG_TYPE_ERROR))
              {
                sub_2CA1C(&v84, 1835216946LL);
                if ((v84.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  uint64_t v75 = &v84;
                }
                else {
                  uint64_t v75 = (std::string *)v84.__r_.__value_.__r.__words[0];
                }
                sub_2CA1C(&__p, *(unsigned int *)(a2 + 144));
                int v76 = (char)__p.__r_.__value_.__s.__size_;
                std::string::size_type v77 = __p.__r_.__value_.__r.__words[0];
                sub_2CA1C(v81, 1835216946LL);
                char v78 = &__p;
                if (v76 < 0) {
                  char v78 = (std::string *)v77;
                }
                if (v82 >= 0) {
                  uint64_t v79 = v81;
                }
                else {
                  uint64_t v79 = (void **)v81[0];
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
                *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 442;
                *(_WORD *)&_BYTE buf[18] = 2080;
                *(void *)&_BYTE buf[20] = v75;
                __int16 v86 = 2080;
                *(void *)float v87 = v78;
                *(_WORD *)&v87[8] = 2080;
                unint64_t v88 = v79;
                _os_log_impl( &dword_0,  v74,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Attempt to set unknown sub-port (%s) preferred override on p ort with type %s. Requested sub-port: %s",  buf,  0x30u);
                if (v82 < 0) {
                  operator delete(v81[0]);
                }
              }

              uint64_t v80 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error( v80,  "Attempt to set unknown sub-port (%s) preferred override on port with type %s. Requested sub-port: %s");
            }

            uint64_t v67 = (os_log_t *)sub_138E8(20);
            __int128 v68 = *v67;
            if (*v67 && os_log_type_enabled(*v67, OS_LOG_TYPE_DEFAULT))
            {
              sub_2CA1C(&v84, a4);
              unint64_t v69 = (v84.__r_.__value_.__s.__size_ & 0x80u) == 0
                  ? &v84
                  : (std::string *)v84.__r_.__value_.__r.__words[0];
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
              *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 245;
              *(_WORD *)&_BYTE buf[18] = 2080;
              *(void *)&_BYTE buf[20] = v69;
              _os_log_impl( &dword_0,  v68,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Resolved sub-port set inquiry using internal sub-port override: %s.",  buf,  0x1Cu);
            }

            *(_DWORD *)AudioObjectPropertyAddress buf = a4;
            sub_852D0(a1, (__int32 *)buf, 1LL);
            return;
          }
        }
      }
    }
  }

  *(_DWORD *)AudioObjectPropertyAddress buf = a6 ^ 1;
  *(_DWORD *)&uint8_t buf[4] = a5;
  *(_OWORD *)&_DWORD buf[8] = *(_OWORD *)sub_2FC95C();
  *(_DWORD *)&uint8_t buf[24] = 0;
  unint64_t v88 = 0LL;
  uint64_t v89 = 0LL;
  *(void *)&v87[2] = 0LL;
  sub_2D983C(&v84, a4, (uint64_t)buf);
  __int128 v55 = *(_OWORD *)&v84.__r_.__value_.__l.__data_;
  if (v84.__r_.__value_.__r.__words[0] == v84.__r_.__value_.__l.__size_)
  {
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
    if (!(void)v55) {
      return;
    }
LABEL_88:
    operator delete((void *)v55);
    return;
  }

  uint64_t v56 = sub_138E8(20);
  if ((*(_BYTE *)(v56 + 8) & 1) != 0)
  {
    uint64_t v57 = *(os_log_s **)v56;
    if (*(void *)v56)
    {
      if (os_log_type_enabled(*(os_log_t *)v56, OS_LOG_TYPE_DEBUG))
      {
        sub_8F640(&__p, (unsigned int *)v55, *((unsigned int **)&v55 + 1));
        uint64_t v58 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 258;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&_BYTE buf[20] = v58;
        _os_log_impl( &dword_0,  v57,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Resolved sub-port set inquiry using the connection's ModeMap: %s.",  buf,  0x1Cu);
      }
    }
  }

  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  sub_7A5B8(a1, (const void *)v55, *((uint64_t *)&v55 + 1), (uint64_t)(*((void *)&v55 + 1) - v55) >> 2);
  if ((void)v55) {
    goto LABEL_88;
  }
}

void sub_1B699C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, char a22)
{
  if (v23 < 0) {
    operator delete(v22);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1B6A5C(uint64_t a1, unint64_t *a2)
{
  BOOL v2 = (void *)(a1 + 8);
  unsigned __int16 v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  unsigned __int16 v5 = (void *)(a1 + 8);
  do
  {
    BOOL v6 = sub_862E4(v3 + 4, a2);
    uint64_t v7 = v3 + 1;
    if (!v6)
    {
      uint64_t v7 = v3;
      unsigned __int16 v5 = v3;
    }

    unsigned __int16 v3 = (void *)*v7;
  }

  while (*v7);
  if (v5 == v2 || sub_862E4(a2, v5 + 4)) {
    return v2;
  }
  return v5;
}

void sub_1B6AD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  if (*(void *)a1 == *(void *)(a1 + 8))
  {
    (*(void (**)(_BYTE *__return_ptr, uint64_t, void))(*(void *)a2 + 280LL))( buf,  a2,  *(unsigned int *)(a3 + 144));
    __int16 v9 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v9;
      operator delete(v9);
      *(void *)a1 = 0LL;
      *(void *)(a1 + 8) = 0LL;
      *(void *)(a1 + 16) = 0LL;
    }

    uint64_t v10 = *(void *)buf;
    *(void *)a1 = *(void *)buf;
    uint64_t v11 = *(void *)&buf[8];
    *(_OWORD *)(a1 + 8) = *(_OWORD *)&buf[8];
    if (v10 != v11)
    {
      uint64_t v12 = sub_138E8(20);
      if ((*(_BYTE *)(v12 + 8) & 1) != 0)
      {
        uint64_t v13 = *(os_log_s **)v12;
        if (*(void *)v12)
        {
          if (os_log_type_enabled(*(os_log_t *)v12, OS_LOG_TYPE_DEBUG))
          {
            sub_F6EB0(&__p, *(unsigned int **)a1, *(unsigned int **)(a1 + 8));
            if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1023;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&_BYTE buf[20] = p_p;
            _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Resolved sub-port set inquiry using the device's default sub-port lookup mechanism: %s.",  buf,  0x1Cu);
          }
        }
      }
    }
  }

void sub_1B6C58(_Unwind_Exception *exception_object)
{
  unsigned __int16 v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_1B6C7C(os_unfair_lock_s *a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)AudioObjectPropertyAddress buf = a2;
  *(_DWORD *)uint64_t v151 = a3;
  *(_OWORD *)&v151[4] = *(_OWORD *)sub_2FC95C();
  *(_DWORD *)&v151[20] = 0;
  __int128 v154 = 0uLL;
  *(void *)&v153[2] = 0LL;
  uint64_t result = sub_2D90F0(a4, (uint64_t)buf);
  if (v9)
  {
    if (result)
    {
      uint64_t v10 = *(void *)result;
      uint64_t v11 = *(void *)(result + 8);
      if (*(void *)result != v11)
      {
        locunsigned int k = a1 + 2;
        do
        {
          if (((*(uint64_t (**)(os_unfair_lock_s *, uint64_t))(*(void *)&a1->_os_unfair_lock_opaque + 16LL))( a1,  v10) & 1) == 0)
          {
            uint64_t v12 = (os_log_t *)sub_138E8(19);
            uint64_t v13 = *v12;
            if (*v12)
            {
              if (os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
              {
                (*(void (**)(void **__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                + 128LL))( v146,  a1);
                __int128 v14 = v146[0];
                sub_613AC((uint64_t)__p, (unsigned int *)v10);
                int v15 = __p;
                if (v149 < 0) {
                  int v15 = (void **)__p[0];
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                *(void *)uint64_t v151 = "RoutingHandlerUtilities_Aspen.cpp";
                *(_WORD *)&v151[8] = 1024;
                *(_DWORD *)&v151[10] = 1057;
                *(_WORD *)&v151[14] = 2112;
                *(void *)&v151[16] = v14;
                __int16 v152 = 2080;
                *(void *)__int16 v153 = v15;
                _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Device %@ does not have property %s, skipping remote property.",  buf,  0x26u);
                if (v149 < 0) {
                  operator delete(__p[0]);
                }
                sub_19DFC((uint64_t)v146);
              }
            }
          }

          int v16 = *(_DWORD *)(v10 + 16);
          int v17 = *(unsigned __int8 *)(v10 + 32);
          int v18 = *(unsigned __int8 *)(v10 + 33);
          switch(v16)
          {
            case 10:
              *(double *)UInt32 ioDataSize = sub_2DCC74((double *)(v10 + 16));
              uint64_t v59 = (os_log_t *)sub_138E8(19);
              char v60 = *v59;
              if (*v59 && os_log_type_enabled(*v59, OS_LOG_TYPE_DEFAULT))
              {
                sub_613AC((uint64_t)__p, (unsigned int *)v10);
                int v61 = v149;
                unint64_t v62 = (void **)__p[0];
                sub_23FE8((uint64_t)v146, lock);
                unint64_t v63 = __p;
                if (v61 < 0) {
                  unint64_t v63 = v62;
                }
                unint64_t v64 = v146;
                if (v147 < 0) {
                  unint64_t v64 = (void **)v146[0];
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                *(void *)uint64_t v151 = "RoutingHandlerUtilities_Aspen.cpp";
                *(_WORD *)&v151[8] = 1024;
                *(_DWORD *)&v151[10] = 270;
                *(_WORD *)&v151[14] = 2080;
                *(void *)&v151[16] = v63;
                __int16 v152 = 2080;
                *(void *)__int16 v153 = v64;
                _os_log_impl( &dword_0,  v60,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Creating remote property %s on device %s",  buf,  0x26u);
                if (v147 < 0) {
                  operator delete(v146[0]);
                }
                if (v149 < 0) {
                  operator delete(__p[0]);
                }
              }

              double outData = 0.0;
              UInt32 v144 = 8;
              AudioObjectID v65 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 120LL))(a1);
              uint64_t result = AudioObjectGetPropertyData(v65, (const AudioObjectPropertyAddress *)v10, 0, 0LL, &v144, &outData);
              int v66 = result;
              if ((_DWORD)result)
              {
                uint64_t v112 = (os_log_t *)sub_138E8(13);
                char v113 = *v112;
                if (*v112 && os_log_type_enabled(*v112, OS_LOG_TYPE_ERROR))
                {
                  sub_613AC((uint64_t)__p, (unsigned int *)v10);
                  int v114 = v149;
                  uint64_t v115 = (void **)__p[0];
                  sub_23FE8((uint64_t)v146, lock);
                  uint64_t v116 = __p;
                  if (v114 < 0) {
                    uint64_t v116 = v115;
                  }
                  if (v147 >= 0) {
                    char v117 = v146;
                  }
                  else {
                    char v117 = (void **)v146[0];
                  }
                  *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                  *(void *)uint64_t v151 = "RoutingHandlerUtilities_Aspen.cpp";
                  *(_WORD *)&v151[8] = 1024;
                  *(_DWORD *)&v151[10] = 276;
                  *(_WORD *)&v151[14] = 2080;
                  *(void *)&v151[16] = v116;
                  __int16 v152 = 2080;
                  *(void *)__int16 v153 = v117;
                  _os_log_impl( &dword_0,  v113,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Attempt to get property %s for device %s failed.",  buf,  0x26u);
                  if (v147 < 0) {
                    operator delete(v146[0]);
                  }
                  if (v149 < 0) {
                    operator delete(__p[0]);
                  }
                }

                exception = __cxa_allocate_exception(0x10uLL);
                *(void *)exception = &off_4865A0;
                exception[2] = v66;
              }

              if (v144 != 8)
              {
                __int128 v126 = (os_log_t *)sub_138E8(13);
                uint64_t v127 = *v126;
                if (*v126 && os_log_type_enabled(*v126, OS_LOG_TYPE_ERROR))
                {
                  sub_613AC((uint64_t)__p, (unsigned int *)v10);
                  int v128 = v149;
                  __int128 v129 = (void **)__p[0];
                  sub_23FE8((uint64_t)v146, lock);
                  char v130 = __p;
                  if (v128 < 0) {
                    char v130 = v129;
                  }
                  if (v147 >= 0) {
                    uint64_t v131 = v146;
                  }
                  else {
                    uint64_t v131 = (void **)v146[0];
                  }
                  *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
                  *(void *)uint64_t v151 = "RoutingHandlerUtilities_Aspen.cpp";
                  *(_WORD *)&v151[8] = 1024;
                  *(_DWORD *)&v151[10] = 277;
                  *(_WORD *)&v151[14] = 2080;
                  *(void *)&v151[16] = v130;
                  __int16 v152 = 2080;
                  *(void *)__int16 v153 = v131;
                  *(_WORD *)&v153[8] = 1024;
                  LODWORD(v154) = v144;
                  WORD2(v154) = 2048;
                  *(void *)((char *)&v154 + 6) = 8LL;
                  _os_log_impl( &dword_0,  v127,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Property %s for device %s failed returned size %u (expected %lu).",  buf,  0x36u);
                  if (v147 < 0) {
                    operator delete(v146[0]);
                  }
                  if (v149 < 0) {
                    operator delete(__p[0]);
                  }
                }

                uint64_t v132 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v132, "Property %s for device %s failed returned size %u (expected %lu).");
              }

              uint64_t v67 = (os_log_t *)sub_138E8(19);
              __int128 v68 = *v67;
              if (!*v67 || !os_log_type_enabled(*v67, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_86;
              }
              sub_613AC((uint64_t)__p, (unsigned int *)v10);
              int v69 = v149;
              uint64_t v70 = (void **)__p[0];
              sub_23FE8((uint64_t)v146, lock);
              float v71 = __p;
              if (v69 < 0) {
                float v71 = v70;
              }
              uint64_t v72 = v146;
              if (v147 < 0) {
                uint64_t v72 = (void **)v146[0];
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
              *(void *)uint64_t v151 = "RoutingHandlerUtilities_Aspen.cpp";
              *(_WORD *)&v151[8] = 1024;
              *(_DWORD *)&v151[10] = 281;
              *(_WORD *)&v151[14] = 2080;
              *(void *)&v151[16] = v71;
              __int16 v152 = 2080;
              *(void *)__int16 v153 = v72;
              _os_log_impl(&dword_0, v68, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting property %s on device %s", buf, 0x26u);
              if (v147 < 0) {
                operator delete(v146[0]);
              }
              if (v149 < 0)
              {
                operator delete(__p[0]);
                if (!v17)
                {
LABEL_94:
                  uint64_t v82 = *(void *)&a1->_os_unfair_lock_opaque;
                  if (v18)
                  {
                    AudioObjectID v83 = (*(uint64_t (**)(os_unfair_lock_s *))(v82 + 120))(a1);
                    uint64_t result = sub_1B8080(v83, v10, (double *)ioDataSize);
                    int v84 = result;
                    if ((_DWORD)result)
                    {
                      uint64_t v136 = (os_log_t *)sub_138E8(13);
                      uint64_t v137 = *v136;
                      if (*v136 && os_log_type_enabled(*v136, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                        *(void *)uint64_t v151 = "RoutingHandlerUtilities_Aspen.cpp";
                        *(_WORD *)&v151[8] = 1024;
                        *(_DWORD *)&v151[10] = 293;
                        _os_log_impl( &dword_0,  v137,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (result) [error result is an error]: Error setting device property synchronously",  buf,  0x12u);
                      }

                      uint64_t v138 = __cxa_allocate_exception(0x10uLL);
                      *(void *)uint64_t v138 = &off_4865A0;
                      v138[2] = v84;
                    }
                  }

                  else
                  {
                    uint64_t result = (*(uint64_t (**)(os_unfair_lock_s *, uint64_t, void, void, uint64_t, UInt32 *))(v82 + 48))( a1,  v10,  0LL,  0LL,  8LL,  ioDataSize);
                  }

                  break;
                }
              }

              else
              {
LABEL_86:
                if (!v17) {
                  goto LABEL_94;
                }
              }

              uint64_t v73 = operator new(0x38uLL);
              *uint64_t v73 = &off_474688;
              v73[1] = a1;
              uint64_t v74 = *(void *)v10;
              *((_DWORD *)v73 + 6) = *(_DWORD *)(v10 + 8);
              v73[2] = v74;
              double v75 = outData;
              *((double *)v73 + 4) = *(double *)ioDataSize;
              *((double *)v73 + 5) = v75;
              *((_BYTE *)v73 + 48) = v18;
              int v76 = operator new(0x18uLL);
              std::string::size_type v77 = *(void **)(a5 + 8);
              *int v76 = a5;
              v76[1] = v77;
              v76[2] = v73;
              *std::string::size_type v77 = v76;
              uint64_t v78 = *(void *)(a5 + 16) + 1LL;
              *(void *)(a5 + 8) = v76;
              *(void *)(a5 + 16) = v78;
              uint64_t result = sub_1B8BB8((uint64_t)v73);
              break;
            case 9:
              *(float *)&UInt32 v144 = sub_2DCB78((float *)(v10 + 16));
              uint64_t v39 = (os_log_t *)sub_138E8(19);
              uint64_t v40 = *v39;
              if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_DEFAULT))
              {
                sub_613AC((uint64_t)__p, (unsigned int *)v10);
                int v41 = v149;
                uint64_t v42 = (void **)__p[0];
                sub_23FE8((uint64_t)v146, lock);
                uint64_t v43 = __p;
                if (v41 < 0) {
                  uint64_t v43 = v42;
                }
                uint64_t v44 = v146;
                if (v147 < 0) {
                  uint64_t v44 = (void **)v146[0];
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                *(void *)uint64_t v151 = "RoutingHandlerUtilities_Aspen.cpp";
                *(_WORD *)&v151[8] = 1024;
                *(_DWORD *)&v151[10] = 270;
                *(_WORD *)&v151[14] = 2080;
                *(void *)&v151[16] = v43;
                __int16 v152 = 2080;
                *(void *)__int16 v153 = v44;
                _os_log_impl( &dword_0,  v40,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Creating remote property %s on device %s",  buf,  0x26u);
                if (v147 < 0) {
                  operator delete(v146[0]);
                }
                if (v149 < 0) {
                  operator delete(__p[0]);
                }
              }

              LODWORD(outData) = 0;
              ioDataSize[0] = 4;
              AudioObjectID v45 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 120LL))(a1);
              uint64_t result = AudioObjectGetPropertyData( v45,  (const AudioObjectPropertyAddress *)v10,  0,  0LL,  ioDataSize,  &outData);
              int v46 = result;
              if ((_DWORD)result)
              {
                int v91 = (os_log_t *)sub_138E8(13);
                __int128 v92 = *v91;
                if (*v91 && os_log_type_enabled(*v91, OS_LOG_TYPE_ERROR))
                {
                  sub_613AC((uint64_t)__p, (unsigned int *)v10);
                  int v93 = v149;
                  __int16 v94 = (void **)__p[0];
                  sub_23FE8((uint64_t)v146, lock);
                  uint64_t v95 = __p;
                  if (v93 < 0) {
                    uint64_t v95 = v94;
                  }
                  if (v147 >= 0) {
                    char v96 = v146;
                  }
                  else {
                    char v96 = (void **)v146[0];
                  }
                  *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                  *(void *)uint64_t v151 = "RoutingHandlerUtilities_Aspen.cpp";
                  *(_WORD *)&v151[8] = 1024;
                  *(_DWORD *)&v151[10] = 276;
                  *(_WORD *)&v151[14] = 2080;
                  *(void *)&v151[16] = v95;
                  __int16 v152 = 2080;
                  *(void *)__int16 v153 = v96;
                  _os_log_impl( &dword_0,  v92,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Attempt to get property %s for device %s failed.",  buf,  0x26u);
                  if (v147 < 0) {
                    operator delete(v146[0]);
                  }
                  if (v149 < 0) {
                    operator delete(__p[0]);
                  }
                }

                unint64_t v97 = __cxa_allocate_exception(0x10uLL);
                *(void *)unint64_t v97 = &off_4865A0;
                v97[2] = v46;
              }

              if (ioDataSize[0] != 4)
              {
                char v98 = (os_log_t *)sub_138E8(13);
                unint64_t v99 = *v98;
                if (*v98 && os_log_type_enabled(*v98, OS_LOG_TYPE_ERROR))
                {
                  sub_613AC((uint64_t)__p, (unsigned int *)v10);
                  int v100 = v149;
                  unint64_t v101 = (void **)__p[0];
                  sub_23FE8((uint64_t)v146, lock);
                  char v102 = __p;
                  if (v100 < 0) {
                    char v102 = v101;
                  }
                  if (v147 >= 0) {
                    uint64_t v103 = v146;
                  }
                  else {
                    uint64_t v103 = (void **)v146[0];
                  }
                  *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
                  *(void *)uint64_t v151 = "RoutingHandlerUtilities_Aspen.cpp";
                  *(_WORD *)&v151[8] = 1024;
                  *(_DWORD *)&v151[10] = 277;
                  *(_WORD *)&v151[14] = 2080;
                  *(void *)&v151[16] = v102;
                  __int16 v152 = 2080;
                  *(void *)__int16 v153 = v103;
                  *(_WORD *)&v153[8] = 1024;
                  LODWORD(v154) = ioDataSize[0];
                  WORD2(v154) = 2048;
                  *(void *)((char *)&v154 + 6) = 4LL;
                  _os_log_impl( &dword_0,  v99,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Property %s for device %s failed returned size %u (expected %lu).",  buf,  0x36u);
                  if (v147 < 0) {
                    operator delete(v146[0]);
                  }
                  if (v149 < 0) {
                    operator delete(__p[0]);
                  }
                }

                char v104 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v104, "Property %s for device %s failed returned size %u (expected %lu).");
              }

              uint64_t v47 = (os_log_t *)sub_138E8(19);
              unsigned int v48 = *v47;
              if (!*v47 || !os_log_type_enabled(*v47, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_62;
              }
              sub_613AC((uint64_t)__p, (unsigned int *)v10);
              int v49 = v149;
              uint32_t v50 = (void **)__p[0];
              sub_23FE8((uint64_t)v146, lock);
              unsigned int v51 = __p;
              if (v49 < 0) {
                unsigned int v51 = v50;
              }
              uint64_t v52 = v146;
              if (v147 < 0) {
                uint64_t v52 = (void **)v146[0];
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
              *(void *)uint64_t v151 = "RoutingHandlerUtilities_Aspen.cpp";
              *(_WORD *)&v151[8] = 1024;
              *(_DWORD *)&v151[10] = 281;
              *(_WORD *)&v151[14] = 2080;
              *(void *)&v151[16] = v51;
              __int16 v152 = 2080;
              *(void *)__int16 v153 = v52;
              _os_log_impl(&dword_0, v48, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting property %s on device %s", buf, 0x26u);
              if (v147 < 0) {
                operator delete(v146[0]);
              }
              if (v149 < 0)
              {
                operator delete(__p[0]);
                if (!v17)
                {
LABEL_89:
                  uint64_t v79 = *(void *)&a1->_os_unfair_lock_opaque;
                  if (v18)
                  {
                    AudioObjectID v80 = (*(uint64_t (**)(os_unfair_lock_s *))(v79 + 120))(a1);
                    uint64_t result = sub_1B8E70(v80, v10, (float *)&v144);
                    int v81 = result;
                    if ((_DWORD)result)
                    {
                      int64x2_t v133 = (os_log_t *)sub_138E8(13);
                      __int128 v134 = *v133;
                      if (*v133 && os_log_type_enabled(*v133, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                        *(void *)uint64_t v151 = "RoutingHandlerUtilities_Aspen.cpp";
                        *(_WORD *)&v151[8] = 1024;
                        *(_DWORD *)&v151[10] = 293;
                        _os_log_impl( &dword_0,  v134,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (result) [error result is an error]: Error setting device property synchronously",  buf,  0x12u);
                      }

                      int v135 = __cxa_allocate_exception(0x10uLL);
                      *(void *)int v135 = &off_4865A0;
                      v135[2] = v81;
                    }

                    break;
                  }

LABEL_102:
                  uint64_t result = (*(uint64_t (**)(os_unfair_lock_s *, uint64_t, void, void, uint64_t, UInt32 *))(v79 + 48))( a1,  v10,  0LL,  0LL,  4LL,  &v144);
                  break;
                }
              }

              else
              {
LABEL_62:
                if (!v17) {
                  goto LABEL_89;
                }
              }

              uint64_t v53 = operator new(0x28uLL);
              *uint64_t v53 = &off_474650;
              v53[1] = a1;
              uint64_t v54 = *(void *)v10;
              *((_DWORD *)v53 + 6) = *(_DWORD *)(v10 + 8);
              v53[2] = v54;
              int v55 = LODWORD(outData);
              *((float *)v53 + 7) = *(float *)&v144;
              *((_DWORD *)v53 + 8) = v55;
              *((_BYTE *)v53 + 36) = v18;
              uint64_t v56 = operator new(0x18uLL);
              uint64_t v57 = *(void **)(a5 + 8);
              void *v56 = a5;
              v56[1] = v57;
              v56[2] = v53;
              *uint64_t v57 = v56;
              uint64_t v58 = *(void *)(a5 + 16) + 1LL;
              *(void *)(a5 + 8) = v56;
              *(void *)(a5 + 16) = v58;
              uint64_t result = sub_1B9A90((uint64_t)v53);
              break;
            case 7:
              UInt32 v144 = sub_2DCA7C((int *)(v10 + 16));
              uint64_t v19 = (os_log_t *)sub_138E8(19);
              uint64_t v20 = *v19;
              if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_DEFAULT))
              {
                sub_613AC((uint64_t)__p, (unsigned int *)v10);
                int v21 = v149;
                unint64_t v22 = (void **)__p[0];
                sub_23FE8((uint64_t)v146, lock);
                int v23 = __p;
                if (v21 < 0) {
                  int v23 = v22;
                }
                uint64_t v24 = v146;
                if (v147 < 0) {
                  uint64_t v24 = (void **)v146[0];
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                *(void *)uint64_t v151 = "RoutingHandlerUtilities_Aspen.cpp";
                *(_WORD *)&v151[8] = 1024;
                *(_DWORD *)&v151[10] = 270;
                *(_WORD *)&v151[14] = 2080;
                *(void *)&v151[16] = v23;
                __int16 v152 = 2080;
                *(void *)__int16 v153 = v24;
                _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Creating remote property %s on device %s",  buf,  0x26u);
                if (v147 < 0) {
                  operator delete(v146[0]);
                }
                if (v149 < 0) {
                  operator delete(__p[0]);
                }
              }

              LODWORD(outData) = 0;
              ioDataSize[0] = 4;
              AudioObjectID v25 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 120LL))(a1);
              uint64_t result = AudioObjectGetPropertyData( v25,  (const AudioObjectPropertyAddress *)v10,  0,  0LL,  ioDataSize,  &outData);
              int v26 = result;
              if ((_DWORD)result)
              {
                uint64_t v105 = (os_log_t *)sub_138E8(13);
                unint64_t v106 = *v105;
                if (*v105 && os_log_type_enabled(*v105, OS_LOG_TYPE_ERROR))
                {
                  sub_613AC((uint64_t)__p, (unsigned int *)v10);
                  int v107 = v149;
                  float v108 = (void **)__p[0];
                  sub_23FE8((uint64_t)v146, lock);
                  unint64_t v109 = __p;
                  if (v107 < 0) {
                    unint64_t v109 = v108;
                  }
                  if (v147 >= 0) {
                    unint64_t v110 = v146;
                  }
                  else {
                    unint64_t v110 = (void **)v146[0];
                  }
                  *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                  *(void *)uint64_t v151 = "RoutingHandlerUtilities_Aspen.cpp";
                  *(_WORD *)&v151[8] = 1024;
                  *(_DWORD *)&v151[10] = 276;
                  *(_WORD *)&v151[14] = 2080;
                  *(void *)&v151[16] = v109;
                  __int16 v152 = 2080;
                  *(void *)__int16 v153 = v110;
                  _os_log_impl( &dword_0,  v106,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Attempt to get property %s for device %s failed.",  buf,  0x26u);
                  if (v147 < 0) {
                    operator delete(v146[0]);
                  }
                  if (v149 < 0) {
                    operator delete(__p[0]);
                  }
                }

                uint64_t v111 = __cxa_allocate_exception(0x10uLL);
                *(void *)uint64_t v111 = &off_4865A0;
                v111[2] = v26;
              }

              if (ioDataSize[0] != 4)
              {
                char v119 = (os_log_t *)sub_138E8(13);
                unint64_t v120 = *v119;
                if (*v119 && os_log_type_enabled(*v119, OS_LOG_TYPE_ERROR))
                {
                  sub_613AC((uint64_t)__p, (unsigned int *)v10);
                  int v121 = v149;
                  unint64_t v122 = (void **)__p[0];
                  sub_23FE8((uint64_t)v146, lock);
                  unint64_t v123 = __p;
                  if (v121 < 0) {
                    unint64_t v123 = v122;
                  }
                  if (v147 >= 0) {
                    unsigned int v124 = v146;
                  }
                  else {
                    unsigned int v124 = (void **)v146[0];
                  }
                  *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
                  *(void *)uint64_t v151 = "RoutingHandlerUtilities_Aspen.cpp";
                  *(_WORD *)&v151[8] = 1024;
                  *(_DWORD *)&v151[10] = 277;
                  *(_WORD *)&v151[14] = 2080;
                  *(void *)&v151[16] = v123;
                  __int16 v152 = 2080;
                  *(void *)__int16 v153 = v124;
                  *(_WORD *)&v153[8] = 1024;
                  LODWORD(v154) = ioDataSize[0];
                  WORD2(v154) = 2048;
                  *(void *)((char *)&v154 + 6) = 4LL;
                  _os_log_impl( &dword_0,  v120,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Property %s for device %s failed returned size %u (expected %lu).",  buf,  0x36u);
                  if (v147 < 0) {
                    operator delete(v146[0]);
                  }
                  if (v149 < 0) {
                    operator delete(__p[0]);
                  }
                }

                BOOL v125 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v125, "Property %s for device %s failed returned size %u (expected %lu).");
              }

              if (LODWORD(outData) == v144) {
                break;
              }
              unsigned int v27 = (os_log_t *)sub_138E8(19);
              float v28 = *v27;
              if (!*v27 || !os_log_type_enabled(*v27, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_38;
              }
              sub_613AC((uint64_t)__p, (unsigned int *)v10);
              int v29 = v149;
              uint32_t v30 = (void **)__p[0];
              sub_23FE8((uint64_t)v146, lock);
              int v31 = __p;
              if (v29 < 0) {
                int v31 = v30;
              }
              unint64_t v32 = v146;
              if (v147 < 0) {
                unint64_t v32 = (void **)v146[0];
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
              *(void *)uint64_t v151 = "RoutingHandlerUtilities_Aspen.cpp";
              *(_WORD *)&v151[8] = 1024;
              *(_DWORD *)&v151[10] = 281;
              *(_WORD *)&v151[14] = 2080;
              *(void *)&v151[16] = v31;
              __int16 v152 = 2080;
              *(void *)__int16 v153 = v32;
              _os_log_impl(&dword_0, v28, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting property %s on device %s", buf, 0x26u);
              if (v147 < 0) {
                operator delete(v146[0]);
              }
              if (v149 < 0)
              {
                operator delete(__p[0]);
                if (!v17)
                {
LABEL_99:
                  uint64_t v79 = *(void *)&a1->_os_unfair_lock_opaque;
                  if (v18)
                  {
                    AudioObjectID v85 = (*(uint64_t (**)(os_unfair_lock_s *))(v79 + 120))(a1);
                    uint64_t result = sub_1B9D48(v85, v10, &v144);
                    int v86 = result;
                    if ((_DWORD)result)
                    {
                      unint64_t v139 = (os_log_t *)sub_138E8(13);
                      char v140 = *v139;
                      if (*v139)
                      {
                        if (os_log_type_enabled(*v139, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                          *(void *)uint64_t v151 = "RoutingHandlerUtilities_Aspen.cpp";
                          *(_WORD *)&v151[8] = 1024;
                          *(_DWORD *)&v151[10] = 293;
                          _os_log_impl( &dword_0,  v140,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (result) [error result is an error]: Error setting device property synchronously",  buf,  0x12u);
                        }
                      }

                      uint64_t v141 = __cxa_allocate_exception(0x10uLL);
                      *(void *)uint64_t v141 = &off_4865A0;
                      v141[2] = v86;
                    }

                    break;
                  }

                  goto LABEL_102;
                }
              }

              else
              {
LABEL_38:
                if (!v17) {
                  goto LABEL_99;
                }
              }

              uint64_t v33 = operator new(0x28uLL);
              *uint64_t v33 = &off_474618;
              v33[1] = a1;
              int v34 = *(_DWORD *)(v10 + 8);
              v33[2] = *(void *)v10;
              UInt32 v35 = v144;
              *((_DWORD *)v33 + 6) = v34;
              *((_DWORD *)v33 + 7) = v35;
              *((_DWORD *)v33 + 8) = LODWORD(outData);
              *((_BYTE *)v33 + 36) = v18;
              uint64_t v36 = operator new(0x18uLL);
              unint64_t v37 = *(void **)(a5 + 8);
              void *v36 = a5;
              v36[1] = v37;
              v36[2] = v33;
              *unint64_t v37 = v36;
              uint64_t v38 = *(void *)(a5 + 16) + 1LL;
              *(void *)(a5 + 8) = v36;
              *(void *)(a5 + 16) = v38;
              uint64_t result = sub_1BA874((uint64_t)v33);
              break;
            default:
              float v87 = (os_log_t *)sub_138E8(13);
              unint64_t v88 = *v87;
              if (*v87 && os_log_type_enabled(*v87, OS_LOG_TYPE_ERROR))
              {
                int v89 = *(_DWORD *)(v10 + 16);
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                *(void *)uint64_t v151 = "RoutingHandlerUtilities_Aspen.cpp";
                *(_WORD *)&v151[8] = 1024;
                *(_DWORD *)&v151[10] = 1077;
                *(_WORD *)&v151[14] = 1024;
                *(_DWORD *)&v151[16] = v89;
                _os_log_impl( &dword_0,  v88,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Illegal remote property VariType: %d",  buf,  0x18u);
              }

              uint64_t v90 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v90, "Illegal remote property VariType: %d");
          }

          v10 += 40LL;
        }

        while (v10 != v11);
      }
    }
  }

  return result;
}

      LODWORD(__p) = 1987013732;
      *(void *)((char *)&__p + 4) = *(void *)(a1 + 128);
      int v61 = (*(uint64_t (**)(uint64_t, __int128 *))(*(void *)v46 + 16LL))(v46, &__p);
      sub_5CABC(v61, a5, a6);
      return;
    }

    if (v13 == 1668705648)
    {
      sub_1B3280(buf, *(void *)(a1 + 96), COERCE_DOUBLE(1735159650LL));
      if (buf[8])
      {
        if (!*(void *)buf)
        {
          float v108 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v108, "Could not construct");
        }

        unsigned int v51 = CFArrayGetCount(*(CFArrayRef *)buf) != 0;
      }

      else
      {
        unint64_t v62 = *(void *)(a1 + 96);
        *(void *)&std::string __p = 0x676C6F627472616ELL;
        DWORD2(__p) = 0;
        unint64_t v63 = sub_5C2F8(v62);
        *((void *)&v65 + 1) = v64;
        *(void *)&AudioObjectID v65 = v63;
        unsigned int v51 = ((v65 >> 32) & 0xFF00000000LL) != 0 && HIDWORD(v63) == 1651274862;
      }

      sub_8D840((uint64_t)buf);
      sub_5CABC(v51, a5, a6);
      return;
    }

    if (v13 == 1684157046)
    {
      float v28 = *(std::__shared_weak_count **)(a1 + 288);
      if (!v28 || (int v29 = std::__shared_weak_count::lock(v28), (*((void *)&__p + 1) = v29) == 0LL))
      {
LABEL_156:
        int v93 = sub_757A4(a1 + 216, *a6);
        sub_68168(a5, a6, v93);
        return;
      }

      uint64_t v20 = v29;
      uint32_t v30 = *(uint64_t **)(a1 + 280);
      *(void *)&std::string __p = v30;
      if (!v30)
      {
LABEL_152:
        int v91 = (unint64_t *)&v20->__shared_owners_;
        do
          __int128 v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }

        goto LABEL_156;
      }

      int v31 = (*(uint64_t (**)(uint64_t *))(*v30 + 224))(v30);
      unint64_t v32 = *v30;
      if (v31)
      {
        (*(void (**)(uint64_t *))(v32 + 240))(v30);
        goto LABEL_152;
      }

      int v86 = (os_log_t *)sub_138E8(18);
      float v87 = *v86;
      if (*v86 && os_log_type_enabled(*v86, OS_LOG_TYPE_INFO))
      {
        unint64_t v88 = *a6;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
        unint64_t v118 = 1024;
        char v119 = 458;
        unint64_t v120 = 2048;
        int v121 = v88;
        _os_log_impl(&dword_0, v87, OS_LOG_TYPE_INFO, "%25s:%-5d Request to convert %f dB to scalar.", buf, 0x1Cu);
      }

      int v89 = (*(float (**)(uint64_t *, float))(*v30 + 280))(v30, *a6);
      sub_68168(a5, a6, v89);
      uint64_t v90 = (unint64_t *)&v20->__shared_owners_;
      do
        unsigned int v27 = __ldaxr(v90);
      while (__stlxr(v27 - 1, v90));
LABEL_150:
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }

      return;
    }

    goto LABEL_95;
  }

  if (v13 > 1836414052)
  {
    if (v13 != 1836414053)
    {
      if (v13 != 1918987632)
      {
        if (v13 == 1919774835)
        {
          std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 400));
          __int128 v14 = (os_log_t *)sub_138E8(41);
          int v15 = *v14;
          if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_DEBUG))
          {
            sub_2CA1C(&__p, 1919774835LL);
            if (v116 >= 0) {
              int v16 = COERCE_DOUBLE(&__p);
            }
            else {
              int v16 = *(double *)&__p;
            }
            if (*(_BYTE *)(a1 + 468)) {
              int v17 = "";
            }
            else {
              int v17 = "in";
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
            unint64_t v118 = 1024;
            char v119 = 591;
            unint64_t v120 = 2080;
            int v121 = v16;
            unint64_t v122 = 2080;
            *(void *)unint64_t v123 = v17;
            _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d OutputVolumeControl_HAL_Common::GetPropertyData() - %s volume ramp is %sactive.",  buf,  0x26u);
            if (v116 < 0) {
              operator delete((void *)__p);
            }
          }

          sub_5CABC(*(unsigned __int8 *)(a1 + 468), a5, a6);
          std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 400));
          return;
        }

        goto LABEL_95;
      }

void sub_1B8004( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B8080(AudioObjectID a1, uint64_t a2, double *a3)
{
  uint64_t v6 = sub_138E8(13);
  if ((*(_BYTE *)(v6 + 8) & 1) != 0)
  {
    uint64_t v7 = *(os_log_s **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        __p.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)__p.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_613AC((uint64_t)&v70, (unsigned int *)&__p);
        __int16 v8 = v70.__m_.__opaque[15] >= 0 ? &v70 : (std::mutex *)v70.__m_.__sig;
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        __int16 v60 = 1024;
        int v61 = 166;
        __int16 v62 = 2080;
        *(void *)unint64_t v63 = v8;
        *(_WORD *)&v63[8] = 1024;
        *(_DWORD *)&v63[10] = a1;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to synchronize the property %s on id %u.",  (uint8_t *)&buf,  0x22u);
        if (v70.__m_.__opaque[15] < 0) {
          operator delete((void *)v70.__m_.__sig);
        }
      }
    }
  }

  AudioObjectID v54 = a1;
  uint64_t v55 = *(void *)a2;
  int v56 = *(_DWORD *)(a2 + 8);
  int v57 = 0;
  uint64_t v58 = 0LL;
  double v9 = COERCE_DOUBLE(sub_1B89E8((uint64_t)&v54));
  if (!v10 && *a3 == v9)
  {
    uint64_t v21 = sub_138E8(13);
    if ((*(_BYTE *)(v21 + 8) & 1) == 0) {
      return 0LL;
    }
    unint64_t v22 = *(os_log_s **)v21;
    if (!*(void *)v21 || !os_log_type_enabled(*(os_log_t *)v21, OS_LOG_TYPE_DEBUG)) {
      return 0LL;
    }
    buf.AudioObjectPropertySelector mSelector = 136315650;
    *(void *)&buf.mScope = "HALPropertySynchronizer.h";
    __int16 v60 = 1024;
    int v61 = 191;
    __int16 v62 = 1024;
    *(_DWORD *)unint64_t v63 = a1;
    goto LABEL_71;
  }

  uint64_t v11 = sub_138E8(13);
  if ((*(_BYTE *)(v11 + 8) & 1) != 0)
  {
    uint64_t v12 = *(os_log_s **)v11;
    if (*(void *)v11)
    {
      if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
      {
        __p.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)__p.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_613AC((uint64_t)&v70, (unsigned int *)&__p);
        uint64_t v13 = v70.__m_.__opaque[15] >= 0 ? &v70 : (std::mutex *)v70.__m_.__sig;
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        __int16 v60 = 1024;
        int v61 = 199;
        __int16 v62 = 2080;
        *(void *)unint64_t v63 = v13;
        *(_WORD *)&v63[8] = 1024;
        *(_DWORD *)&v63[10] = a1;
        _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d About to call AudioObjectSetPropertyData to set property: %s on id %u.",  (uint8_t *)&buf,  0x22u);
        if (v70.__m_.__opaque[15] < 0) {
          operator delete((void *)v70.__m_.__sig);
        }
      }
    }
  }

  AudioObjectPropertyAddress buf = *(AudioObjectPropertyAddress *)a2;
  uint64_t v14 = AudioObjectSetPropertyData(a1, &buf, 0, 0LL, 8u, a3);
  if (!(_DWORD)v14)
  {
    double v23 = COERCE_DOUBLE(sub_1B89E8((uint64_t)&v54));
    if (!v24 && *a3 == v23)
    {
      uint64_t v38 = sub_138E8(13);
      if ((*(_BYTE *)(v38 + 8) & 1) == 0) {
        return 0LL;
      }
      unint64_t v22 = *(os_log_s **)v38;
      if (!*(void *)v38 || !os_log_type_enabled(*(os_log_t *)v38, OS_LOG_TYPE_DEBUG)) {
        return 0LL;
      }
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.mScope = "HALPropertySynchronizer.h";
      __int16 v60 = 1024;
      int v61 = 219;
      __int16 v62 = 1024;
      *(_DWORD *)unint64_t v63 = a1;
LABEL_71:
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.",  (uint8_t *)&buf,  0x18u);
      return 0LL;
    }

    memset(v70.__m_.__opaque, 0, sizeof(v70.__m_.__opaque));
    v70.__m_.__uint64_t sig = 850045863LL;
    memset(__p.__cv_.__opaque, 0, sizeof(__p.__cv_.__opaque));
    __p.__cv_.__uint64_t sig = 1018212795LL;
    char v53 = 0;
    sub_7D684(&inClientData, a1, (AudioObjectPropertyAddress *)a2, (uint64_t)&__p, (uint64_t)&v70, (uint64_t)&v53);
    for (uint64_t i = 2000LL; ; i += (std::chrono::system_clock::now().__d_.__rep_ - v29.__d_.__rep_) / -1000)
    {
      double v26 = COERCE_DOUBLE(sub_1B89E8((uint64_t)&v54));
      uint64_t v14 = v27;
      if ((_DWORD)v27) {
        goto LABEL_89;
      }
      double v28 = v26;
      if (*a3 == v26) {
        break;
      }
      if (i <= 0)
      {
        uint64_t v42 = (os_log_t *)sub_138E8(13);
        uint64_t v14 = 2003329396LL;
        uint64_t v43 = *v42;
        if (*v42 && os_log_type_enabled(*v42, OS_LOG_TYPE_ERROR))
        {
          uint64_t v47 = *(void *)a2;
          int v48 = *(_DWORD *)(a2 + 8);
          sub_613AC((uint64_t)&__lk, (unsigned int *)&v47);
          uint64_t v44 = v50 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
          BOOL v45 = *a3 == v28;
          buf.AudioObjectPropertySelector mSelector = 136316930;
          *(void *)&buf.mScope = "HALPropertySynchronizer.h";
          __int16 v60 = 1024;
          int v61 = 248;
          __int16 v62 = 2080;
          *(void *)unint64_t v63 = "set";
          *(_WORD *)&v63[8] = 2080;
          *(void *)&v63[10] = v44;
          *(_WORD *)&v63[18] = 2080;
          *(void *)&v63[20] = "set";
          *(_WORD *)&v63[28] = 1024;
          BOOL v64 = v45;
          __int16 v65 = 1024;
          int v66 = 0;
          __int16 v67 = 1024;
          AudioObjectID v68 = a1;
          _os_log_impl( &dword_0,  v43,  OS_LOG_TYPE_ERROR,  "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.",  (uint8_t *)&buf,  0x42u);
          if (v50 < 0) {
            operator delete(__lk.__m_);
          }
        }

void sub_1B8968( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, std::condition_variable *a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36)
{
}

uint64_t sub_1B89E8(uint64_t a1)
{
  BOOL v2 = (uint64_t *)(a1 + 4);
  *(void *)&buf.AudioObjectPropertySelector mSelector = *(void *)(a1 + 4);
  UInt32 v3 = *(_DWORD *)(a1 + 16);
  buf.mElement = *(_DWORD *)(a1 + 12);
  sub_9EA74((uint64_t)&v19, (AudioObjectID *)a1, &buf, v3, *(const void **)(a1 + 24));
  uint64_t v4 = v19;
  if (v19)
  {
    unsigned __int16 v5 = (os_log_t *)sub_138E8(13);
    uint64_t v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v17, v4);
        int v7 = v18;
        __int16 v8 = (void **)v17[0];
        uint64_t v13 = *v2;
        int v14 = *((_DWORD *)v2 + 2);
        sub_613AC((uint64_t)__p, (unsigned int *)&v13);
        double v9 = v17;
        if (v7 < 0) {
          double v9 = v8;
        }
        if (v16 >= 0) {
          int v10 = __p;
        }
        else {
          int v10 = (void **)__p[0];
        }
        AudioObjectID v11 = *(_DWORD *)a1;
        buf.AudioObjectPropertySelector mSelector = 136316418;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        __int16 v23 = 1024;
        int v24 = 176;
        __int16 v25 = 1024;
        int v26 = v4;
        __int16 v27 = 2080;
        double v28 = v9;
        __int16 v29 = 2080;
        uint64_t v30 = v10;
        __int16 v31 = 1024;
        AudioObjectID v32 = v11;
        _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) reading property data for property %s on id %u.",  (uint8_t *)&buf,  0x32u);
        if (v16 < 0) {
          operator delete(__p[0]);
        }
        if (v18 < 0) {
          operator delete(v17[0]);
        }
      }
    }
  }

  if (v21) {
    return v20;
  }
  else {
    return 0LL;
  }
}

void sub_1B8B90(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B8BB8(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, uint64_t))(*(void *)v3 + 48LL))( v3,  a1 + 16,  0LL,  0LL,  8LL,  a1 + 32);
  }
  AudioObjectID v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 120LL))(v3);
  uint64_t result = sub_1B8080(v4, a1 + 16, (double *)(a1 + 32));
  if ((_DWORD)result)
  {
    int v9 = result;
    uint64_t v6 = (os_log_t *)sub_138E8(13);
    int v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        AudioObjectID v11 = "RoutingHandlerAction_SetObjectProperty.h";
        __int16 v12 = 1024;
        int v13 = 151;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (result) [error result is an error]: Error setting device property synchronously",  buf,  0x12u);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = v9;
  }

  return result;
}

uint64_t sub_1B8D14(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, uint64_t))(*(void *)v3 + 48LL))( v3,  a1 + 16,  0LL,  0LL,  8LL,  a1 + 40);
  }
  AudioObjectID v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 120LL))(v3);
  uint64_t result = sub_1B8080(v4, a1 + 16, (double *)(a1 + 40));
  if ((_DWORD)result)
  {
    int v9 = result;
    uint64_t v6 = (os_log_t *)sub_138E8(13);
    int v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        AudioObjectID v11 = "RoutingHandlerAction_SetObjectProperty.h";
        __int16 v12 = 1024;
        int v13 = 165;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (result) [error result is an error]: Error setting device property synchronously",  buf,  0x12u);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = v9;
  }

  return result;
}

uint64_t sub_1B8E70(AudioObjectID a1, uint64_t a2, float *a3)
{
  uint64_t v6 = sub_138E8(13);
  if ((*(_BYTE *)(v6 + 8) & 1) != 0)
  {
    int v7 = *(os_log_s **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        __p.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)__p.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_613AC((uint64_t)&v67, (unsigned int *)&__p);
        __int16 v8 = v67.__m_.__opaque[15] >= 0 ? &v67 : (std::mutex *)v67.__m_.__sig;
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        __int16 v57 = 1024;
        int v58 = 166;
        __int16 v59 = 2080;
        *(void *)__int16 v60 = v8;
        *(_WORD *)&v60[8] = 1024;
        *(_DWORD *)&v60[10] = a1;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to synchronize the property %s on id %u.",  (uint8_t *)&buf,  0x22u);
        if (v67.__m_.__opaque[15] < 0) {
          operator delete((void *)v67.__m_.__sig);
        }
      }
    }
  }

  AudioObjectID v51 = a1;
  uint64_t v52 = *(void *)a2;
  int v53 = *(_DWORD *)(a2 + 8);
  int v54 = 0;
  uint64_t v55 = 0LL;
  unint64_t v9 = sub_1B97E0((uint64_t)&v51);
  if (!HIDWORD(v9) && *a3 == *(float *)&v9)
  {
    uint64_t v10 = sub_138E8(13);
    if ((*(_BYTE *)(v10 + 8) & 1) == 0) {
      return 0LL;
    }
    AudioObjectID v11 = *(os_log_s **)v10;
    if (!*(void *)v10 || !os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG)) {
      return 0LL;
    }
    buf.AudioObjectPropertySelector mSelector = 136315650;
    *(void *)&buf.mScope = "HALPropertySynchronizer.h";
    __int16 v57 = 1024;
    int v58 = 191;
    __int16 v59 = 1024;
    *(_DWORD *)__int16 v60 = a1;
LABEL_41:
    _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a no tification on id %u.",  (uint8_t *)&buf,  0x18u);
    return 0LL;
  }

  uint64_t v12 = sub_138E8(13);
  if ((*(_BYTE *)(v12 + 8) & 1) != 0)
  {
    int v13 = *(os_log_s **)v12;
    if (*(void *)v12)
    {
      if (os_log_type_enabled(*(os_log_t *)v12, OS_LOG_TYPE_DEBUG))
      {
        __p.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)__p.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_613AC((uint64_t)&v67, (unsigned int *)&__p);
        int v14 = v67.__m_.__opaque[15] >= 0 ? &v67 : (std::mutex *)v67.__m_.__sig;
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        __int16 v57 = 1024;
        int v58 = 199;
        __int16 v59 = 2080;
        *(void *)__int16 v60 = v14;
        *(_WORD *)&v60[8] = 1024;
        *(_DWORD *)&v60[10] = a1;
        _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d About to call AudioObjectSetPropertyData to set property: %s on id %u.",  (uint8_t *)&buf,  0x22u);
        if (v67.__m_.__opaque[15] < 0) {
          operator delete((void *)v67.__m_.__sig);
        }
      }
    }
  }

  AudioObjectPropertyAddress buf = *(AudioObjectPropertyAddress *)a2;
  uint64_t v15 = AudioObjectSetPropertyData(a1, &buf, 0, 0LL, 4u, a3);
  if (!(_DWORD)v15)
  {
    unint64_t v22 = sub_1B97E0((uint64_t)&v51);
    if (!HIDWORD(v22) && *a3 == *(float *)&v22)
    {
      uint64_t v23 = sub_138E8(13);
      if ((*(_BYTE *)(v23 + 8) & 1) == 0) {
        return 0LL;
      }
      AudioObjectID v11 = *(os_log_s **)v23;
      if (!*(void *)v23 || !os_log_type_enabled(*(os_log_t *)v23, OS_LOG_TYPE_DEBUG)) {
        return 0LL;
      }
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.mScope = "HALPropertySynchronizer.h";
      __int16 v57 = 1024;
      int v58 = 219;
      __int16 v59 = 1024;
      *(_DWORD *)__int16 v60 = a1;
      goto LABEL_41;
    }

    memset(v67.__m_.__opaque, 0, sizeof(v67.__m_.__opaque));
    v67.__m_.__uint64_t sig = 850045863LL;
    memset(__p.__cv_.__opaque, 0, sizeof(__p.__cv_.__opaque));
    __p.__cv_.__uint64_t sig = 1018212795LL;
    char v50 = 0;
    sub_7D684(&inClientData, a1, (AudioObjectPropertyAddress *)a2, (uint64_t)&__p, (uint64_t)&v67, (uint64_t)&v50);
    for (uint64_t i = 2000LL; ; i += (std::chrono::system_clock::now().__d_.__rep_ - v27.__d_.__rep_) / -1000)
    {
      unint64_t v25 = sub_1B97E0((uint64_t)&v51);
      uint64_t v15 = HIDWORD(v25);
      if (HIDWORD(v25)) {
        goto LABEL_89;
      }
      float v26 = *(float *)&v25;
      if (i <= 0)
      {
        uint64_t v39 = (os_log_t *)sub_138E8(13);
        uint64_t v15 = 2003329396LL;
        uint64_t v40 = *v39;
        if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
        {
          uint64_t v44 = *(void *)a2;
          int v45 = *(_DWORD *)(a2 + 8);
          sub_613AC((uint64_t)&__lk, (unsigned int *)&v44);
          int v41 = v47 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
          BOOL v42 = *a3 == v26;
          buf.AudioObjectPropertySelector mSelector = 136316930;
          *(void *)&buf.mScope = "HALPropertySynchronizer.h";
          __int16 v57 = 1024;
          int v58 = 248;
          __int16 v59 = 2080;
          *(void *)__int16 v60 = "set";
          *(_WORD *)&v60[8] = 2080;
          *(void *)&v60[10] = v41;
          *(_WORD *)&v60[18] = 2080;
          *(void *)&v60[20] = "set";
          *(_WORD *)&v60[28] = 1024;
          BOOL v61 = v42;
          __int16 v62 = 1024;
          int v63 = 0;
          __int16 v64 = 1024;
          AudioObjectID v65 = a1;
          _os_log_impl( &dword_0,  v40,  OS_LOG_TYPE_ERROR,  "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.",  (uint8_t *)&buf,  0x42u);
          if (v47 < 0) {
            operator delete(__lk.__m_);
          }
        }

void sub_1B9760( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, std::condition_variable *a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36)
{
}

unint64_t sub_1B97E0(uint64_t a1)
{
  int v2 = (uint64_t *)(a1 + 4);
  *(void *)&buf.AudioObjectPropertySelector mSelector = *(void *)(a1 + 4);
  UInt32 v3 = *(_DWORD *)(a1 + 16);
  buf.mElement = *(_DWORD *)(a1 + 12);
  unint64_t v4 = sub_1B99A8((AudioObjectID *)a1, &buf, v3, *(const void **)(a1 + 24));
  char v6 = v5;
  if ((_DWORD)v4)
  {
    int v7 = (os_log_t *)sub_138E8(13);
    __int16 v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v20, v4);
        int v9 = v21;
        uint64_t v10 = (void **)v20[0];
        uint64_t v16 = *v2;
        int v17 = *((_DWORD *)v2 + 2);
        sub_613AC((uint64_t)__p, (unsigned int *)&v16);
        AudioObjectID v11 = v20;
        if (v9 < 0) {
          AudioObjectID v11 = v10;
        }
        if (v19 >= 0) {
          uint64_t v12 = __p;
        }
        else {
          uint64_t v12 = (void **)__p[0];
        }
        AudioObjectID v13 = *(_DWORD *)a1;
        buf.AudioObjectPropertySelector mSelector = 136316418;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        __int16 v23 = 1024;
        int v24 = 176;
        __int16 v25 = 1024;
        int v26 = v4;
        __int16 v27 = 2080;
        uint64_t v28 = v11;
        __int16 v29 = 2080;
        std::chrono::steady_clock::time_point v30 = v12;
        __int16 v31 = 1024;
        AudioObjectID v32 = v13;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) reading property data for property %s on id %u.",  (uint8_t *)&buf,  0x32u);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
        if (v21 < 0) {
          operator delete(v20[0]);
        }
      }
    }
  }

  unint64_t v14 = HIDWORD(v4);
  if (!v6) {
    unint64_t v14 = 0LL;
  }
  return v14 | (v4 << 32);
}

void sub_1B9988(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1B99A8( AudioObjectID *a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  if (AudioObjectHasProperty(*a1, a2))
  {
    ioDataSize[0] = 2003329396;
    *(void *)&ioDataSize[1] = 0LL;
    unsigned int PropertyData = 2003329396;
    uint64_t v9 = 0LL;
    ioDataSize[0] = sub_37408(*a1, a2, a3, a4);
    if (ioDataSize[0])
    {
      unsigned int PropertyData = AudioObjectGetPropertyData(*a1, a2, a3, a4, ioDataSize, outData);
      if (PropertyData) {
        uint64_t v9 = 0LL;
      }
      else {
        uint64_t v9 = outData[0];
      }
    }
  }

  else
  {
    uint64_t v9 = 0LL;
    unsigned int PropertyData = 2003332927;
  }

  return PropertyData | (unint64_t)(v9 << 32);
}

uint64_t sub_1B9A90(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 36);
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, uint64_t))(*(void *)v3 + 48LL))( v3,  a1 + 16,  0LL,  0LL,  4LL,  a1 + 28);
  }
  AudioObjectID v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 120LL))(v3);
  uint64_t result = sub_1B8E70(v4, a1 + 16, (float *)(a1 + 28));
  if ((_DWORD)result)
  {
    int v9 = result;
    char v6 = (os_log_t *)sub_138E8(13);
    int v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        AudioObjectID v11 = "RoutingHandlerAction_SetObjectProperty.h";
        __int16 v12 = 1024;
        int v13 = 151;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (result) [error result is an error]: Error setting device property synchronously",  buf,  0x12u);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = v9;
  }

  return result;
}

uint64_t sub_1B9BEC(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 36);
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, uint64_t))(*(void *)v3 + 48LL))( v3,  a1 + 16,  0LL,  0LL,  4LL,  a1 + 32);
  }
  AudioObjectID v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 120LL))(v3);
  uint64_t result = sub_1B8E70(v4, a1 + 16, (float *)(a1 + 32));
  if ((_DWORD)result)
  {
    int v9 = result;
    char v6 = (os_log_t *)sub_138E8(13);
    int v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        AudioObjectID v11 = "RoutingHandlerAction_SetObjectProperty.h";
        __int16 v12 = 1024;
        int v13 = 165;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (result) [error result is an error]: Error setting device property synchronously",  buf,  0x12u);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = v9;
  }

  return result;
}

uint64_t sub_1B9D48(AudioObjectID a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6 = sub_138E8(13);
  if ((*(_BYTE *)(v6 + 8) & 1) != 0)
  {
    int v7 = *(os_log_s **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        __p.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)__p.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_613AC((uint64_t)&v69, (unsigned int *)&__p);
        __int16 v8 = v69.__m_.__opaque[15] >= 0 ? &v69 : (std::mutex *)v69.__m_.__sig;
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        __int16 v59 = 1024;
        int v60 = 166;
        __int16 v61 = 2080;
        *(void *)__int16 v62 = v8;
        *(_WORD *)&v62[8] = 1024;
        *(_DWORD *)&v62[10] = a1;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to synchronize the property %s on id %u.",  (uint8_t *)&buf,  0x22u);
        if (v69.__m_.__opaque[15] < 0) {
          operator delete((void *)v69.__m_.__sig);
        }
      }
    }
  }

  AudioObjectID v53 = a1;
  uint64_t v54 = *(void *)a2;
  int v55 = *(_DWORD *)(a2 + 8);
  int v56 = 0;
  uint64_t v57 = 0LL;
  unint64_t v9 = sub_1BA6A4((uint64_t)&v53);
  if (HIDWORD(v9)) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = *a3 == (_DWORD)v9;
  }
  int v11 = v10;
  uint64_t v12 = sub_138E8(13);
  uint64_t v13 = *(void *)(v12 + 8);
  if (v11)
  {
    if ((v13 & 1) == 0) {
      return 0LL;
    }
    unint64_t v14 = *(os_log_s **)v12;
    if (!*(void *)v12 || !os_log_type_enabled(*(os_log_t *)v12, OS_LOG_TYPE_DEBUG)) {
      return 0LL;
    }
    buf.AudioObjectPropertySelector mSelector = 136315650;
    *(void *)&buf.mScope = "HALPropertySynchronizer.h";
    __int16 v59 = 1024;
    int v60 = 191;
    __int16 v61 = 1024;
    *(_DWORD *)__int16 v62 = a1;
LABEL_20:
    _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a no tification on id %u.",  (uint8_t *)&buf,  0x18u);
    return 0LL;
  }

  if ((v13 & 1) != 0)
  {
    uint64_t v15 = *(os_log_s **)v12;
    if (*(void *)v12)
    {
      if (os_log_type_enabled(*(os_log_t *)v12, OS_LOG_TYPE_DEBUG))
      {
        __p.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)__p.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_613AC((uint64_t)&v69, (unsigned int *)&__p);
        uint64_t v16 = v69.__m_.__opaque[15] >= 0 ? &v69 : (std::mutex *)v69.__m_.__sig;
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        __int16 v59 = 1024;
        int v60 = 199;
        __int16 v61 = 2080;
        *(void *)__int16 v62 = v16;
        *(_WORD *)&v62[8] = 1024;
        *(_DWORD *)&v62[10] = a1;
        _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d About to call AudioObjectSetPropertyData to set property: %s on id %u.",  (uint8_t *)&buf,  0x22u);
        if (v69.__m_.__opaque[15] < 0) {
          operator delete((void *)v69.__m_.__sig);
        }
      }
    }
  }

  AudioObjectPropertyAddress buf = *(AudioObjectPropertyAddress *)a2;
  uint64_t v17 = AudioObjectSetPropertyData(a1, &buf, 0, 0LL, 4u, a3);
  if (!(_DWORD)v17)
  {
    unint64_t v24 = sub_1BA6A4((uint64_t)&v53);
    if (!HIDWORD(v24) && *a3 == (_DWORD)v24)
    {
      uint64_t v25 = sub_138E8(13);
      if ((*(_BYTE *)(v25 + 8) & 1) == 0) {
        return 0LL;
      }
      unint64_t v14 = *(os_log_s **)v25;
      if (!*(void *)v25 || !os_log_type_enabled(*(os_log_t *)v25, OS_LOG_TYPE_DEBUG)) {
        return 0LL;
      }
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.mScope = "HALPropertySynchronizer.h";
      __int16 v59 = 1024;
      int v60 = 219;
      __int16 v61 = 1024;
      *(_DWORD *)__int16 v62 = a1;
      goto LABEL_20;
    }

    memset(v69.__m_.__opaque, 0, sizeof(v69.__m_.__opaque));
    v69.__m_.__uint64_t sig = 850045863LL;
    memset(__p.__cv_.__opaque, 0, sizeof(__p.__cv_.__opaque));
    __p.__cv_.__uint64_t sig = 1018212795LL;
    char v52 = 0;
    sub_7D684(&inClientData, a1, (AudioObjectPropertyAddress *)a2, (uint64_t)&__p, (uint64_t)&v69, (uint64_t)&v52);
    for (uint64_t i = 2000LL; ; i += (std::chrono::system_clock::now().__d_.__rep_ - v30.__d_.__rep_) / -1000)
    {
      unint64_t v28 = sub_1BA6A4((uint64_t)&v53);
      int v29 = v28;
      uint64_t v17 = HIDWORD(v28);
      if (HIDWORD(v28)) {
        goto LABEL_95;
      }
      if (*a3 == (_DWORD)v28) {
        break;
      }
      if (i <= 0)
      {
        BOOL v42 = (os_log_t *)sub_138E8(13);
        uint64_t v17 = 2003329396LL;
        uint64_t v43 = *v42;
        if (*v42 && os_log_type_enabled(*v42, OS_LOG_TYPE_ERROR))
        {
          uint64_t v46 = *(void *)a2;
          int v47 = *(_DWORD *)(a2 + 8);
          sub_613AC((uint64_t)&__lk, (unsigned int *)&v46);
          uint64_t v44 = v49 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
          BOOL v45 = *a3 == v29;
          buf.AudioObjectPropertySelector mSelector = 136316930;
          *(void *)&buf.mScope = "HALPropertySynchronizer.h";
          __int16 v59 = 1024;
          int v60 = 248;
          __int16 v61 = 2080;
          *(void *)__int16 v62 = "set";
          *(_WORD *)&v62[8] = 2080;
          *(void *)&v62[10] = v44;
          *(_WORD *)&v62[18] = 2080;
          *(void *)&v62[20] = "set";
          *(_WORD *)&v62[28] = 1024;
          BOOL v63 = v45;
          __int16 v64 = 1024;
          int v65 = 0;
          __int16 v66 = 1024;
          AudioObjectID v67 = a1;
          _os_log_impl( &dword_0,  v43,  OS_LOG_TYPE_ERROR,  "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.",  (uint8_t *)&buf,  0x42u);
          if (v49 < 0) {
            operator delete(__lk.__m_);
          }
        }

void sub_1BA624( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, std::condition_variable *a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36)
{
}

unint64_t sub_1BA6A4(uint64_t a1)
{
  int v2 = (uint64_t *)(a1 + 4);
  *(void *)&buf.AudioObjectPropertySelector mSelector = *(void *)(a1 + 4);
  UInt32 v3 = *(_DWORD *)(a1 + 16);
  buf.mElement = *(_DWORD *)(a1 + 12);
  unint64_t v4 = sub_36EF4((AudioObjectID *)a1, &buf, v3, *(const void **)(a1 + 24));
  char v6 = v5;
  if ((_DWORD)v4)
  {
    int v7 = (os_log_t *)sub_138E8(13);
    __int16 v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v20, v4);
        int v9 = v21;
        BOOL v10 = (void **)v20[0];
        uint64_t v16 = *v2;
        int v17 = *((_DWORD *)v2 + 2);
        sub_613AC((uint64_t)__p, (unsigned int *)&v16);
        int v11 = v20;
        if (v9 < 0) {
          int v11 = v10;
        }
        if (v19 >= 0) {
          uint64_t v12 = __p;
        }
        else {
          uint64_t v12 = (void **)__p[0];
        }
        AudioObjectID v13 = *(_DWORD *)a1;
        buf.AudioObjectPropertySelector mSelector = 136316418;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        __int16 v23 = 1024;
        int v24 = 176;
        __int16 v25 = 1024;
        int v26 = v4;
        __int16 v27 = 2080;
        unint64_t v28 = v11;
        __int16 v29 = 2080;
        std::chrono::system_clock::time_point v30 = v12;
        __int16 v31 = 1024;
        AudioObjectID v32 = v13;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) reading property data for property %s on id %u.",  (uint8_t *)&buf,  0x32u);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
        if (v21 < 0) {
          operator delete(v20[0]);
        }
      }
    }
  }

  unint64_t v14 = HIDWORD(v4);
  if (!v6) {
    unint64_t v14 = 0LL;
  }
  return v14 | (v4 << 32);
}

void sub_1BA84C(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1BA874(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 36);
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, uint64_t))(*(void *)v3 + 48LL))( v3,  a1 + 16,  0LL,  0LL,  4LL,  a1 + 28);
  }
  AudioObjectID v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 120LL))(v3);
  uint64_t result = sub_1B9D48(v4, a1 + 16, (_DWORD *)(a1 + 28));
  if ((_DWORD)result)
  {
    int v9 = result;
    char v6 = (os_log_t *)sub_138E8(13);
    int v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        int v11 = "RoutingHandlerAction_SetObjectProperty.h";
        __int16 v12 = 1024;
        int v13 = 151;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (result) [error result is an error]: Error setting device property synchronously",  buf,  0x12u);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = v9;
  }

  return result;
}

uint64_t sub_1BA9D0(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 36);
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, uint64_t))(*(void *)v3 + 48LL))( v3,  a1 + 16,  0LL,  0LL,  4LL,  a1 + 32);
  }
  AudioObjectID v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 120LL))(v3);
  uint64_t result = sub_1B9D48(v4, a1 + 16, (_DWORD *)(a1 + 32));
  if ((_DWORD)result)
  {
    int v9 = result;
    char v6 = (os_log_t *)sub_138E8(13);
    int v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        int v11 = "RoutingHandlerAction_SetObjectProperty.h";
        __int16 v12 = 1024;
        int v13 = 165;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (result) [error result is an error]: Error setting device property synchronously",  buf,  0x12u);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = v9;
  }

  return result;
}

uint64_t sub_1BAB2C(int a1)
{
  uint64_t result = 1920364387LL;
  if (a1 <= 1986556787)
  {
    if (a1 <= 1768779618)
    {
      if (a1 == 1735222132) {
        return 1919117428LL;
      }
      if (a1 == 1751212899) {
        return 1919708275LL;
      }
      int v4 = 1768057203;
    }

    else
    {
      if (a1 > 1919776354)
      {
        if (a1 != 1919776355)
        {
          int v3 = 1986098036;
          goto LABEL_26;
        }

        return 1919117428LL;
      }

      if (a1 == 1768779619) {
        return 1919117428LL;
      }
      int v4 = 1768781411;
    }

uint64_t sub_1BAC98(int a1, uint64_t a2)
{
  int v3 = 2;
  if (a1 <= 1986884454)
  {
    if (a1 == 1836281204)
    {
      int v3 = 5;
      goto LABEL_10;
    }

    int v4 = 1986556788;
  }

  else
  {
    if (a1 == 1986884455 || a1 == 1987208039) {
      goto LABEL_10;
    }
    int v4 = 1987211117;
  }

  if (a1 != v4) {
    int v3 = 0;
  }
LABEL_10:
  uint64_t v9 = 0x676C6F6263646573LL;
  int v10 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a2 + 16LL))(a2, &v9);
  if ((_DWORD)result)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    __int16 v8 = 257;
    sub_13408((uint64_t)&Mutable, @"kind", v3);
    sub_13408((uint64_t)&Mutable, @"UsageCaseSampleRate", 0);
    CFMutableDictionaryRef v6 = Mutable;
    (*(void (**)(uint64_t, uint64_t *, void, void, uint64_t, CFMutableDictionaryRef *))(*(void *)a2 + 48LL))( a2,  &v9,  0LL,  0LL,  8LL,  &v6);
    return sub_13850((uint64_t)&Mutable);
  }

  return result;
}

void sub_1BADD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_1BADEC(int a1, uint64_t a2)
{
  if (!a2)
  {
    int v4 = (os_log_t *)sub_138E8(13);
    unsigned __int16 v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      __int16 v9 = 1024;
      int v10 = 1130;
      _os_log_impl(&dword_0, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  int v7 = a1 ^ 1;
  strcpy(buf, "fnw6tpni");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, _BYTE *))(*(void *)a2 + 16LL))(a2, buf);
  if ((_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, _BYTE *, void, void, uint64_t, int *))(*(void *)a2 + 48LL))( a2,  buf,  0LL,  0LL,  4LL,  &v7);
  }
  return result;
}

void sub_1BAF34(_Unwind_Exception *a1)
{
}

uint64_t sub_1BAF50(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1 == a1)
  {
LABEL_4:
    BOOL v3 = 0LL;
  }

  else
  {
    while (!sub_1D5354(*(void *)(v1 + 16)))
    {
      uint64_t v1 = *(void *)(v1 + 8);
      if (v1 == a1) {
        goto LABEL_4;
      }
    }

    sub_31821C();
    if (HIDWORD(qword_49DAB0) == 2)
    {
      BOOL v3 = 1LL;
    }

    else
    {
      sub_31821C();
      BOOL v3 = HIDWORD(qword_49DAB0) == 3;
    }
  }

  int v4 = sub_7531C();
  uint64_t v5 = 0x100000000LL;
  if (!v4) {
    uint64_t v5 = 0LL;
  }
  return v5 | v3;
}

uint64_t sub_1BAFD8(uint64_t a1, int a2, int a3)
{
  uint64_t v5 = sub_1BAF50(a1);
  int v6 = sub_7531C();
  uint64_t v7 = v5 & 0xFFFFFFFD;
  if (v6 && v7 == 1) {
    return v7 | v5 & 0x100000000LL;
  }
  if (a3)
  {
    if (v7 == 1)
    {
      if (a2 <= 1987077986)
      {
        if (a2 == 1768057203) {
          return v7 | v5 & 0x100000000LL;
        }
        int v8 = 1919776355;
      }

      else
      {
        if (a2 == 1987077987 || a2 == 1987081833) {
          return v7 | v5 & 0x100000000LL;
        }
        int v8 = 1987081839;
      }

      if (a2 != v8) {
        goto LABEL_17;
      }
      return v7 | v5 & 0x100000000LL;
    }

unint64_t sub_1BB104(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_105C24(a2, 1);
  if (v6)
  {
    unint64_t v7 = sub_1BB228(a1, v5, a3);
    unint64_t v8 = v7 & 0xFFFFFF0000000000LL;
    uint64_t v9 = v7 & 0xFF00000000LL;
    uint64_t v10 = v7 & 0xFFFFFF00;
    uint64_t v11 = v7;
  }

  else
  {
    __int16 v12 = (os_log_t *)sub_138E8(19);
    int v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = 136315650;
      uint64_t v16 = "RoutingHandlerUtilities_Aspen.cpp";
      __int16 v17 = 1024;
      int v18 = 1194;
      __int16 v19 = 1024;
      int v20 = 1;
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Missing ActivationParams for connection %u",  (uint8_t *)&v15,  0x18u);
    }

    uint64_t v9 = 0LL;
    uint64_t v11 = 0LL;
    unint64_t v8 = 0LL;
    uint64_t v10 = 0LL;
  }

  return v11 | v10 | v9 | v8;
}

unint64_t sub_1BB228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = (int *)(a1 + 16);
  if (!*(_BYTE *)(a1 + 20)) {
    char v6 = (int *)(a1 + 12);
  }
  int v7 = *v6;
  sub_B8CBC((uint64_t *)buf, (uint64_t *)(a2 + 16), "", 1205);
  sub_DB44C((uint64_t)v27, 1, v7, *(_DWORD *)(*(void *)buf + 264LL));
  unint64_t v8 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    uint64_t v9 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  unint64_t v11 = sub_2D7684(*(void *)(a2 + 56), (uint64_t)v27, a3);
  __int16 v12 = (unsigned int *)(a1 + 8);
  if (v13)
  {
    unint64_t v14 = (uint64_t *)v11;
    int v15 = (os_log_t *)sub_138E8(20);
    uint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_DEFAULT))
    {
      sub_2DB6FC(&__p, v12);
      __int16 v17 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1211;
      __int16 v31 = 1024;
      int v32 = a3;
      __int16 v33 = 2080;
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v34 = v17;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d PerVAD Volume description of scope %d present for route %s",  buf,  0x22u);
    }

    uint64_t v18 = *v14;
    unint64_t v19 = *v14 & 0xFFFFFF0000000000LL;
    uint64_t v20 = v18 & 0xFF00000000LL;
    uint64_t v21 = v18 & 0xFFFFFF00;
    uint64_t v22 = v18;
  }

  else
  {
    __int16 v23 = (os_log_t *)sub_138E8(20);
    unint64_t v19 = (unint64_t)*v23;
    if (*v23)
    {
      if (os_log_type_enabled(*v23, OS_LOG_TYPE_INFO))
      {
        sub_2DB6FC(&__p, v12);
        int v24 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1217;
        __int16 v31 = 1024;
        int v32 = a3;
        __int16 v33 = 2080;
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v34 = v24;
        _os_log_impl( &dword_0,  (os_log_t)v19,  OS_LOG_TYPE_INFO,  "%25s:%-5d Extended Volume description of scope %d absent for route %s",  buf,  0x22u);
      }

      uint64_t v20 = 0LL;
      uint64_t v22 = 0LL;
      unint64_t v19 = 0LL;
    }

    else
    {
      uint64_t v20 = 0LL;
      uint64_t v22 = 0LL;
    }

    uint64_t v21 = 0LL;
  }

  if (v28)
  {
    __int16 v29 = v28;
    operator delete(v28);
  }

  return v22 | v20 | v19 | v21;
}

void sub_1BB4E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BB524(unsigned int **a1, uint64_t *a2, os_unfair_lock_s *a3)
{
  if (!a3)
  {
    __int16 v33 = (os_log_t *)sub_138E8(13);
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v34 = *v33;
    if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1224;
      _os_log_impl(&dword_0, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (*a1 != a1[1])
  {
    uint64_t v5 = "";
    sub_B8CBC(&v41, a2, "", 1228);
    uint64_t v6 = sub_138E8(20);
    if ((*(_BYTE *)(v6 + 8) & 1) != 0)
    {
      int v7 = *(os_log_s **)v6;
      if (*(void *)v6)
      {
        if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
        {
          if ((*(_WORD *)(v41 + 184) & 1) == 0) {
            uint64_t v5 = "not ";
          }
          sub_8F640(&v40, *a1, a1[1]);
          int size = (char)v40.__r_.__value_.__s.__size_;
          std::string::size_type v9 = v40.__r_.__value_.__r.__words[0];
          sub_23FE8((uint64_t)__p, (os_unfair_lock_t)(v41 + 8));
          unint64_t v10 = &v40;
          if (size < 0) {
            unint64_t v10 = (std::string *)v9;
          }
          if (v39 >= 0) {
            unint64_t v11 = __p;
          }
          else {
            unint64_t v11 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1232;
          __int16 v44 = 2080;
          BOOL v45 = (std::string *)v5;
          __int16 v46 = 2080;
          int v47 = v10;
          __int16 v48 = 2080;
          char v49 = v11;
          _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Will %smark sub-ports %s active on port %s.",  buf,  0x30u);
          if (v39 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }

    uint64_t v12 = sub_138E8(20);
    if ((*(_BYTE *)(v12 + 8) & 1) != 0)
    {
      char v13 = *(os_log_s **)v12;
      if (*(void *)v12)
      {
        if (os_log_type_enabled(*(os_log_t *)v12, OS_LOG_TYPE_DEBUG))
        {
          unint64_t v14 = &v40;
          sub_8F640(&v40, *a1, a1[1]);
          if ((v40.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            unint64_t v14 = (std::string *)v40.__r_.__value_.__r.__words[0];
          }
          sub_23FE8((uint64_t)__p, (os_unfair_lock_t)(v41 + 8));
          int v15 = v39;
          uint64_t v16 = (void **)__p[0];
          sub_23FE8((uint64_t)v36, a3 + 2);
          __int16 v17 = __p;
          if (v15 < 0) {
            __int16 v17 = v16;
          }
          if (v37 >= 0) {
            uint64_t v18 = v36;
          }
          else {
            uint64_t v18 = (void **)v36[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1234;
          __int16 v44 = 2080;
          BOOL v45 = v14;
          __int16 v46 = 2080;
          int v47 = (std::string *)v17;
          __int16 v48 = 2080;
          char v49 = v18;
          _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Will activate sub-ports %s for port %s on device %s.",  buf,  0x30u);
          if (v37 < 0) {
            operator delete(v36[0]);
          }
          if (v39 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }

    unint64_t v19 = (char *)a1[1] - (char *)*a1;
    if (v19 < 5)
    {
      if (v19 != 4) {
        goto LABEL_58;
      }
      (*(void (**)(_BYTE *__return_ptr, uint64_t, void))(*(void *)v41 + 464LL))(buf, v41, **a1);
      (*(void (**)(os_unfair_lock_s *, _BYTE *, void))(*(void *)&a3->_os_unfair_lock_opaque + 400LL))( a3,  buf,  *(_WORD *)(v41 + 184) & 1);
      (*(void (**)(uint64_t, void))(*(void *)v41 + 512LL))(v41, **a1);
      int v26 = *(void **)buf;
      if (!*(void *)buf) {
        goto LABEL_58;
      }
      *(void *)&_DWORD buf[8] = *(void *)buf;
    }

    else
    {
      (*(void (**)(os_unfair_lock_s *, unsigned int **, void))(*(void *)&a3->_os_unfair_lock_opaque
                                                                          + 400LL))( a3,  a1,  *(_WORD *)(v41 + 184) & 1);
      if (*(_DWORD *)(v41 + 144) == 1886216809)
      {
        uint64_t v20 = (os_log_t *)sub_138E8(20);
        uint64_t v21 = *v20;
        if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_INFO))
        {
          sub_23FE8((uint64_t)&v40, (os_unfair_lock_t)(v41 + 8));
          int v22 = (char)v40.__r_.__value_.__s.__size_;
          std::string::size_type v23 = v40.__r_.__value_.__r.__words[0];
          sub_2CA1C(__p, 1634495520LL);
          int v24 = &v40;
          if (v22 < 0) {
            int v24 = (std::string *)v23;
          }
          if (v39 >= 0) {
            __int16 v25 = __p;
          }
          else {
            __int16 v25 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1245;
          __int16 v44 = 2080;
          BOOL v45 = v24;
          __int16 v46 = 2080;
          int v47 = (std::string *)v25;
          _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_INFO,  "%25s:%-5d Setting multiple sub-ports active on Port: %s.  Converting to a single sub-port with ID: %s",  buf,  0x26u);
          if (v39 < 0) {
            operator delete(__p[0]);
          }
        }

        (*(void (**)(uint64_t, uint64_t))(*(void *)v41 + 512LL))(v41, 1634495520LL);
        goto LABEL_58;
      }

      uint64_t v27 = sub_138E8(20);
      if ((*(_BYTE *)(v27 + 8) & 1) == 0) {
        goto LABEL_58;
      }
      unint64_t v28 = *(os_log_s **)v27;
      if (!*(void *)v27 || !os_log_type_enabled(*(os_log_t *)v27, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_58;
      }
      sub_23FE8((uint64_t)&v40, (os_unfair_lock_t)(v41 + 8));
      __int16 v29 = (v40.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v40 : (std::string *)v40.__r_.__value_.__r.__words[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1251;
      __int16 v44 = 2080;
      BOOL v45 = v29;
      _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to set multiple sub-ports active on Port: %s.  Ignoring.",  buf,  0x1Cu);
      if (((char)v40.__r_.__value_.__s.__size_ & 0x80000000) == 0)
      {
LABEL_58:
        std::chrono::system_clock::time_point v30 = v42;
        if (v42)
        {
          p_shared_owners = (unint64_t *)&v42->__shared_owners_;
          do
            unint64_t v32 = __ldaxr(p_shared_owners);
          while (__stlxr(v32 - 1, p_shared_owners));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }

        return;
      }

      int v26 = (void *)v40.__r_.__value_.__r.__words[0];
    }

    operator delete(v26);
    goto LABEL_58;
  }

void sub_1BBB2C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20, int a21, __int16 a22, char a23, char a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28)
{
}

void sub_1BBBD8(void *a1, os_unfair_lock_s *a2, unsigned int a3)
{
  if (!a2)
  {
    uint64_t v54 = (os_log_t *)sub_138E8(13);
    int v55 = *v54;
    if (*v54 && os_log_type_enabled(*v54, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1266;
      _os_log_impl(&dword_0, v55, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  BOOL v3 = a1;
  AudioObjectID v68 = 0LL;
  std::mutex v69 = 0LL;
  uint64_t v70 = 0LL;
  int v4 = a1 + 1;
  uint64_t v5 = (void *)*a1;
  if ((void *)*a1 != a1 + 1)
  {
    locunsigned int k = a2 + 2;
    do
    {
      sub_B8CBC(&v66, v5 + 4, "", 1271);
      uint64_t v6 = sub_138E8(20);
      if ((*(_BYTE *)(v6 + 8) & 1) != 0)
      {
        int v7 = *(os_log_s **)v6;
        if (*(void *)v6)
        {
          if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
          {
            if ((*(_WORD *)(v66 + 184) & 1) != 0) {
              unint64_t v8 = "";
            }
            else {
              unint64_t v8 = "not ";
            }
            sub_8F640(&v65, (unsigned int *)v5[6], (unsigned int *)v5[7]);
            if ((v65.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              std::string::size_type v9 = &v65;
            }
            else {
              std::string::size_type v9 = (std::string *)v65.__r_.__value_.__r.__words[0];
            }
            sub_23FE8((uint64_t)v63, (os_unfair_lock_t)(v66 + 8));
            int v10 = v64;
            unint64_t v11 = (void **)v63[0];
            sub_23FE8((uint64_t)__p, lock);
            uint64_t v12 = v63;
            if (v10 < 0) {
              uint64_t v12 = v11;
            }
            char v13 = __p;
            if (v62 < 0) {
              char v13 = (void **)__p[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
            *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1276;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&_BYTE buf[20] = v8;
            __int16 v72 = 2080;
            uint64_t v73 = v9;
            __int16 v74 = 2080;
            double v75 = v12;
            __int16 v76 = 2080;
            std::string::size_type v77 = v13;
            _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Will %sadd sub-ports %s for port %s to activation sub-port group for device %s.",  buf,  0x3Au);
            if (v62 < 0) {
              operator delete(__p[0]);
            }
            if (v64 < 0) {
              operator delete(v63[0]);
            }
          }
        }
      }

      memset(buf, 0, 24);
      sub_7A5B8(buf, (const void *)v5[6], v5[7], (uint64_t)(v5[7] - v5[6]) >> 2);
      int v15 = *(void **)buf;
      unint64_t v14 = *(__int32 **)&buf[8];
      if (*(void *)&buf[8] - *(void *)buf < 5uLL)
      {
        if (*(void *)&buf[8] - *(void *)buf == 4LL)
        {
          (*(void (**)(std::string *__return_ptr, uint64_t, void))(*(void *)v66 + 464LL))( &v65,  v66,  **(_DWORD **)buf);
          std::string::size_type size = v65.__r_.__value_.__l.__size_;
          uint64_t v18 = (__int32 *)v65.__r_.__value_.__r.__words[0];
          if (v65.__r_.__value_.__r.__words[0] != v65.__r_.__value_.__l.__size_)
          {
            do
              sub_8598C((uint64_t)&v68, v18++);
            while (v18 != (__int32 *)size);
            uint64_t v18 = (__int32 *)v65.__r_.__value_.__r.__words[0];
          }

          if (v18)
          {
            v65.__r_.__value_.__l.__size_ = (std::string::size_type)v18;
            operator delete(v18);
          }
        }
      }

      else if (*(void *)buf != *(void *)&buf[8])
      {
        uint64_t v16 = *(__int32 **)buf;
        do
          sub_8598C((uint64_t)&v68, v16++);
        while (v16 != v14);
      }

      if (v15) {
        operator delete(v15);
      }
      unint64_t v19 = v67;
      if (v67)
      {
        p_shared_owners = (unint64_t *)&v67->__shared_owners_;
        do
          unint64_t v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }

      int v22 = (void *)v5[1];
      if (v22)
      {
        do
        {
          std::string::size_type v23 = v22;
          int v22 = (void *)*v22;
        }

        while (v22);
      }

      else
      {
        do
        {
          std::string::size_type v23 = (void *)v5[2];
          BOOL v24 = *v23 == (void)v5;
          uint64_t v5 = v23;
        }

        while (!v24);
      }

      uint64_t v5 = v23;
    }

    while (v23 != v4);
    BOOL v3 = a1;
    if (v68 != v69)
    {
      uint64_t v25 = sub_138E8(20);
      if ((*(_BYTE *)(v25 + 8) & 1) != 0)
      {
        int v26 = *(os_log_s **)v25;
        if (*(void *)v25)
        {
          if (os_log_type_enabled(*(os_log_t *)v25, OS_LOG_TYPE_DEBUG))
          {
            sub_F6EB0(&v65, (unsigned int *)v68, v69);
            int v27 = (char)v65.__r_.__value_.__s.__size_;
            std::string::size_type v28 = v65.__r_.__value_.__r.__words[0];
            sub_23FE8((uint64_t)v63, lock);
            __int16 v29 = &v65;
            if (v27 < 0) {
              __int16 v29 = (std::string *)v28;
            }
            if (v64 >= 0) {
              std::chrono::system_clock::time_point v30 = v63;
            }
            else {
              std::chrono::system_clock::time_point v30 = (void **)v63[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1293;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&_BYTE buf[20] = v29;
            __int16 v72 = 2080;
            uint64_t v73 = (std::string *)v30;
            _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Will activate sub-ports %s on device %s.",  buf,  0x26u);
            if (v64 < 0) {
              operator delete(v63[0]);
            }
          }
        }
      }

      (*(void (**)(os_unfair_lock_s *, void **, void))(*(void *)&a2->_os_unfair_lock_opaque + 400LL))( a2,  &v68,  a3);
    }
  }

  __int16 v31 = (void *)*v3;
  if ((void *)*v3 != v4)
  {
    while (1)
    {
      sub_B8CBC(&v66, v31 + 4, "", 1299);
      uint64_t v32 = sub_138E8(20);
      if ((*(_BYTE *)(v32 + 8) & 1) != 0)
      {
        __int16 v33 = *(os_log_s **)v32;
        if (*(void *)v32)
        {
          if (os_log_type_enabled(*(os_log_t *)v32, OS_LOG_TYPE_DEBUG))
          {
            if ((*(_WORD *)(v66 + 184) & 1) != 0) {
              std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v34 = "";
            }
            else {
              std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v34 = "not ";
            }
            sub_8F640(&v65, (unsigned int *)v31[6], (unsigned int *)v31[7]);
            int v35 = (char)v65.__r_.__value_.__s.__size_;
            std::string::size_type v36 = v65.__r_.__value_.__r.__words[0];
            sub_23FE8((uint64_t)v63, (os_unfair_lock_t)(v66 + 8));
            char v37 = &v65;
            if (v35 < 0) {
              char v37 = (std::string *)v36;
            }
            std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v38 = v63;
            if (v64 < 0) {
              std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v38 = (void **)v63[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1303;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&_BYTE buf[20] = v34;
            __int16 v72 = 2080;
            uint64_t v73 = v37;
            __int16 v74 = 2080;
            double v75 = v38;
            _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Will %smark sub-ports %s active on port %s.",  buf,  0x30u);
            if (v64 < 0) {
              operator delete(v63[0]);
            }
          }
        }
      }

      if ((*(_WORD *)(v66 + 184) & 1) == 0) {
        goto LABEL_101;
      }
      memset(&v65, 0, sizeof(v65));
      sub_7A5B8(&v65, (const void *)v31[6], v31[7], (uint64_t)(v31[7] - v31[6]) >> 2);
      char v39 = (void *)v65.__r_.__value_.__r.__words[0];
      if (v65.__r_.__value_.__l.__size_ - v65.__r_.__value_.__r.__words[0] >= 5) {
        break;
      }
      if (v65.__r_.__value_.__l.__size_ - v65.__r_.__value_.__r.__words[0] != 4) {
        goto LABEL_99;
      }
      (*(void (**)(uint64_t, void))(*(void *)v66 + 512LL))( v66,  *(unsigned int *)v65.__r_.__value_.__l.__data_);
LABEL_100:
      operator delete(v39);
LABEL_101:
      char v49 = v67;
      if (v67)
      {
        char v50 = (unint64_t *)&v67->__shared_owners_;
        do
          unint64_t v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }

      char v52 = (void *)v31[1];
      if (v52)
      {
        do
        {
          AudioObjectID v53 = v52;
          char v52 = (void *)*v52;
        }

        while (v52);
      }

      else
      {
        do
        {
          AudioObjectID v53 = (void *)v31[2];
          BOOL v24 = *v53 == (void)v31;
          __int16 v31 = v53;
        }

        while (!v24);
      }

      __int16 v31 = v53;
      if (v53 == v4) {
        goto LABEL_112;
      }
    }

    if (*(_DWORD *)(v66 + 144) == 1886216809)
    {
      uint64_t v40 = sub_138E8(20);
      if ((*(_BYTE *)(v40 + 8) & 1) != 0)
      {
        uint64_t v41 = *(os_log_s **)v40;
        if (*(void *)v40)
        {
          if (os_log_type_enabled(*(os_log_t *)v40, OS_LOG_TYPE_DEBUG))
          {
            sub_23FE8((uint64_t)v63, (os_unfair_lock_t)(v66 + 8));
            BOOL v42 = v63;
            if (v64 < 0) {
              BOOL v42 = (void **)v63[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1322;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&_BYTE buf[20] = v42;
            _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to set multiple sub-ports active on Port: %s.  Ignoring.",  buf,  0x1Cu);
            if (v64 < 0) {
              operator delete(v63[0]);
            }
          }
        }
      }
    }

    else
    {
      uint64_t v43 = (os_log_t *)sub_138E8(20);
      __int16 v44 = *v43;
      if (*v43 && os_log_type_enabled(*v43, OS_LOG_TYPE_INFO))
      {
        sub_23FE8((uint64_t)v63, (os_unfair_lock_t)(v66 + 8));
        int v45 = v64;
        __int16 v46 = (void **)v63[0];
        sub_2CA1C(__p, 1634495520LL);
        int v47 = v63;
        if (v45 < 0) {
          int v47 = v46;
        }
        __int16 v48 = __p;
        if (v62 < 0) {
          __int16 v48 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1316;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&_BYTE buf[20] = v47;
        __int16 v72 = 2080;
        uint64_t v73 = (std::string *)v48;
        _os_log_impl( &dword_0,  v44,  OS_LOG_TYPE_INFO,  "%25s:%-5d Setting multiple sub-ports active on Port: %s.  Converting to a single sub-port with ID: %s",  buf,  0x26u);
        if (v62 < 0) {
          operator delete(__p[0]);
        }
        if (v64 < 0) {
          operator delete(v63[0]);
        }
      }

      (*(void (**)(uint64_t, uint64_t))(*(void *)v66 + 512LL))(v66, 1634495520LL);
    }

void sub_1BC4BC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, void *__p, uint64_t a27, int a28, __int16 a29, char a30, char a31, char a32, uint64_t a33, void *a34, uint64_t a35)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a34) {
    operator delete(a34);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BC5DC(uint64_t a1, char **a2, uint64_t *a3)
{
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  uint64_t v5 = *a2;
  uint64_t v6 = (uint64_t)a2[1];
  uint64_t v8 = v6 - (void)v5;
  if ((unint64_t)(v6 - (void)v5) < 5)
  {
    if (v8 == 4)
    {
      sub_B8F68(v13, a3, "", 1344);
      (*(void (**)(__int128 *__return_ptr, uint64_t, void))(*(void *)v13[0] + 464LL))( &v14,  v13[0],  *(unsigned int *)*a2);
      std::string::size_type v9 = (std::__shared_weak_count *)v13[1];
      uint64_t v10 = v15;
      *(_OWORD *)a1 = v14;
      *(void *)(a1 + 16) = v10;
      uint64_t v15 = 0LL;
      __int128 v14 = 0uLL;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          unint64_t v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
  }

  else if ((char **)a1 != a2)
  {
    sub_7E6D4((char *)a1, v5, v6, v8 >> 2);
  }

void sub_1BC6C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1BC6FC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_4746C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1BC70C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_4746C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1BC72C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1BC73C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = (void *)sub_EAD14();
  *(void *)AudioObjectPropertyAddress buf = CFStringCreateWithCString(0LL, "Baseband Voice", 0x600u);
  _DWORD buf[8] = 1;
  uint64_t v7 = sub_EAE28(v6, (CFStringRef *)buf);
  sub_19DFC((uint64_t)buf);
  if (!v7)
  {
    __int128 v14 = (os_log_t *)sub_138E8(13);
    uint64_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      __int16 v19 = 1024;
      int v20 = 306;
      __int16 v21 = 2080;
      int v22 = "Baseband Voice";
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [device is NULL]: Invalid device %s",  buf,  0x1Cu);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003329396;
  }

  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 24LL))(v7, a1) & 1) != 0)
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 0;
    LODWORD(v17[0]) = 4;
    (*(void (**)(uint64_t, uint64_t, void, void, void *, _BYTE *))(*(void *)v7 + 40LL))( v7,  a1,  0LL,  0LL,  v17,  buf);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 24LL))(v7, a1);
    if ((_DWORD)result)
    {
      std::string::size_type v9 = operator new(0x28uLL);
      *std::string::size_type v9 = &off_4842A0;
      v9[1] = v7;
      v9[2] = *(void *)a1;
      *((_DWORD *)v9 + 6) = *(_DWORD *)(a1 + 8);
      *((_DWORD *)v9 + 7) = a3;
      *((_DWORD *)v9 + 8) = *(_DWORD *)buf;
      uint64_t v10 = operator new(0x18uLL);
      unint64_t v11 = *(void **)(a2 + 8);
      *uint64_t v10 = a2;
      v10[1] = v11;
      void v10[2] = v9;
      *unint64_t v11 = v10;
      uint64_t v12 = *(void *)(a2 + 16) + 1LL;
      *(void *)(a2 + 8) = v10;
      *(void *)(a2 + 16) = v12;
      return sub_1BCA18((uint64_t)v9);
    }
  }

  else
  {
    uint64_t result = sub_138E8(20);
    char v13 = *(os_log_s **)result;
    if (*(void *)result)
    {
      uint64_t result = os_log_type_enabled(*(os_log_t *)result, OS_LOG_TYPE_INFO);
      if ((_DWORD)result)
      {
        (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v7 + 128LL))(v17, v7);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
        __int16 v19 = 1024;
        int v20 = 311;
        __int16 v21 = 2112;
        int v22 = (const char *)v17[0];
        _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, "%25s:%-5d Device %@ is unable to set destination", buf, 0x1Cu);
        return sub_19DFC((uint64_t)v17);
      }
    }
  }

  return result;
}

void sub_1BC9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_1BCA18(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, void, void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 48LL))( *(void *)(a1 + 8),  a1 + 16,  0LL,  0LL,  4LL,  a1 + 28);
}

uint64_t sub_1BCA40(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, void, void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 48LL))( *(void *)(a1 + 8),  a1 + 16,  0LL,  0LL,  4LL,  a1 + 32);
}

void sub_1BCA68(uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)(*(void *)a1 + 24LL);
  if (v2 != (void *)(*(void *)a1 + 16LL))
  {
    BOOL v3 = 0LL;
    int v4 = 0LL;
    uint64_t v5 = 0LL;
    int v6 = 0;
    int v7 = 0;
    uint64_t v8 = "";
    do
    {
      sub_B8CBC(&v39, v2 + 4, v8, 1397);
      uint64_t v9 = *(void *)(v39 + 192);
      if (*(_DWORD *)(v39 + 144) != 1885433888 && v9 == 0)
      {
        __int16 v29 = (os_log_t *)sub_138E8(13);
        std::chrono::system_clock::time_point v30 = *v29;
        if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
        {
          (*(void (**)(void *__return_ptr))(*(void *)v39 + 144LL))(v38);
          uint64_t v31 = v38[0];
          sub_2CA1C(__p, *(unsigned int *)(v39 + 144));
          if (v37 >= 0) {
            uint64_t v32 = __p;
          }
          else {
            uint64_t v32 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1402;
          __int16 v42 = 2112;
          uint64_t v43 = v31;
          __int16 v44 = 2080;
          int v45 = v32;
          _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): could not get device for port \\%@\\ (type: '%s').",  buf,  0x26u);
          if (v37 < 0) {
            operator delete(__p[0]);
          }
          sub_19DFC((uint64_t)v38);
        }

        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &off_4865A0;
        exception[2] = 2003329396;
      }

      unint64_t v11 = v8;
      sub_B8CBC((uint64_t *)buf, v2 + 2, v8, 1404);
      uint64_t v12 = *(std::__shared_weak_count **)&buf[8];
      int v13 = *(_DWORD *)(*(void *)buf + 144LL);
      if (*(void *)&buf[8])
      {
        __int128 v14 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }

      v7 |= v13 != 1885433888;
      if (*(_DWORD *)(v39 + 144) != 1885892674 || v9 == 0)
      {
        v7 |= *(_DWORD *)(v39 + 144) != 1885892674;
        v6 |= *(_DWORD *)(v39 + 144) == 1885892674;
      }

      else if (v4 >= v5)
      {
        uint64_t v17 = v4 - v3;
        unint64_t v18 = v17 + 1;
        else {
          unint64_t v19 = v18;
        }
        if (v19)
        {
          if (v19 >> 61) {
            sub_7A8C4();
          }
          int v20 = (char *)operator new(8 * v19);
        }

        else
        {
          int v20 = 0LL;
        }

        __int16 v21 = (uint64_t *)&v20[8 * v17];
        *__int16 v21 = v9;
        int v22 = v21 + 1;
        while (v4 != v3)
        {
          uint64_t v23 = *--v4;
          *--__int16 v21 = v23;
        }

        uint64_t v5 = (uint64_t *)&v20[8 * v19];
        if (v3) {
          operator delete(v3);
        }
        int v6 = 1;
        BOOL v3 = v21;
        int v4 = v22;
      }

      else
      {
        *v4++ = v9;
        int v6 = 1;
      }

      uint64_t v8 = v11;
      BOOL v24 = v40;
      if (v40)
      {
        p_shared_owners = (unint64_t *)&v40->__shared_owners_;
        do
          unint64_t v26 = __ldaxr(p_shared_owners);
        while (__stlxr(v26 - 1, p_shared_owners));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }

      int v2 = (void *)v2[1];
    }

    while (v2 != (void *)(*(void *)a1 + 16LL));
    if ((v7 & v6 & 1) != 0 && v3 != v4)
    {
      int v27 = v3;
      do
      {
        uint64_t v28 = *v27;
        strcpy(buf, "aodabolg");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        sub_1BCE9C(v28, (uint64_t)buf, a2, 1);
        ++v27;
      }

      while (v27 != v4);
    }

    if (v3) {
      operator delete(v3);
    }
  }

void sub_1BCE48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_19DFC((uint64_t)va);
  sub_7A768((uint64_t)va1);
  if (v7) {
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1BCE9C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
  if ((_DWORD)result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24LL))(a1, a2);
    if ((_DWORD)result)
    {
      uint64_t v9 = operator new(0x28uLL);
      *uint64_t v9 = &off_4842A0;
      v9[1] = a1;
      v9[2] = *(void *)a2;
      *((_DWORD *)v9 + 6) = *(_DWORD *)(a2 + 8);
      *((_DWORD *)v9 + 7) = a4;
      *((_DWORD *)v9 + 8) = 0;
      uint64_t v10 = operator new(0x18uLL);
      uint64_t v11 = *(void **)(a3 + 8);
      uint64_t v12 = *(void *)(a3 + 16);
      *uint64_t v10 = a3;
      v10[1] = v11;
      void v10[2] = v9;
      *uint64_t v11 = v10;
      *(void *)(a3 + 8) = v10;
      *(void *)(a3 + 16) = v12 + 1;
      return sub_1BCA18((uint64_t)v9);
    }
  }

  return result;
}

void sub_1BCF60(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = sub_105C24(a3, 8);
  sub_B8CBC(&v22, (uint64_t *)(v8 + 16), "", 1437);
  if (*(_DWORD *)(v22 + 144) == 1886613611 && sub_1CB4A0())
  {
    if (a4 == 1650811758)
    {
      unsigned __int8 v9 = atomic_load((unsigned __int8 *)&qword_48FD88);
      if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_48FD88))
      {
        sub_1CBE5C((char *)&v24);
        BOOL v21 = sub_155FC8(v26, "mandrake-supported");
        sub_1CBFA0((uint64_t)&v24);
        byte_48FD80 = v21;
        __cxa_guard_release(&qword_48FD88);
      }

      if (byte_48FD80)
      {
        uint64_t v10 = sub_9EB48();
        sub_1A06BC((uint64_t)&v24, v10, 2);
        if (v25)
        {
          uint64_t v11 = operator new(0x18uLL);
          uint64_t v12 = v24;
          *uint64_t v11 = &off_483450;
          v11[1] = a1;
          v11[2] = v12;
          sub_2323A0(a2, (uint64_t)v11);
          if (!v12) {
            goto LABEL_17;
          }
        }

        else
        {
          uint64_t v12 = v24;
          if (!v24) {
            goto LABEL_17;
          }
        }

        goto LABEL_16;
      }
    }

    uint64_t v13 = sub_9EB48();
    sub_1A06BC((uint64_t)&v24, v13, 0);
    if (!v25)
    {
      uint64_t v12 = v24;
      if (!v24) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }

    __int128 v14 = operator new(0x18uLL);
    uint64_t v12 = v24;
    *__int128 v14 = &off_483450;
    v14[1] = a1;
    v14[2] = v12;
    unint64_t v15 = operator new(0x18uLL);
    uint64_t v16 = *(void **)(a2 + 8);
    *unint64_t v15 = a2;
    v15[1] = v16;
    v15[2] = v14;
    void *v16 = v15;
    uint64_t v17 = *(void *)(a2 + 16) + 1LL;
    *(void *)(a2 + 8) = v15;
    *(void *)(a2 + 16) = v17;
    sub_368014((uint64_t)v14);
    if (v12) {
LABEL_16:
    }
      CFRelease(v12);
  }

void sub_1BD178( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void *sub_1BD1CC(void *a1)
{
  *a1 = off_474810;
  sub_7A768((uint64_t)(a1 + 4));
  return a1;
}

void sub_1BD1FC(void *a1)
{
  *a1 = off_474810;
  sub_7A768((uint64_t)(a1 + 4));
  operator delete(a1);
}

void sub_1BD22C(uint64_t a1)
{
  uint64_t v1 = a1 + 32;
  if (*(void *)(a1 + 32)) {
    return;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 24);
  int v4 = *(_DWORD *)(a1 + 28);
  int v16 = 1685087596;
  uint64_t v17 = v3;
  int v6 = operator new(0x20uLL);
  *int v6 = &off_474848;
  v6[1] = v2;
  v6[2] = v3;
  *((_DWORD *)v6 + 6) = v5;
  BOOL v21 = v6;
  int v7 = operator new(0x20uLL);
  *int v7 = &off_474890;
  v7[1] = v2;
  uint64_t v7[2] = v3;
  *((_DWORD *)v7 + 6) = v4;
  unint64_t v19 = v7;
  sub_F3758((uint64_t *)&v15, v2, &v16, (uint64_t)v20, (uint64_t)v18);
  uint64_t v8 = v19;
  if (v19 == v18)
  {
    uint64_t v9 = 4LL;
    uint64_t v8 = v18;
  }

  else
  {
    if (!v19) {
      goto LABEL_8;
    }
    uint64_t v9 = 5LL;
  }

  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_8:
  uint64_t v10 = v21;
  if (v21 == v20)
  {
    uint64_t v11 = 4LL;
    uint64_t v10 = v20;
  }

  else
  {
    if (!v21) {
      goto LABEL_13;
    }
    uint64_t v11 = 5LL;
  }

  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_13:
  sub_127660(v1, &v15);
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v15 + 1);
  if (*((void *)&v15 + 1))
  {
    uint64_t v13 = (unint64_t *)(*((void *)&v15 + 1) + 8LL);
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

void sub_1BD3B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20, char *a21)
{
  uint64_t v23 = a17;
  if (a17 == v21)
  {
    uint64_t v24 = 4LL;
    uint64_t v23 = &a14;
  }

  else
  {
    if (!a17) {
      goto LABEL_6;
    }
    uint64_t v24 = 5LL;
  }

  (*(void (**)(void))(*(void *)v23 + 8 * v24))();
LABEL_6:
  int v25 = a21;
  if (a21 == &a18)
  {
    uint64_t v26 = 4LL;
    int v25 = &a18;
  }

  else
  {
    if (!a21) {
      goto LABEL_11;
    }
    uint64_t v26 = 5LL;
  }

  (*(void (**)(char *))(*(void *)v25 + 8 * v26))(v25);
LABEL_11:
  _Unwind_Resume(exception_object);
}

void sub_1BD42C(uint64_t a1)
{
}

__n128 sub_1BD43C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &off_474890;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1BD47C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_474890;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1BD4A4(uint64_t a1)
{
  return sub_F2FAC(*(void *)(a1 + 8));
}

__n128 sub_1BD4F8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &off_474848;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1BD538(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_474848;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1BD560(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(_DWORD *)AudioObjectPropertyAddress buf = 1685087596;
  uint64_t v10 = *(const char **)(a1 + 16);
  int v2 = sub_F2FAC(v1);
  if (v2)
  {
    int v3 = v2;
    int v4 = (os_log_t *)sub_138E8(14);
    int v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(__p, 1685087596LL);
        if (v8 >= 0) {
          int v6 = __p;
        }
        else {
          int v6 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        uint64_t v10 = "Object.h";
        __int16 v11 = 1024;
        int v12 = 216;
        __int16 v13 = 2048;
        uint64_t v14 = v3;
        __int16 v15 = 2080;
        int v16 = v6;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d SetPropertyStat(inDoValue) error = %lu for property = %s",  buf,  0x26u);
        if (v8 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

void *sub_1BD6B0(void *a1)
{
  *a1 = off_474748;
  sub_7A768((uint64_t)(a1 + 4));
  return a1;
}

void sub_1BD6E0(void *a1)
{
  *a1 = off_474748;
  sub_7A768((uint64_t)(a1 + 4));
  operator delete(a1);
}

void sub_1BD710(uint64_t a1)
{
  uint64_t v1 = a1 + 32;
  if (*(void *)(a1 + 32)) {
    return;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  int v5 = *(_DWORD *)(a1 + 24);
  int v4 = *(_DWORD *)(a1 + 28);
  int v16 = 1634692199;
  uint64_t v17 = v3;
  int v6 = operator new(0x20uLL);
  *int v6 = &off_474780;
  v6[1] = v2;
  v6[2] = v3;
  *((_DWORD *)v6 + 6) = v5;
  BOOL v21 = v6;
  int v7 = operator new(0x20uLL);
  *int v7 = &off_4747C8;
  v7[1] = v2;
  uint64_t v7[2] = v3;
  *((_DWORD *)v7 + 6) = v4;
  unint64_t v19 = v7;
  sub_F3758((uint64_t *)&v15, v2, &v16, (uint64_t)v20, (uint64_t)v18);
  char v8 = v19;
  if (v19 == v18)
  {
    uint64_t v9 = 4LL;
    char v8 = v18;
  }

  else
  {
    if (!v19) {
      goto LABEL_8;
    }
    uint64_t v9 = 5LL;
  }

  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_8:
  uint64_t v10 = v21;
  if (v21 == v20)
  {
    uint64_t v11 = 4LL;
    uint64_t v10 = v20;
  }

  else
  {
    if (!v21) {
      goto LABEL_13;
    }
    uint64_t v11 = 5LL;
  }

  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_13:
  sub_127660(v1, &v15);
  int v12 = (std::__shared_weak_count *)*((void *)&v15 + 1);
  if (*((void *)&v15 + 1))
  {
    __int16 v13 = (unint64_t *)(*((void *)&v15 + 1) + 8LL);
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

void sub_1BD89C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20, char *a21)
{
  uint64_t v23 = a17;
  if (a17 == v21)
  {
    uint64_t v24 = 4LL;
    uint64_t v23 = &a14;
  }

  else
  {
    if (!a17) {
      goto LABEL_6;
    }
    uint64_t v24 = 5LL;
  }

  (*(void (**)(void))(*(void *)v23 + 8 * v24))();
LABEL_6:
  int v25 = a21;
  if (a21 == &a18)
  {
    uint64_t v26 = 4LL;
    int v25 = &a18;
  }

  else
  {
    if (!a21) {
      goto LABEL_11;
    }
    uint64_t v26 = 5LL;
  }

  (*(void (**)(char *))(*(void *)v25 + 8 * v26))(v25);
LABEL_11:
  _Unwind_Resume(exception_object);
}

void sub_1BD910(uint64_t a1)
{
}

__n128 sub_1BD920(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &off_4747C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1BD960(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_4747C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1BD988(uint64_t a1)
{
  return sub_F2FAC(*(void *)(a1 + 8));
}

__n128 sub_1BD9DC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &off_474780;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1BDA1C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_474780;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1BDA44(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(_DWORD *)AudioObjectPropertyAddress buf = 1634692199;
  uint64_t v10 = *(const char **)(a1 + 16);
  int v2 = sub_F2FAC(v1);
  if (v2)
  {
    int v3 = v2;
    int v4 = (os_log_t *)sub_138E8(14);
    int v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(__p, 1634692199LL);
        if (v8 >= 0) {
          int v6 = __p;
        }
        else {
          int v6 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        uint64_t v10 = "Object.h";
        __int16 v11 = 1024;
        int v12 = 216;
        __int16 v13 = 2048;
        uint64_t v14 = v3;
        __int16 v15 = 2080;
        int v16 = v6;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d SetPropertyStat(inDoValue) error = %lu for property = %s",  buf,  0x26u);
        if (v8 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

void sub_1BDB94(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 268) == 1986291046)
  {
    unint64_t v2 = atomic_load(&qword_48E7E8);
    if (v2 != -1LL)
    {
      *(void *)AudioObjectPropertyAddress buf = &v9;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
      std::__call_once(&qword_48E7E8, &__p, (void (__cdecl *)(void *))sub_14C7D8);
    }

    float v3 = *(float *)&qword_48E7E0;
    uint64_t v9 = qword_48E7E0;
    if ((qword_48E7E0 & 0xFF00000000LL) != 0)
    {
      int v4 = (os_log_t *)sub_138E8(19);
      int v5 = *v4;
      if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_INFO))
      {
        uint64_t v7 = *(void *)(a1 + 268);
        sub_33464(&__p, (unsigned int *)&v7);
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
        __int16 v11 = 1024;
        int v12 = 1550;
        __int16 v13 = 2048;
        double v14 = v3;
        __int16 v15 = 2080;
        int v16 = p_p;
        _os_log_impl(&dword_0, v5, OS_LOG_TYPE_INFO, "%25s:%-5d Setting IOCycleUsage of %f on VAD %s", buf, 0x26u);
      }

      strcpy(buf, "cycnbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      sub_38A8E8(a1, (uint64_t)buf, 4LL, (uint64_t)&v9);
    }
  }

uint64_t sub_1BDD40(void *a1, uint64_t *a2)
{
  int v6 = (void *)*a1;
  int v5 = a1 + 1;
  int v4 = v6;
  if (v6 == v5) {
    return 1LL;
  }
  while (*((_DWORD *)v4 + 7) != 1886613611)
  {
    uint64_t v7 = (void *)v4[1];
    if (v7)
    {
      do
      {
        char v8 = v7;
        uint64_t v7 = (void *)*v7;
      }

      while (v7);
    }

    else
    {
      do
      {
        char v8 = (void *)v4[2];
        BOOL v14 = *v8 == (void)v4;
        int v4 = v8;
      }

      while (!v14);
    }

    int v4 = v8;
    if (v8 == v5) {
      return 1LL;
    }
  }

  uint64_t result = *a2;
  if (*a2)
  {
    unint64_t v10 = sub_5C2F8(result);
    *((void *)&v13 + 1) = v11;
    *(void *)&__int128 v13 = v10;
    uint64_t v12 = v13 >> 32;
    BOOL v14 = (v12 & 0xFF00000000LL) == 0 || (_DWORD)v12 == 0;
    return !v14;
  }

  return result;
}

BOOL sub_1BDE08(os_unfair_lock_s *a1, uint64_t *a2)
{
  if ((sub_1CBD44() & 1) == 0)
  {
    uint64_t v32 = (os_log_t *)sub_138E8(13);
    __int16 v33 = *v32;
    if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      __int16 v44 = 1024;
      int v45 = 1570;
      _os_log_impl(&dword_0, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint32_t os_unfair_lock_opaque = a1[36]._os_unfair_lock_opaque;
  uint64_t v5 = (*(uint64_t (**)(uint64_t, os_unfair_lock_s *))(*(void *)*a2 + 312LL))(*a2, a1);
  if (!v6)
  {
    int v35 = (os_log_t *)sub_138E8(13);
    std::string::size_type v36 = *v35;
    if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
    {
      sub_23FE8((uint64_t)__p, a1 + 2);
      char v37 = v42 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      __int16 v44 = 1024;
      int v45 = 1575;
      __int16 v46 = 2080;
      *(void *)int v47 = v37;
      _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Valid VirtualStream not present for port %s",  buf,  0x1Cu);
      if (SHIBYTE(v42) < 0) {
        operator delete(__p[0]);
      }
    }

    std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v38, "Valid VirtualStream not present for port %s");
  }

  uint64_t v7 = *(void *)(v5 + 136);
  if (*(char *)(v7 + 735) < 0)
  {
    sub_24054(__p, *(void **)(v7 + 712), *(void *)(v7 + 720));
  }

  else
  {
    uint64_t v8 = v7 + 712;
    *(_OWORD *)std::string __p = *(_OWORD *)v8;
    uint64_t v42 = *(void *)(v8 + 16);
  }

  if (os_unfair_lock_opaque != 1886613611) {
    goto LABEL_37;
  }
  uint64_t v9 = *a2;
  if (*a2
    && (*(void *)AudioObjectPropertyAddress buf = 0x273706163LL,
        *(_DWORD *)&_DWORD buf[8] = 0,
        unint64_t v10 = sub_5C2F8(v9),
        *((void *)&v13 + 1) = v11,
        *(void *)&__int128 v13 = v10,
        uint64_t v12 = v13 >> 32,
        (v12 & 0xFF00000000LL) != 0)
    && (_DWORD)v12)
  {
    BOOL v14 = 1;
  }

  else
  {
    uint64_t v15 = HIBYTE(v42);
    if (v42 >= 0)
    {
      int v16 = __p;
    }

    else
    {
      uint64_t v15 = (uint64_t)__p[1];
      int v16 = (void **)__p[0];
    }

    if (v15 >= 7)
    {
      uint64_t v17 = (char *)v16 + v15;
      unint64_t v18 = v16;
      do
      {
        unint64_t v19 = (char *)memchr(v18, 115, v15 - 6);
        if (!v19) {
          break;
        }
        if (*(_DWORD *)v19 == 1634037875 && *(_DWORD *)(v19 + 3) == 1919249249) {
          goto LABEL_24;
        }
        unint64_t v18 = (void **)(v19 + 1);
        uint64_t v15 = v17 - (char *)v18;
      }

      while (v17 - (char *)v18 > 6);
      unint64_t v19 = v17;
LABEL_24:
      BOOL v14 = v19 != v17 && v19 - (char *)v16 != -1;
    }

    else
    {
      BOOL v14 = 0;
    }
  }

  uint64_t v22 = (os_log_t *)sub_138E8(20);
  uint64_t v23 = *v22;
  if (!*v22 || !os_log_type_enabled(*v22, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_36;
  }
  sub_23FE8((uint64_t)v39, a1 + 2);
  uint64_t v24 = v40 >= 0 ? v39 : (void **)v39[0];
  *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
  *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
  __int16 v44 = 1024;
  int v45 = 1590;
  __int16 v46 = 1024;
  *(_DWORD *)int v47 = 1;
  *(_WORD *)&v47[4] = 1024;
  *(_DWORD *)&v47[6] = v14;
  __int16 v48 = 2080;
  char v49 = v24;
  _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d IsSpeakerRoute: %d, hasSpeakerProtection: %d, Port: %s",  buf,  0x28u);
  if (v40 < 0)
  {
    operator delete(v39[0]);
    if (v14) {
      goto LABEL_37;
    }
  }

  else
  {
LABEL_36:
    if (v14)
    {
LABEL_37:
      BOOL v25 = 1LL;
      goto LABEL_38;
    }
  }

  if (*(void *)(*a2 + 268) != 1986291046LL) {
    goto LABEL_54;
  }
  int v27 = (char *)HIBYTE(v42);
  if (v42 < 0) {
    int v27 = (char *)__p[1];
  }
  if (v27 == (_BYTE *)&dword_8 + 2)
  {
    uint64_t v28 = __p;
    if (v42 < 0) {
      uint64_t v28 = (void **)__p[0];
    }
    __int16 v29 = *v28;
    int v30 = *((unsigned __int16 *)v28 + 4);
    BOOL v25 = v29 == (void *)0x61675F6465786966LL && v30 == 28265;
  }

  else
  {
LABEL_54:
    BOOL v25 = 0LL;
  }

void sub_1BE27C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1BE2B8( _DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, _DWORD *a8, _DWORD *a9)
{
  int v17 = sub_753A8();
  return v17 == *a1
      || v17 == *a2
      || v17 == *a3
      || v17 == *a4
      || v17 == *a5
      || v17 == *a6
      || v17 == *a7
      || v17 == *a8
      || v17 == *a9;
}

void sub_1BE36C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1C2A24(a1);
  operator delete(v1);
}

uint64_t sub_1BE380(uint64_t a1, int *a2)
{
  int v4 = *a2;
  uint64_t v5 = 1LL;
  if (*a2 > 1919774834)
  {
    if (v4 > 1986098019)
    {
      if (v4 != 1986225518)
      {
        if (v4 == 1986098020)
        {
          uint64_t v7 = *(std::__shared_weak_count **)(a1 + 288);
          if (v7 && (uint64_t v8 = std::__shared_weak_count::lock(v7), (v18 = v8) != 0LL))
          {
            uint64_t v9 = v8;
            uint64_t v10 = *(void *)(a1 + 280);
            uint64_t v17 = v10;
            uint64_t v5 = 0LL;
            p_shared_owners = (unint64_t *)&v9->__shared_owners_;
            do
              unint64_t v12 = __ldaxr(p_shared_owners);
            while (__stlxr(v12 - 1, p_shared_owners));
            if (!v12)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }

          else
          {
            sub_14B8B8(a1 + 104, a2);
            return 0LL;
          }

          return v5;
        }

void sub_1BE59C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1BE5B0(uint64_t a1, int *a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    uint64_t v10 = (os_log_t *)sub_138E8(13);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      int v14 = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v15 = 1024;
      int v16 = 305;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): Unsupported selector, scope, or element",  (uint8_t *)&v13,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  int v4 = *a2;
  uint64_t result = 1LL;
  if (*a2 > 1936878959)
  {
    if (v4 <= 1986229103)
    {
      if (v4 > 1986098019)
      {
        if (v4 == 1986098020) {
          return result;
        }
        int v6 = 1986225518;
      }

      else
      {
        if (v4 == 1936878960) {
          return 0LL;
        }
        int v6 = 1983013986;
      }
    }

    else
    {
      if (v4 > 1986817376)
      {
        if (v4 == 1986817377 || v4 == 1987013741) {
          return result;
        }
        int v7 = 2021027692;
        goto LABEL_16;
      }

      if (v4 == 1986229104) {
        return 0LL;
      }
      int v6 = 1986290211;
    }

uint64_t sub_1BE8F8(uint64_t a1, int *a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    uint64_t v11 = (os_log_t *)sub_138E8(13);
    unint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      __int16 v15 = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v16 = 1024;
      int v17 = 358;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): Unsupported selector, scope, or element",  (uint8_t *)&v14,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  int v3 = *a2;
  uint64_t result = 4LL;
  if (*a2 > 1936878959)
  {
    if (v3 > 1986229103)
    {
      if (v3 <= 1986817376)
      {
        if (v3 == 1986229104) {
          return result;
        }
        int v6 = 1986290211;
      }

      else
      {
        if (v3 == 1986817377 || v3 == 1987013741) {
          return result;
        }
        int v6 = 2021027692;
      }

      if (v3 == v6) {
        return 16LL;
      }
      goto LABEL_34;
    }

    if (v3 > 1986098019)
    {
      if (v3 == 1986098020) {
        return 8LL;
      }
      int v5 = 1986225518;
    }

    else
    {
      if (v3 == 1936878960) {
        return result;
      }
      int v5 = 1983013986;
    }

void sub_1BEC80(uint64_t a1, unsigned int *a2, uint64_t a3, double *a4, int *a5, float *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    __int16 v94 = (os_log_t *)sub_138E8(13);
    uint64_t v95 = *v94;
    if (*v94 && os_log_type_enabled(*v94, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v118 = 1024;
      int v119 = 417;
      _os_log_impl( &dword_0,  v95,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): Unsupported selector, scope, or element",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((*(unsigned int (**)(uint64_t, unsigned int *, uint64_t, double *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4) > *a5)
  {
    unint64_t v97 = (os_log_t *)sub_138E8(13);
    char v98 = *v97;
    if (*v97 && os_log_type_enabled(*v97, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v118 = 1024;
      int v119 = 418;
      _os_log_impl( &dword_0,  v98,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): Data size insufficient.",  buf,  0x12u);
    }

    unint64_t v99 = __cxa_allocate_exception(0x10uLL);
    *(void *)unint64_t v99 = &off_4865A0;
    CFTypeRef v99[2] = 561211770;
  }

  int v13 = *a2;
  if ((int)*a2 > 1936878959)
  {
    if (v13 <= 1986229103)
    {
      if (v13 > 1986098019)
      {
        if (v13 == 1986098020) {
          goto LABEL_53;
        }
        if (v13 == 1986225518)
        {
          *a6 = *(float *)(a1 + 384);
          *a5 = 4;
          return;
        }

        goto LABEL_95;
      }

      if (v13 == 1936878960)
      {
        int v47 = (os_log_t *)sub_138E8(41);
        __int16 v48 = *v47;
        if (*v47 && os_log_type_enabled(*v47, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(&__p, 1936878960LL);
          double v49 = v116 >= 0 ? COERCE_DOUBLE(&__p) : *(double *)&__p;
          char v50 = *(_BYTE *)(a1 + 469) ? "" : "un";
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
          __int16 v118 = 1024;
          int v119 = 579;
          __int16 v120 = 2080;
          double v121 = v49;
          __int16 v122 = 2080;
          *(void *)unint64_t v123 = v50;
          _os_log_impl( &dword_0,  v48,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d OutputVolumeControl_HAL_Common::GetPropertyData() - %s volume ramping is %ssupported.",  buf,  0x26u);
          if (v116 < 0) {
            operator delete((void *)__p);
          }
        }

        sub_5CABC(*(unsigned __int8 *)(a1 + 469), a5, a6);
        return;
      }

      if (v13 == 1983013986)
      {
        unint64_t v18 = *(std::__shared_weak_count **)(a1 + 288);
        if (v18)
        {
          unint64_t v19 = std::__shared_weak_count::lock(v18);
          *((void *)&__p + 1) = v19;
          if (v19)
          {
            unint64_t v20 = v19;
            uint64_t v21 = *(void *)(a1 + 280);
            *(void *)&__int128 __p = v21;
            if (v21 && (*(unsigned int (**)(uint64_t))(*(void *)v21 + 272LL))(v21))
            {
              uint64_t v22 = (os_log_t *)sub_138E8(18);
              uint64_t v23 = *v22;
              if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_INFO))
              {
                double v24 = *a6;
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
                __int16 v118 = 1024;
                int v119 = 441;
                __int16 v120 = 2048;
                double v121 = v24;
                _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_INFO,  "%25s:%-5d Request to convert %f scalar to dB.",  buf,  0x1Cu);
              }

              float v25 = (*(float (**)(uint64_t, float))(*(void *)v21 + 288LL))(v21, *a6);
              sub_68168(a5, a6, v25);
              p_shared_owners = (unint64_t *)&v20->__shared_owners_;
              do
                unint64_t v27 = __ldaxr(p_shared_owners);
              while (__stlxr(v27 - 1, p_shared_owners));
              goto LABEL_150;
            }

            uint64_t v66 = (unint64_t *)&v20->__shared_owners_;
            do
              unint64_t v67 = __ldaxr(v66);
            while (__stlxr(v67 - 1, v66));
            if (!v67)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
        }

        sub_64424(a1 + 216, *a6);
        sub_68168(a5, a6, v68);
        return;
      }
    }

    else
    {
      if (v13 > 1986817376)
      {
        switch(v13)
        {
          case 1986817377:
            goto LABEL_25;
          case 2021027692:
            goto LABEL_53;
          case 1987013741:
LABEL_25:
            sub_68168(a5, a6, *(float *)(a1 + 296));
            return;
        }

        goto LABEL_95;
      }

      if (v13 == 1986229104)
      {
        if (*(_DWORD *)(a1 + 264) || *(void *)(a1 + 320))
        {
          int v52 = 1;
          goto LABEL_94;
        }

        *(_DWORD *)AudioObjectPropertyAddress buf = 1986229104;
        uint64_t v84 = *(void *)(a1 + 96);
        *(void *)&uint8_t buf[4] = *(void *)(a1 + 128);
        int v85 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(void *)v84 + 16LL))(v84, buf);
        uint64_t v46 = *(void *)(a1 + 96);
        if (v85) {
          goto LABEL_74;
        }
        goto LABEL_102;
      }

      if (v13 == 1986290211)
      {
        int v12 = *a5;
        if (v12 != (*(unsigned int (**)(uint64_t, unsigned int *, void, void))(*(void *)a1 + 32LL))( a1,  a2,  0LL,  0LL))
        {
          int v100 = (os_log_t *)sub_138E8(13);
          unint64_t v101 = *v100;
          if (*v100 && os_log_type_enabled(*v100, OS_LOG_TYPE_ERROR))
          {
            uint64_t v112 = *(void **)a2;
            unsigned int v113 = a2[2];
            sub_613AC((uint64_t)&__p, (unsigned int *)&v112);
            int v102 = v116;
            uint64_t v103 = (_OWORD *)__p;
            int v104 = *a5;
            int v105 = (*(uint64_t (**)(uint64_t, unsigned int *, void, void))(*(void *)a1 + 32LL))( a1,  a2,  0LL,  0LL);
            double v106 = COERCE_DOUBLE(&__p);
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
            if (v102 < 0) {
              double v106 = *(double *)&v103;
            }
            __int16 v118 = 1024;
            int v119 = 429;
            __int16 v120 = 2080;
            double v121 = v106;
            __int16 v122 = 1024;
            *(_DWORD *)unint64_t v123 = v104;
            *(_WORD *)&v123[4] = 1024;
            *(_DWORD *)&v123[6] = v105;
            _os_log_impl( &dword_0,  v101,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed : %u; required: %u).",
              buf,
              0x28u);
            if (v116 < 0) {
              operator delete((void *)__p);
            }
          }

          int v107 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v107 = &off_4865A0;
          v107[2] = 561211770;
        }

        if (*(void *)(a1 + 192)) {
          double v43 = *(float *)(*(void *)(a1 + 176) + 36LL);
        }
        else {
          double v43 = 0.0;
        }
        *(double *)a6 = v43;
        *((double *)a6 + 1) = sub_6461C(a1 + 168);
        return;
      }
    }

void sub_1BFDF0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
}

void sub_1BFE98(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned __int16 *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    uint64_t v73 = (os_log_t *)sub_138E8(13);
    uint64_t v74 = *v73;
    if (*v73 && os_log_type_enabled(*v73, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 624;
      _os_log_impl( &dword_0,  v74,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): Unsupported selector, scope, or element",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 32LL))(a1, a2, a3, a4) > a5)
  {
    char v76 = (os_log_t *)sub_138E8(13);
    uint64_t v77 = *v76;
    if (*v76 && os_log_type_enabled(*v76, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 625;
      _os_log_impl( &dword_0,  v77,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): Data size insufficient.",  buf,  0x12u);
    }

    uint64_t v78 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v78 = &off_4865A0;
    v78[2] = 561211770;
  }

  if (((*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 24LL))(a1, a2) & 1) == 0)
  {
    uint64_t v79 = (os_log_t *)sub_138E8(13);
    char v80 = *v79;
    if (*v79 && os_log_type_enabled(*v79, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 626;
      _os_log_impl( &dword_0,  v80,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnsupportedOperationError): Property is not settable.",  buf,  0x12u);
    }

    int v81 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v81 = &off_4865A0;
    v81[2] = 1970171760;
  }

  int v12 = *a2;
  if (*a2 <= 1986098019)
  {
    if (v12 == 1668443504)
    {
      if (!*(_BYTE *)(a1 + 469))
      {
        float v82 = (os_log_t *)sub_138E8(13);
        AudioObjectID v83 = *v82;
        if (*v82 && os_log_type_enabled(*v82, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 718;
          _os_log_impl( &dword_0,  v83,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }

        uint64_t v84 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v84, "Precondition failure.");
      }

      int v31 = (os_log_t *)sub_138E8(41);
      uint64_t v32 = *v31;
      if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_DEBUG))
      {
        sub_2CA1C(&__p, 1668443504LL);
        unsigned int v33 = v110 >= 0 ? &__p : (void **)__p;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 721;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)char v114 = v33;
        _os_log_impl( &dword_0,  v32,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d OutputVolumeControl_HAL_Common::SetPropertyData() - %s.",  buf,  0x1Cu);
        if (v110 < 0) {
          operator delete(__p);
        }
      }

      int v17 = (std::recursive_mutex *)(a1 + 400);
      std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 400));
      if (*(_BYTE *)(a1 + 468))
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v34 = *(std::__shared_weak_count **)(a1 + 288);
        if (v34)
        {
          uint64_t v35 = std::__shared_weak_count::lock(v34);
          *(void *)&_DWORD buf[8] = v35;
          if (v35)
          {
            std::string::size_type v36 = v35;
            uint64_t v37 = *(void *)(a1 + 280);
            *(void *)AudioObjectPropertyAddress buf = v37;
            if (v37) {
              (*(void (**)(uint64_t))(*(void *)v37 + 240LL))(v37);
            }
            p_shared_owners = (unint64_t *)&v36->__shared_owners_;
            do
              unint64_t v39 = __ldaxr(p_shared_owners);
            while (__stlxr(v39 - 1, p_shared_owners));
            if (!v39)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v36);
            }
          }
        }

        if (!a6)
        {
          unint64_t v101 = (os_log_t *)sub_138E8(13);
          int v102 = *v101;
          if (*v101 && os_log_type_enabled(*v101, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "StandardUtilities.h";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 148;
            _os_log_impl( &dword_0,  v102,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
          }

          uint64_t v103 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v103, "Precondition failure.");
        }

        if (a5 != 2)
        {
          double v40 = (os_log_t *)sub_138E8(13);
          float v41 = *v40;
          if (*v40)
          {
            if (os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "StandardUtilities.h";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 149;
              _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: sizeof(T) == inDataSize",  buf,  0x12u);
            }
          }
        }

        sub_1C2C48(a1, *a6);
        sub_1C71C0(a1);
      }

      else
      {
        uint64_t v55 = (os_log_t *)sub_138E8(41);
        char v56 = *v55;
        if (*v55 && os_log_type_enabled(*v55, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(&__p, 1668443504LL);
          uint64_t v57 = v110 >= 0 ? &__p : (void **)__p;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 737;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)char v114 = v57;
          _os_log_impl( &dword_0,  v56,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d OutputVolumeControl_HAL_Common::SetPropertyData() - %s no ramp in progress to cancel.",  buf,  0x1Cu);
          if (v110 < 0) {
            operator delete(__p);
          }
        }
      }

      goto LABEL_133;
    }

    if (v12 == 1836414053)
    {
      *(_BYTE *)(a1 + 309) = sub_1C7038(a5, (unsigned int *)a6) == 1;
      sub_1C5544(a1, 2);
      return;
    }

    if (v12 != 1918987632) {
      goto LABEL_67;
    }
    if (!*(_BYTE *)(a1 + 469))
    {
      int v85 = (os_log_t *)sub_138E8(13);
      int v86 = *v85;
      if (*v85 && os_log_type_enabled(*v85, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 705;
        _os_log_impl(&dword_0, v86, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }

      float v87 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v87, "Precondition failure.");
    }

    int v14 = (os_log_t *)sub_138E8(41);
    __int16 v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_DEBUG))
    {
      sub_2CA1C(&__p, 1918987632LL);
      double v16 = v110 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 708;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)char v114 = v16;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d OutputVolumeControl_HAL_Common::SetPropertyData() - %s.",  buf,  0x1Cu);
      if (v110 < 0) {
        operator delete(__p);
      }
    }

    int v17 = (std::recursive_mutex *)(a1 + 400);
    std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 400));
    if (!a6)
    {
      int v91 = (os_log_t *)sub_138E8(13);
      unint64_t v92 = *v91;
      if (*v91 && os_log_type_enabled(*v91, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "StandardUtilities.h";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 148;
        _os_log_impl(&dword_0, v92, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }

      float v93 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v93, "Precondition failure.");
    }

    if (a5 != 24)
    {
      unint64_t v18 = (os_log_t *)sub_138E8(13);
      unint64_t v19 = *v18;
      if (*v18)
      {
        if (os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "StandardUtilities.h";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 149;
          _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: sizeof(T) == inDataSize",  buf,  0x12u);
        }
      }
    }

    *(_OWORD *)CFDictionaryRef theDict = *(_OWORD *)a6;
    CFTypeRef cf = (CFTypeRef)*((void *)a6 + 2);
    uint64_t v111 = 0LL;
    uint64_t v112 = 0LL;
    unint64_t v20 = *(std::__shared_weak_count **)(a1 + 288);
    if (v20)
    {
      uint64_t v21 = std::__shared_weak_count::lock(v20);
      uint64_t v112 = v21;
      if (v21)
      {
        uint64_t v22 = *(void *)(a1 + 280);
        uint64_t v111 = v22;
        if (v22)
        {
          *(_BYTE *)(a1 + 468) = 1;
          CFTypeRef v23 = cf;
          if (cf)
          {
            CFRetain(cf);
            CFTypeID v24 = CFGetTypeID(cf);
            if (v24 != CFStringGetTypeID())
            {
              CFRelease(cf);
              CFTypeRef v23 = 0LL;
            }
          }

          float v25 = *(const void **)(a1 + 472);
          *(void *)(a1 + 472) = v23;
          if (v25) {
            CFRelease(v25);
          }
          float v26 = *(float *)theDict;
          *(_DWORD *)(a1 + 464) = theDict[0];
          unint64_t v27 = (os_log_t *)sub_138E8(41);
          uint64_t v28 = *v27;
          if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_DEBUG))
          {
            __int16 v29 = *(const __CFString **)(a1 + 472);
            if (v29)
            {
              sub_48100((uint64_t)&__p, v29);
              if (v110 >= 0) {
                p_p = (const char *)&__p;
              }
              else {
                p_p = (const char *)__p;
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
              *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1719;
              *(_WORD *)&_BYTE buf[18] = 2048;
              *(double *)char v114 = v26;
              *(_WORD *)&v114[8] = 2048;
              *(double *)&v114[10] = *((float *)theDict + 1);
              *(_WORD *)&v114[18] = 2048;
              double v115 = *(float *)&theDict[1];
              __int16 v116 = 2080;
              char v117 = p_p;
              _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d OutputVolumeControl_HAL_Common::BeginSoftwareVolumeRamp() - target volume %.2f, upward ramp du ration %.2fms, downward ramp duration %.2fms, category %s.",  buf,  0x3Au);
              if (v110 < 0) {
                operator delete(__p);
              }
            }

            else
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
              *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1719;
              *(_WORD *)&_BYTE buf[18] = 2048;
              *(double *)char v114 = v26;
              *(_WORD *)&v114[8] = 2048;
              *(double *)&v114[10] = *((float *)theDict + 1);
              *(_WORD *)&v114[18] = 2048;
              double v115 = *(float *)&theDict[1];
              __int16 v116 = 2080;
              char v117 = "unknown";
              _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d OutputVolumeControl_HAL_Common::BeginSoftwareVolumeRamp() - target volume %.2f, upward ramp du ration %.2fms, downward ramp duration %.2fms, category %s.",  buf,  0x3Au);
            }
          }

          (*(void (**)(uint64_t, CFDictionaryRef *))(*(void *)v22 + 232LL))(v22, theDict);
          *(void *)AudioObjectPropertyAddress buf = &off_474A88;
          *(void *)&_DWORD buf[8] = a1;
          *(void *)&v114[4] = buf;
          (*(void (**)(uint64_t, _BYTE *))(*(void *)v22 + 248LL))(v22, buf);
          std::mutex v69 = *(void **)&v114[4];
          if (*(_BYTE **)&v114[4] == buf)
          {
            uint64_t v70 = 4LL;
            std::mutex v69 = buf;
          }

          else
          {
            if (!*(void *)&v114[4])
            {
LABEL_128:
              float v71 = (unint64_t *)&v21->__shared_owners_;
              do
                unint64_t v72 = __ldaxr(v71);
              while (__stlxr(v72 - 1, v71));
              if (!v72)
              {
                ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                std::__shared_weak_count::__release_weak(v21);
              }

LABEL_176:
          int v100 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v100 = &off_4865A0;
          CFTypeRef v100[2] = 1852797029;
        }

        char v98 = (os_log_t *)sub_138E8(13);
        uint64_t v95 = *v98;
        if (!*v98 || !os_log_type_enabled(*v98, OS_LOG_TYPE_ERROR)) {
          goto LABEL_176;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 690;
        char v96 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioDevicePropertyDucking - kVirtual"
              "AudioPlugInDuckingGainKey is required";
      }

      else
      {
        unint64_t v97 = (os_log_t *)sub_138E8(13);
        uint64_t v95 = *v97;
        if (!*v97 || !os_log_type_enabled(*v97, OS_LOG_TYPE_ERROR)) {
          goto LABEL_176;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 689;
        char v96 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioDevicePropertyDucking - kVirtual"
              "AudioPlugInDuckingEnableKey is required";
      }
    }

    else
    {
      __int16 v94 = (os_log_t *)sub_138E8(13);
      uint64_t v95 = *v94;
      if (!*v94 || !os_log_type_enabled(*v94, OS_LOG_TYPE_ERROR)) {
        goto LABEL_176;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 688;
      char v96 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): kVirtualAudioDevicePropertyDucking - kVirtualAu"
            "dioPlugInDuckingTypeKey is required";
    }

void sub_1C1198( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, std::__shared_weak_count *a27)
{
}

BOOL sub_1C12E0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    int v45 = (os_log_t *)sub_138E8(13);
    uint64_t v46 = *v45;
    if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v55 = 1024;
      *(_DWORD *)char v56 = 1451;
      _os_log_impl( &dword_0,  v46,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): Unsupported selector, scope, or element",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  int v8 = *a2;
  if (*a2 <= 1919774834)
  {
    if (v8 == 1064725619) {
      return 1LL;
    }
    if (v8 == 1684633187)
    {
LABEL_10:
      int v52 = *a2;
      uint64_t v53 = *(void *)(a1 + 128);
      uint64_t v10 = *(void **)(a1 + 344);
      *(void *)AudioObjectPropertyAddress buf = *(void *)a2;
      *(_DWORD *)&_DWORD buf[8] = a2[2];
      *(void *)&v56[2] = a3;
      *(void *)&v56[10] = a4;
      sub_1885D4(v10, (unsigned int *)&v52, (unsigned int *)buf);
      if ((*(unsigned int (**)(void, int *))(**(void **)(a1 + 96) + 16LL))(*(void *)(a1 + 96), &v52))
      {
        uint64_t v11 = sub_F31A4(*(void *)(a1 + 96), &v52, (uint64_t)sub_1C30A4, a1, 1);
        if ((_DWORD)v11)
        {
          int v12 = (os_log_t *)sub_138E8(18);
          int v13 = *v12;
          if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
          {
            sub_2CA1C(v50, v11);
            int v14 = v51;
            __int16 v15 = *(_BYTE **)v50;
            uint64_t v16 = *(void *)(a1 + 96);
            sub_2CA1C(__p, *a2);
            int v17 = v50;
            if (v14 < 0) {
              int v17 = v15;
            }
            if (v49 >= 0) {
              unint64_t v18 = __p;
            }
            else {
              unint64_t v18 = (void **)__p[0];
            }
            int v19 = *(_DWORD *)(a1 + 128);
            int v20 = *(_DWORD *)(a1 + 132);
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
            *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
            __int16 v55 = 1024;
            *(_DWORD *)char v56 = 1500;
            *(_WORD *)&v56[4] = 2080;
            *(void *)&v56[6] = v17;
            *(_WORD *)&v56[14] = 2048;
            *(void *)&v56[16] = v16;
            __int16 v57 = 2080;
            *(void *)uint64_t v58 = v18;
            *(_WORD *)&v58[8] = 1024;
            int v59 = v19;
            __int16 v60 = 1024;
            int v61 = v20;
            _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d AddPropertyListener() failed with status '%s'. mPhysicalDevice: %p; selector: '%s'; scope: %u; element: %u.",
              buf,
              0x3Cu);
            if (v49 < 0) {
              operator delete(__p[0]);
            }
            if (v51 < 0) {
              operator delete(*(void **)v50);
            }
          }

          return 0LL;
        }
      }

      return 1LL;
    }

    int v9 = 1836414053;
    goto LABEL_9;
  }

  if (v8 <= 1986817376)
  {
    if (v8 == 1919774835)
    {
      float v25 = *(void **)(a1 + 344);
      *(_DWORD *)char v50 = 1919774835;
      *(void *)&v50[4] = *(void *)(a1 + 128);
      *(void *)AudioObjectPropertyAddress buf = *(void *)a2;
      *(_DWORD *)&_DWORD buf[8] = a2[2];
      *(void *)&v56[2] = a3;
      *(void *)&v56[10] = a4;
      sub_1885D4(v25, (unsigned int *)v50, (unsigned int *)buf);
      return *(_BYTE *)(a1 + 469) != 0;
    }

    int v9 = 1986229104;
LABEL_9:
    if (v8 == v9) {
      goto LABEL_10;
    }
LABEL_26:
    uint64_t v22 = (os_log_t *)sub_138E8(13);
    CFTypeRef v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v55 = 1024;
      *(_DWORD *)char v56 = 1518;
      _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): Unsupported selector, scope, or element",  buf,  0x12u);
    }

    CFTypeID v24 = __cxa_allocate_exception(0x10uLL);
    *(void *)CFTypeID v24 = &off_4865A0;
    v24[2] = 2003332927;
  }

  if (v8 == 1986817377)
  {
    float v26 = *(void **)(a1 + 344);
    *(_DWORD *)char v50 = 1986817377;
    *(void *)&v50[4] = *(void *)(a1 + 128);
    *(void *)AudioObjectPropertyAddress buf = *(void *)a2;
    *(_DWORD *)&_DWORD buf[8] = a2[2];
    *(void *)&v56[2] = a3;
    *(void *)&v56[10] = a4;
    sub_1885D4(v26, (unsigned int *)v50, (unsigned int *)buf);
  }

  else if (v8 != 1987013741)
  {
    goto LABEL_26;
  }

  int v52 = 1987013732;
  uint64_t v53 = *(void *)(a1 + 128);
  unint64_t v27 = *(void **)(a1 + 344);
  *(void *)AudioObjectPropertyAddress buf = *(void *)a2;
  *(_DWORD *)&_DWORD buf[8] = a2[2];
  *(void *)&v56[2] = a3;
  *(void *)&v56[10] = a4;
  sub_1885D4(v27, (unsigned int *)&v52, (unsigned int *)buf);
  if (!*(_BYTE *)(a1 + 311)) {
    return 1LL;
  }
  uint64_t v28 = sub_F31A4(*(void *)(a1 + 96), &v52, (uint64_t)sub_1C30A4, a1, 1);
  BOOL v21 = (_DWORD)v28 == 0;
  if ((_DWORD)v28)
  {
    __int16 v29 = (os_log_t *)sub_138E8(18);
    int v30 = *v29;
    if (*v29)
    {
      if (os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v50, v28);
        int v31 = v51;
        uint64_t v32 = *(_BYTE **)v50;
        uint64_t v33 = *(void *)(a1 + 96);
        sub_2CA1C(__p, 1987013732LL);
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v34 = v50;
        if (v31 < 0) {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v34 = v32;
        }
        if (v49 >= 0) {
          uint64_t v35 = __p;
        }
        else {
          uint64_t v35 = (void **)__p[0];
        }
        int v36 = *(_DWORD *)(a1 + 128);
        int v37 = *(_DWORD *)(a1 + 132);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
        *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
        __int16 v55 = 1024;
        *(_DWORD *)char v56 = 1477;
        *(_WORD *)&v56[4] = 2080;
        *(void *)&v56[6] = v34;
        *(_WORD *)&v56[14] = 2048;
        *(void *)&v56[16] = v33;
        __int16 v57 = 2080;
        *(void *)uint64_t v58 = v35;
        *(_WORD *)&v58[8] = 1024;
        int v59 = v36;
        __int16 v60 = 1024;
        int v61 = v37;
        _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_ERROR,  "%25s:%-5d AddPropertyListener() failed with status '%s'. mPhysicalDevice: %p; selector: '%s'; scope: %u; element: %u.",
          buf,
          0x3Cu);
        if (v49 < 0) {
          operator delete(__p[0]);
        }
        if (v51 < 0) {
          operator delete(*(void **)v50);
        }
      }
    }
  }

  double v38 = (os_log_t *)sub_138E8(18);
  unint64_t v39 = *v38;
  if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v40 = *(void *)(a1 + 96);
    sub_2CA1C(v50, 1987013732LL);
    float v41 = v51 >= 0 ? v50 : *(_BYTE **)v50;
    int v42 = *(_DWORD *)(a1 + 128);
    int v43 = *(_DWORD *)(a1 + 132);
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
    *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
    __int16 v55 = 1024;
    *(_DWORD *)char v56 = 1478;
    *(_WORD *)&v56[4] = 2048;
    *(void *)&v56[6] = v40;
    *(_WORD *)&v56[14] = 2080;
    *(void *)&v56[16] = v41;
    __int16 v57 = 1024;
    *(_DWORD *)uint64_t v58 = v42;
    *(_WORD *)&v58[4] = 1024;
    *(_DWORD *)&v58[6] = v43;
    _os_log_impl( &dword_0,  v39,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d AddPropertyListener() succeeded. mPhysicalDevice: %p; selector: '%s'; scope: %u; element: %u.",
      buf,
      0x32u);
    if (v51 < 0) {
      operator delete(*(void **)v50);
    }
  }

  return v21;
}

void sub_1C1974(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1C1998(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    CFTypeID v24 = (os_log_t *)sub_138E8(13);
    float v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v32 = 1024;
      *(_DWORD *)uint64_t v33 = 1528;
      _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): Unsupported selector, scope, or element",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  int v8 = *a2;
  if (*a2 <= 1919774834)
  {
    if (v8 == 1064725619) {
      return 1LL;
    }
    if (v8 == 1684633187) {
      goto LABEL_10;
    }
    int v9 = 1836414053;
LABEL_9:
    if (v8 == v9)
    {
LABEL_10:
      *(_DWORD *)__int128 __p = *a2;
      *(void *)&__p[4] = *(void *)(a1 + 128);
      uint64_t v10 = *(uint64_t ***)(a1 + 344);
      *(void *)AudioObjectPropertyAddress buf = *(void *)a2;
      *(_DWORD *)&_DWORD buf[8] = a2[2];
      *(void *)&v33[2] = a3;
      *(void *)&v33[10] = a4;
      sub_18803C(v10, (unsigned int *)__p, (unsigned int *)buf);
      return 1LL;
    }

void sub_1C1DDC(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, int a5)
{
  *(_DWORD *)(a1 + 136) = a5;
  if (a2[1] < *a2)
  {
    uint64_t v10 = (os_log_t *)sub_138E8(13);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      double v13 = *a2;
      uint64_t v12 = *((void *)a2 + 1);
      *(_DWORD *)__int128 __p = 136315906;
      *(void *)&__p[4] = "OutputVolumeControl_HAL_Common.cpp";
      *(_WORD *)&_BYTE __p[12] = 1024;
      *(_DWORD *)&__p[14] = 858;
      *(_WORD *)&__p[18] = 2048;
      *(void *)&__p[20] = v12;
      __int16 v16 = 2048;
      double v17 = v13;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::invalid_argument): Argument desiredVolumeCurveRangeDB's mMaximum (%f) < mMinimum (%f)",  __p,  0x26u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1013D0(exception, "Argument desiredVolumeCurveRangeDB's mMaximum (%f) < mMinimum (%f)");
  }

  int v9 = operator new(0x10uLL);
  *(void *)&__p[8] = v9 + 1;
  *(void *)&__p[16] = v9 + 1;
  *int v9 = *(_OWORD *)a2;
  *(void *)__int128 __p = v9;
  sub_1C44F4(a1, (double **)__p, a3, a4);
  if (*(void *)__p) {
    operator delete(*(void **)__p);
  }
  *(_BYTE *)(a1 + 312) = 0;
}

void sub_1C1F48( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
}

void sub_1C1F78(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_DWORD *)(a1 + 136) = a4;
  memset(__p, 0, sizeof(__p));
  sub_A9784(__p, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  sub_1C44F4(a1, (double **)__p, 0LL, a3);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  *(_BYTE *)(a1 + 312) = 0;
}

void sub_1C1FE8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_1C2000(uint64_t a1)
{
  return *(float *)(a1 + 160);
}

double sub_1C2010(uint64_t a1)
{
  return *(double *)(a1 + 144);
}

uint64_t sub_1C2018(uint64_t a1)
{
  return a1 + 168;
}

void sub_1C2024(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 310))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 1836414053;
    *(void *)&uint8_t buf[4] = *(void *)(a1 + 128);
    LODWORD(__p[0]) = 1;
    (*(void (**)(void, _BYTE *, void, void, uint64_t, void **))(**(void **)(a1 + 96) + 48LL))( *(void *)(a1 + 96),  buf,  0LL,  0LL,  4LL,  __p);
    return;
  }

  uint64_t v27 = 0LL;
  char v28 = 0LL;
  int v2 = *(std::__shared_weak_count **)(a1 + 288);
  if (!v2)
  {
    int v3 = 0LL;
    goto LABEL_12;
  }

  int v3 = std::__shared_weak_count::lock(v2);
  char v28 = v3;
  if (!v3 || (uint64_t v4 = *(void *)(a1 + 280), (v27 = v4) == 0))
  {
LABEL_12:
    uint64_t v12 = sub_138E8(18);
    uint64_t v13 = sub_138E8(38);
    char v14 = 0;
    uint64_t v15 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v16 = *(void *)(v12 + 8);
    while (1)
    {
      uint64_t v17 = *(int *)&buf[4 * v15];
      char v18 = v14;
      if (((v16 & v17) != 0) != ((*(void *)(v13 + 8) & v17) != 0)) {
        break;
      }
      char v14 = 1;
      uint64_t v15 = 1LL;
      if ((v18 & 1) != 0) {
        goto LABEL_18;
      }
    }

    if ((v16 & v17) == 0) {
      uint64_t v12 = v13;
    }
LABEL_18:
    uint64_t v19 = *(os_log_s **)v12;
    if (v19 && os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      sub_23FE8((uint64_t)__p, (os_unfair_lock_t)(*(void *)(a1 + 96) + 8LL));
      int v20 = v26 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v30 = 1024;
      int v31 = 796;
      __int16 v32 = 2080;
      uint64_t v33 = v20;
      _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Enabling software mute, but software volume command expired on VAD '%s'.",  buf,  0x1Cu);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }

void sub_1C2368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

void sub_1C2394(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 310))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 1836414053;
    *(void *)&uint8_t buf[4] = *(void *)(a1 + 128);
    LODWORD(__p[0]) = 0;
    (*(void (**)(void, _BYTE *, void, void, uint64_t, void **))(**(void **)(a1 + 96) + 48LL))( *(void *)(a1 + 96),  buf,  0LL,  0LL,  4LL,  __p);
    return;
  }

  uint64_t v27 = 0LL;
  char v28 = 0LL;
  int v2 = *(std::__shared_weak_count **)(a1 + 288);
  if (!v2)
  {
    int v3 = 0LL;
    goto LABEL_12;
  }

  int v3 = std::__shared_weak_count::lock(v2);
  char v28 = v3;
  if (!v3 || (uint64_t v4 = *(void *)(a1 + 280), (v27 = v4) == 0))
  {
LABEL_12:
    uint64_t v12 = sub_138E8(18);
    uint64_t v13 = sub_138E8(38);
    char v14 = 0;
    uint64_t v15 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v16 = *(void *)(v12 + 8);
    while (1)
    {
      uint64_t v17 = *(int *)&buf[4 * v15];
      char v18 = v14;
      if (((v16 & v17) != 0) != ((*(void *)(v13 + 8) & v17) != 0)) {
        break;
      }
      char v14 = 1;
      uint64_t v15 = 1LL;
      if ((v18 & 1) != 0) {
        goto LABEL_18;
      }
    }

    if ((v16 & v17) == 0) {
      uint64_t v12 = v13;
    }
LABEL_18:
    uint64_t v19 = *(os_log_s **)v12;
    if (v19 && os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      sub_23FE8((uint64_t)__p, (os_unfair_lock_t)(*(void *)(a1 + 96) + 8LL));
      int v20 = v26 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v30 = 1024;
      int v31 = 820;
      __int16 v32 = 2080;
      uint64_t v33 = v20;
      _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Disabling software mute, but software volume command expired on VAD '%s'.",  buf,  0x1Cu);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }

void sub_1C26D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

BOOL sub_1C2700(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 310))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 1836414053;
    *(void *)&uint8_t buf[4] = *(void *)(a1 + 128);
    LODWORD(__p[0]) = 0;
    LODWORD(v20) = 4;
    (*(void (**)(void, _BYTE *, void, void, uint64_t *, void **))(**(void **)(a1 + 96) + 40LL))( *(void *)(a1 + 96),  buf,  0LL,  0LL,  &v20,  __p);
    return LODWORD(__p[0]) == 1;
  }

  uint64_t v20 = 0LL;
  int v21 = 0LL;
  int v3 = *(std::__shared_weak_count **)(a1 + 288);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    int v21 = v4;
    if (v4)
    {
      uint64_t v5 = *(void *)(a1 + 280);
      uint64_t v20 = v5;
      if (v5)
      {
        if (*(void *)(a1 + 320)) {
          BOOL v2 = 0LL;
        }
        else {
          BOOL v2 = (*(unsigned int (**)(uint64_t))(*(void *)v5 + 112LL))(v5) == 0;
        }
LABEL_23:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          unint64_t v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }

        return v2;
      }
    }
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  uint64_t v6 = sub_138E8(18);
  uint64_t v7 = sub_138E8(38);
  char v8 = 0;
  uint64_t v9 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v10 = *(void *)(v6 + 8);
  while (1)
  {
    uint64_t v11 = *(int *)&buf[4 * v9];
    char v12 = v8;
    if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
      break;
    }
    char v8 = 1;
    uint64_t v9 = 1LL;
    if ((v12 & 1) != 0) {
      goto LABEL_15;
    }
  }

  if ((v10 & v11) == 0) {
    uint64_t v6 = v7;
  }
LABEL_15:
  uint64_t v13 = *(os_log_s **)v6;
  if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    sub_23FE8((uint64_t)__p, (os_unfair_lock_t)(*(void *)(a1 + 96) + 8LL));
    char v14 = v19 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
    __int16 v23 = 1024;
    int v24 = 846;
    __int16 v25 = 2080;
    char v26 = v14;
    _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Is muted: software volume command expired on VAD '%s'.",  buf,  0x1Cu);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
  }

  BOOL v2 = 0LL;
  if (v4) {
    goto LABEL_23;
  }
  return v2;
}

void sub_1C2954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

BOOL sub_1C2978(uint64_t a1)
{
  unint64_t v2 = sub_5C2F8(*(void *)(a1 + 96));
  *((void *)&v4 + 1) = v3;
  *(void *)&__int128 v4 = v2;
  return ((v4 >> 32) & 0xFF00000000LL) == 0 || HIDWORD(v2) == 0LL || *(_DWORD *)(a1 + 264) != 1;
}

uint64_t sub_1C29EC(uint64_t a1)
{
  return sub_1C2A24(a1 - 80);
}

void sub_1C29F4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1C2A24(a1 - 80);
  operator delete(v1);
}

void sub_1C2A0C(uint64_t a1)
{
}

void sub_1C2A14(uint64_t a1)
{
}

BOOL sub_1C2A1C(uint64_t a1)
{
  return sub_1C2700(a1 - 80);
}

uint64_t sub_1C2A24(uint64_t a1)
{
  *(void *)a1 = off_4748D8;
  *(void *)(a1 + 80) = off_4749A8;
  uint64_t v2 = *(void *)(a1 + 352);
  if (v2)
  {
    if (*(uint64_t *)(v2 + 8) >= 1)
    {
      uint64_t v3 = (os_log_t *)sub_138E8(18);
      __int128 v4 = *v3;
      if (*v3)
      {
        if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v5 = *(void *)(a1 + 352);
          if (v5) {
            uint64_t v5 = *(void *)(v5 + 8) + 1LL;
          }
          v18[0] = 136315650;
          *(void *)&v18[1] = "OutputVolumeControl_HAL_Common.cpp";
          __int16 v19 = 1024;
          int v20 = 235;
          __int16 v21 = 2048;
          uint64_t v22 = v5;
          _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d AudioObjectPropertyListenerRelay ref count is currently greater than one (%lu).",  (uint8_t *)v18,  0x1Cu);
        }
      }
    }
  }

  uint64_t v6 = *(void *)(a1 + 96);
  if (v6)
  {
    if (!*(_BYTE *)(a1 + 468)) {
      goto LABEL_32;
    }
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 288);
    if (v7)
    {
      char v8 = std::__shared_weak_count::lock(v7);
      if (v8)
      {
        uint64_t v9 = v8;
        uint64_t v10 = *(void *)(a1 + 280);
        if (v10) {
          (*(void (**)(uint64_t))(*(void *)v10 + 240LL))(v10);
        }
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          unint64_t v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }

    sub_1C2C48(a1, 1);
    uint64_t v6 = *(void *)(a1 + 96);
    if (v6)
    {
LABEL_32:
      if (*(_BYTE *)(a1 + 313))
      {
        strcpy((char *)v18, "empsbolg");
        BYTE1(v18[2]) = 0;
        HIWORD(v18[2]) = 0;
        sub_F35C8(v6, v18, (uint64_t)sub_1C30A4, a1);
      }
    }
  }

  uint64_t v13 = *(const void **)(a1 + 472);
  if (v13) {
    CFRelease(v13);
  }
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 400));
  char v14 = *(dispatch_object_s **)(a1 + 392);
  if (v14) {
    dispatch_release(v14);
  }
  uint64_t v15 = *(void **)(a1 + 360);
  if (v15)
  {
    *(void *)(a1 + 368) = v15;
    operator delete(v15);
  }

  sub_7A768(a1 + 344);
  unint64_t v16 = *(std::__shared_weak_count **)(a1 + 288);
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  sub_32C8C(*(void **)(a1 + 232));
  sub_32C8C(*(void **)(a1 + 184));
  sub_68314((void *)(a1 + 104));
  sub_F3008(a1);
  return a1;
}

void sub_1C2C38(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1C2C48(uint64_t a1, int a2)
{
  if (!*(_BYTE *)(a1 + 469))
  {
    uint64_t v9 = (os_log_t *)sub_138E8(41);
    uint64_t v10 = *v9;
    if (*v9)
    {
      if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
        __int16 v33 = 1024;
        int v34 = 1760;
        _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d OutputVolumeControl_HAL_Common::EndSoftwareVolumeRamp() - ramping not supported.",  buf,  0x12u);
      }
    }
  }

  if (!*(void *)(a1 + 96))
  {
    uint64_t v11 = (os_log_t *)sub_138E8(41);
    unint64_t v12 = *v11;
    if (*v11)
    {
      if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
        __int16 v33 = 1024;
        int v34 = 1763;
        _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d OutputVolumeControl_HAL_Common::EndSoftwareVolumeRamp() - no physical device.",  buf,  0x12u);
      }
    }
  }

  uint64_t v29 = 0LL;
  __int16 v30 = 0LL;
  __int128 v4 = *(std::__shared_weak_count **)(a1 + 288);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    __int16 v30 = v5;
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 280);
      uint64_t v29 = v6;
      if (v6)
      {
        *(void *)&v36[4] = 0LL;
        (*(void (**)(uint64_t, _BYTE *))(*(void *)v6 + 248LL))(v6, buf);
        uint64_t v7 = *(void **)&v36[4];
        if (*(_BYTE **)&v36[4] == buf)
        {
          uint64_t v8 = 4LL;
          uint64_t v7 = buf;
        }

        else
        {
          if (!*(void *)&v36[4])
          {
LABEL_23:
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              unint64_t v16 = __ldaxr(p_shared_owners);
            while (__stlxr(v16 - 1, p_shared_owners));
            if (!v16)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }

            goto LABEL_27;
          }

          uint64_t v8 = 5LL;
        }

        (*(void (**)(void))(*v7 + 8 * v8))();
        goto LABEL_23;
      }
    }
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  uint64_t v13 = (os_log_t *)sub_138E8(41);
  char v14 = *v13;
  if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
    __int16 v33 = 1024;
    int v34 = 1772;
    _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d OutputVolumeControl_HAL_Common::EndSoftwareVolumeRamp() - unable to lock software volume command.",  buf,  0x12u);
  }

  if (v5) {
    goto LABEL_23;
  }
LABEL_27:
  *(_BYTE *)(a1 + 468) = 0;
  if (*(_BYTE *)(a1 + 469) && *(void *)(a1 + 96))
  {
    float v17 = *(float *)(a1 + 296);
    if (*(void *)(a1 + 472)) {
      char v18 = *(const __CFString **)(a1 + 472);
    }
    else {
      char v18 = @"unknown";
    }
    LODWORD(v29) = *(_DWORD *)(a1 + 296);
    __int16 v30 = (void *)v18;
    __int16 v31 = a2;
    __int16 v19 = (os_log_t *)sub_138E8(41);
    int v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v33 = 1024;
      int v34 = 1787;
      __int16 v35 = 2112;
      *(void *)__int16 v36 = v18;
      *(_WORD *)&v36[8] = 1024;
      *(_DWORD *)&v36[10] = a2;
      __int16 v37 = 2048;
      double v38 = v17;
      _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d OutputVolumeControl_HAL_Common::EndSoftwareVolumeRamp() - notifying physical device that ramp ended fo r category %@ with reason %u. Final volume %.2f.",  buf,  0x2Cu);
    }

    uint64_t v21 = *(void *)(a1 + 96);
    strcpy(buf, "revabolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    uint64_t v22 = sub_F2FAC(v21);
    if ((_DWORD)v22)
    {
      uint64_t v23 = v22;
      int v24 = (os_log_t *)sub_138E8(41);
      __int16 v25 = *v24;
      if (*v24)
      {
        if (os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(__p, v23);
          if (v28 >= 0) {
            char v26 = __p;
          }
          else {
            char v26 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
          __int16 v33 = 1024;
          int v34 = 1795;
          __int16 v35 = 2080;
          *(void *)__int16 v36 = v26;
          _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_ERROR,  "%25s:%-5d OutputVolumeControl_HAL_Common::EndSoftwareVolumeRamp() - failed to set ramp end info on device error %s.",  buf,  0x1Cu);
          if (v28 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }

void sub_1C3054( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  int v20 = a18;
  if (a18 == v18)
  {
    uint64_t v21 = 4LL;
    int v20 = &a15;
  }

  else
  {
    if (!a18) {
      goto LABEL_6;
    }
    uint64_t v21 = 5LL;
  }

  (*(void (**)(void))(*(void *)v20 + 8 * v21))();
LABEL_6:
  sub_7A768((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_1C30A4(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
  {
    uint64_t v103 = (os_log_t *)sub_138E8(13);
    float64x2_t v104 = *v103;
    if (*v103 && os_log_type_enabled(*v103, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v122 = 1024;
      int v123 = 1594;
      _os_log_impl( &dword_0,  v104,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): inNumberAddresses is 0.",  buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "inNumberAddresses is 0.");
  }

  if (!a4)
  {
    double v106 = (os_log_t *)sub_138E8(13);
    int v107 = *v106;
    if (*v106 && os_log_type_enabled(*v106, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v122 = 1024;
      int v123 = 1595;
      _os_log_impl( &dword_0,  v107,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [inClientData is NULL]: inClientData is NULL.",  buf,  0x12u);
    }

    float v108 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v108, "inClientData is NULL.");
  }

  if (!a3)
  {
    unint64_t v109 = (os_log_t *)sub_138E8(13);
    char v110 = *v109;
    if (*v109 && os_log_type_enabled(*v109, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v122 = 1024;
      int v123 = 1596;
      _os_log_impl( &dword_0,  v110,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [inAddresses is NULL]: inAddresses is NULL.",  buf,  0x12u);
    }

    uint64_t v111 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v111, "inAddresses is NULL.");
  }

  if (*(_DWORD *)(a3 + 8) != *(_DWORD *)(a4 + 132))
  {
    uint64_t v112 = (os_log_t *)sub_138E8(13);
    unsigned int v113 = *v112;
    if (*v112 && os_log_type_enabled(*v112, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v122 = 1024;
      int v123 = 1600;
      _os_log_impl( &dword_0,  v113,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): inAddresses[0].mElement != This->mElement.",  buf,  0x12u);
    }

    char v114 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v114, "inAddresses[0].mElement != This->mElement.");
  }

  uint64_t v115 = a4 + 168;
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 184LL))(a4);
  uint64_t v8 = 0LL;
  do
  {
    uint64_t v9 = (int *)(a3 + 12 * v8);
    int v10 = *(_DWORD *)(a4 + 128);
    int v11 = *v9;
    if (v9[1] != v10) {
      goto LABEL_98;
    }
    int v12 = *(_DWORD *)(a4 + 132);
    if (v11 == 1684633187)
    {
      if (*(_DWORD *)(a3 + 12 * v8 + 8) == v12) {
        char v13 = v7;
      }
      else {
        char v13 = 0;
      }
      if ((v13 & 1) != 0) {
        goto LABEL_16;
      }
      int v11 = 1684633187;
    }

    else
    {
      if (v11 != 1987013732) {
        goto LABEL_98;
      }
      int v11 = 1987013732;
      if (*(_DWORD *)(a3 + 12 * v8 + 8) == v12)
      {
        if (!v7) {
          goto LABEL_106;
        }
LABEL_16:
        int v119 = 4;
        float v120 = 0.0;
        uint64_t v14 = *(void *)(a4 + 96);
        *(_DWORD *)AudioObjectPropertyAddress buf = 1987013732;
        *(_DWORD *)&uint8_t buf[4] = v10;
        *(_DWORD *)&_DWORD buf[8] = v12;
        (*(void (**)(uint64_t, _BYTE *, void, void, int *, float *))(*(void *)v14 + 40LL))( v14,  buf,  0LL,  0LL,  &v119,  &v120);
        uint64_t v15 = sub_138E8(18);
        uint64_t v16 = sub_138E8(38);
        char v17 = 0;
        uint64_t v18 = 0LL;
        *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
        uint64_t v19 = *(void *)(v15 + 8);
        while (1)
        {
          uint64_t v20 = *(int *)&buf[4 * v18];
          char v21 = v17;
          if (((v19 & v20) != 0) != ((*(void *)(v16 + 8) & v20) != 0)) {
            break;
          }
          char v17 = 1;
          uint64_t v18 = 1LL;
          if ((v21 & 1) != 0) {
            goto LABEL_23;
          }
        }

        if ((v19 & v20) == 0) {
          uint64_t v15 = v16;
        }
LABEL_23:
        uint64_t v22 = *(os_log_s **)v15;
        if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          float v23 = *(float *)(a4 + 300);
          float v24 = v120;
          sub_23FE8((uint64_t)__p, (os_unfair_lock_t)(*(void *)(a4 + 96) + 8LL));
          __int16 v25 = __p;
          if (v118 < 0) {
            __int16 v25 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
          __int16 v122 = 1024;
          int v123 = 1626;
          __int16 v124 = 2048;
          *(double *)__int16 v125 = v23;
          *(_WORD *)&v125[8] = 2048;
          *(double *)&v125[10] = v24;
          __int16 v126 = 2080;
          __int16 v127 = v25;
          _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d CommittedHardwareVolumeDecibels %f dB vs hardwareVolumeDecibels %f dB on VAD '%s'.",  buf,  0x30u);
          if (v118 < 0) {
            operator delete(__p[0]);
          }
        }

        if (*(_DWORD *)(a4 + 264) == 1 || *(void *)(a4 + 320)) {
          goto LABEL_45;
        }
        char v26 = *(std::__shared_weak_count **)(a4 + 288);
        if (v26)
        {
          uint64_t v27 = std::__shared_weak_count::lock(v26);
          __p[1] = v27;
          if (v27)
          {
            char v28 = v27;
            uint64_t v29 = *(void **)(a4 + 280);
            __p[0] = v29;
            if (v29 && (*(unsigned int (**)(void *))(*(void *)v29 + 80LL))(v29))
            {
              float v30 = *(float *)(a4 + 300);
              float v31 = v120;
              uint64_t v32 = sub_138E8(18);
              uint64_t v33 = sub_138E8(38);
              char v34 = 0;
              uint64_t v35 = 0LL;
              float v36 = v30 - v31;
              *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
              uint64_t v37 = *(void *)(v32 + 8);
              while (1)
              {
                uint64_t v38 = *(int *)&buf[4 * v35];
                char v39 = v34;
                if (((v37 & v38) != 0) != ((*(void *)(v33 + 8) & v38) != 0)) {
                  break;
                }
                char v34 = 1;
                uint64_t v35 = 1LL;
                if ((v39 & 1) != 0) {
                  goto LABEL_119;
                }
              }

              if ((v37 & v38) == 0) {
                uint64_t v32 = v33;
              }
LABEL_119:
              int v100 = *(os_log_s **)v32;
              if (v100 && os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
                __int16 v122 = 1024;
                int v123 = 1639;
                __int16 v124 = 2048;
                *(double *)__int16 v125 = v36;
                _os_log_impl( &dword_0,  v100,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d PME ApplyHeadroom is active,  Not performing volume scalar adjustment, delta (Commited - Hardware) %f dB",  buf,  0x1Cu);
              }

              p_shared_owners = (unint64_t *)&v28->__shared_owners_;
              do
                unint64_t v102 = __ldaxr(p_shared_owners);
              while (__stlxr(v102 - 1, p_shared_owners));
              if (!v102)
              {
                ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                std::__shared_weak_count::__release_weak(v28);
              }

void sub_1C3E14( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_1C3E50(uint64_t a1, float a2)
{
  if (*(void *)(a1 + 192))
  {
    if (vabds_f32(a2, *(float *)(*(void *)(a1 + 176) + 36LL)) <= 0.001)
    {
      float v3 = *(float *)(*(void *)(a1 + 176) + 36LL);
      goto LABEL_5;
    }
  }

  else
  {
    float v3 = 0.0;
    if (fabsf(a2) <= 0.001)
    {
LABEL_5:
      if (v3 != sub_6461C(a1 + 168)) {
        goto LABEL_7;
      }
    }
  }

  if (!*(_BYTE *)(a1 + 309))
  {
    int v4 = 0;
    goto LABEL_9;
  }

void sub_1C41DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1C4218(uint64_t result, char a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = sub_138E8(18);
    uint64_t v4 = sub_138E8(38);
    char v5 = 0;
    uint64_t v6 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v7 = *(void *)(v3 + 8);
    while (1)
    {
      uint64_t v8 = *(int *)&buf[4 * v6];
      char v9 = v5;
      if (((v7 & v8) != 0) != ((*(void *)(v4 + 8) & v8) != 0)) {
        break;
      }
      char v5 = 1;
      uint64_t v6 = 1LL;
      if ((v9 & 1) != 0) {
        goto LABEL_8;
      }
    }

    if ((v7 & v8) == 0) {
      uint64_t v3 = v4;
    }
LABEL_8:
    uint64_t v10 = *(os_log_s **)v3;
    if (v10 && os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = *(unsigned __int8 *)(v2 + 309);
      sub_23FE8((uint64_t)__p, (os_unfair_lock_t)(*(void *)(v2 + 96) + 8LL));
      if (v14 >= 0) {
        char v12 = __p;
      }
      else {
        char v12 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v16 = 1024;
      int v17 = 1436;
      __int16 v18 = 1024;
      int v19 = v11;
      __int16 v20 = 2080;
      int v21 = v12;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d     Muting (explicitly muted: %u) on VAD '%s'.",  buf,  0x22u);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }

    return (*(uint64_t (**)(void))(**(void **)(v2 + 336) + 16LL))(*(void *)(v2 + 336));
  }

  return result;
}

void sub_1C43A8(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[36];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    v18[2] = v3;
    if (v3)
    {
      uint64_t v4 = v3;
      char v5 = (const void *)a1[35];
      v18[1] = v5;
      if (v5)
      {
        uint64_t v6 = a1[12];
        CFTypeRef cf = (CFTypeRef)0x676C6F6273706D65LL;
        int v17 = 0;
        unint64_t v7 = sub_5C2F8(v6);
        uint64_t v9 = v8;
        uint64_t v10 = 0LL;
        *((void *)&v11 + 1) = v9;
        *(void *)&__int128 v11 = v7;
        if (((v11 >> 32) & 0xFF00000000LL) != 0 && (v7 & 0x300000000LL) != 0)
        {
          (*(void (**)(CFTypeRef *__return_ptr))(*(void *)a1[12] + 128LL))(&cf);
          CFTypeRef v13 = cf;
          if (cf) {
            CFRetain(cf);
          }
          sub_7F234(v18, v13);
          if (v18[0]) {
            CFRelease(v18[0]);
          }
          sub_19DFC((uint64_t)&cf);
          uint64_t v10 = 0x100000000LL;
        }

        (*(void (**)(const void *, uint64_t))(*(void *)v5 + 32LL))(v5, v10);
      }

      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        unint64_t v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }

void sub_1C44CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_19DFC((uint64_t)va);
  sub_7A768((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1C44F4(uint64_t a1, double **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2[1];
  if (*a2 == v4)
  {
    int v123 = (os_log_t *)sub_138E8(13);
    __int16 v124 = *v123;
    if (*v123 && os_log_type_enabled(*v123, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 866;
      _os_log_impl( &dword_0,  v124,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::invalid_argument): Empty vector of curve ranges",  buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1013D0(exception, "Empty vector of curve ranges");
  }

  if (*(v4 - 1) < **a2)
  {
    __int16 v126 = (os_log_t *)sub_138E8(13);
    __int16 v127 = *v126;
    if (*v126 && os_log_type_enabled(*v126, OS_LOG_TYPE_ERROR))
    {
      uint64_t v128 = *((void *)a2[1] - 1);
      uint64_t v129 = *(void *)*a2;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 867;
      *(_WORD *)&_BYTE buf[18] = 2048;
      *(void *)&_BYTE buf[20] = v128;
      *(_WORD *)&_BYTE buf[28] = 2048;
      *(void *)&_BYTE buf[30] = v129;
      _os_log_impl( &dword_0,  v127,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::invalid_argument): Argument desiredVolumeCurveRangeDB's mMaximum (%f) < mMinimum (%f)",  buf,  0x26u);
    }

    char v130 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1013D0(v130, "Argument desiredVolumeCurveRangeDB's mMaximum (%f) < mMinimum (%f)");
  }

  unsigned int v7 = a3;
  uint64_t v9 = (void *)(a1 + 280);
  if (a4) {
    int v10 = *(_DWORD *)(a4 + 16);
  }
  else {
    int v10 = 0;
  }
  int v11 = BYTE4(a3);
  *(_DWORD *)(a1 + 264) = v10;
  char v12 = *(std::__shared_weak_count **)(a1 + 288);
  *uint64_t v9 = 0LL;
  v9[1] = 0LL;
  if (v12)
  {
    std::__shared_weak_count::__release_weak(v12);
    int v10 = *(_DWORD *)(a1 + 264);
  }

  if (v10)
  {
    uint64_t v14 = *(void *)(a4 + 24);
    CFTypeRef v13 = *(std::__shared_weak_count **)(a4 + 32);
    if (v13)
    {
      p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
      do
        unint64_t v16 = __ldxr(p_shared_weak_owners);
      while (__stxr(v16 + 1, p_shared_weak_owners));
    }

    int v17 = *(std::__shared_weak_count **)(a1 + 288);
    *(void *)(a1 + 280) = v14;
    *(void *)(a1 + 288) = v13;
    if (v17)
    {
      std::__shared_weak_count::__release_weak(v17);
      CFTypeRef v13 = *(std::__shared_weak_count **)(a1 + 288);
    }

    *(_BYTE *)(a1 + 308) = 0;
    __int128 __p = 0LL;
    uint64_t v138 = 0LL;
    if (v13)
    {
      __int16 v18 = std::__shared_weak_count::lock(v13);
      uint64_t v138 = v18;
      if (v18)
      {
        int v19 = (uint64_t *)*v9;
        __int128 __p = v19;
        if (v19)
        {
          uint64_t v20 = *v19;
          if (*(void *)(a1 + 320))
          {
            (*(void (**)(uint64_t *, void))(v20 + 144))(v19, 0LL);
LABEL_24:
            p_shared_owners = (unint64_t *)&v18->__shared_owners_;
            do
              unint64_t v24 = __ldaxr(p_shared_owners);
            while (__stlxr(v24 - 1, p_shared_owners));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }

            goto LABEL_28;
          }

          uint64_t v104 = (*(uint64_t (**)(uint64_t *))(v20 + 216))(v19);
          if (v11)
          {
            if (v105)
            {
              int v106 = *(_DWORD *)(v104 + 36);
              if (v106 != v7) {
                sub_14F544();
              }
              int v107 = (os_log_t *)sub_138E8(18);
              float v108 = *v107;
              if (*v107 && os_log_type_enabled(*v107, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 899;
                *(_WORD *)&_BYTE buf[18] = 1024;
                *(_DWORD *)&_BYTE buf[20] = v7;
                *(_WORD *)&uint8_t buf[24] = 1024;
                *(_DWORD *)&buf[26] = v106;
                _os_log_impl( &dword_0,  v108,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Volume control has transfer functions both from routing database (%ul) and software volume(%ul)! Undefined behavior!",  buf,  0x1Eu);
              }
            }
          }

          else if (v105)
          {
            unsigned int v7 = *(_DWORD *)(v104 + 36);
            int v11 = 1;
          }

          else
          {
            int v11 = 0;
          }

          (*(void (**)(uint64_t *, uint64_t))(*v19 + 152))(v19, 1LL);
          if (sub_38A9E4(*(void *)(a1 + 96))) {
            sub_1C43A8((void *)a1);
          }
          int v111 = *(_DWORD *)(a1 + 264);
          (*(void (**)(uint64_t *, BOOL))(*v19 + 160))(v19, v111 != 3);
          int v112 = (*(uint64_t (**)(uint64_t *))(*v19 + 224))(v19) ^ 1;
          if (v111 == 3) {
            LOBYTE(v112) = 1;
          }
          if ((v112 & 1) != 0)
          {
            buf[0] = 0;
            int AppBooleanValue = CFPreferencesGetAppBooleanValue( @"FakeRamp",  @"com.apple.audio.virtualaudio",  buf);
            if (!buf[0]) {
              goto LABEL_189;
            }
            int v117 = AppBooleanValue;
            char v118 = (os_log_t *)sub_138E8(13);
            int v119 = *v118;
            if (*v118 && os_log_type_enabled(*v118, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
              *(void *)&uint8_t buf[4] = "RunTimeDefaults.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2098;
              *(_WORD *)&_BYTE buf[18] = 2080;
              *(void *)&_BYTE buf[20] = "FakeRamp";
              *(_WORD *)&_BYTE buf[28] = 1024;
              *(_DWORD *)&_BYTE buf[30] = v117 != 0;
              _os_log_impl( &dword_0,  v119,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Defaults key %s was defined to %u",  buf,  0x22u);
            }

            if (v111 == 3) {
              goto LABEL_189;
            }
            if (!v117) {
              goto LABEL_189;
            }
            *(_BYTE *)(a1 + 469) = 1;
            float v120 = (os_log_t *)sub_138E8(41);
            char v114 = *v120;
            if (!*v120 || !os_log_type_enabled(*v120, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_189;
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 932;
            uint64_t v115 = "%25s:%-5d OutputVolumeControl_HAL_Common::ReconfigureInternal() - faking volume ramping.";
          }

          else
          {
            *(_BYTE *)(a1 + 469) = 1;
            unsigned int v113 = (os_log_t *)sub_138E8(41);
            char v114 = *v113;
            if (!*v113 || !os_log_type_enabled(*v113, OS_LOG_TYPE_DEBUG))
            {
LABEL_189:
              if (!*(_BYTE *)(a1 + 469))
              {
                double v121 = (os_log_t *)sub_138E8(41);
                __int16 v122 = *v121;
                if (*v121)
                {
                  if (os_log_type_enabled(*v121, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                    *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
                    *(_WORD *)&_BYTE buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 936;
                    _os_log_impl( &dword_0,  v122,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d OutputVolumeControl_HAL_Common::ReconfigureInternal() - volume ramping is not supported.",  buf,  0x12u);
                  }
                }
              }

              goto LABEL_24;
            }

            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 926;
            uint64_t v115 = "%25s:%-5d OutputVolumeControl_HAL_Common::ReconfigureInternal() - volume command supports ramping, setting enabled.";
          }

          _os_log_impl(&dword_0, v114, OS_LOG_TYPE_DEBUG, v115, buf, 0x12u);
          goto LABEL_189;
        }
      }
    }

    else
    {
      __int16 v18 = 0LL;
    }

    int v21 = (os_log_t *)sub_138E8(13);
    uint64_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 941;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Logic error: requested software volume, but given software volume command is NULL",  buf,  0x12u);
    }

    *(_DWORD *)(a1 + 264) = 0;
    if (v18) {
      goto LABEL_24;
    }
  }

void sub_1C54D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void sub_1C5544(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 264);
  uint64_t v5 = *(void *)(a1 + 320);
  if (v4) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (v6)
  {
    if (!*(_BYTE *)(a1 + 311))
    {
      v252 = (os_log_t *)sub_138E8(13);
      v253 = *v252;
      if (*v252 && os_log_type_enabled(*v252, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "OutputVolumeControl_HAL_Common.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 1333;
        _os_log_impl( &dword_0,  v253,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::invalid_argument): Volume Mode is HardwareOnly but physical device does not support HW volume",  (uint8_t *)buf,  0x12u);
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_1013D0(exception, "Volume Mode is HardwareOnly but physical device does not support HW volume");
    }

    uint64_t v5 = 0LL;
  }

  sub_64424(a1 + 168, *(float *)(a1 + 296));
  float v8 = v7;
  if (v5) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = (v4 - 1) > 1;
  }
  if (v9)
  {
    if (v5)
    {
      float v10 = *(float *)(a1 + 272);
      float v11 = 0.0;
      goto LABEL_70;
    }

    float v11 = 0.0;
    if (v4 == 2)
    {
      float v10 = 0.0;
      goto LABEL_33;
    }

    if (v4 != 1)
    {
      double v13 = v7;
      double v14 = *(double *)(a1 + 152);
      if (v14 <= v8)
      {
        float v10 = v14;
      }

      else
      {
        double v15 = *(double *)(a1 + 144);
        if (v15 >= v13) {
          float v10 = v15;
        }
        else {
          float v10 = v8;
        }
      }

      goto LABEL_33;
    }
  }

  else
  {
    float v10 = 0.0;
    float v11 = v7;
    if (v4 == 2) {
      goto LABEL_33;
    }
    float v12 = *(float *)(a1 + 268);
    if (v12 <= v8)
    {
      float v16 = *(float *)(a1 + 272);
      BOOL v17 = v16 < v8;
      float v18 = v8 - v16;
      if (v17) {
        float v11 = v18;
      }
      else {
        float v11 = 0.0;
      }
    }

    else
    {
      float v11 = v8 - v12;
    }
  }

  float v10 = *(float *)(a1 + 268);
  if (v10 <= v8)
  {
    else {
      float v10 = *(float *)(a1 + 272);
    }
  }

LABEL_309:
        int v209 = 0;
LABEL_335:
        v250 = (unint64_t *)&v212->__shared_owners_;
        do
          unint64_t v251 = __ldaxr(v250);
        while (__stlxr(v251 - 1, v250));
        if (!v251)
        {
          ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
          std::__shared_weak_count::__release_weak(v212);
        }

        goto LABEL_268;
      }

      float v217 = sub_757A4(a1 + 168, v11);
    }

    else
    {
      uint64_t v216 = (*(uint64_t (**)(double))(**(void **)&v213 + 136LL))(COERCE_DOUBLE(*(void *)&v213));
      (*(void (**)(double, uint64_t))(**(void **)&v213 + 128LL))(COERCE_DOUBLE(*(void *)&v213), v216);
    }

    float v228 = v217;
    goto LABEL_298;
  }

  v208(*(void *)(a1 + 328), *(float *)(a1 + 296));
  int v209 = 1;
LABEL_268:
  int v207 = v209 ^ 1;
LABEL_269:
  uint64_t v219 = *(void *)(a1 + 344);
  v218 = *(std::__shared_weak_count **)(a1 + 352);
  if (v218)
  {
    v220 = (unint64_t *)&v218->__shared_weak_owners_;
    do
      unint64_t v221 = __ldxr(v220);
    while (__stxr(v221 + 1, v220));
    if (!*(_DWORD *)(a1 + 384)) {
      int v207 = 1;
    }
    if (((v207 | v155) & 1) != 0)
    {
      uint64_t v222 = *(void *)(a1 + 128);
      goto LABEL_286;
    }

    do
      unint64_t v223 = __ldxr(v220);
    while (__stxr(v223 + 1, v220));
    v224 = v218;
  }

  else
  {
    if (!*(_DWORD *)(a1 + 384)) {
      int v207 = 1;
    }
    if ((v207 | v155) == 1)
    {
      v225 = 0LL;
      uint64_t v222 = *(void *)(a1 + 128);
      goto LABEL_290;
    }

    v224 = 0LL;
  }

  buf[0] = 1987013732;
  *(void *)&buf[1] = *(void *)(a1 + 128);
  sub_67368(v219, (uint64_t)v224, (uint64_t *)buf);
  if (v224) {
    std::__shared_weak_count::__release_weak(v224);
  }
  uint64_t v222 = *(void *)(a1 + 128);
  if (!v218)
  {
    v225 = 0LL;
    goto LABEL_290;
  }

LABEL_286:
  __int128 v226 = (unint64_t *)&v218->__shared_weak_owners_;
  do
    unint64_t v227 = __ldxr(v226);
  while (__stxr(v227 + 1, v226));
  v225 = v218;
LABEL_290:
  buf[0] = 1986817377;
  *(void *)&buf[1] = v222;
  sub_67368(v219, (uint64_t)v225, (uint64_t *)buf);
  if (v225) {
    std::__shared_weak_count::__release_weak(v225);
  }
  sub_1C4218(a1, SHIBYTE(v107));
  *(_BYTE *)(a1 + 312) = 1;
  if (v218) {
    std::__shared_weak_count::__release_weak(v218);
  }
}

void sub_1C6F78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
}

uint64_t sub_1C7038(int a1, unsigned int *a2)
{
  if (!a2)
  {
    BOOL v6 = (os_log_t *)sub_138E8(13);
    float v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      float v10 = "StandardUtilities.h";
      __int16 v11 = 1024;
      int v12 = 148;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v9,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (a1 != 4)
  {
    uint64_t v3 = (os_log_t *)sub_138E8(13);
    int v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
      {
        int v9 = 136315394;
        float v10 = "StandardUtilities.h";
        __int16 v11 = 1024;
        int v12 = 149;
        _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: sizeof(T) == inDataSize",  (uint8_t *)&v9,  0x12u);
      }
    }
  }

  return *a2;
}

void sub_1C71A4(_Unwind_Exception *exception_object)
{
}

void sub_1C71C0(uint64_t a1)
{
  uint64_t v2 = (os_log_t *)sub_138E8(41);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEBUG))
  {
    sub_2CA1C(__p, 1919774835LL);
    int v4 = v15 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    BOOL v17 = "OutputVolumeControl_HAL_Common.cpp";
    __int16 v18 = 1024;
    int v19 = 1803;
    __int16 v20 = 2080;
    int v21 = v4;
    _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d OutputVolumeControl_HAL_Common::NotifyVolumeRampStateListeners() - notifying listeners that %s has changed.",  buf,  0x1Cu);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }

  uint64_t v5 = *(void *)(a1 + 344);
  BOOL v6 = *(std::__shared_weak_count **)(a1 + 352);
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      unint64_t v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }

  unsigned __int8 v9 = atomic_load((unsigned __int8 *)&qword_48FB00);
  if ((v9 & 1) == 0)
  {
    uint64_t v12 = v5;
    int v13 = __cxa_guard_acquire(&qword_48FB00);
    uint64_t v5 = v12;
    if (v13)
    {
      qword_48FAF0 = 0x6F757470726D7073LL;
      dword_48FAF8 = 0;
      __cxa_guard_release(&qword_48FB00);
      uint64_t v5 = v12;
    }
  }

  if (v6)
  {
    float v10 = (unint64_t *)&v6->__shared_weak_owners_;
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }

  sub_67368(v5, (uint64_t)v6, &qword_48FAF0);
  if (v6)
  {
    std::__shared_weak_count::__release_weak(v6);
    std::__shared_weak_count::__release_weak(v6);
  }

void sub_1C7378(_Unwind_Exception *exception_object)
{
}

void *sub_1C73A8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_474A88;
  result[1] = v3;
  return result;
}

uint64_t sub_1C73DC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_474A88;
  a2[1] = v2;
  return result;
}

void sub_1C73F8(uint64_t a1, unsigned __int8 *a2, float *a3)
{
  int v3 = *a2;
  float v4 = *a3;
  uint64_t v5 = *(void *)(a1 + 8);
  std::recursive_mutex::lock((std::recursive_mutex *)(v5 + 400));
  BOOL v6 = (os_log_t *)sub_138E8(41);
  float v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v8 = "not ramping";
    int v19 = 136315906;
    __int16 v20 = "OutputVolumeControl_HAL_Common.cpp";
    if (v3) {
      unint64_t v8 = "ramping";
    }
    __int16 v21 = 1024;
    int v22 = 1728;
    __int16 v23 = 2080;
    uint64_t v24 = v8;
    __int16 v25 = 2048;
    double v26 = v4;
    _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d OutputVolumeControl_HAL_Common::BeginSoftwareVolumeRamp() - listener called with state %s position %.2f.",  (uint8_t *)&v19,  0x26u);
  }

  *(float *)(v5 + 296) = v4;
  sub_1C5544(v5, 1);
  if (!v3 && *(_BYTE *)(v5 + 468))
  {
    float v9 = *(float *)(v5 + 296);
    float v10 = *(float *)(v5 + 464);
    float v11 = fabsf(v9);
    float v12 = fabsf(v10);
    if (v11 < v12) {
      float v11 = v12;
    }
    if (v11 >= 1.0) {
      float v13 = v11 * 0.00000011921;
    }
    else {
      float v13 = 0.00000011921;
    }
    double v14 = (os_log_t *)sub_138E8(41);
    float v15 = vabds_f32(v9, v10);
    float v16 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_DEBUG))
    {
      BOOL v17 = "not completed";
      __int16 v20 = "OutputVolumeControl_HAL_Common.cpp";
      int v19 = 136315650;
      if (v15 <= v13) {
        BOOL v17 = "completed";
      }
      __int16 v21 = 1024;
      int v22 = 1741;
      __int16 v23 = 2080;
      uint64_t v24 = v17;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d OutputVolumeControl_HAL_Common::BeginSoftwareVolumeRamp() - ramp was %s.",  (uint8_t *)&v19,  0x1Cu);
    }

    if (v15 > v13) {
      int v18 = 3;
    }
    else {
      int v18 = 4;
    }
    sub_1C2C48(v5, v18);
    sub_1C71C0(v5);
  }

  std::recursive_mutex::unlock((std::recursive_mutex *)(v5 + 400));
}

void sub_1C7618(_Unwind_Exception *a1)
{
}

float sub_1C7638(uint64_t a1)
{
  unint64_t v1 = sub_5C2F8(a1);
  if ((_DWORD)v1 || !v2)
  {
    int v4 = v1;
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = v4;
  }

  return *((float *)&v1 + 1);
}

uint64_t sub_1C76BC(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = sub_5954C();
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 304LL))(v3);
  if (!(_DWORD)result) {
    return result;
  }
  sub_23FE8((uint64_t)&v26, (os_unfair_lock_t)(*(void *)(v2 + 96) + 8LL));
  uint64_t v6 = a1[5];
  uint64_t v5 = (std::__shared_weak_count *)a1[6];
  uint64_t v28 = v6;
  uint64_t v29 = v5;
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      unint64_t v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }

  uint64_t v9 = a1[7];
  uint64_t v30 = v9;
  float v10 = (char *)operator new(0x48uLL);
  sub_7D084(__p, "PlaybackDosimetry HW readonly volume");
  __int128 v31 = v26;
  uint64_t v11 = v27;
  uint64_t v27 = 0LL;
  __int128 v26 = 0uLL;
  uint64_t v32 = v11;
  uint64_t v33 = v6;
  uint64_t v34 = v5;
  if (v5)
  {
    float v12 = (unint64_t *)&v5->__shared_weak_owners_;
    do
      unint64_t v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }

  uint64_t v35 = v9;
  double v39 = 0LL;
  double v14 = (char *)operator new(0x38uLL);
  *(void *)double v14 = &off_474A10;
  *(_OWORD *)(v14 + 8) = v31;
  uint64_t v15 = v32;
  __int128 v31 = 0uLL;
  uint64_t v32 = 0LL;
  *((void *)v14 + 3) = v15;
  *((void *)v14 + 4) = v6;
  *((void *)v14 + 5) = v5;
  if (v5)
  {
    float v16 = (unint64_t *)&v5->__shared_weak_owners_;
    do
      unint64_t v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }

  *((void *)v14 + 6) = v9;
  double v39 = v14;
  *((_DWORD *)v10 + 2) = 1;
  *(void *)float v10 = &off_474A58;
  sub_F3F10((uint64_t)(v10 + 16), (uint64_t)v38);
  int v22 = v10 + 48;
  if (SHIBYTE(v37) < 0)
  {
    sub_24054(v22, __p[0], (unint64_t)__p[1]);
  }

  else
  {
    *(_OWORD *)int v22 = *(_OWORD *)__p;
    *((void *)v10 + 8) = v37;
  }

  __int16 v23 = v39;
  if (v39 == v38)
  {
    uint64_t v24 = 4LL;
    __int16 v23 = v38;
    goto LABEL_18;
  }

  if (v39)
  {
    uint64_t v24 = 5LL;
LABEL_18:
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*v23 + 8 * v24))(v23, v18, v19, v20, v21);
  }

  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  if (SHIBYTE(v37) < 0) {
    operator delete(__p[0]);
  }
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v25 = sub_5954C();
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)v25 + 328LL))(v25, v10);
}

void sub_1C78CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
  uint64_t v30 = (void *)v26[5];
  if (v30 == v27)
  {
    uint64_t v31 = 4LL;
  }

  else
  {
    if (!v30) {
      goto LABEL_6;
    }
    uint64_t v31 = 5LL;
    uint64_t v27 = (void *)v26[5];
  }

  (*(void (**)(void *))(*v27 + 8 * v31))(v27);
LABEL_6:
  uint64_t v32 = *(void **)(v28 - 64);
  if (v32 == (void *)(v28 - 88))
  {
    uint64_t v33 = 4LL;
    uint64_t v32 = (void *)(v28 - 88);
  }

  else
  {
    if (!v32) {
      goto LABEL_11;
    }
    uint64_t v33 = 5LL;
  }

  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_11:
  sub_1C79CC((uint64_t)&a15);
  if (a26 < 0) {
    operator delete(__p);
  }
  operator delete(v26);
  sub_1C79CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1C7998(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)(v2 + 16);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  return result;
}

void sub_1C79BC(uint64_t a1)
{
  unint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t sub_1C79CC(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t sub_1C7A08(uint64_t a1)
{
  *(void *)a1 = &off_474A58;
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2 == (void *)(a1 + 16))
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = (void *)(a1 + 16);
    goto LABEL_7;
  }

  if (v2)
  {
    uint64_t v3 = 5LL;
LABEL_7:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return a1;
}

void sub_1C7A74(void **__p)
{
  void *__p = &off_474A58;
  uint64_t v2 = (void **)__p[5];
  if (v2 == __p + 2)
  {
    uint64_t v3 = 4LL;
    uint64_t v2 = __p + 2;
    goto LABEL_7;
  }

  if (v2)
  {
    uint64_t v3 = 5LL;
LABEL_7:
    (*((void (**)(void))*v2 + v3))();
  }

  operator delete(__p);
}

BOOL sub_1C7AE0@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    sub_82CEC();
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 48LL))(v2);
  return sub_72210(a2, 1920099684LL);
}

uint64_t sub_1C7B20(uint64_t a1)
{
  return std::operator+<char>("Generic lambda command: ", a1 + 48);
}

uint64_t sub_1C7B30(uint64_t a1)
{
  *(void *)a1 = &off_474A10;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_1C7B78(char *__p)
{
  *(void *)__int128 __p = &off_474A10;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)__p + 5);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  if (__p[31] < 0) {
    operator delete(*((void **)__p + 1));
  }
  operator delete(__p);
}

void *sub_1C7BC0(uint64_t a1)
{
  unint64_t v1 = (__int128 *)(a1 + 8);
  uint64_t v2 = operator new(0x38uLL);
  void *v2 = &off_474A10;
  sub_1C7E40(v2 + 1, v1);
  return v2;
}

void sub_1C7C00(_Unwind_Exception *a1)
{
}

void *sub_1C7C14(uint64_t a1, void *a2)
{
  *a2 = &off_474A10;
  return sub_1C7E40(a2 + 1, (__int128 *)(a1 + 8));
}

void sub_1C7C30(uint64_t a1)
{
}

void sub_1C7C38(void *a1)
{
}

void sub_1C7C60(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      unint64_t v4 = v3;
      uint64_t v5 = *(void *)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = (os_log_t *)sub_138E8(38);
        float v7 = *v6;
        if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v8 = a1 + 8;
          double v9 = *(float *)(a1 + 48);
          int v12 = 136316162;
          unint64_t v13 = "OutputVolumeControl_HAL_Common.cpp";
          __int16 v14 = 1024;
          int v15 = 1258;
          __int16 v16 = 2048;
          double v17 = v9;
          __int16 v18 = 2048;
          uint64_t v19 = v5;
          __int16 v20 = 2080;
          uint64_t v21 = v8;
          _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d PlaybackDosimetry: setting hardware read only volume %.2fdB, %p on VAD '%s'.",  (uint8_t *)&v12,  0x30u);
        }

        (*(void (**)(uint64_t, float, float))(*(void *)v5 + 24LL))( v5,  *(float *)(a1 + 48),  *(float *)(a1 + 52));
      }

      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        unint64_t v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }

void sub_1C7DC0(_Unwind_Exception *exception_object)
{
  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    unint64_t v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  _Unwind_Resume(exception_object);
}

void sub_1C7E00(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void *sub_1C7E40(void *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_24054(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)std::__fs::filesystem::path __dst = v4;
  }

  uint64_t v5 = *((void *)a2 + 4);
  __dst[3] = *((void *)a2 + 3);
  __dst[4] = v5;
  if (v5)
  {
    uint64_t v6 = (unint64_t *)(v5 + 16);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  __dst[5] = *((void *)a2 + 5);
  return __dst;
}

double *sub_1C7EB4(double *result, double *a2, double *a3)
{
  if (*a3 < *result)
  {
    __int128 v4 = (os_log_t *)sub_138E8(13);
    uint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      uint64_t v8 = "StandardUtilities.h";
      __int16 v9 = 1024;
      int v10 = 258;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::invalid_argument): clamp() requires that maxVal >= minVal.",  (uint8_t *)&v7,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1013D0(exception, "clamp() requires that maxVal >= minVal.");
  }

  if (*a2 < *a3) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = a3;
  }
  if (*a2 > *result) {
    return v3;
  }
  return result;
}

void sub_1C7FC4(_Unwind_Exception *exception_object)
{
}

double sub_1C7FE0(void *a1, int a2)
{
  if (!a2)
  {
    __int16 v23 = (os_log_t *)sub_138E8(13);
    uint64_t v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      int v29 = 136315394;
      uint64_t v30 = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v31 = 1024;
      int v32 = 53;
      _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::invalid_argument): propertyFlags has no flags.",  (uint8_t *)&v29,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1013D0(exception, "propertyFlags has no flags.");
  }

  char v2 = a2;
  if ((a2 & 1) != 0)
  {
    __int128 v26 = (os_log_t *)sub_138E8(13);
    uint64_t v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      int v29 = 136315394;
      uint64_t v30 = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v31 = 1024;
      int v32 = 54;
      _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Output VolumeControls do not support decibel volume.",  (uint8_t *)&v29,  0x12u);
    }

    uint64_t v28 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v28, "Output VolumeControls do not support decibel volume.");
  }

  uint64_t v4 = 0LL;
  *a1 = a1;
  a1[1] = a1;
  uint64_t v5 = a1;
  a1[2] = 0LL;
  if ((a2 & 2) != 0)
  {
    uint64_t v6 = operator new(0x20uLL);
    v6[2] = 0x676C6F62766F6C6DLL;
    *((_DWORD *)v6 + 6) = 0;
    *uint64_t v6 = a1;
    v6[1] = a1;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = 1LL;
    int v7 = operator new(0x20uLL);
    uint64_t v7[2] = 0x676C6F62766C6D61LL;
    *((_DWORD *)v7 + 6) = 0;
    *int v7 = v6;
    v7[1] = a1;
    v6[1] = v7;
    *a1 = v7;
    a1[2] = 2LL;
    uint64_t v8 = operator new(0x20uLL);
    _OWORD v8[2] = 0x676C6F6276646223LL;
    *((_DWORD *)v8 + 6) = 0;
    *uint64_t v8 = v7;
    v8[1] = a1;
    v7[1] = v8;
    *a1 = v8;
    a1[2] = 3LL;
    __int16 v9 = operator new(0x20uLL);
    v9[2] = 0x676C6F6276326462LL;
    *((_DWORD *)v9 + 6) = 0;
    *__int16 v9 = v8;
    v9[1] = a1;
    v8[1] = v9;
    *a1 = v9;
    a1[2] = 4LL;
    int v10 = operator new(0x20uLL);
    void v10[2] = 0x676C6F6264623276LL;
    *((_DWORD *)v10 + 6) = 0;
    *int v10 = v9;
    v10[1] = a1;
    v9[1] = v10;
    *a1 = v10;
    a1[2] = 5LL;
    unint64_t v11 = operator new(0x20uLL);
    v11[2] = 0x676C6F6264697663LL;
    *((_DWORD *)v11 + 6) = 0;
    *unint64_t v11 = v10;
    v11[1] = a1;
    v10[1] = v11;
    *a1 = v11;
    a1[2] = 6LL;
    int v12 = operator new(0x20uLL);
    void v12[2] = 0x676C6F6276637370LL;
    *((_DWORD *)v12 + 6) = 0;
    void *v12 = v11;
    v12[1] = a1;
    v11[1] = v12;
    *a1 = v12;
    a1[2] = 7LL;
    unint64_t v13 = operator new(0x20uLL);
    uint64_t v13[2] = 0x676C6F6278766F6CLL;
    *((_DWORD *)v13 + 6) = 0;
    void *v13 = v12;
    v13[1] = a1;
    v12[1] = v13;
    *a1 = v13;
    a1[2] = 8LL;
    __int16 v14 = operator new(0x20uLL);
    v14[2] = 0x676C6F623F766C73LL;
    *((_DWORD *)v14 + 6) = 0;
    *__int16 v14 = v13;
    v14[1] = a1;
    v13[1] = v14;
    *a1 = v14;
    a1[2] = 9LL;
    int v15 = operator new(0x20uLL);
    v15[2] = 0x676C6F6264767366LL;
    *((_DWORD *)v15 + 6) = 0;
    *int v15 = v14;
    v15[1] = a1;
    v14[1] = v15;
    *a1 = v15;
    a1[2] = 10LL;
    __int16 v16 = operator new(0x20uLL);
    v16[2] = 0x676C6F6273726D70LL;
    *((_DWORD *)v16 + 6) = 0;
    void *v16 = v15;
    v16[1] = a1;
    v15[1] = v16;
    *a1 = v16;
    a1[2] = 11LL;
    double v17 = operator new(0x20uLL);
    void v17[2] = 0x676C6F62726D7073LL;
    *((_DWORD *)v17 + 6) = 0;
    void *v17 = v16;
    v17[1] = a1;
    v16[1] = v17;
    *a1 = v17;
    a1[2] = 12LL;
    __int16 v18 = operator new(0x20uLL);
    v18[2] = 0x676C6F6272616D70LL;
    *((_DWORD *)v18 + 6) = 0;
    *__int16 v18 = v17;
    v18[1] = a1;
    v17[1] = v18;
    *a1 = v18;
    a1[2] = 13LL;
    uint64_t v19 = operator new(0x20uLL);
    void v19[2] = 0x676C6F6263726D70LL;
    *((_DWORD *)v19 + 6) = 0;
    *uint64_t v19 = v18;
    v19[1] = a1;
    v18[1] = v19;
    *a1 = v19;
    a1[2] = 14LL;
    uint64_t v5 = operator new(0x20uLL);
    double result = 1.58366007e190;
    v5[2] = 0x676C6F6263766D70LL;
    *((_DWORD *)v5 + 6) = 0;
    *uint64_t v5 = v19;
    v5[1] = a1;
    v19[1] = v5;
    *a1 = v5;
    uint64_t v4 = 15LL;
    a1[2] = 15LL;
  }

  if ((v2 & 8) != 0)
  {
    uint64_t v21 = operator new(0x20uLL);
    double result = 1.5836601e190;
    v21[2] = 0x676C6F626D757465LL;
    *((_DWORD *)v21 + 6) = 0;
    *uint64_t v21 = v5;
    v21[1] = a1;
    v5[1] = v21;
    *a1 = v21;
    a1[2] = ++v4;
    uint64_t v5 = v21;
  }

  if ((v2 & 0x40) != 0)
  {
    int v22 = operator new(0x20uLL);
    double result = 1.58366013e190;
    v22[2] = 0x676C6F6276617364LL;
    *((_DWORD *)v22 + 6) = 0;
    *int v22 = v5;
    v22[1] = a1;
    v5[1] = v22;
    *a1 = v22;
    a1[2] = v4 + 1;
  }

  return result;
}

void sub_1C84C8(_Unwind_Exception *a1)
{
}

void sub_1C851C()
{
}

void sub_1C8530()
{
}

uint64_t sub_1C8538(uint64_t *a1)
{
  char v2 = operator new(0xA8uLL);
  v2[1] = 0LL;
  v2[2] = 0LL;
  void *v2 = off_47BFC8;
  uint64_t result = sub_189C20((uint64_t)(v2 + 3));
  *a1 = result;
  a1[1] = (uint64_t)v2;
  return result;
}

void sub_1C8578(_Unwind_Exception *a1)
{
}

void sub_1C8590(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_47BFC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1C85A0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_47BFC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1C85C0(uint64_t a1)
{
  *(void *)(a1 + 24) = off_46E4E8;
  return pthread_mutex_destroy((pthread_mutex_t *)(a1 + 48));
}

uint64_t sub_1C8600(uint64_t a1, uint64_t a2, unsigned int a3, int a4, double a5, double a6)
{
  int v12 = (void *)sub_2BC660(a1);
  void *v12 = off_4748D8;
  v12[10] = off_4749A8;
  unint64_t v13 = v12 + 10;
  v12[12] = a2;
  sub_1C7FE0(&v22, a4);
  sub_14B818((void *)(a1 + 104), (uint64_t)&v22);
  sub_68314(&v22);
  *(_DWORD *)(a1 + 128) = 1869968496;
  *(_DWORD *)(a1 + 132) = a3;
  *(_DWORD *)(a1 + 136) = 0;
  sub_2BCA9C(a2, 1869968496LL, a3);
  *(double *)(a1 + 144) = v14;
  *(double *)(a1 + 152) = v15;
  if (v14 <= a5) {
    double v14 = a5;
  }
  float v16 = v14;
  if (v15 >= a6) {
    double v15 = a6;
  }
  float v17 = v15;
  *(float *)(a1 + 160) = v16;
  *(float *)(a1 + 164) = v17;
  sub_157A88(a1 + 168, 0, v16, v17);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a1 + 168);
  sub_142EF4(a1 + 224, (void *)(a1 + 176));
  *(_OWORD *)(a1 + sub_7A768(v41 - 248) = *(_OWORD *)(a1 + 200);
  *(void *)(a1 + 264) = 0LL;
  *(_DWORD *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0LL;
  *(void *)(a1 + 288) = 0LL;
  *(_DWORD *)(a1 + 296) = 1057689552;
  *(_WORD *)(a1 + 308) = 0;
  *(void *)(a1 + 300) = 0LL;
  *(void *)&__int128 v22 = 0x6F7574706D757465LL;
  DWORD2(v22) = a3;
  *(_BYTE *)(a1 + 310) = (*(uint64_t (**)(uint64_t, __int128 *))(*(void *)a2 + 16LL))(a2, &v22);
  *(void *)&__int128 v22 = 0x6F75747076646223LL;
  DWORD2(v22) = a3;
  *(_BYTE *)(a1 + 311) = (*(uint64_t (**)(uint64_t, __int128 *))(*(void *)a2 + 16LL))(a2, &v22);
  *(_WORD *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0LL;
  *(void *)(a1 + 328) = 0LL;
  *(void *)(a1 + 336) = v13;
  *(void *)(a1 + 376) = 0LL;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 384) = 1;
  *(void *)(a1 + 392) = 0LL;
  std::recursive_mutex::recursive_mutex((std::recursive_mutex *)(a1 + 400));
  *(_DWORD *)(a1 + 464) = 0;
  *(_WORD *)(a1 + 468) = 0;
  *(void *)(a1 + 472) = 0LL;
  sub_1C8538((uint64_t *)&v22);
  sub_127660(a1 + 344, &v22);
  __int16 v18 = (std::__shared_weak_count *)*((void *)&v22 + 1);
  if (*((void *)&v22 + 1))
  {
    uint64_t v19 = (unint64_t *)(*((void *)&v22 + 1) + 8LL);
    do
      unint64_t v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  return a1;
}

void sub_1C880C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  double v15 = *(const void **)(v10 + 472);
  if (v15) {
    CFRelease(v15);
  }
  std::recursive_mutex::~recursive_mutex(v13);
  float v16 = *(dispatch_object_s **)(v10 + 392);
  if (v16) {
    dispatch_release(v16);
  }
  float v17 = *(void **)(v10 + 360);
  if (v17)
  {
    *(void *)(v10 + 368) = v17;
    operator delete(v17);
  }

  sub_7A768(v12);
  __int16 v18 = *(std::__shared_weak_count **)(v10 + 288);
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  sub_32C8C(*(void **)(v10 + 232));
  sub_32C8C(*(void **)(v10 + 184));
  sub_68314(v11);
  sub_F3008(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_1C88B8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6, uint64_t a7)
{
  double v14 = (void *)sub_2BC660(a1);
  *double v14 = off_4748D8;
  v14[10] = off_4749A8;
  double v15 = v14 + 10;
  v14[12] = a2;
  sub_1C7FE0(&v23, a6);
  sub_14B818((void *)(a1 + 104), (uint64_t)&v23);
  sub_68314(&v23);
  *(_DWORD *)(a1 + 128) = a3;
  *(_DWORD *)(a1 + 132) = a4;
  *(_DWORD *)(a1 + 136) = 0;
  sub_2BCA9C(a2, a3, a4);
  *(double *)(a1 + 144) = v16;
  *(double *)(a1 + 152) = v17;
  *(float *)&double v16 = v16;
  *(float *)&double v17 = v17;
  *(_DWORD *)(a1 + 160) = LODWORD(v16);
  *(_DWORD *)(a1 + 164) = LODWORD(v17);
  sub_157A88(a1 + 168, a5, *(float *)&v16, *(float *)&v17);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a1 + 168);
  sub_142EF4(a1 + 224, (void *)(a1 + 176));
  *(_OWORD *)(a1 + sub_7A768(v41 - 248) = *(_OWORD *)(a1 + 200);
  *(_DWORD *)(a1 + 264) = 0;
  *(void *)(a1 + 268) = 0LL;
  *(void *)(a1 + 280) = 0LL;
  *(void *)(a1 + 288) = 0LL;
  *(void *)(a1 + 296) = 1057689552LL;
  *(_WORD *)(a1 + 308) = 0;
  LODWORD(v23) = 1836414053;
  *(void *)((char *)&v23 + 4) = __PAIR64__(a4, a3);
  *(_BYTE *)(a1 + 310) = (*(uint64_t (**)(uint64_t, __int128 *))(*(void *)a2 + 16LL))(a2, &v23);
  LODWORD(v23) = 1986290211;
  *(void *)((char *)&v23 + 4) = __PAIR64__(a4, a3);
  *(_BYTE *)(a1 + 311) = (*(uint64_t (**)(uint64_t, __int128 *))(*(void *)a2 + 16LL))(a2, &v23);
  *(_WORD *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0LL;
  *(void *)(a1 + 328) = 0LL;
  *(void *)(a1 + 336) = v15;
  *(void *)(a1 + 376) = 0LL;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 384) = 1;
  *(void *)(a1 + 392) = 0LL;
  std::recursive_mutex::recursive_mutex((std::recursive_mutex *)(a1 + 400));
  *(_DWORD *)(a1 + 464) = 0;
  *(_WORD *)(a1 + 468) = 0;
  *(void *)(a1 + 472) = 0LL;
  sub_1C8538((uint64_t *)&v23);
  sub_127660(a1 + 344, &v23);
  __int16 v18 = (std::__shared_weak_count *)*((void *)&v23 + 1);
  if (*((void *)&v23 + 1))
  {
    uint64_t v19 = (unint64_t *)(*((void *)&v23 + 1) + 8LL);
    do
      unint64_t v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  if (a7) {
    *(void *)(a1 + 336) = a7;
  }
  if (sub_38A9E4(*(void *)(a1 + 96)))
  {
    *(_BYTE *)(a1 + 313) = 1;
    uint64_t v21 = *(void *)(a1 + 96);
    *(void *)&__int128 v23 = 0x676C6F6273706D65LL;
    DWORD2(v23) = 0;
    sub_F31A4(v21, &v23, (uint64_t)sub_1C30A4, a1, 1);
  }

  return a1;
}

void sub_1C8AF0(_Unwind_Exception *a1)
{
  uint64_t v6 = *(dispatch_object_s **)(v1 + 392);
  if (v6) {
    dispatch_release(v6);
  }
  int v7 = *(void **)(v1 + 360);
  if (v7)
  {
    *(void *)(v1 + 368) = v7;
    operator delete(v7);
  }

  sub_7A768(v3);
  uint64_t v8 = *(std::__shared_weak_count **)(v1 + 288);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  sub_32C8C(*(void **)(v1 + 232));
  sub_32C8C(*(void **)(v1 + 184));
  sub_68314(v2);
  sub_F3008(v1);
  _Unwind_Resume(a1);
}

void sub_1C8B9C(double *a1, double a2)
{
  if (*((void *)a1 + 5) && *((_DWORD *)a1 + 20))
  {
    int v4 = a2;
    if (!sub_D01B4((void *)a1 + 2, a2))
    {
      uint64_t v5 = (uint64_t *)*((void *)a1 + 4);
      double v6 = 0.0;
      if (v5)
      {
        while (1)
        {
          int v7 = *((_DWORD *)v5 + 4);
          double v6 = (double)v7;
          uint64_t v5 = (uint64_t *)*v5;
          if (!v5) {
            goto LABEL_7;
          }
        }
      }

      else
      {
LABEL_7:
        int v7 = 0;
      }

      if (v6 == 0.0) {
        int v4 = v7;
      }
      else {
        int v4 = v6;
      }
    }

    uint64_t v8 = sub_D01B4((void *)a1 + 2, v4);
    __int16 v9 = (const void *)sub_2DCE6C((int *)v8 + 6);
    if (sub_1C8D80((uint64_t)a1, v9))
    {
      uint64_t v10 = (os_log_t *)sub_138E8(24);
      unint64_t v11 = *v10;
      if (*v10)
      {
        if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "SidetoneManager.cpp";
          __int16 v17 = 1024;
          int v18 = 158;
          _os_log_impl(&dword_0, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d Restore State Failed", buf, 0x12u);
        }
      }
    }
  }

  else
  {
    int v14 = 4;
    int v15 = 0;
    strcpy(buf, "neTSurtp");
    buf[9] = 0;
    *(_WORD *)&_DWORD buf[10] = 0;
    uint64_t v12 = 0x7074727561736573LL;
    int v13 = 0;
    if ((*(unsigned int (**)(void))(**(void **)a1 + 16LL))()
      && ((*(void (**)(void, _BYTE *, void, void, int *, int *))(**(void **)a1 + 40LL))( *(void *)a1,  buf,  0LL,  0LL,  &v14,  &v15),  v15)
      || (*(unsigned int (**)(void, uint64_t *))(**(void **)a1 + 16LL))(*(void *)a1, &v12))
    {
      sub_1C9040(a1);
    }
  }

uint64_t sub_1C8D80(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 != CFDictionaryGetTypeID()) {
    return 4294956445LL;
  }
  uint64_t v21 = (const __CFDictionary *)cf;
  __int16 v22 = 0;
  if (cf
    && (Value = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)cf, @"data"), (double v6 = Value) != 0LL)
    && (CFTypeID v7 = CFGetTypeID(Value), v7 == CFDataGetTypeID()))
  {
    BytePtr = CFDataGetBytePtr(v6);
    unsigned int v9 = *((_DWORD *)BytePtr + 2);
    if (v9)
    {
      unsigned int v10 = bswap32(v9);
      unint64_t v11 = (unsigned int *)(BytePtr + 12);
      uint64_t v12 = 4294956418LL;
      do
      {
        float v13 = COERCE_FLOAT(bswap32(v11[1]));
        if (*v11)
        {
          unsigned int v14 = bswap32(*v11);
          if (v14 >= 0x3E8)
          {
            unsigned int v15 = v14 % 0x3E8;
            if (v14 % 0x3E8 >= *(_DWORD *)(a1 + 80))
            {
              uint64_t v12 = 4294956418LL;
              goto LABEL_36;
            }

            unsigned int v14 = 1000 * (v14 / 0x3E8);
          }

          else
          {
            unsigned int v15 = 0;
          }

          if ((int)v14 <= 2999)
          {
            if (v14 == 1000)
            {
              *(_DWORD *)(*(void *)(a1 + 56) + 20LL * v15) = v13;
            }

            else
            {
              if (v14 != 2000) {
                goto LABEL_36;
              }
              *(_DWORD *)(*(void *)(a1 + 56) + 20LL * v15 + 4) = v13;
            }
          }

          else
          {
            switch(v14)
            {
              case 0xBB8u:
                *(float *)(*(void *)(a1 + 56) + 20LL * v15 + 8) = v13;
                break;
              case 0xFA0u:
                *(float *)(*(void *)(a1 + 56) + 20LL * v15 + 12) = v13;
                break;
              case 0x1388u:
                *(float *)(*(void *)(a1 + 56) + 20LL * v15 + 16) = v13;
                break;
              default:
                goto LABEL_36;
            }
          }
        }

        else
        {
          *(float *)(a1 + 84) = v13;
        }

        v11 += 2;
        --v10;
      }

      while (v10);
    }

    sub_1C9040((double *)a1);
    double v16 = *(const void **)(a1 + 176);
    if (v16) {
      CFRelease(v16);
    }
    else {
      __int16 v17 = @"Untitled";
    }
    *(void *)(a1 + sub_7A768(v14 - 176) = v17;
    *(_DWORD *)(a1 + 168) = -1;
    CFRetain(v17);
    uint64_t v12 = 0LL;
  }

  else
  {
    int v18 = (os_log_t *)sub_138E8(24);
    uint64_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "SidetoneManager.cpp";
      __int16 v24 = 1024;
      int v25 = 1013;
      _os_log_impl(&dword_0, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d No Data read in Restore State call", buf, 0x12u);
    }

    uint64_t v12 = 4294956425LL;
  }

void sub_1C901C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1C9040(double *a1)
{
  uint64_t v78 = 0x7074727573716464LL;
  int v79 = 0;
  if ((*(unsigned int (**)(void, uint64_t *))(**(void **)a1 + 16LL))(*(void *)a1, &v78))
  {
    uint64_t v4 = *((unsigned int *)a1 + 20);
    if ((_DWORD)v4)
    {
      uint64_t v5 = (float64x2_t *)operator new(40 * v4);
      double v6 = v5;
      CFTypeID v7 = (char *)v5;
      do
      {
        *(void *)CFTypeID v7 = 0LL;
        *((void *)v7 + 1) = 0LL;
        *((void *)v7 + 3) = 0LL;
        *((void *)v7 + 4) = 0LL;
        *((void *)v7 + 2) = 0x3FF0000000000000LL;
        v7 += 40;
      }

      while (v7 != (char *)v5 + 40 * v4);
      unint64_t v8 = 0LL;
      v2.n128_f64[0] = a1[1];
      v3.n128_u64[0] = 0x3FDF5C28F5C28F5CLL;
      double v9 = v2.n128_f64[0] * 0.49;
      uint64_t v10 = 8LL;
      f64 = (void *)v5->f64;
      do
      {
        uint64_t v12 = *((void *)a1 + 7);
        uint64_t v13 = v12 + v10;
        if (*(_DWORD *)(v12 + v10 - 8) || (v2.n128_f64[0] = *(float *)(v12 + v10), v9 < v2.n128_f64[0]))
        {
LABEL_26:
          void *f64 = 0LL;
          f64[1] = 0LL;
          f64[3] = 0LL;
          f64[4] = 0LL;
          f64[2] = 0x3FF0000000000000LL;
        }

        else
        {
          int v14 = *(_DWORD *)(v13 - 4);
          float v15 = *(float *)(v13 + 4);
          v3.n128_u32[0] = *(_DWORD *)(v13 + 8);
          double v16 = 0.0;
          int v17 = 1;
          v2.n128_f64[0] = v2.n128_f64[0] * 6.28318531 / a1[1];
          switch(v14)
          {
            case 0:
              double v16 = v15;
              int v17 = 11;
              goto LABEL_19;
            case 1:
            case 2:
            case 7:
            case 8:
              if (v2.n128_f64[0] <= 0.0) {
                goto LABEL_26;
              }
              double v18 = v15;
              if (v2.n128_f64[0] > 3.11017673) {
                v2.n128_f64[0] = 3.11017673;
              }
              uint64_t v19 = (uint64_t)f64;
              double v20 = 0.707106781;
              goto LABEL_25;
            case 3:
              goto LABEL_19;
            case 4:
              int v17 = 2;
              goto LABEL_19;
            case 5:
              int v17 = 3;
              goto LABEL_19;
            case 6:
              int v17 = 4;
              goto LABEL_19;
            case 9:
              double v16 = v15;
              int v17 = 7;
              goto LABEL_19;
            case 10:
              double v16 = v15;
              int v17 = 8;
LABEL_19:
              if (v2.n128_f64[0] <= 0.0 || v3.n128_f32[0] <= 0.0) {
                goto LABEL_26;
              }
              double v21 = v3.n128_f32[0] * 0.34657359;
              if (v2.n128_f64[0] <= 3.11017673) {
                double v22 = v2.n128_f64[0];
              }
              else {
                double v22 = 3.11017673;
              }
              double v23 = v21 * v22;
              double v24 = sin(v22);
              v2.n128_f64[0] = sinh(v23 / v24);
              double v20 = 1.0 / (v2.n128_f64[0] + v2.n128_f64[0]);
              uint64_t v19 = (uint64_t)f64;
              int v14 = v17;
              v2.n128_f64[0] = v22;
              double v18 = v16;
LABEL_25:
              sub_1AD650(v19, v14, v2.n128_f64[0], v20, v18);
              break;
            default:
              goto LABEL_26;
          }
        }

        ++v8;
        unint64_t v25 = *((unsigned int *)a1 + 20);
        f64 += 5;
        v10 += 20LL;
      }

      while (v8 < v25);
      if ((_DWORD)v25)
      {
        uint64_t v26 = 0LL;
        uint64_t v27 = (_DWORD *)*((void *)a1 + 12);
        uint64_t v28 = v6 + 2;
        v2.n128_u64[0] = -1.0;
        v3.n128_u64[0] = 0x3CD203AF9EE75616LL;
        do
        {
          int v29 = &v27[v26];
          float64x2_t v30 = v28[-2];
          *(float64x2_t *)(v29 + 10) = v30;
          float64x2_t v31 = v28[-1];
          *((float64x2_t *)v29 + 1) = v31;
          double v32 = v28->f64[0];
          uint64_t v28 = (float64x2_t *)((char *)v28 + 40);
          *((double *)v29 + 4) = v32;
          v29[2] = fabs(v31.f64[0] + -1.0) + vaddvq_f64(vabsq_f64(v30)) + fabs(v31.f64[1]) + fabs(v32) < 1.0e-15;
          v26 += 12LL;
        }

        while (12 * v25 != v26);
LABEL_37:
        _DWORD *v27 = 0;
        v27[1] = v25;
        (*(void (**)(void, uint64_t *, void, void, void, __n128, __n128))(**(void **)a1 + 48LL))( *(void *)a1,  &v78,  0LL,  0LL,  *((unsigned int *)a1 + 26),  v2,  v3);
        if (v6) {
          operator delete(v6);
        }
        goto LABEL_39;
      }
    }

    else
    {
      double v6 = 0LL;
    }

    LODWORD(v25) = 0;
    uint64_t v27 = (_DWORD *)*((void *)a1 + 12);
    goto LABEL_37;
  }

  uint64_t v33 = (os_log_t *)sub_138E8(24);
  uint64_t v34 = *v33;
  if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "SidetoneManager.cpp";
    __int16 v81 = 1024;
    int v82 = 309;
    _os_log_impl( &dword_0,  v34,  OS_LOG_TYPE_ERROR,  "%25s:%-5d sidetone device does not support kAudioDevicePropertySidetoneEQData, could not update the sidetone device",  buf,  0x12u);
  }

void sub_1C9AB8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (v17) {
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C9B18()
{
}

CFArrayRef sub_1C9B20(uint64_t **a1)
{
  int v20 = 0;
  uint64_t v18 = 0x707472755354656ELL;
  int v19 = 0;
  uint64_t v16 = 0x7074727561736573LL;
  int v17 = 0;
  int v2 = (*(uint64_t (**)(uint64_t *, uint64_t *))(**a1 + 16))(*a1, &v18);
  uint64_t v3 = **a1;
  if (v2) {
    return (const __CFArray *)(*(uint64_t (**)(void))(v3 + 48))();
  }
  uint64_t result = (const __CFArray *)(*(uint64_t (**)(void))(v3 + 16))();
  if ((_DWORD)result)
  {
    CFArrayRef theArray = 0LL;
    int v13 = 1;
    int v14 = 8;
    (*(void (**)(uint64_t *, uint64_t *, void, void, int *, CFArrayRef *))(**a1 + 40))( *a1,  &v16,  0LL,  0LL,  &v14,  &theArray);
    uint64_t result = theArray;
    if (theArray)
    {
      unsigned int v5 = 0;
      CFArrayRef v11 = theArray;
      __int16 v12 = 1;
LABEL_6:
      LODWORD(result) = CFArrayGetCount(result);
      while (v5 < result)
      {
        int v10 = 0;
        if ((sub_1A0E0C(&v11, v5, &v10) & 1) == 0)
        {
          CFTypeID v7 = (os_log_t *)sub_138E8(13);
          unint64_t v8 = *v7;
          if (*v7)
          {
            if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "SidetoneManager.cpp";
              __int16 v22 = 1024;
              int v23 = 211;
              _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): Channels CFArray contained a non-UInt32 value.",  buf,  0x12u);
            }
          }

          exception = __cxa_allocate_exception(0x10uLL);
          *(void *)exception = &off_4865A0;
          exception[2] = 2003329396;
        }

        double v6 = *a1;
        *(void *)AudioObjectPropertyAddress buf = 0x707472756D757465LL;
        *(_DWORD *)&_DWORD buf[8] = v10;
        (*(void (**)(uint64_t *, _BYTE *, void, void, uint64_t, int *))(*v6 + 48))( v6,  buf,  0LL,  0LL,  4LL,  &v13);
        ++v5;
        uint64_t result = v11;
        if (v11) {
          goto LABEL_6;
        }
      }

      return (const __CFArray *)sub_13818((uint64_t)&v11);
    }
  }

  return result;
}

void sub_1C9D58( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __int16 v12 = (os_log_t *)sub_138E8(24);
    int v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)(v11 - 64) = 136315394;
      *(void *)(v11 - 60) = "SidetoneManager.cpp";
      *(_WORD *)(v11 - 52) = 1024;
      *(_DWORD *)(v11 - 50) = 219;
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Failed to disable the sidetone device",  (uint8_t *)(v11 - 64),  0x12u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1C9C84LL);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_1C9E30()
{
  qword_48FC40 = 0LL;
  unk_48FC48 = 0LL;
  qword_48FC38 = 0LL;
  *(_DWORD *)uint64_t v1 = 1885433443;
  dword_48FC50 = 3;
  sub_7A22C((uint64_t)&algn_48FC54[4], (unsigned int *)v1, 1LL);
  qmemcpy(v1, "kpsptcapibmpnldpnlupwphppocprsmpittpottp", sizeof(v1));
  dword_48FC70 = 2;
  return sub_7A22C((uint64_t)&unk_48FC78, (unsigned int *)v1, 10LL);
}

void sub_1C9EE4(_Unwind_Exception *a1)
{
  if (qword_48FC38)
  {
    qword_48FC40 = qword_48FC38;
    operator delete((void *)qword_48FC38);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1C9F1C()
{
  unsigned int v13 = 0;
  if (sub_14B98C(@"ProductIDOverride", @"com.apple.audio.virtualaudio", &v13))
  {
    uint64_t v0 = v13;
    uint64_t v1 = (os_log_t *)sub_138E8(13);
    int v2 = *v1;
    if (*v1 && os_log_type_enabled(*v1, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v13 = 136315906;
      int v14 = "RunTimeDefaults.cpp";
      __int16 v15 = 1024;
      int v16 = 2122;
      __int16 v17 = 2080;
      uint64_t v18 = "ProductIDOverride";
      __int16 v19 = 1024;
      int v20 = v0;
      _os_log_impl( &dword_0,  v2,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Defaults key %s was defined to %u",  (uint8_t *)&v13,  0x22u);
    }
  }

  else if (sub_1CA280() && sub_1CA2F0() >> 1 == 6001)
  {
    return 194LL;
  }

  else
  {
    uint64_t v0 = sub_56120();
    uint64_t v3 = (os_log_s *)*(id *)sub_138E8(13);
    uint64_t v4 = v3;
    if (v3 && os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v13 = 136315650;
      int v14 = "PlatformUtilities_Aspen.mm";
      __int16 v15 = 1024;
      int v16 = 142;
      __int16 v17 = 1024;
      LODWORD(v18) = v0;
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ProductID to int is: %d", (uint8_t *)&v13, 0x18u);
    }

    if (!(_DWORD)v0)
    {
      uint64_t v5 = sub_1CA2F0();
      uint64_t v0 = v5;
      if ((v5 - 2025) >= 5 && (v5 - 12002) >= 2 && (v5 - 4014) > 1)
      {
        double v9 = (os_log_s *)*(id *)sub_138E8(13);
        int v10 = v9;
        if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          unsigned int v13 = 136315650;
          int v14 = "PlatformUtilities_Aspen.mm";
          __int16 v15 = 1024;
          int v16 = 197;
          __int16 v17 = 1024;
          LODWORD(v18) = v0;
          _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Product with Acoustic ID '%d' is not handled",  (uint8_t *)&v13,  0x18u);
        }

        uint64_t v11 = (os_log_s *)*(id *)sub_138E8(13);
        __int16 v12 = v11;
        if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          unsigned int v13 = 136315650;
          int v14 = "PlatformUtilities_Aspen.mm";
          __int16 v15 = 1024;
          int v16 = 158;
          __int16 v17 = 1024;
          LODWORD(v18) = v0;
          _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ProductID is not defined in PlatformUtilities_iOS::GetProductType(), and AcouticID '%d' is not han dled in IsAcousticIDHandled() - Returning ProductID::Unknown",  (uint8_t *)&v13,  0x18u);
        }

        return 0LL;
      }

      else
      {
        double v6 = (os_log_s *)*(id *)sub_138E8(13);
        CFTypeID v7 = v6;
        if (v6 && os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v13 = 136315650;
          int v14 = "PlatformUtilities_Aspen.mm";
          __int16 v15 = 1024;
          int v16 = 190;
          __int16 v17 = 1024;
          LODWORD(v18) = v0;
          _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Product with AcousticID '%d' is handled",  (uint8_t *)&v13,  0x18u);
        }
      }
    }
  }

  return v0;
}

uint64_t sub_1CA280()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_48FE28);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_48FE28))
  {
    byte_48FE20 = sub_1CA3FC();
    __cxa_guard_release(&qword_48FE28);
  }

  return byte_48FE20;
}

void sub_1CA2D8(_Unwind_Exception *a1)
{
}

uint64_t sub_1CA2F0()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_48FE08);
  uint64_t v1 = &qword_48F000;
  if ((v0 & 1) == 0)
  {
    int v3 = __cxa_guard_acquire(&qword_48FE08);
    uint64_t v1 = &qword_48F000;
    if (v3)
    {
      unint64_t v4 = sub_1CA360((uint64_t)@"AcousticID");
      if (v4 <= 0x100000000LL) {
        int v5 = 0;
      }
      else {
        int v5 = v4;
      }
      dword_48FE00 = v5;
      __cxa_guard_release(&qword_48FE08);
      uint64_t v1 = &qword_48F000;
    }
  }

  return *((unsigned int *)v1 + 896);
}

uint64_t sub_1CA360(uint64_t a1)
{
  int v8 = 0;
  uint64_t v1 = (const __CFNumber *)MGCopyAnswerWithError(a1, 0LL, &v8);
  int v2 = v1;
  if (v8)
  {
    unsigned int v3 = 0;
    unsigned __int8 v4 = 0;
    uint64_t v5 = 0LL;
    if (!v1) {
      return v5 & 0x100000000LL | v3 & 0xFFFFFF00 | v4;
    }
  }

  else
  {
    if (!v1)
    {
      unsigned int v3 = 0;
      unsigned __int8 v4 = 0;
      uint64_t v5 = 0LL;
      return v5 & 0x100000000LL | v3 & 0xFFFFFF00 | v4;
    }

    double v6 = sub_36328(v1);
    unsigned __int8 v4 = v6;
    unsigned int v3 = v6 & 0xFFFFFF00;
    uint64_t v5 = (unint64_t)v6 & 0x100000000LL;
  }

  CFRelease(v2);
  return v5 & 0x100000000LL | v3 & 0xFFFFFF00 | v4;
}

BOOL sub_1CA3FC()
{
  unsigned __int8 v0 = (const void *)MGCopyAnswer(@"IsVirtualDevice", 0LL);
  if (!v0) {
    return 0LL;
  }
  sub_1CA4C0(&cf, v0);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  BOOL v1 = sub_1476F8((const __CFNumber *)cf);
  if (cf) {
    CFRelease(cf);
  }
  return v1;
}

void sub_1CA498( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

void *sub_1CA4C0(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFBooleanGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }

  return a1;
}

void sub_1CA53C(_Unwind_Exception *a1)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

const void **sub_1CA56C(const void **a1)
{
  int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *sub_1CA59C(void *a1, int a2)
{
  __str[0] = 0;
  switch(a2)
  {
    case 1:
      uint64_t v30 = 0LL;
      int v3 = 184;
      goto LABEL_8;
    case 2:
      uint64_t v30 = 0LL;
      goto LABEL_5;
    case 3:
      uint64_t v30 = 97LL;
LABEL_5:
      int v3 = 238;
      goto LABEL_8;
    case 4:
      uint64_t v30 = 0LL;
      int v3 = 520;
      goto LABEL_8;
    case 5:
      uint64_t v30 = 0LL;
      int v3 = 620;
LABEL_8:
      uint64_t v4 = 98LL;
      goto LABEL_233;
    case 6:
      uint64_t v30 = 0LL;
      int v3 = 10;
      goto LABEL_50;
    case 7:
      uint64_t v30 = 0LL;
      int v3 = 11;
      goto LABEL_50;
    case 8:
      uint64_t v30 = 0LL;
      int v3 = 12;
      goto LABEL_50;
    case 9:
      uint64_t v30 = 0LL;
      int v3 = 16;
      goto LABEL_50;
    case 10:
      uint64_t v30 = 0LL;
      int v3 = 17;
      goto LABEL_50;
    case 11:
      uint64_t v30 = 0LL;
      int v3 = 101;
      goto LABEL_50;
    case 12:
      uint64_t v30 = 0LL;
      int v3 = 111;
      goto LABEL_50;
    case 13:
      uint64_t v30 = 0LL;
      int v3 = 121;
      goto LABEL_50;
    case 14:
      uint64_t v30 = 0LL;
      int v3 = 20;
      goto LABEL_50;
    case 15:
      uint64_t v30 = 0LL;
      int v3 = 21;
      goto LABEL_50;
    case 16:
      uint64_t v30 = 0LL;
      int v3 = 22;
      goto LABEL_50;
    case 17:
      uint64_t v30 = 0LL;
      goto LABEL_49;
    case 18:
      uint64_t v30 = 0LL;
      int v3 = 28;
      goto LABEL_50;
    case 19:
      uint64_t v30 = 0LL;
      int v3 = 37;
      goto LABEL_50;
    case 20:
      uint64_t v30 = 0LL;
      int v3 = 38;
      goto LABEL_50;
    case 21:
      uint64_t v30 = 0LL;
      int v3 = 201;
      goto LABEL_50;
    case 22:
      uint64_t v30 = 0LL;
      int v3 = 211;
      goto LABEL_50;
    case 23:
      uint64_t v30 = 0LL;
      int v3 = 221;
      goto LABEL_50;
    case 24:
      uint64_t v30 = 0LL;
      int v3 = 32;
      goto LABEL_50;
    case 25:
      uint64_t v30 = 0LL;
      int v3 = 33;
      goto LABEL_50;
    case 26:
      uint64_t v30 = 0LL;
      int v3 = 79;
      goto LABEL_50;
    case 27:
      uint64_t v30 = 0LL;
      int v3 = 42;
      goto LABEL_50;
    case 28:
      uint64_t v30 = 0LL;
      int v3 = 43;
      goto LABEL_50;
    case 29:
      uint64_t v30 = 0LL;
      int v3 = 47;
      goto LABEL_50;
    case 30:
      uint64_t v30 = 0LL;
      int v3 = 48;
      goto LABEL_50;
    case 31:
      uint64_t v30 = 0LL;
      int v3 = 49;
      goto LABEL_50;
    case 32:
      uint64_t v30 = 103LL;
      int v3 = 52;
      goto LABEL_50;
    case 33:
      uint64_t v5 = 103LL;
      goto LABEL_38;
    case 34:
      uint64_t v5 = 112LL;
LABEL_38:
      uint64_t v30 = v5;
      int v3 = 53;
      goto LABEL_50;
    case 35:
      uint64_t v30 = 112LL;
      int v3 = 54;
      goto LABEL_50;
    case 36:
      uint64_t v30 = 0LL;
      int v3 = 63;
      goto LABEL_50;
    case 37:
      uint64_t v30 = 0LL;
      int v3 = 64;
      goto LABEL_50;
    case 38:
      uint64_t v30 = 0LL;
      int v3 = 73;
      goto LABEL_50;
    case 39:
      uint64_t v30 = 0LL;
      int v3 = 74;
      goto LABEL_50;
    case 40:
      uint64_t v30 = 0LL;
      int v3 = 83;
      goto LABEL_50;
    case 41:
      uint64_t v30 = 0LL;
      int v3 = 84;
      goto LABEL_50;
    case 42:
      uint64_t v30 = 0LL;
      int v3 = 93;
      goto LABEL_50;
    case 43:
      uint64_t v30 = 0LL;
      int v3 = 94;
      goto LABEL_50;
    case 44:
      uint64_t v30 = 117LL;
LABEL_49:
      int v3 = 27;
LABEL_50:
      uint64_t v4 = 100LL;
      goto LABEL_233;
    case 45:
      uint64_t v30 = 0LL;
      int v3 = 59;
      goto LABEL_243;
    case 46:
      uint64_t v30 = 0LL;
      int v3 = 104;
      goto LABEL_232;
    case 47:
      uint64_t v30 = 0LL;
      goto LABEL_55;
    case 48:
      uint64_t v30 = 100LL;
LABEL_55:
      int v3 = 42;
      goto LABEL_123;
    case 49:
      uint64_t v30 = 0LL;
      goto LABEL_60;
    case 50:
      uint64_t v6 = 98LL;
      goto LABEL_59;
    case 51:
      uint64_t v6 = 115LL;
LABEL_59:
      uint64_t v30 = v6;
LABEL_60:
      int v3 = 71;
      goto LABEL_123;
    case 52:
      uint64_t v30 = 0LL;
      int v3 = 72;
      goto LABEL_123;
    case 53:
      uint64_t v30 = 0LL;
      int v3 = 73;
      goto LABEL_123;
    case 54:
      uint64_t v30 = 0LL;
      int v3 = 81;
      goto LABEL_123;
    case 55:
      uint64_t v30 = 0LL;
      int v3 = 82;
      goto LABEL_123;
    case 56:
      uint64_t v30 = 0LL;
      goto LABEL_67;
    case 57:
      uint64_t v30 = 109LL;
LABEL_67:
      int v3 = 85;
      goto LABEL_123;
    case 58:
      uint64_t v30 = 0LL;
      goto LABEL_70;
    case 59:
      uint64_t v30 = 109LL;
LABEL_70:
      int v3 = 86;
      goto LABEL_123;
    case 60:
      uint64_t v30 = 0LL;
      goto LABEL_73;
    case 61:
      uint64_t v30 = 109LL;
LABEL_73:
      int v3 = 87;
      goto LABEL_123;
    case 62:
      uint64_t v30 = 0LL;
      int v3 = 96;
      goto LABEL_123;
    case 63:
      uint64_t v30 = 0LL;
      int v3 = 97;
      goto LABEL_123;
    case 64:
      uint64_t v30 = 0LL;
      goto LABEL_78;
    case 65:
      uint64_t v30 = 97LL;
LABEL_78:
      int v3 = 98;
      goto LABEL_123;
    case 66:
      uint64_t v30 = 0LL;
      goto LABEL_81;
    case 67:
      uint64_t v30 = 97LL;
LABEL_81:
      int v3 = 99;
      goto LABEL_123;
    case 68:
      uint64_t v30 = 97LL;
      int v3 = 105;
      goto LABEL_123;
    case 69:
      uint64_t v30 = 0LL;
      int v3 = 120;
      goto LABEL_123;
    case 70:
      uint64_t v30 = 0LL;
      int v3 = 127;
      goto LABEL_123;
    case 71:
      uint64_t v30 = 0LL;
      int v3 = 128;
      goto LABEL_123;
    case 72:
      uint64_t v30 = 0LL;
      goto LABEL_88;
    case 73:
      uint64_t v30 = 97LL;
LABEL_88:
      int v3 = 171;
      goto LABEL_123;
    case 74:
      uint64_t v30 = 0LL;
      int v3 = 181;
      goto LABEL_123;
    case 75:
      uint64_t v30 = 0LL;
      int v3 = 182;
      goto LABEL_123;
    case 76:
      uint64_t v30 = 0LL;
      int v3 = 207;
      goto LABEL_123;
    case 77:
      uint64_t v30 = 0LL;
      int v3 = 210;
      goto LABEL_123;
    case 78:
      uint64_t v30 = 0LL;
      int v3 = 217;
      goto LABEL_123;
    case 79:
      uint64_t v30 = 0LL;
      int v3 = 255;
      goto LABEL_123;
    case 80:
      uint64_t v30 = 0LL;
      int v3 = 271;
      goto LABEL_123;
    case 81:
      uint64_t v30 = 0LL;
      int v3 = 272;
      goto LABEL_123;
    case 82:
      uint64_t v30 = 0LL;
      int v3 = 305;
      goto LABEL_123;
    case 83:
      uint64_t v30 = 0LL;
      int v3 = 307;
      goto LABEL_123;
    case 84:
      uint64_t v30 = 0LL;
      int v3 = 308;
      goto LABEL_123;
    case 85:
      uint64_t v30 = 0LL;
      int v3 = 310;
      goto LABEL_123;
    case 86:
      uint64_t v30 = 0LL;
      int v3 = 311;
      goto LABEL_123;
    case 87:
      uint64_t v30 = 0LL;
      int v3 = 317;
      goto LABEL_123;
    case 88:
      uint64_t v30 = 0LL;
      int v3 = 320;
      goto LABEL_123;
    case 89:
      uint64_t v30 = 0LL;
      int v3 = 348;
      goto LABEL_123;
    case 90:
      uint64_t v30 = 0LL;
      int v3 = 381;
      goto LABEL_123;
    case 91:
      uint64_t v30 = 0LL;
      int v3 = 382;
      goto LABEL_123;
    case 92:
      uint64_t v30 = 0LL;
      int v3 = 407;
      goto LABEL_123;
    case 93:
      uint64_t v30 = 0LL;
      int v3 = 408;
      goto LABEL_123;
    case 94:
      uint64_t v30 = 0LL;
      int v3 = 410;
      goto LABEL_123;
    case 95:
      uint64_t v30 = 0LL;
      int v3 = 411;
      goto LABEL_123;
    case 96:
      uint64_t v30 = 0LL;
      int v3 = 417;
      goto LABEL_123;
    case 97:
      uint64_t v30 = 0LL;
      int v3 = 420;
      goto LABEL_123;
    case 98:
      uint64_t v30 = 0LL;
      int v3 = 507;
      goto LABEL_123;
    case 99:
      uint64_t v30 = 0LL;
      int v3 = 508;
      goto LABEL_123;
    case 100:
      uint64_t v30 = 0LL;
      int v3 = 517;
      goto LABEL_123;
    case 101:
      uint64_t v30 = 0LL;
      int v3 = 522;
      goto LABEL_123;
    case 102:
      uint64_t v30 = 0LL;
      int v3 = 537;
      goto LABEL_123;
    case 103:
      uint64_t v30 = 0LL;
      int v3 = 538;
      goto LABEL_123;
    case 104:
      uint64_t v30 = 0LL;
      int v3 = 617;
      goto LABEL_123;
    case 105:
      uint64_t v30 = 0LL;
      int v3 = 620;
      goto LABEL_123;
    case 106:
      uint64_t v30 = 0LL;
      int v3 = 717;
      goto LABEL_123;
    case 107:
      uint64_t v30 = 0LL;
      int v3 = 720;
LABEL_123:
      uint64_t v4 = 106LL;
      goto LABEL_233;
    case 108:
      uint64_t v30 = 97LL;
      int v3 = 27;
      goto LABEL_232;
    case 109:
      uint64_t v30 = 97LL;
      int v3 = 28;
      goto LABEL_232;
    case 110:
      uint64_t v30 = 0LL;
      int v3 = 41;
      goto LABEL_232;
    case 111:
      uint64_t v30 = 0LL;
      int v3 = 42;
      goto LABEL_232;
    case 112:
      uint64_t v30 = 0LL;
      int v3 = 48;
      goto LABEL_232;
    case 113:
      uint64_t v30 = 0LL;
      int v3 = 49;
      goto LABEL_232;
    case 114:
      uint64_t v30 = 0LL;
      int v3 = 51;
      goto LABEL_232;
    case 115:
      uint64_t v30 = 0LL;
      int v3 = 53;
      goto LABEL_232;
    case 116:
      uint64_t v30 = 0LL;
      int v3 = 56;
      goto LABEL_232;
    case 117:
      uint64_t v30 = 0LL;
      int v3 = 61;
      goto LABEL_232;
    case 118:
      uint64_t v30 = 0LL;
      int v3 = 64;
      goto LABEL_232;
    case 119:
      uint64_t v30 = 0LL;
      int v3 = 65;
      goto LABEL_232;
    case 120:
      uint64_t v30 = 0LL;
      int v3 = 66;
      goto LABEL_232;
    case 121:
      uint64_t v30 = 0LL;
      int v3 = 69;
      goto LABEL_232;
    case 122:
      uint64_t v30 = 0LL;
      int v3 = 71;
      goto LABEL_232;
    case 123:
      uint64_t v30 = 0LL;
      int v3 = 74;
      goto LABEL_232;
    case 124:
      uint64_t v30 = 0LL;
      int v3 = 75;
      goto LABEL_232;
    case 125:
      uint64_t v30 = 0LL;
      int v3 = 841;
      goto LABEL_232;
    case 126:
      uint64_t v30 = 0LL;
      int v3 = 102;
      goto LABEL_232;
    case 127:
      uint64_t v30 = 0LL;
      int v3 = 112;
      goto LABEL_232;
    case 128:
      uint64_t v7 = 115LL;
      goto LABEL_146;
    case 129:
      uint64_t v7 = 98LL;
LABEL_146:
      uint64_t v30 = v7;
      int v3 = 111;
      goto LABEL_232;
    case 130:
      uint64_t v8 = 115LL;
      goto LABEL_149;
    case 131:
      uint64_t v8 = 98LL;
LABEL_149:
      uint64_t v30 = v8;
      int v3 = 121;
      goto LABEL_232;
    case 132:
      uint64_t v9 = 115LL;
      goto LABEL_152;
    case 133:
      uint64_t v9 = 98LL;
LABEL_152:
      uint64_t v30 = v9;
      int v3 = 131;
      goto LABEL_232;
    case 134:
      uint64_t v10 = 115LL;
      goto LABEL_155;
    case 135:
      uint64_t v10 = 98LL;
LABEL_155:
      uint64_t v30 = v10;
      int v3 = 140;
      goto LABEL_232;
    case 136:
      uint64_t v11 = 115LL;
      goto LABEL_158;
    case 137:
      uint64_t v11 = 98LL;
LABEL_158:
      uint64_t v30 = v11;
      int v3 = 141;
      goto LABEL_232;
    case 138:
      uint64_t v12 = 115LL;
      goto LABEL_161;
    case 139:
      uint64_t v12 = 98LL;
LABEL_161:
      uint64_t v30 = v12;
      int v3 = 142;
      goto LABEL_232;
    case 140:
      uint64_t v13 = 98LL;
      goto LABEL_164;
    case 141:
      uint64_t v13 = 115LL;
LABEL_164:
      uint64_t v30 = v13;
      int v3 = 143;
      goto LABEL_232;
    case 142:
      uint64_t v14 = 115LL;
      goto LABEL_167;
    case 143:
      uint64_t v14 = 98LL;
LABEL_167:
      uint64_t v30 = v14;
      int v3 = 144;
      goto LABEL_232;
    case 144:
      uint64_t v15 = 115LL;
      goto LABEL_170;
    case 145:
      uint64_t v15 = 98LL;
LABEL_170:
      uint64_t v30 = v15;
      int v3 = 146;
      goto LABEL_232;
    case 146:
      uint64_t v16 = 98LL;
      goto LABEL_173;
    case 147:
      uint64_t v16 = 115LL;
LABEL_173:
      uint64_t v30 = v16;
      int v3 = 149;
      goto LABEL_232;
    case 148:
      uint64_t v17 = 115LL;
      goto LABEL_176;
    case 149:
      uint64_t v17 = 98LL;
LABEL_176:
      uint64_t v30 = v17;
      int v3 = 157;
      goto LABEL_232;
    case 150:
      uint64_t v18 = 115LL;
      goto LABEL_179;
    case 151:
      uint64_t v18 = 98LL;
LABEL_179:
      uint64_t v30 = v18;
      int v3 = 158;
      goto LABEL_232;
    case 152:
      uint64_t v19 = 115LL;
      goto LABEL_182;
    case 153:
      uint64_t v19 = 98LL;
LABEL_182:
      uint64_t v30 = v19;
      int v3 = 187;
      goto LABEL_232;
    case 154:
      uint64_t v20 = 115LL;
      goto LABEL_185;
    case 155:
      uint64_t v20 = 98LL;
LABEL_185:
      uint64_t v30 = v20;
      int v3 = 188;
      goto LABEL_232;
    case 156:
      uint64_t v21 = 115LL;
      goto LABEL_188;
    case 157:
      uint64_t v21 = 98LL;
LABEL_188:
      uint64_t v30 = v21;
      int v3 = 197;
      goto LABEL_232;
    case 158:
      uint64_t v22 = 115LL;
      goto LABEL_191;
    case 159:
      uint64_t v22 = 98LL;
LABEL_191:
      uint64_t v30 = v22;
      int v3 = 198;
      goto LABEL_232;
    case 160:
      uint64_t v30 = 0LL;
      int v3 = 199;
      goto LABEL_232;
    case 161:
      uint64_t v23 = 115LL;
      goto LABEL_195;
    case 162:
      uint64_t v23 = 98LL;
LABEL_195:
      uint64_t v30 = v23;
      int v3 = 207;
      goto LABEL_232;
    case 163:
      uint64_t v24 = 115LL;
      goto LABEL_198;
    case 164:
      uint64_t v24 = 98LL;
LABEL_198:
      uint64_t v30 = v24;
      int v3 = 208;
      goto LABEL_232;
    case 165:
      uint64_t v25 = 115LL;
      goto LABEL_201;
    case 166:
      uint64_t v25 = 98LL;
LABEL_201:
      uint64_t v30 = v25;
      int v3 = 217;
      goto LABEL_232;
    case 167:
      uint64_t v26 = 115LL;
      goto LABEL_204;
    case 168:
      uint64_t v26 = 98LL;
LABEL_204:
      uint64_t v30 = v26;
      int v3 = 218;
      goto LABEL_232;
    case 169:
      uint64_t v30 = 0LL;
      int v3 = 210;
      goto LABEL_232;
    case 170:
      uint64_t v30 = 0LL;
      int v3 = 101;
      goto LABEL_209;
    case 171:
      uint64_t v30 = 0LL;
      int v3 = 102;
      goto LABEL_209;
    case 172:
      uint64_t v30 = 0LL;
      int v3 = 103;
LABEL_209:
      uint64_t v4 = 112LL;
      goto LABEL_233;
    case 173:
      uint64_t v27 = 110LL;
      goto LABEL_212;
    case 174:
      uint64_t v27 = 112LL;
LABEL_212:
      uint64_t v30 = v27;
      int v3 = 398;
      goto LABEL_229;
    case 175:
      uint64_t v30 = 0LL;
      int v3 = 456;
      goto LABEL_229;
    case 176:
      uint64_t v30 = 112LL;
      int v3 = 698;
      goto LABEL_229;
    case 177:
      uint64_t v30 = 0LL;
      int v3 = 720;
      goto LABEL_229;
    case 178:
      uint64_t v30 = 0LL;
      int v3 = 721;
      goto LABEL_229;
    case 179:
      uint64_t v30 = 0LL;
      int v3 = 734;
      goto LABEL_229;
    case 180:
      uint64_t v30 = 0LL;
      int v3 = 742;
      goto LABEL_229;
    case 181:
      uint64_t v30 = 0LL;
      int v3 = 1125;
      goto LABEL_229;
    case 182:
      uint64_t v30 = 0LL;
      int v3 = 1153;
      goto LABEL_229;
    case 183:
      uint64_t v30 = 0LL;
      int v3 = 1232;
      goto LABEL_229;
    case 184:
      uint64_t v30 = 0LL;
      int v3 = 1250;
      goto LABEL_229;
    case 185:
      uint64_t v30 = 0LL;
      int v3 = 1251;
      goto LABEL_229;
    case 186:
      uint64_t v30 = 0LL;
      int v3 = 1252;
      goto LABEL_229;
    case 187:
      uint64_t v30 = 0LL;
      int v3 = 1253;
      goto LABEL_229;
    case 188:
      snprintf(__str, 0x18uLL, "%c%d%c", 116LL, 698, 116LL);
      goto LABEL_234;
    case 189:
      uint64_t v30 = 0LL;
      int v3 = 6502;
      goto LABEL_229;
    case 190:
      uint64_t v30 = 0LL;
      int v3 = 6809;
LABEL_229:
      uint64_t v4 = 116LL;
      goto LABEL_233;
    case 191:
      uint64_t v30 = 0LL;
      int v3 = 100;
      uint64_t v4 = 113LL;
      goto LABEL_233;
    case 192:
      uint64_t v30 = 0LL;
      int v3 = 301;
LABEL_232:
      uint64_t v4 = 110LL;
      goto LABEL_233;
    case 193:
      uint64_t v30 = 0LL;
      int v3 = 101;
      goto LABEL_243;
    case 194:
      uint64_t v30 = 0LL;
      int v3 = 201;
      goto LABEL_243;
    case 195:
      uint64_t v30 = 0LL;
      int v3 = 301;
      goto LABEL_243;
    case 196:
      uint64_t v30 = 0LL;
      int v3 = 401;
      goto LABEL_243;
    case 197:
      uint64_t v30 = 0LL;
      int v3 = 501;
LABEL_243:
      uint64_t v4 = 118LL;
LABEL_233:
      snprintf(__str, 0x18uLL, "%c%d%c", v4, v3, v30);
LABEL_234:
      if (!__str[0]) {
        goto LABEL_236;
      }
      uint64_t v28 = CFStringCreateWithCString(0LL, __str, 0x600u);
      break;
    default:
LABEL_236:
      uint64_t v28 = 0LL;
      break;
  }

  v31[0] = &off_483688;
  v31[1] = v28;
  sub_48E98(a1, v28);
  return sub_39FD8(v31);
}

void sub_1CAFE0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_1CAFFC(void *__dst)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_48FCD8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_48FCD8))
  {
    sub_14EEF8(&xmmword_48FCB8);
    __cxa_guard_release(&qword_48FCD8);
  }

  if (byte_48FCD0)
  {
    if (byte_48FCCF < 0)
    {
      sub_24054(__dst, (void *)xmmword_48FCB8, *((unint64_t *)&xmmword_48FCB8 + 1));
    }

    else
    {
      *(_OWORD *)std::__fs::filesystem::path __dst = xmmword_48FCB8;
      __dst[2] = unk_48FCC8;
    }
  }

  else
  {
    else {
      uint64_t v3 = 0LL;
    }
    sub_93D94((uint64_t)v11);
    uint64_t v4 = sub_826EC(&v12, (uint64_t)"AID", 3LL);
    std::ostream::operator<<(v4, v3);
    sub_82924(__p, (uint64_t)v13);
    if (v10 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    uint64_t v6 = CFStringCreateWithCString(0LL, (const char *)v5, 0x600u);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    *(void *)((char *)v11
    uint64_t v12 = v7;
    if (v14 < 0) {
      operator delete((void *)v13[8]);
    }
    std::streambuf::~streambuf(v13);
    std::ios::~ios(&v15);
    v8[0] = &off_483688;
    v8[1] = v6;
    sub_48E98(__dst, v6);
    sub_39FD8(v8);
  }

void sub_1CB1E0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

void sub_1CB234(int a1)
{
  if (qword_48CDB8 != -1) {
    dispatch_once(&qword_48CDB8, &stru_46DD20);
  }
  if (byte_48CDA8 || byte_48CDA9)
  {
    CFPreferencesAppSynchronize(@"com.apple.coreaudio");
    if (sub_32D3B0(@"EnableTelephonyMonitor", @"com.apple.coreaudio", 0LL))
    {
      switch(a1)
      {
        case 3:
          unsigned __int8 v2 = @"com.apple.audio.virtualaudio";
          CFPreferencesAppSynchronize(@"com.apple.audio.virtualaudio");
          uint64_t v3 = @"EnableEANCTelephonyMonitor";
          goto LABEL_12;
        case 2:
          unsigned __int8 v2 = @"com.apple.coreaudio";
          CFPreferencesAppSynchronize(@"com.apple.coreaudio");
          uint64_t v3 = @"EnableHALTelephonyMonitor";
          goto LABEL_12;
        case 1:
          unsigned __int8 v2 = @"com.apple.audio.virtualaudio";
          CFPreferencesAppSynchronize(@"com.apple.audio.virtualaudio");
          uint64_t v3 = @"EnableVADTelephonyMonitor";
LABEL_12:
          sub_32D3B0(v3, v2, 0LL);
          return;
      }

      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        int v4 = 136315394;
        uint64_t v5 = "PlatformUtilities_iOS.cpp";
        __int16 v6 = 1024;
        int v7 = 253;
        _os_log_impl( &dword_0,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "%25s:%-5d  Unhandled case in switch",  (uint8_t *)&v4,  0x12u);
      }

      __break(1u);
    }
  }

void sub_1CB3D8(uint64_t a1)
{
  int v8 = 0;
  unsigned __int8 v2 = (const void *)MGCopyAnswerWithError(@"jxx29Cq5bGHDnkcha4y/Rw", 0LL, &v8);
  uint64_t v3 = v2;
  CFTypeRef v7 = v2;
  if (v8) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v2 == 0LL;
  }
  if (!v4)
  {
    CFTypeID v5 = CFGetTypeID(v2);
    if (v5 == CFDataGetTypeID())
    {
      sub_156328(&v6, &v7);
      *(void *)a1 = v6;
      *(_BYTE *)(a1 + 8) = 1;
    }

    else
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 8) = 0;
    }

    goto LABEL_11;
  }

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  if (v2) {
LABEL_11:
  }
    CFRelease(v3);
}

uint64_t sub_1CB4A0()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_48FCF8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_48FCF8))
  {
    byte_48FCF0 = sub_1CB510();
    __cxa_guard_release(&qword_48FCF8);
  }

  return byte_48FCF0;
}

void sub_1CB4F8(_Unwind_Exception *a1)
{
}

id sub_1CB510()
{
  if (MGGetBoolAnswer(@"cBy4BcYs5YWtFHbBpt4C6A"))
  {
    else {
      id v0 = 0LL;
    }
    unsigned __int8 v2 = (os_log_s *)*(id *)sub_138E8(16);
    uint64_t v3 = v2;
    if (v2 && os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v4 = "unsupported";
      double v40 = "CPMSInterface.mm";
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      if ((_DWORD)v0) {
        BOOL v4 = "supported";
      }
      __int16 v41 = 1024;
      int v42 = 91;
      __int16 v43 = 2080;
      double v44 = (char *)v4;
      CFTypeID v5 = "%25s:%-5d CPMS for Haptics is %s";
LABEL_19:
      _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, v5, buf, 0x1Cu);
      goto LABEL_20;
    }

    goto LABEL_20;
  }

  unsigned __int8 v1 = atomic_load((unsigned __int8 *)&qword_48FD68);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_48FD68))
  {
    sub_1CBE5C(v36);
    sub_156BE8(&v37);
    uint64_t v9 = v37;
    char v10 = v38;
    if (v37 == v38)
    {
      uint64_t v16 = sub_138E8(13);
      if ((*(_BYTE *)(v16 + 8) & 1) != 0)
      {
        os_log_t v17 = *(os_log_t *)v16;
        if (*(void *)v16)
        {
          if (os_log_type_enabled(*(os_log_t *)v16, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            double v40 = "StandardUtilities.cpp";
            __int16 v41 = 1024;
            int v42 = 1303;
            __int16 v43 = 2080;
            double v44 = "IODeviceTree:/product/audio";
            __int16 v45 = 2080;
            float v46 = "speaker-cpms-bgd_inst";
            uint64_t v13 = "%25s:%-5d EDT entry is empty for EDT path '%s'; key '%s'";
            char v14 = v17;
            uint32_t v15 = 38;
            goto LABEL_31;
          }
        }
      }
    }

    else
    {
      uint64_t v11 = sub_138E8(13);
      if ((*(_BYTE *)(v11 + 8) & 1) != 0)
      {
        os_log_t v12 = *(os_log_t *)v11;
        if (*(void *)v11)
        {
          if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            double v40 = "StandardUtilities.cpp";
            __int16 v41 = 1024;
            int v42 = 1300;
            __int16 v43 = 2080;
            double v44 = "speaker-cpms-bgd_inst";
            uint64_t v13 = "%25s:%-5d EDT entry T::key %s returned valid";
            char v14 = v12;
            uint32_t v15 = 28;
LABEL_31:
            _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEBUG, v13, buf, v15);
          }
        }
      }
    }

    if (v9) {
      operator delete(v9);
    }
    if (v9 != v10) {
      goto LABEL_48;
    }
    sub_15684C(&v37);
    uint64_t v18 = v37;
    uint64_t v19 = v38;
    if (v37 == v38)
    {
      uint64_t v25 = sub_138E8(13);
      if ((*(_BYTE *)(v25 + 8) & 1) != 0)
      {
        os_log_t v26 = *(os_log_t *)v25;
        if (*(void *)v25)
        {
          if (os_log_type_enabled(*(os_log_t *)v25, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            double v40 = "StandardUtilities.cpp";
            __int16 v41 = 1024;
            int v42 = 1303;
            __int16 v43 = 2080;
            double v44 = "IODeviceTree:/product/audio";
            __int16 v45 = 2080;
            float v46 = "speaker-cpms-bgd_100ms";
            uint64_t v22 = "%25s:%-5d EDT entry is empty for EDT path '%s'; key '%s'";
            uint64_t v23 = v26;
            uint32_t v24 = 38;
            goto LABEL_44;
          }
        }
      }
    }

    else
    {
      uint64_t v20 = sub_138E8(13);
      if ((*(_BYTE *)(v20 + 8) & 1) != 0)
      {
        os_log_t v21 = *(os_log_t *)v20;
        if (*(void *)v20)
        {
          if (os_log_type_enabled(*(os_log_t *)v20, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            double v40 = "StandardUtilities.cpp";
            __int16 v41 = 1024;
            int v42 = 1300;
            __int16 v43 = 2080;
            double v44 = "speaker-cpms-bgd_100ms";
            uint64_t v22 = "%25s:%-5d EDT entry T::key %s returned valid";
            uint64_t v23 = v21;
            uint32_t v24 = 28;
LABEL_44:
            _os_log_impl(&dword_0, v23, OS_LOG_TYPE_DEBUG, v22, buf, v24);
          }
        }
      }
    }

    if (v18) {
      operator delete(v18);
    }
    if (v18 != v19)
    {
LABEL_48:
      BOOL v27 = 1;
LABEL_49:
      sub_1CBFA0((uint64_t)v36);
      byte_48FD60 = v27;
      __cxa_guard_release(&qword_48FD68);
      goto LABEL_5;
    }

    sub_1563D0(&v37);
    uint64_t v28 = v37;
    BOOL v27 = v37 != v38;
    if (v37 == v38)
    {
      uint64_t v34 = sub_138E8(13);
      if ((*(_BYTE *)(v34 + 8) & 1) != 0)
      {
        os_log_t v35 = *(os_log_t *)v34;
        if (*(void *)v34)
        {
          if (os_log_type_enabled(*(os_log_t *)v34, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            double v40 = "StandardUtilities.cpp";
            __int16 v41 = 1024;
            int v42 = 1303;
            __int16 v43 = 2080;
            double v44 = "IODeviceTree:/product/audio";
            __int16 v45 = 2080;
            float v46 = "speaker-cpms-bgd_1s";
            float64x2_t v31 = "%25s:%-5d EDT entry is empty for EDT path '%s'; key '%s'";
            double v32 = v35;
            uint32_t v33 = 38;
            goto LABEL_59;
          }
        }
      }
    }

    else
    {
      uint64_t v29 = sub_138E8(13);
      if ((*(_BYTE *)(v29 + 8) & 1) != 0)
      {
        os_log_t v30 = *(os_log_t *)v29;
        if (*(void *)v29)
        {
          if (os_log_type_enabled(*(os_log_t *)v29, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            double v40 = "StandardUtilities.cpp";
            __int16 v41 = 1024;
            int v42 = 1300;
            __int16 v43 = 2080;
            double v44 = "speaker-cpms-bgd_1s";
            float64x2_t v31 = "%25s:%-5d EDT entry T::key %s returned valid";
            double v32 = v30;
            uint32_t v33 = 28;
LABEL_59:
            _os_log_impl(&dword_0, v32, OS_LOG_TYPE_DEBUG, v31, buf, v33);
          }
        }
      }
    }

    if (v28) {
      operator delete(v28);
    }
    goto LABEL_49;
  }

void sub_1CBB1C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (v10) {
    operator delete(v10);
  }
  sub_1CBFA0((uint64_t)&a10);
  __cxa_guard_abort(&qword_48FD68);
  _Unwind_Resume(a1);
}

uint64_t sub_1CBB74()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_48FD08);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_48FD08))
  {
    byte_48FD00 = MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 1;
    __cxa_guard_release(&qword_48FD08);
  }

  return byte_48FD00;
}

void sub_1CBBE0(_Unwind_Exception *a1)
{
}

uint64_t sub_1CBBF8()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_48FD18);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_48FD18))
  {
    byte_48FD10 = MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 6;
    __cxa_guard_release(&qword_48FD18);
  }

  return byte_48FD10;
}

void sub_1CBC64(_Unwind_Exception *a1)
{
}

uint64_t sub_1CBC7C(__int16 a1)
{
  if ((_BYTE)a1) {
    return (a1 & 0xFF00) != 0LL;
  }
  return 0LL;
}

uint64_t sub_1CBCC4(int a1)
{
  uint64_t result = 0LL;
  if (a1 <= 79)
  {
    return 1LL;
  }

  if ((a1 - 80) <= 0x1B && ((1 << (a1 - 80)) & 0xFCCCC03) != 0
    || (a1 - 2025) < 5
    || (a1 - 12002) <= 1)
  {
    return 1LL;
  }

  return result;
}

uint64_t sub_1CBD44()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_48FD48);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_48FD48))
  {
    BOOL v2 = (unsigned __int16)sub_8339C((uint64_t)@"RegionalBehaviorShutterClick") >= 0x101u
      && (sub_753A8() == 72
       || sub_753A8() == 73
       || sub_753A8() == 74
       || sub_753A8() == 75);
    byte_48FD40 = v2;
    __cxa_guard_release(&qword_48FD48);
  }

  return byte_48FD40;
}

void sub_1CBDF0(_Unwind_Exception *a1)
{
}

BOOL sub_1CBE08()
{
  return sub_56120() != 2
      && sub_56120() != 3
      && sub_56120() != 4
      && sub_56120() != 5
      && sub_56120() != 195;
}

char *sub_1CBE5C(char *a1)
{
  BOOL v2 = a1;
  if (a1[23] < 0) {
    BOOL v2 = *(const char **)a1;
  }
  io_registry_entry_t v3 = IORegistryEntryFromPath(kIOMainPortDefault, v2);
  *((_DWORD *)a1 + 6) = v3;
  if (!v3)
  {
    BOOL v4 = (os_log_s *)*(id *)sub_138E8(13);
    CFTypeID v5 = v4;
    if (v4 && os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a1;
      if (a1[23] < 0) {
        uint64_t v6 = *(char **)a1;
      }
      int v8 = 136315650;
      uint64_t v9 = "StandardUtilities.h";
      __int16 v10 = 1024;
      int v11 = 1125;
      __int16 v12 = 2080;
      uint64_t v13 = v6;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).",  (uint8_t *)&v8,  0x1Cu);
    }
  }

  return a1;
}

void sub_1CBF78(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1CBFA0(uint64_t a1)
{
  io_object_t v2 = *(_DWORD *)(a1 + 24);
  if (v2) {
    IOObjectRelease(v2);
  }
  return a1;
}

uint64_t sub_1CBFE0()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_48FD78);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_48FD78))
  {
    sub_1CBE5C(v3);
    BOOL v2 = sub_155FC8(v4, "supports-secure-microphone");
    sub_1CBFA0((uint64_t)v3);
    byte_48FD70 = v2;
    __cxa_guard_release(&qword_48FD78);
  }

  return byte_48FD70;
}

void sub_1CC068( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1CC090()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_48FD98);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_48FD98))
  {
    sub_1CBE5C(v3);
    BOOL v2 = sub_155FC8(v4, "supports-concurrent-hp-lp-mics");
    sub_1CBFA0((uint64_t)v3);
    byte_48FD90 = v2;
    __cxa_guard_release(&qword_48FD98);
  }

  LODWORD(result) = MGGetBoolAnswer(@"DeviceSupportsSiriBargeIn");
  if (byte_48FD90) {
    return result;
  }
  else {
    return 0LL;
  }
}

void sub_1CC12C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1CC154()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_48FDA8);
  unsigned __int8 v1 = &qword_48F000;
  if ((v0 & 1) == 0)
  {
    int v3 = __cxa_guard_acquire(&qword_48FDA8);
    unsigned __int8 v1 = &qword_48F000;
    if (v3)
    {
      unint64_t v4 = sub_1CA360((uint64_t)@"MicrophoneCount");
      if (v4 <= 0x100000000LL) {
        int v5 = 0;
      }
      else {
        int v5 = v4;
      }
      dword_48FDA0 = v5;
      __cxa_guard_release(&qword_48FDA8);
      unsigned __int8 v1 = &qword_48F000;
    }
  }

  return *((unsigned int *)v1 + 872);
}

uint64_t sub_1CC1C4()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_48FDB8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_48FDB8))
  {
    else {
      BOOL v2 = 0;
    }
    byte_48FDB0 = v2;
    __cxa_guard_release(&qword_48FDB8);
  }

  return byte_48FDB0;
}

void sub_1CC238(_Unwind_Exception *a1)
{
}

BOOL sub_1CC250()
{
  unint64_t v1 = 0LL;
  uint64_t v2 = 0LL;
  uint64_t v3 = 0LL;
  *(_OWORD *)__int128 __p = 0u;
  __int128 v38 = 0u;
  float v39 = 1.0;
  do
  {
    unint64_t v4 = dword_401F24[v3];
    if (v1)
    {
      uint8x8_t v5 = (uint8x8_t)vcnt_s8((int8x8_t)v1);
      v5.i16[0] = vaddlv_u8(v5);
      if (v5.u32[0] > 1uLL)
      {
        unint64_t v0 = dword_401F24[v3];
        if (v1 <= v4) {
          unint64_t v0 = v4 % v1;
        }
      }

      else
      {
        unint64_t v0 = ((_DWORD)v1 - 1) & v4;
      }

      uint64_t v6 = (uint64_t **)*((void *)__p[0] + v0);
      if (v6)
      {
        for (uint64_t i = *v6; i; uint64_t i = (uint64_t *)*i)
        {
          unint64_t v8 = i[1];
          if (v8 == v4)
          {
            if (*((_DWORD *)i + 4) == (_DWORD)v4) {
              goto LABEL_74;
            }
          }

          else
          {
            if (v5.u32[0] > 1uLL)
            {
              if (v8 >= v1) {
                v8 %= v1;
              }
            }

            else
            {
              v8 &= v1 - 1;
            }

            if (v8 != v0) {
              break;
            }
          }
        }
      }
    }

    uint64_t v9 = operator new(0x18uLL);
    *uint64_t v9 = 0LL;
    v9[1] = v4;
    *((_DWORD *)v9 + 4) = v4;
    float v10 = (float)(unint64_t)(v2 + 1);
    if (!v1 || (float)(v39 * (float)v1) < v10)
    {
      BOOL v11 = (v1 & (v1 - 1)) != 0;
      if (v1 < 3) {
        BOOL v11 = 1LL;
      }
      unint64_t v12 = v11 | (2 * v1);
      unint64_t v13 = vcvtps_u32_f32(v10 / v39);
      if (v12 <= v13) {
        int8x8_t prime = (int8x8_t)v13;
      }
      else {
        int8x8_t prime = (int8x8_t)v12;
      }
      if (*(void *)&prime == 1LL)
      {
        int8x8_t prime = (int8x8_t)2LL;
      }

      else if ((*(void *)&prime & (*(void *)&prime - 1LL)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
        unint64_t v1 = (unint64_t)__p[1];
      }

      if (*(void *)&prime > v1) {
        goto LABEL_30;
      }
      if (*(void *)&prime < v1)
      {
        unint64_t v21 = vcvtps_u32_f32((float)*((unint64_t *)&v38 + 1) / v39);
        if (v1 < 3 || (uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v1), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
        {
          unint64_t v21 = std::__next_prime(v21);
        }

        else
        {
          uint64_t v23 = 1LL << -(char)__clz(v21 - 1);
          if (v21 >= 2) {
            unint64_t v21 = v23;
          }
        }

        if (*(void *)&prime <= v21) {
          int8x8_t prime = (int8x8_t)v21;
        }
        if (*(void *)&prime >= v1)
        {
          unint64_t v1 = (unint64_t)__p[1];
        }

        else
        {
          if (prime)
          {
LABEL_30:
            if (*(void *)&prime >> 61) {
              sub_7A8C4();
            }
            uint32_t v15 = operator new(8LL * *(void *)&prime);
            uint64_t v16 = __p[0];
            __p[0] = v15;
            if (v16) {
              operator delete(v16);
            }
            uint64_t v17 = 0LL;
            __p[1] = (void *)prime;
            do
              *((void *)__p[0] + v17++) = 0LL;
            while (*(void *)&prime != v17);
            uint64_t v18 = (void **)v38;
            if ((void)v38)
            {
              unint64_t v19 = *(void *)(v38 + 8);
              uint8x8_t v20 = (uint8x8_t)vcnt_s8(prime);
              v20.i16[0] = vaddlv_u8(v20);
              if (v20.u32[0] > 1uLL)
              {
                if (v19 >= *(void *)&prime) {
                  v19 %= *(void *)&prime;
                }
              }

              else
              {
                v19 &= *(void *)&prime - 1LL;
              }

              *((void *)__p[0] + v19) = &v38;
              for (j = *v18; j; unint64_t v19 = v25)
              {
                unint64_t v25 = j[1];
                if (v20.u32[0] > 1uLL)
                {
                  if (v25 >= *(void *)&prime) {
                    v25 %= *(void *)&prime;
                  }
                }

                else
                {
                  v25 &= *(void *)&prime - 1LL;
                }

                if (v25 != v19)
                {
                  if (!*((void *)__p[0] + v25))
                  {
                    *((void *)__p[0] + v25) = v18;
                    goto LABEL_55;
                  }

                  *uint64_t v18 = (void *)*j;
                  *uint64_t j = **((void **)__p[0] + v25);
                  **((void **)__p[0] + v25) = j;
                  uint64_t j = v18;
                }

                unint64_t v25 = v19;
LABEL_55:
                uint64_t v18 = (void **)j;
                uint64_t j = (void *)*j;
              }
            }

            unint64_t v1 = (unint64_t)prime;
            goto LABEL_59;
          }

          uint64_t v29 = __p[0];
          __p[0] = 0LL;
          if (v29) {
            operator delete(v29);
          }
          unint64_t v1 = 0LL;
          __p[1] = 0LL;
        }
      }

void sub_1CC71C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1CC748()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_48FDD8);
  unint64_t v1 = &qword_48F000;
  if ((v0 & 1) == 0)
  {
    int v3 = __cxa_guard_acquire(&qword_48FDD8);
    unint64_t v1 = &qword_48F000;
    if (v3)
    {
      byte_48FDD0 = (unsigned __int16)sub_8339C((uint64_t)@"U+73bmG4kBGj6kpreQXUTQ") > 0x100u;
      __cxa_guard_release(&qword_48FDD8);
      unint64_t v1 = &qword_48F000;
    }
  }

  return *((unsigned __int8 *)v1 + 3536);
}

uint64_t sub_1CC7B8()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_48FDF8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_48FDF8))
  {
    if (MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 3)
    {
      int v2 = sub_7531C();
      if (v2) {
        LOBYTE(v2) = _os_feature_enabled_impl("VirtualAudio", "podcast_production");
      }
    }

    else
    {
      LOBYTE(v2) = 0;
    }

    byte_48FDF0 = v2;
    __cxa_guard_release(&qword_48FDF8);
  }

  return byte_48FDF0;
}

void sub_1CC848(_Unwind_Exception *a1)
{
}

uint64_t sub_1CC860()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_48FE18);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_48FE18))
  {
    if (MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 3)
    {
      if ((sub_1CA280() & 1) != 0) {
        char v2 = 1;
      }
      else {
        char v2 = sub_93D64();
      }
    }

    else
    {
      char v2 = 0;
    }

    byte_48FE10 = v2;
    __cxa_guard_release(&qword_48FE18);
  }

  return byte_48FE10;
}

void sub_1CC8E8(_Unwind_Exception *a1)
{
}

uint64_t sub_1CC900()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_48FE38);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_48FE38))
  {
    byte_48FE30 = sub_1CC970();
    __cxa_guard_release(&qword_48FE38);
  }

  return byte_48FE30;
}

void sub_1CC958(_Unwind_Exception *a1)
{
}

BOOL sub_1CC970()
{
  *(void *)AudioObjectPropertyAddress buf = "/System/Library/Frameworks/AudioToolbox.framework/libAudioDSP.dylib";
  *(void *)&_DWORD buf[8] = "GetAudioDSPManager";
  *(void *)&buf[16] = 0LL;
  v11[0] = 0LL;
  CFTypeRef v7 = buf;
  unint64_t v0 = atomic_load(v11);
  if (v0 != -1LL)
  {
    uint64_t v9 = &v7;
    unint64_t v8 = &v9;
    std::__call_once(v11, &v8, (void (__cdecl *)(void *))sub_1CCB0C);
  }

  if (!*(void *)&buf[16]) {
    return 0LL;
  }
  uint64_t v1 = (*(uint64_t (**)(void))&buf[16])();
  if (!v1) {
    return 0LL;
  }
  id v2 = *(id *)sub_138E8(20);
  int v3 = v2;
  if (v2)
  {
    unint64_t v4 = (os_log_s *)v2;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 40LL))(v1);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "PlatformUtilities_Aspen.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 636;
      *(_WORD *)&_BYTE buf[18] = 1024;
      *(_DWORD *)&_BYTE buf[20] = v5;
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d Voice processor version is %u", buf, 0x18u);
    }
  }

  return (*(unsigned int (**)(uint64_t))(*(void *)v1 + 40LL))(v1) > 9;
}

void sub_1CCAE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1CCB0C(const char *****a1)
{
  uint64_t v1 = **a1;
  id v2 = *v1;
  uint64_t result = dlopen(**v1, 1);
  if (result)
  {
    uint64_t result = dlsym(result, v2[1]);
    v2[2] = (const char *)result;
  }

  return result;
}

uint64_t sub_1CCB4C()
{
  LOBYTE(v8) = 0;
  int AppBooleanValue = CFPreferencesGetAppBooleanValue( @"ForceAdditiveRouting",  @"com.apple.audio.virtualaudio",  (Boolean *)&v8);
  if ((_BYTE)v8)
  {
    int v1 = AppBooleanValue;
    id v2 = (os_log_t *)sub_138E8(13);
    int v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136315906;
      uint64_t v9 = "RunTimeDefaults.cpp";
      __int16 v10 = 1024;
      int v11 = 2133;
      __int16 v12 = 2080;
      unint64_t v13 = "ForceAdditiveRouting";
      __int16 v14 = 1024;
      BOOL v15 = v1 != 0;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Defaults key %s was defined to %u",  (uint8_t *)&v8,  0x22u);
      if (!v1) {
        goto LABEL_5;
      }
      return 1LL;
    }

    if (v1) {
      return 1LL;
    }
  }

uint64_t sub_1CCD00()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_48FE58);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_48FE58))
  {
    int v2 = _os_feature_enabled_impl("VirtualAudio", "quiesceable_wired_connection");
    if (v2)
    {
      if (MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 3)
      {
        if ((sub_1CA280() & 1) != 0) {
          LOBYTE(v2) = 1;
        }
        else {
          LOBYTE(v2) = sub_93D64();
        }
      }

      else
      {
        LOBYTE(v2) = 0;
      }
    }

    byte_48FE50 = v2;
    __cxa_guard_release(&qword_48FE58);
  }

  return byte_48FE50;
}

void sub_1CCDA0(_Unwind_Exception *a1)
{
}

uint64_t sub_1CCDB8()
{
  uint64_t result = _os_feature_enabled_impl("VirtualAudio", "Oneness");
  if ((_DWORD)result) {
    return MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 1;
  }
  return result;
}

uint64_t sub_1CCDF8()
{
  uint64_t result = _os_feature_enabled_impl("VirtualAudio", "b620_ml_based_enhance_dialogue");
  if ((_DWORD)result) {
    return sub_56120() == 5;
  }
  return result;
}

void sub_1CCE34(uint64_t a1@<X8>)
{
  *(void *)a1 = off_4709D0;
  *(void *)(a1 + 8) = 1LL;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  uint64_t v2 = sub_5954C();
  (*(void (**)(_BYTE *__return_ptr))(*(void *)v2 + 312LL))(buf);
  int v3 = *(std::__shared_weak_count **)buf;
  if (*(void *)buf)
  {
    sub_6DD4();
    int v4 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
    sub_6DD4();
    if (((*(uint64_t (**)(uint64_t *))(qword_48F828 + 48))(&qword_48F828) & 1) == 0)
    {
      uint8x8_t v31 = (os_log_t *)sub_138E8(13);
      unint64_t v32 = *v31;
      if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        __int16 v40 = 1024;
        int v41 = 3667;
        _os_log_impl( &dword_0,  v32,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to acquire routing mutex.",  buf,  0x12u);
      }

      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unable to acquire routing mutex.");
    }

    uint64_t v5 = sub_138E8(8);
    uint64_t v6 = sub_138E8(34);
    char v7 = 0;
    uint64_t v8 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v9 = *(void *)(v5 + 8);
    while (1)
    {
      uint64_t v10 = *(int *)&buf[4 * v8];
      char v11 = v7;
      if (((v9 & v10) != 0) != ((*(void *)(v6 + 8) & v10) != 0)) {
        break;
      }
      char v7 = 1;
      uint64_t v8 = 1LL;
      if ((v11 & 1) != 0) {
        goto LABEL_13;
      }
    }

    if ((v9 & v10) == 0) {
      uint64_t v5 = v6;
    }
LABEL_13:
    unint64_t v19 = *(os_log_s **)v5;
    if (v19 && os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      __int16 v40 = 1024;
      int v41 = 3669;
      _os_log_impl(&dword_0, v19, OS_LOG_TYPE_INFO, "%25s:%-5d Silent mode update.", buf, 0x12u);
    }

    uint8x8_t v20 = v3->~__shared_weak_count_0;
    if (!v20) {
      goto LABEL_40;
    }
    unsigned int shared_owners = v3[1].__shared_owners_;
    uint64_t v22 = (uint64_t)&v3->~__shared_weak_count_0;
    do
    {
      unsigned int v23 = *((_DWORD *)v20 + 8);
      BOOL v24 = v23 >= shared_owners;
      if (v23 >= shared_owners) {
        unint64_t v25 = (void (__cdecl **)(std::__shared_weak_count *__hidden))v20;
      }
      else {
        unint64_t v25 = (void (__cdecl **)(std::__shared_weak_count *__hidden))((char *)v20 + 8);
      }
      if (v24) {
        uint64_t v22 = (uint64_t)v20;
      }
      uint8x8_t v20 = *v25;
    }

    while (*v25);
    if ((void (__cdecl **)(std::__shared_weak_count *__hidden))v22 == &v3->~__shared_weak_count_0
      || shared_owners < *(_DWORD *)(v22 + 32))
    {
LABEL_40:
      unint64_t v28 = (os_log_t *)sub_138E8(13);
      uint64_t v29 = *v28;
      if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        __int16 v40 = 1024;
        int v41 = 3672;
        _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Corruption in the routing database. Calling find(mCurrentCategory) returned an invalid iterator.",  buf,  0x12u);
      }

      unsigned int v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error( v30,  "Corruption in the routing database. Calling find(mCurrentCategory) returned an invalid iterator.");
    }

    if (*(_BYTE *)(v22 + 76))
    {
      sub_132308(v38, &v3[3].__vftable);
      sub_128F3C( (uint64_t)buf,  (uint64_t)v3,  &v3[1].__shared_owners_,  (uint64_t)&v3[2],  (uint64_t)v38,  (uint64_t)&v3[5],  (int)v3[6].__vftable,  &v3[6].__shared_owners_,  (uint64_t)&v3[7].__shared_owners_,  (const void ***)&v3[9],  (char)v3[16].__vftable,  &v3[16].__shared_owners_,  1919050611,  (__int128 *)&v3[17].__shared_owners_,  &v3[18].__shared_weak_owners_);
      sub_12FFA0((uint64_t)v34, v3, (uint64_t)buf, 0);
      sub_128D54((uint64_t)buf);
      sub_11AD14(v38[4]);
      sub_FF3B8(v38[1]);
      if (!v4)
      {
LABEL_32:
        sub_725DC(a1, (uint64_t)v34);
        v34[0] = off_4709D0;
        os_log_t v26 = v35;
        if (v35)
        {
          sub_10AF78(v35 + 2);
          operator delete(v26);
        }

        return;
      }
    }

    else
    {
      v34[0] = off_4709D0;
      v34[1] = 1LL;
      BOOL v35 = 0LL;
      char v36 = 0;
      char v37 = 0;
      if (!v4) {
        goto LABEL_32;
      }
    }

    (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
    goto LABEL_32;
  }

  uint64_t v12 = sub_138E8(9);
  uint64_t v13 = sub_138E8(15);
  char v14 = 0;
  uint64_t v15 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v16 = *(void *)(v12 + 8);
  while (1)
  {
    uint64_t v17 = *(int *)&buf[4 * v15];
    char v18 = v14;
    if (((v16 & v17) != 0) != ((*(void *)(v13 + 8) & v17) != 0)) {
      break;
    }
    char v14 = 1;
    uint64_t v15 = 1LL;
    if ((v18 & 1) != 0) {
      goto LABEL_36;
    }
  }

  if ((v16 & v17) == 0) {
    uint64_t v12 = v13;
  }
LABEL_36:
  BOOL v27 = *(os_log_s **)v12;
  if (*(void *)v12 && os_log_type_enabled(*(os_log_t *)v12, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "SystemSettingsCommands_Aspen.cpp";
    __int16 v40 = 1024;
    int v41 = 21;
    _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Routing manager does not exist -- cannot execute command",  buf,  0x12u);
  }

void sub_1CD338( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v28 + 24LL))(v28);
  }
  sub_7058C(v27);
  _Unwind_Resume(a1);
}

void *sub_1CD3E4@<X0>(void *a1@<X8>)
{
  return sub_7D084(a1, "Silent mode update");
}

void sub_1CD3FC(uint64_t a1@<X8>)
{
  *(void *)a1 = off_4709D0;
  *(void *)(a1 + 8) = 1LL;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  uint64_t v2 = sub_5954C();
  (*(void (**)(_BYTE *__return_ptr))(*(void *)v2 + 312LL))(buf);
  uint64_t v3 = *(void *)buf;
  if (*(void *)buf)
  {
    sub_6DD4();
    int v4 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
    sub_6DD4();
    if (((*(uint64_t (**)(uint64_t *))(qword_48F828 + 48))(&qword_48F828) & 1) == 0)
    {
      uint8x8_t v31 = (os_log_t *)sub_138E8(13);
      unint64_t v32 = *v31;
      if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        __int16 v39 = 1024;
        *(_DWORD *)__int16 v40 = 3691;
        _os_log_impl( &dword_0,  v32,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to acquire routing mutex.",  buf,  0x12u);
      }

      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unable to acquire routing mutex.");
    }

    uint64_t v5 = sub_138E8(8);
    uint64_t v6 = sub_138E8(34);
    char v7 = 0;
    uint64_t v8 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v9 = *(void *)(v5 + 8);
    while (1)
    {
      uint64_t v10 = *(int *)&buf[4 * v8];
      char v11 = v7;
      if (((v9 & v10) != 0) != ((*(void *)(v6 + 8) & v10) != 0)) {
        break;
      }
      char v7 = 1;
      uint64_t v8 = 1LL;
      if ((v11 & 1) != 0) {
        goto LABEL_13;
      }
    }

    if ((v9 & v10) == 0) {
      uint64_t v5 = v6;
    }
LABEL_13:
    unint64_t v19 = *(os_log_s **)v5;
    if (v19 && os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      __int16 v39 = 1024;
      *(_DWORD *)__int16 v40 = 3693;
      _os_log_impl(&dword_0, v19, OS_LOG_TYPE_INFO, "%25s:%-5d System Audio Effects Settings update.", buf, 0x12u);
    }

    sub_72210((uint64_t)v34, 1920099684LL);
    int v20 = sub_11AB10(*(void *)v3, (unsigned int *)(v3 + 32));
    *(void *)AudioObjectPropertyAddress buf = &off_470CA8;
    int v41 = buf;
    sub_DE5C4(&v36, v3 + 456);
    unint64_t v21 = v36;
    uint64_t v22 = v37;
    unsigned int v23 = sub_DE728(1986291046LL, v36, v37);
    if (v22 == v23)
    {
      int v24 = 0;
      if (v21) {
LABEL_19:
      }
        operator delete(v21);
    }

    else
    {
      if (!v41) {
        sub_82CEC();
      }
      int v24 = (*(uint64_t (**)(_BYTE *, void))(*(void *)v41 + 48LL))(v41, *v23);
      if (v21) {
        goto LABEL_19;
      }
    }

    unint64_t v25 = v41;
    if (v41 == buf)
    {
      uint64_t v26 = 4LL;
      unint64_t v25 = buf;
    }

    else
    {
      if (!v41)
      {
LABEL_27:
        if ((~v20 & 0x101) != 0) {
          int v27 = 1;
        }
        else {
          int v27 = v24;
        }
        if (v27 == 1)
        {
          sub_139BE4((uint64_t)buf, v3, 1919185776);
          sub_725DC((uint64_t)v34, (uint64_t)buf);
          *(void *)AudioObjectPropertyAddress buf = off_4709D0;
          uint64_t v28 = *(void **)&v40[2];
          if (*(void *)&v40[2])
          {
            sub_10AF78((uint64_t *)(*(void *)&v40[2] + 16LL));
            operator delete(v28);
          }
        }

        if (v4) {
          (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
        }
        sub_725DC(a1, (uint64_t)v34);
        v34[0] = off_4709D0;
        int v29 = v35;
        if (v35)
        {
          sub_10AF78(v35 + 2);
          operator delete(v29);
        }

        return;
      }

      uint64_t v26 = 5LL;
    }

    (*(void (**)(void))(*v25 + 8 * v26))();
    goto LABEL_27;
  }

  uint64_t v12 = sub_138E8(9);
  uint64_t v13 = sub_138E8(15);
  char v14 = 0;
  uint64_t v15 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v16 = *(void *)(v12 + 8);
  while (1)
  {
    uint64_t v17 = *(int *)&buf[4 * v15];
    char v18 = v14;
    if (((v16 & v17) != 0) != ((*(void *)(v13 + 8) & v17) != 0)) {
      break;
    }
    char v14 = 1;
    uint64_t v15 = 1LL;
    if ((v18 & 1) != 0) {
      goto LABEL_39;
    }
  }

  if ((v16 & v17) == 0) {
    uint64_t v12 = v13;
  }
LABEL_39:
  unsigned int v30 = *(os_log_s **)v12;
  if (*(void *)v12 && os_log_type_enabled(*(os_log_t *)v12, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "SystemSettingsCommands_Aspen.cpp";
    __int16 v39 = 1024;
    *(_DWORD *)__int16 v40 = 40;
    _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Routing manager does not exist -- cannot execute command",  buf,  0x12u);
  }

void sub_1CD87C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v21 + 24LL))(v21);
  }
  sub_7058C(v20);
  _Unwind_Resume(a1);
}

void *sub_1CD964@<X0>(void *a1@<X8>)
{
  return sub_7D084(a1, "System audio effects settings update");
}

void sub_1CD97C(uint64_t a1@<X8>)
{
  *(void *)a1 = off_4709D0;
  *(void *)(a1 + 8) = 1LL;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  uint64_t v2 = sub_5954C();
  (*(void (**)(_BYTE *__return_ptr))(*(void *)v2 + 312LL))(v32);
  uint64_t v3 = *(void *)v32;
  if (*(void *)v32)
  {
    sub_6DD4();
    int v4 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
    sub_6DD4();
    if (((*(uint64_t (**)(uint64_t *))(qword_48F828 + 48))(&qword_48F828) & 1) == 0)
    {
      int v29 = (os_log_t *)sub_138E8(13);
      unsigned int v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        __int16 v36 = 1024;
        int v37 = 3925;
        _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to acquire routing mutex.",  buf,  0x12u);
      }

      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unable to acquire routing mutex.");
    }

    uint64_t v5 = sub_138E8(8);
    uint64_t v6 = sub_138E8(34);
    char v7 = 0;
    uint64_t v8 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v9 = *(void *)(v5 + 8);
    while (1)
    {
      uint64_t v10 = *(int *)&buf[4 * v8];
      char v11 = v7;
      if (((v9 & v10) != 0) != ((*(void *)(v6 + 8) & v10) != 0)) {
        break;
      }
      char v7 = 1;
      uint64_t v8 = 1LL;
      if ((v11 & 1) != 0) {
        goto LABEL_13;
      }
    }

    if ((v9 & v10) == 0) {
      uint64_t v5 = v6;
    }
LABEL_13:
    unint64_t v19 = *(os_log_s **)v5;
    if (v19 && os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      __int16 v36 = 1024;
      int v37 = 3927;
      _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_INFO,  "%25s:%-5d Hearing Aids Call Audio System Settings update.",  buf,  0x12u);
    }

    uint64_t v20 = sub_5954C();
    int v21 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 104LL))(v20);
    int v22 = *(_DWORD *)(v3 + 32);
    if (v22 > 1668313714)
    {
      if (v22 == 1668703084 || v22 == 1668576377) {
        goto LABEL_42;
      }
      unsigned __int16 v23 = 29299;
    }

    else
    {
      if (v22 == 1668301427 || v22 == 1668309362) {
        goto LABEL_24;
      }
      unsigned __int16 v23 = 29250;
    }

    if (v22 != (v23 | 0x63700000)) {
      goto LABEL_43;
    }
LABEL_24:
    int v24 = *(_DWORD *)(v3 + 36);
    if (v24 > 1919776354)
    {
      if (v24 > 1987081832)
      {
        if (v24 == 1987081839) {
          goto LABEL_42;
        }
        unsigned __int16 v27 = 30313;
      }

      else
      {
        if (v24 == 1919776355) {
          goto LABEL_42;
        }
        unsigned __int16 v27 = 26467;
      }

      int v25 = v27 | 0x76700000;
    }

    else
    {
      if (v24 <= 1768779618)
      {
        if (v24 != 1735222132)
        {
          int v25 = 1768057203;
          goto LABEL_41;
        }

void sub_1CDE10(_Unwind_Exception *a1)
{
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  }
  sub_7058C(v1);
  _Unwind_Resume(a1);
}

void *sub_1CDE8C@<X0>(void *a1@<X8>)
{
  return sub_7D084(a1, "Hearing Aids Call Audio system settings update");
}

void sub_1CDEA4(uint64_t a1@<X8>)
{
  *(void *)a1 = off_4709D0;
  *(void *)(a1 + 8) = 1LL;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  uint64_t v2 = sub_5954C();
  (*(void (**)(_BYTE *__return_ptr))(*(void *)v2 + 312LL))(v28);
  uint64_t v3 = *(void *)v28;
  if (*(void *)v28)
  {
    sub_6DD4();
    int v4 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
    sub_6DD4();
    if (((*(uint64_t (**)(uint64_t *))(qword_48F828 + 48))(&qword_48F828) & 1) == 0)
    {
      int v25 = (os_log_t *)sub_138E8(13);
      uint64_t v26 = *v25;
      if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        __int16 v32 = 1024;
        int v33 = 3944;
        _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to acquire routing mutex.",  buf,  0x12u);
      }

      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unable to acquire routing mutex.");
    }

    uint64_t v5 = sub_138E8(8);
    uint64_t v6 = sub_138E8(34);
    char v7 = 0;
    uint64_t v8 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v9 = *(void *)(v5 + 8);
    while (1)
    {
      uint64_t v10 = *(int *)&buf[4 * v8];
      char v11 = v7;
      if (((v9 & v10) != 0) != ((*(void *)(v6 + 8) & v10) != 0)) {
        break;
      }
      char v7 = 1;
      uint64_t v8 = 1LL;
      if ((v11 & 1) != 0) {
        goto LABEL_13;
      }
    }

    if ((v9 & v10) == 0) {
      uint64_t v5 = v6;
    }
LABEL_13:
    unint64_t v19 = *(os_log_s **)v5;
    if (v19 && os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      __int16 v32 = 1024;
      int v33 = 3946;
      _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_INFO,  "%25s:%-5d Hearing Aids Media Audio System Settings update.",  buf,  0x12u);
    }

    uint64_t v20 = sub_5954C();
    int v21 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 112LL))(v20);
    int v22 = *(_DWORD *)(v3 + 32);
    if (v22 == 1668505974 || v22 == 1668182896) {
      sub_133E30((uint64_t *)v3, v21);
    }
    sub_72210((uint64_t)v28, 1920099684LL);
    if (v4) {
      (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
    }
    sub_725DC(a1, (uint64_t)v28);
    *(void *)uint64_t v28 = off_4709D0;
    unsigned __int16 v23 = *(void **)&v30[2];
    if (*(void *)&v30[2])
    {
      sub_10AF78((uint64_t *)(*(void *)&v30[2] + 16LL));
      operator delete(v23);
    }
  }

  else
  {
    uint64_t v12 = sub_138E8(9);
    uint64_t v13 = sub_138E8(15);
    char v14 = 0;
    uint64_t v15 = 0LL;
    *(void *)uint64_t v28 = 0x100000002LL;
    uint64_t v16 = *(void *)(v12 + 8);
    while (1)
    {
      uint64_t v17 = *(int *)&v28[4 * v15];
      char v18 = v14;
      if (((v16 & v17) != 0) != ((*(void *)(v13 + 8) & v17) != 0)) {
        break;
      }
      char v14 = 1;
      uint64_t v15 = 1LL;
      if ((v18 & 1) != 0) {
        goto LABEL_25;
      }
    }

    if ((v16 & v17) == 0) {
      uint64_t v12 = v13;
    }
LABEL_25:
    int v24 = *(os_log_s **)v12;
    if (*(void *)v12 && os_log_type_enabled(*(os_log_t *)v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v28 = 136315394;
      *(void *)&v28[4] = "SystemSettingsCommands_Aspen.cpp";
      __int16 v29 = 1024;
      *(_DWORD *)unsigned int v30 = 76;
      _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Routing manager does not exist -- cannot execute command",  v28,  0x12u);
    }
  }

void sub_1CE24C(_Unwind_Exception *a1)
{
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  }
  sub_7058C(v1);
  _Unwind_Resume(a1);
}

void *sub_1CE2C8@<X0>(void *a1@<X8>)
{
  return sub_7D084(a1, "Hearing Aids Media Audio system settings update");
}

void sub_1CE2E0(uint64_t a1@<X8>)
{
  *(void *)a1 = off_4709D0;
  *(void *)(a1 + 8) = 1LL;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  uint64_t v2 = sub_5954C();
  (*(void (**)(_DWORD *__return_ptr))(*(void *)v2 + 312LL))(buf);
  uint64_t v3 = *(void *)buf;
  if (*(void *)buf)
  {
    sub_6DD4();
    int v4 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
    sub_6DD4();
    if (((*(uint64_t (**)(uint64_t *))(qword_48F828 + 48))(&qword_48F828) & 1) == 0)
    {
      uint64_t v26 = (os_log_t *)sub_138E8(13);
      unsigned __int16 v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "RoutingManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 3963;
        _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to acquire routing mutex.",  (uint8_t *)buf,  0x12u);
      }

      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unable to acquire routing mutex.");
    }

    uint64_t v5 = sub_138E8(8);
    uint64_t v6 = sub_138E8(34);
    char v7 = 0;
    uint64_t v8 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v9 = *(void *)(v5 + 8);
    while (1)
    {
      uint64_t v10 = (int)buf[v8];
      char v11 = v7;
      if (((v9 & v10) != 0) != ((*(void *)(v6 + 8) & v10) != 0)) {
        break;
      }
      char v7 = 1;
      uint64_t v8 = 1LL;
      if ((v11 & 1) != 0) {
        goto LABEL_13;
      }
    }

    if ((v9 & v10) == 0) {
      uint64_t v5 = v6;
    }
LABEL_13:
    unint64_t v19 = *(os_log_s **)v5;
    if (v19 && os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 3965;
      _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_INFO,  "%25s:%-5d Hearing Aids System Sounds System Settings update.",  (uint8_t *)buf,  0x12u);
    }

    memset(buf, 0, sizeof(buf));
    strcpy(v35, "cwdv");
    v35[8] = 0;
    int v36 = 3;
    v38[0] = 0LL;
    v38[1] = 0LL;
    int v37 = v38;
    int v39 = 44739242;
    CFTypeRef cf = 0LL;
    uint64_t v20 = operator new(4uLL);
    *uint64_t v20 = 1886152047;
    *(void *)AudioObjectPropertyAddress buf = v20;
    *(void *)&buf[2] = v20 + 1;
    *(void *)&uint8_t buf[4] = v20 + 1;
    int v39 = 44739232;
    uint64_t v21 = sub_546E0();
    v32[0] = &off_470B88;
    int v33 = v32;
    sub_FF3FC(v31, v21, (unsigned int **)buf, (uint64_t)v32);
    int v22 = v33;
    if (v33 == v32)
    {
      uint64_t v23 = 4LL;
      int v22 = v32;
    }

    else
    {
      if (!v33)
      {
LABEL_21:
        if (v31[2]) {
          sub_139BE4((uint64_t)v29, v3, 1919185776);
        }
        else {
          sub_72210((uint64_t)v29, 1920099684LL);
        }
        sub_85B80(v31);
        if (cf) {
          CFRelease(cf);
        }
        sub_32C8C(v38[0]);
        if (*(void *)buf)
        {
          *(void *)&buf[2] = *(void *)buf;
          operator delete(*(void **)buf);
        }

        if (v4) {
          (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
        }
        sub_725DC(a1, (uint64_t)v29);
        v29[0] = off_4709D0;
        int v24 = v30;
        if (v30)
        {
          sub_10AF78(v30 + 2);
          operator delete(v24);
        }

        return;
      }

      uint64_t v23 = 5LL;
    }

    (*(void (**)(void))(*v22 + 8 * v23))();
    goto LABEL_21;
  }

  uint64_t v12 = sub_138E8(9);
  uint64_t v13 = sub_138E8(15);
  char v14 = 0;
  uint64_t v15 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v16 = *(void *)(v12 + 8);
  while (1)
  {
    uint64_t v17 = (int)buf[v15];
    char v18 = v14;
    if (((v16 & v17) != 0) != ((*(void *)(v13 + 8) & v17) != 0)) {
      break;
    }
    char v14 = 1;
    uint64_t v15 = 1LL;
    if ((v18 & 1) != 0) {
      goto LABEL_34;
    }
  }

  if ((v16 & v17) == 0) {
    uint64_t v12 = v13;
  }
LABEL_34:
  int v25 = *(os_log_s **)v12;
  if (*(void *)v12 && os_log_type_enabled(*(os_log_t *)v12, OS_LOG_TYPE_ERROR))
  {
    buf[0] = 136315394;
    *(void *)&buf[1] = "SystemSettingsCommands_Aspen.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 94;
    _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Routing manager does not exist -- cannot execute command",  (uint8_t *)buf,  0x12u);
  }

void sub_1CE764( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21)
{
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v22 + 24LL))(v22);
  }
  sub_7058C(v21);
  _Unwind_Resume(a1);
}

void *sub_1CE834@<X0>(void *a1@<X8>)
{
  return sub_7D084(a1, "Hearing Aids System Sounds system settings update");
}

void sub_1CE84C(uint64_t a1@<X8>)
{
  *(void *)a1 = off_4709D0;
  *(void *)(a1 + 8) = 1LL;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  uint64_t v2 = sub_5954C();
  (*(void (**)(_BYTE *__return_ptr))(*(void *)v2 + 312LL))(v25);
  uint64_t v3 = *(void *)v25;
  if (*(void *)v25)
  {
    sub_6DD4();
    int v4 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
    sub_6DD4();
    if (((*(uint64_t (**)(uint64_t *))(qword_48F828 + 48))(&qword_48F828) & 1) == 0)
    {
      uint64_t v22 = (os_log_t *)sub_138E8(13);
      int v23 = *v22;
      if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        __int16 v29 = 1024;
        int v30 = 3734;
        _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to acquire routing mutex.",  buf,  0x12u);
      }

      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unable to acquire routing mutex.");
    }

    uint64_t v5 = sub_138E8(8);
    uint64_t v6 = sub_138E8(34);
    char v7 = 0;
    uint64_t v8 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v9 = *(void *)(v5 + 8);
    while (1)
    {
      uint64_t v10 = *(int *)&buf[4 * v8];
      char v11 = v7;
      if (((v9 & v10) != 0) != ((*(void *)(v6 + 8) & v10) != 0)) {
        break;
      }
      char v7 = 1;
      uint64_t v8 = 1LL;
      if ((v11 & 1) != 0) {
        goto LABEL_13;
      }
    }

    if ((v9 & v10) == 0) {
      uint64_t v5 = v6;
    }
LABEL_13:
    unint64_t v19 = *(os_log_s **)v5;
    if (v19 && os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      __int16 v29 = 1024;
      int v30 = 3736;
      _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Bluetooth required a route configuration change.",  buf,  0x12u);
    }

    sub_139BE4((uint64_t)v25, v3, 1651799408);
    if (v4) {
      (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
    }
    sub_725DC(a1, (uint64_t)v25);
    *(void *)int v25 = off_4709D0;
    uint64_t v20 = *(void **)&v27[2];
    if (*(void *)&v27[2])
    {
      sub_10AF78((uint64_t *)(*(void *)&v27[2] + 16LL));
      operator delete(v20);
    }
  }

  else
  {
    uint64_t v12 = sub_138E8(9);
    uint64_t v13 = sub_138E8(15);
    char v14 = 0;
    uint64_t v15 = 0LL;
    *(void *)int v25 = 0x100000002LL;
    uint64_t v16 = *(void *)(v12 + 8);
    while (1)
    {
      uint64_t v17 = *(int *)&v25[4 * v15];
      char v18 = v14;
      if (((v16 & v17) != 0) != ((*(void *)(v13 + 8) & v17) != 0)) {
        break;
      }
      char v14 = 1;
      uint64_t v15 = 1LL;
      if ((v18 & 1) != 0) {
        goto LABEL_22;
      }
    }

    if ((v16 & v17) == 0) {
      uint64_t v12 = v13;
    }
LABEL_22:
    uint64_t v21 = *(os_log_s **)v12;
    if (*(void *)v12 && os_log_type_enabled(*(os_log_t *)v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int v25 = 136315394;
      *(void *)&v25[4] = "SystemSettingsCommands_Aspen.cpp";
      __int16 v26 = 1024;
      *(_DWORD *)unsigned __int16 v27 = 133;
      _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Routing manager does not exist -- cannot execute command",  v25,  0x12u);
    }
  }

void sub_1CEBB8(_Unwind_Exception *a1)
{
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  }
  sub_7058C(v1);
  _Unwind_Resume(a1);
}

void *sub_1CEC2C@<X0>(void *a1@<X8>)
{
  return sub_7D084(a1, "Bluetooth requires a route configuration change");
}

void sub_1CEC3C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_4823F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1CEC4C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_4823F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1CEC6C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1CEC84(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = *(void *)(a1 + 192);
  if (!v8) {
    goto LABEL_34;
  }
  uint64_t v9 = a1 + 192;
  do
  {
    unsigned int v10 = *(unsigned __int8 *)(v8 + 32);
    BOOL v11 = v10 == a2;
    if (v10 >= a2) {
      char v12 = 1;
    }
    else {
      char v12 = -1;
    }
    if (v11)
    {
      unsigned int v13 = *(_DWORD *)(v8 + 36);
      BOOL v14 = v13 == (_DWORD)a3;
      char v12 = v13 >= a3 ? 1 : -1;
      if (v14) {
        char v12 = 0;
      }
    }

    BOOL v15 = (v12 & 0x80) == 0LL;
    if (v12 < 0) {
      uint64_t v16 = (uint64_t *)(v8 + 8);
    }
    else {
      uint64_t v16 = (uint64_t *)v8;
    }
    if (v15) {
      uint64_t v9 = v8;
    }
    uint64_t v8 = *v16;
  }

  while (*v16);
  if (a1 + 192 == v9) {
    goto LABEL_34;
  }
  unsigned int v17 = *(unsigned __int8 *)(v9 + 32);
  BOOL v18 = v17 == a2;
  if (v17 <= a2) {
    char v19 = 1;
  }
  else {
    char v19 = -1;
  }
  if (v18)
  {
    unsigned int v20 = *(_DWORD *)(v9 + 36);
    BOOL v21 = v20 == (_DWORD)a3;
    BOOL v22 = v20 > a3;
    char v19 = -1;
    if (!v22) {
      char v19 = 1;
    }
    if (v21) {
      char v19 = 0;
    }
  }

  if (v19 < 0)
  {
LABEL_34:
    *a4 = 0LL;
    a4[1] = 0LL;
  }

  else
  {
    uint64_t v23 = *(void *)(v9 + 48);
    *a4 = *(void *)(v9 + 40);
    a4[1] = v23;
    if (v23)
    {
      int v24 = (unint64_t *)(v23 + 16);
      do
        unint64_t v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
  }

  uint64_t v26 = sub_138E8(17);
  uint64_t v27 = sub_138E8(38);
  char v28 = 0;
  uint64_t v29 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v30 = *(void *)(v26 + 8);
  while (1)
  {
    uint64_t v31 = *(int *)&buf[4 * v29];
    char v32 = v28;
    if (((v30 & v31) != 0) != ((*(void *)(v27 + 8) & v31) != 0)) {
      break;
    }
    char v28 = 1;
    uint64_t v29 = 1LL;
    if ((v32 & 1) != 0)
    {
      if ((v30 & 1) == 0) {
        return;
      }
      goto LABEL_43;
    }
  }

  if ((v30 & v31) == 0) {
    uint64_t v26 = v27;
  }
  if ((*(void *)(v26 + 8) & 1) != 0)
  {
LABEL_43:
    int v33 = *(os_log_s **)v26;
    if (v33 && os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      sub_1512BC(&v50, a4, "", 330);
      uint64_t v34 = v50;
      if (a2) {
        BOOL v35 = "output";
      }
      else {
        BOOL v35 = "input";
      }
      int v36 = v48;
      sub_7D084(v48, v35);
      if (v49 < 0) {
        int v36 = (void **)v48[0];
      }
      sub_2CA1C(v46, a3);
      int v37 = v47;
      __int128 v38 = (void **)v46[0];
      sub_23FE8((uint64_t)__p, (os_unfair_lock_t)(a1 + 8));
      int v39 = v46;
      if (v37 < 0) {
        int v39 = v38;
      }
      if (v45 >= 0) {
        __int16 v40 = __p;
      }
      else {
        __int16 v40 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
      *(void *)&uint8_t buf[4] = "PhysicalDevice.cpp";
      __int16 v53 = 1024;
      int v54 = 330;
      __int16 v55 = 2048;
      uint64_t v56 = v34;
      __int16 v57 = 2080;
      uint64_t v58 = v36;
      __int16 v59 = 2080;
      uint64_t v60 = v39;
      __int16 v61 = 2080;
      uint64_t v62 = v40;
      _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Returning control %p for %s VirtualAudioPortType '%s' on VAD: '%s'.",  buf,  0x3Au);
      if (v45 < 0) {
        operator delete(__p[0]);
      }
      if (v47 < 0) {
        operator delete(v46[0]);
      }
      if (v49 < 0) {
        operator delete(v48[0]);
      }
      int v41 = v51;
      if (v51)
      {
        p_unsigned int shared_owners = (unint64_t *)&v51->__shared_owners_;
        do
          unint64_t v43 = __ldaxr(p_shared_owners);
        while (__stlxr(v43 - 1, p_shared_owners));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
    }
  }

void sub_1CEFA0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, char a22)
{
  if (v24 < 0) {
    operator delete(v23);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_7A768((uint64_t)&a22);
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  _Unwind_Resume(a1);
}

void sub_1CEFF8(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = *(void *)(a1 + 216);
  if (!v8) {
    goto LABEL_39;
  }
  uint64_t v9 = a1 + 216;
  do
  {
    unsigned int v10 = *(unsigned __int8 *)(v8 + 32);
    BOOL v11 = v10 == a2;
    if (v10 >= a2) {
      char v12 = 1;
    }
    else {
      char v12 = -1;
    }
    if (v11)
    {
      unsigned int v13 = *(_DWORD *)(v8 + 36);
      BOOL v14 = v13 == (_DWORD)a3;
      char v12 = v13 >= a3 ? 1 : -1;
      if (v14) {
        char v12 = 0;
      }
    }

    BOOL v15 = (v12 & 0x80) == 0LL;
    if (v12 < 0) {
      uint64_t v16 = (uint64_t *)(v8 + 8);
    }
    else {
      uint64_t v16 = (uint64_t *)v8;
    }
    if (v15) {
      uint64_t v9 = v8;
    }
    uint64_t v8 = *v16;
  }

  while (*v16);
  if (a1 + 216 == v9) {
    goto LABEL_39;
  }
  unsigned int v17 = *(unsigned __int8 *)(v9 + 32);
  BOOL v18 = v17 == a2;
  if (v17 <= a2) {
    char v19 = 1;
  }
  else {
    char v19 = -1;
  }
  if (v18)
  {
    unsigned int v20 = *(_DWORD *)(v9 + 36);
    BOOL v21 = v20 == (_DWORD)a3;
    BOOL v22 = v20 > a3;
    char v19 = -1;
    if (!v22) {
      char v19 = 1;
    }
    if (v21) {
      char v19 = 0;
    }
  }

  if (v19 < 0)
  {
LABEL_39:
    uint64_t v70 = 0LL;
    uint64_t v71 = 0LL;
    if ((a2 & 1) == 0)
    {
      uint64_t v34 = (os_log_t *)sub_138E8(17);
      BOOL v35 = *v34;
      if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_DEFAULT))
      {
        (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)a1 + 128LL))(theString, a1);
        sub_48E98(v68, theString[0]);
        int v36 = v69;
        int v37 = (void **)v68[0];
        sub_2CA1C(__p, a3);
        __int128 v38 = v68;
        if (v36 < 0) {
          __int128 v38 = v37;
        }
        if (v67 >= 0) {
          int v39 = __p;
        }
        else {
          int v39 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "PhysicalDevice.cpp";
        __int16 v73 = 1024;
        int v74 = 342;
        __int16 v75 = 2080;
        uint64_t v76 = (uint64_t)v38;
        __int16 v77 = 2080;
        uint64_t v78 = v39;
        _os_log_impl( &dword_0,  v35,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d No control present for (%s %s). returning null volumecontrol",  buf,  0x26u);
        if (v67 < 0) {
          operator delete(__p[0]);
        }
        if (v69 < 0) {
          operator delete(v68[0]);
        }
        sub_19DFC((uint64_t)theString);
      }

      unsigned __int8 v40 = atomic_load((unsigned __int8 *)&qword_490990);
      if ((v40 & 1) == 0 && __cxa_guard_acquire(&qword_490990))
      {
        sub_CAEBC(&qword_490980);
        __cxa_guard_release(&qword_490990);
      }

      uint64_t v41 = qword_490980;
      int v42 = *(std::__shared_weak_count **)algn_490988;
      if (*(void *)algn_490988)
      {
        unint64_t v43 = (unint64_t *)(*(void *)algn_490988 + 8LL);
        do
          unint64_t v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
        *a4 = v41;
        a4[1] = (uint64_t)v42;
        p_shared_weak_owners = (unint64_t *)&v42->__shared_weak_owners_;
        do
          unint64_t v46 = __ldxr(p_shared_weak_owners);
        while (__stxr(v46 + 1, p_shared_weak_owners));
        do
          unint64_t v47 = __ldaxr(v43);
        while (__stlxr(v47 - 1, v43));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }

      else
      {
        *a4 = qword_490980;
        a4[1] = 0LL;
      }

      if (v71) {
        std::__shared_weak_count::__release_weak(v71);
      }
      return;
    }

void sub_1CF58C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
}

void sub_1CF648(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
}

void sub_1CF654(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
}

double sub_1CF660(uint64_t a1, double a2)
{
  uint64_t v71 = 0LL;
  uint64_t v72 = 0LL;
  uint64_t v70 = &v71;
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 88LL))(a1, 1LL);
  if (v3)
  {
    char v4 = 0;
    char v5 = 0;
    uint64_t v6 = 0LL;
    while (1)
    {
      uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96LL))(a1, 1LL, v6);
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v7 + 112LL))(v7, buf);
      if (*(int *)&buf[8] <= 1667509042)
      {
        BOOL v8 = *(_DWORD *)&buf[8] == 1633889587 || *(_DWORD *)&buf[8] == 1667326771;
        if (v8)
        {
          char v5 = 1;
          goto LABEL_19;
        }

        int v9 = 1667443507;
      }

      else
      {
        if (*(int *)&buf[8] <= 1836343850)
        {
          if (*(_DWORD *)&buf[8] != 1667509043)
          {
            if (*(_DWORD *)&buf[8] == 1667588915) {
              char v5 = 1;
            }
            goto LABEL_19;
          }

void sub_1CFDC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
}

uint64_t sub_1CFE2C(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 88LL))(a1, 0LL);
  if (v2
    && (uint64_t v3 = (v2 - 1),
        (uint64_t v4 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 96LL))(a1, 0LL, v3)) != 0)
    && ((unint64_t v5 = sub_5C2F8(v4), *((void *)&v7 + 1) = v6, *(void *)&v7 = v5, ((v7 >> 32) & 0xFF00000000LL) != 0)
      ? (BOOL v8 = HIDWORD(v5) == 0LL)
      : (BOOL v8 = 1),
        !v8))
  {
    int v9 = v3 & 0xFFFFFF00;
    unsigned int v10 = v3;
    uint64_t v11 = 0x100000000LL;
  }

  else
  {
    unsigned int v10 = 0;
    uint64_t v11 = 0LL;
    int v9 = 0;
  }

  return v11 | v9 | v10;
}

uint64_t sub_1CFEE0(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 88LL))(a1, 1LL);
  if (!v2)
  {
LABEL_17:
    uint64_t v13 = 0LL;
    LODWORD(v4) = 0;
    return v13 | v4;
  }

  int v3 = v2;
  uint64_t v4 = 0LL;
  while (1)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 264LL))( &v17,  a1,  1LL,  v4);
    if (v18) {
      break;
    }
LABEL_16:
    uint64_t v4 = (v4 + 1);
    if ((_DWORD)v4 == v3) {
      goto LABEL_17;
    }
  }

  unint64_t v5 = std::__shared_weak_count::lock(v18);
  if (!v5)
  {
LABEL_14:
    if (v18) {
      std::__shared_weak_count::__release_weak(v18);
    }
    goto LABEL_16;
  }

  uint64_t v6 = v5;
  if (!v17
    || ((uint64_t v19 = 0x676C6F627465726DLL,
         int v20 = 0,
         unint64_t v7 = sub_5C2F8(v17),
         *((void *)&v9 + 1) = v8,
         *(void *)&__int128 v9 = v7,
         ((v9 >> 32) & 0xFF00000000LL) != 0)
      ? (BOOL v10 = HIDWORD(v7) == 1768843885LL)
      : (BOOL v10 = 0),
        !v10))
  {
    p_unsigned int shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }

    goto LABEL_14;
  }

  uint64_t v15 = (unint64_t *)&v6->__shared_owners_;
  do
    unint64_t v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }

  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v13 = 0x100000000LL;
  return v13 | v4;
}

uint64_t sub_1D004C(uint64_t a1, unsigned int *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8 = (std::mutex *)(a1 + 96);
  std::mutex::lock((std::mutex *)(a1 + 96));
  uint64_t v9 = *(void *)(a1 + 168);
  if (v9)
  {
    unsigned int v10 = *a2;
    uint64_t v11 = a1 + 168;
    do
    {
      unsigned int v12 = *(_DWORD *)(v9 + 32);
      BOOL v13 = v12 >= v10;
      if (v12 >= v10) {
        uint64_t v14 = (uint64_t *)v9;
      }
      else {
        uint64_t v14 = (uint64_t *)(v9 + 8);
      }
      if (v13) {
        uint64_t v11 = v9;
      }
      uint64_t v9 = *v14;
    }

    while (*v14);
    if (v11 != a1 + 168 && v10 >= *(_DWORD *)(v11 + 32))
    {
      double v24 = sub_1D2114((uint64_t **)(a1 + 160), v10, a2) + 5;
      unint64_t v25 = (uint64_t **)sub_1D21EC((uint64_t)v24, buf, a3, a4);
      if (!*v25)
      {
        unint64_t v26 = v25;
        uint64_t v27 = (uint64_t *)operator new(0x30uLL);
        v27[4] = a3;
        v27[5] = a4;
        sub_32C38(v24, *(uint64_t *)buf, v26, v27);
      }

      uint64_t v28 = (os_log_t *)sub_138E8(17);
      char v29 = *v28;
      if (*v28)
      {
        uint64_t v17 = 1LL;
        if (!os_log_type_enabled(*v28, OS_LOG_TYPE_INFO)) {
          goto LABEL_24;
        }
        int v30 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
        sub_2CA1C(v37, *a2);
        int v31 = v38;
        char v32 = (void **)v37[0];
        sub_2CA1C(__p, a2[1]);
        double v33 = v37;
        if (v31 < 0) {
          double v33 = v32;
        }
        if (v36 >= 0) {
          char v34 = __p;
        }
        else {
          char v34 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
        *(void *)&uint8_t buf[4] = "PhysicalDevice.cpp";
        __int16 v40 = 1024;
        int v41 = 516;
        __int16 v42 = 1024;
        int v43 = v30;
        __int16 v44 = 2048;
        unint64_t v45 = a4;
        __int16 v46 = 2080;
        unint64_t v47 = v33;
        __int16 v48 = 2080;
        uint64_t v49 = v34;
        _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_INFO,  "%25s:%-5d PlaybackDosimetry: Device %d registered listener for client: '%p' '%s' '%s'",  buf,  0x36u);
        if (v36 < 0) {
          operator delete(__p[0]);
        }
        if (v38 < 0) {
          operator delete(v37[0]);
        }
      }

      uint64_t v17 = 1LL;
      goto LABEL_24;
    }
  }

  uint64_t v15 = (os_log_t *)sub_138E8(17);
  unint64_t v16 = *v15;
  if (!*v15) {
    goto LABEL_23;
  }
  uint64_t v17 = 0LL;
  if (os_log_type_enabled(*v15, OS_LOG_TYPE_DEFAULT))
  {
    int v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
    sub_2CA1C(v37, *a2);
    int v19 = v38;
    int v20 = (void **)v37[0];
    sub_2CA1C(__p, a2[1]);
    BOOL v21 = v37;
    if (v19 < 0) {
      BOOL v21 = v20;
    }
    if (v36 >= 0) {
      BOOL v22 = __p;
    }
    else {
      BOOL v22 = (void **)__p[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
    *(void *)&uint8_t buf[4] = "PhysicalDevice.cpp";
    __int16 v40 = 1024;
    int v41 = 522;
    __int16 v42 = 1024;
    int v43 = v18;
    __int16 v44 = 2048;
    unint64_t v45 = a4;
    __int16 v46 = 2080;
    unint64_t v47 = v21;
    __int16 v48 = 2080;
    uint64_t v49 = v22;
    _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Device %d has NOT added listener for client: '%p' '%s' '%s'",  buf,  0x36u);
    if (v36 < 0) {
      operator delete(__p[0]);
    }
    if (v38 < 0) {
      operator delete(v37[0]);
    }
LABEL_23:
    uint64_t v17 = 0LL;
  }

void sub_1D0390(_Unwind_Exception *a1)
{
  if (v3 < 0) {
    operator delete(v2);
  }
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1D03D8(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = (std::mutex *)(a1 + 96);
  std::mutex::lock((std::mutex *)(a1 + 96));
  uint64_t v7 = *(void *)(a1 + 168);
  if (!v7) {
    goto LABEL_12;
  }
  unsigned int v8 = *a2;
  uint64_t v9 = a1 + 168;
  do
  {
    unsigned int v10 = *(_DWORD *)(v7 + 32);
    BOOL v11 = v10 >= v8;
    if (v10 >= v8) {
      unsigned int v12 = (uint64_t *)v7;
    }
    else {
      unsigned int v12 = (uint64_t *)(v7 + 8);
    }
    if (v11) {
      uint64_t v9 = v7;
    }
    uint64_t v7 = *v12;
  }

  while (*v12);
  if (v9 == a1 + 168 || v8 < *(_DWORD *)(v9 + 32))
  {
LABEL_12:
    BOOL v13 = (os_log_t *)sub_138E8(17);
    os_log_t v14 = *v13;
    if (!*v13 || !os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_41;
    }
    int v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
    sub_2CA1C(v38, *a2);
    int v16 = v39;
    uint64_t v17 = (void **)v38[0];
    sub_2CA1C(__p, a2[1]);
    int v18 = v38;
    if (v16 < 0) {
      int v18 = v17;
    }
    if (v37 >= 0) {
      int v19 = __p;
    }
    else {
      int v19 = (void **)__p[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
    int v41 = "PhysicalDevice.cpp";
    __int16 v42 = 1024;
    int v43 = 555;
    __int16 v44 = 1024;
    int v45 = v15;
    __int16 v46 = 2048;
    uint64_t v47 = a3;
    __int16 v48 = 2080;
    uint64_t v49 = v18;
    __int16 v50 = 2080;
    unsigned int v51 = v19;
    int v20 = "%25s:%-5d Device %d has NOT added listener for client: '%p' '%s' '%s'";
    BOOL v21 = v14;
    os_log_type_t v22 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_20;
  }

  unint64_t v25 = *(uint64_t **)(v9 + 40);
  uint64_t v23 = (uint64_t **)(v9 + 40);
  double v24 = v25;
  if (v25 != (uint64_t *)(v23 + 1))
  {
    while (v24[5] != a3)
    {
      unint64_t v26 = (uint64_t *)v24[1];
      if (v26)
      {
        do
        {
          uint64_t v27 = (uint64_t **)v26;
          unint64_t v26 = (uint64_t *)*v26;
        }

        while (v26);
      }

      else
      {
        do
        {
          uint64_t v27 = (uint64_t **)v24[2];
          BOOL v28 = *v27 == v24;
          double v24 = (uint64_t *)v27;
        }

        while (!v28);
      }

      double v24 = (uint64_t *)v27;
      if (v27 == v23 + 1) {
        goto LABEL_41;
      }
    }

    sub_1D20A4(v23, v24);
    operator delete(v24);
    char v29 = (os_log_t *)sub_138E8(17);
    os_log_t v30 = *v29;
    if (*v29)
    {
      if (os_log_type_enabled(*v29, OS_LOG_TYPE_INFO))
      {
        int v31 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
        sub_2CA1C(v38, *a2);
        int v32 = v39;
        double v33 = (void **)v38[0];
        sub_2CA1C(__p, a2[1]);
        char v34 = v38;
        if (v32 < 0) {
          char v34 = v33;
        }
        if (v37 >= 0) {
          BOOL v35 = __p;
        }
        else {
          BOOL v35 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
        int v41 = "PhysicalDevice.cpp";
        __int16 v42 = 1024;
        int v43 = 543;
        __int16 v44 = 1024;
        int v45 = v31;
        __int16 v46 = 2048;
        uint64_t v47 = a3;
        __int16 v48 = 2080;
        uint64_t v49 = v34;
        __int16 v50 = 2080;
        unsigned int v51 = v35;
        int v20 = "%25s:%-5d Device %d removed listener for client: '%p' '%s' '%s'";
        BOOL v21 = v30;
        os_log_type_t v22 = OS_LOG_TYPE_INFO;
LABEL_20:
        _os_log_impl(&dword_0, v21, v22, v20, buf, 0x36u);
        if (v37 < 0) {
          operator delete(__p[0]);
        }
        if (v39 < 0) {
          operator delete(v38[0]);
        }
      }
    }
  }

void sub_1D06F8(_Unwind_Exception *a1)
{
  if (v3 < 0) {
    operator delete(v2);
  }
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D0738(uint64_t a1)
{
  unint64_t v1 = sub_5C2F8(a1);
  *((void *)&v4 + 1) = v2;
  *(void *)&__int128 v4 = v1;
  return v4 >> 32;
}

void sub_1D0774(uint64_t a1, void *a2)
{
  if (*a2 != a2[1])
  {
    uint64_t v2 = (os_log_t *)sub_138E8(13);
    int v3 = *v2;
    if (*v2)
    {
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
      {
        int v5 = 136315394;
        uint64_t v6 = "PhysicalDevice.cpp";
        __int16 v7 = 1024;
        int v8 = 470;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v5,  0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

void sub_1D086C(_Unwind_Exception *exception_object)
{
}

void sub_1D0888(char *a1, unsigned int **a2)
{
  uint64_t v2 = *a2;
  int v3 = a2[1];
  if (*a2 != v3)
  {
    unint64_t v58 = (uint64_t **)(a1 + 160);
    int v5 = a1 + 168;
    while ((*(unsigned int (**)(char *, unsigned int *))(*(void *)a1 + 16LL))(a1, v2))
    {
      uint64_t v6 = *(void *)v2;
      inAddress.mElement = v2[2];
      *(void *)&inAddress.AudioObjectPropertySelector mSelector = v6;
      uint64_t v7 = *v5;
      if (*v5)
      {
        int v8 = v5;
        do
        {
          AudioObjectPropertySelector v9 = *(_DWORD *)(v7 + 32);
          BOOL v10 = v9 >= inAddress.mSelector;
          if (v9 >= inAddress.mSelector) {
            BOOL v11 = (uint64_t *)v7;
          }
          else {
            BOOL v11 = (uint64_t *)(v7 + 8);
          }
          if (v10) {
            int v8 = (void *)v7;
          }
          uint64_t v7 = *v11;
        }

        while (*v11);
        if (v8 != v5 && inAddress.mSelector >= *((_DWORD *)v8 + 8))
        {
          __int16 v50 = (os_log_t *)sub_138E8(17);
          os_log_t v51 = *v50;
          if (!*v50 || !os_log_type_enabled(*v50, OS_LOG_TYPE_INFO)) {
            goto LABEL_66;
          }
          int v52 = (*(uint64_t (**)(char *))(*(void *)a1 + 120LL))(a1);
          sub_2CA1C(v62, inAddress.mSelector);
          int v53 = v63;
          int v54 = (void **)v62[0];
          sub_2CA1C(__p, inAddress.mScope);
          __int16 v55 = v62;
          if (v53 < 0) {
            __int16 v55 = v54;
          }
          uint64_t v56 = __p;
          if (v61 < 0) {
            uint64_t v56 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          char v65 = "PhysicalDevice.cpp";
          __int16 v66 = 1024;
          int v67 = 579;
          __int16 v68 = 1024;
          int v69 = v52;
          __int16 v70 = 2080;
          uint64_t v71 = v55;
          __int16 v72 = 2080;
          __int16 v73 = v56;
          int v32 = v51;
          os_log_type_t v33 = OS_LOG_TYPE_INFO;
          char v34 = "%25s:%-5d Device %d already added listener for property '%s' '%s'";
          goto LABEL_30;
        }
      }

      AudioObjectID v12 = (*(uint64_t (**)(char *))(*(void *)a1 + 120LL))(a1);
      OSStatus v13 = AudioObjectAddPropertyListener(v12, &inAddress, (AudioObjectPropertyListenerProc)sub_1D168C, a1);
      if (v13)
      {
        os_log_t v14 = (os_log_t *)sub_138E8(17);
        os_log_t v15 = *v14;
        if (!*v14 || !os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR)) {
          goto LABEL_66;
        }
        int v16 = (*(uint64_t (**)(char *))(*(void *)a1 + 120LL))(a1);
        sub_2CA1C(v62, *v2);
        int v17 = v63;
        int v18 = (void **)v62[0];
        sub_2CA1C(__p, v2[1]);
        int v19 = v62;
        if (v17 < 0) {
          int v19 = v18;
        }
        int v20 = __p;
        if (v61 < 0) {
          int v20 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
        char v65 = "PhysicalDevice.cpp";
        __int16 v66 = 1024;
        int v67 = 595;
        __int16 v68 = 1024;
        int v69 = v16;
        __int16 v70 = 2080;
        uint64_t v71 = v19;
        __int16 v72 = 2080;
        __int16 v73 = v20;
        __int16 v74 = 1024;
        OSStatus v75 = v13;
        BOOL v21 = v15;
        os_log_type_t v22 = OS_LOG_TYPE_ERROR;
        uint64_t v23 = "%25s:%-5d Device %d failed to add property '%s' '%s', reason: %u";
        uint32_t v24 = 50;
      }

      else
      {
        BOOL v35 = sub_1D2114(v58, inAddress.mSelector, &inAddress);
        if (v35[7])
        {
          char v37 = v35[6];
          char v36 = v35 + 6;
          char v38 = (void *)*(v36 - 1);
          *(v36 - 1) = v36;
          v37[2] = 0LL;
          void *v36 = 0LL;
          v36[1] = 0LL;
          if (v38[1]) {
            char v39 = (void *)v38[1];
          }
          else {
            char v39 = v38;
          }
          if (v39)
          {
            __int16 v40 = (void *)v39[2];
            if (v40)
            {
              int v41 = (void *)*v40;
              if ((void *)*v40 == v39)
              {
                *__int16 v40 = 0LL;
                while (1)
                {
                  __int16 v57 = (void *)v40[1];
                  if (!v57) {
                    break;
                  }
                  do
                  {
                    __int16 v40 = v57;
                    __int16 v57 = (void *)*v57;
                  }

                  while (v57);
                }
              }

              else
              {
                for (v40[1] = 0LL; v41; int v41 = (void *)v40[1])
                {
                  do
                  {
                    __int16 v40 = v41;
                    int v41 = (void *)*v41;
                  }

                  while (v41);
                }
              }

              sub_32C8C(v39);
              for (uint64_t i = (void *)v40[2]; i; uint64_t i = (void *)i[2])
                __int16 v40 = i;
              char v39 = v40;
            }
          }

          sub_32C8C(v39);
        }

        int v43 = (os_log_t *)sub_138E8(17);
        os_log_t v44 = *v43;
        if (!*v43 || !os_log_type_enabled(*v43, OS_LOG_TYPE_INFO)) {
          goto LABEL_66;
        }
        int v45 = (*(uint64_t (**)(char *))(*(void *)a1 + 120LL))(a1);
        sub_2CA1C(v62, inAddress.mSelector);
        int v46 = v63;
        uint64_t v47 = (void **)v62[0];
        sub_2CA1C(__p, inAddress.mScope);
        __int16 v48 = v62;
        if (v46 < 0) {
          __int16 v48 = v47;
        }
        uint64_t v49 = __p;
        if (v61 < 0) {
          uint64_t v49 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        char v65 = "PhysicalDevice.cpp";
        __int16 v66 = 1024;
        int v67 = 573;
        __int16 v68 = 1024;
        int v69 = v45;
        __int16 v70 = 2080;
        uint64_t v71 = v48;
        __int16 v72 = 2080;
        __int16 v73 = v49;
        BOOL v21 = v44;
        os_log_type_t v22 = OS_LOG_TYPE_INFO;
        uint64_t v23 = "%25s:%-5d Device %d added property listener for '%s' '%s'";
        uint32_t v24 = 44;
      }

      _os_log_impl(&dword_0, v21, v22, v23, buf, v24);
      if (v61 < 0) {
        operator delete(__p[0]);
      }
      if ((v63 & 0x80000000) == 0) {
        goto LABEL_66;
      }
LABEL_58:
      operator delete(v62[0]);
LABEL_66:
      v2 += 3;
      if (v2 == v3) {
        return;
      }
    }

    unint64_t v25 = (os_log_t *)sub_138E8(17);
    os_log_t v26 = *v25;
    if (!*v25 || !os_log_type_enabled(*v25, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_66;
    }
    int v27 = (*(uint64_t (**)(char *))(*(void *)a1 + 120LL))(a1);
    sub_2CA1C(v62, *v2);
    int v28 = v63;
    char v29 = (void **)v62[0];
    sub_2CA1C(__p, v2[1]);
    os_log_t v30 = v62;
    if (v28 < 0) {
      os_log_t v30 = v29;
    }
    int v31 = __p;
    if (v61 < 0) {
      int v31 = (void **)__p[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
    char v65 = "PhysicalDevice.cpp";
    __int16 v66 = 1024;
    int v67 = 601;
    __int16 v68 = 1024;
    int v69 = v27;
    __int16 v70 = 2080;
    uint64_t v71 = v30;
    __int16 v72 = 2080;
    __int16 v73 = v31;
    int v32 = v26;
    os_log_type_t v33 = OS_LOG_TYPE_DEFAULT;
    char v34 = "%25s:%-5d Device %d does not have property '%s' '%s', cannot register listener";
LABEL_30:
    _os_log_impl(&dword_0, v32, v33, v34, buf, 0x2Cu);
    if (v61 < 0) {
      operator delete(__p[0]);
    }
    if ((v63 & 0x80000000) == 0) {
      goto LABEL_66;
    }
    goto LABEL_58;
  }

void sub_1D0E18( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D0E48(uint64_t a1)
{
  AudioObjectID v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
  std::mutex::lock((std::mutex *)(a1 + 96));
  int v3 = *(void **)(a1 + 160);
  __int128 v4 = (void *)(a1 + 168);
  if (v3 != (void *)(a1 + 168))
  {
    do
    {
      inAddress.AudioObjectPropertySelector mSelector = *((_DWORD *)v3 + 8);
      *(void *)&inAddress.mScope = 1735159650LL;
      if (v3[7])
      {
        sub_93D94((uint64_t)v45);
        uint64_t v6 = (void *)v3[5];
        if (v6 != v3 + 6)
        {
          do
          {
            uint64_t v7 = (void *)std::ostream::operator<<(&v47[2], v6[5]);
            sub_826EC(v7, (uint64_t)" ", 1LL);
            int v8 = (void *)v6[1];
            if (v8)
            {
              do
              {
                AudioObjectPropertySelector v9 = v8;
                int v8 = (void *)*v8;
              }

              while (v8);
            }

            else
            {
              do
              {
                AudioObjectPropertySelector v9 = (void *)v6[2];
                BOOL v10 = *v9 == (void)v6;
                uint64_t v6 = v9;
              }

              while (!v10);
            }

            uint64_t v6 = v9;
          }

          while (v9 != v3 + 6);
        }

        BOOL v11 = (os_log_t *)sub_138E8(17);
        AudioObjectID v12 = *v11;
        if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_INFO))
        {
          sub_2CA1C(v33, inAddress.mSelector);
          int v13 = v34;
          os_log_t v14 = (void **)v33[0];
          sub_82924(__p, (uint64_t)v48);
          os_log_t v15 = v33;
          if (v13 < 0) {
            os_log_t v15 = v14;
          }
          int v16 = __p;
          if (v32 < 0) {
            int v16 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "PhysicalDevice.cpp";
          __int16 v37 = 1024;
          int v38 = 626;
          __int16 v39 = 1024;
          signed int v40 = v2;
          __int16 v41 = 2080;
          __int16 v42 = v15;
          __int16 v43 = 2080;
          os_log_t v44 = v16;
          _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_INFO,  "%25s:%-5d Device [%u] contains property [%s] listeners that have not been un-registered by clients: %s",  buf,  0x2Cu);
          if (v32 < 0) {
            operator delete(__p[0]);
          }
          if (v34 < 0) {
            operator delete(v33[0]);
          }
        }

        *(void *)int v45 = v5;
        *(void *)&v45[*(void *)(v5 - 24)] = v30;
        *(void *)&v47[2] = v29;
        if (v52 < 0) {
          operator delete(v51);
        }
        std::streambuf::~streambuf(v48);
        std::ios::~ios(&v53);
      }

      OSStatus v17 = AudioObjectRemovePropertyListener(v2, &inAddress, (AudioObjectPropertyListenerProc)sub_1D168C, (void *)a1);
      if (v17)
      {
        int v18 = (os_log_t *)sub_138E8(17);
        os_log_t v19 = *v18;
        if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_INFO))
        {
          sub_2CA1C(buf, inAddress.mSelector);
          int v20 = buf;
          if (v40 < 0) {
            int v20 = *(_BYTE **)buf;
          }
          *(_DWORD *)int v45 = 136316162;
          *(void *)&v45[4] = "PhysicalDevice.cpp";
          __int16 v46 = 1024;
          *(_DWORD *)uint64_t v47 = 635;
          *(_WORD *)&v47[4] = 1024;
          *(_DWORD *)&v47[6] = v2;
          *(_WORD *)__int16 v48 = 2080;
          *(void *)&v48[2] = v20;
          __int16 v49 = 2048;
          uint64_t v50 = v17;
          BOOL v21 = v19;
          os_log_type_t v22 = "%25s:%-5d Device [%u] FAILED to remove device property [%s] listener with error code: %llx";
          uint32_t v23 = 44;
LABEL_35:
          _os_log_impl(&dword_0, v21, OS_LOG_TYPE_INFO, v22, v45, v23);
          if (SHIBYTE(v40) < 0) {
            operator delete(*(void **)buf);
          }
        }
      }

      else
      {
        uint32_t v24 = (os_log_t *)sub_138E8(17);
        os_log_t v25 = *v24;
        if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_INFO))
        {
          sub_2CA1C(buf, inAddress.mSelector);
          os_log_t v26 = buf;
          if (v40 < 0) {
            os_log_t v26 = *(_BYTE **)buf;
          }
          *(_DWORD *)int v45 = 136315906;
          *(void *)&v45[4] = "PhysicalDevice.cpp";
          __int16 v46 = 1024;
          *(_DWORD *)uint64_t v47 = 639;
          *(_WORD *)&v47[4] = 1024;
          *(_DWORD *)&v47[6] = v2;
          *(_WORD *)__int16 v48 = 2080;
          *(void *)&v48[2] = v26;
          BOOL v21 = v25;
          os_log_type_t v22 = "%25s:%-5d Device [%u] removed device property [%s] listener";
          uint32_t v23 = 34;
          goto LABEL_35;
        }
      }

      int v27 = (void *)v3[1];
      if (v27)
      {
        do
        {
          int v28 = v27;
          int v27 = (void *)*v27;
        }

        while (v27);
      }

      else
      {
        do
        {
          int v28 = (void *)v3[2];
          BOOL v10 = *v28 == (void)v3;
          int v3 = v28;
        }

        while (!v10);
      }

      int v3 = v28;
    }

    while (v28 != v4);
  }

  sub_F16A4(*(void **)(a1 + 168));
  *(void *)(a1 + 168) = 0LL;
  *(void *)(a1 + sub_7A768(v14 - 176) = 0LL;
  *(void *)(a1 + 160) = v4;
  std::mutex::unlock((std::mutex *)(a1 + 96));
}

void sub_1D12CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *__p, uint64_t a25, int a26, __int16 a27, char a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, char a38)
{
}

void sub_1D1324(uint64_t *a1, uint64_t **a2)
{
  __int128 v4 = (std::mutex *)(a1 + 12);
  AudioObjectID v5 = (*(uint64_t (**)(uint64_t *))(*a1 + 120))(a1);
  std::mutex::lock(v4);
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    int v8 = (uint64_t **)(a1 + 21);
    while (1)
    {
      uint64_t v9 = *v7;
      inAddress.mElement = *((_DWORD *)v7 + 2);
      *(void *)&inAddress.AudioObjectPropertySelector mSelector = v9;
      BOOL v10 = *v8;
      if (!*v8) {
        goto LABEL_14;
      }
      BOOL v11 = a1 + 21;
      do
      {
        AudioObjectPropertySelector v12 = *((_DWORD *)v10 + 8);
        BOOL v13 = v12 >= inAddress.mSelector;
        if (v12 >= inAddress.mSelector) {
          os_log_t v14 = (uint64_t **)v10;
        }
        else {
          os_log_t v14 = (uint64_t **)(v10 + 1);
        }
        if (v13) {
          BOOL v11 = v10;
        }
        BOOL v10 = *v14;
      }

      while (*v14);
      OSStatus v15 = AudioObjectRemovePropertyListener(v5, &inAddress, (AudioObjectPropertyListenerProc)sub_1D168C, a1);
      if (!v15) {
        break;
      }
      int v16 = (os_log_t *)sub_138E8(17);
      os_log_t v17 = *v16;
      if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_INFO))
      {
        sub_2CA1C(__p, inAddress.mSelector);
        int v18 = __p;
        if (v36 < 0) {
          int v18 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        __int16 v39 = "PhysicalDevice.cpp";
        __int16 v40 = 1024;
        int v41 = 667;
        __int16 v42 = 1024;
        AudioObjectID v43 = v5;
        __int16 v44 = 2080;
        int v45 = v18;
        __int16 v46 = 2048;
        uint64_t v47 = v15;
        os_log_t v19 = v17;
        int v20 = "%25s:%-5d Device [%u] FAILED to remove device property [%s] listener with error code: %llx";
        uint32_t v21 = 44;
LABEL_46:
        _os_log_impl(&dword_0, v19, OS_LOG_TYPE_INFO, v20, buf, v21);
        if (v36 < 0) {
          operator delete(__p[0]);
        }
      }

void sub_1D1668(_Unwind_Exception *a1)
{
}

uint64_t sub_1D168C(int a1, unsigned int a2, unsigned int *a3, uint64_t a4)
{
  int v8 = (os_log_t *)sub_138E8(17);
  uint64_t v9 = *v8;
  if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "PhysicalDevice.cpp";
    __int16 v26 = 1024;
    int v27 = 683;
    __int16 v28 = 1024;
    LODWORD(v29) = a1;
    _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d CommonPropertyChangeListener called on device : %u",  buf,  0x18u);
  }

  if (a2)
  {
    uint64_t v10 = a2;
    do
    {
      BOOL v11 = (os_log_t *)sub_138E8(17);
      AudioObjectPropertySelector v12 = *v11;
      if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
      {
        sub_2CA1C(v23, *a3);
        if (v24 >= 0) {
          BOOL v13 = v23;
        }
        else {
          BOOL v13 = (void **)v23[0];
        }
        (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)a4 + 128LL))(theString, a4);
        sub_48E98(__p, theString[0]);
        os_log_t v14 = __p;
        if (v22 < 0) {
          os_log_t v14 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "PhysicalDevice.cpp";
        __int16 v26 = 1024;
        int v27 = 687;
        __int16 v28 = 2080;
        uint64_t v29 = v13;
        __int16 v30 = 1024;
        int v31 = a1;
        __int16 v32 = 2080;
        os_log_t v33 = v14;
        _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Received notification (%s) from audio device %u with UID %s",  buf,  0x2Cu);
        if (v22 < 0) {
          operator delete(__p[0]);
        }
        sub_19DFC((uint64_t)theString);
        if (v24 < 0) {
          operator delete(v23[0]);
        }
      }

      *(void *)AudioObjectPropertyAddress buf = *(void *)a3;
      *(_DWORD *)&_DWORD buf[8] = a3[2];
      int v15 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 120LL))(a4);
      int v16 = (dispatch_queue_s *)sub_869B4();
      os_log_t v17 = operator new(0x20uLL);
      *(_DWORD *)os_log_t v17 = v15;
      uint64_t v18 = *(void *)buf;
      v17[1] = a4;
      void v17[2] = v18;
      *((_DWORD *)v17 + 6) = *(_DWORD *)&buf[8];
      *((_DWORD *)v17 + 7) = v15;
      dispatch_async_f(v16, v17, (dispatch_function_t)sub_1D1948);
      a3 += 3;
      --v10;
    }

    while (v10);
  }

  return 0LL;
}

void sub_1D1904( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1D1948(int *a1)
{
  uint64_t v2 = sub_EAD14();
  int v3 = *a1;
  uint64_t v4 = *((void *)a1 + 1);
  int v5 = a1[7];
  uint64_t v6 = operator new(0x20uLL);
  *uint64_t v6 = &off_474DE8;
  v6[1] = v4;
  v6[2] = *((void *)a1 + 2);
  *((_DWORD *)v6 + 6) = a1[6];
  *((_DWORD *)v6 + 7) = v5;
  uint64_t v10 = v6;
  sub_EAF70(v2, v3, (uint64_t)v9);
  uint64_t v7 = v10;
  if (v10 == v9)
  {
    uint64_t v8 = 4LL;
    uint64_t v7 = v9;
    goto LABEL_5;
  }

  if (v10)
  {
    uint64_t v8 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }

  operator delete(a1);
}

void sub_1D1A2C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int16 a11, __int16 a12, int a13, int a14, uint64_t a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  char v22 = (void *)a19;
  if ((int *)a19 == &a16)
  {
    uint64_t v23 = 4LL;
    char v22 = &a16;
  }

  else
  {
    if (!a19) {
      goto LABEL_7;
    }
    uint64_t v23 = 5LL;
  }

  (*(void (**)(void))(*v22 + 8 * v23))();
LABEL_7:
  if (a2 == 3)
  {
    char v24 = __cxa_begin_catch(exception_object);
    AudioObjectPropertySelector v25 = (os_log_t *)sub_138E8(13);
    os_log_t v26 = *v25;
    if (!*v25 || !os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR)) {
      goto LABEL_19;
    }
    int v27 = v24[2];
    LODWORD(a9) = 136316162;
    *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
    WORD6(a9) = 1024;
    *(_DWORD *)((char *)&a9 + 14) = 429;
    WORD1(a10) = 1024;
    DWORD1(a10) = v27;
    WORD4(a10) = 2080;
    *(void *)((char *)&a10 + 10) = "";
    a12 = 1024;
    a13 = 98;
    __int16 v28 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
    uint64_t v29 = v26;
    uint32_t v30 = 40;
  }

  else
  {
    int v31 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      __int16 v32 = v31;
      os_log_t v33 = (os_log_t *)sub_138E8(13);
      os_log_t v34 = *v33;
      if (!*v33 || !os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR)) {
        goto LABEL_19;
      }
      uint64_t v35 = (*(uint64_t (**)(void *))(*(void *)v32 + 16LL))(v32);
      LODWORD(a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 430;
      WORD1(a10) = 2080;
      *(void *)((char *)&a10 + 4) = v35;
      WORD6(a10) = 2080;
      *(void *)((char *)&a10 + 14) = "";
      HIWORD(a13) = 1024;
      a14 = 98;
      __int16 v28 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
      uint64_t v29 = v34;
      uint32_t v30 = 44;
    }

    else
    {
      char v36 = (os_log_t *)sub_138E8(13);
      os_log_t v37 = *v36;
      if (!*v36 || !os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR)) {
        goto LABEL_19;
      }
      LODWORD(a9) = 136315906;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 431;
      WORD1(a10) = 2080;
      *(void *)((char *)&a10 + 4) = "";
      WORD6(a10) = 1024;
      *(_DWORD *)((char *)&a10 + 14) = 98;
      __int16 v28 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
      uint64_t v29 = v37;
      uint32_t v30 = 34;
    }
  }

  _os_log_impl(&dword_0, v29, OS_LOG_TYPE_ERROR, v28, (uint8_t *)&a9, v30);
LABEL_19:
  __cxa_end_catch();
  if (!v19) {
    JUMPOUT(0x1D19F8LL);
  }
  JUMPOUT(0x1D19F0LL);
}

void *sub_1D1CC4(uint64_t a1)
{
  uint64_t result = operator new(0x20uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  void *result = &off_474DE8;
  result[1] = v3;
  result[2] = v4;
  LODWORD(v3) = *(_DWORD *)(a1 + 28);
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  *((_DWORD *)result + 7) = v3;
  return result;
}

uint64_t sub_1D1D04(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = &off_474DE8;
  *(void *)(a2 + 8) = v2;
  uint64_t v3 = *(void *)(result + 16);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  *(void *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(result + 28);
  return result;
}

uint64_t sub_1D1D38(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (std::mutex *)(v2 + 96);
  std::mutex::lock((std::mutex *)(v2 + 96));
  uint64_t v6 = *(void *)(v2 + 168);
  uint64_t v5 = v2 + 168;
  uint64_t v4 = v6;
  if (!v6) {
    goto LABEL_28;
  }
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  uint64_t v8 = v5;
  do
  {
    unsigned int v9 = *(_DWORD *)(v4 + 32);
    BOOL v10 = v9 >= v7;
    if (v9 >= v7) {
      BOOL v11 = (uint64_t *)v4;
    }
    else {
      BOOL v11 = (uint64_t *)(v4 + 8);
    }
    if (v10) {
      uint64_t v8 = v4;
    }
    uint64_t v4 = *v11;
  }

  while (*v11);
  if (v8 != v5 && v7 >= *(_DWORD *)(v8 + 32) && *(void *)(v8 + 56))
  {
    AudioObjectPropertySelector v12 = (os_log_t *)sub_138E8(17);
    BOOL v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_INFO))
    {
      sub_2CA1C(__p, *(unsigned int *)(a1 + 16));
      os_log_t v14 = v26 >= 0 ? __p : (void **)__p[0];
      int v15 = *(_DWORD *)(a1 + 28);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      __int16 v28 = "PhysicalDevice.cpp";
      __int16 v29 = 1024;
      int v30 = 711;
      __int16 v31 = 2080;
      __int16 v32 = v14;
      __int16 v33 = 1024;
      int v34 = v15;
      _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, "%25s:%-5d Handle property (%s) change from device: %u", buf, 0x22u);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }

    int v16 = *(void **)(v8 + 40);
    if (v16 != (void *)(v8 + 48))
    {
      do
      {
        ((void (*)(void, uint64_t, uint64_t, void))v16[4])( *(unsigned int *)(a1 + 28),  1LL,  a1 + 16,  v16[5]);
        os_log_t v17 = (void *)v16[1];
        if (v17)
        {
          do
          {
            uint64_t v18 = v17;
            os_log_t v17 = (void *)*v17;
          }

          while (v17);
        }

        else
        {
          do
          {
            uint64_t v18 = (void *)v16[2];
            BOOL v19 = *v18 == (void)v16;
            int v16 = v18;
          }

          while (!v19);
        }

        int v16 = v18;
      }

      while (v18 != (void *)(v8 + 48));
    }

    uint64_t v23 = 1LL;
  }

  else
  {
LABEL_28:
    int v20 = (os_log_t *)sub_138E8(17);
    uint32_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_INFO))
    {
      int v22 = *(_DWORD *)(a1 + 28);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      __int16 v28 = "PhysicalDevice.cpp";
      __int16 v29 = 1024;
      int v30 = 704;
      __int16 v31 = 1024;
      LODWORD(v32) = v22;
      _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_INFO,  "%25s:%-5d No property change handler registered on device: %u",  buf,  0x18u);
    }

    uint64_t v23 = 0LL;
  }

  std::mutex::unlock(v3);
  return v23;
}

void sub_1D2068( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_1D20A4(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      uint64_t v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }

    while (v2);
  }

  else
  {
    uint64_t v4 = a2;
    do
    {
      uint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }

    while (!v5);
  }

  if (*a1 == a2) {
    *a1 = v3;
  }
  uint64_t v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_911E8(v6, a2);
  return v3;
}

uint64_t **sub_1D2114(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  BOOL v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        BOOL v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      if (v8 >= a2) {
        break;
      }
      BOOL v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }

  else
  {
    unsigned int v7 = a1 + 1;
LABEL_9:
    unsigned int v9 = (uint64_t *)v7;
    unsigned int v7 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[7] = 0LL;
    v7[6] = 0LL;
    v7[5] = (uint64_t *)(v7 + 6);
    *unsigned int v7 = 0LL;
    v7[1] = 0LL;
    uint64_t v7[2] = v9;
    *uint64_t v6 = (uint64_t *)v7;
    BOOL v10 = (uint64_t *)**a1;
    BOOL v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      BOOL v11 = *v6;
    }

    sub_7A420(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }

  return v7;
}

void *sub_1D21EC(uint64_t a1, void *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t result = (void *)(a1 + 8);
  BOOL v5 = v6;
  if (v6)
  {
    do
    {
      while (1)
      {
        unsigned int v7 = v5;
        unint64_t v8 = v5[4];
        unint64_t v9 = v7[5];
        BOOL v10 = v9 > a4;
        if (v8 != a3) {
          BOOL v10 = v8 > a3;
        }
        if (!v10) {
          break;
        }
        BOOL v5 = (void *)*v7;
        uint64_t result = v7;
        if (!*v7) {
          goto LABEL_13;
        }
      }

      BOOL v11 = v9 < a4;
      BOOL v12 = v8 == a3;
      BOOL v13 = v8 < a3;
      if (v12) {
        BOOL v13 = v11;
      }
      if (!v13) {
        break;
      }
      uint64_t result = v7 + 1;
      BOOL v5 = (void *)v7[1];
    }

    while (v5);
  }

  else
  {
    unsigned int v7 = result;
  }

uint64_t sub_1D2264()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_48FF98);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_48FF98))
  {
    sub_1D241C();
    __cxa_guard_release(&qword_48FF98);
  }

  unsigned __int8 v1 = atomic_load((unsigned __int8 *)&qword_490968);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_490968))
  {
    std::random_device::result_type v13 = std::random_device::operator()(&stru_48FF94);
    dword_48FFA0[0] = v13;
    for (uint64_t i = 1LL; i != 624; ++i)
    {
      std::random_device::result_type v13 = i + 1812433253 * (v13 ^ (v13 >> 30));
      dword_48FFA0[i] = v13;
    }

    qword_490960 = 0LL;
    __cxa_guard_release(&qword_490968);
  }

  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_490978);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_490978))
  {
    qword_490970 = 0xFFFFFFFE00000001LL;
    __cxa_guard_release(&qword_490978);
  }

  int v4 = qword_490970;
  uint64_t result = HIDWORD(qword_490970);
  int v5 = HIDWORD(qword_490970) - qword_490970;
  if (HIDWORD(qword_490970) != (_DWORD)qword_490970)
  {
    unsigned int v6 = v5 + 1;
    if (v5 == -1)
    {
      return sub_1D2488();
    }

    else
    {
      uint64_t v7 = __clz(v6);
      uint64_t v8 = 31LL;
      if (((v6 << v7) & 0x7FFFFFFF) != 0) {
        uint64_t v8 = 32LL;
      }
      unint64_t v9 = v8 - v7;
      unint64_t v10 = v9 >> 5;
      if ((v9 & 0x1F) != 0) {
        ++v10;
      }
      if (v10 <= v9) {
        unsigned int v11 = 0xFFFFFFFF >> -(v9 / v10);
      }
      else {
        unsigned int v11 = 0;
      }
      do
        unsigned int v12 = sub_1D2488() & v11;
      while (v12 >= v6);
      return v4 + v12;
    }
  }

  return result;
}

void sub_1D23F4(_Unwind_Exception *a1)
{
}

void sub_1D241C()
{
}

void sub_1D246C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D2488()
{
  unint64_t v0 = (qword_490960 + 1) % 0x270uLL;
  unsigned int v1 = dword_48FFA0[(qword_490960 + 397) % 0x270uLL] ^ ((dword_48FFA0[v0] & 0x7FFFFFFE | dword_48FFA0[qword_490960] & 0x80000000) >> 1) ^ (dword_48FFA0[v0] << 31 >> 31) & 0x9908B0DF;
  dword_48FFA0[qword_490960] = v1;
  qword_490960 = v0;
  unsigned int v2 = ((v1 ^ (v1 >> 11)) << 7) & 0x9D2C5680 ^ v1 ^ (v1 >> 11);
  return (v2 << 15) & 0xEFC60000 ^ v2 ^ (((v2 << 15) & 0xEFC60000 ^ v2) >> 18);
}

double sub_1D2530(void *a1, uint64_t a2, uint64_t a3)
{
  if ((*(_WORD *)(a3 + 184) & 1) != 0)
  {
    uint64_t v8 = (os_log_t *)sub_138E8(13);
    unint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      int v15 = "PhysicalDevice.cpp";
      __int16 v16 = 1024;
      int v17 = 61;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v14,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a2 + 88LL))(a2, 1LL) != 1)
  {
    unsigned int v11 = (os_log_t *)sub_138E8(13);
    unsigned int v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      int v15 = "PhysicalDevice.cpp";
      __int16 v16 = 1024;
      int v17 = 62;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v14,  0x12u);
    }

    std::random_device::result_type v13 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v13, "Precondition failure.");
  }

  unsigned int v6 = sub_1D273C(a1, a2);
  return sub_1D27F0(v6, a3, 0);
}

void sub_1D270C(_Unwind_Exception *a1)
{
}

void *sub_1D273C(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = a1 + 1;
  unsigned int v5 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 88LL))(a2, 0LL);
  sub_1D2B54(v4, v5);
  unsigned int v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 88LL))(a2, 1LL);
  sub_1D2B54(a1 + 4, v6);
  a1[8] = 0LL;
  a1[7] = a1 + 8;
  a1[12] = 0LL;
  a1[11] = 0LL;
  a1[9] = 0LL;
  a1[10] = a1 + 11;
  return a1;
}

void sub_1D27D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

double sub_1D27F0(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  unsigned int v6 = a1 + 1;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - a1[1]) >> 3);
  if (v7 != (*(unsigned int (**)(uint64_t, void))(*(void *)*a1 + 88LL))(*a1, 0LL))
  {
    int v15 = (os_log_t *)sub_138E8(13);
    __int16 v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)char v24 = 136315394;
      *(void *)&v24[4] = "PhysicalDevice.cpp";
      *(_WORD *)&v24[12] = 1024;
      *(_DWORD *)&v24[14] = 227;
      _os_log_impl(&dword_0, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", v24, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invariant failure.");
  }

  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[5] - a1[4]) >> 3);
  if (v8 != (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)*a1 + 88LL))(*a1, 1LL))
  {
    uint64_t v18 = (os_log_t *)sub_138E8(13);
    BOOL v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)char v24 = 136315394;
      *(void *)&v24[4] = "PhysicalDevice.cpp";
      *(_WORD *)&v24[12] = 1024;
      *(_DWORD *)&v24[14] = 228;
      _os_log_impl(&dword_0, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", v24, 0x12u);
    }

    int v20 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v20, "Invariant failure.");
  }

  if ((*(_WORD *)(a2 + 184) & 1) != 0) {
    unint64_t v9 = v6;
  }
  else {
    unint64_t v9 = a1 + 4;
  }
  uint64_t v10 = *v9;
  if (0xAAAAAAAAAAAAAAABLL * ((v9[1] - *v9) >> 3) <= a3)
  {
    uint32_t v21 = (os_log_t *)sub_138E8(13);
    int v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)char v24 = 136315394;
      *(void *)&v24[4] = "PhysicalDevice.cpp";
      *(_WORD *)&v24[12] = 1024;
      *(_DWORD *)&v24[14] = 231;
      _os_log_impl(&dword_0, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v24, 0x12u);
    }

    uint64_t v23 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v23, "Precondition failure.");
  }

  sub_D8280(v24, (uint64_t *)(a2 + 80));
  unsigned int v11 = operator new(0x20uLL);
  unsigned int v12 = (uint64_t *)(v10 + 24LL * a3);
  double result = *(double *)v24;
  v11[1] = *(_OWORD *)v24;
  *((void *)v11 + 1) = v12;
  uint64_t v14 = *v12;
  *(void *)unsigned int v11 = *v12;
  *(void *)(v14 + 8) = v11;
  uint64_t *v12 = (uint64_t)v11;
  ++v12[2];
  return result;
}

void sub_1D2B1C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
}

void *sub_1D2B54(void *a1, unint64_t a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2)
  {
    sub_864C8(a1, a2);
    int v4 = (void *)a1[1];
    unsigned int v5 = &v4[3 * a2];
    do
    {
      void *v4 = v4;
      v4[1] = v4;
      v4[2] = 0LL;
      v4 += 3;
    }

    while (v4 != v5);
    a1[1] = v5;
  }

  return a1;
}

void sub_1D2BC0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_1D2BD4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if ((*(_WORD *)(a3 + 184) & 1) != 0)
  {
    unint64_t v8 = (os_log_t *)sub_138E8(13);
    unint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      int v15 = "PhysicalDevice.cpp";
      __int16 v16 = 1024;
      int v17 = 72;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v14,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a2 + 88LL))(a2, 1LL))
  {
    unsigned int v11 = (os_log_t *)sub_138E8(13);
    unsigned int v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      int v15 = "PhysicalDevice.cpp";
      __int16 v16 = 1024;
      int v17 = 73;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v14,  0x12u);
    }

    std::random_device::result_type v13 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v13, "Precondition failure.");
  }

  sub_1D273C(a1, a2);
  for (unsigned __int16 i = 0; ; ++i)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 88LL))(a2, 1LL);
    sub_1D27F0(a1, a3, i);
  }

  return result;
}

void sub_1D2DDC(_Unwind_Exception *a1)
{
}

void sub_1D2E0C(uint64_t **a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unint64_t v8 = a1 + 7;
  unint64_t v9 = v74;
  *(void *)AudioObjectPropertyAddress buf = v73;
  *(void *)&_DWORD buf[8] = v74;
  if (v74)
  {
    p_shared_weak_owners = (unint64_t *)&v74->__shared_weak_owners_;
    do
      unint64_t v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
  }

  unsigned int v12 = (uint64_t **)sub_1B6A5C((uint64_t)(a1 + 7), (unint64_t *)buf);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  if (a1 + 8 != v12)
  {
    int v54 = (os_log_t *)sub_138E8(13);
    __int16 v55 = *v54;
    if (*v54 && os_log_type_enabled(*v54, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "PhysicalDevice.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 240;
      _os_log_impl(&dword_0, v55, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    goto LABEL_66;
  }

  std::random_device::result_type v13 = a1 + 10;
  int v14 = v74;
  *(void *)AudioObjectPropertyAddress buf = v73;
  *(void *)&_DWORD buf[8] = v74;
  if (v74)
  {
    int v15 = (unint64_t *)&v74->__shared_weak_owners_;
    do
      unint64_t v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }

  int v17 = (uint64_t **)sub_1B6A5C((uint64_t)(a1 + 10), (unint64_t *)buf);
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  if (a1 + 11 != v17)
  {
    __int16 v57 = (os_log_t *)sub_138E8(13);
    unint64_t v58 = *v57;
    if (*v57 && os_log_type_enabled(*v57, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "PhysicalDevice.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 242;
      _os_log_impl(&dword_0, v58, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

void sub_1D3668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1D372C(uint64_t **a1, uint64_t a2)
{
  int v4 = a1 + 1;
  unsigned int v5 = operator new(0x48uLL);
  unsigned int v6 = (uint64_t *)v5;
  v14[0] = v5;
  v14[1] = v4;
  uint64_t v7 = *(void *)(a2 + 8);
  *((void *)v5 + 4) = *(void *)a2;
  *((void *)v5 + 5) = v7;
  if (v7)
  {
    unint64_t v8 = (unint64_t *)(v7 + 16);
    do
      unint64_t v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }

  *((_OWORD *)v5 + 3) = *(_OWORD *)(a2 + 16);
  *((void *)v5 + 8) = *(void *)(a2 + 32);
  *(void *)(a2 + 24) = 0LL;
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  char v15 = 1;
  uint64_t v10 = (uint64_t **)sub_103C68((uint64_t)a1, &v13, (unint64_t *)v5 + 4);
  if (*v10)
  {
    uint64_t v11 = 0LL;
  }

  else
  {
    sub_32C38(a1, v13, v10, v6);
    v14[0] = 0LL;
    uint64_t v11 = 1LL;
  }

  sub_862A0((uint64_t)v14);
  return v11;
}

void sub_1D37FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1D3810(void *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  if ((*(_WORD *)(a3 + 184) & 1) == 0)
  {
    uint64_t v11 = (os_log_t *)sub_138E8(13);
    unsigned int v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      int v17 = 136315394;
      uint64_t v18 = "PhysicalDevice.cpp";
      __int16 v19 = 1024;
      int v20 = 100;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v17,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if ((*(unsigned int (**)(uint64_t, void))(*(void *)a2 + 88LL))(a2, 0LL) <= a4)
  {
    int v14 = (os_log_t *)sub_138E8(13);
    char v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      int v17 = 136315394;
      uint64_t v18 = "PhysicalDevice.cpp";
      __int16 v19 = 1024;
      int v20 = 101;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v17,  0x12u);
    }

    unint64_t v16 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v16, "Precondition failure.");
  }

  uint64_t v10 = (uint64_t **)sub_1D273C(a1, a2);
  sub_1D2E0C(v10, a3, a5, a4);
}

void sub_1D3A00(_Unwind_Exception *a1)
{
}

uint64_t sub_1D3A30(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if ((*(_WORD *)(a3 + 184) & 1) == 0)
  {
    unint64_t v8 = (os_log_t *)sub_138E8(13);
    unint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      char v15 = "PhysicalDevice.cpp";
      __int16 v16 = 1024;
      int v17 = 111;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v14,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (!(*(unsigned int (**)(uint64_t, void))(*(void *)a2 + 88LL))(a2, 0LL))
  {
    uint64_t v11 = (os_log_t *)sub_138E8(13);
    unsigned int v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      char v15 = "PhysicalDevice.cpp";
      __int16 v16 = 1024;
      int v17 = 112;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v14,  0x12u);
    }

    uint64_t v13 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v13, "Precondition failure.");
  }

  sub_1D273C(a1, a2);
  for (unsigned __int16 i = 0; ; ++i)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 88LL))(a2, 0LL);
    sub_1D27F0(a1, a3, i);
  }

  return result;
}

void sub_1D3C38(_Unwind_Exception *a1)
{
}

uint64_t sub_1D3C68(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 312LL))(a2);
  unsigned int v9 = 0;
  memset(v21, 0, sizeof(v21));
  int v22 = 1065353216;
  while (1)
  {
    unsigned int v20 = v9;
    if ((v8 & 0xFF00000000LL) == 0 || (int v10 = v8, v9 != (_DWORD)v8))
    {
      __int128 v11 = *(_OWORD *)(a3 + 80);
      uint64_t v12 = *(void *)(a3 + 88);
      if (v12)
      {
        uint64_t v13 = (unint64_t *)(v12 + 16);
        do
          unint64_t v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }

      *(_OWORD *)int v17 = v11;
      __p[1] = 0LL;
      uint64_t v19 = 0LL;
      __p[0] = 0LL;
      sub_7A5B8(__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
      char v15 = sub_1D4250((uint64_t)v21, v9, &v20);
      sub_1D4498((uint64_t)(v15 + 24), (__int128 *)v17);
      if (__p[0]) {
        operator delete(__p[0]);
      }
      if (v17[1]) {
        std::__shared_weak_count::__release_weak(v17[1]);
      }
      int v10 = v9;
    }

    unsigned int v9 = v10 + 1;
  }

  *(_OWORD *)int v17 = 0u;
  *(_OWORD *)__int128 __p = 0u;
  LODWORD(v19) = 1065353216;
  sub_1D3E10(a1, a2, (uint64_t)v21, (uint64_t)v17);
  sub_10ABFC((uint64_t)v17);
  return sub_10ACC8((uint64_t)v21);
}

void sub_1D3DC8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_1D3E10(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  for (unsigned __int16 i = *(void **)(a3 + 16); i; unsigned __int16 i = (void *)*i)
  {
    unsigned int v9 = (std::__shared_weak_count *)i[4];
    if (v9)
    {
      int v10 = std::__shared_weak_count::lock(v9);
      if (v10)
      {
        __int128 v11 = v10;
        uint64_t v12 = i[3];
        if (v12) {
          int v13 = *(_WORD *)(v12 + 184) & 1;
        }
        else {
          int v13 = 0;
        }
        p_unsigned int shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          unint64_t v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v11);
        }

        if (v13) {
          continue;
        }
      }
    }

    uint64_t v35 = (os_log_t *)sub_138E8(13);
    char v36 = *v35;
    if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unint64_t v41 = 136315394;
      *(void *)&v41[4] = "PhysicalDevice.cpp";
      *(_WORD *)&v41[12] = 1024;
      *(_DWORD *)&v41[14] = 188;
      _os_log_impl(&dword_0, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v41, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  for (uint64_t j = *(void **)(a4 + 16); j; uint64_t j = (void *)*j)
  {
    int v17 = (std::__shared_weak_count *)j[4];
    if (v17)
    {
      uint64_t v18 = std::__shared_weak_count::lock(v17);
      if (v18)
      {
        uint64_t v19 = v18;
        uint64_t v20 = j[3];
        if (v20) {
          BOOL v21 = (*(_WORD *)(v20 + 184) & 1) == 0;
        }
        else {
          BOOL v21 = 0;
        }
        int v22 = (unint64_t *)&v18->__shared_owners_;
        do
          unint64_t v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v19);
        }

        if (v21) {
          continue;
        }
      }
    }

    char v38 = (os_log_t *)sub_138E8(13);
    __int16 v39 = *v38;
    if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unint64_t v41 = 136315394;
      *(void *)&v41[4] = "PhysicalDevice.cpp";
      *(_WORD *)&v41[12] = 1024;
      *(_DWORD *)&v41[14] = 194;
      _os_log_impl(&dword_0, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v41, 0x12u);
    }

    __int16 v40 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v40, "Precondition failure.");
  }

  sub_1D273C(a1, a2);
  for (unsigned int k = *(uint64_t **)(a3 + 16); k; unsigned int k = (uint64_t *)*k)
  {
    AudioObjectPropertySelector v25 = k + 3;
    if (k[5] == k[6])
    {
      sub_B8CBC((uint64_t *)v41, v25, "", 201);
      sub_1D27F0(a1, *(uint64_t *)v41, *((_DWORD *)k + 4));
      uint64_t v26 = *(std::__shared_weak_count **)&v41[8];
      if (*(void *)&v41[8])
      {
        __int16 v29 = (unint64_t *)(*(void *)&v41[8] + 8LL);
        do
          unint64_t v28 = __ldaxr(v29);
        while (__stlxr(v28 - 1, v29));
LABEL_34:
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }

    else
    {
      sub_B8CBC((uint64_t *)v41, v25, "", 205);
      sub_1D2E0C((uint64_t **)a1, *(uint64_t *)v41, (uint64_t)(k + 5), *((_DWORD *)k + 4));
      uint64_t v26 = *(std::__shared_weak_count **)&v41[8];
      if (*(void *)&v41[8])
      {
        int v27 = (unint64_t *)(*(void *)&v41[8] + 8LL);
        do
          unint64_t v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        goto LABEL_34;
      }
    }
  }

  for (unsigned int m = *(uint64_t **)(a4 + 16); m; unsigned int m = (uint64_t *)*m)
  {
    sub_B8F68((uint64_t *)v41, m + 3, "", 210);
    v31.n128_f64[0] = sub_1D27F0(a1, *(uint64_t *)v41, *((_DWORD *)m + 4));
    unint64_t v32 = *(std::__shared_weak_count **)&v41[8];
    if (*(void *)&v41[8])
    {
      __int16 v33 = (unint64_t *)(*(void *)&v41[8] + 8LL);
      do
        unint64_t v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v32->__on_zero_shared)(v32, v31);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }

void sub_1D41F4(_Unwind_Exception *a1)
{
}

char *sub_1D4250(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v7 - 1) & a2;
    }

    unsigned int v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      int v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = *((void *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }

          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }

            else
            {
              v11 &= v7 - 1;
            }

            if (v11 != v3) {
              break;
            }
          }

          int v10 = *(char **)v10;
        }

        while (v10);
      }
    }
  }

  uint64_t v12 = (void *)(a1 + 16);
  int v10 = (char *)operator new(0x40uLL);
  v23[0] = v10;
  v23[1] = a1 + 16;
  *(void *)int v10 = 0LL;
  *((void *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *((void *)v10 + 7) = 0LL;
  char v24 = 1;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1LL;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_52168(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v7 - 1) & v6;
    }
  }

  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *(void *)int v10 = *v20;
LABEL_38:
    *uint64_t v20 = v10;
    goto LABEL_39;
  }

  *(void *)int v10 = *v12;
  void *v12 = v10;
  *(void *)(v19 + 8 * v3) = v12;
  if (*(void *)v10)
  {
    unint64_t v21 = *(void *)(*(void *)v10 + 8LL);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }

    else
    {
      v21 &= v7 - 1;
    }

    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }

void sub_1D4484(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1D4498(uint64_t a1, __int128 *a2)
{
  __int128 v4 = *a2;
  *(void *)a2 = 0LL;
  *((void *)a2 + 1) = 0LL;
  unsigned int v5 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v4;
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  unint64_t v6 = *(void **)(a1 + 16);
  if (v6)
  {
    *(void *)(a1 + 24) = v6;
    operator delete(v6);
    *(void *)(a1 + 16) = 0LL;
    *(void *)(a1 + 24) = 0LL;
    *(void *)(a1 + 32) = 0LL;
  }

  *(_OWORD *)(a1 + 16) = a2[1];
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  *((void *)a2 + 4) = 0LL;
  return a1;
}

double sub_1D4510(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((*(_WORD *)(a3 + 184) & 1) == 0)
  {
    uint64_t v12 = (os_log_t *)sub_138E8(13);
    float v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      int v24 = 136315394;
      AudioObjectPropertySelector v25 = "PhysicalDevice.cpp";
      __int16 v26 = 1024;
      int v27 = 145;
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v24,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if ((*(_WORD *)(a4 + 184) & 1) != 0)
  {
    BOOL v15 = (os_log_t *)sub_138E8(13);
    unint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      int v24 = 136315394;
      AudioObjectPropertySelector v25 = "PhysicalDevice.cpp";
      __int16 v26 = 1024;
      int v27 = 146;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v24,  0x12u);
    }

    unint64_t v17 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v17, "Precondition failure.");
  }

  if ((*(unsigned int (**)(uint64_t, void))(*(void *)a2 + 88LL))(a2, 0LL) != 1)
  {
    size_t v18 = (os_log_t *)sub_138E8(13);
    uint64_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      int v24 = 136315394;
      AudioObjectPropertySelector v25 = "PhysicalDevice.cpp";
      __int16 v26 = 1024;
      int v27 = 147;
      _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v24,  0x12u);
    }

    uint64_t v20 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v20, "Precondition failure.");
  }

  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a2 + 88LL))(a2, 1LL) != 1)
  {
    unint64_t v21 = (os_log_t *)sub_138E8(13);
    int v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      int v24 = 136315394;
      AudioObjectPropertySelector v25 = "PhysicalDevice.cpp";
      __int16 v26 = 1024;
      int v27 = 148;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v24,  0x12u);
    }

    unint64_t v23 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v23, "Precondition failure.");
  }

  int v10 = (uint64_t **)sub_1D273C(a1, a2);
  sub_1D2E0C(v10, a3, a5, 0);
  return sub_1D27F0(a1, a4, 0);
}

void sub_1D4874(_Unwind_Exception *a1)
{
}

double sub_1D48AC(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  if ((*(_WORD *)(a3 + 184) & 1) == 0)
  {
    float v14 = (os_log_t *)sub_138E8(13);
    BOOL v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      int v26 = 136315394;
      int v27 = "PhysicalDevice.cpp";
      __int16 v28 = 1024;
      int v29 = 164;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v26,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if ((*(_WORD *)(a5 + 184) & 1) != 0)
  {
    unint64_t v17 = (os_log_t *)sub_138E8(13);
    size_t v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      int v26 = 136315394;
      int v27 = "PhysicalDevice.cpp";
      __int16 v28 = 1024;
      int v29 = 165;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v26,  0x12u);
    }

    uint64_t v19 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v19, "Precondition failure.");
  }

  if ((*(unsigned int (**)(uint64_t, void))(*(void *)a2 + 88LL))(a2, 0LL) <= a4)
  {
    uint64_t v20 = (os_log_t *)sub_138E8(13);
    unint64_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      int v26 = 136315394;
      int v27 = "PhysicalDevice.cpp";
      __int16 v28 = 1024;
      int v29 = 166;
      _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v26,  0x12u);
    }

    int v22 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v22, "Precondition failure.");
  }

  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a2 + 88LL))(a2, 1LL))
  {
    unint64_t v23 = (os_log_t *)sub_138E8(13);
    int v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      int v26 = 136315394;
      int v27 = "PhysicalDevice.cpp";
      __int16 v28 = 1024;
      int v29 = 167;
      _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v26,  0x12u);
    }

    AudioObjectPropertySelector v25 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v25, "Precondition failure.");
  }

  uint64_t v12 = (uint64_t **)sub_1D273C(a1, a2);
  sub_1D2E0C(v12, a3, a6, a4);
  return sub_1D27F0(a1, a5, 0);
}

void sub_1D4C10(_Unwind_Exception *a1)
{
}

std::string *sub_1D4C48(std::string *a1, uint64_t a2)
{
  __int128 v4 = std::string::insert(&v44, 0LL, "Physical Device: ", 0x11uLL);
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  int64_t cap = v4->__r_.__value_.__l.__cap_;
  __int128 v45 = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    unint64_t v6 = (const std::string::value_type *)&v45;
  }
  else {
    unint64_t v6 = (const std::string::value_type *)v45;
  }
  if (cap >= 0) {
    std::string::size_type v7 = HIBYTE(cap);
  }
  else {
    std::string::size_type v7 = *((void *)&v45 + 1);
  }
  std::string::append(a1, v6, v7);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v45);
  }
  std::to_string(&v42, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
  uint8x8_t v8 = std::string::insert(&v42, 0LL, ", Associated Input Ports (", 0x1AuLL);
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  int v10 = std::string::append(&v43, "): ", 3uLL);
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  sub_1D523C(&__p, *(void *)(a2 + 8), *(void *)(a2 + 16));
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  float v14 = std::string::append(&v44, (const std::string::value_type *)p_p, size);
  __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  int64_t cap = v14->__r_.__value_.__l.__cap_;
  __int128 v45 = v15;
  v14->__r_.__value_.__l.__size_ = 0LL;
  v14->__r_.__value_.__l.__cap_ = 0LL;
  v14->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    unint64_t v16 = (const std::string::value_type *)&v45;
  }
  else {
    unint64_t v16 = (const std::string::value_type *)v45;
  }
  if (cap >= 0) {
    std::string::size_type v17 = HIBYTE(cap);
  }
  else {
    std::string::size_type v17 = *((void *)&v45 + 1);
  }
  std::string::append(a1, v16, v17);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v45);
  }
  std::to_string(&v42, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
  size_t v18 = std::string::insert(&v42, 0LL, ", Associated Output Ports(", 0x1AuLL);
  __int128 v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__l.__cap_ = v18->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0LL;
  v18->__r_.__value_.__l.__cap_ = 0LL;
  v18->__r_.__value_.__r.__words[0] = 0LL;
  uint64_t v20 = std::string::append(&v43, "): ", 3uLL);
  __int128 v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__l.__cap_ = v20->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0LL;
  v20->__r_.__value_.__l.__cap_ = 0LL;
  v20->__r_.__value_.__r.__words[0] = 0LL;
  sub_1D523C(&__p, *(void *)(a2 + 32), *(void *)(a2 + 40));
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v22 = &__p;
  }
  else {
    int v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v23 = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v23 = __p.__r_.__value_.__l.__size_;
  }
  int v24 = std::string::append(&v44, (const std::string::value_type *)v22, v23);
  __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  int64_t cap = v24->__r_.__value_.__l.__cap_;
  __int128 v45 = v25;
  v24->__r_.__value_.__l.__size_ = 0LL;
  v24->__r_.__value_.__l.__cap_ = 0LL;
  v24->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    int v26 = (const std::string::value_type *)&v45;
  }
  else {
    int v26 = (const std::string::value_type *)v45;
  }
  if (cap >= 0) {
    std::string::size_type v27 = HIBYTE(cap);
  }
  else {
    std::string::size_type v27 = *((void *)&v45 + 1);
  }
  std::string::append(a1, v26, v27);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v45);
  }
  std::to_string(&v43, *(void *)(a2 + 72));
  __int16 v28 = std::string::insert(&v43, 0LL, ", Associated Input SubPorts (", 0x1DuLL);
  __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0LL;
  v28->__r_.__value_.__l.__cap_ = 0LL;
  v28->__r_.__value_.__r.__words[0] = 0LL;
  int v30 = std::string::append(&v44, ")", 1uLL);
  __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  int64_t cap = v30->__r_.__value_.__l.__cap_;
  __int128 v45 = v31;
  v30->__r_.__value_.__l.__size_ = 0LL;
  v30->__r_.__value_.__l.__cap_ = 0LL;
  v30->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    unint64_t v32 = (const std::string::value_type *)&v45;
  }
  else {
    unint64_t v32 = (const std::string::value_type *)v45;
  }
  if (cap >= 0) {
    std::string::size_type v33 = HIBYTE(cap);
  }
  else {
    std::string::size_type v33 = *((void *)&v45 + 1);
  }
  std::string::append(a1, v32, v33);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v45);
  }
  std::to_string(&v43, *(void *)(a2 + 96));
  unint64_t v34 = std::string::insert(&v43, 0LL, ", Associated Output SubPorts (", 0x1EuLL);
  __int128 v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__l.__cap_ = v34->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0LL;
  v34->__r_.__value_.__l.__cap_ = 0LL;
  v34->__r_.__value_.__r.__words[0] = 0LL;
  char v36 = std::string::append(&v44, ")", 1uLL);
  __int128 v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  int64_t cap = v36->__r_.__value_.__l.__cap_;
  __int128 v45 = v37;
  v36->__r_.__value_.__l.__size_ = 0LL;
  v36->__r_.__value_.__l.__cap_ = 0LL;
  v36->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    char v38 = (const std::string::value_type *)&v45;
  }
  else {
    char v38 = (const std::string::value_type *)v45;
  }
  if (cap >= 0) {
    std::string::size_type v39 = HIBYTE(cap);
  }
  else {
    std::string::size_type v39 = *((void *)&v45 + 1);
  }
  std::string::append(a1, v38, v39);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v45);
  }
  return std::string::append(a1, " }", 2uLL);
}

void sub_1D5104( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, void *__p, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
}

std::string *sub_1D523C(std::string *a1, uint64_t a2, uint64_t a3)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      sub_2D9BB0(&__p, a2, 1);
      unint64_t v6 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
      std::string::size_type v7 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? __p.__r_.__value_.__s.__size_ : __p.__r_.__value_.__l.__size_;
      std::string::append(a1, (const std::string::value_type *)v6, v7);
      a2 += 24LL;
      if (a2 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }

  return std::string::append(a1, " }", 2uLL);
}

void sub_1D5318( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

BOOL sub_1D5354(uint64_t a1)
{
  if (!a1)
  {
    unsigned int v2 = (os_log_t *)sub_138E8(13);
    unint64_t v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      unint64_t v6 = "PhysicalDevice.cpp";
      __int16 v7 = 1024;
      int v8 = 287;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v5,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  return sub_2C7B94(a1);
}

void sub_1D5444(_Unwind_Exception *exception_object)
{
}

void sub_1D5460(void *a1)
{
  if (a1)
  {
    sub_1D5460(*a1);
    sub_1D5460(a1[1]);
    unsigned int v2 = (std::__shared_weak_count *)a1[6];
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    operator delete(a1);
  }

uint64_t sub_1D54A4(uint64_t a1)
{
  *(void *)a1 = off_474BF0;
  if ((sub_397E74((unint64_t *)qword_4A9BE8) & 1) == 0)
  {
    unsigned int v2 = (os_log_t *)sub_138E8(13);
    unint64_t v3 = *v2;
    if (*v2)
    {
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
      {
        int v6 = 136315650;
        __int16 v7 = "PhysicalDevice.cpp";
        __int16 v8 = 1024;
        int v9 = 319;
        __int16 v10 = 2048;
        uint64_t v11 = a1;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: The PhysicalDevice at %p is being destroyed by something other than the Object Destruction Handler",  (uint8_t *)&v6,  0x1Cu);
      }
    }
  }

  sub_1BB88((uint64_t *)(a1 + 232));
  sub_1D5460(*(void **)(a1 + 216));
  sub_1D5460(*(void **)(a1 + 192));
  sub_F16A4(*(void **)(a1 + 168));
  std::mutex::~mutex((std::mutex *)(a1 + 96));
  sub_F3008(a1);
  __int128 v4 = *(std::__shared_weak_count **)(a1 + 88);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void sub_1D55C8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

uint64_t *sub_1D55D4(uint64_t *result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  __int128 v4 = result + 29;
  int v5 = (uint64_t *)result[30];
  if (v5 == result + 29) {
    goto LABEL_5;
  }
  __int16 v7 = result;
  while (v5[2] != a4)
  {
    int v5 = (uint64_t *)v5[1];
    if (v5 == v4) {
      goto LABEL_5;
    }
  }

  if (v5 == v4)
  {
LABEL_5:
    __int16 v8 = (os_log_t *)sub_138E8(13);
    int v9 = *v8;
    if (*v8)
    {
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
      {
        int v26 = 136315394;
        std::string::size_type v27 = "PhysicalDevice.cpp";
        __int16 v28 = 1024;
        int v29 = 452;
        _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): muteControl does not exist in mControlDeleteList.",  (uint8_t *)&v26,  0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "muteControl does not exist in mControlDeleteList.");
  }

  uint64_t v12 = result + 24;
  uint64_t v11 = result[24];
  if (v11)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v12 = (uint64_t *)v11;
        unsigned int v13 = *(unsigned __int8 *)(v11 + 32);
        if (v13 == a2) {
          break;
        }
        if (v13 <= a2)
        {
          if (v13 >= a2) {
            char v18 = 1;
          }
          else {
            char v18 = -1;
          }
          if ((v18 & 0x80) == 0) {
            return result;
          }
          goto LABEL_27;
        }

void sub_1D57F0(_Unwind_Exception *exception_object)
{
}

void sub_1D580C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  __int128 v4 = (void *)(a1 + 232);
  int v5 = *(void **)(a1 + 240);
  if (v5 == (void *)(a1 + 232)) {
    goto LABEL_4;
  }
  while (v5[2] != a4)
  {
    int v5 = (void *)v5[1];
    if (v5 == v4) {
      goto LABEL_4;
    }
  }

  if (v5 == v4)
  {
LABEL_4:
    __int16 v10 = (os_log_t *)sub_138E8(13);
    uint64_t v11 = *v10;
    if (*v10)
    {
      if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 v31 = 136315394;
        *(void *)&v31[4] = "PhysicalDevice.cpp";
        *(_WORD *)&v31[12] = 1024;
        *(_DWORD *)&v31[14] = 460;
        _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): volumeControl does not exist in mControlDeleteList.",  v31,  0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "volumeControl does not exist in mControlDeleteList.");
  }

  unsigned int v13 = (std::__shared_weak_count *)v5[3];
  *(void *)__int128 v31 = a4;
  *(void *)&v31[8] = v13;
  if (v13)
  {
    p_unsigned int shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      unint64_t v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }

  uint64_t v17 = a1 + 216;
  char v16 = *(uint64_t **)(a1 + 216);
  if (v16)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v17 = (uint64_t)v16;
        unsigned int v18 = *((unsigned __int8 *)v16 + 32);
        if (v18 == a2) {
          break;
        }
        if (v18 <= a2)
        {
          if (v18 >= a2) {
            char v23 = 1;
          }
          else {
            char v23 = -1;
          }
          if ((v23 & 0x80) == 0) {
            goto LABEL_38;
          }
          goto LABEL_29;
        }

void sub_1D5AB4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_1D5AE0(void *a1, uint64_t a2)
{
  __int128 v4 = a1 + 29;
  for (unsigned __int16 i = (void *)a1[30]; i != v4; unsigned __int16 i = (void *)i[1])
  {
    if (i[2] == a2)
    {
      if (i != v4) {
        return result;
      }
      break;
    }
  }

  int v6 = (os_log_t *)sub_138E8(17);
  __int16 v7 = *v6;
  if (*v6)
  {
    if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t v12 = 136315650;
      *(void *)&v12[4] = "PhysicalDevice.cpp";
      *(_WORD *)&v12[12] = 1024;
      *(_DWORD *)&v12[14] = 494;
      __int16 v13 = 2048;
      uint64_t v14 = a2;
      _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Adding control %p to delete list", v12, 0x1Cu);
    }
  }

  *(void *)uint64_t v12 = a2;
  __int16 v8 = operator new(0x20uLL);
  *__int16 v8 = &off_474DB0;
  v8[1] = 0LL;
  void v8[2] = 0LL;
  uint64_t v8[3] = a2;
  *(void *)&v12[8] = v8;
  int v9 = operator new(0x20uLL);
  double result = *(double *)v12;
  v9[1] = *(_OWORD *)v12;
  uint64_t v11 = a1[29];
  *(void *)int v9 = v11;
  *((void *)v9 + 1) = v4;
  *(void *)(v11 + 8) = v9;
  a1[29] = v9;
  ++a1[31];
  return result;
}

void sub_1D5C2C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  if (a2)
  {
    sub_7A768((uint64_t)&a9);
    __cxa_begin_catch(exception_object);
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8LL))(v9);
    }
    uint64_t v11 = (os_log_t *)sub_138E8(17);
    uint64_t v12 = *v11;
    if (*v11)
    {
      if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315394;
        *(void *)((char *)&a9 + 4) = "PhysicalDevice.cpp";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 501;
        _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Exception thrown adding control to the delete list. Deleting control.",  (uint8_t *)&a9,  0x12u);
      }
    }

    __cxa_rethrow();
  }

  _Unwind_Resume(exception_object);
}

void sub_1D5D24(std::__shared_weak_count *a1)
{
}

uint64_t sub_1D5D38(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

void sub_1D5D54(caulk::concurrent::message *this)
{
  *(void *)this = off_47AFC0;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  caulk::concurrent::message::~message(this);
}

void sub_1D5D98(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v2 = sub_138E8(16);
    if ((*(_BYTE *)(v2 + 8) & 1) != 0)
    {
      unint64_t v3 = *(os_log_s **)v2;
      if (*(void *)v2)
      {
        if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
        {
          int v7 = 136315394;
          __int16 v8 = "AggregateDevice.cpp";
          __int16 v9 = 1024;
          int v10 = 182;
          _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d Closing VAD Captures", (uint8_t *)&v7, 0x12u);
        }
      }
    }

    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = 0LL;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
    }
  }

  int v5 = (dispatch_queue_s *)sub_869B4();
  int v6 = operator new(8uLL);
  *int v6 = a1;
  dispatch_async_f(v5, v6, (dispatch_function_t)sub_1D5EB0);
}

void sub_1D5EA4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1D5EB0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = sub_138E8(16);
  if ((*(_BYTE *)(v3 + 8) & 1) != 0)
  {
    uint64_t v4 = *(os_log_s **)v3;
    if (*(void *)v3)
    {
      if (os_log_type_enabled(*(os_log_t *)v3, OS_LOG_TYPE_DEBUG))
      {
        int v5 = 136315394;
        int v6 = "AggregateDevice.cpp";
        __int16 v7 = 1024;
        int v8 = 188;
        _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d deleting IOMonitorCloseMessage", (uint8_t *)&v5, 0x12u);
      }
    }
  }

  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  operator delete(a1);
}

void sub_1D5F9C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    unint64_t v15 = __cxa_begin_catch(exception_object);
    char v16 = (os_log_t *)sub_138E8(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 98;
      unsigned int v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      BOOL v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }

  else
  {
    uint64_t v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      char v23 = v22;
      unint64_t v24 = (os_log_t *)sub_138E8(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16LL))(v23);
        LODWORD(a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 98;
        unsigned int v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        BOOL v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      unint64_t v27 = (os_log_t *)sub_138E8(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 98;
        unsigned int v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        BOOL v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x1D5F64LL);
}

void sub_1D61EC(void *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  unsigned int v3 = (*(uint64_t (**)(void *))(*a1 + 120LL))(a1);
  std::to_string(&v42, v3);
  uint64_t v4 = std::string::insert(&v42, 0LL, "[ id: ", 6uLL);
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  int64_t cap = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    int v6 = __p;
  }
  else {
    int v6 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v7 = HIBYTE(cap);
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v6, v7);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  snprintf(__str, 0x13uLL, "%p", a1);
  sub_7D084(&v42, __str);
  int v8 = std::string::insert(&v42, 0LL, "; addr: ", 8uLL);
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  int64_t cap = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    int v10 = __p;
  }
  else {
    int v10 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v11 = HIBYTE(cap);
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v10, v11);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(char *__return_ptr, void *))(*a1 + 128LL))(__str, a1);
  sub_48E98(&v42, *(CFStringRef *)__str);
  uint64_t v12 = std::string::insert(&v42, 0LL, "; uid: ", 8uLL);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  int64_t cap = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v14 = __p;
  }
  else {
    uint64_t v14 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v15 = HIBYTE(cap);
  }
  else {
    std::string::size_type v15 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v14, v15);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  sub_19DFC((uint64_t)__str);
  uint64_t v16 = *(void *)((char *)a1 + 292);
  if ((v16 & 0xFF00000000LL) != 0)
  {
    sub_2CA1C(&v42, v16);
    os_log_t v17 = std::string::insert(&v42, 0LL, "; isolatedUseCaseID: ", 0x16uLL);
    __int128 v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    int64_t cap = v17->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v18;
    v17->__r_.__value_.__l.__size_ = 0LL;
    v17->__r_.__value_.__l.__cap_ = 0LL;
    v17->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      unsigned int v19 = __p;
    }
    else {
      unsigned int v19 = (void **)__p[0];
    }
    if (cap >= 0) {
      std::string::size_type v20 = HIBYTE(cap);
    }
    else {
      std::string::size_type v20 = (std::string::size_type)__p[1];
    }
    std::string::append(a2, (const std::string::value_type *)v19, v20);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
  }

  sub_7D084(&v41, "{ ");
  char v21 = 0;
  uint64_t v22 = 0LL;
  __int16 v45 = 256;
  do
  {
    char v23 = v21;
    int v24 = __str[v22 - 2];
    unsigned int v25 = (*(uint64_t (**)(void *, void))(*a1 + 88LL))(a1, __str[v22 - 2]);
    if (v25)
    {
      uint64_t v26 = 0LL;
      if (v24) {
        unint64_t v27 = "o/";
      }
      else {
        unint64_t v27 = "i/";
      }
      do
      {
        os_log_t v28 = (const void *)(*(uint64_t (**)(void *, BOOL, uint64_t))(*a1 + 96LL))(a1, v24 != 0, v26);
        snprintf(__s, 0x13uLL, "%p", v28);
        sub_7D084(&v42, __s);
        int v29 = std::string::insert(&v42, 0LL, v27, 2uLL);
        __int128 v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        int64_t cap = v29->__r_.__value_.__l.__cap_;
        *(_OWORD *)std::string __p = v30;
        v29->__r_.__value_.__l.__size_ = 0LL;
        v29->__r_.__value_.__l.__cap_ = 0LL;
        v29->__r_.__value_.__r.__words[0] = 0LL;
        if (cap >= 0) {
          __int128 v31 = __p;
        }
        else {
          __int128 v31 = (void **)__p[0];
        }
        if (cap >= 0) {
          std::string::size_type v32 = HIBYTE(cap);
        }
        else {
          std::string::size_type v32 = (std::string::size_type)__p[1];
        }
        std::string::append(&v41, (const std::string::value_type *)v31, v32);
        if (SHIBYTE(cap) < 0) {
          operator delete(__p[0]);
        }
        uint64_t v26 = (v26 + 1);
      }

      while (v25 != (_DWORD)v26);
    }

    char v21 = 1;
    uint64_t v22 = 1LL;
  }

  while ((v23 & 1) == 0);
  std::string::append(&v41, " }", 2uLL);
  uint64_t v33 = std::string::insert(&v41, 0LL, "; virt strms: ", 0xFuLL);
  __int128 v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  int64_t v47 = v33->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __str = v34;
  v33->__r_.__value_.__l.__size_ = 0LL;
  v33->__r_.__value_.__l.__cap_ = 0LL;
  v33->__r_.__value_.__r.__words[0] = 0LL;
  if (v47 >= 0) {
    __int128 v35 = __str;
  }
  else {
    __int128 v35 = *(char **)__str;
  }
  if (v47 >= 0) {
    std::string::size_type v36 = HIBYTE(v47);
  }
  else {
    std::string::size_type v36 = *(void *)&__str[8];
  }
  std::string::append(a2, v35, v36);
  if (SHIBYTE(v47) < 0) {
    operator delete(*(void **)__str);
  }
  std::string::append(a2, "; phys devs: { ", 0xFuLL);
  sub_9D988((uint64_t *)__p, a1 + 23, "", 322);
  __int128 v37 = (void **)__p[1];
  if (__p[1] != __p)
  {
    while (1)
    {
      sub_23FE8((uint64_t)&v42, (os_unfair_lock_t)v37[2] + 2);
      char v38 = (v42.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v42 : (std::string *)v42.__r_.__value_.__r.__words[0];
      std::string::size_type v39 = (v42.__r_.__value_.__s.__size_ & 0x80u) == 0 ? v42.__r_.__value_.__s.__size_ : v42.__r_.__value_.__l.__size_;
      std::string::append(a2, (const std::string::value_type *)v38, v39);
      __int128 v37 = (void **)v37[1];
      if (v37 == __p) {
        break;
      }
      std::string::append(a2, ", ", 2uLL);
    }
  }

  std::string::append(a2, " } ]", 4uLL);
  sub_1BB88((uint64_t *)__p);
}

void sub_1D6754( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D68A4()
{
  return 0LL;
}

void sub_1D68AC()
{
  unint64_t v0 = (os_log_t *)sub_138E8(13);
  uint64_t v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      uint64_t v4 = "AggregateDevice.cpp";
      __int16 v5 = 1024;
      int v6 = 267;
      _os_log_impl( &dword_0,  v1,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): DefinesCustomPreferredOutputChannelsForStereo returned false; calling "
        "this function is illegal.",
        (uint8_t *)&v3,
        0x12u);
    }
  }

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error( exception,  "DefinesCustomPreferredOutputChannelsForStereo returned false; calling this function is illegal.");
}

void sub_1D696C(_Unwind_Exception *exception_object)
{
}

void sub_1D6988(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = (uint64_t)a3;
  a3[1] = (uint64_t)a3;
  a3[2] = 0LL;
  uint64_t v6 = sub_546E0();
  v21[0] = (uint64_t)&off_4750B8;
  uint64_t v22 = v21;
  sub_FFB0C(v20, v6, a2, (uint64_t)v21);
  std::string::size_type v7 = v22;
  if (v22 == v21)
  {
    uint64_t v8 = 4LL;
    std::string::size_type v7 = v21;
  }

  else
  {
    if (!v22) {
      goto LABEL_6;
    }
    uint64_t v8 = 5LL;
  }

  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  sub_9D988(v21, (void *)(a1 + 184), "", 275);
  sub_9DCB8(&v18, v20);
  __int128 v9 = v19;
  if (v19 != &v18)
  {
    int v10 = (uint64_t *)v21[1];
    do
    {
      if (v10 != v21)
      {
        uint64_t v11 = v9[2];
        uint64_t v12 = v10;
        while (*(void *)(v11 + 192) != v12[2])
        {
          uint64_t v12 = (uint64_t *)v12[1];
          if (v12 == v21) {
            goto LABEL_18;
          }
        }

        if (v12 != v21)
        {
          uint64_t v13 = v9[3];
          if (v13)
          {
            uint64_t v14 = (unint64_t *)(v13 + 16);
            do
              unint64_t v15 = __ldxr(v14);
            while (__stxr(v15 + 1, v14));
          }

          uint64_t v16 = operator new(0x20uLL);
          v16[2] = v11;
          void v16[3] = v13;
          uint64_t v17 = *a3;
          void *v16 = *a3;
          v16[1] = a3;
          *(void *)(v17 + 8) = v16;
          *a3 = (uint64_t)v16;
          ++a3[2];
        }
      }

void sub_1D6B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_1BB88((uint64_t *)va1);
  sub_85B80((uint64_t *)va);
  sub_85B80(v5);
  _Unwind_Resume(a1);
}

void sub_1D6BBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a3 + 88LL))(a3))
    {
      __int128 v5 = *(_OWORD *)(a2 + 16);
      v6[0] = *(_OWORD *)a2;
      v6[1] = v5;
      uint64_t v7 = *(void *)(a2 + 32);
      char v8 = 1;
      sub_1D6C38(a1, (uint64_t)v6);
    }
  }

uint64_t sub_1D6C20()
{
  return 0LL;
}

uint64_t sub_1D6C30()
{
  return 0LL;
}

void sub_1D6C38(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = *(void *)(a1 + 268);
  uint64_t v4 = sub_138E8(16);
  sub_33464((std::string *)__p, (unsigned int *)&v33);
  if (__p[23] >= 0) {
    __int128 v5 = __p;
  }
  else {
    __int128 v5 = *(const char **)__p;
  }
  sub_1D71E4(3, v4, (uint64_t)"", 763, (uint64_t)"", "Updating time sync device for VAD %s", v5);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if (*(_BYTE *)(a2 + 40))
  {
    __int128 v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    *(_OWORD *)&__p[16] = v6;
    uint64_t v36 = *(void *)(a2 + 32);
    if (*(_DWORD *)&__p[8] != 1819304813) {
      goto LABEL_18;
    }
  }

  else
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 96LL))(a1, 1LL, 0LL);
    else {
      BOOL v8 = *(_DWORD *)&__p[8] == 1819304813;
    }
    if (!v8) {
      goto LABEL_18;
    }
  }

  uint64_t v9 = *(void *)(a1 + 208);
  char v10 = sub_1D72C0((_DWORD *)(a1 + 264));
  if (!sub_287194(v9, v10))
  {
LABEL_18:
    sub_7D084(__dst, "");
    goto LABEL_19;
  }

  else {
    uint64_t v11 = *(unsigned __int8 *)(a1 + 415);
  }
  BOOL v23 = v11 == 0;
  int v24 = (os_log_t *)sub_138E8(16);
  unsigned int v25 = *v24;
  if (!v23)
  {
    uint64_t v26 = (uint64_t *)(a1 + 392);
    if (v25 && os_log_type_enabled(*v24, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v27 = a1 + 392;
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = "AggregateDevice.cpp";
      *(_WORD *)&_BYTE __p[12] = 1024;
      *(_DWORD *)&__p[14] = 967;
      *(_WORD *)&__p[18] = 2080;
      *(void *)&__p[20] = v27;
      _os_log_impl(&dword_0, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Selected clock is %s", __p, 0x1Cu);
    }

    if (*(char *)(a1 + 415) < 0)
    {
      sub_24054(__dst, *(void **)(a1 + 392), *(void *)(a1 + 400));
      goto LABEL_19;
    }

    goto LABEL_63;
  }

  uint64_t v26 = (uint64_t *)(a1 + 368);
  if (v25 && os_log_type_enabled(*v24, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v28 = a1 + 368;
    *(_DWORD *)std::string __p = 136315650;
    *(void *)&__p[4] = "AggregateDevice.cpp";
    *(_WORD *)&_BYTE __p[12] = 1024;
    *(_DWORD *)&__p[14] = 971;
    *(_WORD *)&__p[18] = 2080;
    *(void *)&__p[20] = v28;
    _os_log_impl(&dword_0, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Selected clock is %s", __p, 0x1Cu);
  }

  if ((*(char *)(a1 + 391) & 0x80000000) == 0)
  {
LABEL_63:
    *(_OWORD *)std::__fs::filesystem::path __dst = *(_OWORD *)v26;
    uint64_t v32 = v26[2];
    goto LABEL_19;
  }

  sub_24054(__dst, *(void **)(a1 + 368), *(void *)(a1 + 376));
LABEL_19:
  AudioObjectID v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
  uint64_t v13 = sub_138E8(16);
  sub_33464((std::string *)__p, (unsigned int *)&v33);
  if (__p[23] >= 0) {
    uint64_t v14 = __p;
  }
  else {
    uint64_t v14 = *(const char **)__p;
  }
  unint64_t v15 = "None";
  if (SHIBYTE(v32) < 0)
  {
    if (__dst[1]) {
      unint64_t v15 = (const char *)__dst[0];
    }
  }

  else if (HIBYTE(v32))
  {
    unint64_t v15 = (const char *)__dst;
  }

  sub_1D71E4(3, v13, (uint64_t)"", 138, (uint64_t)"", "Setting clock for VAD '%s' to %s", v14, v15);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  strcpy(__p, "dcpabolg");
  __p[9] = 0;
  *(_WORD *)&__p[10] = 0;
  if (!sub_325E4(v12, (const AudioObjectPropertyAddress *)__p))
  {
    int v29 = (os_log_t *)sub_138E8(13);
    __int128 v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = "AggregateDevice.cpp";
      *(_WORD *)&_BYTE __p[12] = 1024;
      *(_DWORD *)&__p[14] = 130;
      _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Default VAD's clock device is not settable",  __p,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Default VAD's clock device is not settable");
    std::string::size_type v20 = (void (*)(void *))&std::logic_error::~logic_error;
LABEL_69:
    __cxa_throw(exception, v21, v20);
  }

  if (v32 >= 0) {
    uint64_t v16 = __dst;
  }
  else {
    uint64_t v16 = (void **)__dst[0];
  }
  if (v16)
  {
    if (v32 >= 0) {
      CFIndex v17 = HIBYTE(v32);
    }
    else {
      CFIndex v17 = (CFIndex)__dst[1];
    }
    CFStringRef v18 = CFStringCreateWithBytes(0LL, (const UInt8 *)v16, v17, 0x8000100u, 0);
    if (!v18)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error((std::runtime_error *)exception, "Could not construct");
      std::string::size_type v20 = (void (*)(void *))&std::runtime_error::~runtime_error;
      goto LABEL_69;
    }
  }

  else
  {
    CFStringRef v18 = 0LL;
  }

  inData[0] = v18;
  inData[1] = 0LL;
  strcpy(__p, "dcpabolg");
  __p[9] = 0;
  *(_WORD *)&__p[10] = 0;
  AudioObjectSetPropertyData(v12, (const AudioObjectPropertyAddress *)__p, 0, 0LL, 8u, inData);
  unint64_t v22 = sub_287328((unsigned __int8 *)__dst);
  if (HIDWORD(v22))
  {
    *(_DWORD *)(a1 + 312) = v22;
    *(_BYTE *)(a1 + 316) = 1;
  }

  else if (*(_BYTE *)(a1 + 316))
  {
    *(_BYTE *)(a1 + 316) = 0;
  }

  if (SHIBYTE(v32) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_1D716C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, void *a20, uint64_t a21, int a22, __int16 a23, char a24, char a25)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D71E4(int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, char *__format, ...)
{
  LODWORD(__src[0]) = a1;
  __src[1] = a2;
  __src[2] = a3;
  LODWORD(__src[3]) = a4;
  __src[4] = a5;
  vsnprintf((char *)&__src[5], 0x100uLL, __format, va);
  sub_92104();
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*caulk::alloc::realtime_safe_resource + 16LL))( caulk::alloc::realtime_safe_resource,  320LL,  8LL);
  *(void *)(v6 + 8) = 0LL;
  *(_DWORD *)(v6 + 16) = 0;
  memcpy((void *)(v6 + 24), __src, 0x128uLL);
  *(void *)uint64_t v6 = &off_47AF98;
  return caulk::concurrent::messenger::enqueue( (caulk::concurrent::messenger *)&unk_4A9D88,  (caulk::concurrent::message *)v6);
}

uint64_t sub_1D72C0(_DWORD *a1)
{
  if (a1[1] == 1986224492) {
    return 1LL;
  }
  int v1 = a1[3];
  if (v1 == 1668576377 || v1 == 1668703084) {
    return 1LL;
  }
  int v4 = a1[4];
  uint64_t result = 1LL;
  if (v4 <= 1987077986)
  {
    if (v4 == 1768057203) {
      return result;
    }
    int v5 = 1919776355;
    goto LABEL_14;
  }

  if (v4 != 1987077987 && v4 != 1987081833)
  {
    int v5 = 1987081839;
LABEL_14:
    if (v4 != v5) {
      return 0LL;
    }
  }

  return result;
}

void sub_1D7370(caulk::concurrent::message *a1)
{
}

uint64_t sub_1D7384(caulk::concurrent::message *this)
{
  int v2 = *((_DWORD *)this + 6);
  switch(v2)
  {
    case 1:
      int v3 = (os_log_t *)*((void *)this + 4);
      os_log_t v4 = *v3;
      if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
      {
        uint64_t v5 = *((void *)this + 5);
        int v6 = *((_DWORD *)this + 12);
        uint64_t v7 = *((void *)this + 7);
        int v38 = 136316418;
        std::string::size_type v39 = "VirtualAudioQueue.h";
        __int16 v40 = 1024;
        int v41 = 163;
        __int16 v42 = 2080;
        uint64_t v43 = v5;
        __int16 v44 = 1024;
        int v45 = v6;
        __int16 v46 = 2080;
        uint64_t v47 = v7;
        __int16 v48 = 2080;
        __int16 v49 = (char *)this + 64;
        BOOL v8 = "%25s:%-5d %s:%d:%s: %s";
        uint64_t v9 = v4;
        os_log_type_t v10 = OS_LOG_TYPE_ERROR;
        goto LABEL_26;
      }

      break;
    case 2:
      uint64_t v14 = (os_log_t *)*((void *)this + 4);
      os_log_t v15 = *v14;
      if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = *((void *)this + 5);
        int v17 = *((_DWORD *)this + 12);
        uint64_t v18 = *((void *)this + 7);
        int v38 = 136316418;
        std::string::size_type v39 = "VirtualAudioQueue.h";
        __int16 v40 = 1024;
        int v41 = 166;
        __int16 v42 = 2080;
        uint64_t v43 = v16;
        __int16 v44 = 1024;
        int v45 = v17;
        __int16 v46 = 2080;
        uint64_t v47 = v18;
        __int16 v48 = 2080;
        __int16 v49 = (char *)this + 64;
        BOOL v8 = "%25s:%-5d %s:%d:%s: %s";
        goto LABEL_14;
      }

      break;
    case 3:
      unsigned int v19 = (os_log_t *)*((void *)this + 4);
      os_log_t v15 = *v19;
      if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v20 = *((void *)this + 5);
        int v21 = *((_DWORD *)this + 12);
        uint64_t v22 = *((void *)this + 7);
        int v38 = 136316418;
        std::string::size_type v39 = "VirtualAudioQueue.h";
        __int16 v40 = 1024;
        int v41 = 169;
        __int16 v42 = 2080;
        uint64_t v43 = v20;
        __int16 v44 = 1024;
        int v45 = v21;
        __int16 v46 = 2080;
        uint64_t v47 = v22;
        __int16 v48 = 2080;
        __int16 v49 = (char *)this + 64;
        BOOL v8 = "%25s:%-5d %s:%d:%s: %s";
LABEL_14:
        uint64_t v9 = v15;
        os_log_type_t v10 = OS_LOG_TYPE_DEFAULT;
        goto LABEL_26;
      }

      break;
    case 4:
      BOOL v23 = (os_log_t *)*((void *)this + 4);
      os_log_t v24 = *v23;
      if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_INFO))
      {
        uint64_t v25 = *((void *)this + 5);
        int v26 = *((_DWORD *)this + 12);
        uint64_t v27 = *((void *)this + 7);
        int v38 = 136316418;
        std::string::size_type v39 = "VirtualAudioQueue.h";
        __int16 v40 = 1024;
        int v41 = 171;
        __int16 v42 = 2080;
        uint64_t v43 = v25;
        __int16 v44 = 1024;
        int v45 = v26;
        __int16 v46 = 2080;
        uint64_t v47 = v27;
        __int16 v48 = 2080;
        __int16 v49 = (char *)this + 64;
        BOOL v8 = "%25s:%-5d %s:%d:%s: %s";
        uint64_t v9 = v24;
        os_log_type_t v10 = OS_LOG_TYPE_INFO;
        goto LABEL_26;
      }

      break;
    case 5:
      uint64_t v28 = (os_log_t *)*((void *)this + 4);
      os_log_t v29 = *v28;
      if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v30 = *((void *)this + 5);
        int v31 = *((_DWORD *)this + 12);
        uint64_t v32 = *((void *)this + 7);
        int v38 = 136316418;
        std::string::size_type v39 = "VirtualAudioQueue.h";
        __int16 v40 = 1024;
        int v41 = 174;
        __int16 v42 = 2080;
        uint64_t v43 = v30;
        __int16 v44 = 1024;
        int v45 = v31;
        __int16 v46 = 2080;
        uint64_t v47 = v32;
        __int16 v48 = 2080;
        __int16 v49 = (char *)this + 64;
        BOOL v8 = "%25s:%-5d %s:%d:%s: %s";
        goto LABEL_25;
      }

      break;
    case 6:
      uint64_t v33 = *((void *)this + 4);
      if ((*(_BYTE *)(v33 + 8) & 1) != 0)
      {
        os_log_t v29 = *(os_log_t *)v33;
        if (*(void *)v33)
        {
          if (os_log_type_enabled(*(os_log_t *)v33, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v34 = *((void *)this + 5);
            int v35 = *((_DWORD *)this + 12);
            uint64_t v36 = *((void *)this + 7);
            int v38 = 136316418;
            std::string::size_type v39 = "VirtualAudioQueue.h";
            __int16 v40 = 1024;
            int v41 = 177;
            __int16 v42 = 2080;
            uint64_t v43 = v34;
            __int16 v44 = 1024;
            int v45 = v35;
            __int16 v46 = 2080;
            uint64_t v47 = v36;
            __int16 v48 = 2080;
            __int16 v49 = (char *)this + 64;
            BOOL v8 = "%25s:%-5d %s:%d:%s: %s";
LABEL_25:
            uint64_t v9 = v29;
            os_log_type_t v10 = OS_LOG_TYPE_DEBUG;
LABEL_26:
            uint32_t v13 = 54;
            goto LABEL_27;
          }
        }
      }

      break;
    case 7:
      break;
    default:
      uint64_t v11 = (os_log_t *)*((void *)this + 4);
      os_log_t v12 = *v11;
      if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
      {
        int v38 = 136315650;
        std::string::size_type v39 = "VirtualAudioQueue.h";
        __int16 v40 = 1024;
        int v41 = 181;
        __int16 v42 = 1024;
        LODWORD(v43) = v2;
        BOOL v8 = "%25s:%-5d va::VirtualAudioQueue::SendLogMsg unknown priority = %d";
        uint64_t v9 = v12;
        os_log_type_t v10 = OS_LOG_TYPE_ERROR;
        uint32_t v13 = 24;
LABEL_27:
        _os_log_impl(&dword_0, v9, v10, v8, (uint8_t *)&v38, v13);
      }

      break;
  }

  caulk::concurrent::message::~message(this);
  return (*(uint64_t (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*caulk::alloc::realtime_safe_resource
                                                                                           + 24LL))( caulk::alloc::realtime_safe_resource,  this,  320LL,  8LL);
}

void sub_1D7824(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

void sub_1D7830(id a1)
{
  int v1 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v1 || (int v1 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1)) != 0LL)
  {
    off_49D068 = dlsym(v1, "AudioIssueDetectorCreate");
    off_49D070 = dlsym(v1, "AudioIssueDetectorInitialize");
    off_49D078 = dlsym(v1, "AudioIssueDetectorDispose");
    qword_49D080 = (uint64_t)dlsym(v1, "AudioIssueDetectorSetNodeFormat");
    off_49D088 = dlsym(v1, "AudioIssueDetectorSetNodeFormatWithDirection");
    qword_49D090 = (uint64_t)dlsym(v1, "AudioIssueDetectorReset");
    off_49D098 = (uint64_t (*)(void, void, void, void, void, void))dlsym( v1,  "AudioIssueDetectorAnalyzeBuffer");
    off_49D0A0 = dlsym(v1, "AudioIssueDetectorUpdateReportingSessions");
    qword_49D0A8 = (uint64_t)dlsym(v1, "AudioIssueDetectorRemoveNode");
    qword_49D0B0 = (uint64_t)dlsym(v1, "AudioIssueDetectorSetUplinkMute");
    qword_49D0B8 = (uint64_t)dlsym(v1, "AudioIssueDetectorSetDownlinkVolume");
    qword_49D0C0 = (uint64_t)dlsym(v1, "AudioIssueDetectorSetRouteSpecificDownlinkGainAdjustment");
    off_49D0C8 = dlsym(v1, "AudioIssueDetectorSetSmartCaseMicMute");
  }

  int v2 = dlopen("/System/Library/Frameworks/AudioToolbox.framework/libAudioDSP.dylib", 1);
  if (v2)
  {
    int v3 = (void (*)(void))dlsym(v2, "RegisterAudioUnits_Analyzer");
    if (v3) {
      v3();
    }
  }

void *sub_1D79E8()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_4750B8;
  return result;
}

void sub_1D7A0C(uint64_t a1, void *a2)
{
  *a2 = &off_4750B8;
}

uint64_t sub_1D7A24()
{
  return 1LL;
}

double sub_1D7A2C(double *a1, unint64_t a2)
{
  if (!a1) {
LABEL_7:
  }
    sub_8F9A4("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      unint64_t v2 = *((void *)a1 + 4);
      if (v2 <= a2) {
        break;
      }
      a1 = *(double **)a1;
      if (!a1) {
        goto LABEL_7;
      }
    }

    if (v2 >= a2) {
      return a1[5];
    }
    a1 = (double *)*((void *)a1 + 1);
    if (!a1) {
      goto LABEL_7;
    }
  }

uint64_t sub_1D7A74(uint64_t a1)
{
  if (sub_1D72C0((_DWORD *)a1))
  {
    sub_1CB234(1);
    int v3 = v2;
    sub_1CB234(2);
    unsigned int v5 = v4;
    sub_1CB234(3);
    int v7 = v6;
    uint64_t v8 = sub_138E8(16);
    if ((*(_BYTE *)(v8 + 8) & 1) != 0)
    {
      uint64_t v9 = *(os_log_s **)v8;
      if (*(void *)v8)
      {
        if (os_log_type_enabled(*(os_log_t *)v8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v62 = "AggregateDevice.cpp";
          __int16 v63 = 1024;
          int v64 = 569;
          _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Configuring stream capture settings for call-like configuration",  buf,  0x12u);
        }
      }
    }

    uint64_t v10 = sub_138E8(16);
    if ((*(_BYTE *)(v10 + 8) & 1) != 0)
    {
      uint64_t v11 = *(os_log_s **)v10;
      if (*(void *)v10)
      {
        if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
        {
          os_log_t v12 = "is NOT";
          uint64_t v62 = "AggregateDevice.cpp";
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          if (v3) {
            os_log_t v12 = "is";
          }
          __int16 v63 = 1024;
          int v64 = 571;
          __int16 v65 = 2080;
          __int16 v66 = v12;
          _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d in-call VA stream capture %s allowed", buf, 0x1Cu);
        }
      }
    }

    uint64_t v13 = 14LL;
    if (!*(_BYTE *)(a1 + 36)) {
      uint64_t v13 = 10LL;
    }
    if (v3) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0LL;
    }
    uint64_t v15 = sub_138E8(16);
    if ((*(_BYTE *)(v15 + 8) & 1) != 0)
    {
      uint64_t v16 = *(os_log_s **)v15;
      if (*(void *)v15)
      {
        if (os_log_type_enabled(*(os_log_t *)v15, OS_LOG_TYPE_DEBUG))
        {
          int v17 = "is NOT";
          uint64_t v62 = "AggregateDevice.cpp";
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          if (v5) {
            int v17 = "is";
          }
          __int16 v63 = 1024;
          int v64 = 581;
          __int16 v65 = 2080;
          __int16 v66 = v17;
          _os_log_impl(&dword_0, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d in-call HAL stream capture %s allowed", buf, 0x1Cu);
        }
      }
    }

    uint64_t v18 = sub_138E8(16);
    uint64_t v19 = v14 | v5;
    if ((*(_BYTE *)(v18 + 8) & 1) != 0)
    {
      uint64_t v20 = *(os_log_s **)v18;
      if (*(void *)v18)
      {
        if (os_log_type_enabled(*(os_log_t *)v18, OS_LOG_TYPE_DEBUG))
        {
          int v21 = "is NOT";
          uint64_t v62 = "AggregateDevice.cpp";
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          if (v7) {
            int v21 = "is";
          }
          __int16 v63 = 1024;
          int v64 = 587;
          __int16 v65 = 2080;
          __int16 v66 = v21;
          _os_log_impl(&dword_0, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d ANC capture %s allowed", buf, 0x1Cu);
        }
      }
    }

    if (v7) {
      uint64_t v22 = v19 | 0x10;
    }
    else {
      uint64_t v22 = v19;
    }
    goto LABEL_88;
  }

  int v23 = *(_DWORD *)(a1 + 16);
  if (v23 != 1986556788 && v23 != 1987211117 && v23 != 1987208039)
  {
    if (*(_BYTE *)a1 || *(_DWORD *)(a1 + 4) == 1986224492)
    {
      uint64_t v22 = 0LL;
    }

    else
    {
      int v47 = *(_DWORD *)(a1 + 12);
      BOOL v48 = sub_14DB2C();
      if (v47 == 1667785079) {
        __int16 v49 = "EnableFlickerSensorHALMediaMonitor";
      }
      else {
        __int16 v49 = "EnableHALMediaMonitor";
      }
      int v50 = sub_14DE1C(v49);
      int v51 = v50;
      if (v48) {
        uint64_t v22 = 6LL;
      }
      else {
        uint64_t v22 = 0LL;
      }
      uint64_t v52 = sub_138E8(16);
      if ((*(_BYTE *)(v52 + 8) & 1) != 0)
      {
        unint64_t v53 = *(os_log_s **)v52;
        if (*(void *)v52)
        {
          if (os_log_type_enabled(*(os_log_t *)v52, OS_LOG_TYPE_DEBUG))
          {
            int v54 = v48 ? "is" : "is NOT";
            sub_33464(&__p, (unsigned int *)(a1 + 4));
            __int16 v55 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            uint64_t v62 = "AggregateDevice.cpp";
            __int16 v63 = 1024;
            int v64 = 646;
            __int16 v65 = 2080;
            __int16 v66 = v54;
            __int16 v67 = 2080;
            v68[0] = v55;
            _os_log_impl( &dword_0,  v53,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d general VA media capture %s allowed for vad '%s'",  buf,  0x26u);
          }
        }
      }

      uint64_t v56 = sub_138E8(16);
      if ((*(_BYTE *)(v56 + 8) & 1) != 0)
      {
        __int16 v57 = *(os_log_s **)v56;
        if (*(void *)v56)
        {
          if (os_log_type_enabled(*(os_log_t *)v56, OS_LOG_TYPE_DEBUG))
          {
            unint64_t v58 = v51 ? "is" : "is NOT";
            sub_33464(&__p, (unsigned int *)(a1 + 4));
            __int16 v59 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            uint64_t v62 = "AggregateDevice.cpp";
            __int16 v63 = 1024;
            int v64 = 648;
            __int16 v65 = 2080;
            __int16 v66 = v58;
            __int16 v67 = 2080;
            v68[0] = v59;
            _os_log_impl( &dword_0,  v57,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d general HAL media capture %s allowed for vad '%s'",  buf,  0x26u);
          }
        }
      }
    }

    goto LABEL_88;
  }

  if (MGGetBoolAnswer(@"DeviceSupportsAOP") && sub_14DB2C())
  {
    int v26 = 1;
  }

  else
  {
    CFPreferencesAppSynchronize(@"com.apple.audio.virtualaudio");
    *(_DWORD *)AudioObjectPropertyAddress buf = 0;
    BOOL v27 = sub_14B98C(@"CaptureBorealis", @"com.apple.audio.virtualaudio", buf);
    int v28 = *(_DWORD *)buf;
    if (*(_DWORD *)buf) {
      int v26 = v27;
    }
    else {
      int v26 = 0;
    }
    if (v27)
    {
      os_log_t v29 = (os_log_t *)sub_138E8(13);
      uint64_t v30 = *v29;
      if (*v29)
      {
        if (os_log_type_enabled(*v29, OS_LOG_TYPE_DEFAULT))
        {
          int v31 = "Dis";
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          uint64_t v62 = "RunTimeDefaults.cpp";
          __int16 v63 = 1024;
          int v64 = 1497;
          __int16 v66 = "CaptureBorealis";
          __int16 v65 = 2080;
          if (v26) {
            int v31 = "En";
          }
          __int16 v67 = 1024;
          LODWORD(v68[0]) = v28;
          WORD2(v68[0]) = 2080;
          *(void *)((char *)v68 + 6) = v31;
          _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Defaults key %s was defined to %d. %sabling VA Borealis capture.",  buf,  0x2Cu);
        }
      }
    }
  }

  if (!MGGetBoolAnswer(@"DeviceSupportsAOP"))
  {
    BOOL v32 = sub_14DCE4();
    if (v26) {
      uint64_t v22 = 6LL;
    }
    else {
      uint64_t v22 = 0LL;
    }
    if (!v32) {
      goto LABEL_75;
    }
LABEL_61:
    else {
      int v33 = sub_14DCE4();
    }
    int v34 = 1;
    goto LABEL_76;
  }

  if ((int)sub_14DE1C("EnableHALMediaMonitor") >= 1)
  {
    if (v26) {
      uint64_t v22 = 6LL;
    }
    else {
      uint64_t v22 = 0LL;
    }
    goto LABEL_61;
  }

  BOOL v35 = sub_14DCE4();
  if (v26) {
    uint64_t v22 = 6LL;
  }
  else {
    uint64_t v22 = 0LL;
  }
  if (v35) {
    goto LABEL_61;
  }
LABEL_75:
  int v34 = 0;
LABEL_76:
  uint64_t v36 = sub_138E8(16);
  if ((*(_BYTE *)(v36 + 8) & 1) != 0)
  {
    __int128 v37 = *(os_log_s **)v36;
    if (*(void *)v36)
    {
      if (os_log_type_enabled(*(os_log_t *)v36, OS_LOG_TYPE_DEBUG))
      {
        int v38 = "is NOT";
        uint64_t v62 = "AggregateDevice.cpp";
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        if (v26) {
          int v38 = "is";
        }
        __int16 v63 = 1024;
        int v64 = 618;
        __int16 v65 = 2080;
        __int16 v66 = v38;
        _os_log_impl(&dword_0, v37, OS_LOG_TYPE_DEBUG, "%25s:%-5d VA Borealis capture %s allowed", buf, 0x1Cu);
      }
    }
  }

  uint64_t v39 = sub_138E8(16);
  if ((*(_BYTE *)(v39 + 8) & 1) != 0)
  {
    __int16 v40 = *(os_log_s **)v39;
    if (*(void *)v39)
    {
      if (os_log_type_enabled(*(os_log_t *)v39, OS_LOG_TYPE_DEBUG))
      {
        int v41 = "is NOT";
        uint64_t v62 = "AggregateDevice.cpp";
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        if (v34) {
          int v41 = "is";
        }
        __int16 v63 = 1024;
        int v64 = 619;
        __int16 v65 = 2080;
        __int16 v66 = v41;
        _os_log_impl(&dword_0, v40, OS_LOG_TYPE_DEBUG, "%25s:%-5d HAL Borealis capture %s allowed", buf, 0x1Cu);
      }
    }
  }

void sub_1D83C0(uint64_t *a1, uint64_t a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
  {
    sub_9D824(&v13, *(void *)(i + 16));
    uint64_t v6 = v13;
    unsigned int v5 = v14;
    if (v14)
    {
      p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
      do
        unint64_t v8 = __ldxr(p_shared_weak_owners);
      while (__stxr(v8 + 1, p_shared_weak_owners));
    }

    uint64_t v9 = operator new(0x20uLL);
    v9[2] = v6;
    void v9[3] = v5;
    uint64_t v10 = *a1;
    *uint64_t v9 = *a1;
    v9[1] = a1;
    *(void *)(v10 + 8) = v9;
    *a1 = (uint64_t)v9;
    ++a1[2];
    if (v5)
    {
      p_unsigned int shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        unint64_t v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }

void sub_1D849C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  sub_7A768((uint64_t)&a9);
  sub_85B80(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_1D84CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (qword_49D060 != -1) {
    dispatch_once(&qword_49D060, &stru_475088);
  }
  if (off_49D078) {
    off_49D078(v2);
  }
  int v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }

  return a1;
}

void sub_1D8544(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    int v3 = (const void *)v2[22];
    if (v3) {
      CFRelease(v3);
    }
    sub_AEF18((uint64_t)(v2 + 14));
    unsigned int v4 = (void *)v2[12];
    if (v4)
    {
      free(v4);
      v2[12] = 0LL;
    }

    unsigned int v5 = (void *)v2[7];
    if (v5)
    {
      v2[8] = v5;
      operator delete(v5);
    }

    sub_D0C14((uint64_t)(v2 + 2));
    operator delete(v2);
  }

void sub_1D85B8(caulk::concurrent::messenger **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    caulk::concurrent::messenger::~messenger(v2);
    operator delete(v3);
  }

uint64_t sub_1D85E4(uint64_t a1)
{
  *(void *)a1 = off_474E30;
  uint64_t v6 = (void **)(a1 + 240);
  sub_7A668(&v6);
  sub_32C8C(*(void **)(a1 + 224));
  sub_85B80((uint64_t *)(a1 + 184));
  sub_1D84CC(a1 + 144);
  sub_1D8544((void **)(a1 + 136), 0LL);
  sub_1D85B8((caulk::concurrent::messenger **)(a1 + 120));
  uint64_t v2 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  return sub_F3008(a1);
}

void sub_1D86D0(void *a1)
{
  int v1 = sub_1D9034(a1);
  operator delete(v1);
}

void sub_1D86E4(uint64_t a1)
{
  uint64_t v2 = sub_138E8(16);
  uint64_t v3 = sub_138E8(26);
  char v4 = 0;
  uint64_t v5 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v6 = *(void *)(v2 + 8);
  while (1)
  {
    uint64_t v7 = *(int *)&buf[4 * v5];
    char v8 = v4;
    if (((v6 & v7) != 0) != ((*(void *)(v3 + 8) & v7) != 0)) {
      break;
    }
    char v4 = 1;
    uint64_t v5 = 1LL;
    if ((v8 & 1) != 0)
    {
      if ((v6 & 1) == 0) {
        goto LABEL_15;
      }
      goto LABEL_9;
    }
  }

  if ((v6 & v7) == 0) {
    uint64_t v2 = v3;
  }
  if ((*(void *)(v2 + 8) & 1) != 0)
  {
LABEL_9:
    uint64_t v9 = *(os_log_s **)v2;
    if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      unsigned __int8 v10 = atomic_load((unsigned __int8 *)(a1 + 32));
      *(void *)&uint8_t buf[4] = "HapticDebugIODelegate.cpp";
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      if ((v10 & 1) != 0) {
        uint64_t v11 = "enabled";
      }
      else {
        uint64_t v11 = "disabled";
      }
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 91;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&_BYTE buf[20] = v11;
      _os_log_impl(&dword_0, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d Current enabled state is %s", buf, 0x1Cu);
    }
  }

void sub_1D8CB4( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 buf, __int128 a18)
{
  if (a2 == 1)
  {
    uint64_t v22 = __cxa_begin_catch(a1);
    atomic_store(0, v19);
    uint64_t v23 = (os_log_t *)sub_138E8(16);
    AudioObjectID v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = (*(uint64_t (**)(void *))(*(void *)v22 + 16LL))(v22);
      LODWORD(buf) = 136315650;
      *(void *)((char *)&buf + 4) = "HapticDebugIODelegate.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 120;
      WORD1(a18) = 2080;
      *(void *)((char *)&a18 + 4) = v25;
      _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Caught exception %s while configuring haptic debug captures",  (uint8_t *)&buf,  0x1Cu);
    }

    __cxa_end_catch();
    JUMPOUT(0x1D8B04LL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1D8E14(uint64_t result)
{
  int v1 = (unsigned int *)(result + 68);
  do
    unsigned int v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return result;
}

void sub_1D8E2C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)(a1 + 64));
  if ((v5 & 1) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 72);
    if (v6)
    {
      uint64_t v7 = sub_3977D0(v6, a4);
      if ((_DWORD)v7)
      {
        uint64_t v8 = v7;
        uint64_t v9 = (os_log_t *)sub_138E8(16);
        unsigned __int8 v10 = *v9;
        if (*v9)
        {
          if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
          {
            sub_2CA1C(__p, v8);
            uint64_t v11 = v17 >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            uint64_t v19 = "HapticDebugIODelegate.cpp";
            __int16 v20 = 1024;
            int v21 = 145;
            __int16 v22 = 1024;
            int v23 = v8;
            __int16 v24 = 2080;
            uint64_t v25 = v11;
            _os_log_impl(&dword_0, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d error writing buffer to file: %d %s", buf, 0x22u);
            if (v17 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }
    }
  }

  unsigned __int8 v12 = (unsigned int *)(a1 + 68);
  while (atomic_load((unsigned int *)(a1 + 68)))
  {
    do
      unsigned int v14 = __ldaxr(v12);
    while (__stlxr(v14 - 1, v12));
    sub_1D8F8C(a1);
  }

void sub_1D8F8C(uint64_t a1)
{
  int v1 = (unsigned int *)(a1 + 16);
  if (atomic_load((unsigned int *)(a1 + 16)))
  {
    sub_2215BC(a1);
    if (!atomic_load(v1))
    {
      unsigned __int8 v5 = (unsigned __int8 *)(a1 + 64);
      do
        unsigned __int8 v6 = __ldaxr(v5);
      while (__stlxr(0, v5));
      if ((v6 & 1) != 0)
      {
        uint64_t v7 = *(void *)(a1 + 72);
        if (v7)
        {
          uint64_t v8 = *(void *)(v7 + 8);
          if (v8)
          {
            (*(void (**)(uint64_t))(*(void *)v8 + 32LL))(v8);
            uint64_t v7 = *(void *)(a1 + 72);
          }

          uint64_t v9 = *(void *)(a1 + 80);
          *(void *)(a1 + 72) = 0LL;
          uint64_t v10 = *(void *)(v9 + 24);
          *(void *)(v9 + 24) = v7;
          if (v10) {
            (*(void (**)(uint64_t))(*(void *)v10 + 8LL))(v10);
          }
          uint64_t v11 = *(caulk::concurrent::message **)(a1 + 80);
          sub_92104();
          caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&unk_4A9D88, v11);
        }
      }
    }
  }

void *sub_1D9034(void *a1)
{
  unsigned int v2 = (os_log_t *)sub_138E8(16);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315394;
    uint64_t v8 = "HapticDebugIODelegate.cpp";
    __int16 v9 = 1024;
    int v10 = 57;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_INFO, "%25s:%-5d Deleting haptic debug delegate", (uint8_t *)&v7, 0x12u);
  }

  uint64_t v4 = a1[10];
  a1[10] = 0LL;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8LL))(v4);
  }
  uint64_t v5 = a1[9];
  a1[9] = 0LL;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8LL))(v5);
  }
  sub_68314(a1 + 5);
  *a1 = off_481AE0;
  sub_904DC(a1 + 3);
  sub_904B0(a1 + 1);
  return a1;
}

void sub_1D914C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

uint64_t sub_1D9158(uint64_t a1)
{
  *(void *)a1 = off_481AE0;
  sub_904DC((uint64_t *)(a1 + 24));
  sub_904B0((uint64_t *)(a1 + 8));
  return a1;
}

void sub_1D91A0(void *a1)
{
  *(void *)a1 = off_481AE0;
  sub_904DC((uint64_t *)a1 + 3);
  sub_904B0((uint64_t *)a1 + 1);
  operator delete(a1);
}

void sub_1D91E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1) {
    goto LABEL_6;
  }
  uint64_t v3 = (os_log_t *)sub_138E8(16);
  uint64_t v4 = *v3;
  if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136315394;
    uint64_t v8 = "HapticDebugIODelegate.cpp";
    __int16 v9 = 1024;
    int v10 = 203;
    _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d HapticDebugDelegate not instantiated yet",  (uint8_t *)&v7,  0x12u);
  }

  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
LABEL_6:
    uint64_t v5 = (unsigned int *)(v1 + 68);
    do
      unsigned int v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }

void sub_1D92C8(void **a1)
{
  unsigned int v2 = *a1;
  *a1 = 0LL;
  if (v2)
  {
    uint64_t v3 = sub_1D9034(v2);
    operator delete(v3);
  }

uint64_t sub_1D92F4(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a7)
  {
    uint64_t v8 = (os_log_t *)sub_138E8(13);
    __int16 v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      unsigned __int8 v12 = "HapticDebugIODelegate.cpp";
      __int16 v13 = 1024;
      int v14 = 130;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v11,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  sub_1D8E2C(a7, a2, (uint64_t)a3, a3);
  return 0LL;
}

void sub_1D93F4(_Unwind_Exception *exception_object)
{
}

void sub_1D9410(caulk::concurrent::message *this)
{
  *(void *)this = off_475160;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  caulk::concurrent::message::~message(this);
}

void sub_1D9454(caulk::concurrent::message *this)
{
  *(void *)this = off_475160;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  caulk::concurrent::message::~message(this);
  operator delete(v3);
}

uint64_t sub_1D949C(uint64_t a1)
{
  uint64_t v2 = (os_log_t *)sub_138E8(16);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315394;
    unsigned int v6 = "HapticDebugIOMonitor.h";
    __int16 v7 = 1024;
    int v8 = 61;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Closing Haptic IO Monitor", (uint8_t *)&v5, 0x12u);
  }

  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    *(void *)(a1 + 24) = 0LL;
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }

  return result;
}

void sub_1D9570(AudioObjectID a1, unsigned int **a2)
{
  uint64_t v4 = sub_138E8(26);
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
  {
    int v5 = *(os_log_s **)v4;
    if (*(void *)v4)
    {
      if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
      {
        sub_8F640((std::string *)&v110, *a2, a2[1]);
        unsigned int v6 = v110.__m_.__opaque[15] >= 0 ? &v110 : (std::mutex *)v110.__m_.__sig;
        buf.AudioObjectPropertySelector mSelector = 136315650;
        *(void *)&buf.mScope = "HapticDebugIODelegate.cpp";
        __int16 v100 = 1024;
        int v101 = 30;
        __int16 v102 = 2080;
        *(void *)uint64_t v103 = v6;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Setting input data sources: [%s]",  (uint8_t *)&buf,  0x1Cu);
        if (v110.__m_.__opaque[15] < 0) {
          operator delete((void *)v110.__m_.__sig);
        }
      }
    }
  }

  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x696E707473737263LL;
  inAddress.mElement = 0;
  uint64_t v7 = sub_138E8(13);
  if ((*(_BYTE *)(v7 + 8) & 1) != 0)
  {
    int v8 = *(os_log_s **)v7;
    if (*(void *)v7)
    {
      if (os_log_type_enabled(*(os_log_t *)v7, OS_LOG_TYPE_DEBUG))
      {
        v109.__cv_.__uint64_t sig = *(void *)&inAddress.mSelector;
        *(_DWORD *)v109.__cv_.__opaque = inAddress.mElement;
        sub_613AC((uint64_t)&v110, (unsigned int *)&v109);
        __int16 v9 = v110.__m_.__opaque[15] >= 0 ? &v110 : (std::mutex *)v110.__m_.__sig;
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        __int16 v100 = 1024;
        int v101 = 166;
        __int16 v102 = 2080;
        *(void *)uint64_t v103 = v9;
        *(_WORD *)&v103[8] = 1024;
        *(_DWORD *)&v103[10] = a1;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to synchronize the property %s on id %u.",  (uint8_t *)&buf,  0x22u);
        if (v110.__m_.__opaque[15] < 0) {
          operator delete((void *)v110.__m_.__sig);
        }
      }
    }
  }

  AudioObjectPropertyAddress v96 = inAddress;
  AudioObjectID v95 = a1;
  int v97 = 0;
  uint64_t v98 = 0LL;
  sub_1DA2C4((uint64_t)&v110, (uint64_t)&v95);
  if (*(_DWORD *)&v110.__m_.__opaque[16]) {
    goto LABEL_18;
  }
  uint64_t v92 = 0LL;
  uint64_t v93 = 0LL;
  uint64_t v94 = 0LL;
  sub_7A5B8( &v92,  (const void *)v110.__m_.__sig,  *(uint64_t *)v110.__m_.__opaque,  (*(void *)v110.__m_.__opaque - v110.__m_.__sig) >> 2);
  uint64_t v89 = 0LL;
  char v90 = 0LL;
  uint64_t v91 = 0LL;
  sub_7A5B8(&v89, *a2, (uint64_t)a2[1], a2[1] - *a2);
  int v21 = v92;
  __int16 v22 = v89;
  if (v93 - v92 != v90 - v89)
  {
    BOOL v23 = 0;
    if (!v89) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }

  BOOL v23 = memcmp(v92, v89, v93 - v92) == 0;
  if (v22)
  {
LABEL_43:
    char v90 = v22;
    operator delete(v22);
  }

void sub_1DA19C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, void *a46, uint64_t a47, uint64_t a48, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1DA2C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a2 + 4);
  *(void *)&buf[0].AudioObjectPropertySelector mSelector = *(void *)(a2 + 4);
  UInt32 v5 = *(_DWORD *)(a2 + 16);
  buf[0].mElement = *(_DWORD *)(a2 + 12);
  sub_90764((uint64_t)&v21, (AudioObjectID *)a2, buf, v5, *(const void **)(a2 + 24));
  uint64_t v6 = v21;
  if (v21)
  {
    uint64_t v7 = (os_log_t *)sub_138E8(13);
    int v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v19, v6);
        int v9 = v20;
        uint64_t v10 = (void **)v19[0];
        uint64_t v15 = *v4;
        int v16 = *((_DWORD *)v4 + 2);
        sub_613AC((uint64_t)__p, (unsigned int *)&v15);
        int v11 = v19;
        if (v9 < 0) {
          int v11 = v10;
        }
        unsigned __int8 v12 = (void **)__p[0];
        AudioObjectID v13 = *(_DWORD *)a2;
        if (v18 >= 0) {
          unsigned __int8 v12 = __p;
        }
        buf[0].AudioObjectPropertySelector mSelector = 136316418;
        *(void *)&buf[0].mScope = "HALPropertySynchronizer.h";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 176;
        HIWORD(buf[1].mScope) = 1024;
        buf[1].mElement = v6;
        __int16 v26 = 2080;
        int v27 = v11;
        __int16 v28 = 2080;
        unint64_t v29 = v12;
        __int16 v30 = 1024;
        AudioObjectID v31 = v13;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) reading property data for property %s on id %u.",  (uint8_t *)buf,  0x32u);
        if (v18 < 0) {
          operator delete(__p[0]);
        }
        if (v20 < 0) {
          operator delete(v19[0]);
        }
      }
    }
  }

  if (v24)
  {
    memset(buf, 0, sizeof(buf));
    sub_7A5B8(buf, v22, v23, (v23 - (uint64_t)v22) >> 2);
    uint64_t v14 = *(void *)&buf[1].mScope;
    *(_OWORD *)a1 = *(_OWORD *)&buf[0].mSelector;
    *(void *)(a1 + 16) = v14;
    *(_DWORD *)(a1 + 24) = v6;
    if (v22) {
      operator delete(v22);
    }
  }

  else
  {
    *(void *)a1 = 0LL;
    *(void *)(a1 + 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    *(_DWORD *)(a1 + 24) = v6;
  }

void sub_1DA4B8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, uint64_t a21, char a22)
{
  if (v23 < 0) {
    operator delete(v22);
  }
  if (a22)
  {
    if (__p) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(exception_object);
}

void sub_1DA4F4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1) {
    goto LABEL_6;
  }
  uint64_t v3 = (os_log_t *)sub_138E8(16);
  uint64_t v4 = *v3;
  if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
  {
    buf.AudioObjectPropertySelector mSelector = 136315394;
    *(void *)&buf.mScope = "HapticDebugIODelegate.cpp";
    __int16 v39 = 1024;
    *(_DWORD *)AudioObjectPropertyAddress __p = 191;
    _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d HapticDebugDelegate not instantiated yet",  (uint8_t *)&buf,  0x12u);
  }

  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
LABEL_6:
    if (!*(void *)(v1 + 56))
    {
      std::chrono::system_clock::time_point v33 = (os_log_t *)sub_138E8(13);
      uint64_t v34 = *v33;
      if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
      {
        buf.AudioObjectPropertySelector mSelector = 136315394;
        *(void *)&buf.mScope = "HapticDebugIODelegate.cpp";
        __int16 v39 = 1024;
        *(_DWORD *)AudioObjectPropertyAddress __p = 62;
        _os_log_impl( &dword_0,  v34,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&buf,  0x12u);
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }

    uint64_t v5 = v1 + 40;
    for (uint64_t i = *(void *)(v1 + 48); i != v5; uint64_t i = *(void *)(i + 8))
    {
      if (((*(uint64_t (**)(void))(**(void **)(i + 16) + 472LL))(*(void *)(i + 16)) & 1) != 0)
      {
        if (i != v5) {
          goto LABEL_16;
        }
        break;
      }
    }

    uint64_t v7 = (os_log_t *)sub_138E8(13);
    int v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      buf.AudioObjectPropertySelector mSelector = 136315394;
      *(void *)&buf.mScope = "HapticDebugIODelegate.cpp";
      __int16 v39 = 1024;
      *(_DWORD *)AudioObjectPropertyAddress __p = 69;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Cannot find master haptic debug device",  (uint8_t *)&buf,  0x12u);
    }

    uint64_t i = v1 + 40;
LABEL_16:
    uint64_t v9 = *(void *)(i + 16);
    AudioObjectID v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 120LL))(v9);
    strcpy((char *)&buf, "crsstpni");
    BYTE1(buf.mElement) = 0;
    HIWORD(buf.mElement) = 0;
    if (AudioObjectHasProperty(v10, &buf))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v9 + 480LL))(&v36, v9);
      if (v36 == v37)
      {
        uint64_t v18 = sub_138E8(16);
        uint64_t v19 = sub_138E8(26);
        char v20 = 0;
        uint64_t v21 = 0LL;
        *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002LL;
        uint64_t v22 = *(void *)(v18 + 8);
        while (1)
        {
          uint64_t v23 = *((int *)&buf.mSelector + v21);
          char v24 = v20;
          if (((v22 & v23) != 0) != ((*(void *)(v19 + 8) & v23) != 0)) {
            break;
          }
          char v20 = 1;
          uint64_t v21 = 1LL;
          if ((v24 & 1) != 0) {
            goto LABEL_46;
          }
        }

        if ((v22 & v23) == 0) {
          uint64_t v18 = v19;
        }
LABEL_46:
        BOOL v32 = *(os_log_s **)v18;
        if (v32 && os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
        {
          buf.AudioObjectPropertySelector mSelector = 136315394;
          *(void *)&buf.mScope = "HapticDebugIODelegate.cpp";
          __int16 v39 = 1024;
          *(_DWORD *)AudioObjectPropertyAddress __p = 79;
          _os_log_impl( &dword_0,  v32,  OS_LOG_TYPE_INFO,  "%25s:%-5d No valid input data sources found for this device",  (uint8_t *)&buf,  0x12u);
        }
      }

      else
      {
        uint64_t v11 = sub_138E8(16);
        uint64_t v12 = sub_138E8(26);
        char v13 = 0;
        uint64_t v14 = 0LL;
        *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002LL;
        uint64_t v15 = *(void *)(v11 + 8);
        while (1)
        {
          uint64_t v16 = *((int *)&buf.mSelector + v14);
          char v17 = v13;
          if (((v15 & v16) != 0) != ((*(void *)(v12 + 8) & v16) != 0)) {
            break;
          }
          char v13 = 1;
          uint64_t v14 = 1LL;
          if ((v17 & 1) != 0) {
            goto LABEL_28;
          }
        }

        if ((v15 & v16) == 0) {
          uint64_t v11 = v12;
        }
LABEL_28:
        uint64_t v25 = *(os_log_s **)v11;
        if (v25 && os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
        {
          sub_8F640(&v42, (unsigned int *)v36, v37);
          __int16 v26 = (v42.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v42 : (std::string *)v42.__r_.__value_.__r.__words[0];
          buf.AudioObjectPropertySelector mSelector = 136315650;
          *(void *)&buf.mScope = "HapticDebugIODelegate.cpp";
          __int16 v39 = 1024;
          *(_DWORD *)AudioObjectPropertyAddress __p = 83;
          *(_WORD *)&__p[4] = 2080;
          *(void *)&__p[6] = v26;
          _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_INFO,  "%25s:%-5d Setting input data sources: %s",  (uint8_t *)&buf,  0x1Cu);
        }

        AudioObjectPropertyElement v27 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 120LL))(v9);
        *(void *)&buf.AudioObjectPropertySelector mSelector = sub_1D9570;
        buf.mElement = v27;
        *(void *)&__p[10] = 0LL;
        uint64_t v41 = 0LL;
        *(void *)&__p[2] = 0LL;
        sub_7A5B8(&__p[2], v36, (uint64_t)v37, ((char *)v37 - (_BYTE *)v36) >> 2);
        __int16 v28 = (os_log_t *)sub_138E8(16);
        unint64_t v29 = *v28;
        if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v30 = atomic_load((unsigned int *)(v1 + 16));
          LODWORD(v42.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)v42.__r_.__value_.__r.__words + 4) = (std::string::size_type)"AggregateDevice_IODelegate.h";
          WORD2(v42.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&v42.__r_.__value_.__r.__words[1] + 6) = 46;
          WORD1(v42.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v42.__r_.__value_.__r.__words[2]) = v30;
          _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d executing function with device stopped. start count is %d",  (uint8_t *)&v42,  0x18u);
        }

        if (atomic_load((unsigned int *)(v1 + 16)))
        {
          if (sub_2219C8(v1))
          {
            (*(void (**)(AudioObjectID, unsigned int **))&buf.mSelector)( buf.mElement,  (unsigned int **)&__p[2]);
            sub_221F30(v1);
          }
        }

        else
        {
          (*(void (**)(AudioObjectID, unsigned int **))&buf.mSelector)( buf.mElement,  (unsigned int **)&__p[2]);
        }

        if (*(void *)&__p[2])
        {
          *(void *)&__p[10] = *(void *)&__p[2];
          operator delete(*(void **)&__p[2]);
        }
      }

      if (v36)
      {
        __int128 v37 = (unsigned int *)v36;
        operator delete(v36);
      }
    }
  }

void sub_1DAA68( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DAAD0(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    goto LABEL_6;
  }
  uint64_t v5 = (os_log_t *)sub_138E8(16);
  uint64_t v6 = *v5;
  if (*v5)
  {
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315394;
      int v8 = "HapticDebugIODelegate.cpp";
      __int16 v9 = 1024;
      int v10 = 216;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d HapticDebugDelegate not instantiated yet",  (uint8_t *)&v7,  0x12u);
    }
  }

  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
LABEL_6:
  }
    atomic_store(a2, (unsigned __int8 *)(v3 + 32));
}

void sub_1DABB4(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1E0794(a1);
  operator delete(v1);
}

BOOL sub_1DABC8(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  int mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1836414052)
  {
    if (mSelector > 1986290210)
    {
      BOOL v6 = mSelector == 1987013732;
      int v7 = 1986290211;
    }

    else
    {
      BOOL v6 = mSelector == 1836414053;
      int v7 = 1986229104;
    }

    BOOL v9 = v6 || mSelector == v7;
    if (v9 && a2->mElement == 6 && a2->mScope == 1869968496) {
      return 1LL;
    }
    goto LABEL_22;
  }

  BOOL result = 1LL;
  if (mSelector > 1685483629)
  {
    if (mSelector != 1685483630 && mSelector != 1835103844)
    {
LABEL_22:
      sub_1BB60((std::mutex *)a1);
      return AudioObjectHasProperty(*(_DWORD *)(a1 + 268), a2) != 0;
    }
  }

  else
  {
    if (mSelector != 1064725619)
    {
      if (mSelector == 1634759542) {
        return result;
      }
      goto LABEL_22;
    }

    return a2->mScope == 1869968496;
  }

  return result;
}

uint64_t sub_1DACF4(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  int mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1836414052)
  {
    if (mSelector > 1986290210)
    {
      if (mSelector == 1986290211)
      {
LABEL_18:
        if (a2->mElement != 6 || a2->mScope != 1869968496) {
          return sub_36854C(a1, a2);
        }
        return 0LL;
      }

      if (mSelector != 1987013732) {
        return sub_36854C(a1, a2);
      }
    }

    else if (mSelector != 1836414053)
    {
      if (mSelector != 1986229104) {
        return sub_36854C(a1, a2);
      }
      goto LABEL_18;
    }

    if (a2->mElement != 6 || a2->mScope != 1869968496) {
      return sub_36854C(a1, a2);
    }
    return 1LL;
  }

  uint64_t v3 = 1LL;
  if (mSelector > 1685483629)
  {
    if (mSelector == 1685483630) {
      return v3;
    }
    if (mSelector != 1835103844) {
      return sub_36854C(a1, a2);
    }
    return 0LL;
  }

  if (mSelector == 1064725619) {
    return 0LL;
  }
  if (mSelector != 1634759542) {
    return sub_36854C(a1, a2);
  }
  return v3;
}

uint64_t sub_1DAE08(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    uint64_t v11 = (os_log_t *)sub_138E8(13);
    uint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v19);
      char v13 = v22 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      char v24 = "Device_HPMic_Aspen.cpp";
      __int16 v25 = 1024;
      int v26 = 368;
      __int16 v27 = 2080;
      __int16 v28 = v13;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((a3 != 0) == (a4 == 0LL))
  {
    uint64_t v15 = (os_log_t *)sub_138E8(13);
    uint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v19);
      if (v22 >= 0) {
        char v17 = __p;
      }
      else {
        char v17 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      char v24 = "Device_HPMic_Aspen.cpp";
      __int16 v25 = 1024;
      int v26 = 369;
      __int16 v27 = 2080;
      __int16 v28 = v17;
      __int16 v29 = 1024;
      UInt32 v30 = a3;
      __int16 v31 = 2048;
      BOOL v32 = a4;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v18 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v18 = &off_4865A0;
    v18[2] = 561211770;
  }

  int mSelector = a2->mSelector;
  uint64_t result = 4LL;
  if ((int)a2->mSelector > 1836414052)
  {
    if (mSelector > 1986290210)
    {
      if (mSelector == 1986290211) {
        return 16LL;
      }
      int v10 = 1987013732;
    }

    else if (mSelector == 1836414053)
    {
      if (a2->mElement != 6) {
        return sub_21524(a1, a2, a3, a4);
      }
      int mSelector = a2->mScope;
      int v10 = 1869968496;
    }

    else
    {
      int v10 = 1986229104;
    }
  }

  else if (mSelector > 1685483629)
  {
    if (mSelector == 1685483630) {
      return result;
    }
    int v10 = 1835103844;
  }

  else
  {
    if (mSelector == 1064725619) {
      return result;
    }
    int v10 = 1634759542;
  }

  if (mSelector != v10) {
    return sub_21524(a1, a2, a3, a4);
  }
  return result;
}

void sub_1DB198( uint64_t a1, const AudioObjectPropertyAddress *a2, uint64_t a3, const void *a4, UInt32 *a5, float *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    BOOL v32 = (os_log_t *)sub_138E8(13);
    std::chrono::system_clock::time_point v33 = *v32;
    if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
    {
      uint64_t v100 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)&__p, (unsigned int *)&v100);
      uint64_t v34 = v103 >= 0 ? &__p : *(AudioObjectPropertyAddress **)&__p.mSelector;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_HPMic_Aspen.cpp";
      __int16 v105 = 1024;
      int v106 = 429;
      __int16 v107 = 2080;
      AudioObjectID v108 = (const char *)v34;
      _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v103 < 0) {
        operator delete(*(void **)&__p.mSelector);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0LL))
  {
    std::chrono::steady_clock::time_point v36 = (os_log_t *)sub_138E8(13);
    __int128 v37 = *v36;
    if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
    {
      uint64_t v100 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)&__p, (unsigned int *)&v100);
      int v38 = v103 >= 0 ? &__p : *(AudioObjectPropertyAddress **)&__p.mSelector;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "Device_HPMic_Aspen.cpp";
      __int16 v105 = 1024;
      int v106 = 430;
      __int16 v107 = 2080;
      AudioObjectID v108 = (const char *)v38;
      __int16 v109 = 1024;
      LODWORD(v110[0]) = a3;
      WORD2(v110[0]) = 2048;
      *(void *)((char *)v110 + 6) = a4;
      _os_log_impl( &dword_0,  v37,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v103 < 0) {
        operator delete(*(void **)&__p.mSelector);
      }
    }

    __int16 v39 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v39 = &off_4865A0;
    v39[2] = 561211770;
  }

  if (!a6)
  {
    __int16 v40 = (os_log_t *)sub_138E8(13);
    uint64_t v41 = *v40;
    if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
    {
      uint64_t v100 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)&__p, (unsigned int *)&v100);
      std::string v42 = v103 >= 0 ? &__p : *(AudioObjectPropertyAddress **)&__p.mSelector;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_HPMic_Aspen.cpp";
      __int16 v105 = 1024;
      int v106 = 431;
      __int16 v107 = 2080;
      AudioObjectID v108 = "outData";
      __int16 v109 = 2080;
      v110[0] = v42;
      _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
      if (v103 < 0) {
        operator delete(*(void **)&__p.mSelector);
      }
    }

    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v43 = __cxa_allocate_exception(0x10uLL);
    *(void *)std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v43 = &off_4865A0;
    v43[2] = 561211770;
  }

  int mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1836414052)
  {
    if (mSelector <= 1986290210)
    {
      if (mSelector == 1836414053)
      {
        UInt32 v26 = *a5;
        if (v26 != (*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4))
        {
          uint64_t v52 = (os_log_t *)sub_138E8(13);
          unint64_t v53 = *v52;
          if (*v52 && os_log_type_enabled(*v52, OS_LOG_TYPE_ERROR))
          {
            uint64_t v100 = *(void *)&a2->mSelector;
            AudioObjectPropertyElement mElement = a2->mElement;
            sub_613AC((uint64_t)&__p, (unsigned int *)&v100);
            int v54 = v103;
            uint64_t v55 = *(AudioObjectPropertyAddress **)&__p.mSelector;
            UInt32 v56 = *a5;
            int v57 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
            p_p = &__p;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "Device_HPMic_Aspen.cpp";
            if (v54 < 0) {
              p_p = v55;
            }
            __int16 v105 = 1024;
            int v106 = 493;
            __int16 v107 = 2080;
            AudioObjectID v108 = (const char *)p_p;
            __int16 v109 = 1024;
            LODWORD(v110[0]) = v56;
            WORD2(v110[0]) = 1024;
            *(_DWORD *)((char *)v110 + 6) = v57;
            _os_log_impl( &dword_0,  v53,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed : %u; required: %u).",
              buf,
              0x28u);
            if (v103 < 0) {
              operator delete(*(void **)&__p.mSelector);
            }
          }

          __int16 v59 = __cxa_allocate_exception(0x10uLL);
          *(void *)__int16 v59 = &off_4865A0;
          v59[2] = 561211770;
        }

        if (a2->mElement != 6 || a2->mScope != 1869968496) {
          goto LABEL_49;
        }
        __int16 v27 = (unsigned __int8 *)sub_1F4000();
        int v17 = sub_1F5650(v27);
      }

      else
      {
        if (mSelector != 1986229104) {
          goto LABEL_49;
        }
        UInt32 v15 = *a5;
        if (v15 != (*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4))
        {
          int v76 = (os_log_t *)sub_138E8(13);
          __int16 v77 = *v76;
          if (*v76 && os_log_type_enabled(*v76, OS_LOG_TYPE_ERROR))
          {
            uint64_t v100 = *(void *)&a2->mSelector;
            AudioObjectPropertyElement mElement = a2->mElement;
            sub_613AC((uint64_t)&__p, (unsigned int *)&v100);
            int v78 = v103;
            char v79 = *(AudioObjectPropertyAddress **)&__p.mSelector;
            UInt32 v80 = *a5;
            int v81 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
            uint64_t v82 = &__p;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "Device_HPMic_Aspen.cpp";
            if (v78 < 0) {
              uint64_t v82 = v79;
            }
            __int16 v105 = 1024;
            int v106 = 505;
            __int16 v107 = 2080;
            AudioObjectID v108 = (const char *)v82;
            __int16 v109 = 1024;
            LODWORD(v110[0]) = v80;
            WORD2(v110[0]) = 1024;
            *(_DWORD *)((char *)v110 + 6) = v81;
            _os_log_impl( &dword_0,  v77,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed : %u; required: %u).",
              buf,
              0x28u);
            if (v103 < 0) {
              operator delete(*(void **)&__p.mSelector);
            }
          }

          __int16 v83 = __cxa_allocate_exception(0x10uLL);
          *(void *)__int16 v83 = &off_4865A0;
          v83[2] = 561211770;
        }

        if (a2->mElement != 6 || a2->mScope != 1869968496) {
          goto LABEL_49;
        }
        uint64_t v16 = sub_1F4000();
        int v17 = sub_1F4DF8(v16);
      }

      *(_DWORD *)a6 = v17;
      return;
    }

    if (mSelector == 1986290211)
    {
      UInt32 v31 = *a5;
      if (v31 != (*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4))
      {
        uint64_t v60 = (os_log_t *)sub_138E8(13);
        char v61 = *v60;
        if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_ERROR))
        {
          uint64_t v100 = *(void *)&a2->mSelector;
          AudioObjectPropertyElement mElement = a2->mElement;
          sub_613AC((uint64_t)&__p, (unsigned int *)&v100);
          int v62 = v103;
          uint64_t v63 = *(AudioObjectPropertyAddress **)&__p.mSelector;
          UInt32 v64 = *a5;
          int v65 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
          char v66 = &__p;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "Device_HPMic_Aspen.cpp";
          if (v62 < 0) {
            char v66 = v63;
          }
          __int16 v105 = 1024;
          int v106 = 480;
          __int16 v107 = 2080;
          AudioObjectID v108 = (const char *)v66;
          __int16 v109 = 1024;
          LODWORD(v110[0]) = v64;
          WORD2(v110[0]) = 1024;
          *(_DWORD *)((char *)v110 + 6) = v65;
          _os_log_impl( &dword_0,  v61,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            buf,
            0x28u);
          if (v103 < 0) {
            operator delete(*(void **)&__p.mSelector);
          }
        }

        __int16 v67 = __cxa_allocate_exception(0x10uLL);
        *(void *)__int16 v67 = &off_4865A0;
        v67[2] = 561211770;
      }

      if (a2->mElement == 6 && a2->mScope == 1869968496)
      {
        *(_OWORD *)a6 = xmmword_4031A0;
        return;
      }

      goto LABEL_49;
    }

    if (mSelector != 1987013732) {
      goto LABEL_49;
    }
    UInt32 v22 = *a5;
    if (v22 != (*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4))
    {
      uint64_t v92 = (os_log_t *)sub_138E8(13);
      uint64_t v93 = *v92;
      if (*v92 && os_log_type_enabled(*v92, OS_LOG_TYPE_ERROR))
      {
        uint64_t v100 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_613AC((uint64_t)&__p, (unsigned int *)&v100);
        int v94 = v103;
        AudioObjectID v95 = *(AudioObjectPropertyAddress **)&__p.mSelector;
        UInt32 v96 = *a5;
        int v97 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
        uint64_t v98 = &__p;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "Device_HPMic_Aspen.cpp";
        if (v94 < 0) {
          uint64_t v98 = v95;
        }
        __int16 v105 = 1024;
        int v106 = 467;
        __int16 v107 = 2080;
        AudioObjectID v108 = (const char *)v98;
        __int16 v109 = 1024;
        LODWORD(v110[0]) = v96;
        WORD2(v110[0]) = 1024;
        *(_DWORD *)((char *)v110 + 6) = v97;
        _os_log_impl( &dword_0,  v93,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u ; required: %u).",
          buf,
          0x28u);
        if (v103 < 0) {
          operator delete(*(void **)&__p.mSelector);
        }
      }

      uint64_t v99 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v99 = &off_4865A0;
      CFTypeRef v99[2] = 561211770;
    }

    if (a2->mElement != 6 || a2->mScope != 1869968496)
    {
LABEL_49:
      sub_232A4(a1, a2, a3, a4, a5, a6);
      return;
    }

    uint64_t v23 = (float *)sub_1F4000();
    float v24 = (float)(sub_1F4F28(v23) * 100.0) + -100.0;
    goto LABEL_51;
  }

  if (mSelector <= 1685483629)
  {
    if (mSelector != 1064725619)
    {
      if (mSelector == 1634759542)
      {
        UInt32 v13 = *a5;
        if (v13 != (*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4))
        {
          uint64_t v68 = (os_log_t *)sub_138E8(13);
          uint64_t v69 = *v68;
          if (*v68 && os_log_type_enabled(*v68, OS_LOG_TYPE_ERROR))
          {
            uint64_t v100 = *(void *)&a2->mSelector;
            AudioObjectPropertyElement mElement = a2->mElement;
            sub_613AC((uint64_t)&__p, (unsigned int *)&v100);
            int v70 = v103;
            uint64_t v71 = *(AudioObjectPropertyAddress **)&__p.mSelector;
            UInt32 v72 = *a5;
            int v73 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
            uint64_t v74 = &__p;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "Device_HPMic_Aspen.cpp";
            if (v70 < 0) {
              uint64_t v74 = v71;
            }
            __int16 v105 = 1024;
            int v106 = 437;
            __int16 v107 = 2080;
            AudioObjectID v108 = (const char *)v74;
            __int16 v109 = 1024;
            LODWORD(v110[0]) = v72;
            WORD2(v110[0]) = 1024;
            *(_DWORD *)((char *)v110 + 6) = v73;
            _os_log_impl( &dword_0,  v69,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed : %u; required: %u).",
              buf,
              0x28u);
            if (v103 < 0) {
              operator delete(*(void **)&__p.mSelector);
            }
          }

          char v75 = __cxa_allocate_exception(0x10uLL);
          *(void *)char v75 = &off_4865A0;
          v75[2] = 561211770;
        }

        AudioObjectPropertyScope mScope = a2->mScope;
        *(_DWORD *)AudioObjectPropertyAddress buf = 1987013732;
        *(_DWORD *)&uint8_t buf[4] = mScope;
        *(_DWORD *)&_DWORD buf[8] = 0;
        (*(void (**)(uint64_t, _BYTE *, uint64_t, const void *, UInt32 *, float *))(*(void *)a1 + 40LL))( a1,  buf,  a3,  a4,  a5,  a6);
        return;
      }

      goto LABEL_49;
    }

    UInt32 v25 = *a5;
    if (v25 != (*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4))
    {
      std::chrono::steady_clock::time_point v44 = (os_log_t *)sub_138E8(13);
      std::chrono::system_clock::time_point v45 = *v44;
      if (*v44 && os_log_type_enabled(*v44, OS_LOG_TYPE_ERROR))
      {
        uint64_t v100 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_613AC((uint64_t)&__p, (unsigned int *)&v100);
        int v46 = v103;
        std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v47 = *(AudioObjectPropertyAddress **)&__p.mSelector;
        UInt32 v48 = *a5;
        int v49 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
        int v50 = &__p;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "Device_HPMic_Aspen.cpp";
        if (v46 < 0) {
          int v50 = v47;
        }
        __int16 v105 = 1024;
        int v106 = 523;
        __int16 v107 = 2080;
        AudioObjectID v108 = (const char *)v50;
        __int16 v109 = 1024;
        LODWORD(v110[0]) = v48;
        WORD2(v110[0]) = 1024;
        *(_DWORD *)((char *)v110 + 6) = v49;
        _os_log_impl( &dword_0,  v45,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u ; required: %u).",
          buf,
          0x28u);
        if (v103 < 0) {
          operator delete(*(void **)&__p.mSelector);
        }
      }

      int v51 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v51 = &off_4865A0;
      uint64_t v51[2] = 561211770;
    }

    int v21 = 1;
LABEL_31:
    *(_DWORD *)a6 = v21;
    return;
  }

  if (mSelector != 1685483630)
  {
    if (mSelector != 1835103844) {
      goto LABEL_49;
    }
    UInt32 v18 = *a5;
    if (v18 != (*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4))
    {
      double v84 = (os_log_t *)sub_138E8(13);
      uint64_t v85 = *v84;
      if (*v84 && os_log_type_enabled(*v84, OS_LOG_TYPE_ERROR))
      {
        uint64_t v100 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_613AC((uint64_t)&__p, (unsigned int *)&v100);
        int v86 = v103;
        uint64_t v87 = *(AudioObjectPropertyAddress **)&__p.mSelector;
        UInt32 v88 = *a5;
        int v89 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
        char v90 = &__p;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "Device_HPMic_Aspen.cpp";
        if (v86 < 0) {
          char v90 = v87;
        }
        __int16 v105 = 1024;
        int v106 = 446;
        __int16 v107 = 2080;
        AudioObjectID v108 = (const char *)v90;
        __int16 v109 = 1024;
        LODWORD(v110[0]) = v88;
        WORD2(v110[0]) = 1024;
        *(_DWORD *)((char *)v110 + 6) = v89;
        _os_log_impl( &dword_0,  v85,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u ; required: %u).",
          buf,
          0x28u);
        if (v103 < 0) {
          operator delete(*(void **)&__p.mSelector);
        }
      }

      uint64_t v91 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v91 = &off_4865A0;
      v91[2] = 561211770;
    }

    AudioObjectPropertyScope v20 = a2->mScope;
    AudioObjectPropertyElement v19 = a2->mElement;
    if (v19 == 6 && v20 == 1869968496)
    {
      int v21 = -1027131310;
      goto LABEL_31;
    }

    __p.int mSelector = 1986290211;
    __p.AudioObjectPropertyScope mScope = v20;
    __p.AudioObjectPropertyElement mElement = v19;
    LODWORD(v100) = 16;
    sub_232A4(a1, &__p, 0, 0LL, (UInt32 *)&v100, (float *)buf);
    float v24 = *(double *)buf;
LABEL_51:
    *a6 = v24;
    return;
  }

  __int16 v28 = (os_log_t *)sub_138E8(17);
  __int16 v29 = *v28;
  if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_DEFAULT))
  {
    sub_2CA1C(&__p, a2->mSelector);
    UInt32 v30 = v103 >= 0 ? &__p : *(AudioObjectPropertyAddress **)&__p.mSelector;
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "Device_HPMic_Aspen.cpp";
    __int16 v105 = 1024;
    int v106 = 518;
    __int16 v107 = 2080;
    AudioObjectID v108 = (const char *)v30;
    _os_log_impl(&dword_0, v29, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Property '%s' is write-only", buf, 0x1Cu);
    if (v103 < 0) {
      operator delete(*(void **)&__p.mSelector);
    }
  }

  *a5 = 0;
}

void sub_1DC158( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1DC194(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, float *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    uint64_t v82 = (os_log_t *)sub_138E8(13);
    __int16 v83 = *v82;
    if (*v82 && os_log_type_enabled(*v82, OS_LOG_TYPE_ERROR))
    {
      v155.__cv_.__uint64_t sig = *(void *)a2;
      *(_DWORD *)v155.__cv_.__opaque = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)&v156, (unsigned int *)&v155);
      double v84 = v156.__m_.__opaque[15] >= 0 ? &v156 : (std::mutex *)v156.__m_.__sig;
      buf.int mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_HPMic_Aspen.cpp";
      __int16 v146 = 1024;
      int v147 = 540;
      __int16 v148 = 2080;
      *(void *)unint64_t v149 = v84;
      _os_log_impl( &dword_0,  v83,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  (uint8_t *)&buf,  0x1Cu);
      if (v156.__m_.__opaque[15] < 0) {
        operator delete((void *)v156.__m_.__sig);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0LL))
  {
    int v86 = (os_log_t *)sub_138E8(13);
    uint64_t v87 = *v86;
    if (*v86 && os_log_type_enabled(*v86, OS_LOG_TYPE_ERROR))
    {
      v155.__cv_.__uint64_t sig = *(void *)a2;
      *(_DWORD *)v155.__cv_.__opaque = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)&v156, (unsigned int *)&v155);
      UInt32 v88 = v156.__m_.__opaque[15] >= 0 ? &v156 : (std::mutex *)v156.__m_.__sig;
      buf.int mSelector = 136316162;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_HPMic_Aspen.cpp";
      __int16 v146 = 1024;
      int v147 = 541;
      __int16 v148 = 2080;
      *(void *)unint64_t v149 = v88;
      *(_WORD *)&v149[8] = 1024;
      *(_DWORD *)&v149[10] = a3;
      *(_WORD *)&v149[14] = 2048;
      *(void *)&v149[16] = a4;
      _os_log_impl( &dword_0,  v87,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        (uint8_t *)&buf,
        0x2Cu);
      if (v156.__m_.__opaque[15] < 0) {
        operator delete((void *)v156.__m_.__sig);
      }
    }

    int v89 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v89 = &off_4865A0;
    v89[2] = 561211770;
  }

  if (!a6)
  {
    char v90 = (os_log_t *)sub_138E8(13);
    uint64_t v91 = *v90;
    if (*v90 && os_log_type_enabled(*v90, OS_LOG_TYPE_ERROR))
    {
      v155.__cv_.__uint64_t sig = *(void *)a2;
      *(_DWORD *)v155.__cv_.__opaque = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)&v156, (unsigned int *)&v155);
      uint64_t v92 = v156.__m_.__opaque[15] >= 0 ? &v156 : (std::mutex *)v156.__m_.__sig;
      buf.int mSelector = 136315906;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_HPMic_Aspen.cpp";
      __int16 v146 = 1024;
      int v147 = 542;
      __int16 v148 = 2080;
      *(void *)unint64_t v149 = "inData";
      *(_WORD *)&v149[8] = 2080;
      *(void *)&v149[10] = v92;
      _os_log_impl( &dword_0,  v91,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  (uint8_t *)&buf,  0x26u);
      if (v156.__m_.__opaque[15] < 0) {
        operator delete((void *)v156.__m_.__sig);
      }
    }

    uint64_t v93 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v93 = &off_4865A0;
    v93[2] = 561211770;
  }

  int v12 = *(_DWORD *)a2;
  if (*(int *)a2 <= 1685483629)
  {
    switch(v12)
    {
      case 1162046576:
        float v20 = *a6;
        int v21 = (os_log_t *)sub_138E8(17);
        UInt32 v22 = *v21;
        if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_DEFAULT))
        {
          buf.int mSelector = 136315650;
          *(void *)&buf.AudioObjectPropertyScope mScope = "Device_HPMic_Aspen.cpp";
          __int16 v146 = 1024;
          int v147 = 563;
          __int16 v148 = 1024;
          *(float *)unint64_t v149 = v20;
          _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d set DevicePropertyCodecLowPowerModeEnable = %u.",  (uint8_t *)&buf,  0x18u);
        }

        break;
      case 1162701936:
        int v24 = *(_DWORD *)a6;
        UInt32 v25 = (os_log_t *)sub_138E8(17);
        UInt32 v26 = *v25;
        if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_DEFAULT))
        {
          buf.int mSelector = 136315650;
          *(void *)&buf.AudioObjectPropertyScope mScope = "Device_HPMic_Aspen.cpp";
          __int16 v146 = 1024;
          int v147 = 575;
          __int16 v148 = 1024;
          *(_DWORD *)unint64_t v149 = v24;
          _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d set DevicePropertyMicrophoneLowPowerModeEnable = %u.",  (uint8_t *)&buf,  0x18u);
        }

        break;
      case 1634759542:
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4) != (_DWORD)a5)
        {
          AudioObjectID v108 = (os_log_t *)sub_138E8(13);
          __int16 v109 = *v108;
          if (*v108 && os_log_type_enabled(*v108, OS_LOG_TYPE_ERROR))
          {
            v155.__cv_.__uint64_t sig = *(void *)a2;
            *(_DWORD *)v155.__cv_.__opaque = *(_DWORD *)(a2 + 8);
            sub_613AC((uint64_t)&v156, (unsigned int *)&v155);
            int v110 = v156.__m_.__opaque[15];
            uint64_t sig = v156.__m_.__sig;
            int v112 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
            uint64_t v113 = &v156;
            buf.int mSelector = 136316162;
            *(void *)&buf.AudioObjectPropertyScope mScope = "Device_HPMic_Aspen.cpp";
            if (v110 < 0) {
              uint64_t v113 = (std::mutex *)sig;
            }
            __int16 v146 = 1024;
            int v147 = 548;
            __int16 v148 = 2080;
            *(void *)unint64_t v149 = v113;
            *(_WORD *)&v149[8] = 1024;
            *(_DWORD *)&v149[10] = a5;
            *(_WORD *)&v149[14] = 1024;
            *(_DWORD *)&v149[16] = v112;
            _os_log_impl( &dword_0,  v109,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed : %u; required: %u).",
              (uint8_t *)&buf,
              0x28u);
            if (v156.__m_.__opaque[15] < 0) {
              operator delete((void *)v156.__m_.__sig);
            }
          }

          uint64_t v114 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v114 = &off_4865A0;
          v114[2] = 561211770;
        }

        AudioObjectPropertyScope v16 = *(_DWORD *)(a2 + 4);
        buf.int mSelector = 1987013732;
        buf.AudioObjectPropertyScope mScope = v16;
        buf.AudioObjectPropertyElement mElement = 0;
        (*(void (**)(uint64_t, AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, float *))(*(void *)a1 + 48LL))( a1,  &buf,  a3,  a4,  a5,  a6);
        return;
      default:
LABEL_40:
        sub_3686A0(a1, (const AudioObjectPropertyAddress *)a2, a3, a4, a5, a6);
        return;
    }

    sub_3686A0(a1, (const AudioObjectPropertyAddress *)a2, a3, a4, a5, a6);
    return;
  }

  if (v12 > 1836414052)
  {
    if (v12 == 1836414053)
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4) != (_DWORD)a5)
      {
        int v101 = (os_log_t *)sub_138E8(13);
        __int16 v102 = *v101;
        if (*v101 && os_log_type_enabled(*v101, OS_LOG_TYPE_ERROR))
        {
          v155.__cv_.__uint64_t sig = *(void *)a2;
          *(_DWORD *)v155.__cv_.__opaque = *(_DWORD *)(a2 + 8);
          sub_613AC((uint64_t)&v156, (unsigned int *)&v155);
          int v103 = v156.__m_.__opaque[15];
          uint64_t v104 = v156.__m_.__sig;
          int v105 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
          int v106 = &v156;
          buf.int mSelector = 136316162;
          *(void *)&buf.AudioObjectPropertyScope mScope = "Device_HPMic_Aspen.cpp";
          if (v103 < 0) {
            int v106 = (std::mutex *)v104;
          }
          __int16 v146 = 1024;
          int v147 = 605;
          __int16 v148 = 2080;
          *(void *)unint64_t v149 = v106;
          *(_WORD *)&v149[8] = 1024;
          *(_DWORD *)&v149[10] = a5;
          *(_WORD *)&v149[14] = 1024;
          *(_DWORD *)&v149[16] = v105;
          _os_log_impl( &dword_0,  v102,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            (uint8_t *)&buf,
            0x28u);
          if (v156.__m_.__opaque[15] < 0) {
            operator delete((void *)v156.__m_.__sig);
          }
        }

        __int16 v107 = __cxa_allocate_exception(0x10uLL);
        *(void *)__int16 v107 = &off_4865A0;
        v107[2] = 561211770;
      }

      if (*(_DWORD *)(a2 + 8) == 6 && *(_DWORD *)(a2 + 4) == 1869968496)
      {
        uint64_t v23 = sub_1F4000();
        sub_1F57EC(v23, *(_DWORD *)a6 != 0);
        return;
      }
    }

    else if (v12 == 1987013732)
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4) != (_DWORD)a5)
      {
        char v115 = (os_log_t *)sub_138E8(13);
        uint64_t v116 = *v115;
        if (*v115 && os_log_type_enabled(*v115, OS_LOG_TYPE_ERROR))
        {
          v155.__cv_.__uint64_t sig = *(void *)a2;
          *(_DWORD *)v155.__cv_.__opaque = *(_DWORD *)(a2 + 8);
          sub_613AC((uint64_t)&v156, (unsigned int *)&v155);
          int v117 = v156.__m_.__opaque[15];
          uint64_t v118 = v156.__m_.__sig;
          int v119 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
          uint64_t v120 = &v156;
          buf.int mSelector = 136316162;
          *(void *)&buf.AudioObjectPropertyScope mScope = "Device_HPMic_Aspen.cpp";
          if (v117 < 0) {
            uint64_t v120 = (std::mutex *)v118;
          }
          __int16 v146 = 1024;
          int v147 = 581;
          __int16 v148 = 2080;
          *(void *)unint64_t v149 = v120;
          *(_WORD *)&v149[8] = 1024;
          *(_DWORD *)&v149[10] = a5;
          *(_WORD *)&v149[14] = 1024;
          *(_DWORD *)&v149[16] = v119;
          _os_log_impl( &dword_0,  v116,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            (uint8_t *)&buf,
            0x28u);
          if (v156.__m_.__opaque[15] < 0) {
            operator delete((void *)v156.__m_.__sig);
          }
        }

        uint64_t v121 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v121 = &off_4865A0;
        v121[2] = 561211770;
      }

      if (*(_DWORD *)(a2 + 8) == 6 && *(_DWORD *)(a2 + 4) == 1869968496)
      {
        uint64_t v17 = sub_1F4000();
        if (sub_1F4DF8(v17))
        {
          float v18 = (float)(*a6 + 100.0) / 100.0;
          uint64_t v19 = sub_1F4000();
          sub_1F51DC(v19, v18);
        }

        return;
      }
    }

    goto LABEL_40;
  }

  if (v12 == 1685483630)
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4) != (_DWORD)a5)
    {
      int v94 = (os_log_t *)sub_138E8(13);
      AudioObjectID v95 = *v94;
      if (*v94 && os_log_type_enabled(*v94, OS_LOG_TYPE_ERROR))
      {
        v155.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)v155.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_613AC((uint64_t)&v156, (unsigned int *)&v155);
        int v96 = v156.__m_.__opaque[15];
        uint64_t v97 = v156.__m_.__sig;
        int v98 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
        uint64_t v99 = &v156;
        buf.int mSelector = 136316162;
        *(void *)&buf.AudioObjectPropertyScope mScope = "Device_HPMic_Aspen.cpp";
        if (v96 < 0) {
          uint64_t v99 = (std::mutex *)v97;
        }
        __int16 v146 = 1024;
        int v147 = 617;
        __int16 v148 = 2080;
        *(void *)unint64_t v149 = v99;
        *(_WORD *)&v149[8] = 1024;
        *(_DWORD *)&v149[10] = a5;
        *(_WORD *)&v149[14] = 1024;
        *(_DWORD *)&v149[16] = v98;
        _os_log_impl( &dword_0,  v95,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u ; required: %u).",
          (uint8_t *)&buf,
          0x28u);
        if (v156.__m_.__opaque[15] < 0) {
          operator delete((void *)v156.__m_.__sig);
        }
      }

      uint64_t v100 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v100 = &off_4865A0;
      CFTypeRef v100[2] = 561211770;
    }

    *(_BYTE *)(a1 + 688) = *(_DWORD *)a6 != 0;
    return;
  }

  if (v12 != 1768255076) {
    goto LABEL_40;
  }
  if (__PAIR64__(*(_DWORD *)(a2 + 4), 1768255076) != qword_490BC8 || *(_DWORD *)(a2 + 8) != dword_490BD0)
  {
    __int16 v27 = (os_log_t *)sub_138E8(17);
    os_log_t v28 = *v27;
    if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
    {
      buf.int mSelector = 136315394;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_HPMic_Aspen.cpp";
      __int16 v146 = 1024;
      int v147 = 643;
      __int16 v29 = "%25s:%-5d Unknown property address using selector kAppleEmbeddedAudio_DevicePropertyInputEnableDevice. Ignoring.";
      UInt32 v30 = v28;
      os_log_type_t v31 = OS_LOG_TYPE_ERROR;
      uint32_t v32 = 18;
LABEL_48:
      _os_log_impl(&dword_0, v30, v31, v29, (uint8_t *)&buf, v32);
      return;
    }

    return;
  }

  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32LL))(a1, a2, a3, a4) != (_DWORD)a5)
  {
    char v122 = (os_log_t *)sub_138E8(13);
    uint64_t v123 = *v122;
    if (*v122 && os_log_type_enabled(*v122, OS_LOG_TYPE_ERROR))
    {
      v155.__cv_.__uint64_t sig = *(void *)a2;
      *(_DWORD *)v155.__cv_.__opaque = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)&v156, (unsigned int *)&v155);
      int v124 = v156.__m_.__opaque[15];
      uint64_t v125 = v156.__m_.__sig;
      int v126 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32LL))(a1, a2, a3, a4);
      __int16 v127 = &v156;
      buf.int mSelector = 136316162;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_HPMic_Aspen.cpp";
      if (v124 < 0) {
        __int16 v127 = (std::mutex *)v125;
      }
      __int16 v146 = 1024;
      int v147 = 624;
      __int16 v148 = 2080;
      *(void *)unint64_t v149 = v127;
      *(_WORD *)&v149[8] = 1024;
      *(_DWORD *)&v149[10] = a5;
      *(_WORD *)&v149[14] = 1024;
      *(_DWORD *)&v149[16] = v126;
      _os_log_impl( &dword_0,  v123,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
        (uint8_t *)&buf,
        0x28u);
      if (v156.__m_.__opaque[15] < 0) {
        operator delete((void *)v156.__m_.__sig);
      }
    }

    double v128 = __cxa_allocate_exception(0x10uLL);
    *(void *)double v128 = &off_4865A0;
    v128[2] = 561211770;
  }

  float v13 = *a6;
  uint64_t v14 = (unsigned int *)(a1 + 692);
  if (v13 == 0.0)
  {
    if (!atomic_load(v14))
    {
      float v129 = (os_log_t *)sub_138E8(13);
      uint64_t v130 = *v129;
      if (*v129 && os_log_type_enabled(*v129, OS_LOG_TYPE_ERROR))
      {
        buf.int mSelector = 136315394;
        *(void *)&buf.AudioObjectPropertyScope mScope = "Device_HPMic_Aspen.cpp";
        __int16 v146 = 1024;
        int v147 = 628;
        _os_log_impl( &dword_0,  v130,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Attempt to power off the built-in mic when mMicPowerOnCount is 0.",  (uint8_t *)&buf,  0x12u);
      }

      uint64_t v131 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v131, "Attempt to power off the built-in mic when mMicPowerOnCount is 0.");
    }

    do
    {
      unsigned int v34 = __ldaxr(v14);
      unsigned int v35 = v34 - 1;
    }

    while (__stlxr(v35, v14));
    if (v35) {
      return;
    }
  }

  else
  {
    do
      unsigned int v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
    if (v15) {
      return;
    }
  }

  std::chrono::steady_clock::time_point v36 = (os_log_t *)sub_138E8(17);
  __int128 v37 = *v36;
  if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_INFO))
  {
    int v38 = "dis";
    *(void *)&buf.AudioObjectPropertyScope mScope = "Device_HPMic_Aspen.cpp";
    buf.int mSelector = 136315650;
    if (v13 != 0.0) {
      int v38 = "en";
    }
    __int16 v146 = 1024;
    int v147 = 634;
    __int16 v148 = 2080;
    *(void *)unint64_t v149 = v38;
    _os_log_impl( &dword_0,  v37,  OS_LOG_TYPE_INFO,  "%25s:%-5d Non-redundant requesting to %sable microphone power. Calling the HAL.",  (uint8_t *)&buf,  0x1Cu);
  }

  AudioObjectID v39 = *(_DWORD *)(a1 + 268);
  int inData = LODWORD(v13) != 0;
  uint64_t v40 = sub_138E8(13);
  if ((*(_BYTE *)(v40 + 8) & 1) != 0)
  {
    uint64_t v41 = *(os_log_s **)v40;
    if (*(void *)v40)
    {
      if (os_log_type_enabled(*(os_log_t *)v40, OS_LOG_TYPE_DEBUG))
      {
        v155.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)v155.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_613AC((uint64_t)&v156, (unsigned int *)&v155);
        std::string v42 = v156.__m_.__opaque[15] >= 0 ? &v156 : (std::mutex *)v156.__m_.__sig;
        buf.int mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v146 = 1024;
        int v147 = 166;
        __int16 v148 = 2080;
        *(void *)unint64_t v149 = v42;
        *(_WORD *)&v149[8] = 1024;
        *(_DWORD *)&v149[10] = v39;
        _os_log_impl( &dword_0,  v41,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to synchronize the property %s on id %u.",  (uint8_t *)&buf,  0x22u);
        if (v156.__m_.__opaque[15] < 0) {
          operator delete((void *)v156.__m_.__sig);
        }
      }
    }
  }

  AudioObjectID v140 = v39;
  uint64_t v141 = *(void *)a2;
  int v142 = *(_DWORD *)(a2 + 8);
  int v143 = a3;
  unint64_t v144 = a4;
  unint64_t v43 = sub_1E05CC((uint64_t)&v140);
  if (HIDWORD(v43)) {
    BOOL v44 = 0;
  }
  else {
    BOOL v44 = inData == (_DWORD)v43;
  }
  int v45 = v44;
  uint64_t v46 = sub_138E8(13);
  uint64_t v47 = *(void *)(v46 + 8);
  if (v45)
  {
    if ((v47 & 1) != 0)
    {
      os_log_t v48 = *(os_log_t *)v46;
      if (*(void *)v46)
      {
        if (os_log_type_enabled(*(os_log_t *)v46, OS_LOG_TYPE_DEBUG))
        {
          buf.int mSelector = 136315650;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          __int16 v146 = 1024;
          int v147 = 191;
          __int16 v148 = 1024;
          *(_DWORD *)unint64_t v149 = v39;
          __int16 v29 = "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitiv"
                "e for a notification on id %u.";
LABEL_77:
          UInt32 v30 = v48;
          os_log_type_t v31 = OS_LOG_TYPE_DEBUG;
          uint32_t v32 = 24;
          goto LABEL_48;
        }
      }
    }

    return;
  }

  if ((v47 & 1) != 0)
  {
    int v49 = *(os_log_s **)v46;
    if (*(void *)v46)
    {
      if (os_log_type_enabled(*(os_log_t *)v46, OS_LOG_TYPE_DEBUG))
      {
        v155.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)v155.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_613AC((uint64_t)&v156, (unsigned int *)&v155);
        int v50 = v156.__m_.__opaque[15] >= 0 ? &v156 : (std::mutex *)v156.__m_.__sig;
        buf.int mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v146 = 1024;
        int v147 = 199;
        __int16 v148 = 2080;
        *(void *)unint64_t v149 = v50;
        *(_WORD *)&v149[8] = 1024;
        *(_DWORD *)&v149[10] = v39;
        _os_log_impl( &dword_0,  v49,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d About to call AudioObjectSetPropertyData to set property: %s on id %u.",  (uint8_t *)&buf,  0x22u);
        if (v156.__m_.__opaque[15] < 0) {
          operator delete((void *)v156.__m_.__sig);
        }
      }
    }
  }

  AudioObjectPropertyAddress buf = *(AudioObjectPropertyAddress *)a2;
  uint64_t v51 = AudioObjectSetPropertyData(v39, &buf, a3, a4, 4u, &inData);
  if ((_DWORD)v51)
  {
    uint64_t v52 = (os_log_t *)sub_138E8(13);
    unint64_t v53 = *v52;
    if (*v52 && os_log_type_enabled(*v52, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(&v156, v51);
      int v54 = v156.__m_.__opaque[15];
      uint64_t v55 = v156.__m_.__sig;
      uint64_t inClientData = *(void *)a2;
      int v138 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)&v155, (unsigned int *)&inClientData);
      UInt32 v56 = &v156;
      if (v54 < 0) {
        UInt32 v56 = (std::mutex *)v55;
      }
      if (v155.__cv_.__opaque[15] >= 0) {
        uint64_t v57 = (uint64_t)&v155;
      }
      else {
        uint64_t v57 = v155.__cv_.__sig;
      }
      buf.int mSelector = 136316418;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
      __int16 v146 = 1024;
      int v147 = 207;
      __int16 v148 = 1024;
      *(_DWORD *)unint64_t v149 = v51;
      *(_WORD *)&v149[4] = 2080;
      *(void *)&v149[6] = v56;
      *(_WORD *)&v149[14] = 2080;
      *(void *)&v149[16] = v57;
      *(_WORD *)&v149[24] = 1024;
      *(_DWORD *)&v149[26] = v39;
      _os_log_impl( &dword_0,  v53,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) setting property data for property %s on id %u.",  (uint8_t *)&buf,  0x32u);
      if (v155.__cv_.__opaque[15] < 0) {
        operator delete((void *)v155.__cv_.__sig);
      }
      if (v156.__m_.__opaque[15] < 0) {
        operator delete((void *)v156.__m_.__sig);
      }
    }

    return;
  }

  unint64_t v58 = sub_1E05CC((uint64_t)&v140);
  if (HIDWORD(v58) || inData != (_DWORD)v58)
  {
    memset(v156.__m_.__opaque, 0, sizeof(v156.__m_.__opaque));
    v155.__cv_.__uint64_t sig = 1018212795LL;
    memset(v155.__cv_.__opaque, 0, sizeof(v155.__cv_.__opaque));
    v156.__m_.__uint64_t sig = 850045863LL;
    char v139 = 0;
    sub_7D684(&inClientData, v39, (AudioObjectPropertyAddress *)a2, (uint64_t)&v155, (uint64_t)&v156, (uint64_t)&v139);
    for (uint64_t i = 2000LL; ; i += (std::chrono::system_clock::now().__d_.__rep_ - v63.__d_.__rep_) / -1000)
    {
      unint64_t v61 = sub_1E05CC((uint64_t)&v140);
      int v62 = v61;
      if (HIDWORD(v61)) {
        goto LABEL_149;
      }
      if (inData == (_DWORD)v61) {
        break;
      }
      if (i <= 0)
      {
        char v79 = (os_log_t *)sub_138E8(13);
        os_log_t v80 = *v79;
        if (*v79 && os_log_type_enabled(*v79, OS_LOG_TYPE_ERROR))
        {
          uint64_t v133 = *(void *)a2;
          int v134 = *(_DWORD *)(a2 + 8);
          sub_613AC((uint64_t)&__lk, (unsigned int *)&v133);
          if (v136 >= 0) {
            p_lunsigned int k = &__lk;
          }
          else {
            p_lunsigned int k = __lk.__m_;
          }
          buf.int mSelector = 136316930;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          __int16 v146 = 1024;
          int v147 = 248;
          __int16 v148 = 2080;
          *(void *)unint64_t v149 = "set";
          *(_WORD *)&v149[8] = 2080;
          *(void *)&v149[10] = p_lk;
          *(_WORD *)&v149[18] = 2080;
          *(void *)&v149[20] = "set";
          *(_WORD *)&v149[28] = 1024;
          BOOL v150 = inData == v62;
          __int16 v151 = 1024;
          int v152 = 0;
          __int16 v153 = 1024;
          AudioObjectID v154 = v39;
          char v75 = "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.";
          int v76 = v80;
          os_log_type_t v77 = OS_LOG_TYPE_ERROR;
          uint32_t v78 = 66;
LABEL_147:
          _os_log_impl(&dword_0, v76, v77, v75, (uint8_t *)&buf, v78);
          if (v136 < 0) {
            operator delete(__lk.__m_);
          }
        }

        goto LABEL_149;
      }

      v63.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      uint64_t v64 = sub_138E8(13);
      if ((*(_BYTE *)(v64 + 8) & 1) != 0)
      {
        int v65 = *(os_log_s **)v64;
        if (*(void *)v64)
        {
          if (os_log_type_enabled(*(os_log_t *)v64, OS_LOG_TYPE_DEBUG))
          {
            buf.int mSelector = 136315906;
            *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
            __int16 v146 = 1024;
            int v147 = 257;
            __int16 v148 = 2080;
            *(void *)unint64_t v149 = "with timeout";
            *(_WORD *)&v149[8] = 1024;
            *(_DWORD *)&v149[10] = v39;
            _os_log_impl( &dword_0,  v65,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.",  (uint8_t *)&buf,  0x22u);
          }
        }
      }

      sub_6DD4();
      *(void *)&buf.int mSelector = &qword_48F828;
      LOBYTE(buf.mElement) = 0;
      LOBYTE(buf.mElement) = sub_1A30E4();
      __lk.__m_ = &v156;
      __lk.__owns_ = 1;
      std::mutex::lock(&v156);
      v66.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (!v139)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = v66.__d_.__rep_ + 1000000 * i;
        while (1)
        {
          if (v67 <= std::chrono::steady_clock::now().__d_.__rep_) {
            goto LABEL_113;
          }
          v68.__d_.__rep_ = v67 - std::chrono::steady_clock::now().__d_.__rep_;
          if (v68.__d_.__rep_ >= 1) {
            break;
          }
LABEL_131:
          if (std::chrono::steady_clock::now().__d_.__rep_ >= v67 || v139) {
            goto LABEL_113;
          }
        }

        std::chrono::steady_clock::now();
        v69.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v69.__d_.__rep_)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v70 = 0LL;
          goto LABEL_127;
        }

        if (v69.__d_.__rep_ < 1)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v70 = 0x8000000000000000LL;
        }

        else
        {
          if ((unint64_t)v69.__d_.__rep_ > 0x20C49BA5E353F7LL)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v70 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_127;
          }

void sub_1DD978( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, std::condition_variable *a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36)
{
}

BOOL sub_1DDA2C( void *a1, const AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  if (((*(uint64_t (**)(void *))(*a1 + 16LL))(a1) & 1) == 0)
  {
    BOOL v9 = (os_log_t *)sub_138E8(13);
    int v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)&__p, (unsigned int *)&v13);
      uint64_t v11 = v17 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_HPMic_Aspen.cpp";
      __int16 v19 = 1024;
      *(_DWORD *)float v20 = 661;
      *(_WORD *)&v20[4] = 2080;
      *(void *)&void v20[6] = v11;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v17 < 0) {
        operator delete(__p);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((*(void *)&a2->mSelector != qword_490B98 || a2->mElement != dword_490BA0)
    && (*(void *)&a2->mSelector != qword_490BA8 || a2->mElement != dword_490BB0)
    && (*(void *)&a2->mSelector != qword_490BB8 || a2->mElement != dword_490BC0))
  {
    return sub_368FB0((uint64_t)a1, a2, a3, a4);
  }

  AudioObjectPropertyAddress __p = *(void **)&a2->mSelector;
  AudioObjectPropertyElement v16 = a2->mElement;
  *(void *)AudioObjectPropertyAddress buf = *(void *)&a2->mSelector;
  *(_DWORD *)&_DWORD buf[8] = a2->mElement;
  *(void *)&uint64_t v20[2] = a3;
  *(void *)&v20[10] = a4;
  sub_1885D4(a1 + 64, (unsigned int *)&__p, (unsigned int *)buf);
  return 1LL;
}

BOOL sub_1DDCB4( uint64_t a1, const AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  if (*(void *)&a2->mSelector == qword_490B98 && a2->mElement == dword_490BA0
    || *(void *)&a2->mSelector == qword_490BA8 && a2->mElement == dword_490BB0
    || *(void *)&a2->mSelector == qword_490BB8 && a2->mElement == dword_490BC0)
  {
    uint64_t v8 = *(void *)&a2->mSelector;
    uint64_t v13 = a4;
    uint64_t v14 = v8;
    AudioObjectPropertyElement mElement = a2->mElement;
    uint64_t v10 = *(void *)&a2->mSelector;
    AudioObjectPropertyElement v11 = a2->mElement;
    int v12 = a3;
    sub_18803C((uint64_t **)(a1 + 512), (unsigned int *)&v14, (unsigned int *)&v10);
    return 1LL;
  }

  else
  {
    sub_1BB60((std::mutex *)a1);
    return AudioObjectRemovePropertyListener(*(_DWORD *)(a1 + 268), a2, a3, a4) == 0;
  }

uint64_t sub_1DDDFC(uint64_t a1, double a2)
{
  double v19 = a2;
  uint64_t v4 = sub_369618(a1, a2);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 200LL))(a1);
  uint64_t v17 = 0x676C6F62616F7372LL;
  int v18 = 0;
  if (v5) {
    BOOL v6 = (_DWORD)v4 == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    uint64_t v7 = v5;
    if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v5 + 16LL))(v5, &v17))
    {
      uint64_t v8 = sub_138E8(17);
      uint64_t v9 = sub_138E8(36);
      char v10 = 0;
      uint64_t v11 = 0LL;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
      uint64_t v12 = *(void *)(v8 + 8);
      while (1)
      {
        uint64_t v13 = *(int *)&buf[4 * v11];
        char v14 = v10;
        if (((v12 & v13) != 0) != ((*(void *)(v9 + 8) & v13) != 0)) {
          break;
        }
        char v10 = 1;
        uint64_t v11 = 1LL;
        if ((v14 & 1) != 0) {
          goto LABEL_13;
        }
      }

      if ((v12 & v13) == 0) {
        uint64_t v8 = v9;
      }
LABEL_13:
      unsigned int v15 = *(os_log_s **)v8;
      if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "Device_HPMic_Aspen.cpp";
        __int16 v21 = 1024;
        int v22 = 814;
        __int16 v23 = 2048;
        double v24 = a2;
        _os_log_impl(&dword_0, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d Informing AOP of Codec sample rate %f Hz", buf, 0x1Cu);
      }

      (*(void (**)(uint64_t, uint64_t *, void, void, uint64_t, double *))(*(void *)v7 + 48LL))( v7,  &v17,  0LL,  0LL,  8LL,  &v19);
    }
  }

  return v4;
}

uint64_t sub_1DDFB4(uint64_t a1)
{
  v65[0] = 1;
  *(void *)&v65[1] = 0x6F7574706D757465LL;
  v65[3] = 1;
  if ((*(unsigned int (**)(uint64_t, _DWORD *))(*(void *)a1 + 16LL))(a1, &v65[1])) {
    (*(void (**)(uint64_t, _DWORD *, void, void, uint64_t, _DWORD *))(*(void *)a1 + 48LL))( a1,  &v65[1],  0LL,  0LL,  4LL,  v65);
  }
  v65[3] = 2;
  if ((*(unsigned int (**)(uint64_t, _DWORD *))(*(void *)a1 + 16LL))(a1, &v65[1])) {
    (*(void (**)(uint64_t, _DWORD *, void, void, uint64_t, _DWORD *))(*(void *)a1 + 48LL))( a1,  &v65[1],  0LL,  0LL,  4LL,  v65);
  }
  v65[3] = 3;
  if ((*(unsigned int (**)(uint64_t, _DWORD *))(*(void *)a1 + 16LL))(a1, &v65[1])) {
    (*(void (**)(uint64_t, _DWORD *, void, void, uint64_t, _DWORD *))(*(void *)a1 + 48LL))( a1,  &v65[1],  0LL,  0LL,  4LL,  v65);
  }
  v65[3] = 4;
  if ((*(unsigned int (**)(uint64_t, _DWORD *))(*(void *)a1 + 16LL))(a1, &v65[1])) {
    (*(void (**)(uint64_t, _DWORD *, void, void, uint64_t, _DWORD *))(*(void *)a1 + 48LL))( a1,  &v65[1],  0LL,  0LL,  4LL,  v65);
  }
  int v63 = 4;
  float v64 = 0.0;
  strcpy((char *)&v65[1], "dlovptuo");
  BYTE1(v65[3]) = 0;
  HIWORD(v65[3]) = 0;
  if ((*(unsigned int (**)(uint64_t, _DWORD *))(*(void *)a1 + 16LL))(a1, &v65[1]))
  {
    (*(void (**)(uint64_t, _DWORD *, void, void, int *, float *))(*(void *)a1 + 40LL))( a1,  &v65[1],  0LL,  0LL,  &v63,  &v64);
    float v2 = v64;
    if (v64 != 0.0)
    {
      float v64 = 0.0;
      (*(void (**)(uint64_t, _DWORD *, void, void, uint64_t, float *, float))(*(void *)a1 + 48LL))( a1,  &v65[1],  0LL,  0LL,  4LL,  &v64,  v2);
    }
  }

  BYTE1(v65[3]) = 0;
  HIWORD(v65[3]) = 0;
  strcpy((char *)v65, "Ms2icrscbolg");
  if ((*(unsigned int (**)(uint64_t, _DWORD *))(*(void *)a1 + 16LL))(a1, &v65[1])) {
    (*(void (**)(uint64_t, _DWORD *, void, void, uint64_t, _DWORD *))(*(void *)a1 + 48LL))( a1,  &v65[1],  0LL,  0LL,  4LL,  v65);
  }
  sub_9005C();
  char v3 = byte_48CC71;
  strcpy(inAddress, "etumtpni");
  inAddress[9] = 0;
  *(_WORD *)&inAddress[10] = 0;
  AudioObjectID v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
  if (AudioObjectHasProperty(v4, (const AudioObjectPropertyAddress *)inAddress))
  {
    uint64_t v5 = operator new(0x100uLL);
    *(void *)&__int128 v76 = 0x676C6F626D757465LL;
    DWORD2(v76) = 0;
    sub_220150((uint64_t)v5, (uint64_t *)&v76, (uint64_t)inAddress, a1);
    sub_1D5AE0((void *)a1, (uint64_t)v5);
    if ((v3 & 1) != 0) {
      sub_1D55D4((uint64_t *)a1, 0, 1886216809LL, (uint64_t)v5);
    }
    sub_1D55D4((uint64_t *)a1, 0, 1886222185LL, (uint64_t)v5);
  }

  *(void *)&__int128 v76 = 0x696E7074766F6C64LL;
  DWORD2(v76) = 0;
  AudioObjectID v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
  if (AudioObjectHasProperty(v6, (const AudioObjectPropertyAddress *)&v76))
  {
    uint64_t v7 = operator new(0x128uLL);
    sub_236254((uint64_t)v7, a1, 1768845428LL, 0, 0, 59);
    sub_1D5AE0((void *)a1, (uint64_t)v7);
    if ((v3 & 1) != 0) {
      sub_1D580C(a1, 0, 1886216809LL, (uint64_t)v7);
    }
    sub_1D580C(a1, 0, 1886222185LL, (uint64_t)v7);
    unsigned __int8 v8 = atomic_load((unsigned __int8 *)&qword_490CB0);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_490CB0))
    {
      BOOL v58 = sub_1E0450(a1)
         && sub_1E0500(a1)
         && MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 1;
      byte_490CA8 = v58;
      __cxa_guard_release(&qword_490CB0);
    }

    if (byte_490CA8) {
      sub_1D580C(a1, 0, 1886680169LL, (uint64_t)v7);
    }
  }

  *(void *)&v72.int mSelector = 0x6F7574706D757465LL;
  v72.AudioObjectPropertyElement mElement = 4;
  AudioObjectID v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
  if (AudioObjectHasProperty(v9, &v72))
  {
    char v10 = (os_log_t *)sub_138E8(17);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioObjectPropertyAddress inAddress = 136315394;
      *(void *)&inAddress[4] = "Device_HPMic_Aspen.cpp";
      *(_WORD *)&inAddress[12] = 1024;
      *(_DWORD *)&inAddress[14] = 1053;
      _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating a speaker port", inAddress, 0x12u);
    }

    __int128 v74 = 0uLL;
    uint64_t v75 = 0LL;
    sub_F9530((uint64_t)inAddress, qword_490C08);
    __int128 v69 = 0uLL;
    uint64_t v70 = 0LL;
    uint64_t v12 = (char *)operator new(0x228uLL);
    *((void *)v12 + 1) = 0LL;
    *((void *)v12 + 2) = 0LL;
    *(void *)uint64_t v12 = off_485B80;
    *(void *)&__int128 v73 = CFStringCreateWithCString(0LL, "Built-In Speaker", 0x600u);
    BYTE8(v73) = 1;
    sub_7D084(&v76, "");
    sub_F9638( (uint64_t)(v12 + 24),  &qword_490C08,  a1,  (uint64_t)&v74,  (uint64_t)inAddress,  (uint64_t)&v73,  (char **)&v69,  &v76);
    *((void *)v12 + 3) = &off_46FD40;
    *((_WORD *)v12 + 272) = 0;
    if (SHIBYTE(v77) < 0) {
      operator delete((void *)v76);
    }
    sub_19DFC((uint64_t)&v73);
    v71[0] = (CFMutableStringRef)(v12 + 24);
    v71[1] = (CFMutableStringRef)v12;
    sub_AFDAC((uint64_t)v71, (void *)v12 + 13, (uint64_t)(v12 + 24));
    __int128 v73 = *(_OWORD *)v71;
    v71[0] = 0LL;
    v71[1] = 0LL;
    sub_3711D4(a1, (void ***)&v73);
    uint64_t v13 = (std::__shared_weak_count *)*((void *)&v73 + 1);
    if (*((void *)&v73 + 1))
    {
      char v14 = (unint64_t *)(*((void *)&v73 + 1) + 8LL);
      do
        unint64_t v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }

    AudioObjectPropertyElement v16 = (std::__shared_weak_count *)v71[1];
    if (v71[1])
    {
      p_info = &v71[1]->info;
      do
        unint64_t v18 = __ldaxr((unint64_t *)p_info);
      while (__stlxr(v18 - 1, (unint64_t *)p_info));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }

    *(void *)&__int128 v76 = &v69;
    sub_7A668((void ***)&v76);
    sub_19DFC((uint64_t)&inAddress[32]);
    sub_19DFC((uint64_t)&inAddress[16]);
    sub_19DFC((uint64_t)inAddress);
    if ((void)v74) {
      operator delete((void *)v74);
    }
    if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 312LL))(a1) & 0xFF00000000LL) != 0)
    {
      double v19 = (os_log_t *)sub_138E8(17);
      float v20 = *v19;
      if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress inAddress = 136315394;
        *(void *)&inAddress[4] = "Device_HPMic_Aspen.cpp";
        *(_WORD *)&inAddress[12] = 1024;
        *(_DWORD *)&inAddress[14] = 1063;
        _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d creating a speaker tap input port",  inAddress,  0x12u);
      }

      __int16 v21 = operator new(0x228uLL);
      v21[1] = 0LL;
      _OWORD v21[2] = 0LL;
      *__int16 v21 = off_484A28;
      sub_22CCE8((uint64_t)(v21 + 3), a1);
      *(void *)AudioObjectPropertyAddress inAddress = v21 + 3;
      *(void *)&inAddress[8] = v21;
      sub_AFDAC((uint64_t)inAddress, v21 + 13, (uint64_t)(v21 + 3));
      __int128 v69 = *(_OWORD *)inAddress;
      *(void *)AudioObjectPropertyAddress inAddress = 0LL;
      *(void *)&inAddress[8] = 0LL;
      sub_3711D4(a1, (void ***)&v69);
      int v22 = (std::__shared_weak_count *)*((void *)&v69 + 1);
      if (*((void *)&v69 + 1))
      {
        __int16 v23 = (unint64_t *)(*((void *)&v69 + 1) + 8LL);
        do
          unint64_t v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }

      UInt32 v25 = *(std::__shared_weak_count **)&inAddress[8];
      if (*(void *)&inAddress[8])
      {
        UInt32 v26 = (unint64_t *)(*(void *)&inAddress[8] + 8LL);
        do
          unint64_t v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
  }

  if (sub_93B80())
  {
    os_log_t v28 = (os_log_t *)sub_138E8(17);
    __int16 v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioObjectPropertyAddress inAddress = 136315394;
      *(void *)&inAddress[4] = "Device_HPMic_Aspen.cpp";
      *(_WORD *)&inAddress[12] = 1024;
      *(_DWORD *)&inAddress[14] = 1122;
      _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d No input sources are present - no builtin mic on codec",  inAddress,  0x12u);
    }
  }

  else
  {
    LODWORD(v71[0]) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
    *(void *)&__int128 v74 = 0x696E707473736323LL;
    DWORD2(v74) = 0;
    sub_90764((uint64_t)inAddress, (AudioObjectID *)v71, (AudioObjectPropertyAddress *)&v74, 0, 0LL);
    int v30 = *(_DWORD *)inAddress;
    if (*(_DWORD *)inAddress || !inAddress[32])
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_4865A0;
      exception[2] = v30;
    }

    __int128 v76 = 0uLL;
    uint64_t v77 = 0LL;
    os_log_type_t v31 = *(void **)&inAddress[8];
    sub_7A5B8( &v76,  *(const void **)&inAddress[8],  *(uint64_t *)&inAddress[16],  (uint64_t)(*(void *)&inAddress[16] - *(void *)&inAddress[8]) >> 2);
    if (v31) {
      operator delete(v31);
    }
    unsigned __int8 v32 = atomic_load((unsigned __int8 *)&qword_490CA0);
    if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_490CA0))
    {
      qmemcpy(inAddress, "cimicimscimfcimlcimtcimu1imi2imi3imi4imi", sizeof(inAddress));
      sub_1873F8(&qword_490C88, inAddress, 0xAuLL);
      __cxa_guard_release(&qword_490CA0);
    }

    __int128 v33 = v76;
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>(v76, *((void *)&v76 + 1), inAddress);
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>( qword_490C88,  *(void *)algn_490C90,  inAddress);
    __int128 v74 = 0uLL;
    uint64_t v75 = 0LL;
    sub_187478( (unsigned int **)inAddress,  (unsigned int *)v33,  *((unsigned int **)&v33 + 1),  (unsigned int *)qword_490C88,  *(unsigned int **)algn_490C90,  (uint64_t)&v74,  0LL);
    __int128 v34 = v74;
    if ((void)v74)
    {
      *((void *)&v74 + 1) = v74;
      operator delete((void *)v74);
    }

    if ((void)v33) {
      operator delete((void *)v33);
    }
    if (*((void *)&v34 + 1) != (void)v34
      && (sub_2E2510(*(void *)(a1 + 664), 1768778083LL) || sub_2E2510(*(void *)(a1 + 664), 1768778033LL)))
    {
      unsigned int v35 = (os_log_t *)sub_138E8(17);
      uint64_t v36 = *v35;
      if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress inAddress = 136315394;
        *(void *)&inAddress[4] = "Device_HPMic_Aspen.cpp";
        *(_WORD *)&inAddress[12] = 1024;
        *(_DWORD *)&inAddress[14] = 1072;
        _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d creating an internal microphone port",  inAddress,  0x12u);
      }

      v71[0] = 0LL;
      LOBYTE(v71[1]) = 1;
      sub_D9948((uint64_t)&theString, (uint64_t)@"device-name-localized");
      if (v68 && theString)
      {
        *(void *)AudioObjectPropertyAddress inAddress = CFStringCreateMutableCopy(0LL, 0LL, theString);
        inAddress[8] = 1;
        sub_D9A0C((uint64_t)v71, (uint64_t)inAddress);
        sub_D9A64((uint64_t)inAddress);
        if (v71[0]) {
          CFStringAppend(v71[0], @" ");
        }
      }

      else
      {
        __int128 v37 = (os_log_t *)sub_138E8(17);
        int v38 = *v37;
        if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioObjectPropertyAddress inAddress = 136315394;
          *(void *)&inAddress[4] = "Device_HPMic_Aspen.cpp";
          *(_WORD *)&inAddress[12] = 1024;
          *(_DWORD *)&inAddress[14] = 1082;
          _os_log_impl( &dword_0,  v38,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Could not retrieve localized device name",  inAddress,  0x12u);
        }

        *(void *)AudioObjectPropertyAddress inAddress = CFStringCreateMutableCopy(0LL, 0LL, &stru_486F70);
        inAddress[8] = 1;
        sub_D9A0C((uint64_t)v71, (uint64_t)inAddress);
        sub_D9A64((uint64_t)inAddress);
      }

      sub_1F0A70((uint64_t)inAddress, 1886216809LL);
      if (v71[0]) {
        CFStringAppend(v71[0], *(CFStringRef *)inAddress);
      }
      sub_19DFC((uint64_t)inAddress);
      uint64_t v39 = sub_138E8(17);
      if ((*(_BYTE *)(v39 + 8) & 1) != 0)
      {
        uint64_t v40 = *(os_log_s **)v39;
        if (*(void *)v39)
        {
          if (os_log_type_enabled(*(os_log_t *)v39, OS_LOG_TYPE_DEBUG))
          {
            sub_48E98(&v76, v71[0]);
            uint64_t v41 = v77 >= 0 ? &v76 : (__int128 *)v76;
            *(_DWORD *)AudioObjectPropertyAddress inAddress = 136315650;
            *(void *)&inAddress[4] = "Device_HPMic_Aspen.cpp";
            *(_WORD *)&inAddress[12] = 1024;
            *(_DWORD *)&inAddress[14] = 1090;
            *(_WORD *)&inAddress[18] = 2080;
            *(void *)&inAddress[20] = v41;
            _os_log_impl( &dword_0,  v40,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Localized microphone name: '%s'",  inAddress,  0x1Cu);
            if (SHIBYTE(v77) < 0) {
              operator delete((void *)v76);
            }
          }
        }
      }

      CFTypeRef v42 = CFRetain(v71[0]);
      *(void *)&__int128 v76 = v42;
      BYTE8(v76) = 1;
      *(void *)AudioObjectPropertyAddress inAddress = v42;
      inAddress[8] = 1;
      if (v42) {
        CFRetain(v42);
      }
      *(void *)&inAddress[16] = 0LL;
      inAddress[24] = 1;
      *(void *)&inAddress[32] = 0LL;
      char v79 = 1;
      sub_19DFC((uint64_t)&v76);
      __int128 v76 = 0uLL;
      uint64_t v77 = 0LL;
      uint64_t v43 = sub_33341C();
      BOOL v44 = operator new(0x260uLL);
      v44[1] = 0LL;
      v44[2] = 0LL;
      *BOOL v44 = off_4753F8;
      *(void *)&__int128 v74 = CFStringCreateWithCString(0LL, "Built-In Microphone", 0x600u);
      BYTE8(v74) = 1;
      sub_38ECC0((uint64_t)(v44 + 3), a1, (uint64_t)&v76, (uint64_t)inAddress, (uint64_t)&v74, v43);
      sub_19DFC((uint64_t)&v74);
      *(void *)&__int128 v66 = v44 + 3;
      *((void *)&v66 + 1) = v44;
      sub_AFDAC((uint64_t)&v66, v44 + 13, (uint64_t)(v44 + 3));
      __int128 v74 = v66;
      __int128 v66 = 0uLL;
      sub_3711D4(a1, (void ***)&v74);
      int v45 = (std::__shared_weak_count *)*((void *)&v74 + 1);
      if (*((void *)&v74 + 1))
      {
        uint64_t v46 = (unint64_t *)(*((void *)&v74 + 1) + 8LL);
        do
          unint64_t v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }

      os_log_t v48 = (std::__shared_weak_count *)*((void *)&v66 + 1);
      if (*((void *)&v66 + 1))
      {
        int v49 = (unint64_t *)(*((void *)&v66 + 1) + 8LL);
        do
          unint64_t v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }

      if ((void)v76) {
        operator delete((void *)v76);
      }
      sub_19DFC((uint64_t)&inAddress[32]);
      sub_19DFC((uint64_t)&inAddress[16]);
      sub_19DFC((uint64_t)inAddress);
      sub_D9A9C((uint64_t)&theString);
      sub_D9A64((uint64_t)v71);
    }
  }

  sub_373CEC((uint64_t *)a1, &qword_490B68, 0);
  *(void *)&__int128 v74 = 0x707472755354656ELL;
  DWORD2(v74) = 0;
  if ((*(unsigned int (**)(uint64_t, __int128 *))(*(void *)a1 + 16LL))(a1, &v74))
  {
    *(_DWORD *)AudioObjectPropertyAddress inAddress = 0;
    (*(void (**)(uint64_t, __int128 *, void, void, uint64_t, _BYTE *))(*(void *)a1 + 48LL))( a1,  &v74,  0LL,  0LL,  4LL,  inAddress);
  }

  *(void *)&__int128 v69 = 0x6F7574706D757465LL;
  DWORD2(v69) = 5;
  if ((*(unsigned int (**)(uint64_t, __int128 *))(*(void *)a1 + 16LL))(a1, &v69))
  {
    *(_DWORD *)AudioObjectPropertyAddress inAddress = 1;
    (*(void (**)(uint64_t, __int128 *, void, void, uint64_t, _BYTE *))(*(void *)a1 + 48LL))( a1,  &v69,  0LL,  0LL,  4LL,  inAddress);
  }

  *(void *)&__int128 v73 = 0x676C6F624D434373LL;
  DWORD2(v73) = 0;
  if ((*(unsigned int (**)(uint64_t, __int128 *))(*(void *)a1 + 16LL))(a1, &v73))
  {
    v71[0] = 0LL;
    int v63 = 8;
    (*(void (**)(uint64_t, __int128 *, void, void, int *, CFMutableStringRef *))(*(void *)a1 + 40LL))( a1,  &v73,  0LL,  0LL,  &v63,  v71);
    if (!v71[0])
    {
      uint64_t v60 = (os_log_t *)sub_138E8(13);
      unint64_t v61 = *v60;
      if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress inAddress = 136315394;
        *(void *)&inAddress[4] = "Device_HPMic_Aspen.cpp";
        *(_WORD *)&inAddress[12] = 1024;
        *(_DWORD *)&inAddress[14] = 779;
        _os_log_impl( &dword_0,  v61,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [maxChannelInfo is NULL]: Invalid Maximum Channel Info",  inAddress,  0x12u);
      }

      int v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v62, "Invalid Maximum Channel Info");
    }

    *(CFMutableStringRef *)&__int128 v76 = v71[0];
    WORD4(v76) = 1;
    if (CFDictionaryContainsKey((CFDictionaryRef)v71[0], @"MaxInputChannelCount"))
    {
      uint64_t v51 = (int *)(a1 + 684);
      if ((sub_51A88((const __CFDictionary *)v76, @"MaxInputChannelCount", v51) & 1) == 0)
      {
        uint64_t v52 = (os_log_t *)sub_138E8(17);
        unint64_t v53 = *v52;
        if (*v52)
        {
          if (os_log_type_enabled(*v52, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress inAddress = 136315394;
            *(void *)&inAddress[4] = "Device_HPMic_Aspen.cpp";
            *(_WORD *)&inAddress[12] = 1024;
            *(_DWORD *)&inAddress[14] = 786;
            _os_log_impl( &dword_0,  v53,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Unable to convert max num input channels to UInt32",  inAddress,  0x12u);
          }
        }
      }

      uint64_t v54 = sub_138E8(17);
      if ((*(_BYTE *)(v54 + 8) & 1) != 0)
      {
        uint64_t v55 = *(os_log_s **)v54;
        if (*(void *)v54)
        {
          if (os_log_type_enabled(*(os_log_t *)v54, OS_LOG_TYPE_DEBUG))
          {
            int v56 = *v51;
            *(_DWORD *)AudioObjectPropertyAddress inAddress = 136315650;
            *(void *)&inAddress[4] = "Device_HPMic_Aspen.cpp";
            *(_WORD *)&inAddress[12] = 1024;
            *(_DWORD *)&inAddress[14] = 790;
            *(_WORD *)&inAddress[18] = 1024;
            *(_DWORD *)&inAddress[20] = v56;
            _os_log_impl( &dword_0,  v55,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Codec specified a maximum number of input channels: %u",  inAddress,  0x18u);
          }
        }
      }
    }

    sub_13850((uint64_t)&v76);
  }

  return 1LL;
}

void sub_1DF050(_Unwind_Exception *a1)
{
  if (*(void *)(v1 + 40)) {
    operator delete(*(void **)(v1 + 40));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1DF25C()
{
  if ((sub_1CC090() & 1) != 0) {
    return 0LL;
  }
  uint64_t v1 = (void *)sub_EAD14();
  CFStringRef v3 = CFStringCreateWithCString(0LL, "AOP Audio-1", 0x600u);
  char v4 = 1;
  uint64_t v0 = sub_EAE28(v1, &v3);
  sub_19DFC((uint64_t)&v3);
  return v0;
}

void sub_1DF2D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1DF2E4(uint64_t a1, int a2)
{
  if (a2 > 1886545250)
  {
    switch(a2)
    {
      case 1886545251:
        return 3LL;
      case 1886613611:
        return 4LL;
      case 1886680175:
        return 1LL;
      default:
        goto LABEL_13;
    }
  }

  else
  {
    if (a2 != 1885888867)
    {
      if (a2 != 1885892727)
      {
        if (a2 == 1886154613) {
          return 2LL;
        }
LABEL_13:
        CFStringRef v3 = (os_log_t *)sub_138E8(17);
        char v4 = *v3;
        if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(__p, a2);
          uint64_t v5 = v12 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          char v14 = "Device_HPMic_Aspen.cpp";
          __int16 v15 = 1024;
          int v16 = 872;
          __int16 v17 = 2080;
          unint64_t v18 = v5;
          _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).",  buf,  0x1Cu);
          if (v12 < 0) {
            operator delete(__p[0]);
          }
        }

        AudioObjectID v6 = (os_log_t *)sub_138E8(13);
        uint64_t v7 = *v6;
        if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(__p, a2);
          if (v12 >= 0) {
            unsigned __int8 v8 = __p;
          }
          else {
            unsigned __int8 v8 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          char v14 = "Device_HPMic_Aspen.cpp";
          __int16 v15 = 1024;
          int v16 = 873;
          __int16 v17 = 2080;
          unint64_t v18 = v8;
          _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unsupported VirtualAudioPortType: %s.",  buf,  0x1Cu);
          if (v12 < 0) {
            operator delete(__p[0]);
          }
        }

        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType: %s.");
      }

      return 1LL;
    }

    return 5LL;
  }

void sub_1DF54C(_Unwind_Exception *a1)
{
}

void sub_1DF568(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_138E8(17);
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
  {
    uint64_t v5 = *(os_log_s **)v4;
    if (*(void *)v4)
    {
      if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v6 = *(void *)(a2 + 16);
        sub_1840C0(&__p, *(void *)(a2 + 8), a2);
        uint64_t v7 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        char v14 = "Device_HPMic_Aspen.cpp";
        __int16 v15 = 1024;
        int v16 = 888;
        __int16 v17 = 2048;
        uint64_t v18 = v6;
        __int16 v19 = 2080;
        float v20 = v7;
        _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d inPortList (%zu): %s.", buf, 0x26u);
      }
    }
  }

  BOOL v8 = sub_1FF038(1886154613, a2);
  BOOL v9 = v8;
  if (v8)
  {
    char v10 = (os_log_t *)sub_138E8(13);
    uint64_t v11 = *v10;
    if (*v10)
    {
      if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        char v14 = "Device_HPMic_Aspen.cpp";
        __int16 v15 = 1024;
        int v16 = 891;
        _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Unexpected lineout port",  buf,  0x12u);
      }
    }
  }

  *(_BYTE *)(a1 + 656) = v9;
}

void *sub_1DF718@<X0>(void *result@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  if (a2 == 1886216809)
  {
    uint64_t v3 = *(void *)(result[84] + 24LL);
    if (!v3)
    {
      char v10 = (os_log_t *)sub_138E8(13);
      uint64_t v11 = *v10;
      if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
      {
        __int32 v13 = 136315394;
        char v14 = "Device_HPMic_Aspen.cpp";
        __int16 v15 = 1024;
        int v16 = 907;
        _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [mTransducerDatabase.mBuiltInMicDefaultSubPort is NULL]: No default sub-port specified for built-in mic.",  (uint8_t *)&v13,  0x12u);
      }

      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "No default sub-port specified for built-in mic.");
    }

    uint64_t v4 = *(__int32 **)(v3 + 32);
    uint64_t v5 = *(__int32 **)(v3 + 40);
    if ((unint64_t)((char *)v5 - (char *)v4) >= 0x41 && v4 != v5)
    {
      uint64_t v7 = v4;
      while (v7[8] != 1869442665)
      {
        v7 += 16;
        if (v7 == v5) {
          goto LABEL_15;
        }
      }

      uint64_t v4 = v7;
    }

void sub_1DF8BC(_Unwind_Exception *a1)
{
}

char *sub_1DF8D8@<X0>(char *result@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v3 = (uint64_t)result;
  int v5 = *(_DWORD *)(a2 + 144);
  switch(v5)
  {
    case 1886216809:
      *a3 = 0LL;
      a3[1] = 0LL;
      a3[2] = 0LL;
      sub_1CB3D8((uint64_t)&theData);
      if (v84)
      {
        uint64_t v6 = theData;
        if (theData && (BytePtr = CFDataGetBytePtr(theData), unint64_t Length = CFDataGetLength(v6), BytePtr))
        {
          uint64_t v9 = Length;
          if (Length > 3)
          {
            LODWORD(v10) = *(_DWORD *)BytePtr;
            uint64_t v11 = (os_log_t *)sub_138E8(17);
            char v12 = *v11;
            if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
              int v86 = "Device_HPMic_Aspen.cpp";
              __int16 v87 = 1024;
              int v88 = 1250;
              __int16 v89 = 1024;
              *(_DWORD *)char v90 = WORD1(v10);
              *(_WORD *)&v90[4] = 1024;
              *(_DWORD *)&v90[6] = BYTE1(v10);
              LOWORD(v91) = 1024;
              *(_DWORD *)((char *)&v91 + 2) = v10;
              _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Mic Trim gains: version %d, size %d, entries %d",  buf,  0x24u);
            }

            if (WORD1(v10) != 1 || (v10 & 0xFF00) != 0x200)
            {
              uint64_t v75 = (os_log_t *)sub_138E8(13);
              __int128 v76 = *v75;
              if (*v75 && os_log_type_enabled(*v75, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                int v86 = "Device_HPMic_Aspen.cpp";
                __int16 v87 = 1024;
                int v88 = 1252;
                _os_log_impl( &dword_0,  v76,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
              }

              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(exception, "Precondition failure.");
            }

            unint64_t v10 = v10;
            if ((_BYTE)v10)
            {
              if (v9 > 7)
              {
                __int32 v13 = 0LL;
                unint64_t v39 = (unint64_t)&BytePtr[v9 - 4];
                uint64_t v40 = (int *)(BytePtr + 4);
                unint64_t v10 = v10;
                __int128 v14 = 0uLL;
                do
                {
                  uint64_t v41 = (char *)*((void *)&v14 + 1);
                  CFTypeRef v42 = (char *)v14;
                  unint64_t v43 = (uint64_t)(*((void *)&v14 + 1) - v14) >> 2;
                  int v44 = *v40;
                  float v45 = (double)(*v40 >> 16) * 0.1;
                  if (*((void *)&v14 + 1) >= (unint64_t)v13)
                  {
                    unint64_t v47 = (uint64_t)((uint64_t)v13 - v14) >> 1;
                    if (v47 <= v43 + 1) {
                      unint64_t v47 = v43 + 1;
                    }
                    else {
                      unint64_t v48 = v47;
                    }
                    int v49 = (char *)sub_7A890(v48);
                    uint64_t v51 = (float *)&v49[4 * v43];
                    *uint64_t v51 = v45;
                    uint64_t v46 = v51 + 1;
                    while (v41 != v42)
                    {
                      int v52 = *((_DWORD *)v41 - 1);
                      v41 -= 4;
                      *((_DWORD *)v51-- - 1) = v52;
                    }

                    __int32 v13 = (float *)&v49[4 * v50];
                    *(void *)&__int128 v14 = v51;
                    if (v42)
                    {
                      uint32_t v78 = v51;
                      operator delete(v42);
                      *(void *)&__int128 v14 = v78;
                    }
                  }

                  else
                  {
                    **((float **)&v14 + 1) = v45;
                    uint64_t v46 = (float *)(*((void *)&v14 + 1) + 4LL);
                  }

                  float v53 = (double)(__int16)v44 * 0.1;
                  char v79 = (float *)v14;
                  if (v46 >= v13)
                  {
                    uint64_t v55 = (float *)v14;
                    uint64_t v56 = (uint64_t)((uint64_t)v46 - v14) >> 2;
                    unint64_t v57 = v56 + 1;
                    else {
                      unint64_t v58 = v57;
                    }
                    if (v58) {
                      unint64_t v58 = (unint64_t)sub_7A890(v58);
                    }
                    else {
                      uint64_t v59 = 0LL;
                    }
                    uint64_t v60 = (float *)(v58 + 4 * v56);
                    *uint64_t v60 = v53;
                    uint64_t v54 = v60 + 1;
                    while (v46 != v55)
                    {
                      int v61 = *((_DWORD *)v46-- - 1);
                      *((_DWORD *)v60-- - 1) = v61;
                    }

                    __int32 v13 = (float *)(v58 + 4 * v59);
                    char v79 = v60;
                    if (v55) {
                      operator delete(v55);
                    }
                  }

                  else
                  {
                    *uint64_t v46 = v53;
                    uint64_t v54 = v46 + 1;
                  }

                  *(void *)&__int128 v62 = v79;
                  *((void *)&v62 + 1) = v54;
                  __int128 v80 = v62;
                  int v63 = (os_log_t *)sub_138E8(17);
                  float v64 = *v63;
                  if (*v63 && os_log_type_enabled(*v63, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                    int v86 = "Device_HPMic_Aspen.cpp";
                    __int16 v87 = 1024;
                    int v88 = 1271;
                    __int16 v89 = 2048;
                    *(double *)char v90 = v45;
                    *(_WORD *)&v90[8] = 2048;
                    double v91 = v53;
                    _os_log_impl(&dword_0, v64, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Parsed trim gains: %f %f", buf, 0x26u);
                  }

                  ++v40;
                  __int128 v14 = v80;
                }

                while ((unint64_t)v40 <= v39);
              }

              else
              {
                __int32 v13 = 0LL;
                __int128 v14 = 0uLL;
              }

              uint64_t v65 = *((void *)&v14 + 1);
              if (v10 < (uint64_t)(*((void *)&v14 + 1) - v14) >> 2)
              {
                uint64_t v66 = *((void *)&v14 + 1) - v14 - 4;
                do
                {
                  v65 -= 4LL;
                  BOOL v21 = v10 >= v66 >> 2;
                  v66 -= 4LL;
                }

                while (!v21);
                *((void *)&v14 + 1) = v65;
              }
            }

            else
            {
              __int128 v37 = (os_log_t *)sub_138E8(17);
              int v38 = *v37;
              __int128 v14 = 0uLL;
              if (*v37)
              {
                if (os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                  int v86 = "Device_HPMic_Aspen.cpp";
                  __int16 v87 = 1024;
                  int v88 = 1256;
                  _os_log_impl( &dword_0,  v38,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Number of Mic trim gain entries is zero",  buf,  0x12u);
                }

                __int32 v13 = 0LL;
                __int128 v14 = 0uLL;
              }

              else
              {
                __int32 v13 = 0LL;
              }
            }

            *(_OWORD *)a3 = v14;
            a3[2] = (char *)v13;
            return (char *)sub_184088((uint64_t)&theData);
          }

          AudioObjectPropertyAddress v72 = (os_log_t *)sub_138E8(13);
          __int128 v73 = *v72;
          if (*v72 && os_log_type_enabled(*v72, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            int v86 = "Device_HPMic_Aspen.cpp";
            __int16 v87 = 1024;
            int v88 = 1238;
            _os_log_impl( &dword_0,  v73,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
          }
        }

        else
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = (os_log_t *)sub_138E8(13);
          char v68 = *v67;
          if (*v67 && os_log_type_enabled(*v67, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            int v86 = "Device_HPMic_Aspen.cpp";
            __int16 v87 = 1024;
            int v88 = 1237;
            _os_log_impl( &dword_0,  v68,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
          }
        }

        __int128 v74 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v74, "Precondition failure.");
      }

      uint64_t v15 = *(void *)(v3 + 664);
      uint64_t v18 = *(void *)(v15 + 72);
      uint64_t v16 = v15 + 72;
      uint64_t v17 = v18;
      if (!v18) {
        goto LABEL_115;
      }
      uint64_t v19 = v16;
      do
      {
        unsigned int v20 = *(_DWORD *)(v17 + 32);
        BOOL v21 = v20 >= 0x706D6269;
        if (v20 >= 0x706D6269) {
          int v22 = (uint64_t *)v17;
        }
        else {
          int v22 = (uint64_t *)(v17 + 8);
        }
        if (v21) {
          uint64_t v19 = v17;
        }
        uint64_t v17 = *v22;
      }

      while (*v22);
      if (v19 == v16 || *(_DWORD *)(v19 + 32) > 0x706D6269u)
      {
LABEL_115:
        __int128 v69 = (os_log_t *)sub_138E8(13);
        uint64_t v70 = *v69;
        if (*v69 && os_log_type_enabled(*v69, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          int v86 = "Device_HPMic_Aspen.cpp";
          __int16 v87 = 1024;
          int v88 = 1295;
          _os_log_impl( &dword_0,  v70,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unable to locate built-in mic sub-port information",  buf,  0x12u);
        }

        std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v71 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v71, "Unable to locate built-in mic sub-port information");
      }

      __int16 v23 = *(int **)(v19 + 40);
      if (*(int **)(v19 + 48) != v23)
      {
        unint64_t v24 = 0LL;
        unint64_t v25 = 0LL;
        UInt32 v26 = 0LL;
        do
        {
          uint64_t v27 = sub_138E8(17);
          if ((*(_BYTE *)(v27 + 8) & 1) != 0)
          {
            os_log_t v28 = *(os_log_s **)v27;
            if (*(void *)v27)
            {
              if (os_log_type_enabled(*(os_log_t *)v27, OS_LOG_TYPE_DEBUG))
              {
                sub_2CA1C(__p, *v23);
                __int16 v29 = __p;
                if (v82 < 0) {
                  __int16 v29 = (void **)__p[0];
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                int v86 = "Device_HPMic_Aspen.cpp";
                __int16 v87 = 1024;
                int v88 = 1301;
                __int16 v89 = 2080;
                *(void *)char v90 = v29;
                _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Setting trim for Data Source ID %s",  buf,  0x1Cu);
                if (v82 < 0) {
                  operator delete(__p[0]);
                }
              }
            }
          }

          *(_DWORD *)AudioObjectPropertyAddress buf = 0;
          if (sub_184000(v3, 1768845428, *v23, (uint64_t)buf))
          {
            if ((unint64_t)v26 >= v25)
            {
              uint64_t v31 = (v26 - v24) >> 2;
              unint64_t v32 = v31 + 1;
              else {
                unint64_t v33 = v32;
              }
              if (v33) {
                unint64_t v33 = (unint64_t)sub_7A890(v33);
              }
              else {
                uint64_t v34 = 0LL;
              }
              unsigned int v35 = (char *)(v33 + 4 * v31);
              *(_DWORD *)unsigned int v35 = *(_DWORD *)buf;
              int v30 = v35 + 4;
              while (v26 != v24)
              {
                int v36 = *((_DWORD *)v26 - 1);
                v26 -= 4;
                *((_DWORD *)v35 - 1) = v36;
                v35 -= 4;
              }

              unint64_t v25 = v33 + 4 * v34;
              *a3 = v35;
              a3[1] = v30;
              a3[2] = (char *)v25;
              if (v24) {
                operator delete(v24);
              }
              unint64_t v24 = v35;
            }

            else
            {
              *(_DWORD *)UInt32 v26 = *(_DWORD *)buf;
              int v30 = v26 + 4;
            }

            a3[1] = v30;
            UInt32 v26 = v30;
          }

          ++v23;
        }

        while (*(int **)(v19 + 48) != v23);
      }

      return (char *)sub_184088((uint64_t)&theData);
    case 1886545251:
      *a3 = 0LL;
      a3[1] = 0LL;
      a3[2] = 0LL;
      *(_DWORD *)AudioObjectPropertyAddress buf = 0;
      uint64_t result = (char *)sub_184000((uint64_t)result, 1869968496, 3, (uint64_t)buf);
      if ((_DWORD)result)
      {
LABEL_7:
        uint64_t result = (char *)operator new(4uLL);
        *(_DWORD *)uint64_t result = *(_DWORD *)buf;
        *a3 = result;
        a3[1] = result + 4;
        a3[2] = result + 4;
      }

      break;
    case 1886613611:
      *a3 = 0LL;
      a3[1] = 0LL;
      a3[2] = 0LL;
      *(_DWORD *)AudioObjectPropertyAddress buf = 0;
      uint64_t result = (char *)sub_184000((uint64_t)result, 1869968496, 4, (uint64_t)buf);
      if ((_DWORD)result) {
        goto LABEL_7;
      }
      break;
    default:
      *a3 = 0LL;
      a3[1] = 0LL;
      a3[2] = 0LL;
      break;
  }

  return result;
}

void sub_1E027C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }

  _Unwind_Resume(a1);
}

void sub_1E0340(uint64_t a1, unsigned int **a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 664);
  if (!v3)
  {
    uint64_t v4 = (os_log_t *)sub_138E8(13);
    int v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      BOOL v8 = "Device_HPMic_Aspen.cpp";
      __int16 v9 = 1024;
      int v10 = 898;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): No valid support policy present",  (uint8_t *)&v7,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "No valid support policy present");
  }

  sub_2E0360(v3, a2, a3);
}

void sub_1E0434(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1E0450(uint64_t a1)
{
  *(void *)&inAddress.int mSelector = 0x6F7574706A61636BLL;
  inAddress.AudioObjectPropertyElement mElement = 0;
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)&qword_490C70);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_490C70))
  {
    AudioObjectID v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
    byte_490C68 = AudioObjectHasProperty(v3, &inAddress) != 0;
    __cxa_guard_release(&qword_490C70);
  }

  return byte_490C68;
}

void sub_1E04E8(_Unwind_Exception *a1)
{
}

BOOL sub_1E0500(uint64_t a1)
{
  if ((sub_93B80() & 1) != 0) {
    return 0LL;
  }
  *(void *)&v7.int mSelector = 0x696E70746A61636BLL;
  v7.AudioObjectPropertyElement mElement = 0;
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)&qword_490C80);
  uint64_t v4 = &unk_490000;
  if ((v3 & 1) == 0)
  {
    int v5 = __cxa_guard_acquire(&qword_490C80);
    uint64_t v4 = (_BYTE *)&unk_490000;
    if (v5)
    {
      AudioObjectID v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
      byte_490C78 = AudioObjectHasProperty(v6, &v7) == 1;
      __cxa_guard_release(&qword_490C80);
      uint64_t v4 = &unk_490000;
    }
  }

  return v4[3192] != 0;
}

void sub_1E05B4(_Unwind_Exception *a1)
{
}

unint64_t sub_1E05CC(uint64_t a1)
{
  float v2 = (uint64_t *)(a1 + 4);
  *(void *)&buf.int mSelector = *(void *)(a1 + 4);
  UInt32 v3 = *(_DWORD *)(a1 + 16);
  buf.AudioObjectPropertyElement mElement = *(_DWORD *)(a1 + 12);
  unint64_t v4 = sub_36EF4((AudioObjectID *)a1, &buf, v3, *(const void **)(a1 + 24));
  char v6 = v5;
  if ((_DWORD)v4)
  {
    AudioObjectPropertyAddress v7 = (os_log_t *)sub_138E8(13);
    BOOL v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v20, v4);
        int v9 = v21;
        int v10 = (void **)v20[0];
        uint64_t v16 = *v2;
        int v17 = *((_DWORD *)v2 + 2);
        sub_613AC((uint64_t)__p, (unsigned int *)&v16);
        uint64_t v11 = v20;
        if (v9 < 0) {
          uint64_t v11 = v10;
        }
        if (v19 >= 0) {
          char v12 = __p;
        }
        else {
          char v12 = (void **)__p[0];
        }
        AudioObjectID v13 = *(_DWORD *)a1;
        buf.int mSelector = 136316418;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v23 = 1024;
        int v24 = 176;
        __int16 v25 = 1024;
        int v26 = v4;
        __int16 v27 = 2080;
        os_log_t v28 = v11;
        __int16 v29 = 2080;
        int v30 = v12;
        __int16 v31 = 1024;
        AudioObjectID v32 = v13;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) reading property data for property %s on id %u.",  (uint8_t *)&buf,  0x32u);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
        if (v21 < 0) {
          operator delete(v20[0]);
        }
      }
    }
  }

  unint64_t v14 = HIDWORD(v4);
  if (!v6) {
    unint64_t v14 = 0LL;
  }
  return v14 | (v4 << 32);
}

void sub_1E0774(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1E0794(uint64_t a1)
{
  *(void *)a1 = off_475188;
  uint64_t v2 = *(void *)(a1 + 664);
  *(void *)(a1 + 664) = 0LL;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
  }
  sub_67FE8(a1 + 600);
  *(void *)(a1 + 512) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 536));
  sub_189BF4((uint64_t *)(a1 + 504));
  uint64_t v3 = *(void *)(a1 + 496);
  *(void *)(a1 + 496) = 0LL;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
  }
  return sub_36F1E0(a1);
}

uint64_t sub_1E0818(uint64_t a1, AudioObjectPropertySelector a2, const __CFString *a3)
{
  char v6 = (void *)sub_36E3FC(a1, a2, a3, a3, 0LL);
  *char v6 = off_475188;
  *(void *)(a1 + 496) = 0LL;
  *(void *)(a1 + 504) = 0LL;
  sub_189C20((uint64_t)(v6 + 64));
  *(_BYTE *)(a1 + 656) = 0;
  if (sub_93B80())
  {
    *(void *)(a1 + 664) = 0LL;
  }

  else
  {
    *(void *)AudioObjectPropertyAddress inAddress = &inAddress[8];
    *(void *)&inAddress[8] = 0LL;
    v24[0] = 0LL;
    v24[1] = 0LL;
    *(void *)&inAddress[16] = 0LL;
    __int16 v23 = v24;
    sub_2DE180((uint64_t *)inAddress, 0x706D6269u, 1768778083);
    sub_2DE180((uint64_t *)inAddress, 0x706D6269u, 1768778033);
    sub_2DE180((uint64_t *)inAddress, 0x706D7769u, 1701669219);
    sub_2DE180((uint64_t *)inAddress, 0x70747469u, 1701669219);
    sub_2DE334((uint64_t)inAddress, 0x656D6963u, 1886222185);
    sub_2DE334((uint64_t)inAddress, 0x656D6963u, 1886680169);
    sub_2DE334((uint64_t)inAddress, 0x696D6963u, 1886216809);
    sub_2DE334((uint64_t)inAddress, 0x696D6931u, 1886216809);
    sub_2DE334((uint64_t)inAddress, 0x736D6963u, 1886216809);
    sub_2DE334((uint64_t)inAddress, 0x696D6932u, 1886216809);
    sub_2DE334((uint64_t)inAddress, 0x6C6D6963u, 1886216809);
    sub_2DE334((uint64_t)inAddress, 0x666D6963u, 1886216809);
    sub_2DE334((uint64_t)inAddress, 0x6265616Du, 1886216809);
    AudioObjectPropertyAddress v7 = operator new(0x78uLL);
    sub_2DFDA8((uint64_t)v7, a2, inAddress);
    *(void *)(a1 + 664) = v7;
    sub_8DF20(v24[0]);
    sub_8DF20(*(void **)&inAddress[8]);
  }

  *(void *)(a1 + 672) = sub_33341C();
  *(_BYTE *)(a1 + 680) = 0;
  *(_DWORD *)(a1 + 684) = 2;
  *(_BYTE *)(a1 + 688) = 0;
  *(_DWORD *)(a1 + 692) = 0;
  if (!a2)
  {
    AudioObjectID v13 = (os_log_t *)sub_138E8(13);
    unint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress inAddress = 136315394;
      *(void *)&inAddress[4] = "Device_HPMic_Aspen.cpp";
      *(_WORD *)&inAddress[12] = 1024;
      *(_DWORD *)&inAddress[14] = 238;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  inAddress,  0x12u);
    }

    goto LABEL_13;
  }

  if (!a3)
  {
    uint64_t v16 = (os_log_t *)sub_138E8(13);
    int v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress inAddress = 136315394;
      *(void *)&inAddress[4] = "Device_HPMic_Aspen.cpp";
      *(_WORD *)&inAddress[12] = 1024;
      *(_DWORD *)&inAddress[14] = 239;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  inAddress,  0x12u);
    }

void sub_1E0CA4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v18 = *(void *)(v15 + 664);
  *(void *)(v15 + 664) = 0LL;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8LL))(v18);
  }
  sub_67FE8(v15 + 600);
  *(void *)(v15 + 512) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(v15 + 536));
  sub_189BF4((uint64_t *)(v15 + 504));
  uint64_t v19 = *(void *)(v15 + 496);
  *(void *)(v15 + 496) = 0LL;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8LL))(v19);
  }
  sub_36F1E0(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_1E0D98(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 8) + 16LL))( *(void *)(a1 + 8),  &qword_490BC8);
  if ((_DWORD)result)
  {
    uint64_t v3 = (os_log_t *)sub_138E8(17);
    unint64_t v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_INFO))
      {
        int v6 = 136315394;
        AudioObjectPropertyAddress v7 = "Device_HPMic_Aspen.cpp";
        __int16 v8 = 1024;
        int v9 = 108;
        _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_INFO,  "%25s:%-5d Requesting HPMic power to be enabled.",  (uint8_t *)&v6,  0x12u);
      }
    }

    uint64_t v5 = *(void *)(a1 + 8);
    int v6 = 1;
    return sub_189E54(v5);
  }

  return result;
}

uint64_t sub_1E0E8C(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 8) + 16LL))( *(void *)(a1 + 8),  &qword_490BC8);
  if ((_DWORD)result)
  {
    uint64_t v3 = (os_log_t *)sub_138E8(17);
    unint64_t v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_INFO))
      {
        int v6 = 136315394;
        AudioObjectPropertyAddress v7 = "Device_HPMic_Aspen.cpp";
        __int16 v8 = 1024;
        int v9 = 120;
        _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_INFO,  "%25s:%-5d Requesting HPMic power to be disabled.",  (uint8_t *)&v6,  0x12u);
      }
    }

    uint64_t v5 = *(void *)(a1 + 8);
    int v6 = 0;
    return sub_189E54(v5);
  }

  return result;
}

void sub_1E0F7C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_475370;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1E0F8C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_475370;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1E0FAC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1E0FC0(uint64_t a1)
{
  unsigned __int8 v1 = (void *)sub_1E4A68(a1);
  operator delete(v1);
}

BOOL sub_1E0FD4(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  int mSelector = a2->mSelector;
  BOOL result = 1LL;
  if ((int)a2->mSelector > 1986229103)
  {
    BOOL v6 = mSelector == 1986229104 || mSelector == 1986290211;
    int v7 = 1987013732;
  }

  else
  {
    BOOL v6 = mSelector == 1836414053 || mSelector == 1853059619;
    int v7 = 1853059700;
  }

  if (!v6 && mSelector != v7)
  {
    sub_1BB60((std::mutex *)a1);
    return AudioObjectHasProperty(*(_DWORD *)(a1 + 268), a2) != 0;
  }

  return result;
}

uint64_t sub_1E1078(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  AudioObjectPropertySelector mSelector = a2->mSelector;
  uint64_t result = 1LL;
  if ((int)a2->mSelector <= 1986229103)
  {
    if (mSelector == 1836414053) {
      return result;
    }
    if (mSelector != 1853059619)
    {
      if (mSelector == 1853059700) {
        return result;
      }
      return sub_36854C(a1, a2);
    }

    return 0LL;
  }

  if (mSelector == 1986229104) {
    return 0LL;
  }
  if (mSelector != 1987013732)
  {
    if (mSelector != 1986290211) {
      return sub_36854C(a1, a2);
    }
    return 0LL;
  }

  return result;
}

uint64_t sub_1E1108(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    uint64_t v11 = (os_log_t *)sub_138E8(13);
    char v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v19);
      AudioObjectID v13 = v22 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)CFArrayRef theArray = 136315650;
      *(void *)&theArray[4] = "Device_USB_iAP_Aspen.cpp";
      __int16 v24 = 1024;
      int v25 = 165;
      __int16 v26 = 2080;
      __int16 v27 = v13;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  theArray,  0x1Cu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((a3 != 0) == (a4 == 0LL))
  {
    uint64_t v15 = (os_log_t *)sub_138E8(13);
    uint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v19);
      int v17 = v22 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)CFArrayRef theArray = 136316162;
      *(void *)&theArray[4] = "Device_USB_iAP_Aspen.cpp";
      __int16 v24 = 1024;
      int v25 = 166;
      __int16 v26 = 2080;
      __int16 v27 = v17;
      __int16 v28 = 1024;
      UInt32 v29 = a3;
      __int16 v30 = 2048;
      __int16 v31 = a4;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        theArray,
        0x2Cu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v18 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v18 = &off_4865A0;
    v18[2] = 561211770;
  }

  AudioObjectPropertySelector mSelector = a2->mSelector;
  uint64_t v9 = 4LL;
  if ((int)a2->mSelector > 1986229103)
  {
    if (mSelector == 1986229104 || mSelector == 1987013732) {
      return v9;
    }
    if (mSelector == 1986290211) {
      return 16LL;
    }
    return sub_21524(a1, a2, a3, a4);
  }

  if (mSelector != 1836414053)
  {
    if (mSelector == 1853059619)
    {
      sub_1F5BDC((uint64_t)theArray);
      if (*(void *)theArray) {
        uint64_t v9 = 16 * CFArrayGetCount(*(CFArrayRef *)theArray);
      }
      else {
        uint64_t v9 = 0LL;
      }
      sub_13818((uint64_t)theArray);
      return v9;
    }

    if (mSelector == 1853059700) {
      return 8LL;
    }
    return sub_21524(a1, a2, a3, a4);
  }

  return v9;
}

void sub_1E1484( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1E14A0( uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4, UInt32 *a5, double *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    char v22 = (os_log_t *)sub_138E8(13);
    __int16 v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      uint64_t v37 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)theArray, (unsigned int *)&v37);
      __int16 v24 = v40 >= 0 ? theArray : (CFArrayRef *)theArray[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      CFTypeRef v42 = "Device_USB_iAP_Aspen.cpp";
      __int16 v43 = 1024;
      int v44 = 200;
      __int16 v45 = 2080;
      uint64_t v46 = (const char *)v24;
      _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v40 < 0) {
        operator delete(theArray[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((a3 != 0) == (a4 == 0LL))
  {
    __int16 v26 = (os_log_t *)sub_138E8(13);
    __int16 v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      uint64_t v37 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)theArray, (unsigned int *)&v37);
      __int16 v28 = v40 >= 0 ? theArray : (CFArrayRef *)theArray[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      CFTypeRef v42 = "Device_USB_iAP_Aspen.cpp";
      __int16 v43 = 1024;
      int v44 = 201;
      __int16 v45 = 2080;
      uint64_t v46 = (const char *)v28;
      __int16 v47 = 1024;
      LODWORD(v48[0]) = a3;
      WORD2(v48[0]) = 2048;
      *(void *)((char *)v48 + 6) = a4;
      _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v40 < 0) {
        operator delete(theArray[0]);
      }
    }

    UInt32 v29 = __cxa_allocate_exception(0x10uLL);
    *(void *)UInt32 v29 = &off_4865A0;
    void v29[2] = 561211770;
  }

  if (!a6)
  {
    __int16 v30 = (os_log_t *)sub_138E8(13);
    __int16 v31 = *v30;
    if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
    {
      uint64_t v37 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)theArray, (unsigned int *)&v37);
      AudioObjectID v32 = v40 >= 0 ? theArray : (CFArrayRef *)theArray[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      CFTypeRef v42 = "Device_USB_iAP_Aspen.cpp";
      __int16 v43 = 1024;
      int v44 = 202;
      __int16 v45 = 2080;
      uint64_t v46 = "outData";
      __int16 v47 = 2080;
      v48[0] = v32;
      _os_log_impl( &dword_0,  v31,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
      if (v40 < 0) {
        operator delete(theArray[0]);
      }
    }

    unint64_t v33 = __cxa_allocate_exception(0x10uLL);
    *(void *)unint64_t v33 = &off_4865A0;
    v33[2] = 561211770;
  }

  AudioObjectPropertySelector mSelector = a2->mSelector;
  if ((int)a2->mSelector <= 1986229103)
  {
    if (mSelector != 1836414053)
    {
      if (mSelector != 1853059619)
      {
        if (mSelector == 1853059700)
        {
          (*(void (**)(uint64_t))(*(void *)a1 + 104LL))(a1);
          sub_B8B14(a5, a6, v13);
          return;
        }

void sub_1E1AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

void sub_1E1ACC( void *a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4, UInt32 a5, float *a6)
{
  if (((*(uint64_t (**)(void *))(*a1 + 16LL))(a1) & 1) == 0)
  {
    uint64_t v19 = (os_log_t *)sub_138E8(13);
    uint64_t v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      uint64_t v38 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v38);
      unint64_t v21 = v41 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      __int16 v43 = "Device_USB_iAP_Aspen.cpp";
      __int16 v44 = 1024;
      int v45 = 234;
      __int16 v46 = 2080;
      __int16 v47 = (const char *)v21;
      _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v41 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((a3 != 0) == (a4 == 0LL))
  {
    __int16 v23 = (os_log_t *)sub_138E8(13);
    __int16 v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      uint64_t v38 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v38);
      int v25 = v41 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      __int16 v43 = "Device_USB_iAP_Aspen.cpp";
      __int16 v44 = 1024;
      int v45 = 235;
      __int16 v46 = 2080;
      __int16 v47 = (const char *)v25;
      __int16 v48 = 1024;
      LODWORD(v49[0]) = a3;
      WORD2(v49[0]) = 2048;
      *(void *)((char *)v49 + 6) = a4;
      _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v41 < 0) {
        operator delete(__p[0]);
      }
    }

    __int16 v26 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v26 = &off_4865A0;
    v26[2] = 561211770;
  }

  if (!a6)
  {
    __int16 v27 = (os_log_t *)sub_138E8(13);
    __int16 v28 = *v27;
    if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
    {
      uint64_t v38 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v38);
      UInt32 v29 = v41 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      __int16 v43 = "Device_USB_iAP_Aspen.cpp";
      __int16 v44 = 1024;
      int v45 = 236;
      __int16 v46 = 2080;
      __int16 v47 = "inData";
      __int16 v48 = 2080;
      v49[0] = v29;
      _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
      if (v41 < 0) {
        operator delete(__p[0]);
      }
    }

    __int16 v30 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v30 = &off_4865A0;
    v30[2] = 561211770;
  }

  if (((*(uint64_t (**)(void *, const AudioObjectPropertyAddress *))(*a1 + 24LL))(a1, a2) & 1) == 0)
  {
    __int16 v31 = (os_log_t *)sub_138E8(13);
    AudioObjectID v32 = *v31;
    if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
    {
      uint64_t v38 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v38);
      unint64_t v33 = v41 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      __int16 v43 = "Device_USB_iAP_Aspen.cpp";
      __int16 v44 = 1024;
      int v45 = 237;
      __int16 v46 = 2080;
      __int16 v47 = (const char *)v33;
      _os_log_impl( &dword_0,  v32,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not settable.",  buf,  0x1Cu);
      if (v41 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v34 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v34 = &off_4865A0;
    void v34[2] = 1852797029;
  }

  AudioObjectPropertySelector mSelector = a2->mSelector;
  if ((int)a2->mSelector <= 1853059699)
  {
    if (mSelector == 1836414053)
    {
      uint64_t v16 = sub_1F4000();
      sub_1F57EC(v16, *(_DWORD *)a6 != 0);
      return;
    }

    if (mSelector == 1853059619)
    {
      unsigned int v35 = (os_log_t *)sub_138E8(13);
      int v36 = *v35;
      if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        __int16 v43 = "Device_USB_iAP_Aspen.cpp";
        __int16 v44 = 1024;
        int v45 = 260;
        _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnsupportedOperationError): kAudioDevicePropertyAvailableNominalSampleRat es cannot be set (kAudioHardwareUnsupportedOperationError).",  buf,  0x12u);
      }

      uint64_t v37 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v37 = &off_4865A0;
      v37[2] = 1970171760;
    }

    goto LABEL_22;
  }

  if (mSelector != 1853059700)
  {
    if (mSelector == 1987013732)
    {
      uint64_t v13 = sub_1F4000();
      if (sub_1F4DF8(v13))
      {
        float v14 = (float)(*a6 + 100.0) / 100.0;
        uint64_t v15 = sub_1F4000();
        sub_1F51DC(v15, v14);
      }

      return;
    }

BOOL sub_1E2258( uint64_t a1, const AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  if ((*(void *)&a2->mSelector != qword_490D40 || a2->mElement != dword_490D48)
    && (*(void *)&a2->mSelector != qword_490D50 || a2->mElement != dword_490D58)
    && (*(void *)&a2->mSelector != qword_490D60 || a2->mElement != dword_490D68))
  {
    return sub_368FB0(a1, a2, a3, a4);
  }

  uint64_t v9 = *(void *)&a2->mSelector;
  AudioObjectPropertyElement mElement = a2->mElement;
  uint64_t v5 = *(void *)&a2->mSelector;
  AudioObjectPropertyElement v6 = a2->mElement;
  int v7 = a3;
  __int16 v8 = a4;
  sub_1885D4((void *)(a1 + 496), (unsigned int *)&v9, (unsigned int *)&v5);
  return 1LL;
}

BOOL sub_1E2360( uint64_t a1, const AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  if (*(void *)&a2->mSelector == qword_490D40 && a2->mElement == dword_490D48
    || *(void *)&a2->mSelector == qword_490D50 && a2->mElement == dword_490D58
    || *(void *)&a2->mSelector == qword_490D60 && a2->mElement == dword_490D68)
  {
    uint64_t v8 = *(void *)&a2->mSelector;
    uint64_t v13 = a4;
    uint64_t v14 = v8;
    AudioObjectPropertyElement mElement = a2->mElement;
    uint64_t v10 = *(void *)&a2->mSelector;
    AudioObjectPropertyElement v11 = a2->mElement;
    char v12 = a3;
    sub_18803C((uint64_t **)(a1 + 496), (unsigned int *)&v14, (unsigned int *)&v10);
    return 1LL;
  }

  else
  {
    sub_1BB60((std::mutex *)a1);
    return AudioObjectRemovePropertyListener(*(_DWORD *)(a1 + 268), a2, a3, a4) == 0;
  }

unsigned __int8 *sub_1E24A4(uint64_t a1)
{
  uint64_t v2 = (uint64_t **)sub_1F4000();
  sub_1F440C(v2, (unint64_t)sub_1E3EB8);
  uint64_t v3 = (void *)sub_1F4000();
  sub_1F4AD0(v3, 1684500341, (unint64_t)sub_1E496C);
  return sub_369228(a1);
}

void sub_1E24EC(uint64_t a1)
{
  uint64_t v2 = sub_138E8(17);
  uint64_t v3 = sub_138E8(37);
  char v4 = 0;
  uint64_t v5 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v6 = *(void *)(v2 + 8);
  while (1)
  {
    uint64_t v7 = *(int *)&buf[4 * v5];
    char v8 = v4;
    if (((v6 & v7) != 0) != ((*(void *)(v3 + 8) & v7) != 0)) {
      break;
    }
    char v4 = 1;
    uint64_t v5 = 1LL;
    if ((v8 & 1) != 0) {
      goto LABEL_7;
    }
  }

  if ((v6 & v7) == 0) {
    uint64_t v2 = v3;
  }
LABEL_7:
  uint64_t v9 = sub_138E8(36);
  char v10 = 0;
  uint64_t v11 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v12 = *(void *)(v2 + 8);
  while (1)
  {
    uint64_t v13 = *(int *)&buf[4 * v11];
    char v14 = v10;
    if (((v12 & v13) != 0) != ((*(void *)(v9 + 8) & v13) != 0)) {
      break;
    }
    char v10 = 1;
    uint64_t v11 = 1LL;
    if ((v14 & 1) != 0) {
      goto LABEL_13;
    }
  }

  if ((v12 & v13) == 0) {
    uint64_t v2 = v9;
  }
LABEL_13:
  uint64_t v15 = *(os_log_s **)v2;
  if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "Device_USB_iAP_Aspen.cpp";
    __int16 v54 = 1024;
    int v55 = 355;
    _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Entered Device_USB_iAP_Aspen::GetSampleRate().",  buf,  0x12u);
  }

  uint64_t outData = 0LL;
  UInt32 ioDataSize = 8;
  AudioObjectID v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
  OSStatus PropertyData = AudioObjectGetPropertyData( v16,  (const AudioObjectPropertyAddress *)&qword_490D30,  0,  0LL,  &ioDataSize,  &outData);
  if (PropertyData)
  {
    OSStatus v47 = PropertyData;
    __int16 v48 = (os_log_t *)sub_138E8(13);
    int v49 = *v48;
    if (*v48 && os_log_type_enabled(*v48, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_USB_iAP_Aspen.cpp";
      __int16 v54 = 1024;
      int v55 = 361;
      _os_log_impl( &dword_0,  v49,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: AudioObjectGetPropertyData() failed to get sample rate.",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = v47;
  }

  uint64_t v18 = sub_138E8(17);
  uint64_t v19 = sub_138E8(37);
  char v20 = 0;
  uint64_t v21 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v22 = *(void *)(v18 + 8);
  while (1)
  {
    uint64_t v23 = *(int *)&buf[4 * v21];
    char v24 = v20;
    if (((v22 & v23) != 0) != ((*(void *)(v19 + 8) & v23) != 0)) {
      break;
    }
    char v20 = 1;
    uint64_t v21 = 1LL;
    if ((v24 & 1) != 0) {
      goto LABEL_23;
    }
  }

  if ((v22 & v23) == 0) {
    uint64_t v18 = v19;
  }
LABEL_23:
  uint64_t v25 = sub_138E8(36);
  char v26 = 0;
  uint64_t v27 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v28 = *(void *)(v18 + 8);
  while (1)
  {
    uint64_t v29 = *(int *)&buf[4 * v27];
    char v30 = v26;
    if (((v28 & v29) != 0) != ((*(void *)(v25 + 8) & v29) != 0)) {
      break;
    }
    char v26 = 1;
    uint64_t v27 = 1LL;
    if ((v30 & 1) != 0) {
      goto LABEL_29;
    }
  }

  if ((v28 & v29) == 0) {
    uint64_t v18 = v25;
  }
LABEL_29:
  __int16 v31 = *(os_log_s **)v18;
  if (v31 && os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
  {
    int v32 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "Device_USB_iAP_Aspen.cpp";
    __int16 v54 = 1024;
    int v55 = 362;
    __int16 v56 = 1024;
    int v57 = v32;
    __int16 v58 = 2048;
    uint64_t v59 = outData;
    _os_log_impl( &dword_0,  v31,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d USB HAL device %u reports a sample rate of %f.",  buf,  0x22u);
  }

  uint64_t v33 = sub_138E8(17);
  uint64_t v34 = sub_138E8(37);
  char v35 = 0;
  uint64_t v36 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v37 = *(void *)(v33 + 8);
  while (1)
  {
    uint64_t v38 = *(int *)&buf[4 * v36];
    char v39 = v35;
    if (((v37 & v38) != 0) != ((*(void *)(v34 + 8) & v38) != 0)) {
      break;
    }
    char v35 = 1;
    uint64_t v36 = 1LL;
    if ((v39 & 1) != 0) {
      goto LABEL_38;
    }
  }

  if ((v37 & v38) == 0) {
    uint64_t v33 = v34;
  }
LABEL_38:
  uint64_t v40 = sub_138E8(36);
  char v41 = 0;
  uint64_t v42 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v43 = *(void *)(v33 + 8);
  while (1)
  {
    uint64_t v44 = *(int *)&buf[4 * v42];
    char v45 = v41;
    if (((v43 & v44) != 0) != ((*(void *)(v40 + 8) & v44) != 0)) {
      break;
    }
    char v41 = 1;
    uint64_t v42 = 1LL;
    if ((v45 & 1) != 0) {
      goto LABEL_44;
    }
  }

  if ((v43 & v44) == 0) {
    uint64_t v33 = v40;
  }
LABEL_44:
  __int16 v46 = *(os_log_s **)v33;
  if (v46)
  {
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_USB_iAP_Aspen.cpp";
      __int16 v54 = 1024;
      int v55 = 364;
      _os_log_impl( &dword_0,  v46,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Exited Device_USB_iAP_Aspen::GetSampleRate().",  buf,  0x12u);
    }
  }

uint64_t sub_1E29B0(uint64_t a1, double a2)
{
  uint64_t v4 = sub_138E8(17);
  uint64_t v5 = sub_138E8(36);
  char v6 = 0;
  uint64_t v7 = 0LL;
  *(void *)uint64_t v13 = 0x100000002LL;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = *(int *)&v13[4 * v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1LL;
    if ((v10 & 1) != 0) {
      goto LABEL_7;
    }
  }

  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
LABEL_7:
  uint64_t v11 = *(os_log_s **)v4;
  if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t v13 = 136315650;
    *(void *)&void v13[4] = "Device_USB_iAP_Aspen.cpp";
    __int16 v14 = 1024;
    int v15 = 374;
    __int16 v16 = 2048;
    double v17 = a2;
    _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting iAP sample rate to %f Hz", v13, 0x1Cu);
  }

  sub_1E363C(a1, 1, a2);
  return 0LL;
}

void sub_1E2B00(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1E2ACCLL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1E2B30(os_unfair_lock_s *a1)
{
  uint64_t v2 = operator new(0x1E0uLL);
  sub_1C88B8((uint64_t)v2, (uint64_t)a1, 1869968496LL, 0, 0, 10, 0LL);
  sub_1D5AE0(a1, (uint64_t)v2);
  sub_1D55D4((uint64_t *)a1, 1u, 1886745455LL, (uint64_t)v2);
  sub_1D580C((uint64_t)a1, 1u, 1886745455LL, (uint64_t)v2);
  uint64_t v3 = (os_log_t *)sub_138E8(17);
  uint64_t v4 = *v3;
  if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(__int128 *__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 128LL))( &v16,  a1);
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "Device_USB_iAP_Aspen.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    int v18 = 332;
    __int16 v19 = 2112;
    v20[0] = v16;
    _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d creating an iAP USB output port with UID %@",  buf,  0x1Cu);
    sub_19DFC((uint64_t)&v16);
  }

  (*(void (**)(CFStringRef *__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 128LL))( v14,  a1);
  uint64_t v5 = operator new(0x280uLL);
  v5[1] = 0LL;
  v5[2] = 0LL;
  *uint64_t v5 = off_485B48;
  *(void *)AudioObjectPropertyAddress buf = qword_490D70;
  *(void *)&buf[5] = *(uint64_t *)((char *)&qword_490D70 + 5);
  sub_86550((uint64_t *)((char *)&v18 + 2), (uint64_t)&unk_490D80);
  __int16 v21 = word_490D98;
  sub_1738D4((_BYTE *)v5 + 24, (uint64_t *)buf, (uint64_t)a1, v14);
  sub_32C8C(*(void **)((char *)v20 + 4));
  *(void *)&__int128 v16 = v5 + 3;
  *((void *)&v16 + 1) = v5;
  sub_AFDAC((uint64_t)&v16, v5 + 13, (uint64_t)(v5 + 3));
  __int128 v15 = v16;
  __int128 v16 = 0uLL;
  sub_3711D4((uint64_t)a1, (void ***)&v15);
  char v6 = (std::__shared_weak_count *)*((void *)&v15 + 1);
  if (*((void *)&v15 + 1))
  {
    uint64_t v7 = (unint64_t *)(*((void *)&v15 + 1) + 8LL);
    do
      unint64_t v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  uint64_t v9 = (std::__shared_weak_count *)*((void *)&v16 + 1);
  if (*((void *)&v16 + 1))
  {
    char v10 = (unint64_t *)(*((void *)&v16 + 1) + 8LL);
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  sub_19DFC((uint64_t)v14);
  uint64_t v12 = (uint64_t **)sub_1F4000();
  sub_1F4114(v12, (unint64_t)sub_1E3EB8, (unint64_t)a1);
  sub_1E3EB8(1684500341, a1);
  return 1LL;
}

void sub_1E2DDC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
}

void sub_1E2E44(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v4 = sub_138E8(17);
    uint64_t v5 = sub_138E8(37);
    char v6 = 0;
    uint64_t v7 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v8 = *(void *)(v4 + 8);
    while (1)
    {
      uint64_t v9 = *(int *)&buf[4 * v7];
      char v10 = v6;
      if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
        break;
      }
      char v6 = 1;
      uint64_t v7 = 1LL;
      if ((v10 & 1) != 0) {
        goto LABEL_8;
      }
    }

    if ((v8 & v9) == 0) {
      uint64_t v4 = v5;
    }
LABEL_8:
    uint64_t v11 = sub_138E8(36);
    char v12 = 0;
    uint64_t v13 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v14 = *(void *)(v4 + 8);
    while (1)
    {
      uint64_t v15 = *(int *)&buf[4 * v13];
      char v16 = v12;
      if (((v14 & v15) != 0) != ((*(void *)(v11 + 8) & v15) != 0)) {
        break;
      }
      char v12 = 1;
      uint64_t v13 = 1LL;
      if ((v16 & 1) != 0) {
        goto LABEL_14;
      }
    }

    if ((v14 & v15) == 0) {
      uint64_t v4 = v11;
    }
LABEL_14:
    double v17 = *(os_log_s **)v4;
    if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_USB_iAP_Aspen.cpp";
      __int16 v54 = 1024;
      int v55 = 401;
      _os_log_impl(&dword_0, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d Getting sample rate from USB HAL device.", buf, 0x12u);
    }

    double outData = 0.0;
    UInt32 ioDataSize = 8;
    AudioObjectID v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
    OSStatus PropertyData = AudioObjectGetPropertyData( v18,  (const AudioObjectPropertyAddress *)&qword_490D30,  0,  0LL,  &ioDataSize,  &outData);
    if (PropertyData)
    {
      char v20 = (os_log_t *)sub_138E8(17);
      __int16 v21 = *v20;
      if (*v20)
      {
        if (os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "Device_USB_iAP_Aspen.cpp";
          __int16 v54 = 1024;
          int v55 = 405;
          _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL reported an error attempting to get the sample rate.",  buf,  0x12u);
        }
      }
    }

    uint64_t v22 = sub_138E8(17);
    uint64_t v23 = sub_138E8(37);
    char v24 = 0;
    uint64_t v25 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v26 = *(void *)(v22 + 8);
    while (1)
    {
      uint64_t v27 = *(int *)&buf[4 * v25];
      char v28 = v24;
      if (((v26 & v27) != 0) != ((*(void *)(v23 + 8) & v27) != 0)) {
        break;
      }
      char v24 = 1;
      uint64_t v25 = 1LL;
      if ((v28 & 1) != 0) {
        goto LABEL_27;
      }
    }

    if ((v26 & v27) == 0) {
      uint64_t v22 = v23;
    }
LABEL_27:
    uint64_t v29 = sub_138E8(36);
    char v30 = 0;
    uint64_t v31 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v32 = *(void *)(v22 + 8);
    while (1)
    {
      uint64_t v33 = *(int *)&buf[4 * v31];
      char v34 = v30;
      if (((v32 & v33) != 0) != ((*(void *)(v29 + 8) & v33) != 0)) {
        break;
      }
      char v30 = 1;
      uint64_t v31 = 1LL;
      if ((v34 & 1) != 0) {
        goto LABEL_33;
      }
    }

    if ((v32 & v33) == 0) {
      uint64_t v22 = v29;
    }
LABEL_33:
    char v35 = *(os_log_s **)v22;
    if (v35 && os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    {
      int v36 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_USB_iAP_Aspen.cpp";
      __int16 v54 = 1024;
      int v55 = 406;
      __int16 v56 = 1024;
      LODWORD(v57[0]) = v36;
      WORD2(v57[0]) = 2048;
      *(double *)((char *)v57 + 6) = outData;
      _os_log_impl( &dword_0,  v35,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d USB HAL device %u reported a sample rate of %f.",  buf,  0x22u);
    }

    if (!PropertyData)
    {
      uint64_t v37 = sub_138E8(17);
      uint64_t v38 = sub_138E8(37);
      char v39 = 0;
      uint64_t v40 = 0LL;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
      uint64_t v41 = *(void *)(v37 + 8);
      while (1)
      {
        uint64_t v42 = *(int *)&buf[4 * v40];
        char v43 = v39;
        if (((v41 & v42) != 0) != ((*(void *)(v38 + 8) & v42) != 0)) {
          break;
        }
        char v39 = 1;
        uint64_t v40 = 1LL;
        if ((v43 & 1) != 0) {
          goto LABEL_43;
        }
      }

      if ((v41 & v42) == 0) {
        uint64_t v37 = v38;
      }
LABEL_43:
      uint64_t v44 = sub_138E8(36);
      char v45 = 0;
      uint64_t v46 = 0LL;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
      uint64_t v47 = *(void *)(v37 + 8);
      while (1)
      {
        uint64_t v48 = *(int *)&buf[4 * v46];
        char v49 = v45;
        if (((v47 & v48) != 0) != ((*(void *)(v44 + 8) & v48) != 0)) {
          break;
        }
        char v45 = 1;
        uint64_t v46 = 1LL;
        if ((v49 & 1) != 0) {
          goto LABEL_49;
        }
      }

      if ((v47 & v48) == 0) {
        uint64_t v37 = v44;
      }
LABEL_49:
      uint64_t v50 = *(os_log_s **)v37;
      if (v50)
      {
        if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "Device_USB_iAP_Aspen.cpp";
          __int16 v54 = 1024;
          int v55 = 410;
          __int16 v56 = 2048;
          *(double *)int v57 = outData;
          _os_log_impl( &dword_0,  v50,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Calling SetSampleRate() to value reported by USB HAL device (%f).",  buf,  0x1Cu);
        }
      }

      sub_1E363C(a1, 0, outData);
    }
  }

uint64_t sub_1E3308(uint64_t a1, unsigned int a2)
{
  if (a2 != 1886745455)
  {
    uint64_t v3 = (os_log_t *)sub_138E8(17);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, a2);
      uint64_t v5 = v11 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      uint64_t v13 = "Device_USB_iAP_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 426;
      __int16 v16 = 2080;
      double v17 = v5;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).",  buf,  0x1Cu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }

    char v6 = (os_log_t *)sub_138E8(13);
    uint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v13 = "Device_USB_iAP_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 427;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unsupported VirtualAudioPortType.",  buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }

  return 0LL;
}

void sub_1E34B4(_Unwind_Exception *a1)
{
}

__n128 sub_1E34D0@<Q0>(AudioObjectID a1@<W1>, __n128 *a2@<X8>)
{
  uint64_t v4 = (os_log_t *)sub_138E8(17);
  uint64_t v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    int v9 = 136315650;
    char v10 = "Device_USB_iAP_Aspen.cpp";
    __int16 v11 = 1024;
    int v12 = 439;
    __int16 v13 = 1024;
    AudioObjectID v14 = a1;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d stream ID = %u", (uint8_t *)&v9, 0x18u);
  }

  char v6 = operator new(0x70uLL);
  v6[1] = 0LL;
  _OWORD v6[2] = 0LL;
  *char v6 = off_475618;
  uint64_t v7 = sub_177B28((uint64_t)(v6 + 3), a1);
  v6[3] = off_475838;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a2 = result;
  return result;
}

void sub_1E35DC(_Unwind_Exception *a1)
{
}

void sub_1E35FC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_475618;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1E360C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_475618;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1E362C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1E363C(uint64_t a1, int a2, double a3)
{
  uint64_t v6 = sub_138E8(17);
  uint64_t v7 = sub_138E8(37);
  char v8 = 0;
  uint64_t v9 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v10 = *(void *)(v6 + 8);
  while (1)
  {
    uint64_t v11 = *(int *)&buf[4 * v9];
    char v12 = v8;
    if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
      break;
    }
    char v8 = 1;
    uint64_t v9 = 1LL;
    if ((v12 & 1) != 0) {
      goto LABEL_7;
    }
  }

  if ((v10 & v11) == 0) {
    uint64_t v6 = v7;
  }
LABEL_7:
  uint64_t v13 = sub_138E8(36);
  char v15 = 0;
  uint64_t v16 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v17 = *(void *)(v6 + 8);
  while (1)
  {
    uint64_t v18 = *(int *)&buf[4 * v16];
    char v19 = v15;
    if (((v17 & v18) != 0) != ((*(void *)(v13 + 8) & v18) != 0)) {
      break;
    }
    char v15 = 1;
    uint64_t v16 = 1LL;
    if ((v19 & 1) != 0) {
      goto LABEL_13;
    }
  }

  if ((v17 & v18) == 0) {
    uint64_t v6 = v13;
  }
LABEL_13:
  char v20 = *(os_log_s **)v6;
  if (v20 && os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "Device_USB_iAP_Aspen.cpp";
    __int16 v90 = 1024;
    int v91 = 517;
    __int16 v92 = 2048;
    *(double *)uint64_t v93 = a3;
    *(_WORD *)&v93[8] = 1024;
    *(_DWORD *)&v93[10] = a2;
    _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Entered Device_USB_iAP_Aspen::SetSampleRate(sampleRate %f, synchronous %u).",  buf,  0x22u);
  }

  v14.n128_u64[0] = 0LL;
  if (a3 >= 0.0) {
    v14.n128_f64[0] = a3;
  }
  if (a3 <= 4294967300.0) {
    double v21 = v14.n128_f64[0];
  }
  else {
    double v21 = 4294967300.0;
  }
  double inData = v21;
  double v22 = (*(double (**)(uint64_t, __n128))(*(void *)a1 + 104LL))(a1, v14);
  uint64_t v23 = sub_138E8(17);
  uint64_t v24 = sub_138E8(37);
  char v25 = 0;
  uint64_t v26 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v27 = *(void *)(v23 + 8);
  while (1)
  {
    uint64_t v28 = *(int *)&buf[4 * v26];
    char v29 = v25;
    if (((v27 & v28) != 0) != ((*(void *)(v24 + 8) & v28) != 0)) {
      break;
    }
    char v25 = 1;
    uint64_t v26 = 1LL;
    if ((v29 & 1) != 0) {
      goto LABEL_27;
    }
  }

  if ((v27 & v28) == 0) {
    uint64_t v23 = v24;
  }
LABEL_27:
  uint64_t v30 = sub_138E8(36);
  char v31 = 0;
  uint64_t v32 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v33 = *(void *)(v23 + 8);
  while (1)
  {
    uint64_t v34 = *(int *)&buf[4 * v32];
    char v35 = v31;
    if (((v33 & v34) != 0) != ((*(void *)(v30 + 8) & v34) != 0)) {
      break;
    }
    char v31 = 1;
    uint64_t v32 = 1LL;
    if ((v35 & 1) != 0) {
      goto LABEL_33;
    }
  }

  if ((v33 & v34) == 0) {
    uint64_t v23 = v30;
  }
LABEL_33:
  int v36 = *(os_log_s **)v23;
  if (v36 && os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "Device_USB_iAP_Aspen.cpp";
    __int16 v90 = 1024;
    int v91 = 526;
    __int16 v92 = 1024;
    *(_DWORD *)uint64_t v93 = v21;
    _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Calling IAPManager::SetSampleRateForUSB() with %u",  buf,  0x18u);
  }

  if (!sub_1F5A78(v21))
  {
    char v84 = (os_log_t *)sub_138E8(13);
    uint64_t v85 = *v84;
    if (*v84 && os_log_type_enabled(*v84, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_USB_iAP_Aspen.cpp";
      __int16 v90 = 1024;
      int v91 = 528;
      _os_log_impl( &dword_0,  v85,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): IAPDigitalAudioSetSampleRate() failed.",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003329396;
LABEL_99:
  }

  if (v21 != v22)
  {
    uint64_t v37 = sub_138E8(17);
    uint64_t v38 = sub_138E8(37);
    char v39 = 0;
    uint64_t v40 = 0LL;
    if (a2)
    {
      *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
      uint64_t v41 = *(void *)(v37 + 8);
      while (1)
      {
        uint64_t v42 = *(int *)&buf[4 * v40];
        char v43 = v39;
        if (((v41 & v42) != 0) != ((*(void *)(v38 + 8) & v42) != 0)) {
          break;
        }
        char v39 = 1;
        uint64_t v40 = 1LL;
        if ((v43 & 1) != 0) {
          goto LABEL_49;
        }
      }

      if ((v41 & v42) == 0) {
        uint64_t v37 = v38;
      }
LABEL_49:
      uint64_t v47 = sub_138E8(36);
      char v48 = 0;
      uint64_t v49 = 0LL;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
      uint64_t v50 = *(void *)(v37 + 8);
      while (1)
      {
        uint64_t v51 = *(int *)&buf[4 * v49];
        char v52 = v48;
        if (((v50 & v51) != 0) != ((*(void *)(v47 + 8) & v51) != 0)) {
          break;
        }
        char v48 = 1;
        uint64_t v49 = 1LL;
        if ((v52 & 1) != 0) {
          goto LABEL_61;
        }
      }

      if ((v50 & v51) == 0) {
        uint64_t v37 = v47;
      }
LABEL_61:
      uint64_t v59 = *(os_log_s **)v37;
      if (*(void *)v37 && os_log_type_enabled(*(os_log_t *)v37, OS_LOG_TYPE_DEBUG))
      {
        int v60 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "Device_USB_iAP_Aspen.cpp";
        __int16 v90 = 1024;
        int v91 = 536;
        __int16 v92 = 1024;
        *(_DWORD *)uint64_t v93 = v60;
        *(_WORD *)&v93[4] = 2048;
        *(double *)&v93[6] = v21;
        _os_log_impl( &dword_0,  v59,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Calling Device_HAL_Common::SetSampleRateSynchronously() on USB HAL device %u with rate %f.",  buf,  0x22u);
      }

      OSStatus v61 = sub_369618(a1, v21);
      if (v61)
      {
        OSStatus v62 = v61;
        int v63 = (os_log_t *)sub_138E8(13);
        float v64 = *v63;
        if (!*v63 || !os_log_type_enabled(*v63, OS_LOG_TYPE_ERROR)) {
          goto LABEL_98;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "Device_USB_iAP_Aspen.cpp";
        __int16 v90 = 1024;
        int v91 = 538;
        uint64_t v65 = "%25s:%-5d EXCEPTION (status) [error status is an error]: Device_HAL_Common::SetSampleRateSynchronously()"
              " failed to set sample rate.";
LABEL_97:
        _os_log_impl(&dword_0, v64, OS_LOG_TYPE_ERROR, v65, buf, 0x12u);
LABEL_98:
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &off_4865A0;
        exception[2] = v62;
        goto LABEL_99;
      }
    }

    else
    {
      *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
      uint64_t v44 = *(void *)(v37 + 8);
      while (1)
      {
        uint64_t v45 = *(int *)&buf[4 * v40];
        char v46 = v39;
        if (((v44 & v45) != 0) != ((*(void *)(v38 + 8) & v45) != 0)) {
          break;
        }
        char v39 = 1;
        uint64_t v40 = 1LL;
        if ((v46 & 1) != 0) {
          goto LABEL_55;
        }
      }

      if ((v44 & v45) == 0) {
        uint64_t v37 = v38;
      }
LABEL_55:
      uint64_t v53 = sub_138E8(36);
      char v54 = 0;
      uint64_t v55 = 0LL;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
      uint64_t v56 = *(void *)(v37 + 8);
      while (1)
      {
        uint64_t v57 = *(int *)&buf[4 * v55];
        char v58 = v54;
        if (((v56 & v57) != 0) != ((*(void *)(v53 + 8) & v57) != 0)) {
          break;
        }
        char v54 = 1;
        uint64_t v55 = 1LL;
        if ((v58 & 1) != 0) {
          goto LABEL_70;
        }
      }

      if ((v56 & v57) == 0) {
        uint64_t v37 = v53;
      }
LABEL_70:
      uint64_t v66 = *(os_log_s **)v37;
      if (*(void *)v37 && os_log_type_enabled(*(os_log_t *)v37, OS_LOG_TYPE_DEBUG))
      {
        int v67 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "Device_USB_iAP_Aspen.cpp";
        __int16 v90 = 1024;
        int v91 = 542;
        __int16 v92 = 1024;
        *(_DWORD *)uint64_t v93 = v67;
        *(_WORD *)&v93[4] = 2048;
        *(double *)&v93[6] = v21;
        _os_log_impl( &dword_0,  v66,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Calling AudioObjectSetPropertyData() on USB HAL device %u with rate %f.",  buf,  0x22u);
      }

      AudioObjectID v68 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
      OSStatus v69 = AudioObjectSetPropertyData(v68, (const AudioObjectPropertyAddress *)&qword_490D30, 0, 0LL, 8u, &inData);
      if (v69)
      {
        OSStatus v62 = v69;
        __int16 v87 = (os_log_t *)sub_138E8(13);
        float v64 = *v87;
        if (!*v87 || !os_log_type_enabled(*v87, OS_LOG_TYPE_ERROR)) {
          goto LABEL_98;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "Device_USB_iAP_Aspen.cpp";
        __int16 v90 = 1024;
        int v91 = 545;
        uint64_t v65 = "%25s:%-5d EXCEPTION (status) [error status is an error]: AudioObjectSetPropertyData() failed to set sample rate.";
        goto LABEL_97;
      }
    }
  }

  uint64_t v70 = sub_138E8(17);
  uint64_t v71 = sub_138E8(37);
  char v72 = 0;
  uint64_t v73 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v74 = *(void *)(v70 + 8);
  while (1)
  {
    uint64_t v75 = *(int *)&buf[4 * v73];
    char v76 = v72;
    if (((v74 & v75) != 0) != ((*(void *)(v71 + 8) & v75) != 0)) {
      break;
    }
    char v72 = 1;
    uint64_t v73 = 1LL;
    if ((v76 & 1) != 0) {
      goto LABEL_80;
    }
  }

  if ((v74 & v75) == 0) {
    uint64_t v70 = v71;
  }
LABEL_80:
  uint64_t v77 = sub_138E8(36);
  char v78 = 0;
  uint64_t v79 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v80 = *(void *)(v70 + 8);
  while (1)
  {
    uint64_t v81 = *(int *)&buf[4 * v79];
    char v82 = v78;
    if (((v80 & v81) != 0) != ((*(void *)(v77 + 8) & v81) != 0)) {
      break;
    }
    char v78 = 1;
    uint64_t v79 = 1LL;
    if ((v82 & 1) != 0) {
      goto LABEL_86;
    }
  }

  if ((v80 & v81) == 0) {
    uint64_t v70 = v77;
  }
LABEL_86:
  __int16 v83 = *(os_log_s **)v70;
  if (v83 && os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "Device_USB_iAP_Aspen.cpp";
    __int16 v90 = 1024;
    int v91 = 549;
    _os_log_impl( &dword_0,  v83,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Exited Device_USB_iAP_Aspen::SetSampleRate().",  buf,  0x12u);
  }

void sub_1E3EB8(int a1, os_unfair_lock_s *a2)
{
  if (!a2)
  {
    uint64_t v17 = (os_log_t *)sub_138E8(13);
    uint64_t v18 = *v17;
    if (*v17)
    {
      if (os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = "Device_USB_iAP_Aspen.cpp";
        *(_WORD *)&_BYTE __p[12] = 1024;
        *(_DWORD *)&__p[14] = 463;
        _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: IAPManager passed clientData as NULL.",  __p,  0x12u);
      }
    }
  }

  if (a1 == 1684500341)
  {
    uint64_t v4 = operator new(4uLL);
    _DWORD *v4 = 1886745455;
    *(void *)std::string __p = v4;
    *(void *)&__p[8] = v4 + 1;
    *(void *)&__p[16] = v4 + 1;
    strcpy(&__p[24], "cwdv");
    BYTE2(v108) = 0;
    LODWORD(v110) = 3;
    v112[0] = 0LL;
    v112[1] = 0LL;
    __int128 v111 = v112;
    int v113 = 44739242;
    CFTypeRef cf = 0LL;
    sub_3710DC((uint64_t *)v101, (uint64_t)a2, (uint64_t)__p);
    sub_EDD50(&v103, v101);
    sub_85B80((uint64_t *)v101);
    if (cf) {
      CFRelease(cf);
    }
    sub_32C8C(v112[0]);
    if (*(void *)__p)
    {
      *(void *)&__p[8] = *(void *)__p;
      operator delete(*(void **)__p);
    }

    if (v105 != 1)
    {
      int v88 = (os_log_t *)sub_138E8(13);
      __int16 v89 = *v88;
      if (*v88 && os_log_type_enabled(*v88, OS_LOG_TYPE_ERROR))
      {
        uint64_t v90 = v105;
        sub_2CA1C(v101, 1886745455LL);
        int v91 = v102;
        __int16 v92 = (void **)v101[0];
        sub_23FE8((uint64_t)v99, a2 + 2);
        uint64_t v93 = v101;
        if (v91 < 0) {
          uint64_t v93 = v92;
        }
        if (v100 >= 0) {
          int v94 = v99;
        }
        else {
          int v94 = (void **)v99[0];
        }
        *(_DWORD *)std::string __p = 136316162;
        *(void *)&__p[4] = "Device_USB_iAP_Aspen.cpp";
        *(_WORD *)&_BYTE __p[12] = 1024;
        *(_DWORD *)&__p[14] = 476;
        *(_WORD *)&_BYTE __p[18] = 2048;
        *(void *)&__p[20] = v90;
        *(_WORD *)&_BYTE __p[28] = 2080;
        AudioObjectID v108 = v93;
        __int16 v109 = 2080;
        int v110 = v94;
        _os_log_impl( &dword_0,  v89,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Found %lu ports of type '%s' in device %s (looking for exactly 1)",  __p,  0x30u);
        if (v100 < 0) {
          operator delete(v99[0]);
        }
        if (v102 < 0) {
          operator delete(v101[0]);
        }
      }

      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Found %lu ports of type '%s' in device %s (looking for exactly 1)");
    }

    uint64_t v6 = *(void **)(v104 + 16);
    uint64_t v5 = *(std::__shared_weak_count **)(v104 + 24);
    v101[0] = v6;
    v101[1] = v5;
    if (v5)
    {
      p_unsigned int shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        unint64_t v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }

    int v9 = (*(uint64_t (**)(void *))(*(void *)v6 + 152LL))(v6);
    sub_17382C((uint64_t)v6);
    if (v9 != (*(unsigned int (**)(void *))(*(void *)v6 + 152LL))(v6))
    {
      if ((v9 & 1) == 0)
      {
        uint64_t v10 = sub_138E8(17);
        uint64_t v11 = sub_138E8(37);
        char v12 = 0;
        uint64_t v13 = 0LL;
        *(void *)std::string __p = 0x100000002LL;
        uint64_t v14 = *(void *)(v10 + 8);
        while (1)
        {
          uint64_t v15 = *(int *)&__p[4 * v13];
          char v16 = v12;
          if (((v14 & v15) != 0) != ((*(void *)(v11 + 8) & v15) != 0)) {
            break;
          }
          char v12 = 1;
          uint64_t v13 = 1LL;
          if ((v16 & 1) != 0) {
            goto LABEL_22;
          }
        }

        if ((v14 & v15) == 0) {
          uint64_t v10 = v11;
        }
LABEL_22:
        uint64_t v19 = sub_138E8(36);
        char v20 = 0;
        uint64_t v21 = 0LL;
        *(void *)std::string __p = 0x100000002LL;
        uint64_t v22 = *(void *)(v10 + 8);
        while (1)
        {
          uint64_t v23 = *(int *)&__p[4 * v21];
          char v24 = v20;
          if (((v22 & v23) != 0) != ((*(void *)(v19 + 8) & v23) != 0)) {
            break;
          }
          char v20 = 1;
          uint64_t v21 = 1LL;
          if ((v24 & 1) != 0) {
            goto LABEL_28;
          }
        }

        if ((v22 & v23) == 0) {
          uint64_t v10 = v19;
        }
LABEL_28:
        char v25 = *(os_log_s **)v10;
        if (v25 && os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string __p = 136315394;
          *(void *)&__p[4] = "Device_USB_iAP_Aspen.cpp";
          *(_WORD *)&_BYTE __p[12] = 1024;
          *(_DWORD *)&__p[14] = 79;
          _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Entered Device_USB_iAP_Aspen::ReconcileSampleRates().",  __p,  0x12u);
        }

        uint64_t v26 = sub_138E8(17);
        uint64_t v27 = sub_138E8(37);
        char v28 = 0;
        uint64_t v29 = 0LL;
        *(void *)std::string __p = 0x100000002LL;
        uint64_t v30 = *(void *)(v26 + 8);
        while (1)
        {
          uint64_t v31 = *(int *)&__p[4 * v29];
          char v32 = v28;
          if (((v30 & v31) != 0) != ((*(void *)(v27 + 8) & v31) != 0)) {
            break;
          }
          char v28 = 1;
          uint64_t v29 = 1LL;
          if ((v32 & 1) != 0) {
            goto LABEL_37;
          }
        }

        if ((v30 & v31) == 0) {
          uint64_t v26 = v27;
        }
LABEL_37:
        uint64_t v33 = sub_138E8(36);
        char v34 = 0;
        uint64_t v35 = 0LL;
        *(void *)std::string __p = 0x100000002LL;
        uint64_t v36 = *(void *)(v26 + 8);
        while (1)
        {
          uint64_t v37 = *(int *)&__p[4 * v35];
          char v38 = v34;
          if (((v36 & v37) != 0) != ((*(void *)(v33 + 8) & v37) != 0)) {
            break;
          }
          char v34 = 1;
          uint64_t v35 = 1LL;
          if ((v38 & 1) != 0) {
            goto LABEL_43;
          }
        }

        if ((v36 & v37) == 0) {
          uint64_t v26 = v33;
        }
LABEL_43:
        char v39 = *(os_log_s **)v26;
        if (v39 && os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string __p = 136315650;
          *(void *)&__p[4] = "Device_USB_iAP_Aspen.cpp";
          *(_WORD *)&_BYTE __p[12] = 1024;
          *(_DWORD *)&__p[14] = 83;
          *(_WORD *)&_BYTE __p[18] = 2048;
          *(void *)&__p[20] = 0x40E5888000000000LL;
          _os_log_impl( &dword_0,  v39,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Setting iAP and driver to default sample rate of %f kHz.",  __p,  0x1Cu);
        }

        sub_1E363C((uint64_t)a2, 1, 44100.0);
        uint64_t v40 = (void *)sub_138E8(17);
        uint64_t v41 = sub_138E8(37);
        char v42 = 0;
        uint64_t v43 = 0LL;
        *(void *)std::string __p = 0x100000002LL;
        uint64_t v44 = v40[1];
        while (1)
        {
          uint64_t v45 = *(int *)&__p[4 * v43];
          char v46 = v42;
          if (((v44 & v45) != 0) != ((*(void *)(v41 + 8) & v45) != 0)) {
            break;
          }
          char v42 = 1;
          uint64_t v43 = 1LL;
          if ((v46 & 1) != 0) {
            goto LABEL_52;
          }
        }

        if ((v44 & v45) == 0) {
          uint64_t v40 = (void *)v41;
        }
LABEL_52:
        uint64_t v47 = sub_138E8(36);
        char v48 = 0;
        uint64_t v49 = 0LL;
        *(void *)std::string __p = 0x100000002LL;
        uint64_t v50 = v40[1];
        while (1)
        {
          uint64_t v51 = *(int *)&__p[4 * v49];
          char v52 = v48;
          if (((v50 & v51) != 0) != ((*(void *)(v47 + 8) & v51) != 0)) {
            break;
          }
          char v48 = 1;
          uint64_t v49 = 1LL;
          if ((v52 & 1) != 0) {
            goto LABEL_58;
          }
        }

        if ((v50 & v51) == 0) {
          uint64_t v40 = (void *)v47;
        }
LABEL_58:
        if (*v40)
        {
          v99[0] = 0LL;
          UInt32 ioDataSize = 8;
          AudioObjectID v53 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a2->_os_unfair_lock_opaque + 120LL))(a2);
          OSStatus PropertyData = AudioObjectGetPropertyData( v53,  (const AudioObjectPropertyAddress *)&qword_490D30,  0,  0LL,  &ioDataSize,  v99);
          if (PropertyData)
          {
            int v96 = (os_log_t *)sub_138E8(13);
            uint64_t v97 = *v96;
            if (*v96 && os_log_type_enabled(*v96, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string __p = 136315394;
              *(void *)&__p[4] = "Device_USB_iAP_Aspen.cpp";
              *(_WORD *)&_BYTE __p[12] = 1024;
              *(_DWORD *)&__p[14] = 92;
              _os_log_impl( &dword_0,  v97,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: AudioObjectGetPropertyData() failed to get sample rate.",  __p,  0x12u);
            }

            int v98 = __cxa_allocate_exception(0x10uLL);
            *(void *)int v98 = &off_4865A0;
            CFStringRef v98[2] = PropertyData;
          }

          if (*(double *)v99 != 44100.0)
          {
            uint64_t v55 = sub_138E8(17);
            uint64_t v56 = sub_138E8(37);
            char v57 = 0;
            uint64_t v58 = 0LL;
            *(void *)std::string __p = 0x100000002LL;
            uint64_t v59 = *(void *)(v55 + 8);
            while (1)
            {
              uint64_t v60 = *(int *)&__p[4 * v58];
              char v61 = v57;
              if (((v59 & v60) != 0) != ((*(void *)(v56 + 8) & v60) != 0)) {
                break;
              }
              char v57 = 1;
              uint64_t v58 = 1LL;
              if ((v61 & 1) != 0) {
                goto LABEL_67;
              }
            }

            if ((v59 & v60) == 0) {
              uint64_t v55 = v56;
            }
LABEL_67:
            uint64_t v62 = sub_138E8(36);
            char v63 = 0;
            uint64_t v64 = 0LL;
            *(void *)std::string __p = 0x100000002LL;
            uint64_t v65 = *(void *)(v55 + 8);
            while (1)
            {
              uint64_t v66 = *(int *)&__p[4 * v64];
              char v67 = v63;
              if (((v65 & v66) != 0) != ((*(void *)(v62 + 8) & v66) != 0)) {
                break;
              }
              char v63 = 1;
              uint64_t v64 = 1LL;
              if ((v67 & 1) != 0) {
                goto LABEL_73;
              }
            }

            if ((v65 & v66) == 0) {
              uint64_t v55 = v62;
            }
LABEL_73:
            AudioObjectID v68 = *(os_log_s **)v55;
            if (v68 && os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string __p = 136315906;
              *(void *)&__p[4] = "Device_USB_iAP_Aspen.cpp";
              *(_WORD *)&_BYTE __p[12] = 1024;
              *(_DWORD *)&__p[14] = 93;
              *(_WORD *)&_BYTE __p[18] = 2048;
              *(void *)&__p[20] = 0x40E5888000000000LL;
              *(_WORD *)&_BYTE __p[28] = 1024;
              LODWORD(v108) = *(double *)v99;
              _os_log_impl( &dword_0,  v68,  OS_LOG_TYPE_ERROR,  "%25s:%-5d iAP USB: Driver sample rate was not successfully set. target: %f; actual: %u",
                __p,
                0x22u);
            }
          }
        }

        uint64_t v69 = sub_138E8(17);
        uint64_t v70 = sub_138E8(37);
        char v71 = 0;
        uint64_t v72 = 0LL;
        *(void *)std::string __p = 0x100000002LL;
        uint64_t v73 = *(void *)(v69 + 8);
        while (1)
        {
          uint64_t v74 = *(int *)&__p[4 * v72];
          char v75 = v71;
          if (((v73 & v74) != 0) != ((*(void *)(v70 + 8) & v74) != 0)) {
            break;
          }
          char v71 = 1;
          uint64_t v72 = 1LL;
          if ((v75 & 1) != 0) {
            goto LABEL_82;
          }
        }

        if ((v73 & v74) == 0) {
          uint64_t v69 = v70;
        }
LABEL_82:
        uint64_t v76 = sub_138E8(36);
        char v77 = 0;
        uint64_t v78 = 0LL;
        *(void *)std::string __p = 0x100000002LL;
        uint64_t v79 = *(void *)(v69 + 8);
        while (1)
        {
          uint64_t v80 = *(int *)&__p[4 * v78];
          char v81 = v77;
          if (((v79 & v80) != 0) != ((*(void *)(v76 + 8) & v80) != 0)) {
            break;
          }
          char v77 = 1;
          uint64_t v78 = 1LL;
          if ((v81 & 1) != 0) {
            goto LABEL_88;
          }
        }

        if ((v79 & v80) == 0) {
          uint64_t v69 = v76;
        }
LABEL_88:
        char v82 = *(os_log_s **)v69;
        if (v82 && os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string __p = 136315394;
          *(void *)&__p[4] = "Device_USB_iAP_Aspen.cpp";
          *(_WORD *)&_BYTE __p[12] = 1024;
          *(_DWORD *)&__p[14] = 96;
          _os_log_impl( &dword_0,  v82,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Exited Device_USB_iAP_Aspen::ReconcileSampleRates().",  __p,  0x12u);
        }
      }

      uint64_t v83 = sub_546E0();
      *(void *)std::string __p = v6;
      *(void *)&__p[8] = v5;
      if (v5)
      {
        p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
        do
          unint64_t v85 = __ldxr(p_shared_weak_owners);
        while (__stxr(v85 + 1, p_shared_weak_owners));
      }

      sub_1013F4(v83, (uint64_t *)__p);
      if (v5) {
        std::__shared_weak_count::__release_weak(v5);
      }
    }

    if (v5)
    {
      int v86 = (unint64_t *)&v5->__shared_owners_;
      do
        unint64_t v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }

    sub_1BB88(&v103);
  }

void sub_1E48D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (v20 < 0) {
    operator delete(v19);
  }
  sub_1BB88(&a15);
  _Unwind_Resume(a1);
}

void *sub_1E496C(void *result, uint64_t a2)
{
  if ((_DWORD)result == 1684500341)
  {
    if (!a2)
    {
      uint64_t v4 = (os_log_t *)sub_138E8(13);
      uint64_t v5 = *v4;
      if (*v4)
      {
        if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
        {
          int v6 = 136315394;
          uint64_t v7 = "Device_USB_iAP_Aspen.cpp";
          __int16 v8 = 1024;
          int v9 = 505;
          _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: IAPManager passed clientData as NULL.",  (uint8_t *)&v6,  0x12u);
        }
      }
    }

    uint64_t v3 = (void *)(a2 + 496);
    __n128 result = (void *)sub_67420(v3, (uint64_t)&qword_490D60);
    if ((_DWORD)result) {
      return sub_67564(v3, (unsigned int *)&qword_490D60);
    }
  }

  return result;
}

uint64_t sub_1E4A68(uint64_t a1)
{
  *(void *)a1 = off_475430;
  sub_67FE8(a1 + 584);
  *(void *)(a1 + 496) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 520));
  return sub_36F1E0(a1);
}

void sub_1E4AB8(uint64_t a1)
{
  unsigned __int8 v1 = (void *)sub_36F1E0(a1);
  operator delete(v1);
}

uint64_t sub_1E4ACC(os_unfair_lock_s *a1)
{
  uint64_t v2 = operator new(0x68uLL);
  if (qword_48E8E8 != -1) {
    dispatch_once(&qword_48E8E8, &stru_471118);
  }
  sub_EC5B8((uint64_t)v2, byte_48E8E0);
  sub_1D5AE0(a1, (uint64_t)v2);
  uint64_t v3 = operator new(0x50uLL);
  sub_EC558((uint64_t)v3);
  sub_1D5AE0(a1, (uint64_t)v3);
  sub_1D580C((uint64_t)a1, 0, 1886155113LL, (uint64_t)v2);
  sub_1D580C((uint64_t)a1, 1u, 1886155119LL, (uint64_t)v2);
  sub_1D55D4((uint64_t *)a1, 0, 1886155113LL, (uint64_t)v3);
  sub_1D55D4((uint64_t *)a1, 1u, 1886155119LL, (uint64_t)v3);
  std::string __p = 0LL;
  uint64_t v33 = 0LL;
  uint64_t v34 = 0LL;
  uint64_t v4 = (__CFString *)CFStringCreateWithCString(0LL, off_48C088[0], 0x600u);
  char v24 = v4;
  char v25 = 1;
  uint64_t v26 = v4;
  char v27 = 1;
  if (v4) {
    CFRetain(v4);
  }
  uint64_t v28 = 0LL;
  char v29 = 1;
  uint64_t v30 = 0LL;
  char v31 = 1;
  uint64_t v21 = 0LL;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  sub_1E5168(&v35, &qword_490DE8, (uint64_t)a1, (uint64_t)&__p, (uint64_t)&v26, off_48C088[0], &v21);
  __int128 v36 = v35;
  __int128 v35 = 0uLL;
  sub_3711D4((uint64_t)a1, (void ***)&v36);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)&v36 + 1);
  if (*((void *)&v36 + 1))
  {
    int v6 = (unint64_t *)(*((void *)&v36 + 1) + 8LL);
    do
      unint64_t v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  __int16 v8 = (std::__shared_weak_count *)*((void *)&v35 + 1);
  if (*((void *)&v35 + 1))
  {
    int v9 = (unint64_t *)(*((void *)&v35 + 1) + 8LL);
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  uint64_t v37 = &v21;
  sub_7A668((void ***)&v37);
  sub_19DFC((uint64_t)&v30);
  sub_19DFC((uint64_t)&v28);
  sub_19DFC((uint64_t)&v26);
  sub_19DFC((uint64_t)&v24);
  if (__p) {
    operator delete(__p);
  }
  std::string __p = 0LL;
  uint64_t v33 = 0LL;
  uint64_t v34 = 0LL;
  uint64_t v11 = (__CFString *)CFStringCreateWithCString(0LL, off_48C090, 0x600u);
  char v24 = v11;
  char v25 = 1;
  uint64_t v26 = v11;
  char v27 = 1;
  if (v11) {
    CFRetain(v11);
  }
  uint64_t v28 = 0LL;
  char v29 = 1;
  uint64_t v30 = 0LL;
  char v31 = 1;
  uint64_t v21 = 0LL;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  sub_1E5168(&v35, &qword_490E18, (uint64_t)a1, (uint64_t)&__p, (uint64_t)&v26, off_48C090, &v21);
  __int128 v20 = v35;
  __int128 v35 = 0uLL;
  sub_3711D4((uint64_t)a1, (void ***)&v20);
  char v12 = (std::__shared_weak_count *)*((void *)&v20 + 1);
  if (*((void *)&v20 + 1))
  {
    uint64_t v13 = (unint64_t *)(*((void *)&v20 + 1) + 8LL);
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  uint64_t v15 = (std::__shared_weak_count *)*((void *)&v35 + 1);
  if (*((void *)&v35 + 1))
  {
    char v16 = (unint64_t *)(*((void *)&v35 + 1) + 8LL);
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  uint64_t v37 = &v21;
  sub_7A668((void ***)&v37);
  sub_19DFC((uint64_t)&v30);
  sub_19DFC((uint64_t)&v28);
  sub_19DFC((uint64_t)&v26);
  sub_19DFC((uint64_t)&v24);
  if (__p) {
    operator delete(__p);
  }
  AudioObjectID v18 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 120LL))(a1);
  std::string __p = (void *)0x696E707473737263LL;
  LODWORD(v33) = 0;
  sub_1E52A4(&v26, v18, COERCE_DOUBLE(1768845428LL));
  sub_1E5384(v18, (uint64_t)&__p, (uint64_t)&v26);
  if (v26) {
    operator delete(v26);
  }
  std::string __p = (void *)0x6F75747073737263LL;
  LODWORD(v33) = 0;
  sub_1E52A4(&v26, v18, COERCE_DOUBLE(1869968496LL));
  sub_1E5384(v18, (uint64_t)&__p, (uint64_t)&v26);
  if (v26) {
    operator delete(v26);
  }
  return 1LL;
}

void sub_1E4EF8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p)
{
}

uint64_t sub_1E4F94(uint64_t a1, unsigned int a2)
{
  if (a2 != 1886155119 && a2 != 1886155113)
  {
    uint64_t v4 = (os_log_t *)sub_138E8(17);
    uint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, a2);
      int v6 = v12 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      unint64_t v14 = "Device_LDCM_Aspen.cpp";
      __int16 v15 = 1024;
      int v16 = 112;
      __int16 v17 = 2080;
      AudioObjectID v18 = v6;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).",  buf,  0x1Cu);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }

    unint64_t v7 = (os_log_t *)sub_138E8(13);
    __int16 v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        unint64_t v14 = "Device_LDCM_Aspen.cpp";
        __int16 v15 = 1024;
        int v16 = 113;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unsupported VirtualAudioPortType.",  buf,  0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }

  return 0LL;
}

void sub_1E514C(_Unwind_Exception *a1)
{
}

void sub_1E5168(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6, char **a7)
{
  unint64_t v14 = operator new(0x228uLL);
  v14[1] = 0LL;
  CFStringRef v14[2] = 0LL;
  *unint64_t v14 = off_485B80;
  CFStringRef v17 = CFStringCreateWithCString(0LL, a6, 0x600u);
  char v18 = 1;
  sub_7D084(__p, "");
  sub_F9638((uint64_t)(v14 + 3), a2, a3, a4, a5, (uint64_t)&v17, a7, (__int128 *)__p);
  v14[3] = &off_46FD40;
  *((_WORD *)v14 + 272) = 0;
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  sub_19DFC((uint64_t)&v17);
  *a1 = v14 + 3;
  a1[1] = v14;
  sub_AFDAC((uint64_t)a1, v14 + 13, (uint64_t)(v14 + 3));
}

void sub_1E5264( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_19DFC((uint64_t)&a16);
  std::__shared_weak_count::~__shared_weak_count(v16);
  operator delete(v18);
  _Unwind_Resume(a1);
}

void sub_1E52A4(void *a1, AudioObjectID a2, double a3)
{
  AudioObjectID v13 = a2;
  inAddress.AudioObjectPropertySelector mSelector = 1936941859;
  *(double *)&inAddress.AudioObjectPropertyScope mScope = a3;
  sub_90764((uint64_t)&v8, &v13, &inAddress, 0, 0LL);
  int v4 = v8;
  if (v8) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v11 == 0;
  }
  if (v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = v4;
  }

  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  int v6 = v9;
  sub_7A5B8(a1, v9, v10, (v10 - (uint64_t)v9) >> 2);
  if (v6) {
    operator delete(v6);
  }
}

void sub_1E5364( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  if (a14)
  {
    if (__p) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(exception_object);
}

void sub_1E5384(AudioObjectID a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_138E8(13);
  if ((*(_BYTE *)(v6 + 8) & 1) != 0)
  {
    unint64_t v7 = *(os_log_s **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        v111.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)v111.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_613AC((uint64_t)&v112, (unsigned int *)&v111);
        int v8 = v112.__m_.__opaque[15] >= 0 ? &v112 : (std::mutex *)v112.__m_.__sig;
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v102 = 1024;
        int v103 = 166;
        __int16 v104 = 2080;
        *(void *)uint64_t v105 = v8;
        *(_WORD *)&v105[8] = 1024;
        *(_DWORD *)&v105[10] = a1;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to synchronize the property %s on id %u.",  (uint8_t *)&buf,  0x22u);
        if (v112.__m_.__opaque[15] < 0) {
          operator delete((void *)v112.__m_.__sig);
        }
      }
    }
  }

  uint64_t v97 = *(void *)a2;
  int v9 = *(_DWORD *)(a2 + 8);
  AudioObjectID v96 = a1;
  int v98 = v9;
  int v99 = 0;
  uint64_t v100 = 0LL;
  sub_1E6038((uint64_t)&v112, (uint64_t)&v96);
  if (*(_DWORD *)&v112.__m_.__opaque[16]) {
    goto LABEL_10;
  }
  uint64_t v93 = 0LL;
  int v94 = 0LL;
  uint64_t v95 = 0LL;
  sub_7A5B8( &v93,  (const void *)v112.__m_.__sig,  *(uint64_t *)v112.__m_.__opaque,  (*(void *)v112.__m_.__opaque - v112.__m_.__sig) >> 2);
  uint64_t v90 = 0LL;
  int v91 = 0LL;
  uint64_t v92 = 0LL;
  sub_7A5B8(&v90, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  uint64_t v21 = v93;
  uint64_t v22 = v90;
  if (v94 - v93 != v91 - v90)
  {
    BOOL v23 = 0;
    if (!v90) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }

  BOOL v23 = memcmp(v93, v90, v94 - v93) == 0;
  if (v22)
  {
LABEL_35:
    int v91 = v22;
    operator delete(v22);
  }

void sub_1E5F10( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, void *a44, uint64_t a45, uint64_t a46, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1E6038(uint64_t a1, uint64_t a2)
{
  int v4 = (uint64_t *)(a2 + 4);
  *(void *)&buf[0].AudioObjectPropertySelector mSelector = *(void *)(a2 + 4);
  UInt32 v5 = *(_DWORD *)(a2 + 16);
  buf[0].AudioObjectPropertyElement mElement = *(_DWORD *)(a2 + 12);
  sub_90764((uint64_t)&v21, (AudioObjectID *)a2, buf, v5, *(const void **)(a2 + 24));
  uint64_t v6 = v21;
  if (v21)
  {
    unint64_t v7 = (os_log_t *)sub_138E8(13);
    int v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v19, v6);
        int v9 = v20;
        uint64_t v10 = (void **)v19[0];
        uint64_t v15 = *v4;
        int v16 = *((_DWORD *)v4 + 2);
        sub_613AC((uint64_t)__p, (unsigned int *)&v15);
        char v11 = v19;
        if (v9 < 0) {
          char v11 = v10;
        }
        char v12 = (void **)__p[0];
        AudioObjectID v13 = *(_DWORD *)a2;
        if (v18 >= 0) {
          char v12 = __p;
        }
        buf[0].AudioObjectPropertySelector mSelector = 136316418;
        *(void *)&buf[0].AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 176;
        HIWORD(buf[1].mScope) = 1024;
        buf[1].AudioObjectPropertyElement mElement = v6;
        __int16 v26 = 2080;
        int v27 = v11;
        __int16 v28 = 2080;
        unint64_t v29 = v12;
        __int16 v30 = 1024;
        AudioObjectID v31 = v13;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) reading property data for property %s on id %u.",  (uint8_t *)buf,  0x32u);
        if (v18 < 0) {
          operator delete(__p[0]);
        }
        if (v20 < 0) {
          operator delete(v19[0]);
        }
      }
    }
  }

  if (v24)
  {
    memset(buf, 0, sizeof(buf));
    sub_7A5B8(buf, v22, v23, (v23 - (uint64_t)v22) >> 2);
    uint64_t v14 = *(void *)&buf[1].mScope;
    *(_OWORD *)a1 = *(_OWORD *)&buf[0].mSelector;
    *(void *)(a1 + 16) = v14;
    *(_DWORD *)(a1 + 24) = v6;
    if (v22) {
      operator delete(v22);
    }
  }

  else
  {
    *(void *)a1 = 0LL;
    *(void *)(a1 + 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    *(_DWORD *)(a1 + 24) = v6;
  }

void sub_1E622C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, uint64_t a21, char a22)
{
  if (v23 < 0) {
    operator delete(v22);
  }
  if (a22)
  {
    if (__p) {
      operator delete(__p);
    }
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_1E6268(uint64_t a1)
{
  *(void *)a1 = off_4735F0;
  return sub_F3008(a1);
}

void sub_1E6278(void *a1)
{
  *a1 = off_4735F0;
  unsigned __int8 v1 = (void *)sub_F3008((uint64_t)a1);
  operator delete(v1);
}

uint64_t sub_1E6298(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 104LL))(a1, a2, 1936092513LL);
}

uint64_t sub_1E62AC(uint64_t a1, void **a2, AudioObjectPropertySelector a3)
{
  if (*a2 != a2[1])
  {
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v46 = (os_log_t *)sub_138E8(13);
    uint64_t v47 = *v46;
    if (*v46 && os_log_type_enabled(*v46, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v56 = "Stream_USB_iAP_Aspen.cpp";
      __int16 v57 = 1024;
      int v58 = 81;
      _os_log_impl( &dword_0,  v47,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): specified StreamFormatList is not empty",  buf,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "specified StreamFormatList is not empty");
  }

  sub_1F5BDC((uint64_t)theArray);
  if (theArray[0])
  {
    int Count = CFArrayGetCount(theArray[0]);
    if (!Count)
    {
      uint64_t v14 = (os_log_t *)sub_138E8(22);
      uint64_t v15 = *v14;
      if (*v14)
      {
        if (os_log_type_enabled(*v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v56 = "Stream_USB_iAP_Aspen.cpp";
          __int16 v57 = 1024;
          int v58 = 91;
          _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d IAPDigitalAudioCopySupportSampleRates() returned a CFArrayRef with a count of 0",  buf,  0x12u);
        }
      }
    }

    uint64_t v51 = 0LL;
    char v52 = 0LL;
    uint64_t v53 = 0LL;
    uint64_t v7 = sub_175E8C(a1, &v51, a3);
    if ((_DWORD)v7)
    {
      int v8 = (os_log_t *)sub_138E8(22);
      int v9 = *v8;
      if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(__p, v7);
        uint64_t v10 = v50 >= 0 ? __p : (void **)__p[0];
        int v11 = *(_DWORD *)(a1 + 80);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        uint64_t v56 = "Stream_USB_iAP_Aspen.cpp";
        __int16 v57 = 1024;
        int v58 = 96;
        __int16 v59 = 1024;
        int v60 = v7;
        __int16 v61 = 2080;
        uint64_t v62 = v10;
        __int16 v63 = 1024;
        int v64 = v11;
        _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error %d ('%s') getting the HAL stream formats for stream %u",  buf,  0x28u);
        if (v50 < 0) {
          operator delete(__p[0]);
        }
      }
    }

    else if (Count)
    {
      unsigned int v16 = 0;
      char v18 = (double *)v51;
      int v17 = v52;
      do
      {
        LODWORD(__p[0]) = 0;
        if (sub_1A0E0C(theArray, v16, __p))
        {
          uint64_t v19 = (os_log_t *)sub_138E8(22);
          char v20 = *v19;
          if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            uint64_t v56 = "Stream_USB_iAP_Aspen.cpp";
            __int16 v57 = 1024;
            int v58 = 107;
            __int16 v59 = 1024;
            int v60 = (int)__p[0];
            _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to resolve iAP digital audio sample rate %u Hz to a HAL stream format",  buf,  0x18u);
          }

          unsigned int v21 = v18;
          if (v17 != v18)
          {
            unsigned int v21 = v18;
            while (LODWORD(__p[0]) < v21[5] || LODWORD(__p[0]) > v21[6])
            {
              v21 += 7;
              if (v21 == v17) {
                goto LABEL_51;
              }
            }
          }

          if (v17 != v21)
          {
            char v24 = (double *)a2[1];
            uint64_t v25 = (double *)a2[2];
            if (v24 >= v25)
            {
              uint64_t v30 = 0x6DB6DB6DB6DB6DB7LL * (((char *)v24 - (_BYTE *)*a2) >> 3);
              unint64_t v31 = v30 + 1;
              unint64_t v32 = 0x6DB6DB6DB6DB6DB7LL * (((char *)v25 - (_BYTE *)*a2) >> 3);
              if (2 * v32 > v31) {
                unint64_t v31 = 2 * v32;
              }
              if (v32 >= 0x249249249249249LL) {
                unint64_t v33 = 0x492492492492492LL;
              }
              else {
                unint64_t v33 = v31;
              }
              if (v33) {
                unint64_t v33 = (unint64_t)sub_177AE0(v33);
              }
              else {
                uint64_t v34 = 0LL;
              }
              unint64_t v35 = v33 + 56 * v30;
              __int128 v36 = *(_OWORD *)v21;
              __int128 v37 = *((_OWORD *)v21 + 1);
              __int128 v38 = *((_OWORD *)v21 + 2);
              *(double *)(v35 + 48) = v21[6];
              *(_OWORD *)(v35 + 16) = v37;
              *(_OWORD *)(v35 + 32) = v38;
              *(_OWORD *)unint64_t v35 = v36;
              uint64_t v40 = (char *)*a2;
              char v39 = (char *)a2[1];
              uint64_t v41 = (char *)v35;
              if (v39 != *a2)
              {
                do
                {
                  __int128 v42 = *(_OWORD *)(v39 - 56);
                  __int128 v43 = *(_OWORD *)(v39 - 40);
                  __int128 v44 = *(_OWORD *)(v39 - 24);
                  *((void *)v41 - 1) = *((void *)v39 - 1);
                  *(_OWORD *)(v41 - 24) = v44;
                  *(_OWORD *)(v41 - 40) = v43;
                  *(_OWORD *)(v41 - 56) = v42;
                  v41 -= 56;
                  v39 -= 56;
                }

                while (v39 != v40);
                char v39 = (char *)*a2;
              }

              unint64_t v29 = (void *)(v35 + 56);
              *a2 = v41;
              a2[1] = (void *)(v35 + 56);
              a2[2] = (void *)(v33 + 56 * v34);
              if (v39) {
                operator delete(v39);
              }
            }

            else
            {
              __int128 v26 = *(_OWORD *)v21;
              __int128 v27 = *((_OWORD *)v21 + 1);
              __int128 v28 = *((_OWORD *)v21 + 2);
              v24[6] = v21[6];
              *((_OWORD *)v24 + 1) = v27;
              *((_OWORD *)v24 + 2) = v28;
              *(_OWORD *)char v24 = v26;
              unint64_t v29 = v24 + 7;
            }

            a2[1] = v29;
          }
        }

        else
        {
          uint64_t v22 = (os_log_t *)sub_138E8(22);
          int v23 = *v22;
          if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            uint64_t v56 = "Stream_USB_iAP_Aspen.cpp";
            __int16 v57 = 1024;
            int v58 = 117;
            _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Could not convert to a UInt32 array value from the CFArrayRef returned by IAPDigitalAudioCopySup portSampleRates()",  buf,  0x12u);
          }
        }

void sub_1E6888( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (__p) {
    operator delete(__p);
  }
  sub_13818((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_1E68EC(uint64_t a1, double *a2)
{
  uint64_t v2 = sub_1E6C34(a1, a2, 0, 0x73666D74u);
  if ((_DWORD)v2)
  {
    uint64_t v3 = (os_log_t *)sub_138E8(22);
    int v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
      {
        int v6 = 136315394;
        uint64_t v7 = "Stream_USB_iAP_Aspen.cpp";
        __int16 v8 = 1024;
        int v9 = 137;
        _os_log_impl(&dword_0, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Error setting the USB format", (uint8_t *)&v6, 0x12u);
      }
    }
  }

  return v2;
}

uint64_t sub_1E69C0(uint64_t a1, double *a2, AudioObjectPropertySelector a3)
{
  uint64_t v3 = sub_1E6C34(a1, a2, 0, a3);
  if ((_DWORD)v3)
  {
    int v4 = (os_log_t *)sub_138E8(22);
    UInt32 v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
      {
        int v7 = 136315394;
        __int16 v8 = "Stream_USB_iAP_Aspen.cpp";
        __int16 v9 = 1024;
        int v10 = 148;
        _os_log_impl(&dword_0, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d Error setting the USB format", (uint8_t *)&v7, 0x12u);
      }
    }
  }

  return v3;
}

uint64_t sub_1E6A90(uint64_t a1, double *a2)
{
  uint64_t v2 = sub_1E6C34(a1, a2, 1, 0x73666D74u);
  if ((_DWORD)v2)
  {
    uint64_t v3 = (os_log_t *)sub_138E8(22);
    int v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
      {
        int v6 = 136315394;
        int v7 = "Stream_USB_iAP_Aspen.cpp";
        __int16 v8 = 1024;
        int v9 = 170;
        _os_log_impl(&dword_0, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Error setting the USB format", (uint8_t *)&v6, 0x12u);
      }
    }
  }

  return v2;
}

uint64_t sub_1E6B64(uint64_t a1, double *a2, AudioObjectPropertySelector a3)
{
  uint64_t v3 = sub_1E6C34(a1, a2, 1, a3);
  if ((_DWORD)v3)
  {
    int v4 = (os_log_t *)sub_138E8(22);
    UInt32 v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
      {
        int v7 = 136315394;
        __int16 v8 = "Stream_USB_iAP_Aspen.cpp";
        __int16 v9 = 1024;
        int v10 = 159;
        _os_log_impl(&dword_0, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d Error setting the USB format", (uint8_t *)&v7, 0x12u);
      }
    }
  }

  return v3;
}

uint64_t sub_1E6C34(uint64_t a1, double *a2, int a3, AudioObjectPropertySelector a4)
{
  uint64_t v8 = *a2;
  uint64_t v9 = sub_138E8(11);
  if ((*(_BYTE *)(v9 + 8) & 1) != 0)
  {
    int v10 = *(os_log_s **)v9;
    if (*(void *)v9)
    {
      if (os_log_type_enabled(*(os_log_t *)v9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        uint64_t v30 = "IAPManager.cpp";
        __int16 v31 = 1024;
        int v32 = 401;
        __int16 v33 = 1024;
        int v34 = v8;
        _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d +- IAPManager::GetNearestSampleRateForUSB(inSampleRate: %u)",  buf,  0x18u);
      }
    }
  }

  int v11 = IAPDigitalAudioSupportedSampleRate(v8);
  char v12 = (os_log_t *)sub_138E8(11);
  AudioObjectID v13 = *v12;
  if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    uint64_t v30 = "IAPManager.cpp";
    __int16 v31 = 1024;
    int v32 = 404;
    __int16 v33 = 1024;
    int v34 = v8;
    __int16 v35 = 1024;
    LODWORD(v36) = v11;
    _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d IAPDigitalAudioSupportedSampleRate(%u) returned %u.",  buf,  0x1Eu);
  }

  if (v11 != (_DWORD)v8)
  {
    uint64_t v15 = 560226676LL;
    unsigned int v16 = (os_log_t *)sub_138E8(22);
    os_log_t v17 = *v16;
    if (!*v16 || !os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR)) {
      return v15;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    uint64_t v30 = "Stream_USB_iAP_Aspen.cpp";
    __int16 v31 = 1024;
    int v32 = 208;
    __int16 v33 = 1024;
    int v34 = v8;
    __int16 v35 = 1024;
    LODWORD(v36) = v11;
    char v18 = "%25s:%-5d Format's sample rate %u Hz is not a supported iAP digital audio rate (nearest is %u Hz)";
    uint64_t v19 = v17;
    uint32_t v20 = 30;
LABEL_18:
    _os_log_impl(&dword_0, v19, OS_LOG_TYPE_ERROR, v18, buf, v20);
    return v15;
  }

  if (!sub_1F5A78(v8))
  {
    uint64_t v15 = 2003329396LL;
    unsigned int v21 = (os_log_t *)sub_138E8(22);
    os_log_t v22 = *v21;
    if (!*v21 || !os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR)) {
      return v15;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    uint64_t v30 = "Stream_USB_iAP_Aspen.cpp";
    __int16 v31 = 1024;
    int v32 = 202;
    char v18 = "%25s:%-5d Error setting the iAP digital audio sample rate";
    uint64_t v19 = v22;
    uint32_t v20 = 18;
    goto LABEL_18;
  }

  if (a3) {
    uint64_t v14 = sub_176AD8(a1, (uint64_t)a2, a4);
  }
  else {
    uint64_t v14 = sub_176750(a1, a2, a4);
  }
  uint64_t v15 = v14;
  if ((_DWORD)v14)
  {
    int v23 = (os_log_t *)sub_138E8(22);
    char v24 = *v23;
    if (*v23)
    {
      if (os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(__p, v15);
        if (v28 >= 0) {
          uint64_t v25 = __p;
        }
        else {
          uint64_t v25 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        uint64_t v30 = "Stream_USB_iAP_Aspen.cpp";
        __int16 v31 = 1024;
        int v32 = 198;
        __int16 v33 = 1024;
        int v34 = v15;
        __int16 v35 = 2080;
        __int128 v36 = v25;
        _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error %d ('%s') setting the HAL stream format",  buf,  0x22u);
        if (v28 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return v15;
}

void sub_1E6FA4(uint64_t a1)
{
  unsigned __int8 v1 = (void *)sub_36F1E0(a1);
  operator delete(v1);
}

uint64_t sub_1E6FB8(uint64_t a1, AudioObjectPropertyAddress *a2)
{
  int mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1818446147)
  {
    if (mSelector == 1818446148 || mSelector == 1835103844) {
      return 1LL;
    }
    int v10 = 1936876403;
  }

  else
  {
    if (mSelector == 1684304756 || mSelector == 1685287523)
    {
      AudioObjectPropertyScope mScope = a2->mScope;
      AudioObjectPropertySelector v7 = 1936945763;
      goto LABEL_16;
    }

    int v10 = 1685288051;
  }

  if (mSelector != v10)
  {
    sub_1BB60((std::mutex *)a1);
    AudioObjectID v11 = *(_DWORD *)(a1 + 268);
    p_AudioObjectPropertyAddress inAddress = a2;
    return AudioObjectHasProperty(v11, p_inAddress) != 0;
  }

  AudioObjectPropertyScope mScope = a2->mScope;
  AudioObjectPropertySelector v7 = 1936941859;
LABEL_16:
  inAddress.int mSelector = v7;
  inAddress.AudioObjectPropertyScope mScope = mScope;
  inAddress.AudioObjectPropertyElement mElement = 0;
  sub_1BB60((std::mutex *)a1);
  AudioObjectID v11 = *(_DWORD *)(a1 + 268);
  p_AudioObjectPropertyAddress inAddress = &inAddress;
  return AudioObjectHasProperty(v11, p_inAddress) != 0;
}

BOOL sub_1E70A8(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v2 = 0LL;
  int mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1818446147)
  {
    if (mSelector > 1936876402)
    {
      BOOL v4 = mSelector == 1936876403;
      int v5 = 2020898165;
    }

    else
    {
      BOOL v4 = mSelector == 1818446148;
      int v5 = 1835103844;
    }

    if (!v4 && mSelector != v5) {
      return sub_36854C(a1, a2);
    }
    return v2;
  }

  if (mSelector == 1684304756 || mSelector == 1685287523)
  {
    AudioObjectPropertyScope mScope = a2->mScope;
    v10.int mSelector = 1936945763;
    v10.AudioObjectPropertyScope mScope = mScope;
    v10.AudioObjectPropertyElement mElement = 0;
    return sub_36854C(a1, &v10);
  }

  if (mSelector == 1685288051) {
    return v2;
  }
  return sub_36854C(a1, a2);
}

uint64_t sub_1E717C(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    AudioObjectPropertyAddress v10 = (os_log_t *)sub_138E8(13);
    AudioObjectID v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v18);
      char v12 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      int v23 = "Device_USB_Aspen.cpp";
      __int16 v24 = 1024;
      int v25 = 436;
      __int16 v26 = 2080;
      __int128 v27 = v12;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((a3 != 0) == (a4 == 0LL))
  {
    uint64_t v14 = (os_log_t *)sub_138E8(13);
    uint64_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v18);
      unsigned int v16 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      int v23 = "Device_USB_Aspen.cpp";
      __int16 v24 = 1024;
      int v25 = 437;
      __int16 v26 = 2080;
      __int128 v27 = v16;
      __int16 v28 = 1024;
      UInt32 v29 = a3;
      __int16 v30 = 2048;
      __int16 v31 = a4;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }

    os_log_t v17 = __cxa_allocate_exception(0x10uLL);
    *(void *)os_log_t v17 = &off_4865A0;
    void v17[2] = 561211770;
  }

  if (a2->mSelector == 1818446148 || a2->mSelector == 1835103844) {
    return 4LL;
  }
  else {
    return sub_21524(a1, a2, a3, a4);
  }
}

float sub_1E7460(uint64_t a1, int *a2, uint64_t a3, const void *a4, UInt32 *a5, float *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    __int16 v24 = (os_log_t *)sub_138E8(13);
    int v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      *(void *)UInt32 ioDataSize = *(void *)a2;
      int v47 = a2[2];
      sub_613AC((uint64_t)&inAddress, ioDataSize);
      __int16 v26 = v49 >= 0 ? &inAddress : *(AudioObjectPropertyAddress **)&inAddress.mSelector;
      *(_DWORD *)double outData = 136315650;
      *(void *)&outData[4] = "Device_USB_Aspen.cpp";
      __int16 v51 = 1024;
      int v52 = 385;
      __int16 v53 = 2080;
      BOOL v54 = (const char *)v26;
      _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  outData,  0x1Cu);
      if (v49 < 0) {
        operator delete(*(void **)&inAddress.mSelector);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0LL))
  {
    __int16 v28 = (os_log_t *)sub_138E8(13);
    UInt32 v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      *(void *)UInt32 ioDataSize = *(void *)a2;
      int v47 = a2[2];
      sub_613AC((uint64_t)&inAddress, ioDataSize);
      __int16 v30 = v49 >= 0 ? &inAddress : *(AudioObjectPropertyAddress **)&inAddress.mSelector;
      *(_DWORD *)double outData = 136316162;
      *(void *)&outData[4] = "Device_USB_Aspen.cpp";
      __int16 v51 = 1024;
      int v52 = 386;
      __int16 v53 = 2080;
      BOOL v54 = (const char *)v30;
      __int16 v55 = 1024;
      LODWORD(v56[0]) = a3;
      WORD2(v56[0]) = 2048;
      *(void *)((char *)v56 + 6) = a4;
      _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        outData,
        0x2Cu);
      if (v49 < 0) {
        operator delete(*(void **)&inAddress.mSelector);
      }
    }

    __int16 v31 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v31 = &off_4865A0;
    void v31[2] = 561211770;
  }

  if (!a6)
  {
    int v32 = (os_log_t *)sub_138E8(13);
    __int16 v33 = *v32;
    if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
    {
      *(void *)UInt32 ioDataSize = *(void *)a2;
      int v47 = a2[2];
      sub_613AC((uint64_t)&inAddress, ioDataSize);
      int v34 = v49 >= 0 ? &inAddress : *(AudioObjectPropertyAddress **)&inAddress.mSelector;
      *(_DWORD *)double outData = 136315906;
      *(void *)&outData[4] = "Device_USB_Aspen.cpp";
      __int16 v51 = 1024;
      int v52 = 387;
      __int16 v53 = 2080;
      BOOL v54 = "outData";
      __int16 v55 = 2080;
      v56[0] = v34;
      _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  outData,  0x26u);
      if (v49 < 0) {
        operator delete(*(void **)&inAddress.mSelector);
      }
    }

    __int16 v35 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v35 = &off_4865A0;
    v35[2] = 561211770;
  }

  int v12 = *a2;
  if (*a2 <= 1818446147)
  {
    switch(v12)
    {
      case 1684304756:
        uint64_t v17 = a1;
        uint64_t v18 = 1869968496LL;
        break;
      case 1685287523:
        uint64_t v17 = a1;
        uint64_t v18 = 1768845428LL;
        break;
      case 1685288051:
        uint64_t v13 = a1;
        int v14 = 1869968496;
LABEL_13:
        uint64_t v15 = sub_372D50(v13, v14);
LABEL_20:
        *(void *)a6 = v15;
        return result;
      default:
        goto LABEL_17;
    }

    uint64_t v15 = sub_373104(v17, v18);
    goto LABEL_20;
  }

  if (v12 != 1818446148)
  {
    if (v12 != 1835103844)
    {
      if (v12 == 1936876403)
      {
        uint64_t v13 = a1;
        int v14 = 1768845428;
        goto LABEL_13;
      }

void sub_1E7BA4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1E7C00( uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4, UInt32 a5, float *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    unsigned int v16 = (os_log_t *)sub_138E8(13);
    uint64_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v32);
      uint64_t v18 = v35 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      __int128 v37 = "Device_USB_Aspen.cpp";
      __int16 v38 = 1024;
      int v39 = 461;
      __int16 v40 = 2080;
      int v41 = (const char *)v18;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v35 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((a3 != 0) == (a4 == 0LL))
  {
    uint32_t v20 = (os_log_t *)sub_138E8(13);
    UInt32 v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v32);
      AudioObjectID v22 = v35 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      __int128 v37 = "Device_USB_Aspen.cpp";
      __int16 v38 = 1024;
      int v39 = 462;
      __int16 v40 = 2080;
      int v41 = (const char *)v22;
      __int16 v42 = 1024;
      LODWORD(v43[0]) = a3;
      WORD2(v43[0]) = 2048;
      *(void *)((char *)v43 + 6) = a4;
      _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v35 < 0) {
        operator delete(__p[0]);
      }
    }

    int v23 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v23 = &off_4865A0;
    void v23[2] = 561211770;
  }

  if (!a6)
  {
    __int16 v24 = (os_log_t *)sub_138E8(13);
    int v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v32);
      __int16 v26 = v35 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      __int128 v37 = "Device_USB_Aspen.cpp";
      __int16 v38 = 1024;
      int v39 = 463;
      __int16 v40 = 2080;
      int v41 = "inData";
      __int16 v42 = 2080;
      v43[0] = v26;
      _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
      if (v35 < 0) {
        operator delete(__p[0]);
      }
    }

    __int128 v27 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int128 v27 = &off_4865A0;
    v27[2] = 561211770;
  }

  if (((*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *))(*(void *)a1 + 24LL))(a1, a2) & 1) == 0)
  {
    __int16 v28 = (os_log_t *)sub_138E8(13);
    UInt32 v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v32);
      if (v35 >= 0) {
        __int16 v30 = __p;
      }
      else {
        __int16 v30 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      __int128 v37 = "Device_USB_Aspen.cpp";
      __int16 v38 = 1024;
      int v39 = 464;
      __int16 v40 = 2080;
      int v41 = (const char *)v30;
      _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not settable.",  buf,  0x1Cu);
      if (v35 < 0) {
        operator delete(__p[0]);
      }
    }

    __int16 v31 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v31 = &off_4865A0;
    void v31[2] = 1852797029;
  }

  if (a2->mSelector == 1684304756)
  {
    int v12 = *(const __CFNumber **)a6;
    uint64_t v13 = a1;
    uint64_t v14 = 1869968496LL;
    return sub_373294(v13, v14, v12);
  }

  if (a2->mSelector == 1685287523)
  {
    int v12 = *(const __CFNumber **)a6;
    uint64_t v13 = a1;
    uint64_t v14 = 1768845428LL;
    return sub_373294(v13, v14, v12);
  }

  return sub_3686A0(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1E8148(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 432LL))(a1);
}

uint64_t sub_1E817C(uint64_t a1)
{
  LOBYTE(__p) = 0;
  int v12 = 0LL;
  uint64_t v2 = (_DWORD *)sub_546E0();
  sub_1008E4(v2);
  sub_1E9BB8((_BYTE *)a1);
  sub_E9064((unsigned __int8 *)&__p);
  uint64_t v3 = operator new(0x18uLL);
  int v12 = v3 + 3;
  uint64_t v13 = (char *)(v3 + 3);
  *(_OWORD *)uint64_t v3 = xmmword_403220;
  v3[2] = 1735159650LL;
  std::string __p = v3;
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 408LL))(a1, &__p);
  if (__p)
  {
    int v12 = __p;
    operator delete(__p);
  }

  uint64_t v9 = 0x676C6F6273746D23LL;
  int v10 = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t (*)(uint64_t, uint64_t, uint64_t, os_unfair_lock_s *), uint64_t))(*(void *)a1 + 336LL))( a1,  &v9,  sub_1EF41C,  a1);
  uint64_t v7 = 0x676C6F626869646ELL;
  int v8 = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t (*)(uint64_t, uint64_t, uint64_t, _BYTE *), uint64_t))(*(void *)a1 + 336LL))( a1,  &v7,  sub_1EF544,  a1);
  BOOL v4 = (dispatch_queue_s *)sub_869B4();
  int v5 = operator new(8uLL);
  *int v5 = a1;
  dispatch_async_f(v4, v5, (dispatch_function_t)sub_1EF65C);
  *(_BYTE *)(a1 + 494) = sub_1EEB84(1LL, a1) == 1786082146;
  return 1LL;
}

void sub_1E82C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1E82F0(uint64_t a1, int a2)
{
  if (a2 > 1886740851)
  {
    if (a2 == 1886740852 || a2 == 1886745455) {
      return 0LL;
    }
    int v2 = 1886745449;
  }

  else
  {
    if (a2 == 1885892727 || a2 == 1885894516) {
      return 0LL;
    }
    int v2 = 1886222185;
  }

  if (a2 != v2)
  {
    BOOL v4 = (os_log_t *)sub_138E8(17);
    int v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, a2);
      int v6 = v12 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      uint64_t v14 = "Device_USB_Aspen.cpp";
      __int16 v15 = 1024;
      int v16 = 1196;
      __int16 v17 = 2080;
      uint64_t v18 = v6;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).",  buf,  0x1Cu);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v7 = (os_log_t *)sub_138E8(13);
    int v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v14 = "Device_USB_Aspen.cpp";
      __int16 v15 = 1024;
      int v16 = 1197;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unsupported VirtualAudioPortType.",  buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }

  return 0LL;
}

void sub_1E84F8(_Unwind_Exception *a1)
{
}

void sub_1E8514(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  AudioObjectPropertyScope v5 = 1768845428;
  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  if (a2 > 1886740851)
  {
    if (a2 != 1886745455)
    {
      if (a2 == 1886745449) {
        goto LABEL_12;
      }
      if (a2 != 1886740852) {
        goto LABEL_15;
      }
    }

    goto LABEL_9;
  }

  if (a2 == 1885892727)
  {
LABEL_9:
    if (a2 == 1886740852) {
      AudioObjectPropertyScope v5 = 1768845428;
    }
    else {
      AudioObjectPropertyScope v5 = 1869968496;
    }
    goto LABEL_12;
  }

  if (a2 != 1885894516 && a2 != 1886222185)
  {
LABEL_15:
    uint64_t v7 = (os_log_t *)sub_138E8(13);
    int v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        inAddress.int mSelector = 136315650;
        *(void *)&inAddress.AudioObjectPropertyScope mScope = "Device_USB_Aspen.cpp";
        __int16 v14 = 1024;
        int v15 = 1268;
        __int16 v16 = 1024;
        int v17 = a2;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Request for default sub-ports for invalid port type: %u",  (uint8_t *)&inAddress,  0x18u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Request for default sub-ports for invalid port type: %u");
  }

void sub_1E8728(_Unwind_Exception *a1)
{
}

void sub_1E8760(_BYTE *a1)
{
  std::string __p = 0LL;
  __int16 v40 = 0LL;
  uint64_t v41 = 0LL;
  strcpy(v42, "cwdv");
  v42[8] = 0;
  int v43 = 3;
  v45[0] = 0LL;
  v45[1] = 0LL;
  __int128 v44 = v45;
  CFTypeRef cf = 0LL;
  int v46 = 44739226;
  sub_3710DC(&v36, (uint64_t)a1, (uint64_t)&__p);
  if (!v38) {
    goto LABEL_38;
  }
  uint64_t v2 = v37;
  int v34 = 0LL;
  char v35 = 0LL;
  uint64_t v3 = *(std::__shared_weak_count **)(v37 + 24);
  if (!v3)
  {
    BOOL v4 = 0LL;
    goto LABEL_30;
  }

  BOOL v4 = std::__shared_weak_count::lock(v3);
  char v35 = v4;
  if (!v4 || (AudioObjectPropertyScope v5 = *(_DWORD **)(v2 + 16), (v34 = v5) == 0LL))
  {
LABEL_30:
    UInt32 v21 = (os_log_t *)sub_138E8(17);
    AudioObjectID v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_USB_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = 827;
      _os_log_impl(&dword_0, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d USB Device - port expired", buf, 0x12u);
    }

void sub_1E8C68( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

void sub_1E8CF4(uint64_t a1)
{
  std::string __p = 0LL;
  __int16 v40 = 0LL;
  uint64_t v41 = 0LL;
  strcpy(v42, "cwdv");
  v42[8] = 0;
  int v43 = 3;
  v45[0] = 0LL;
  v45[1] = 0LL;
  __int128 v44 = v45;
  CFTypeRef cf = 0LL;
  int v46 = 44739210;
  sub_3710DC(v38, a1, (uint64_t)&__p);
  if (v38[2])
  {
    uint64_t v2 = (os_log_t *)sub_138E8(17);
    uint64_t v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_USB_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = 751;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_INFO,  "%25s:%-5d USB Device- tearing down current output ref port",  buf,  0x12u);
    }

    sub_EDD50((uint64_t *)buf, v38);
    uint64_t v4 = *(void *)&buf[8];
    if (*(_BYTE **)&buf[8] != buf)
    {
      while (1)
      {
        AudioObjectPropertyScope v5 = *(_DWORD **)(v4 + 16);
        int v6 = v5[36];
        if (v6 == 1886745449) {
          goto LABEL_13;
        }
        if (v6 == 1886222185) {
          break;
        }
LABEL_17:
        uint64_t v13 = *(std::__shared_weak_count **)(v4 + 24);
        v37[0] = (unint64_t)v5;
        v37[1] = (unint64_t)v13;
        if (v13)
        {
          p_unsigned int shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            unint64_t v15 = __ldxr(p_shared_owners);
          while (__stxr(v15 + 1, p_shared_owners));
        }

        sub_36D53C(a1, v37);
        if (v13)
        {
          __int16 v16 = (unint64_t *)&v13->__shared_owners_;
          do
            unint64_t v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }

        uint64_t v4 = *(void *)(v4 + 8);
        if ((_BYTE *)v4 == buf) {
          goto LABEL_26;
        }
      }

      (*(void (**)(_DWORD *, void, void, void))(*(void *)v5 + 544LL))(v5, 0LL, 0LL, 0LL);
      uint64_t v7 = sub_546E0();
      char v8 = *(std::__shared_weak_count **)(v4 + 24);
      *(void *)uint64_t v48 = *(void *)(v4 + 16);
      *(void *)&v48[8] = v8;
      if (v8)
      {
        p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
        do
          unint64_t v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
      }

      sub_1013F4(v7, (uint64_t *)v48);
      if (v8) {
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_13:
      __int32 v11 = (os_log_t *)sub_138E8(17);
      int v12 = *v11;
      if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t v48 = 136315394;
        *(void *)&v48[4] = "Device_USB_Aspen.cpp";
        *(_WORD *)&v48[12] = 1024;
        *(_DWORD *)&v48[14] = 767;
        _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_INFO,  "%25s:%-5d USB Device- tearing down current input port of output device",  v48,  0x12u);
      }

      *(_BYTE *)(a1 + 493) = 0;
      AudioObjectPropertyScope v5 = *(_DWORD **)(v4 + 16);
      goto LABEL_17;
    }

void sub_1E91C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

uint64_t sub_1E9274(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 494);
}

void sub_1E927C(uint64_t a1, __int32 **a2, char a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if ((unint64_t)((char *)v4 - (char *)*a2) >= 8)
  {
    int v23 = (os_log_t *)sub_138E8(13);
    int v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v37 = "Device_USB_Aspen.cpp";
      __int16 v38 = 1024;
      int v39 = 1206;
      _os_log_impl(&dword_0, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (v3 != v4)
  {
    __int32 v7 = *v3;
    __int32 v35 = *v3;
    uint64_t v8 = sub_138E8(17);
    if ((*(_BYTE *)(v8 + 8) & 1) != 0)
    {
      char v9 = *(os_log_s **)v8;
      if (*(void *)v8)
      {
        if (os_log_type_enabled(*(os_log_t *)v8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          uint64_t v37 = "Device_USB_Aspen.cpp";
          __int16 v38 = 1024;
          int v39 = 1213;
          __int16 v40 = 1024;
          LODWORD(v41) = v7;
          _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to activate sub-port with ID %u",  buf,  0x18u);
        }
      }
    }

    sub_370F60((uint64_t *)buf, a1);
    sub_9DCB8(&v33, buf);
    sub_85B80((uint64_t *)buf);
    unint64_t v10 = v34;
    if (v34 == &v33)
    {
      sub_1BB88(&v33);
      goto LABEL_46;
    }

    char v11 = 0;
    while (1)
    {
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v10[2] + 168LL))( &__p,  v10[2],  1768776806LL);
      int v12 = v32;
      uint64_t v13 = wmemchr((const __int32 *)__p, v35, ((char *)v32 - (_BYTE *)__p) >> 2);
      if (v13) {
        int v12 = v13;
      }
      __int16 v14 = v32;
      if (v12 == v32) {
        goto LABEL_27;
      }
      int v15 = *(_DWORD *)(v10[2] + 144);
      if (v15 > 1886740851)
      {
        if (v15 == 1886740852 || v15 == 1886745449)
        {
LABEL_24:
          if ((a3 & 1) == 0)
          {
LABEL_33:
            uint64_t v19 = (os_log_t *)sub_138E8(13);
            unint64_t v20 = *v19;
            if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
            {
              sub_23FE8((uint64_t)v29, (os_unfair_lock_t)(v10[2] + 8));
              uint64_t v21 = v30 >= 0 ? v29 : (void **)v29[0];
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
              uint64_t v37 = "Device_USB_Aspen.cpp";
              __int16 v38 = 1024;
              int v39 = 1231;
              __int16 v40 = 2080;
              uint64_t v41 = v21;
              _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Scope of Port (%s) does not match scope of input parameter",  buf,  0x1Cu);
              if (v30 < 0) {
                operator delete(v29[0]);
              }
            }

            AudioObjectID v22 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v22, "Scope of Port (%s) does not match scope of input parameter");
          }

          unsigned int v17 = 1768845428;
          goto LABEL_26;
        }
      }

      else if (v15 == 1885894516 || v15 == 1886222185)
      {
        goto LABEL_24;
      }

      if ((a3 & 1) != 0) {
        goto LABEL_33;
      }
      unsigned int v17 = 1869968496;
LABEL_26:
      *(_DWORD *)AudioObjectPropertyAddress buf = 1936945763;
      uint64_t v37 = (const char *)v17;
      (*(void (**)(uint64_t, uint8_t *, void, void, uint64_t, __int32 *))(*(void *)a1 + 48LL))( a1,  buf,  0LL,  0LL,  4LL,  &v35);
      char v11 = 1;
LABEL_27:
      if (__p)
      {
        unint64_t v32 = (__int32 *)__p;
        operator delete(__p);
      }

      if (v12 == v14)
      {
        unint64_t v10 = (uint64_t *)v10[1];
        if (v10 != &v33) {
          continue;
        }
      }

      sub_1BB88(&v33);
      if ((v11 & 1) != 0) {
        return;
      }
LABEL_46:
      __int16 v26 = (os_log_t *)sub_138E8(13);
      unint64_t v27 = *v26;
      if (*v26)
      {
        if (os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          uint64_t v37 = "Device_USB_Aspen.cpp";
          __int16 v38 = 1024;
          int v39 = 1241;
          __int16 v40 = 1024;
          LODWORD(v41) = v35;
          _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Could not locate sub-port with ID: %u in order to activate it.",  buf,  0x18u);
        }
      }

      __int16 v28 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v28, "Could not locate sub-port with ID: %u in order to activate it.");
    }
  }

void sub_1E9710( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

unsigned __int8 *sub_1E9784(_WORD *a1)
{
  v26[0] = 0;
  uint64_t v27 = 0LL;
  uint64_t v2 = (_DWORD *)sub_546E0();
  sub_1008E4(v2);
  uint64_t v3 = operator new(8uLL);
  *uint64_t v3 = 0x706D776970687077LL;
  std::string __p = v3;
  __int16 v14 = v3 + 1;
  int v15 = v3 + 1;
  strcpy(v16, "cwdv");
  char v17 = 0;
  int v18 = 3;
  unint64_t v20 = 0LL;
  uint64_t v21 = 0LL;
  uint64_t v19 = &v20;
  int v22 = 44739242;
  CFTypeRef cf = 0LL;
  sub_3710DC(v24, (uint64_t)a1, (uint64_t)&__p);
  sub_EDD50((uint64_t *)v25, v24);
  sub_85B80(v24);
  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(v20);
  if (__p)
  {
    __int16 v14 = __p;
    operator delete(__p);
  }

  for (uint64_t i = (CFTypeRef *)v25[1]; i != v25; uint64_t i = (CFTypeRef *)i[1])
  {
    (*(void (**)(CFTypeRef, void, void, void))(*(void *)i[2] + 544LL))(i[2], 0LL, 0LL, 0LL);
    uint64_t v5 = sub_546E0();
    int v6 = (std::__shared_weak_count *)i[3];
    std::string __p = (void *)i[2];
    __int16 v14 = v6;
    if (v6)
    {
      p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
      do
        unint64_t v8 = __ldxr(p_shared_weak_owners);
      while (__stxr(v8 + 1, p_shared_weak_owners));
    }

    sub_1013F4(v5, (uint64_t *)&__p);
    if (v6) {
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  sub_1BB88((uint64_t *)v25);
  char v9 = operator new(8uLL);
  *char v9 = 0x7075736F70687077LL;
  std::string __p = v9;
  __int16 v14 = v9 + 1;
  int v15 = v9 + 1;
  strcpy(v16, "cwdv");
  char v17 = 0;
  int v18 = 3;
  unint64_t v20 = 0LL;
  uint64_t v21 = 0LL;
  uint64_t v19 = &v20;
  int v22 = 44739242;
  CFTypeRef cf = 0LL;
  sub_3710DC((uint64_t *)v25, (uint64_t)a1, (uint64_t)&__p);
  CFTypeRef v10 = v25[2];
  sub_85B80((uint64_t *)v25);
  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(v20);
  if (__p)
  {
    __int16 v14 = __p;
    operator delete(__p);
  }

  if (v10)
  {
    sub_90BC0();
    (*(void (**)(void **__return_ptr, _WORD *))(*(void *)a1 + 128LL))(&__p, a1);
    char v11 = __p;
    if (__p) {
      CFRetain(__p);
    }
    sub_7F234(v25, v11);
    (*(void (**)(void))(qword_48CD58 + 56))();
    if (v25[0]) {
      CFRelease(v25[0]);
    }
    sub_19DFC((uint64_t)&__p);
  }

  sub_369228((uint64_t)a1);
  a1[246] = 0;
  return sub_E9064(v26);
}

void sub_1E9A00(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1E9A90(uint64_t a1)
{
  uint64_t v10 = 0x676C6F626C634944LL;
  int v11 = 0;
  int v8 = 4;
  int v9 = 0;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, int *))(*(void *)a1 + 40LL))( a1,  &v10,  0LL,  0LL,  &v8,  &v9);
  uint64_t v2 = sub_EAD14();
  int v3 = v9;
  uint64_t v12 = 0x676C6F626C634944LL;
  int v13 = 0;
  uint64_t v4 = v2 + 104;
  uint64_t v5 = *(void *)(v2 + 112);
  if (v5 == v2 + 104) {
    return 0LL;
  }
  while (1)
  {
    int v15 = 0;
    uint64_t v6 = *(void *)(v5 + 16);
    if (v6 != a1 && ((*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v6 + 16LL))(v6, &v12) & 1) != 0)
    {
      int v14 = 4;
      (*(void (**)(void, uint64_t *, void, void, int *, int *))(**(void **)(v5 + 16) + 40LL))( *(void *)(v5 + 16),  &v12,  0LL,  0LL,  &v14,  &v15);
      if (v15 == v3) {
        break;
      }
    }

    uint64_t v5 = *(void *)(v5 + 8);
    if (v5 == v4) {
      return 0LL;
    }
  }

  if (v5 == v4) {
    return 0LL;
  }
  else {
    return *(void *)(v5 + 16);
  }
}

void sub_1E9BB8(_BYTE *a1)
{
  if (a1[492] && a1[493]) {
    return;
  }
  BOOL v224 = sub_1EC664((uint64_t)a1);
  int v2 = (*(uint64_t (**)(_BYTE *, uint64_t))(*(void *)a1 + 88LL))(a1, 1LL);
  unsigned int v3 = (*(uint64_t (**)(_BYTE *, void))(*(void *)a1 + 88LL))(a1, 0LL);
  BOOL v4 = sub_1EC664((uint64_t)a1);
  uint64_t v5 = (os_log_t *)sub_138E8(17);
  uint64_t v6 = *v5;
  if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(_DWORD *__return_ptr, _BYTE *))(*(void *)a1 + 128LL))(v248, a1);
    uint64_t v7 = *(void *)v248;
    int v8 = (*(uint64_t (**)(_BYTE *, void))(*(void *)a1 + 88LL))(a1, 0LL);
    int v9 = (*(uint64_t (**)(_BYTE *, uint64_t))(*(void *)a1 + 88LL))(a1, 1LL);
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
    *(void *)&uint8_t buf[4] = "Device_USB_Aspen.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&_BYTE buf[14] = 901;
    *(_WORD *)&_BYTE buf[18] = 2112;
    *(void *)&_BYTE buf[20] = v7;
    *(_WORD *)&_BYTE buf[28] = 1024;
    *(_DWORD *)uint64_t v241 = v224;
    *(_WORD *)&v241[4] = 1024;
    *(_DWORD *)&v241[6] = v8;
    LOWORD(v242[0]) = 1024;
    *(_DWORD *)((char *)v242 + 2) = v9;
    _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Device %@ hasSpeakerTapStream %d num input streams %u num output streams %u",  buf,  0x2Eu);
    sub_19DFC((uint64_t)v248);
  }

  uint64_t v10 = sub_1E9A90((uint64_t)a1);
  int v11 = (std::mutex *)v10;
  if (v10) {
    BOOL v222 = sub_1EC664(v10);
  }
  else {
    BOOL v222 = 0;
  }
  if (v2) {
    BOOL v12 = 1;
  }
  else {
    BOOL v12 = v3 > v4;
  }
  if (!v12)
  {
    int v13 = (os_log_t *)sub_138E8(17);
    int v14 = *v13;
    if (*v13)
    {
      if (os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "Device_USB_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = 908;
        _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d USB audio device has no streams", buf, 0x12u);
      }
    }
  }

  int v15 = (os_log_t *)sub_138E8(17);
  __int16 v16 = *v15;
  if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(_DWORD *__return_ptr, _BYTE *))(*(void *)a1 + 128LL))(v248, a1);
    uint64_t v17 = *(void *)v248;
    sub_1EC724((uint64_t)buf, (uint64_t)a1, COERCE_DOUBLE(1735159650LL));
    if (buf[16])
    {
      BOOL v18 = sub_1EC7A4(*(const __CFDictionary **)&buf[8]) != 0LL;
      if (buf[16]) {
        sub_39FD8(buf);
      }
    }

    else
    {
      BOOL v18 = 0;
    }

    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "Device_USB_Aspen.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&_BYTE buf[14] = 909;
    *(_WORD *)&_BYTE buf[18] = 2112;
    *(void *)&_BYTE buf[20] = v17;
    *(_WORD *)&_BYTE buf[28] = 1024;
    *(_DWORD *)uint64_t v241 = v18;
    _os_log_impl(&dword_0, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d USB device %@ HasHeadsetInfo: %d", buf, 0x22u);
    sub_19DFC((uint64_t)v248);
  }

  BOOL v223 = sub_1EC7C0((uint64_t)a1);
  if (v2 && !a1[492])
  {
    unsigned int v21 = (*(uint64_t (**)(_BYTE *, uint64_t))(*(void *)a1 + 440LL))(a1, 1LL);
    int v22 = (*(uint64_t (**)(_BYTE *, uint64_t))(*(void *)a1 + 88LL))(a1, 1LL);
    if (v21 <= 2 && v22 == 1 && !sub_15A154((uint64_t)a1) && !v223)
    {
      (*(void (**)(CFTypeRef *__return_ptr, _BYTE *))(*(void *)a1 + 448LL))(&v232, a1);
      CFTypeRef cf = 0LL;
      strcpy((char *)&__p, "manlbolg");
      BYTE9(__p) = 0;
      WORD5(__p) = 0;
      sub_1EF0E0((uint64_t)buf, (uint64_t)a1);
      LOBYTE(v248[0]) = 0;
      LOBYTE(v248[4]) = 0;
      if (buf[24]
        && (uint64_t v23 = *(void *)&buf[16],
            *(void *)&buf[16] = 0LL,
            *(void *)v248 = &off_483688,
            *(void *)&v248[2] = v23,
            LOBYTE(v248[4]) = 1,
            sub_39FD8(&buf[8]),
            LOBYTE(v248[4])))
      {
        int v24 = *(const void **)&v248[2];
        if (*(void *)&v248[2])
        {
          CFRetain(*(CFTypeRef *)&v248[2]);
          sub_7F234(buf, v24);
          uint64_t v25 = *(const void **)buf;
        }

        else
        {
          uint64_t v25 = 0LL;
        }

        CFTypeRef v26 = cf;
        CFTypeRef cf = v25;
        *(void *)AudioObjectPropertyAddress buf = v26;
      }

      else
      {
        sub_1ECC00(&cf, v232);
      }

      if (LOBYTE(v248[4])) {
        sub_39FD8(v248);
      }
      sub_90BC0();
      (*(void (**)(uint64_t *, CFTypeRef *, CFTypeRef *))(qword_48CD58 + 40))(&qword_48CD58, &cf, &v232);
      if (cf) {
        CFRelease(cf);
      }
      if (v232) {
        CFRelease(v232);
      }
    }

    sub_90BC0();
    (*(void (**)(_BYTE *__return_ptr, _BYTE *))(*(void *)a1 + 128LL))(buf, a1);
    uint64_t v27 = *(const void **)buf;
    if (*(void *)buf) {
      CFRetain(*(CFTypeRef *)buf);
    }
    sub_7F234(v248, v27);
    (*(void (**)(uint64_t *, _DWORD *, uint64_t))(qword_48CD58 + 56))(&qword_48CD58, v248, 1LL);
    if (*(void *)v248) {
      CFRelease(*(CFTypeRef *)v248);
    }
    sub_19DFC((uint64_t)buf);
    unsigned int v28 = (*(uint64_t (**)(_BYTE *, uint64_t))(*(void *)a1 + 440LL))(a1, 1LL);
    UInt32 v29 = sub_374204(a1, v28);
    char v30 = sub_374864(a1, v28, (uint64_t)v29);
    unint64_t v31 = v30;
    if (!v30)
    {
      char v30 = operator new(0x50uLL);
      sub_EC558((uint64_t)v30);
      sub_1D5AE0(a1, (uint64_t)v30);
      unint64_t v31 = operator new(0x68uLL);
      sub_EC5B8((uint64_t)v31, 0);
      sub_1D5AE0(a1, (uint64_t)v31);
    }

    int v32 = sub_1ECC48(1869968496, (uint64_t)a1);
    uint64_t v33 = (os_log_t *)sub_138E8(17);
    unint64_t v34 = *v33;
    if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_INFO))
    {
      __int32 v35 = "Not Supported";
      *(void *)&uint8_t buf[4] = "Device_USB_Aspen.cpp";
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      if (v32 == 1) {
        __int32 v35 = "Supported";
      }
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = 959;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&_BYTE buf[20] = v35;
      _os_log_impl(&dword_0, v34, OS_LOG_TYPE_INFO, "%25s:%-5d USB output device Telephony: %s", buf, 0x1Cu);
    }

    uint64_t v36 = 1885892727LL;
    if (v223)
    {
      if (!v11) {
        goto LABEL_61;
      }
    }

    else
    {
      BOOL v38 = sub_1ECDD0((uint64_t)a1);
      if (v32 != 1)
      {
        int v19 = 0;
        uint64_t v36 = 1886745455LL;
        goto LABEL_72;
      }

      if ((v38 | sub_1CC860() ^ 1) == 1)
      {
        if (!v11) {
          goto LABEL_61;
        }
      }

      else
      {
        BOOL v39 = sub_1ECFAC((uint64_t)a1);
        if (v39) {
          uint64_t v40 = 1885892727LL;
        }
        else {
          uint64_t v40 = 1886745455LL;
        }
        if (v39) {
          int v20 = 5;
        }
        else {
          int v20 = 2;
        }
        if (!v39 || v11 == 0LL)
        {
          int v19 = 0;
          uint64_t v36 = v40;
          goto LABEL_73;
        }
      }
    }

    unsigned int v37 = (*(uint64_t (**)(std::mutex *, void))(v11->__m_.__sig + 88))(v11, 0LL);
    if (v37 > sub_1EC664((uint64_t)v11))
    {
      if (sub_1ECC48(1768845428, (uint64_t)v11) == 1)
      {
        int v20 = 5;
        int v19 = 3;
LABEL_73:
        sub_1D55D4((uint64_t *)a1, 1u, v36, (uint64_t)v30);
        sub_1D580C((uint64_t)a1, 1u, v36, (uint64_t)v31);
        a1[492] = 1;
        goto LABEL_74;
      }

      int v19 = 0;
      uint64_t v36 = 1886745455LL;
LABEL_72:
      int v20 = 2;
      goto LABEL_73;
    }

LABEL_247:
  sub_1BB88((uint64_t *)v248);
LABEL_248:
  if (v20 == 2)
  {
    if ((sub_14C1EC() & 1) == 0)
    {
      sub_1ED9E8((char **)buf, (std::mutex *)a1);
      if (v224)
      {
        sub_1EDE98(v248, (std::mutex *)a1);
        if (*(void *)&v248[2])
        {
          uint64_t v125 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)&v248[2]);
          *((void *)&__p + 1) = v125;
          if (v125)
          {
            int v126 = v125;
            uint64_t v127 = *(void *)v248;
            *(void *)&__int128 __p = *(void *)v248;
            if (*(void *)v248)
            {
              CFTypeRef v232 = 0LL;
              uint64_t v233 = 0LL;
              if (*(void *)&buf[8])
              {
                uint64_t v233 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)&buf[8]);
                if (v233)
                {
                  CFTypeRef v232 = *(CFTypeRef *)buf;
                  if (*(void *)buf) {
                    sub_204854(*(uint64_t *)buf, v127);
                  }
                }
              }

              sub_7A768((uint64_t)&v232);
            }

            double v128 = (unint64_t *)&v126->__shared_owners_;
            do
              unint64_t v129 = __ldaxr(v128);
            while (__stlxr(v129 - 1, v128));
            if (!v129)
            {
              ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
              std::__shared_weak_count::__release_weak(v126);
            }
          }

          if (*(void *)&v248[2]) {
            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v248[2]);
          }
        }
      }

      uint64_t v130 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8]) {
        goto LABEL_383;
      }
    }

    goto LABEL_384;
  }

  if (v20 != 5) {
    goto LABEL_384;
  }
  sub_1EE290((uint64_t)a1);
  sub_F9584((uint64_t)buf, 1885892727LL, *((_DWORD *)a1 + 67));
  BOOL v106 = (os_log_t *)sub_138E8(17);
  __int16 v107 = *v106;
  if (*v106 && os_log_type_enabled(*v106, OS_LOG_TYPE_INFO))
  {
    uint64_t v108 = *(void *)&v241[2];
    uint64_t v109 = *(void *)&buf[16];
    uint64_t v110 = *(void *)buf;
    (*(void (**)(__int128 *__return_ptr, _BYTE *))(*(void *)a1 + 128LL))(&__p, a1);
    if (v109) {
      uint64_t v111 = v109;
    }
    else {
      uint64_t v111 = v110;
    }
    if (v108) {
      uint64_t v111 = v108;
    }
    v248[0] = 136315906;
    *(void *)&v248[1] = "Device_USB_Aspen.cpp";
    LOWORD(v248[3]) = 1024;
    *(_DWORD *)((char *)&v248[3] + 2) = 587;
    HIWORD(v248[4]) = 2112;
    *(void *)&v248[5] = v111;
    LOWORD(v248[7]) = 2112;
    *(void *)((char *)&v248[7] + 2) = __p;
    _os_log_impl( &dword_0,  v107,  OS_LOG_TYPE_INFO,  "%25s:%-5d creating a USB headphones output port with name %@ and UID %@",  (uint8_t *)v248,  0x26u);
    sub_19DFC((uint64_t)&__p);
  }

  if (!sub_1ECFAC((uint64_t)a1))
  {
    (*(void (**)(__int128 *__return_ptr, _BYTE *))(*(void *)a1 + 128LL))(&__p, a1);
    std::mutex v112 = (std::__shared_weak_count *)operator new(0x228uLL);
    v112->__shared_owners_ = 0LL;
    v112->__shared_weak_owners_ = 0LL;
    v112->__vftable = (std::__shared_weak_count_vtbl *)off_485BF0;
    sub_15ABC8((uint64_t)&v112[1], (uint64_t)a1, 1, (uint64_t)buf, (uint64_t)&__p);
    *(void *)v248 = v112 + 1;
    *(void *)&v248[2] = v112;
    sub_AFDAC((uint64_t)v248, &v112[4].__shared_owners_, (uint64_t)&v112[1]);
    char v238 = (void **)&v112[1].__vftable;
    uint64_t v239 = v112;
    sub_19DFC((uint64_t)&__p);
    *(void *)v248 = v112 + 1;
    goto LABEL_315;
  }

  (*(void (**)(CFTypeRef *__return_ptr, _BYTE *))(*(void *)a1 + 128LL))(&cf, a1);
  std::mutex v112 = (std::__shared_weak_count *)operator new(0x230uLL);
  v112->__shared_owners_ = 0LL;
  int v113 = (unint64_t *)&v112->__shared_owners_;
  v112->__shared_weak_owners_ = 0LL;
  v112->__vftable = (std::__shared_weak_count_vtbl *)off_475AE0;
  uint64_t v114 = v112 + 1;
  sub_15ABC8((uint64_t)&v112[1], (uint64_t)a1, 1, (uint64_t)buf, (uint64_t)&cf);
  v112[1].__vftable = (std::__shared_weak_count_vtbl *)off_471518;
  int v115 = (*(uint64_t (**)(_BYTE *))(*(void *)a1 + 120LL))(a1);
  CFStringRef v116 = CFStringCreateWithBytes(0LL, (const UInt8 *)"", 0LL, 0x8000100u, 0);
  if (!v116)
  {
    int v214 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v214, "Could not construct");
  }

  int v117 = (const __CFString **)&v112[23];
  LODWORD(v232) = v115;
  *(void *)&__int128 __p = 0x676C6F6278747575LL;
  DWORD2(__p) = 0;
  sub_15AC6C((uint64_t)v248, (AudioObjectID *)&v232, (AudioObjectPropertyAddress *)&__p);
  LOBYTE(__p) = 0;
  BYTE8(__p) = 0;
  if (LOBYTE(v248[4]))
  {
    *(void *)&__int128 __p = *(void *)&v248[2];
    *(void *)&v248[2] = 0LL;
    BYTE8(__p) = 1;
  }

  sub_D9A9C((uint64_t)&v248[2]);
  sub_15AD84(&v112[23].__vftable, (uint64_t)&__p, v116);
  sub_D9A9C((uint64_t)&__p);
  CFRelease(v116);
  uint64_t v118 = sub_138E8(28);
  uint64_t v119 = sub_138E8(23);
  char v120 = 0;
  uint64_t v121 = 0LL;
  *(void *)v248 = 0x100000002LL;
  uint64_t v122 = *(void *)(v118 + 8);
  while (1)
  {
    uint64_t v123 = (int)v248[v121];
    char v124 = v120;
    if (((v122 & v123) != 0) != ((*(void *)(v119 + 8) & v123) != 0)) {
      break;
    }
    char v120 = 1;
    uint64_t v121 = 1LL;
    if ((v124 & 1) != 0) {
      goto LABEL_287;
    }
  }

  if ((v122 & v123) == 0) {
    uint64_t v118 = v119;
  }
LABEL_287:
  uint64_t v131 = *(os_log_s **)v118;
  if (*(void *)v118 && os_log_type_enabled(*(os_log_t *)v118, OS_LOG_TYPE_DEFAULT))
  {
    int v132 = (*(uint64_t (**)(_BYTE *))(*(void *)a1 + 120LL))(a1);
    uint64_t v133 = *v117;
    if (!*v117)
    {
      int v215 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v215, "Could not construct");
    }

    int v134 = v132;
    sub_48100((uint64_t)&__p, *v117);
    uint64_t v135 = HIBYTE(v237);
    if (v237 < 0) {
      uint64_t v135 = *((void *)&__p + 1);
    }
    if (v135)
    {
      sub_48100((uint64_t)&v232, v133);
      if (v234 >= 0) {
        char v136 = &v232;
      }
      else {
        char v136 = (void *)v232;
      }
      v248[0] = 136315906;
      *(void *)&v248[1] = "Port_HeadphonesWired_Aspen.cpp";
      LOWORD(v248[3]) = 1024;
      *(_DWORD *)((char *)&v248[3] + 2) = 213;
      HIWORD(v248[4]) = 1024;
      v248[5] = v134;
      LOWORD(v248[6]) = 2080;
      *(void *)((char *)&v248[6] + 2) = v136;
      _os_log_impl(&dword_0, v131, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Device %u OOB UUID: %s.", (uint8_t *)v248, 0x22u);
      if (v234 < 0) {
        operator delete((void *)v232);
      }
    }

    else
    {
      v248[0] = 136315906;
      *(void *)&v248[1] = "Port_HeadphonesWired_Aspen.cpp";
      LOWORD(v248[3]) = 1024;
      *(_DWORD *)((char *)&v248[3] + 2) = 213;
      HIWORD(v248[4]) = 1024;
      v248[5] = v134;
      LOWORD(v248[6]) = 2080;
      *(void *)((char *)&v248[6] + 2) = "not supported";
      _os_log_impl(&dword_0, v131, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Device %u OOB UUID: %s.", (uint8_t *)v248, 0x22u);
    }

    if (SHIBYTE(v237) < 0) {
      operator delete((void *)__p);
    }
  }

  shared_weak_owners = (std::__shared_weak_count *)v112[4].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    do
      unint64_t v141 = __ldxr(v113);
    while (__stxr(v141 + 1, v113));
    int v142 = (unint64_t *)&v112->__shared_weak_owners_;
    do
      unint64_t v143 = __ldxr(v142);
    while (__stxr(v143 + 1, v142));
    v112[4].__shared_owners_ = (uint64_t)v114;
    v112[4].__shared_weak_owners_ = (uint64_t)v112;
    do
LABEL_311:
      unint64_t v144 = __ldaxr(v113);
    while (__stlxr(v144 - 1, v113));
    if (!v144)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }

    goto LABEL_314;
  }

  if (shared_weak_owners->__shared_owners_ == -1)
  {
    do
      unint64_t v138 = __ldxr(v113);
    while (__stxr(v138 + 1, v113));
    char v139 = (unint64_t *)&v112->__shared_weak_owners_;
    do
      unint64_t v140 = __ldxr(v139);
    while (__stxr(v140 + 1, v139));
    v112[4].__shared_owners_ = (uint64_t)v114;
    v112[4].__shared_weak_owners_ = (uint64_t)v112;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
    goto LABEL_311;
  }

void sub_1EC154( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, void *__p, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, uint64_t a32, uint64_t a33, char a34, uint64_t a35)
{
}

BOOL sub_1EC664(uint64_t a1)
{
  if (sub_1ECFAC(a1) || (BOOL result = sub_1CBE08()))
  {
    uint64_t v8 = 0x6F75747074617064LL;
    int v9 = 0;
    int v3 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 16LL))(a1, &v8);
    BOOL result = 0LL;
    if (v3)
    {
      uint64_t v8 = 0x6F75747074617064LL;
      int v9 = 0;
      unint64_t v4 = sub_5C2F8(a1);
      BOOL result = 0LL;
      *((void *)&v7 + 1) = v5;
      *(void *)&__int128 v7 = v4;
      uint64_t v6 = v7 >> 32;
      if ((v6 & 0xFF00000000LL) != 0)
      {
        if ((_DWORD)v6) {
          return (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 88LL))(a1, 1LL) != 0;
        }
      }
    }
  }

  return result;
}

void *sub_1EC724(uint64_t a1, uint64_t a2, double a3)
{
  int v10 = 1751474532;
  double v11 = a3;
  BOOL result = (void *)sub_1EF338((uint64_t)&v6, a2);
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (v9)
  {
    uint64_t v5 = v8;
    uint64_t v8 = 0LL;
    *(void *)a1 = &off_486378;
    *(void *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = 1;
    return sub_39FD8(&v7);
  }

  return result;
}

CFDictionaryRef sub_1EC7A4(const __CFDictionary *result)
{
  if (result) {
    return (const __CFDictionary *)CFDictionaryGetCount(result);
  }
  return result;
}

BOOL sub_1EC7C0(uint64_t a1)
{
  if (*(void *)(a1 + 484) != 0x110A000005ACLL)
  {
    unint64_t v3 = sub_1EF1C4(1869968496, a1);
    if (!HIDWORD(v3) || (_DWORD)v3 == 1026 || (_DWORD)v3 == 770)
    {
      unint64_t v4 = sub_1EF1C4(1768845428, a1);
      if (!HIDWORD(v4) || (_DWORD)v4 == 1026 || (_DWORD)v4 == 770)
      {
        strcpy(v19, "CFAubolg");
        v19[9] = 0;
        __int16 v20 = 0;
        if ((sub_5C3C4(a1) & 1) != 0)
        {
          LOBYTE(v24) = 0;
          char v25 = 0;
          LODWORD(valuePtr) = 2003329396;
          LOBYTE(v17) = 0;
          char v18 = 0;
          sub_14AB14((uint64_t)&v24);
          if (sub_5C41C(a1))
          {
            int v24 = 0LL;
            LODWORD(valuePtr) = sub_5C474(a1);
            if (!(_DWORD)valuePtr)
            {
              uint64_t v5 = v24;
              int v22 = v24;
              sub_158360(&v21, &v22);
              char v18 = 1;
              uint64_t v17 = v21;
              if (v5) {
                CFRelease(v5);
              }
            }
          }
        }

        else
        {
          LOBYTE(v24) = 0;
          char v25 = 0;
          LODWORD(valuePtr) = 2003332927;
          LOBYTE(v17) = 0;
          char v18 = 0;
          sub_14AB14((uint64_t)&v24);
        }

        LOBYTE(v14) = 0;
        char v15 = 0;
        if (v18)
        {
          int v14 = v17;
          uint64_t v17 = 0LL;
          char v15 = 1;
        }

        sub_14AB14((uint64_t)&v17);
        if (v15)
        {
          if (v14)
          {
            CFTypeID TypeID = CFNumberGetTypeID();
            if (TypeID == CFGetTypeID(v14))
            {
              switch(CFNumberGetType(v14))
              {
                case kCFNumberSInt8Type:
                  LOBYTE(valuePtr) = 0;
                  int Value = CFNumberGetValue(v14, kCFNumberSInt8Type, &valuePtr);
                  goto LABEL_41;
                case kCFNumberSInt16Type:
                  LOWORD(valuePtr) = 0;
                  int Value = CFNumberGetValue(v14, kCFNumberSInt16Type, &valuePtr);
                  goto LABEL_41;
                case kCFNumberSInt32Type:
                  LODWORD(valuePtr) = 0;
                  int Value = CFNumberGetValue(v14, kCFNumberSInt32Type, &valuePtr);
                  goto LABEL_41;
                case kCFNumberSInt64Type:
                  uint64_t valuePtr = 0LL;
                  int Value = CFNumberGetValue(v14, kCFNumberSInt64Type, &valuePtr);
                  goto LABEL_41;
                case kCFNumberFloat32Type:
                  __int16 v9 = sub_1EF2C0(v14, kCFNumberFloat32Type);
                  goto LABEL_36;
                case kCFNumberFloat64Type:
                  __int16 v9 = sub_1EF2FC(v14, kCFNumberFloat64Type);
                  goto LABEL_36;
                case kCFNumberCharType:
                  LOBYTE(valuePtr) = 0;
                  int Value = CFNumberGetValue(v14, kCFNumberCharType, &valuePtr);
                  goto LABEL_41;
                case kCFNumberShortType:
                  LOWORD(valuePtr) = 0;
                  int Value = CFNumberGetValue(v14, kCFNumberShortType, &valuePtr);
                  goto LABEL_41;
                case kCFNumberIntType:
                  LODWORD(valuePtr) = 0;
                  int Value = CFNumberGetValue(v14, kCFNumberIntType, &valuePtr);
                  goto LABEL_41;
                case kCFNumberLongType:
                  uint64_t valuePtr = 0LL;
                  int Value = CFNumberGetValue(v14, kCFNumberLongType, &valuePtr);
                  goto LABEL_41;
                case kCFNumberLongLongType:
                  uint64_t valuePtr = 0LL;
                  int Value = CFNumberGetValue(v14, kCFNumberLongLongType, &valuePtr);
                  goto LABEL_41;
                case kCFNumberFloatType:
                  __int16 v9 = sub_1EF2C0(v14, kCFNumberFloatType);
                  goto LABEL_36;
                case kCFNumberDoubleType:
                  __int16 v9 = sub_1EF2FC(v14, kCFNumberDoubleType);
                  goto LABEL_36;
                case kCFNumberCFIndexType:
                  uint64_t valuePtr = 0LL;
                  int Value = CFNumberGetValue(v14, kCFNumberCFIndexType, &valuePtr);
                  goto LABEL_41;
                case kCFNumberNSIntegerType:
                  uint64_t valuePtr = 0LL;
                  int Value = CFNumberGetValue(v14, kCFNumberNSIntegerType, &valuePtr);
LABEL_41:
                  int v10 = Value != 0;
                  if (Value) {
                    LOBYTE(v9) = valuePtr;
                  }
                  else {
                    LOBYTE(v9) = 0;
                  }
                  goto LABEL_44;
                case kCFNumberCGFloatType:
                  __int16 v9 = sub_1EF2FC(v14, kCFNumberCGFloatType);
LABEL_36:
                  int v10 = HIBYTE(v9);
LABEL_44:
                  if (v10) {
                    goto LABEL_45;
                  }
                  goto LABEL_53;
                default:
                  goto LABEL_53;
              }
            }

            CFTypeID v8 = CFBooleanGetTypeID();
            if (v8 == CFGetTypeID(v14))
            {
              LOBYTE(v9) = CFBooleanGetValue(v14);
LABEL_45:
              BOOL v1 = v9 == 4 || v9 == 13;
              goto LABEL_51;
            }

void sub_1ECBD0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

const void **sub_1ECC00(const void **a1, CFTypeRef cf)
{
  unint64_t v3 = *a1;
  *a1 = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

uint64_t sub_1ECC48(int a1, uint64_t a2)
{
  if ((sub_1CA280() & 1) != 0)
  {
    int v4 = 1;
  }

  else if (MGGetBoolAnswer(@"YiUtBQygkHRhLcdO3LFB4A"))
  {
    int v4 = MGGetBoolAnswer(@"DeviceSupportsUSBTypeC");
  }

  else
  {
    int v4 = 0;
  }

  if (qword_48E748 != -1) {
    dispatch_once(&qword_48E748, &stru_471018);
  }
  int v5 = byte_48E742;
  int v6 = sub_1CC860();
  if (v5) {
    int v7 = 1;
  }
  else {
    int v7 = v4;
  }
  uint64_t result = 2LL;
  if (a2 && v7)
  {
    if (((sub_1ECFAC(a2) | v6) & 1) != 0)
    {
      return 1LL;
    }

    else if (a1 == 1869968496)
    {
      unsigned int v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 440LL))(a2, 1LL);
      else {
        return 1LL;
      }
    }

    else if (a1 == 1768845428)
    {
      unsigned int v9 = sub_38AB80(a2, 0LL);
      int v10 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 88LL))(a2, 0LL);
      if (v10 - (((*(uint64_t (**)(uint64_t))(*(void *)a2 + 312LL))(a2) & 0xFF00000000LL) != 0) != 1
        || v9 >= 3)
      {
        return 2LL;
      }

      else
      {
        return 1LL;
      }
    }

    else
    {
      return 2LL;
    }
  }

  return result;
}

BOOL sub_1ECDD0(uint64_t a1)
{
  unsigned int v2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 440LL))(a1, 1LL);
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 88LL))(a1, 1LL);
  if (v2 > 2 || v3 != 1) {
    return 0LL;
  }
  if (sub_1EC7C0(a1)) {
    return 1LL;
  }
  uint64_t v6 = sub_1EEB84(0LL, a1);
  uint64_t v7 = sub_138E8(21);
  uint64_t v8 = sub_138E8(30);
  char v9 = 0;
  uint64_t v10 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v11 = *(void *)(v7 + 8);
  while (1)
  {
    uint64_t v12 = *(int *)&buf[4 * v10];
    char v13 = v9;
    if (((v11 & v12) != 0) != ((*(void *)(v8 + 8) & v12) != 0)) {
      break;
    }
    char v9 = 1;
    uint64_t v10 = 1LL;
    if ((v13 & 1) != 0) {
      goto LABEL_14;
    }
  }

  if ((v11 & v12) == 0) {
    uint64_t v7 = v8;
  }
LABEL_14:
  int v14 = *(os_log_s **)v7;
  if (v14 && os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    sub_2CA1C(__p, v6);
    char v15 = v18 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "Device_USB_Aspen.cpp";
    __int16 v20 = 1024;
    int v21 = 1426;
    __int16 v22 = 2080;
    uint64_t v23 = v15;
    _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Output using headset value: '%s'", buf, 0x1Cu);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
  }

  if ((_DWORD)v6) {
    BOOL v16 = (_DWORD)v6 == 1786082146;
  }
  else {
    BOOL v16 = 1;
  }
  return !v16;
}

BOOL sub_1ECFAC(uint64_t a1)
{
  (*(void (**)(CFStringRef *__return_ptr))(*(void *)a1 + 128LL))(theString);
  CFRange v2 = CFStringFind(theString[0], @"Studio Display", 0LL);
  if (v2.location == -1)
  {
    (*(void (**)(CFStringRef *__return_ptr, uint64_t, CFIndex))(*(void *)a1 + 128LL))(v5, a1, v2.length);
    BOOL v3 = CFStringFind(v5[0], @"AppleDisplay", 0LL).location != -1;
    sub_19DFC((uint64_t)v5);
  }

  else
  {
    BOOL v3 = 1LL;
  }

  sub_19DFC((uint64_t)theString);
  return v3;
}

void sub_1ED048( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_1ED070(std::mutex *a1)
{
  AudioObjectID v2 = (*(uint64_t (**)(std::mutex *))(a1->__m_.__sig + 120))(a1);
  sub_F9584((uint64_t)v85, 1886222185LL, v2);
  BOOL v3 = (int *)operator new(4uLL);
  *BOOL v3 = 1701669219;
  sub_389724(&v80, v3, v3 + 1);
  operator delete(v3);
  sub_373464(&v88, a1, 1768845428LL);
  int v5 = v88;
  int v4 = (char *)v89;
  if (v89 - (uint64_t)v88 >= 1)
  {
    uint64_t v6 = (v89 - (uint64_t)v88) >> 4;
    uint64_t v7 = v81;
    if (v6 <= (v82 - (uint64_t)v81) >> 4)
    {
      if (v6 <= 0)
      {
        uint64_t v17 = &v88[16 * v6];
        char v18 = v81;
        unint64_t v31 = (std::__shared_weak_count *)((char *)v81 + 16 * v6);
        int v32 = (std::__shared_weak_count *)((char *)v81 - 16 * v6);
        uint64_t v33 = v81;
        if (v32 < v81)
        {
          unint64_t v34 = (char *)v81 - 16 * v6;
          uint64_t v33 = v81;
          do
          {
            v33->std::__shared_count = *(std::__shared_count *)v34;
            uint64_t v33 = (std::__shared_weak_count *)((char *)v33 + 16);
            *(void *)unint64_t v34 = 0LL;
            *((void *)v34 + 1) = 0LL;
            v34 += 16;
          }

          while (v34 < (char *)v7);
        }

        char v81 = v33;
        if (v18 != v31)
        {
          do
          {
            __int128 v35 = *(_OWORD *)&v32[-1].__shared_owners_;
            int v32 = (std::__shared_weak_count *)((char *)v32 - 16);
            v32->__vftable = 0LL;
            v32->__shared_owners_ = 0LL;
            shared_weak_owners = (std::__shared_weak_count *)v18[-1].__shared_weak_owners_;
            *(_OWORD *)&v18[-1].__shared_owners_ = v35;
            char v18 = (std::__shared_weak_count *)((char *)v18 - 16);
            if (shared_weak_owners)
            {
              p_unsigned int shared_owners = (unint64_t *)&shared_weak_owners->__shared_owners_;
              do
                unint64_t v38 = __ldaxr(p_shared_owners);
              while (__stlxr(v38 - 1, p_shared_owners));
              if (!v38)
              {
                ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
                std::__shared_weak_count::__release_weak(shared_weak_owners);
              }
            }
          }

          while (v32 != v7);
        }

        for (; v5 != v17; uint64_t v7 = (std::__shared_weak_count *)((char *)v7 + 16))
        {
          uint64_t v40 = *(std::__shared_weak_count_vtbl **)v5;
          uint64_t v39 = *((void *)v5 + 1);
          if (v39)
          {
            int v41 = (unint64_t *)(v39 + 8);
            do
              unint64_t v42 = __ldxr(v41);
            while (__stxr(v42 + 1, v41));
          }

          unsigned int shared_owners = (std::__shared_weak_count *)v7->__shared_owners_;
          v7->__vftable = v40;
          v7->__shared_owners_ = v39;
          if (shared_owners)
          {
            __int128 v44 = (unint64_t *)&shared_owners->__shared_owners_;
            do
              unint64_t v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))shared_owners->__on_zero_shared)(shared_owners);
              std::__shared_weak_count::__release_weak(shared_owners);
            }
          }

          v5 += 16;
        }
      }

      else
      {
        if (v88 == (char *)v89)
        {
          char v13 = v81;
        }

        else
        {
          uint64_t v12 = v88;
          char v13 = v81;
          do
          {
            v13->__vftable = *(std::__shared_weak_count_vtbl **)v12;
            uint64_t v14 = *((void *)v12 + 1);
            v13->__shared_owners_ = v14;
            if (v14)
            {
              char v15 = (unint64_t *)(v14 + 8);
              do
                unint64_t v16 = __ldxr(v15);
              while (__stxr(v16 + 1, v15));
            }

            v12 += 16;
            char v13 = (std::__shared_weak_count *)((char *)v13 + 16);
          }

          while (v12 != v4);
        }

        char v81 = v13;
      }
    }

    else
    {
      uint64_t v8 = ((char *)v81 - v80) >> 4;
      unint64_t v9 = (v82 - (uint64_t)v80) >> 3;
      if (v9 <= v8 + v6) {
        unint64_t v9 = v8 + v6;
      }
      else {
        unint64_t v10 = v9;
      }
      *(void *)&_BYTE buf[32] = &v82;
      if (v10) {
        unint64_t v10 = (unint64_t)sub_7BE90(v10);
      }
      else {
        uint64_t v11 = 0LL;
      }
      int v19 = (std::__shared_weak_count *)(v10 + 16 * v8);
      *(void *)AudioObjectPropertyAddress buf = v10;
      *(void *)&_DWORD buf[8] = v19;
      *(void *)&_BYTE buf[24] = v10 + 16 * v11;
      __int16 v20 = (std::__shared_weak_count *)((char *)v19 + 16 * v6);
      do
      {
        v19->__vftable = *(std::__shared_weak_count_vtbl **)v5;
        uint64_t v21 = *((void *)v5 + 1);
        v19->__shared_owners_ = v21;
        if (v21)
        {
          __int16 v22 = (unint64_t *)(v21 + 8);
          do
            unint64_t v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
        }

        int v19 = (std::__shared_weak_count *)((char *)v19 + 16);
        v5 += 16;
      }

      while (v19 != v20);
      *(void *)&buf[16] = v20;
      int v24 = *(char **)&buf[8];
      char v25 = v80;
      if (v80 != (char *)v7)
      {
        CFTypeRef v26 = (char *)v7;
        do
        {
          __int128 v27 = *((_OWORD *)v26 - 1);
          v26 -= 16;
          *((_OWORD *)v24 - 1) = v27;
          v24 -= 16;
          *(void *)CFTypeRef v26 = 0LL;
          *((void *)v26 + 1) = 0LL;
        }

        while (v26 != v25);
        __int16 v20 = *(std::__shared_weak_count **)&buf[16];
      }

      *(void *)&_DWORD buf[8] = v24;
      unsigned int v28 = v81;
      if (v81 != v7)
      {
        do
        {
          v20->std::__shared_count = v7->std::__shared_count;
          __int16 v20 = (std::__shared_weak_count *)((char *)v20 + 16);
          v7->__vftable = 0LL;
          v7->__shared_owners_ = 0LL;
          uint64_t v7 = (std::__shared_weak_count *)((char *)v7 + 16);
        }

        while (v7 != v28);
        int v24 = *(char **)&buf[8];
        uint64_t v7 = v81;
      }

      UInt32 v29 = v80;
      uint64_t v30 = v82;
      unint64_t v80 = v24;
      char v81 = v20;
      uint64_t v82 = *(void *)&buf[24];
      *(void *)&buf[16] = v7;
      *(void *)&_BYTE buf[24] = v30;
      *(void *)AudioObjectPropertyAddress buf = v29;
      *(void *)&_DWORD buf[8] = v29;
      sub_A0D64((uint64_t)buf);
    }
  }

  *(void *)AudioObjectPropertyAddress buf = &v88;
  sub_7A668((void ***)buf);
  (*(void (**)(char **__return_ptr, std::mutex *))(a1->__m_.__sig + 128))(&v88, a1);
  int v46 = (char *)operator new(0x228uLL);
  *(_OWORD *)(v46 + 8) = 0u;
  int v47 = (unint64_t *)(v46 + 8);
  *(void *)int v46 = off_485C28;
  unint64_t v48 = v46 + 24;
  memset(buf, 0, 24);
  sub_15A9C8((void *)v46 + 3, &qword_48EBB0, (uint64_t)a1, (uint64_t)buf, (uint64_t)v85, (uint64_t)&v88, &v80);
  *((void *)v46 + 3) = off_471790;
  v46[544] = 0;
  uint64_t v83 = v46 + 24;
  char v84 = (std::__shared_weak_count *)v46;
  sub_AFDAC((uint64_t)&v83, (void *)v46 + 13, (uint64_t)(v46 + 24));
  sub_19DFC((uint64_t)&v88);
  *(void *)AudioObjectPropertyAddress buf = &v80;
  sub_7A668((void ***)buf);
  sub_1EC724((uint64_t)buf, (uint64_t)a1, COERCE_DOUBLE(1735159650LL));
  if (!buf[16]) {
    goto LABEL_60;
  }
  unint64_t v49 = sub_1EC7A4(*(const __CFDictionary **)&buf[8]);
  if (buf[16]) {
    sub_39FD8(buf);
  }
  if (!v49)
  {
LABEL_60:
    BOOL v50 = (os_log_t *)sub_138E8(17);
    __int16 v51 = *v50;
    if (*v50 && os_log_type_enabled(*v50, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_USB_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = 622;
      _os_log_impl( &dword_0,  v51,  OS_LOG_TYPE_INFO,  "%25s:%-5d SetPortSubType(MicrophoneWired) to USB Default device",  buf,  0x12u);
    }

    (*(void (**)(char *, uint64_t))(*(void *)v48 + 104LL))(v48, 1970496068LL);
  }

  if (sub_1ECFAC((uint64_t)a1))
  {
    BOOL v52 = (os_log_t *)sub_138E8(17);
    uint64_t v53 = *v52;
    if (*v52 && os_log_type_enabled(*v52, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_USB_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = 628;
      _os_log_impl( &dword_0,  v53,  OS_LOG_TYPE_INFO,  "%25s:%-5d SetPortSubType(MicrophoneWired) to USB display device",  buf,  0x12u);
    }

    (*(void (**)(char *, uint64_t))(*(void *)v48 + 104LL))(v48, 1781740087LL);
  }

  int v78 = (void **)(v46 + 24);
  char v79 = (std::__shared_weak_count *)v46;
  do
    unint64_t v54 = __ldxr(v47);
  while (__stxr(v54 + 1, v47));
  sub_3711D4((uint64_t)a1, &v78);
  __int16 v55 = v79;
  if (v79)
  {
    unint64_t v56 = (unint64_t *)&v79->__shared_owners_;
    do
      unint64_t v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }

  unsigned int v58 = (os_log_t *)sub_138E8(17);
  __int16 v59 = *v58;
  if (*v58 && os_log_type_enabled(*v58, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v60 = v87;
    uint64_t v61 = v86;
    uint64_t v62 = v85[0];
    (*(void (**)(char **__return_ptr, std::mutex *))(a1->__m_.__sig + 128))(&v88, a1);
    if (v61) {
      uint64_t v63 = v61;
    }
    else {
      uint64_t v63 = v62;
    }
    if (v60) {
      uint64_t v63 = v60;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "Device_USB_Aspen.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&_BYTE buf[14] = 635;
    *(_WORD *)&_BYTE buf[18] = 2112;
    *(void *)&_BYTE buf[20] = v63;
    *(_WORD *)&_BYTE buf[28] = 2112;
    *(void *)&_BYTE buf[30] = v88;
    _os_log_impl( &dword_0,  v59,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d creating a USB headset input port with name %@ and UID %@",  buf,  0x26u);
    sub_19DFC((uint64_t)&v88);
  }

  int v64 = operator new(4uLL);
  *int v64 = 1886222185;
  *(void *)AudioObjectPropertyAddress buf = v64;
  *(void *)&_DWORD buf[8] = v64 + 1;
  *(void *)&buf[16] = v64 + 1;
  strcpy(&buf[24], "cwdv");
  _BYTE buf[32] = 0;
  int v91 = 3;
  v93[0] = 0LL;
  v93[1] = 0LL;
  uint64_t v92 = v93;
  int v94 = 44739242;
  CFTypeRef cf = 0LL;
  sub_3710DC((uint64_t *)&v88, (uint64_t)a1, (uint64_t)buf);
  uint64_t v65 = v89;
  unint64_t v80 = 0LL;
  char v81 = 0LL;
  char v66 = *(std::__shared_weak_count **)(v89 + 24);
  if (v66)
  {
    char v67 = std::__shared_weak_count::lock(v66);
    char v81 = v67;
    if (v67)
    {
      unint64_t v68 = *(char **)(v65 + 16);
      unint64_t v80 = v68;
      goto LABEL_89;
    }
  }

  else
  {
    char v67 = 0LL;
  }

  unint64_t v68 = 0LL;
LABEL_89:
  sub_85B80((uint64_t *)&v88);
  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(v93[0]);
  if (*(void *)buf)
  {
    *(void *)&_DWORD buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }

  if (v68)
  {
    (*(void (**)(char *, uint64_t, uint64_t, void))(*(void *)v68 + 544LL))(v68, 1LL, 1LL, 0LL);
    sub_1EE5B0(1768845428LL, (uint64_t)v68, (uint64_t)a1);
    uint64_t v69 = sub_546E0();
    *(void *)AudioObjectPropertyAddress buf = v68;
    *(void *)&_DWORD buf[8] = v67;
    if (v67)
    {
      p_shared_weak_owners = (unint64_t *)&v67->__shared_weak_owners_;
      do
        unint64_t v71 = __ldxr(p_shared_weak_owners);
      while (__stxr(v71 + 1, p_shared_weak_owners));
    }

    sub_1013F4(v69, (uint64_t *)buf);
    if (v67) {
      std::__shared_weak_count::__release_weak(v67);
    }
  }

  if (v67)
  {
    unint64_t v72 = (unint64_t *)&v67->__shared_owners_;
    do
      unint64_t v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }

  uint64_t v74 = v84;
  if (v84)
  {
    unint64_t v75 = (unint64_t *)&v84->__shared_owners_;
    do
      unint64_t v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }

  sub_19DFC((uint64_t)&v87);
  sub_19DFC((uint64_t)&v86);
  return sub_19DFC((uint64_t)v85);
}

void sub_1ED8E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_7A768((uint64_t)va);
  sub_88540((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1ED9E8(char **a1, std::mutex *a2)
{
  uint64_t v4 = qword_490E98;
  AudioObjectID v5 = (*(uint64_t (**)(std::mutex *))(a2->__m_.__sig + 120))(a2);
  sub_F9584((uint64_t)v34, v4, v5);
  uint64_t v6 = (os_log_t *)sub_138E8(17);
  uint64_t v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = v36;
    uint64_t v9 = v35;
    uint64_t v10 = v34[0];
    (*(void (**)(char **__return_ptr, std::mutex *))(a2->__m_.__sig + 128))(&v37, a2);
    if (v9) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = v10;
    }
    *(void *)&uint8_t buf[4] = "Device_USB_Aspen.cpp";
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    if (v8) {
      uint64_t v11 = v8;
    }
    __int16 v42 = 1024;
    int v43 = 679;
    __int16 v44 = 2112;
    uint64_t v45 = v11;
    __int16 v46 = 2112;
    int v47 = v37;
    _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d creating a USB output port with name %@ and UID %@",  buf,  0x26u);
    sub_19DFC((uint64_t)&v37);
  }

  if ((sub_14E1A0() & 1) != 0 || (sub_1CC860() & 1) != 0)
  {
    __int128 __p = 0LL;
    int v32 = 0LL;
    uint64_t v33 = 0LL;
  }

  else
  {
    uint64_t v12 = (char *)operator new(0xCuLL);
    int v32 = v12 + 12;
    uint64_t v33 = v12 + 12;
    qmemcpy(v12, "gcrvmorvtshv", 12);
    __int128 __p = v12;
  }

  if (sub_1CCD00())
  {
    (*(void (**)(void ***__return_ptr, std::mutex *))(a2->__m_.__sig + 128))(v39, a2);
    sub_373464(&v37, a2, 1869968496LL);
    char v13 = (char *)operator new(0x298uLL);
    *((void *)v13 + 1) = 0LL;
    *((void *)v13 + 2) = 0LL;
    *(void *)char v13 = off_481418;
    sub_7D084(buf, "");
    sub_FABCC( (uint64_t)(v13 + 24),  &qword_490E98,  (uint64_t)a2,  (uint64_t)&__p,  (uint64_t)v34,  (uint64_t)v39,  &v37,  (__int128 *)buf,  0,  1);
    if (SBYTE3(v45) < 0) {
      operator delete(*(void **)buf);
    }
    v40[0] = v13 + 24;
    v40[1] = v13;
    sub_AFDAC((uint64_t)v40, (void *)v13 + 13, (uint64_t)(v13 + 24));
    UInt32 v29 = v13 + 24;
    uint64_t v30 = (std::__shared_weak_count *)v13;
    *(void *)AudioObjectPropertyAddress buf = &v37;
    sub_7A668((void ***)buf);
    sub_19DFC((uint64_t)v39);
    __int128 v27 = (void **)(v13 + 24);
    unsigned int v28 = (std::__shared_weak_count *)v13;
  }

  else
  {
    (*(void (**)(void *__return_ptr, std::mutex *))(a2->__m_.__sig + 128))(v40, a2);
    sub_373464((char **)buf, a2, 1869968496LL);
    sub_1EE4A0(&v37, &qword_490E98, (uint64_t)a2, (uint64_t)&__p, (uint64_t)v34, (uint64_t)v40, (char **)buf);
    uint64_t v14 = (void **)v37;
    char v13 = (char *)v38;
    UInt32 v29 = v37;
    uint64_t v30 = v38;
    v39[0] = (void **)buf;
    sub_7A668(v39);
    sub_19DFC((uint64_t)v40);
    __int128 v27 = v14;
    unsigned int v28 = (std::__shared_weak_count *)v13;
    if (!v13) {
      goto LABEL_20;
    }
  }

  char v15 = (unint64_t *)(v13 + 8);
  do
    unint64_t v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
LABEL_20:
  sub_3711D4((uint64_t)a2, &v27);
  uint64_t v17 = v28;
  if (v28)
  {
    p_unsigned int shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  __int16 v20 = v29;
  sub_1EE5B0(1869968496LL, (uint64_t)v29, (uint64_t)a2);
  uint64_t v21 = v30;
  *a1 = v20;
  a1[1] = (char *)v21;
  if (v21)
  {
    p_shared_weak_owners = (unint64_t *)&v21->__shared_weak_owners_;
    do
      unint64_t v23 = __ldxr(p_shared_weak_owners);
    while (__stxr(v23 + 1, p_shared_weak_owners));
    int v24 = (unint64_t *)&v21->__shared_owners_;
    do
      unint64_t v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }

  if (__p) {
    operator delete(__p);
  }
  sub_19DFC((uint64_t)&v36);
  sub_19DFC((uint64_t)&v35);
  return sub_19DFC((uint64_t)v34);
}

void sub_1EDDC0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1EDE98(void *a1, std::mutex *a2)
{
  uint64_t v4 = qword_490EF8;
  AudioObjectID v5 = (*(uint64_t (**)(std::mutex *))(a2->__m_.__sig + 120))(a2);
  sub_F9584((uint64_t)v33, v4, v5);
  uint64_t v6 = (os_log_t *)sub_138E8(17);
  uint64_t v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = v34;
    if (!v34) {
      uint64_t v8 = (const __CFString *)v33[0];
    }
    if (v35) {
      uint64_t v9 = v35;
    }
    else {
      uint64_t v9 = v8;
    }
    uint64_t v10 = v31;
    sub_48E98(v31, v9);
    if (v32 < 0) {
      uint64_t v10 = (void **)v31[0];
    }
    (*(void (**)(CFStringRef *__return_ptr, std::mutex *))(a2->__m_.__sig + 128))(theString, a2);
    sub_48E98(&__p, theString[0]);
    if (v30 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "Device_USB_Aspen.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&_BYTE buf[14] = 725;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&_BYTE buf[20] = v10;
    __int16 v38 = 2080;
    uint64_t v39 = p_p;
    _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d creating a USB tap input port with name %s and UID %s",  buf,  0x26u);
    if (v30 < 0) {
      operator delete(__p);
    }
    sub_19DFC((uint64_t)theString);
    if (v32 < 0) {
      operator delete(v31[0]);
    }
  }

  if ((sub_14BFC8() & 1) != 0 || sub_1CC860())
  {
    memset(buf, 0, 24);
  }

  else
  {
    uint64_t v12 = (char *)operator new(0xCuLL);
    *(void *)&_DWORD buf[8] = v12 + 12;
    *(void *)&buf[16] = v12 + 12;
    qmemcpy(v12, "gcrvmorvtshv", 12);
    *(void *)AudioObjectPropertyAddress buf = v12;
  }

  (*(void (**)(CFStringRef *__return_ptr, std::mutex *))(a2->__m_.__sig + 128))(theString, a2);
  sub_373464((char **)v31, a2, 1768845428LL);
  sub_1EE4A0(&__p, &qword_490EF8, (uint64_t)a2, (uint64_t)buf, (uint64_t)v33, (uint64_t)theString, (char **)v31);
  uint64_t v36 = v31;
  sub_7A668(&v36);
  sub_19DFC((uint64_t)theString);
  unint64_t v25 = (void **)__p;
  CFTypeRef v26 = v29;
  if (v29)
  {
    p_unsigned int shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      unint64_t v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }

  sub_3711D4((uint64_t)a2, &v25);
  char v15 = v26;
  if (v26)
  {
    unint64_t v16 = (unint64_t *)&v26->__shared_owners_;
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  char v18 = __p;
  sub_1EE5B0(1768845428LL, (uint64_t)__p, (uint64_t)a2);
  unint64_t v19 = v29;
  *a1 = v18;
  a1[1] = v19;
  if (v19)
  {
    p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
    do
      unint64_t v21 = __ldxr(p_shared_weak_owners);
    while (__stxr(v21 + 1, p_shared_weak_owners));
    __int16 v22 = (unint64_t *)&v19->__shared_owners_;
    do
      unint64_t v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }

  if (*(void *)buf) {
    operator delete(*(void **)buf);
  }
  sub_19DFC((uint64_t)&v35);
  sub_19DFC((uint64_t)&v34);
  return sub_19DFC((uint64_t)v33);
}

void sub_1EE1E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, char a23)
{
}

CFArrayRef sub_1EE290(uint64_t a1)
{
  uint64_t v13 = 0x7074727561736573LL;
  int v14 = 0;
  uint64_t result = (const __CFArray *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 16LL))(a1, &v13);
  if ((_DWORD)result)
  {
    CFArrayRef theArray = 0LL;
    int v10 = 1;
    int v11 = 8;
    (*(void (**)(uint64_t, uint64_t *, void, void, int *, CFArrayRef *))(*(void *)a1 + 40LL))( a1,  &v13,  0LL,  0LL,  &v11,  &theArray);
    uint64_t result = theArray;
    if (theArray)
    {
      unsigned int v3 = 0;
      CFArrayRef v8 = theArray;
      __int16 v9 = 1;
LABEL_4:
      LODWORD(result) = CFArrayGetCount(result);
      while (v3 < result)
      {
        int v7 = 0;
        if ((sub_1A0E0C(&v8, v3, &v7) & 1) == 0)
        {
          uint64_t v4 = (os_log_t *)sub_138E8(13);
          AudioObjectID v5 = *v4;
          if (*v4)
          {
            if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "Device_USB_Aspen.cpp";
              __int16 v16 = 1024;
              int v17 = 1384;
              _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): Channels CFArray contained a non-UInt32 value.",  buf,  0x12u);
            }
          }

          exception = __cxa_allocate_exception(0x10uLL);
          *(void *)exception = &off_4865A0;
          exception[2] = 2003329396;
        }

        *(void *)AudioObjectPropertyAddress buf = 0x707472756D757465LL;
        *(_DWORD *)&_DWORD buf[8] = v7;
        (*(void (**)(uint64_t, _BYTE *, void, void, uint64_t, int *))(*(void *)a1 + 48LL))( a1,  buf,  0LL,  0LL,  4LL,  &v10);
        ++v3;
        uint64_t result = v8;
        if (v8) {
          goto LABEL_4;
        }
      }

      return (const __CFArray *)sub_13818((uint64_t)&v8);
    }
  }

  return result;
}

void sub_1EE474( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_1EE4A0(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char **a7)
{
  int v14 = operator new(0x228uLL);
  v14[1] = 0LL;
  CFStringRef v14[2] = 0LL;
  *int v14 = off_485B80;
  sub_7D084(__p, "");
  sub_F9638((uint64_t)(v14 + 3), a2, a3, a4, a5, a6, a7, (__int128 *)__p);
  v14[3] = &off_46FD40;
  *((_WORD *)v14 + 272) = 0;
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  *a1 = v14 + 3;
  a1[1] = v14;
  sub_AFDAC((uint64_t)a1, v14 + 13, (uint64_t)(v14 + 3));
}

void sub_1EE580( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void sub_1EE5B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)AudioObjectPropertyAddress inAddress = 1936941859;
  *(_DWORD *)&inAddress[4] = a1;
  *(_DWORD *)&inAddress[8] = 0;
  sub_1BB60((std::mutex *)a3);
  if (AudioObjectHasProperty(*(_DWORD *)(a3 + 268), (const AudioObjectPropertyAddress *)inAddress))
  {
    *(_DWORD *)AudioObjectPropertyAddress inAddress = 1936945763;
    *(_DWORD *)&inAddress[4] = a1;
    *(_DWORD *)&inAddress[8] = 0;
    LODWORD(v22[0]) = 4;
    LODWORD(v20[0]) = 0;
    (*(void (**)(uint64_t, _BYTE *, void, void, void **, void **))(*(void *)a3 + 40LL))( a3,  inAddress,  0LL,  0LL,  v22,  v20);
    uint64_t v6 = LODWORD(v20[0]);
    int v7 = (os_log_t *)sub_138E8(17);
    CFArrayRef v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
    {
      sub_23FE8((uint64_t)v22, (os_unfair_lock_t)(a2 + 8));
      if (v23 >= 0) {
        __int16 v9 = v22;
      }
      else {
        __int16 v9 = (void **)v22[0];
      }
      sub_23FE8((uint64_t)v20, (os_unfair_lock_t)(a3 + 8));
      int v10 = v21;
      int v11 = (void **)v20[0];
      sub_2CA1C(__p, a1);
      uint64_t v12 = v20;
      if (v10 < 0) {
        uint64_t v12 = v11;
      }
      if (v19 >= 0) {
        uint64_t v13 = __p;
      }
      else {
        uint64_t v13 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress inAddress = 136316418;
      *(void *)&inAddress[4] = "Device_USB_Aspen.cpp";
      *(_WORD *)&inAddress[12] = 1024;
      *(_DWORD *)&inAddress[14] = 149;
      __int16 v25 = 2048;
      uint64_t v26 = v6;
      __int16 v27 = 2080;
      unsigned int v28 = v9;
      __int16 v29 = 2080;
      char v30 = v12;
      __int16 v31 = 2080;
      char v32 = v13;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Activating sub-port for active data source with ID: %lu for port: '%s' on USB device: '%s'. Scope: '%s'.",  inAddress,  0x3Au);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      if (v21 < 0) {
        operator delete(v20[0]);
      }
      if (v23 < 0) {
        operator delete(v22[0]);
      }
    }

    LODWORD(v20[0]) = v6;
    sub_852D0(inAddress, (__int32 *)v20, 1LL);
    int v14 = *(void **)(a2 + 80);
    char v15 = *(std::__shared_weak_count **)(a2 + 88);
    v22[0] = v14;
    v22[1] = v15;
    if (v15)
    {
      p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
      do
        unint64_t v17 = __ldxr(p_shared_weak_owners);
      while (__stxr(v17 + 1, p_shared_weak_owners));
    }

    sub_1BB524((unsigned int **)inAddress, (uint64_t *)v22, (os_unfair_lock_s *)a3);
    if (v15) {
      std::__shared_weak_count::__release_weak(v15);
    }
    if (*(void *)inAddress)
    {
      *(void *)&inAddress[8] = *(void *)inAddress;
      operator delete(*(void **)inAddress);
    }
  }

void sub_1EE814( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23)
{
  if (v24 < 0) {
    operator delete(v23);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1EE86C(uint64_t a1)
{
  AudioObjectID v2 = operator new(4uLL);
  *(void *)__int128 __p = v2;
  _DWORD *v2 = 1885892727;
  *(void *)&__p[8] = v2 + 1;
  *(void *)&__p[16] = v2 + 1;
  strcpy(v20, "cwdv");
  v20[8] = 0;
  int v21 = 3;
  v23[0] = 0LL;
  v23[1] = 0LL;
  __int16 v22 = v23;
  int v24 = 44739242;
  CFTypeRef cf = 0LL;
  sub_3710DC((uint64_t *)v14, a1, (uint64_t)__p);
  sub_EDD50(&v16, v14);
  sub_85B80((uint64_t *)v14);
  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(v23[0]);
  if (*(void *)__p)
  {
    *(void *)&__p[8] = *(void *)__p;
    operator delete(*(void **)__p);
  }

  if (v18 == 1) {
    goto LABEL_14;
  }
  unsigned int v3 = (os_log_t *)sub_138E8(13);
  uint64_t v4 = *v3;
  if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
  {
    int v5 = v18;
    sub_2CA1C(v14, 1885892727LL);
    uint64_t v6 = v15 >= 0 ? v14 : (void **)v14[0];
    *(_DWORD *)__int128 __p = 136315906;
    *(void *)&__p[4] = "Device_USB_Aspen.cpp";
    *(_WORD *)&_BYTE __p[12] = 1024;
    *(_DWORD *)&__p[14] = 1349;
    *(_WORD *)&_BYTE __p[18] = 1024;
    *(_DWORD *)&__p[20] = v5;
    *(_WORD *)__int16 v20 = 2080;
    *(void *)&void v20[2] = v6;
    _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Found %u ports of type '%s' (expected 1)",  __p,  0x22u);
    if (v15 < 0) {
      operator delete(v14[0]);
    }
  }

  if (v18 == 1)
  {
LABEL_14:
    uint64_t v7 = sub_1EEB84(1LL, a1);
    if (sub_1ECFAC(a1))
    {
      CFArrayRef v8 = (os_log_t *)sub_138E8(17);
      __int16 v9 = *v8;
      if (*v8)
      {
        if (os_log_type_enabled(*v8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int128 __p = 136315394;
          *(void *)&__p[4] = "Device_USB_Aspen.cpp";
          *(_WORD *)&_BYTE __p[12] = 1024;
          *(_DWORD *)&__p[14] = 1355;
          _os_log_impl(&dword_0, v9, OS_LOG_TYPE_INFO, "%25s:%-5d Detected a USB display device (speaker)", __p, 0x12u);
        }
      }
    }

    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v17 + 16) + 544LL))( *(void *)(v17 + 16),  1LL,  1LL,  v7);
    uint64_t v10 = sub_546E0();
    int v11 = *(std::__shared_weak_count **)(v17 + 24);
    *(void *)__int128 __p = *(void *)(v17 + 16);
    *(void *)&__p[8] = v11;
    if (v11)
    {
      p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
      do
        unint64_t v13 = __ldxr(p_shared_weak_owners);
      while (__stxr(v13 + 1, p_shared_weak_owners));
    }

    sub_1013F4(v10, (uint64_t *)__p);
    if (v11) {
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  sub_1BB88(&v16);
}

void sub_1EEB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_1EEB84(uint64_t a1, uint64_t a2)
{
  if (sub_1ECFAC(a2)) {
    return 1781740087LL;
  }
  uint64_t v4 = sub_15984C(a1, 1, a2);
  uint64_t v5 = v4;
  if ((_DWORD)v4 && (_DWORD)v4 != 1784965235 && (_DWORD)v4 != 1784965232) {
    return v5;
  }
  uint64_t v6 = sub_1E9A90(a2);
  uint64_t v7 = v6;
  if (v6)
  {
    (*(void (**)(CFTypeRef *__return_ptr, uint64_t))(*(void *)v6 + 448LL))(&v31, v6);
    if (v31)
    {
      sub_90BC0();
      __int16 v8 = (*(uint64_t (**)(void))(qword_48CD58 + 32))();
      int v9 = v8;
      int v10 = HIBYTE(v8);
      goto LABEL_12;
    }

    int v9 = 0;
  }

  else
  {
    int v9 = 0;
    CFTypeRef v31 = 0LL;
  }

  int v10 = 1;
LABEL_12:
  unsigned int v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 440LL))(a2, 1LL);
  int v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 88LL))(a2, 1LL);
  if (v11 > 2 || v12 != 1)
  {
    if (v31)
    {
      int v14 = (os_log_t *)sub_138E8(17);
      char v15 = *v14;
      if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        uint64_t v33 = "Device_USB_Aspen.cpp";
        __int16 v34 = 1024;
        int v35 = 1510;
        _os_log_impl(&dword_0, v15, OS_LOG_TYPE_INFO, "%25s:%-5d Checking USB input for parity", buf, 0x12u);
      }

      a1 = 1784965235LL;
      if (sub_1ECC48(1768845428, v7) == 1 && v10 && v9)
      {
        uint64_t v16 = (os_log_t *)sub_138E8(17);
        uint64_t v17 = *v16;
        if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v33 = "Device_USB_Aspen.cpp";
          __int16 v34 = 1024;
          int v35 = 1520;
          _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_INFO,  "%25s:%-5d Partner device meets Parity Guidelines for Input - Forcing input to Headset sub type",  buf,  0x12u);
        }

void sub_1EF004( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

void sub_1EF060(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_475AE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1EF070(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_475AE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1EF090(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1EF0A0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_481418;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1EF0B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_481418;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1EF0D0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1EF0E0(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_5C3C4(a2);
  if ((result & 1) != 0)
  {
    *(_DWORD *)a1 = 2003329396;
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 24) = 0;
    uint64_t result = sub_5C41C(a2);
    int v8 = result;
    if ((_DWORD)result)
    {
      uint64_t v7 = 0LL;
      uint64_t result = sub_5C474(a2);
      *(_DWORD *)a1 = result;
      if (!(_DWORD)result)
      {
        uint64_t v5 = v7;
        *(_BYTE *)(a1 + 24) = 1;
        *(void *)(a1 + 8) = &off_483688;
        *(void *)(a1 + 16) = v5;
        v6[0] = &off_483688;
        v6[1] = 0LL;
        return (uint64_t)sub_39FD8(v6);
      }
    }
  }

  else
  {
    *(_DWORD *)a1 = 2003332927;
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }

  return result;
}

uint64_t sub_1EF1C4(int a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t, BOOL))(*(void *)a2 + 88LL))(a2, a1 != 1768845428))
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t, BOOL, void))(*(void *)a2 + 96LL))(a2, a1 != 1768845428, 0LL);
    unint64_t v8 = sub_5C2F8(v4);
    *((void *)&v10 + 1) = v9;
    *(void *)&__int128 v10 = v8;
    uint64_t v6 = v10 >> 32;
    if ((v6 & 0xFF00000000LL) != 0 && ((v6 - 769) < 2 || (_DWORD)v6 == 1026 || (_DWORD)v6 == 513))
    {
      uint64_t v7 = v6 & 0xFFFFFF00;
      uint64_t v6 = v6;
    }

    else
    {
      uint64_t v6 = 0LL;
      uint64_t v7 = 0LL;
    }

    uint64_t v5 = 0x100000000LL;
  }

  else
  {
    uint64_t v5 = 0LL;
    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
  }

  return v6 | v5 | v7;
}

uint64_t sub_1EF2C0(const __CFNumber *a1, CFNumberType a2)
{
  float valuePtr = 0.0;
  int Value = CFNumberGetValue(a1, a2, &valuePtr);
  int v3 = (int)valuePtr;
  if (!Value) {
    int v3 = 0;
  }
  return v3 | ((Value != 0) << 8);
}

uint64_t sub_1EF2FC(const __CFNumber *a1, CFNumberType a2)
{
  double valuePtr = 0.0;
  int Value = CFNumberGetValue(a1, a2, &valuePtr);
  int v3 = (int)valuePtr;
  if (!Value) {
    int v3 = 0;
  }
  return v3 | ((Value != 0) << 8);
}

uint64_t sub_1EF338(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_5C3C4(a2);
  if ((result & 1) != 0)
  {
    *(_DWORD *)a1 = 2003329396;
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 24) = 0;
    uint64_t result = sub_5C41C(a2);
    int v8 = result;
    if ((_DWORD)result)
    {
      uint64_t v7 = 0LL;
      uint64_t result = sub_5C474(a2);
      *(_DWORD *)a1 = result;
      if (!(_DWORD)result)
      {
        uint64_t v5 = v7;
        *(_BYTE *)(a1 + 24) = 1;
        *(void *)(a1 + 8) = &off_486378;
        *(void *)(a1 + 16) = v5;
        v6[0] = &off_486378;
        v6[1] = 0LL;
        return (uint64_t)sub_39FD8(v6);
      }
    }
  }

  else
  {
    *(_DWORD *)a1 = 2003332927;
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }

  return result;
}

uint64_t sub_1EF41C(uint64_t a1, uint64_t a2, uint64_t a3, os_unfair_lock_s *a4)
{
  if (!a4)
  {
    uint64_t v7 = (os_log_t *)sub_138E8(13);
    int v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      unsigned int v11 = "Device_USB_Aspen.cpp";
      __int16 v12 = 1024;
      int v13 = 558;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v10,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  int v5 = sub_372370(a4);
  sub_1EF924((unsigned __int8 *)a4, v5);
  return 0LL;
}

void sub_1EF528(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1EF544(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  if (!a4)
  {
    int v5 = (os_log_t *)sub_138E8(13);
    uint64_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      uint64_t v9 = "Device_USB_Aspen.cpp";
      __int16 v10 = 1024;
      int v11 = 525;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v8,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  sub_1EF984(a4);
  return 0LL;
}

void sub_1EF640(_Unwind_Exception *exception_object)
{
}

void sub_1EF65C(os_unfair_lock_s **a1)
{
  AudioObjectID v2 = *a1;
  int v3 = sub_372370(*a1);
  sub_1EF924((unsigned __int8 *)v2, v3);
  sub_1EF984(v2);
  operator delete(a1);
}

void sub_1EF6DC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    char v15 = __cxa_begin_catch(exception_object);
    uint64_t v16 = (os_log_t *)sub_138E8(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(va_start(va, a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(va_start(va, a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 98;
      unsigned __int16 v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      unsigned __int8 v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }

  else
  {
    int v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      char v23 = v22;
      int v24 = (os_log_t *)sub_138E8(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16LL))(v23);
        LODWORD(va_start(va, a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(va_start(va, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 98;
        unsigned __int16 v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        unsigned __int8 v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      __int16 v27 = (os_log_t *)sub_138E8(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(va_start(va, a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(va_start(va, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 98;
        unsigned __int16 v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        unsigned __int8 v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x1EF6A4LL);
}

unsigned __int8 *sub_1EF924(unsigned __int8 *result, int a2)
{
  if (a2 == 1)
  {
    AudioObjectID v2 = result;
    v4[0] = 0;
    uint64_t v5 = 0LL;
    int v3 = (_DWORD *)sub_546E0();
    sub_1008E4(v3);
    sub_1E9BB8(v2);
    return sub_E9064(v4);
  }

  return result;
}

void sub_1EF970( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
}

unsigned __int8 *sub_1EF984(_BYTE *a1)
{
  uint64_t result = (unsigned __int8 *)_os_feature_enabled_impl("AudioAccessoryFeatures", "USBCUnifiedDevice");
  if ((_DWORD)result)
  {
    uint64_t v8 = 0x676C6F626869646ELL;
    int v9 = 0;
    int v6 = 0;
    int v7 = 4;
    (*(void (**)(_BYTE *, uint64_t *, void, void, int *, int *))(*(void *)a1 + 40LL))( a1,  &v8,  0LL,  0LL,  &v7,  &v6);
    if (v6)
    {
      return (unsigned __int8 *)(*(uint64_t (**)(_BYTE *))(*(void *)a1 + 432LL))(a1);
    }

    else
    {
      v4[0] = 0;
      uint64_t v5 = 0LL;
      int v3 = (_DWORD *)sub_546E0();
      sub_1008E4(v3);
      sub_1E9BB8(a1);
      return sub_E9064(v4);
    }
  }

  return result;
}

void sub_1EFA38(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_1EFA4C(CFTypeRef *a1, AudioObjectID inObjectID, double a3)
{
  inAddress.int mSelector = 1818446148;
  *(double *)&inAddress.AudioObjectPropertyScope mScope = a3;
  if (!AudioObjectHasProperty(inObjectID, &inAddress))
  {
    LOBYTE(outData) = 0;
    char v16 = 0;
    OSStatus PropertyData = 2003332927;
    LOBYTE(cf) = 0;
    char v10 = 0;
    sub_14AB14((uint64_t)&outData);
    goto LABEL_10;
  }

  LOBYTE(outData) = 0;
  char v16 = 0;
  OSStatus PropertyData = 2003329396;
  LOBYTE(cf) = 0;
  char v10 = 0;
  sub_14AB14((uint64_t)&outData);
  UInt32 ioDataSize = sub_37408(inObjectID, &inAddress, 0, 0LL);
  if (!ioDataSize
    || (double outData = 0LL,
        (OSStatus PropertyData = AudioObjectGetPropertyData(inObjectID, &inAddress, 0, 0LL, &ioDataSize, &outData)) != 0))
  {
LABEL_10:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = PropertyData;
  }

  uint64_t v5 = outData;
  int v13 = outData;
  sub_158360(&v12, &v13);
  char v10 = 1;
  CFTypeRef cf = v12;
  if (v5) {
    CFRelease(v5);
  }
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  return sub_14AB14((uint64_t)&cf);
}

void sub_1EFBD8(_Unwind_Exception *a1)
{
}

void *sub_1EFBEC(uint64_t a1, AudioObjectID a2, double a3)
{
  AudioObjectID v11 = a2;
  inAddress.int mSelector = 1836411236;
  *(double *)&inAddress.AudioObjectPropertyScope mScope = a3;
  uint64_t result = (void *)sub_C80E0((uint64_t)&v6, &v11, &inAddress, 0, 0LL);
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 16) = 0;
  if (v9)
  {
    uint64_t v5 = v8;
    uint64_t v8 = 0LL;
    *(void *)a1 = &off_483688;
    *(void *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = 1;
    return sub_39FD8(&v7);
  }

  return result;
}

uint64_t sub_1EFC74(uint64_t a1, AudioObjectID a2, const __CFString *cf)
{
  if (!cf)
  {
    *(void *)cfa = 0LL;
LABEL_177:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  CFRetain(cf);
  sub_7F234(cfa, cf);
  if (!*(void *)cfa) {
    goto LABEL_177;
  }
  sub_48100((uint64_t)&v92, *(const __CFString **)cfa);
  if (*(void *)cfa) {
    CFRelease(*(CFTypeRef *)cfa);
  }
  sub_1EFA4C(&v88, a2, COERCE_DOUBLE(1735159650LL));
  sub_7D084(&__str, ":");
  sub_1EFBEC((uint64_t)v89, a2, COERCE_DOUBLE(1735159650LL));
  if ((_BYTE)cap)
  {
    CFTypeRef v6 = v89[1];
    if (v89[1]) {
      CFRetain(v89[1]);
    }
    sub_7F234(&v93, v6);
    if (!v93.__r_.__value_.__r.__words[0])
    {
      uint64_t v83 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v83, "Could not construct");
    }

    sub_7D084(__p, "");
    uint64_t v7 = (const __CFString *)v93.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v86) < 0)
    {
      sub_24054(cfa, __p[0], (unint64_t)__p[1]);
    }

    else
    {
      *(_OWORD *)cfa = *(_OWORD *)__p;
      *(void *)&cfa[16] = v86;
    }

    if (v7 && (CFTypeID TypeID = CFStringGetTypeID(), TypeID == CFGetTypeID(v7)))
    {
      sub_7D354((uint64_t)&v87, v7);
      if ((cfa[23] & 0x80000000) != 0) {
        operator delete(*(void **)cfa);
      }
    }

    else
    {
      std::string v87 = *(std::string *)cfa;
    }

    if (SHIBYTE(v86) < 0) {
      operator delete(__p[0]);
    }
    if (v93.__r_.__value_.__r.__words[0]) {
      CFRelease(v93.__r_.__value_.__l.__data_);
    }
    std::operator+<char>(":", &v87);
    char v9 = std::string::append((std::string *)cfa, ":", 1uLL);
    std::string::size_type v10 = v9->__r_.__value_.__r.__words[0];
    v93.__r_.__value_.__r.__words[0] = v9->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v93.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v9->__r_.__value_.__r.__words[1] + 7);
    unsigned __int8 size = v9->__r_.__value_.__s.__size_;
    v9->__r_.__value_.__l.__size_ = 0LL;
    v9->__r_.__value_.__l.__cap_ = 0LL;
    v9->__r_.__value_.__r.__words[0] = 0LL;
    __str.__r_.__value_.__r.__words[0] = v10;
    __str.__r_.__value_.__l.__size_ = v93.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v93.__r_.__value_.__r.__words + 7);
    __str.__r_.__value_.__s.__size_ = size;
    if ((cfa[23] & 0x80000000) != 0) {
      operator delete(*(void **)cfa);
    }
    if ((_BYTE)cap) {
      sub_39FD8(v89);
    }
  }

  __int16 v12 = (const __CFNumber *)v88;
  if (v88) {
    CFRetain(v88);
  }
  sub_93D94((uint64_t)cfa);
  *(_DWORD *)&cfa[*(void *)(*(void *)&cfa[16] - 24LL) + 24] = *(_DWORD *)&cfa[*(void *)(*(void *)&cfa[16] - 24LL)
                                                                                + 24] & 0xFFFFFFB5 | 8;
  if (!v12)
  {
    uint64_t v82 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v82, "Could not construct");
  }

  int v13 = sub_8D7E0(v12);
  std::ostream::operator<<(&cfa[16], v13);
  sub_82924(&v93, (uint64_t)&cfa[24]);
  *(void *)&cfa[16] = v14;
  if (v98 < 0) {
    operator delete(v97);
  }
  std::streambuf::~streambuf(&cfa[24]);
  std::ios::~ios(&v99);
  char v15 = std::string::insert(&v93, 0LL, ":", 1uLL);
  __int128 v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v87.__r_.__value_.__l.__cap_ = v15->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0LL;
  v15->__r_.__value_.__l.__cap_ = 0LL;
  v15->__r_.__value_.__r.__words[0] = 0LL;
  os_log_t v17 = std::string::append(&v87, ":", 1uLL);
  __int128 v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  int64_t cap = v17->__r_.__value_.__l.__cap_;
  *(_OWORD *)uint64_t v89 = v18;
  v17->__r_.__value_.__l.__size_ = 0LL;
  v17->__r_.__value_.__l.__cap_ = 0LL;
  v17->__r_.__value_.__r.__words[0] = 0LL;
  CFRelease(v12);
  unsigned __int16 v19 = &v92;
  if ((v92.__r_.__value_.__s.__size_ & 0x80u) == 0)
  {
    std::string::size_type v20 = v92.__r_.__value_.__s.__size_;
  }

  else
  {
    std::string::size_type v20 = v92.__r_.__value_.__l.__size_;
    unsigned __int16 v19 = (std::string *)v92.__r_.__value_.__r.__words[0];
  }

  CFTypeRef v21 = (CFTypeRef)HIBYTE(cap);
  int v22 = (CFTypeRef *)v89[0];
  if (cap < 0) {
    CFTypeRef v21 = v89[1];
  }
  else {
    int v22 = v89;
  }
  char v23 = (unsigned __int8 *)v19 + v20;
  if (v20 && v21)
  {
    int v24 = v19;
    os_log_t v25 = (std::string *)((char *)v19 + v20);
    do
    {
      if (v24->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v22)
      {
        uint64_t v26 = 1LL;
        while (v21 != (CFTypeRef)v26)
        {
          int v27 = v24->__r_.__value_.__s.__data_[v26];
          int v28 = *((unsigned __int8 *)v22 + v26++);
          if (v27 != v28) {
            goto LABEL_48;
          }
        }

        os_log_t v25 = v24;
      }

LABEL_154:
    unint64_t v52 = 0LL;
LABEL_155:
    unint64_t v71 = 0LL;
    goto LABEL_156;
  }

  if (v61 == __str.__r_.__value_.__l.__size_ - 1) {
    goto LABEL_154;
  }
LABEL_137:
  if (v52 >= v61 - 1) {
    unint64_t v63 = v61 - 1;
  }
  else {
    unint64_t v63 = v52;
  }
  if (v52 - v63 > 1) {
    unint64_t v52 = v63 + 1;
  }
  if (!v52) {
    goto LABEL_155;
  }
  int v64 = (unsigned __int8 *)v51 + v52;
  uint64_t v65 = v51;
  char v66 = (std::string *)((char *)v51 + v52);
  do
  {
    char v67 = v65;
    unint64_t v68 = (unsigned __int8 *)v65;
    while (1)
    {
      int v69 = *v68++;
      if (v69 == 58) {
        break;
      }
      char v67 = (std::string *)v68;
      if (v68 == v64)
      {
        char v67 = v66;
        goto LABEL_149;
      }
    }

    uint64_t v65 = (std::string *)((char *)&v67->__r_.__value_.__l.__data_ + 1);
    char v66 = v67;
  }

  while (v68 != v64);
LABEL_149:
  unint64_t v52 = 0LL;
  if (v67 == (std::string *)v64)
  {
    unint64_t v71 = 0LL;
    goto LABEL_156;
  }

  int64_t v70 = (char *)v67 - (char *)v51;
  unint64_t v71 = 0LL;
  if (v70 != -1)
  {
    unint64_t v72 = v70 - v61;
    if (v70 - v61 < 0) {
      unint64_t v72 = v61 - v70;
    }
    if (v72 >= 2)
    {
      std::string::basic_string((std::string *)cfa, &__str, v70 + 1, v61 - 1, (std::allocator<char> *)&v87);
      unsigned int v79 = std::stoul((const std::string *)cfa, 0LL, 16);
      if ((cfa[23] & 0x80000000) != 0) {
        operator delete(*(void **)cfa);
      }
      std::string::basic_string((std::string *)cfa, &__str, v62, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v87);
      unint64_t v80 = std::stoul((const std::string *)cfa, 0LL, 16);
      if ((cfa[23] & 0x80000000) != 0) {
        operator delete(*(void **)cfa);
      }
      unint64_t v71 = v80 << 32;
      unint64_t v52 = v79;
      goto LABEL_156;
    }

    goto LABEL_154;
  }

      uint64_t v111 = *(unsigned __int8 *)(v100 + 47);
      if ((v111 & 0x80u) == 0LL) {
        std::mutex v112 = (void *)*(unsigned __int8 *)(v100 + 47);
      }
      else {
        std::mutex v112 = *(void **)(v100 + 32);
      }
      int v113 = (void *)*((unsigned __int8 *)v582 + 47);
      uint64_t v114 = (char)v113;
      if (v112 == v113)
      {
        int v115 = (const void **)(v100 + 24);
        if (v114 >= 0) {
          CFStringRef v116 = v582 + 3;
        }
        else {
          CFStringRef v116 = (void **)v582[3];
        }
        if ((v111 & 0x80) != 0)
        {
          if (memcmp(*v115, v116, *(void *)(v100 + 32))) {
            goto LABEL_170;
          }
        }

        else if (*(_BYTE *)(v100 + 47))
        {
          while (*(unsigned __int8 *)v115 == *(unsigned __int8 *)v116)
          {
            int v115 = (const void **)((char *)v115 + 1);
            CFStringRef v116 = (void **)((char *)v116 + 1);
            if (!--v111) {
              goto LABEL_169;
            }
          }

          goto LABEL_170;
        }

          AudioObjectID v77 = *(void *)(a2 + 192);
          int v78 = *(unsigned int *)(a2 + 144);
          unsigned int v79 = sub_1FF9AC((void *)a2);
          if ((_DWORD)v78 == 1885892674) {
            unint64_t v80 = v79;
          }
          else {
            unint64_t v80 = 0;
          }
          if (v80 != 1)
          {
            LODWORD(v100.__r_.__value_.__l.__data_) = 17;
            sub_202AFC(buf, v78, v77, (unsigned int *)&v100);
            v93[0] = *(void **)&buf[0].mSelector;
            *(_OWORD *)&v93[1] = *(_OWORD *)&buf[0].mElement;
            sub_7E6D4( (char *)&__p,  *(char **)&buf[0].mSelector,  *(uint64_t *)&buf[0].mElement,  (uint64_t)(*(void *)&buf[0].mElement - *(void *)&buf[0].mSelector) >> 2);
LABEL_165:
            uint64_t v82 = (os_log_t *)sub_138E8(24);
            __int128 v18 = *v82;
            if (!*v82 || !os_log_type_enabled(*v82, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_178;
            }
            sub_2029E8(&v100, (float *)v93[0], (float *)v93[1]);
            unsigned __int8 size = (char)v100.__r_.__value_.__s.__size_;
            char v84 = v100.__r_.__value_.__r.__words[0];
            sub_2029E8(&v99, (float *)__p, (float *)v92);
            CFTypeRef v85 = &v100;
            if (size < 0) {
              CFTypeRef v85 = (std::string *)v84;
            }
            if ((v99.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              uint64_t v86 = &v99;
            }
            else {
              uint64_t v86 = (std::string *)v99.__r_.__value_.__r.__words[0];
            }
            buf[0].int mSelector = 136315906;
            *(void *)&buf[0].AudioObjectPropertyScope mScope = "PortUtilities.cpp";
            LOWORD(buf[1].mSelector) = 1024;
            *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 795;
            HIWORD(buf[1].mScope) = 2080;
            *(void *)&buf[1].AudioObjectPropertyElement mElement = v85;
            LOWORD(buf[2].mScope) = 2080;
            *(void *)((char *)&buf[2].mScope + 2) = v86;
            char v23 = "%25s:%-5d PlaybackDosimetry : volume curve for wireless headset. In: %s -> Out: %s";
            goto LABEL_173;
          }

          char v81 = sub_59468(a2) - 8195;
          if (v81 <= 6 && ((1 << v81) & 0x4D) != 0)
          {
            int v103 = 0;
            *(_OWORD *)&buf[0].int mSelector = *(_OWORD *)"";
            *(_OWORD *)&buf[1].AudioObjectPropertyScope mScope = unk_402038;
            *(_OWORD *)&buf[2].AudioObjectPropertyElement mElement = xmmword_402048;
            __int16 v102 = unk_402058;
            sub_909D8((char *)&__p, (char *)buf, (uint64_t)v104, 0x11uLL);
            LODWORD(v100.__r_.__value_.__l.__data_) = ((void)v92 - (void)__p) >> 2;
            sub_202AFC(buf, 1885892674LL, v77, (unsigned int *)&v100);
          }

          else
          {
            int v103 = 0;
            *(_OWORD *)&buf[0].int mSelector = xmmword_402460;
            *(_OWORD *)&buf[1].AudioObjectPropertyScope mScope = unk_402470;
            *(_OWORD *)&buf[2].AudioObjectPropertyElement mElement = xmmword_402480;
            __int16 v102 = unk_402490;
            sub_909D8((char *)&__p, (char *)buf, (uint64_t)v104, 0x11uLL);
            LODWORD(v100.__r_.__value_.__l.__data_) = ((void)v92 - (void)__p) >> 2;
            sub_202AFC(buf, 1885892674LL, v77, (unsigned int *)&v100);
          }

LABEL_156:
  uint64_t v49 = v71 | v52;
  if (v92.__r_.__value_.__s.__data_[16]) {
    sub_39FD8(&v92);
  }
LABEL_160:
  sub_36E3FC(a1, a2, cf, v37, v49);
  *(void *)a1 = &off_4758F8;
  *(_WORD *)(a1 + 492) = 0;
  *(_BYTE *)(a1 + 494) = 0;
  if (sub_1ECFAC(a1))
  {
    AudioObjectID v73 = *(_DWORD *)(a1 + 268);
    strcpy(cfa, "#mtsptuo");
    cfa[9] = 0;
    *(_WORD *)&cfa[10] = 0;
    LODWORD(v92.__r_.__value_.__l.__data_) = 0;
    AudioObjectGetPropertyDataSize(v73, (const AudioObjectPropertyAddress *)cfa, 0, 0LL, (UInt32 *)&v92);
    BOOL v74 = LODWORD(v92.__r_.__value_.__l.__data_) == 0;
    if (LODWORD(v92.__r_.__value_.__l.__data_)) {
      unsigned int v75 = 1869968496;
    }
    else {
      unsigned int v75 = 1768845428;
    }
    int v76 = 1;
    goto LABEL_168;
  }

  if (sub_1CBE08())
  {
    AudioObjectID v77 = *(_DWORD *)(a1 + 268);
    strcpy(cfa, "#mtsptuo");
    cfa[9] = 0;
    *(_WORD *)&cfa[10] = 0;
    LODWORD(v92.__r_.__value_.__l.__data_) = 0;
    AudioObjectGetPropertyDataSize(v77, (const AudioObjectPropertyAddress *)cfa, 0, 0LL, (UInt32 *)&v92);
    if (LODWORD(v92.__r_.__value_.__l.__data_))
    {
      int v76 = 0;
      BOOL v74 = 0;
      unsigned int v75 = 1869968496;
LABEL_168:
      sub_371820(a1, v76, v75, v74);
    }
  }

  return a1;
}

void sub_1F07AC( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef a13, uint64_t a14, uint64_t a15, CFTypeRef cf, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, uint64_t a27, CFTypeRef a28, uint64_t a29, uint64_t a30, void *__p, uint64_t a32, int a33, __int16 a34, char a35, char a36)
{
  if (a2)
  {
    if (a36 < 0) {
      operator delete(__p);
    }
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1F0500LL);
  }

  _Unwind_Resume(a1);
}

void sub_1F0A70(uint64_t a1, uint64_t a2)
{
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1F0AC8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1F0AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFBundleRef bundle = CFBundleGetBundleWithIdentifier(@"com.apple.audio.CoreAudio.VirtualAudio");
  char v31 = 0;
  if (!bundle)
  {
    char v23 = (os_log_t *)sub_138E8(13);
    int v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Localization.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = 29;
      _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): CFBundleGetBundleWithIdentifier() returned NULL.",  buf,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CFBundleGetBundleWithIdentifier() returned NULL.");
  }

  sub_2CA1C(&v32, a2);
  int v6 = *(char *)(a3 + 23);
  if (v6 >= 0) {
    uint64_t v7 = (const std::string::value_type *)a3;
  }
  else {
    uint64_t v7 = *(const std::string::value_type **)a3;
  }
  if (v6 >= 0) {
    std::string::size_type v8 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v8 = *(void *)(a3 + 8);
  }
  char v9 = std::string::insert(&v32, 0LL, v7, v8);
  __int128 v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  *(void *)&buf[16] = v9->__r_.__value_.__l.__cap_;
  *(_OWORD *)AudioObjectPropertyAddress buf = v10;
  v9->__r_.__value_.__l.__size_ = 0LL;
  v9->__r_.__value_.__l.__cap_ = 0LL;
  v9->__r_.__value_.__r.__words[0] = 0LL;
  if (buf[23] >= 0) {
    AudioObjectID v11 = buf;
  }
  else {
    AudioObjectID v11 = *(const char **)buf;
  }
  __int16 v12 = CFStringCreateWithCString(kCFAllocatorDefault, v11, 0x600u);
  CFStringRef key = v12;
  char v29 = 1;
  if (!v12 || !CFStringGetLength(v12))
  {
    os_log_t v17 = (os_log_t *)sub_138E8(13);
    __int128 v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v32.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v32.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Localization.cpp";
      WORD2(v32.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&v32.__r_.__value_.__r.__words[1] + 6) = 34;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): CFStringCreateWithCString() returned NULL for our key",  (uint8_t *)&v32,  0x12u);
    }

    unsigned __int16 v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v19, "CFStringCreateWithCString() returned NULL for our key");
  }

  int v13 = CFBundleCopyLocalizedString(bundle, key, 0LL, @"Localizable");
  CFStringRef theString1 = v13;
  unsigned __int8 v27 = 1;
  if (!v13 || !CFStringGetLength(v13))
  {
    std::string::size_type v20 = (os_log_t *)sub_138E8(13);
    CFTypeRef v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v32.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v32.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Localization.cpp";
      WORD2(v32.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&v32.__r_.__value_.__r.__words[1] + 6) = 38;
      _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): CFBundleCopyLocalizedString returned NULL.",  (uint8_t *)&v32,  0x12u);
    }

    int v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v22, "CFBundleCopyLocalizedString returned NULL.");
  }

  if (CFStringCompare(theString1, key, 0LL))
  {
    CFStringRef v14 = theString1;
    *(void *)a1 = theString1;
    int v15 = v27;
    *(_BYTE *)(a1 + 8) = v27;
    if (v15 && v14) {
      CFRetain(v14);
    }
  }

  else
  {
    *(void *)a1 = 0LL;
    *(_BYTE *)(a1 + 8) = 1;
  }

  sub_19DFC((uint64_t)&theString1);
  sub_19DFC((uint64_t)&key);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  return sub_1F0F10((uint64_t)&bundle);
}

void sub_1F0E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1F0F10(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
  {
    AudioObjectID v2 = *(const void **)a1;
    if (*(void *)a1)
    {
      CFRelease(v2);
      *(void *)a1 = 0LL;
    }
  }

  return a1;
}

void sub_1F0F4C(void *a1, uint64_t a2)
{
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (!*a1)
  {
    sub_1F0A70((uint64_t)__p, a2);
    sub_6A8C0((uint64_t)a1, (uint64_t)__p);
    sub_19DFC((uint64_t)__p);
  }

void sub_1F0FCC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_1F1008(uint64_t a1)
{
  uint64_t v2 = sub_138E8(11);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    int v3 = *(os_log_s **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v10 = 136315650;
        AudioObjectID v11 = "IAPManager.cpp";
        __int16 v12 = 1024;
        int v13 = 464;
        __int16 v14 = 2048;
        uint64_t v15 = a1;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d + IAPManager::IAPStateChangeListener(context %p)",  (uint8_t *)&v10,  0x1Cu);
      }
    }
  }

  uint64_t v4 = (os_log_t *)sub_138E8(11);
  char v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    int v10 = 136315394;
    AudioObjectID v11 = "IAPManager.cpp";
    __int16 v12 = 1024;
    int v13 = 466;
    _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d IAP executed the callback registered with IAPAudioRegisterDeviceStateChangedCallback().",  (uint8_t *)&v10,  0x12u);
  }

  if (!a1)
  {
    std::string::size_type v8 = (os_log_t *)sub_138E8(13);
    char v9 = *v8;
    if (*v8)
    {
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
      {
        int v10 = 136315394;
        AudioObjectID v11 = "IAPManager.cpp";
        __int16 v12 = 1024;
        int v13 = 468;
        _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: iAP passed context as NULL.",  (uint8_t *)&v10,  0x12u);
      }
    }
  }

  sub_1F394C(a1);
  uint64_t v6 = sub_138E8(11);
  if ((*(_BYTE *)(v6 + 8) & 1) != 0)
  {
    uint64_t v7 = *(os_log_s **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        int v10 = 136315650;
        AudioObjectID v11 = "IAPManager.cpp";
        __int16 v12 = 1024;
        int v13 = 473;
        __int16 v14 = 2048;
        uint64_t v15 = a1;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - IAPManager::IAPStateChangeListener(context %p)",  (uint8_t *)&v10,  0x1Cu);
      }
    }
  }

void sub_1F1240(uint64_t a1)
{
  uint64_t v2 = sub_138E8(11);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    int v3 = *(os_log_s **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 v16 = 136315650;
        *(void *)&v16[4] = "IAPManager.cpp";
        __int16 v17 = 1024;
        int v18 = 479;
        __int16 v19 = 2048;
        uint64_t v20 = a1;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d + IAPManager::IAPVolumeControlSupportChangeListener(context %p)",  v16,  0x1Cu);
      }
    }
  }

  uint64_t v4 = sub_138E8(11);
  uint64_t v5 = sub_138E8(38);
  char v6 = 0;
  uint64_t v7 = 0LL;
  *(void *)__int128 v16 = 0x100000002LL;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = *(int *)&v16[4 * v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1LL;
    if ((v10 & 1) != 0) {
      goto LABEL_11;
    }
  }

  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
LABEL_11:
  AudioObjectID v11 = *(os_log_s **)v4;
  if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 v16 = 136315394;
    *(void *)&v16[4] = "IAPManager.cpp";
    __int16 v17 = 1024;
    int v18 = 481;
    _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Received callback from iapd for volume control support changed.",  v16,  0x12u);
  }

  if (!a1)
  {
    __int16 v14 = (os_log_t *)sub_138E8(13);
    uint64_t v15 = *v14;
    if (*v14)
    {
      if (os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 v16 = 136315394;
        *(void *)&v16[4] = "IAPManager.cpp";
        __int16 v17 = 1024;
        int v18 = 483;
        _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: iAP passed context as NULL.",  v16,  0x12u);
      }
    }
  }

  sub_1F394C(a1);
  uint64_t v12 = sub_138E8(11);
  if ((*(_BYTE *)(v12 + 8) & 1) != 0)
  {
    int v13 = *(os_log_s **)v12;
    if (*(void *)v12)
    {
      if (os_log_type_enabled(*(os_log_t *)v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 v16 = 136315650;
        *(void *)&v16[4] = "IAPManager.cpp";
        __int16 v17 = 1024;
        int v18 = 488;
        __int16 v19 = 2048;
        uint64_t v20 = a1;
        _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - IAPManager::IAPVolumeControlSupportChangeListener(context %p)",  v16,  0x1Cu);
      }
    }
  }

void sub_1F14DC(uint64_t a1)
{
  uint64_t v2 = sub_138E8(11);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    int v3 = *(os_log_s **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        buf[0] = 136315650;
        *(void *)&buf[1] = "IAPManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 505;
        HIWORD(buf[4]) = 2048;
        *(void *)&buf[5] = a1;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d + IAPManager[%p]::UpdateState()",  (uint8_t *)buf,  0x1Cu);
      }
    }
  }

  uint64_t v4 = pthread_self();
  uint64_t v5 = (_opaque_pthread_t *)atomic_load((unint64_t *)(a1 + 16));
  if (pthread_equal(v4, v5))
  {
    char v6 = (os_log_t *)sub_138E8(13);
    uint64_t v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "IAPManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 508;
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Mutex is held during state update. This should not happen.",  (uint8_t *)buf,  0x12u);
      }
    }
  }

  v228[0] = 0LL;
  v228[1] = 0LL;
  unint64_t v227 = v228;
  int v226 = 0;
  CFArrayRef theArray = (CFArrayRef)IAPAudioCopyDeviceStates();
  LOWORD(v221) = 1;
  uint64_t v8 = sub_138E8(11);
  if ((*(_BYTE *)(v8 + 8) & 1) != 0)
  {
    uint64_t v9 = *(os_log_s **)v8;
    if (*(void *)v8)
    {
      if (os_log_type_enabled(*(os_log_t *)v8, OS_LOG_TYPE_DEBUG))
      {
        int Count = (int)theArray;
        if (theArray) {
          int Count = CFArrayGetCount(theArray);
        }
        buf[0] = 136315650;
        *(void *)&buf[1] = "IAPManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 81;
        HIWORD(buf[4]) = 1024;
        buf[5] = Count;
        _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d iapd IAPAudioCopyDeviceStates() dictionary contains %u items.",  (uint8_t *)buf,  0x18u);
      }
    }
  }

  unsigned int v11 = 0;
  uint64_t v225 = 0LL;
  BOOL v223 = (uint64_t *)&v224;
  BOOL v224 = 0LL;
  double v213 = (const void *)IAPAudioTransportUSBAudioStateKey;
  int v215 = (const void *)IAPAudioTransportLineoutStateKey;
  float v217 = (const void *)IAPAudioTransportNameKey;
  for (uint64_t i = a1; ; a1 = i)
  {
    unsigned int v12 = theArray;
    if (theArray) {
      unsigned int v12 = CFArrayGetCount(theArray);
    }
    if (v11 >= v12) {
      break;
    }
    if ((sub_1A0F08(&theArray, v11, &v231) & 1) == 0)
    {
      unint64_t v204 = (os_log_t *)sub_138E8(13);
      v205 = *v204;
      if (*v204 && os_log_type_enabled(*v204, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "IAPManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 88;
        _os_log_impl( &dword_0,  v205,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): IAPAudioGetDeviceStates() returned a CFArray item that is not a CF DictionaryRef.",  (uint8_t *)buf,  0x12u);
      }

      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error( exception,  "IAPAudioGetDeviceStates() returned a CFArray item that is not a CFDictionaryRef.");
    }

    int v13 = v231;
    CFTypeRef v232 = v231;
    __int16 v233 = 0;
    uint64_t v14 = sub_138E8(11);
    if ((*(_BYTE *)(v14 + 8) & 1) != 0)
    {
      uint64_t v15 = *(os_log_s **)v14;
      if (*(void *)v14)
      {
        if (os_log_type_enabled(*(os_log_t *)v14, OS_LOG_TYPE_DEBUG))
        {
          CFIndex v16 = CFDictionaryGetCount(v13);
          buf[0] = 136315650;
          *(void *)&buf[1] = "IAPManager.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 90;
          HIWORD(buf[4]) = 2048;
          *(void *)&buf[5] = v16;
          _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d iapd state dictionary contains %ld items.",  (uint8_t *)buf,  0x1Cu);
        }
      }
    }

    LODWORD(v234) = -1;
    if ((sub_51A88(v232, v217, &v234) & 1) == 0)
    {
      int v207 = (os_log_t *)sub_138E8(13);
      v208 = *v207;
      if (*v207 && os_log_type_enabled(*v207, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "IAPManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 70;
        _os_log_impl( &dword_0,  v208,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): IAPAudioGetDeviceStates() returned a CFDictionaryRef item that doe s not contain key IAPAudioTransportNameKey.",  (uint8_t *)buf,  0x12u);
      }

      int v209 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error( v209,  "IAPAudioGetDeviceStates() returned a CFDictionaryRef item that does not contain key IAPAudioTransportNameKey.");
LABEL_418:
    }

    if (v234 >= 2)
    {
      v210 = (os_log_t *)sub_138E8(13);
      v211 = *v210;
      if (*v210 && os_log_type_enabled(*v210, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315650;
        *(void *)&buf[1] = "IAPManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 71;
        HIWORD(buf[4]) = 1024;
        buf[5] = (_DWORD)v234;
        _os_log_impl( &dword_0,  v211,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): IAPAudioGetDeviceStates() returned a CFDictionaryRef item with an invalid value for IAPAudioTransportNameKey: %d.",  (uint8_t *)buf,  0x18u);
      }

      int v209 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error( v209,  "IAPAudioGetDeviceStates() returned a CFDictionaryRef item with an invalid value for IAPAudioTransportNameKey: %d.");
      goto LABEL_418;
    }

    uint64_t v17 = sub_138E8(11);
    if ((*(_BYTE *)(v17 + 8) & 1) != 0)
    {
      int v18 = *(os_log_s **)v17;
      if (*(void *)v17)
      {
        if (os_log_type_enabled(*(os_log_t *)v17, OS_LOG_TYPE_DEBUG))
        {
          buf[0] = 136315650;
          *(void *)&buf[1] = "IAPManager.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 72;
          HIWORD(buf[4]) = 1024;
          buf[5] = (_DWORD)v234;
          _os_log_impl(&dword_0, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d Current transport is: %d.", (uint8_t *)buf, 0x18u);
        }
      }
    }

    int v19 = (int)v234;
    char v235 = 0LL;
    uint64_t v236 = 0LL;
    char v234 = (CFArrayRef *)&v235;
    int v230 = 0;
    sub_51A88(v232, v215, &v230);
    if ((v230 & 2) != 0)
    {
      LODWORD(v20) = 2;
      HIDWORD(v20) = v230;
      sub_1F33C0((uint64_t *)&v234, 2, v20);
      uint64_t v21 = sub_138E8(11);
      if ((*(_BYTE *)(v21 + 8) & 1) != 0)
      {
        int v22 = *(os_log_s **)v21;
        if (*(void *)v21)
        {
          if (os_log_type_enabled(*(os_log_t *)v21, OS_LOG_TYPE_DEBUG))
          {
            buf[0] = 136315906;
            *(void *)&buf[1] = "IAPManager.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 100;
            HIWORD(buf[4]) = 1024;
            buf[5] = v230;
            LOWORD(buf[6]) = 1024;
            *(_DWORD *)((char *)&buf[6] + 2) = v19;
            _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Added line-out to DeviceStateMap with state %d for transport %u.",  (uint8_t *)buf,  0x1Eu);
          }
        }
      }
    }

    int v229 = 0;
    sub_51A88(v232, v213, &v229);
    if ((v229 & 2) != 0)
    {
      LODWORD(v23) = 4;
      HIDWORD(v23) = v229;
      sub_1F33C0((uint64_t *)&v234, 4, v23);
      uint64_t v24 = sub_138E8(11);
      if ((*(_BYTE *)(v24 + 8) & 1) != 0)
      {
        os_log_t v25 = *(os_log_s **)v24;
        if (*(void *)v24)
        {
          if (os_log_type_enabled(*(os_log_t *)v24, OS_LOG_TYPE_DEBUG))
          {
            buf[0] = 136315906;
            *(void *)&buf[1] = "IAPManager.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 108;
            HIWORD(buf[4]) = 1024;
            buf[5] = v229;
            LOWORD(buf[6]) = 1024;
            *(_DWORD *)((char *)&buf[6] + 2) = v19;
            _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Added USB to DeviceStateMap with state %d for transport %u.",  (uint8_t *)buf,  0x1Eu);
          }
        }
      }
    }

    if (v236)
    {
      buf[0] = v19;
      *(void *)&uint8_t buf[4] = 0LL;
      *(void *)&_DWORD buf[6] = 0LL;
      *(void *)&AudioObjectPropertyAddress buf[2] = &buf[4];
      uint64_t v26 = (uint64_t *)v234;
      if (v234 == (CFArrayRef *)&v235)
      {
        uint64_t v28 = 0LL;
      }

      else
      {
        unsigned __int8 v27 = 0LL;
        uint64_t v28 = 0LL;
        while (1)
        {
          char v29 = &buf[4];
          if (*(_DWORD **)&buf[2] == &buf[4]) {
            goto LABEL_49;
          }
          char v30 = v27;
          char v31 = &buf[4];
          if (v27)
          {
            do
            {
              char v29 = v30;
              char v30 = (_DWORD *)*((void *)v30 + 1);
            }

            while (v30);
          }

          else
          {
            do
            {
              char v29 = (_DWORD *)*((void *)v31 + 2);
              BOOL v72 = *(void *)v29 == (void)v31;
              char v31 = v29;
            }

            while (v72);
          }

          int v32 = *((_DWORD *)v26 + 7);
          if (v29[7] < v32)
          {
LABEL_49:
            uint64_t v33 = v27 ? v29 : &buf[4];
            __int16 v34 = v27 ? v29 + 2 : &buf[4];
          }

          else
          {
            uint64_t v33 = &buf[4];
            __int16 v34 = &buf[4];
            if (v27)
            {
              std::string::size_type v38 = v27;
              __int16 v34 = &buf[4];
              while (1)
              {
                while (1)
                {
                  uint64_t v33 = v38;
                  int v39 = v38[7];
                  if (v32 >= v39) {
                    break;
                  }
                  std::string::size_type v38 = *(_DWORD **)v33;
                  __int16 v34 = v33;
                  if (!*(void *)v33) {
                    goto LABEL_56;
                  }
                }

                if (v39 >= v32) {
                  break;
                }
                __int16 v34 = v33 + 2;
                std::string::size_type v38 = (_DWORD *)*((void *)v33 + 1);
                if (!v38) {
                  goto LABEL_56;
                }
              }
            }
          }

          if (!*(void *)v34)
          {
LABEL_56:
            int v35 = (uint64_t *)operator new(0x28uLL);
            *(uint64_t *)((char *)v35 + 28) = *(uint64_t *)((char *)v26 + 28);
            uint64_t *v35 = 0LL;
            v35[1] = 0LL;
            v35[2] = (uint64_t)v33;
            *(void *)__int16 v34 = v35;
            if (**(void **)&buf[2])
            {
              *(void *)&AudioObjectPropertyAddress buf[2] = **(void **)&buf[2];
              int v35 = *(uint64_t **)v34;
            }

            sub_7A420(*(uint64_t **)&buf[4], v35);
            uint64_t v28 = ++*(void *)&buf[6];
          }

          __int16 v36 = (uint64_t *)v26[1];
          if (v36)
          {
            do
            {
              CFStringRef v37 = (uint64_t **)v36;
              __int16 v36 = (uint64_t *)*v36;
            }

            while (v36);
          }

          else
          {
            do
            {
              CFStringRef v37 = (uint64_t **)v26[2];
              BOOL v72 = *v37 == v26;
              uint64_t v26 = (uint64_t *)v37;
            }

            while (!v72);
          }

          if (v37 == &v235) {
            break;
          }
          unsigned __int8 v27 = *(_DWORD **)&buf[4];
          uint64_t v26 = (uint64_t *)v37;
        }
      }

      std::string::size_type v40 = v224;
      int v41 = &v224;
      __int16 v42 = &v224;
      if (v224)
      {
        while (1)
        {
          while (1)
          {
            __int16 v42 = (uint64_t **)v40;
            int v43 = *((_DWORD *)v40 + 8);
            if (buf[0] >= v43) {
              break;
            }
            std::string::size_type v40 = *v42;
            int v41 = v42;
            if (!*v42) {
              goto LABEL_82;
            }
          }

          if (v43 >= buf[0]) {
            break;
          }
          std::string::size_type v40 = v42[1];
          if (!v40)
          {
            int v41 = v42 + 1;
            goto LABEL_82;
          }
        }
      }

      else
      {
LABEL_82:
        __int16 v44 = (uint64_t *)operator new(0x40uLL);
        CFIndex v45 = v44;
        int v46 = buf[0];
        uint64_t v48 = *(void *)&buf[2];
        uint64_t v47 = *(void *)&buf[4];
        v44[6] = *(void *)&buf[4];
        uint64_t v49 = (char *)(v44 + 6);
        *((_DWORD *)v44 + 8) = v46;
        v44[5] = v48;
        v44[7] = v28;
        if (v28)
        {
          *(void *)(v47 + 16) = v49;
          *(void *)&AudioObjectPropertyAddress buf[2] = &buf[4];
          *(void *)&uint8_t buf[4] = 0LL;
          *(void *)&_DWORD buf[6] = 0LL;
        }

        else
        {
          v44[5] = (uint64_t)v49;
        }

        *__int16 v44 = 0LL;
        v44[1] = 0LL;
        v44[2] = (uint64_t)v42;
        os_log_t *v41 = v44;
        if (*v223)
        {
          BOOL v223 = (uint64_t *)*v223;
          CFIndex v45 = *v41;
        }

        sub_7A420(v224, v45);
        ++v225;
      }

      sub_32C8C(*(void **)&buf[4]);
      uint64_t v50 = sub_138E8(11);
      if ((*(_BYTE *)(v50 + 8) & 1) != 0)
      {
        __int16 v51 = *(os_log_s **)v50;
        if (*(void *)v50)
        {
          if (os_log_type_enabled(*(os_log_t *)v50, OS_LOG_TYPE_DEBUG))
          {
            buf[0] = 136315906;
            *(void *)&buf[1] = "IAPManager.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 114;
            HIWORD(buf[4]) = 2048;
            *(void *)&buf[5] = v236;
            LOWORD(buf[7]) = 1024;
            *(_DWORD *)((char *)&buf[7] + 2) = v19;
            _os_log_impl( &dword_0,  v51,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Added DeviceStateMap with %lu items for transport %u.",  (uint8_t *)buf,  0x22u);
          }
        }
      }
    }

    sub_32C8C(v235);
    sub_13850((uint64_t)&v232);
    ++v11;
  }

  sub_13818((uint64_t)&theArray);
  else {
    uint64_t v52 = *((unsigned int *)v223 + 8);
  }
  uint64_t v53 = (os_log_t *)sub_138E8(11);
  std::string::size_type v54 = *v53;
  if (*v53 && os_log_type_enabled(*v53, OS_LOG_TYPE_DEBUG))
  {
    buf[0] = 136315650;
    *(void *)&buf[1] = "IAPManager.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 517;
    HIWORD(buf[4]) = 1024;
    buf[5] = v52;
    _os_log_impl(&dword_0, v54, OS_LOG_TYPE_DEBUG, "%25s:%-5d Current transport is %d.", (uint8_t *)buf, 0x18u);
  }

  if ((_DWORD)v52)
  {
    unint64_t v56 = v223 + 6;
    uint64_t v55 = v223[6];
    if (!v55) {
      goto LABEL_110;
    }
    unint64_t v57 = v223 + 6;
    do
    {
      int v58 = *(_DWORD *)(v55 + 28);
      BOOL v59 = v58 < 2;
      if (v58 >= 2) {
        int v60 = (uint64_t *)v55;
      }
      else {
        int v60 = (uint64_t *)(v55 + 8);
      }
      if (!v59) {
        unint64_t v57 = (uint64_t *)v55;
      }
      uint64_t v55 = *v60;
    }

    while (*v60);
    else {
LABEL_110:
    }
      unsigned int v61 = 0;
    std::string::size_type v62 = (os_log_t *)sub_138E8(11);
    unint64_t v63 = *v62;
    if (*v62 && os_log_type_enabled(*v62, OS_LOG_TYPE_DEBUG))
    {
      buf[0] = 136315906;
      *(void *)&buf[1] = "IAPManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 526;
      HIWORD(buf[4]) = 1024;
      buf[5] = v61;
      LOWORD(buf[6]) = 1024;
      *(_DWORD *)((char *)&buf[6] + 2) = (v61 & 2) >> 1;
      _os_log_impl( &dword_0,  v63,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Line-out state = %u, connected = %d",  (uint8_t *)buf,  0x1Eu);
    }

    if ((v61 & 2) != 0)
    {
      sub_161C34((uint64_t *)&v227, 1819176821, 1819176821);
      IAPAudioGetVolumeForTransport(v52, &v226);
    }

    uint64_t v64 = *v56;
    if (!*v56) {
      goto LABEL_126;
    }
    uint64_t v65 = v56;
    do
    {
      int v66 = *(_DWORD *)(v64 + 28);
      BOOL v67 = v66 < 4;
      if (v66 >= 4) {
        unint64_t v68 = (uint64_t *)v64;
      }
      else {
        unint64_t v68 = (uint64_t *)(v64 + 8);
      }
      if (!v67) {
        uint64_t v65 = (uint64_t *)v64;
      }
      uint64_t v64 = *v68;
    }

    while (*v68);
    else {
LABEL_126:
    }
      int v69 = 0;
    int64_t v70 = (os_log_t *)sub_138E8(11);
    unint64_t v71 = *v70;
    if (*v70 && os_log_type_enabled(*v70, OS_LOG_TYPE_DEBUG))
    {
      buf[0] = 136315906;
      *(void *)&buf[1] = "IAPManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 536;
      HIWORD(buf[4]) = 1024;
      buf[5] = v69;
      LOWORD(buf[6]) = 1024;
      *(_DWORD *)((char *)&buf[6] + 2) = (v69 & 2) >> 1;
      _os_log_impl( &dword_0,  v71,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d USB audio state = %u, connected = %d",  (uint8_t *)buf,  0x1Eu);
    }

    if ((v69 & 2) != 0) {
      sub_161C34((uint64_t *)&v227, 1684500341, 1684500341);
    }
    LOBYTE(buf[0]) = 0;
    BOOL v72 = IAPAudioIsVolumeControlSupportedForTransport(v52, buf) == 1 && LOBYTE(buf[0]) == 1;
    int v73 = v72;
    int v218 = v73;
    BOOL v74 = (os_log_t *)sub_138E8(11);
    int v212 = (v61 >> 1) & 1;
    unsigned int v75 = *v74;
    if (*v74 && os_log_type_enabled(*v74, OS_LOG_TYPE_DEBUG))
    {
      buf[0] = 136315650;
      *(void *)&buf[1] = "IAPManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 544;
      HIWORD(buf[4]) = 1024;
      buf[5] = v218;
      _os_log_impl( &dword_0,  v75,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Accessory supports volume control = %u",  (uint8_t *)buf,  0x18u);
    }
  }

  else
  {
    int v212 = 0;
    int v218 = 0;
  }

  int v216 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
  p_CFArrayRef theArray = &theArray;
  unint64_t v221 = 0LL;
  uint64_t v222 = 0LL;
  AudioObjectID v77 = (uint64_t **)(a1 + 96);
  int v78 = *(uint64_t **)(a1 + 96);
  CFArrayRef theArray = (CFArrayRef)&v221;
  unsigned int v79 = (uint64_t *)(a1 + 104);
  uint64_t v80 = (uint64_t)v227;
  char v234 = &theArray;
  char v235 = (uint64_t *)&v221;
  if (v78 == (uint64_t *)(a1 + 104))
  {
    uint64_t v89 = (uint64_t *)&v221;
LABEL_164:
    sub_1F38B8((uint64_t)buf, (void *)v80, v228, (uint64_t)p_theArray, (uint64_t)v89);
  }

  else
  {
    while ((void **)v80 != v228)
    {
      int v81 = *((_DWORD *)v78 + 7);
      int v82 = *(_DWORD *)(v80 + 28);
      if (v81 >= v82)
      {
        if (v82 >= v81)
        {
          CFTypeRef v85 = (uint64_t *)v78[1];
          uint64_t v86 = v78;
          if (v85)
          {
            do
            {
              int v78 = v85;
              CFTypeRef v85 = (uint64_t *)*v85;
            }

            while (v85);
          }

          else
          {
            do
            {
              int v78 = (uint64_t *)v86[2];
              BOOL v72 = *v78 == (void)v86;
              uint64_t v86 = v78;
            }

            while (!v72);
          }
        }

        else
        {
          sub_13A930((uint64_t)&v234, v82);
        }

        std::string v87 = *(void **)(v80 + 8);
        if (v87)
        {
          do
          {
            uint64_t v80 = (uint64_t)v87;
            std::string v87 = (void *)*v87;
          }

          while (v87);
        }

        else
        {
          do
          {
            uint64_t v88 = v80;
            uint64_t v80 = *(void *)(v80 + 16);
          }

          while (*(void *)v80 != v88);
        }
      }

      else
      {
        sub_13A930((uint64_t)&v234, *((_DWORD *)v78 + 7));
        uint64_t v83 = (uint64_t *)v78[1];
        if (v83)
        {
          do
          {
            int v78 = v83;
            uint64_t v83 = (uint64_t *)*v83;
          }

          while (v83);
        }

        else
        {
          do
          {
            char v84 = v78;
            int v78 = (uint64_t *)v78[2];
          }

          while ((uint64_t *)*v78 != v84);
        }
      }

      if (v78 == v79)
      {
        p_CFArrayRef theArray = v234;
        uint64_t v89 = v235;
        goto LABEL_164;
      }
    }

    sub_1F38B8((uint64_t)buf, v78, (void *)(a1 + 104), (uint64_t)v234, (uint64_t)v235);
  }

  CFArrayRef v90 = theArray;
  if (theArray != (CFArrayRef)&v221)
  {
    do
    {
      uint64_t v91 = *((unsigned int *)v90 + 7);
      std::string v92 = (os_log_t *)sub_138E8(11);
      std::string v93 = *v92;
      if (*v92 && os_log_type_enabled(*v92, OS_LOG_TYPE_DEFAULT))
      {
        sub_2CA1C(&v234, v91);
        int v94 = (void **)&v234;
        if (v236 < 0) {
          int v94 = (void **)v234;
        }
        __int16 v95 = v228[0];
        if (!v228[0]) {
          goto LABEL_181;
        }
        AudioObjectID v96 = v228;
        do
        {
          BOOL v97 = v95;
          char v98 = v96;
          int v99 = *((_DWORD *)v95 + 7);
          else {
            ++v95;
          }
          __int16 v95 = (void *)*v95;
        }

        while (v95);
        if (v96 == v228) {
          goto LABEL_181;
        }
        if ((int)v91 < *((_DWORD *)v97 + 7)) {
LABEL_181:
        }
          AudioObjectID v96 = v228;
        BOOL v72 = v96 == v228;
        buf[0] = 136315906;
        uint64_t v100 = "";
        if (v72) {
          uint64_t v100 = "dis";
        }
        *(void *)&buf[1] = "IAPManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 556;
        HIWORD(buf[4]) = 2080;
        *(void *)&buf[5] = v94;
        LOWORD(buf[7]) = 2080;
        *(void *)((char *)&buf[7] + 2) = v100;
        _os_log_impl( &dword_0,  v93,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d iAP reports that port type %s was %sconnected.",  (uint8_t *)buf,  0x26u);
        if (SHIBYTE(v236) < 0) {
          operator delete(v234);
        }
      }

      unint64_t v101 = (void *)*((void *)v90 + 1);
      a1 = i;
      if (v101)
      {
        do
        {
          __int16 v102 = (CFArrayRef *)v101;
          unint64_t v101 = (void *)*v101;
        }

        while (v101);
      }

      else
      {
        do
        {
          __int16 v102 = (CFArrayRef *)*((void *)v90 + 2);
          BOOL v72 = *v102 == v90;
          CFArrayRef v90 = (CFArrayRef)v102;
        }

        while (!v72);
      }

      CFArrayRef v90 = (CFArrayRef)v102;
    }

    while (v102 != (CFArrayRef *)&v221);
  }

  if (!v222 && *(unsigned __int8 *)(a1 + 120) == v218)
  {
    int v103 = (os_log_t *)sub_138E8(11);
    unint64_t v104 = *v103;
    if (*v103)
    {
      if (os_log_type_enabled(*v103, OS_LOG_TYPE_DEBUG))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "IAPManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 557;
        _os_log_impl(&dword_0, v104, OS_LOG_TYPE_DEBUG, "%25s:%-5d Redundant iAP notification", (uint8_t *)buf, 0x12u);
      }
    }
  }

  *(_DWORD *)(a1 + 88) = v52;
  if (v77 != (uint64_t **)&v227)
  {
    uint64_t v105 = v227;
    if (*(void *)(a1 + 112))
    {
      BOOL v106 = *v77;
      *AudioObjectID v77 = v79;
      *(void *)(*v79 + 16) = 0LL;
      *unsigned int v79 = 0LL;
      v79[1] = 0LL;
      if (v106[1]) {
        uint64_t v107 = v106[1];
      }
      else {
        uint64_t v107 = (uint64_t)v106;
      }
      if (v107)
      {
        uint64_t v108 = sub_68080(v107);
        if (v105 == v228)
        {
          uint64_t v110 = (void *)v107;
          uint64_t v105 = v228;
        }

        else
        {
          uint64_t v109 = v105;
          do
          {
            uint64_t v110 = v108;
            int v111 = *((_DWORD *)v109 + 7);
            *(_DWORD *)(v107 + 28) = v111;
            uint64_t v112 = *v79;
            int v113 = (uint64_t **)v79;
            uint64_t v114 = (uint64_t **)v79;
            if (*v79)
            {
              do
              {
                while (1)
                {
                  int v113 = (uint64_t **)v112;
                  if (v111 >= *(_DWORD *)(v112 + 28)) {
                    break;
                  }
                  uint64_t v112 = *(void *)v112;
                  uint64_t v114 = v113;
                  if (!*v113) {
                    goto LABEL_211;
                  }
                }

                uint64_t v112 = *(void *)(v112 + 8);
              }

              while (v112);
              uint64_t v114 = v113 + 1;
            }

LABEL_237:
        sub_32C38(v77, (uint64_t)v120, v121, v117);
        uint64_t v122 = v105[1];
        if (v122)
        {
          do
          {
            uint64_t v123 = (void **)v122;
            uint64_t v122 = (void *)*v122;
          }

          while (v122);
        }

        else
        {
          do
          {
            uint64_t v123 = (void **)v105[2];
            BOOL v72 = *v123 == v105;
            uint64_t v105 = v123;
          }

          while (!v72);
        }

        uint64_t v105 = v123;
      }

      while (v123 != v228);
    }
  }

  int v214 = *(unsigned __int8 *)(a1 + 120);
  *(_BYTE *)(a1 + 120) = v218;
  if (v212)
  {
    char v124 = *v77;
    if (*v77 == v79) {
      goto LABEL_254;
    }
    while (*((_DWORD *)v124 + 7) != 1819176821)
    {
      uint64_t v125 = (uint64_t *)v124[1];
      if (v125)
      {
        do
        {
          int v126 = v125;
          uint64_t v125 = (uint64_t *)*v125;
        }

        while (v125);
      }

      else
      {
        do
        {
          int v126 = (uint64_t *)v124[2];
          BOOL v72 = *v126 == (void)v124;
          char v124 = v126;
        }

        while (!v72);
      }

      char v124 = v126;
      if (v126 == v79) {
        goto LABEL_254;
      }
    }

    if (v79 == v124) {
LABEL_254:
    }
      *(_DWORD *)(a1 + 124) = v226;
  }

  if (v222)
  {
    uint64_t v127 = sub_138E8(11);
    if ((*(_BYTE *)(v127 + 8) & 1) != 0)
    {
      double v128 = *(os_log_s **)v127;
      if (*(void *)v127)
      {
        if (os_log_type_enabled(*(os_log_t *)v127, OS_LOG_TYPE_DEBUG))
        {
          buf[0] = 136315906;
          *(void *)&buf[1] = "IAPManager.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 588;
          HIWORD(buf[4]) = 2048;
          *(void *)&buf[5] = a1;
          LOWORD(buf[7]) = 2048;
          *(void *)((char *)&buf[7] + 2) = &theArray;
          _os_log_impl( &dword_0,  v128,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d + IAPManager[%p]::NotifyConnectionListeners(changedPorts %p)",  (uint8_t *)buf,  0x26u);
        }
      }
    }

    unint64_t v129 = pthread_self();
    uint64_t v130 = (_opaque_pthread_t *)atomic_load((unint64_t *)(a1 + 16));
    if (!pthread_equal(v129, v130))
    {
      unint64_t v178 = (os_log_t *)sub_138E8(13);
      char v179 = *v178;
      if (*v178)
      {
        if (os_log_type_enabled(*v178, OS_LOG_TYPE_ERROR))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "IAPManager.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 592;
          _os_log_impl( &dword_0,  v179,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: called while mutex is not held by the current thread.",  (uint8_t *)buf,  0x12u);
        }
      }
    }

    if (v222 && *(void *)(a1 + 152))
    {
      CFArrayRef v131 = theArray;
      if (theArray != (CFArrayRef)&v221)
      {
        do
        {
          int v132 = (os_log_t *)sub_138E8(11);
          uint64_t v133 = *v132;
          if (*v132 && os_log_type_enabled(*v132, OS_LOG_TYPE_DEBUG))
          {
            sub_2CA1C(&v234, *((unsigned int *)v131 + 7));
            int v134 = SHIBYTE(v236);
            uint64_t v135 = (void *)a1;
            char v136 = (void **)v234;
            BOOL v137 = sub_1F35E4(v135, *((unsigned int *)v131 + 7));
            buf[0] = 136315906;
            unint64_t v138 = (void **)&v234;
            if (v134 < 0) {
              unint64_t v138 = v136;
            }
            *(void *)&buf[1] = "IAPManager.cpp";
            char v139 = "disconnected";
            if (v137) {
              char v139 = "connected";
            }
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 598;
            HIWORD(buf[4]) = 2080;
            *(void *)&buf[5] = v138;
            LOWORD(buf[7]) = 2080;
            *(void *)((char *)&buf[7] + 2) = v139;
            _os_log_impl( &dword_0,  v133,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d iAP Port (type '%s') was %s",  (uint8_t *)buf,  0x26u);
            if (SHIBYTE(v236) < 0) {
              operator delete(v234);
            }
            a1 = i;
          }

          unint64_t v140 = (void *)*((void *)v131 + 1);
          if (v140)
          {
            do
            {
              unint64_t v141 = (CFArrayRef *)v140;
              unint64_t v140 = (void *)*v140;
            }

            while (v140);
          }

          else
          {
            do
            {
              unint64_t v141 = (CFArrayRef *)*((void *)v131 + 2);
              BOOL v72 = *v141 == v131;
              CFArrayRef v131 = (CFArrayRef)v141;
            }

            while (!v72);
          }

          CFArrayRef v131 = (CFArrayRef)v141;
        }

        while (v141 != (CFArrayRef *)&v221);
      }

      sub_1F3464((uint64_t)buf, (void *)(a1 + 136));
      sub_34AA0(&v234, a1);
      CFArrayRef v142 = theArray;
      if (theArray != (CFArrayRef)&v221)
      {
        do
        {
          unint64_t v143 = *(_DWORD **)buf;
          if (*(_DWORD **)buf != &buf[2])
          {
            do
            {
              (*((void (**)(void, void))v143 + 4))(*((unsigned int *)v142 + 7), *((void *)v143 + 5));
              unint64_t v144 = (void *)*((void *)v143 + 1);
              if (v144)
              {
                do
                {
                  uint64_t v145 = v144;
                  unint64_t v144 = (void *)*v144;
                }

                while (v144);
              }

              else
              {
                do
                {
                  uint64_t v145 = (_DWORD *)*((void *)v143 + 2);
                  BOOL v72 = *(void *)v145 == (void)v143;
                  unint64_t v143 = v145;
                }

                while (!v72);
              }

              unint64_t v143 = v145;
            }

            while (v145 != &buf[2]);
          }

          unint64_t v146 = (void *)*((void *)v142 + 1);
          if (v146)
          {
            do
            {
              int v147 = (CFArrayRef *)v146;
              unint64_t v146 = (void *)*v146;
            }

            while (v146);
          }

          else
          {
            do
            {
              int v147 = (CFArrayRef *)*((void *)v142 + 2);
              BOOL v72 = *v147 == v142;
              CFArrayRef v142 = (CFArrayRef)v147;
            }

            while (!v72);
          }

          CFArrayRef v142 = (CFArrayRef)v147;
        }

        while (v147 != (CFArrayRef *)&v221);
      }

      if ((_BYTE)v235) {
        (*((void (**)(CFArrayRef *))*v234 + 2))(v234);
      }
      sub_32C8C(*(void **)&buf[2]);
    }

    uint64_t v148 = sub_138E8(11);
    if ((*(_BYTE *)(v148 + 8) & 1) != 0)
    {
      unint64_t v149 = *(os_log_s **)v148;
      if (*(void *)v148)
      {
        if (os_log_type_enabled(*(os_log_t *)v148, OS_LOG_TYPE_DEBUG))
        {
          buf[0] = 136315906;
          *(void *)&buf[1] = "IAPManager.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 614;
          HIWORD(buf[4]) = 2048;
          *(void *)&buf[5] = a1;
          LOWORD(buf[7]) = 2048;
          *(void *)((char *)&buf[7] + 2) = &theArray;
          _os_log_impl( &dword_0,  v149,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - IAPManager[%p]::NotifyConnectionListeners(changedPorts %p)",  (uint8_t *)buf,  0x26u);
        }
      }
    }
  }

  if (v214 != v218)
  {
    uint64_t v150 = sub_138E8(11);
    uint64_t v151 = sub_138E8(38);
    char v152 = 0;
    uint64_t v153 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v154 = *(void *)(v150 + 8);
    while (1)
    {
      uint64_t v155 = (int)buf[v153];
      char v156 = v152;
      if (((v154 & v155) != 0) != ((*(void *)(v151 + 8) & v155) != 0)) {
        break;
      }
      char v152 = 1;
      uint64_t v153 = 1LL;
      if ((v156 & 1) != 0) {
        goto LABEL_307;
      }
    }

    if ((v154 & v155) == 0) {
      uint64_t v150 = v151;
    }
LABEL_307:
    uint64_t v157 = *(os_log_s **)v150;
    if (v157 && os_log_type_enabled(v157, OS_LOG_TYPE_DEBUG))
    {
      int v158 = *(unsigned __int8 *)(a1 + 120);
      buf[0] = 136315650;
      *(void *)&buf[1] = "IAPManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 578;
      HIWORD(buf[4]) = 1024;
      buf[5] = v158;
      _os_log_impl( &dword_0,  v157,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Volume control support state changed to %u. Updated cache and will notify listeners.",  (uint8_t *)buf,  0x18u);
    }

    uint64_t v159 = sub_138E8(11);
    if ((*(_BYTE *)(v159 + 8) & 1) != 0)
    {
      uint64_t v160 = *(os_log_s **)v159;
      if (*(void *)v159)
      {
        if (os_log_type_enabled(*(os_log_t *)v159, OS_LOG_TYPE_DEBUG))
        {
          buf[0] = 136315650;
          *(void *)&buf[1] = "IAPManager.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 620;
          HIWORD(buf[4]) = 2048;
          *(void *)&buf[5] = a1;
          _os_log_impl( &dword_0,  v160,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d + IAPManager[%p]::VolumeControlSupport()",  (uint8_t *)buf,  0x1Cu);
        }
      }
    }

    uint64_t v161 = pthread_self();
    uint64_t v162 = (_opaque_pthread_t *)atomic_load((unint64_t *)(a1 + 16));
    if (!pthread_equal(v161, v162))
    {
      v202 = (os_log_t *)sub_138E8(13);
      unint64_t v203 = *v202;
      if (*v202)
      {
        if (os_log_type_enabled(*v202, OS_LOG_TYPE_ERROR))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "IAPManager.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 624;
          _os_log_impl( &dword_0,  v203,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: called while mutex is not held by the current thread.",  (uint8_t *)buf,  0x12u);
        }
      }
    }

    if (*(void *)(a1 + 112) && *(void *)(a1 + 176))
    {
      *(void *)&AudioObjectPropertyAddress buf[2] = 0LL;
      *(void *)&uint8_t buf[4] = 0LL;
      *(void *)AudioObjectPropertyAddress buf = &buf[2];
      char v163 = *(uint64_t **)(a1 + 96);
      if (v163 != v79)
      {
        do
        {
          sub_13A76C((uint64_t **)buf, (uint64_t *)&buf[2], *((_DWORD *)v163 + 7), *((_DWORD *)v163 + 7));
          unint64_t v164 = (uint64_t *)v163[1];
          if (v164)
          {
            do
            {
              unint64_t v165 = v164;
              unint64_t v164 = (uint64_t *)*v164;
            }

            while (v164);
          }

          else
          {
            do
            {
              unint64_t v165 = (uint64_t *)v163[2];
              BOOL v72 = *v165 == (void)v163;
              char v163 = v165;
            }

            while (!v72);
          }

          char v163 = v165;
        }

        while (v165 != v79);
      }

      char v235 = 0LL;
      uint64_t v236 = 0LL;
      char v234 = (CFArrayRef *)&v235;
      uint64_t v166 = *(void **)(a1 + 160);
      if (v166 != (void *)(a1 + 168))
      {
        do
        {
          unint64_t v167 = v235;
          uint64_t v168 = &v235;
          if (v234 == (CFArrayRef *)&v235) {
            goto LABEL_331;
          }
          int v169 = v235;
          unint64_t v170 = &v235;
          if (v235)
          {
            do
            {
              uint64_t v168 = (uint64_t **)v169;
              int v169 = (uint64_t *)v169[1];
            }

            while (v169);
          }

          else
          {
            do
            {
              uint64_t v168 = (uint64_t **)v170[2];
              BOOL v72 = *v168 == (uint64_t *)v170;
              unint64_t v170 = v168;
            }

            while (v72);
          }

          int v171 = *((_DWORD *)v166 + 8);
          if (*((_DWORD *)v168 + 8) < v171)
          {
LABEL_331:
            if (v235) {
              unint64_t v172 = v168;
            }
            else {
              unint64_t v172 = &v235;
            }
            if (v235) {
              uint64_t v173 = v168 + 1;
            }
            else {
              uint64_t v173 = &v235;
            }
          }

          else
          {
            unint64_t v172 = &v235;
            uint64_t v173 = &v235;
            if (v235)
            {
              uint64_t v173 = &v235;
              while (1)
              {
                while (1)
                {
                  unint64_t v172 = (uint64_t **)v167;
                  int v177 = *((_DWORD *)v167 + 8);
                  if (v171 >= v177) {
                    break;
                  }
                  unint64_t v167 = *v172;
                  uint64_t v173 = v172;
                  if (!*v172) {
                    goto LABEL_338;
                  }
                }

                if (v177 >= v171) {
                  break;
                }
                uint64_t v173 = v172 + 1;
                unint64_t v167 = v172[1];
                if (!v167) {
                  goto LABEL_338;
                }
              }
            }
          }

          if (!*v173)
          {
LABEL_338:
            uint64_t v174 = operator new(0x40uLL);
            v174[8] = *((_DWORD *)v166 + 8);
            sub_1F3464((uint64_t)(v174 + 10), v166 + 5);
            *(void *)uint64_t v174 = 0LL;
            *((void *)v174 + 1) = 0LL;
            *((void *)v174 + 2) = v172;
            *uint64_t v173 = (uint64_t *)v174;
            if (*v234)
            {
              char v234 = (CFArrayRef *)*v234;
              uint64_t v174 = *v173;
            }

            sub_7A420(v235, (uint64_t *)v174);
            ++v236;
          }

          char v175 = (void *)v166[1];
          if (v175)
          {
            do
            {
              unint64_t v176 = v175;
              char v175 = (void *)*v175;
            }

            while (v175);
          }

          else
          {
            do
            {
              unint64_t v176 = (void *)v166[2];
              BOOL v72 = *v176 == (void)v166;
              uint64_t v166 = v176;
            }

            while (!v72);
          }

          uint64_t v166 = v176;
        }

        while (v176 != (void *)(a1 + 168));
      }

      sub_34AA0(&v232, a1);
      v180 = *(_DWORD **)buf;
      if (*(_DWORD **)buf != &buf[2])
      {
        do
        {
          uint64_t v181 = v235;
          if (v235)
          {
            int v182 = v180[7];
            uint64_t v183 = &v235;
            do
            {
              char v184 = v181;
              unint64_t v185 = v183;
              int v186 = *((_DWORD *)v181 + 8);
              uint64_t v187 = (uint64_t **)(v181 + 1);
              if (v186 >= v182)
              {
                uint64_t v187 = (uint64_t **)v184;
                uint64_t v183 = (uint64_t **)v184;
              }

              uint64_t v181 = *v187;
            }

            while (v181);
            if (v183 != &v235)
            {
              char v188 = v186 >= v182 ? v184 : (uint64_t *)v185;
              if (v182 >= *((_DWORD *)v188 + 8))
              {
                BOOL v189 = v186 < v182;
                uint64_t v190 = v186 >= v182 ? v184 : (uint64_t *)v185;
                uint64_t v191 = (void *)v190[5];
                uint64_t v192 = v184 + 6;
                uint64_t v193 = v189 ? (uint64_t)(v185 + 6) : (uint64_t)v192;
                if (v191 != (void *)v193)
                {
                  do
                  {
                    ((void (*)(void, void))v191[4])(v180[7], v191[5]);
                    uint64_t v194 = (void *)v191[1];
                    if (v194)
                    {
                      do
                      {
                        char v195 = v194;
                        uint64_t v194 = (void *)*v194;
                      }

                      while (v194);
                    }

                    else
                    {
                      do
                      {
                        char v195 = (void *)v191[2];
                        BOOL v72 = *v195 == (void)v191;
                        uint64_t v191 = v195;
                      }

                      while (!v72);
                    }

                    uint64_t v191 = v195;
                  }

                  while (v195 != (void *)v193);
                }
              }
            }
          }

          uint64_t v196 = (void *)*((void *)v180 + 1);
          if (v196)
          {
            do
            {
              unint64_t v197 = v196;
              uint64_t v196 = (void *)*v196;
            }

            while (v196);
          }

          else
          {
            do
            {
              unint64_t v197 = (_DWORD *)*((void *)v180 + 2);
              BOOL v72 = *(void *)v197 == (void)v180;
              v180 = v197;
            }

            while (!v72);
          }

          v180 = v197;
        }

        while (v197 != &buf[2]);
      }

      if ((_BYTE)v233) {
        (*(void (**)(const __CFDictionary *))(*(void *)v232 + 16LL))(v232);
      }
      sub_F16A4(v235);
      sub_32C8C(*(void **)&buf[2]);
    }

    uint64_t v198 = sub_138E8(11);
    if ((*(_BYTE *)(v198 + 8) & 1) != 0)
    {
      char v199 = *(os_log_s **)v198;
      if (*(void *)v198)
      {
        if (os_log_type_enabled(*(os_log_t *)v198, OS_LOG_TYPE_DEBUG))
        {
          buf[0] = 136315650;
          *(void *)&buf[1] = "IAPManager.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 647;
          HIWORD(buf[4]) = 2048;
          *(void *)&buf[5] = a1;
          _os_log_impl( &dword_0,  v199,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - IAPManager[%p]::VolumeControlSupport()",  (uint8_t *)buf,  0x1Cu);
        }
      }
    }
  }

  uint64_t v200 = sub_138E8(11);
  if ((*(_BYTE *)(v200 + 8) & 1) != 0)
  {
    v201 = *(os_log_s **)v200;
    if (*(void *)v200)
    {
      if (os_log_type_enabled(*(os_log_t *)v200, OS_LOG_TYPE_DEBUG))
      {
        buf[0] = 136315650;
        *(void *)&buf[1] = "IAPManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 582;
        HIWORD(buf[4]) = 2048;
        *(void *)&buf[5] = a1;
        _os_log_impl( &dword_0,  v201,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - IAPManager[%p]::UpdateState()",  (uint8_t *)buf,  0x1Cu);
      }
    }
  }

  sub_32C8C(v221);
  if (v216) {
    (*(void (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
  }
  sub_F16A4(v224);
  sub_32C8C(v228[0]);
}

  unint64_t v138 = *(id *)sub_138E8(2);
  char v139 = v138;
  if (v138)
  {
    unint64_t v140 = (os_log_s *)v138;
    if (os_log_type_enabled(v140, OS_LOG_TYPE_DEFAULT))
    {
      sub_2DBA00(&v433, (uint64_t)&v391);
      unint64_t v141 = (v433.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v433 : (std::string *)v433.__r_.__value_.__r.__words[0];
      buf[0] = 136315650;
      *(void *)&buf[1] = "VirtualAudio_PlugIn.mm";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 3765;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v141;
      _os_log_impl( &dword_0,  v140,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Parsed RouteConfiguration: %s",  (uint8_t *)buf,  0x1Cu);
    }
  }

  if (cf)
  {
    CFArrayRef v142 = *(void *)(a2 + 112);
    unint64_t v143 = (os_log_t *)sub_138E8(8);
    unint64_t v144 = *v143;
    if (*v143 && os_log_type_enabled(*v143, OS_LOG_TYPE_DEBUG))
    {
      if (cf)
      {
        uint64_t v145 = CFCopyDescription(cf);
        sub_48188((uint64_t)&v433, v145);
        if (v145) {
          CFRelease(v145);
        }
      }

      else
      {
        sub_7D084(&v433, "(null)");
      }

      unint64_t v146 = &v433;
      if ((v433.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        unint64_t v146 = (std::string *)v433.__r_.__value_.__r.__words[0];
      }
      buf[0] = 136315650;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 5412;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v146;
      _os_log_impl( &dword_0,  v144,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Updating multichannel mode preferences with array %s",  (uint8_t *)buf,  0x1Cu);
    }

    if (!cf)
    {
      v374 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v374, "Could not construct");
    }

    if (CFArrayGetCount((CFArrayRef)cf))
    {
      int v147 = (const __CFArray *)cf;
      if (cf)
      {
        int Count = CFArrayGetCount((CFArrayRef)cf);
        unint64_t v149 = Count;
        uint64_t v150 = (const __CFArray *)cf;
        if (cf)
        {
          uint64_t v151 = CFArrayGetCount((CFArrayRef)cf);
          if (!v149) {
            goto LABEL_290;
          }
          goto LABEL_264;
        }

        uint64_t v151 = 0LL;
        if (Count)
        {
LABEL_264:
          char v152 = 0LL;
          v380 = (uint64_t *)(v142 + 560);
          do
          {
            if (v147 == v150 && v151 == v152) {
              break;
            }
            sub_36030(&v433, v147, v152);
            uint64_t v153 = (const void *)v433.__r_.__value_.__r.__words[0];
            if (v433.__r_.__value_.__r.__words[0]
              && (uint64_t v154 = CFGetTypeID(v433.__r_.__value_.__l.__data_), v154 == CFDictionaryGetTypeID()))
            {
              sub_360D4(buf, (CFTypeRef *)&v433.__r_.__value_.__l.__data_);
              if (!*(void *)buf)
              {
                v368 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v368, "Could not construct");
              }

              uint64_t v155 = (const __CFNumber *)sub_8D6E0(*(const __CFDictionary **)buf, "VAD type 4cc");
              if (v155)
              {
                char v156 = sub_36328(v155);
                if ((unint64_t)v156 >> 32)
                {
                  uint64_t v157 = v156;
                  if (!*(void *)buf)
                  {
                    v376 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v376, "Could not construct");
                  }

                  int v158 = (const __CFBoolean *)sub_36228(*(const __CFDictionary **)buf, "prefers multichannel mode");
                  if (v158)
                  {
                    uint64_t v159 = sub_476EC(v158);
                    uint64_t v160 = v159;
                    uint64_t v161 = HIBYTE(v159);
                  }

                  else
                  {
                    uint64_t v161 = 0;
                    uint64_t v160 = 0;
                  }

                  unint64_t v164 = v160 | (v161 << 8);
                  if (v164 <= 0x100) {
                    LOBYTE(v164) = 0;
                  }
                  if ((_BYTE)v164) {
                    sub_57ADC(v380, v157, v157);
                  }
                  else {
                    sub_13B6B0((uint64_t **)v380, v157);
                  }
                }
              }

              if (*(void *)buf) {
                CFRelease(*(CFTypeRef *)buf);
              }
            }

            else
            {
              uint64_t v162 = (os_log_t *)sub_138E8(8);
              char v163 = *v162;
              if (*v162 && os_log_type_enabled(*v162, OS_LOG_TYPE_ERROR))
              {
                buf[0] = 136315394;
                *(void *)&buf[1] = "RoutingManager.cpp";
                LOWORD(buf[3]) = 1024;
                *(_DWORD *)((char *)&buf[3] + 2) = 5424;
                _os_log_impl( &dword_0,  v163,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Entry in multichannel mode preference array was not a CFDictionary!",  (uint8_t *)buf,  0x12u);
              }

              if (!v153) {
                goto LABEL_289;
              }
            }

            CFRelease(v153);
LABEL_289:
            ++v152;
          }

          while (v149 != v152);
        }
      }
    }

    else
    {
      sub_13B6B0((uint64_t **)(v142 + 560), 0x76646566u);
    }
  }

void sub_1F31B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, void *a28)
{
}

uint64_t *sub_1F33C0(uint64_t *result, int a2, double a3)
{
  uint64_t v4 = (uint64_t **)result;
  char v6 = (uint64_t **)(result + 1);
  uint64_t v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        char v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        char v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }

  else
  {
    uint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    uint64_t v9 = (char *)operator new(0x28uLL);
    *(double *)(v9 + 28) = a3;
    return sub_32C38(v4, (uint64_t)v7, v6, (uint64_t *)v9);
  }

  return result;
}

uint64_t sub_1F3464(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0LL;
  int v3 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      char v6 = v5 + 4;
      uint64_t v7 = *(uint64_t **)(a1 + 8);
      int v8 = v3;
      if (*(void **)a1 == v3) {
        goto LABEL_8;
      }
      uint64_t v9 = *(void **)(a1 + 8);
      char v10 = v3;
      if (v7)
      {
        do
        {
          int v8 = v9;
          uint64_t v9 = (void *)v9[1];
        }

        while (v9);
      }

      else
      {
        do
        {
          int v8 = (void *)v10[2];
          BOOL v11 = *v8 == (void)v10;
          char v10 = v8;
        }

        while (v11);
      }

      unint64_t v12 = *v6;
      if (v8[4] < *v6)
      {
LABEL_8:
        if (v7) {
          int v13 = (uint64_t **)v8;
        }
        else {
          int v13 = (uint64_t **)v3;
        }
        if (v7) {
          uint64_t v14 = (uint64_t **)(v8 + 1);
        }
        else {
          uint64_t v14 = (uint64_t **)v3;
        }
      }

      else
      {
        int v13 = (uint64_t **)v3;
        uint64_t v14 = (uint64_t **)v3;
        if (v7)
        {
          uint64_t v14 = (uint64_t **)v3;
          while (1)
          {
            while (1)
            {
              int v13 = (uint64_t **)v7;
              unint64_t v18 = v7[4];
              if (v12 >= v18) {
                break;
              }
              uint64_t v7 = *v13;
              uint64_t v14 = v13;
              if (!*v13) {
                goto LABEL_15;
              }
            }

            if (v18 >= v12) {
              break;
            }
            uint64_t v14 = v13 + 1;
            uint64_t v7 = v13[1];
            if (!v7) {
              goto LABEL_15;
            }
          }
        }
      }

      if (!*v14)
      {
LABEL_15:
        uint64_t v15 = (uint64_t *)operator new(0x30uLL);
        *((_OWORD *)v15 + 2) = *(_OWORD *)v6;
        sub_32C38((uint64_t **)a1, (uint64_t)v13, v14, v15);
      }

      CFIndex v16 = (void *)v5[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          CFIndex v16 = (void *)*v16;
        }

        while (v16);
      }

      else
      {
        do
        {
          uint64_t v17 = (void *)v5[2];
          BOOL v11 = *v17 == (void)v5;
          uint64_t v5 = v17;
        }

        while (!v11);
      }

      uint64_t v5 = v17;
    }

    while (v17 != v4);
  }

  return a1;
}

void sub_1F35D0(_Unwind_Exception *a1)
{
}

BOOL sub_1F35E4(void *a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(void *))(*a1 + 16LL))(a1);
  uint64_t v5 = sub_138E8(11);
  if ((*(_BYTE *)(v5 + 8) & 1) != 0)
  {
    char v6 = *(os_log_s **)v5;
    if (*(void *)v5)
    {
      if (os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_DEBUG))
      {
        sub_2CA1C(__p, a2);
        uint64_t v7 = v19 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        uint64_t v21 = "IAPManager.cpp";
        __int16 v22 = 1024;
        int v23 = 217;
        __int16 v24 = 2048;
        os_log_t v25 = a1;
        __int16 v26 = 2080;
        unsigned __int8 v27 = v7;
        _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d + IAPManager[%p]::IsPortConnected(portType '%s')",  buf,  0x26u);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  int v8 = (void *)a1[12];
  uint64_t v9 = a1 + 13;
  if (v8 != a1 + 13)
  {
    while (*((_DWORD *)v8 + 7) != (_DWORD)a2)
    {
      char v10 = (void *)v8[1];
      if (v10)
      {
        do
        {
          BOOL v11 = v10;
          char v10 = (void *)*v10;
        }

        while (v10);
      }

      else
      {
        do
        {
          BOOL v11 = (void *)v8[2];
          BOOL v12 = *v11 == (void)v8;
          int v8 = v11;
        }

        while (!v12);
      }

      int v8 = v11;
      if (v11 == v9)
      {
        int v8 = a1 + 13;
        break;
      }
    }
  }

  uint64_t v13 = sub_138E8(11);
  if ((*(_BYTE *)(v13 + 8) & 1) != 0)
  {
    uint64_t v14 = *(os_log_s **)v13;
    if (*(void *)v13)
    {
      if (os_log_type_enabled(*(os_log_t *)v13, OS_LOG_TYPE_DEBUG))
      {
        sub_2CA1C(__p, a2);
        uint64_t v15 = v19 >= 0 ? __p : (void **)__p[0];
        CFIndex v16 = "false";
        uint64_t v21 = "IAPManager.cpp";
        __int16 v22 = 1024;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        if (v8 != v9) {
          CFIndex v16 = "true";
        }
        int v23 = 224;
        __int16 v24 = 2048;
        os_log_t v25 = a1;
        __int16 v26 = 2080;
        unsigned __int8 v27 = v15;
        __int16 v28 = 2080;
        char v29 = v16;
        _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - IAPManagerIAPManager[%p]::SetIAPUpdateListener(portType '%s') returns %s",  buf,  0x30u);
        if (v19 < 0)
        {
          operator delete(__p[0]);
          if (!v4) {
            return v8 != v9;
          }
          goto LABEL_28;
        }
      }
    }
  }

  if (v4) {
LABEL_28:
  }
    (*(void (**)(void *))(*a1 + 24LL))(a1);
  return v8 != v9;
}

void sub_1F3874(_Unwind_Exception *exception_object)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

double sub_1F38B8(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  *(void *)&__int128 v12 = a4;
  *((void *)&v12 + 1) = a5;
  if (a2 != a3)
  {
    do
    {
      sub_13A930((uint64_t)&v12, *((_DWORD *)v5 + 7));
      int v8 = (void *)v5[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          int v8 = (void *)*v8;
        }

        while (v8);
      }

      else
      {
        do
        {
          uint64_t v9 = (void *)v5[2];
          BOOL v10 = *v9 == (void)v5;
          uint64_t v5 = v9;
        }

        while (!v10);
      }

      uint64_t v5 = v9;
    }

    while (v9 != a3);
    uint64_t v5 = a3;
  }

  *(void *)a1 = v5;
  double result = *(double *)&v12;
  *(_OWORD *)(a1 + 8) = v12;
  return result;
}

void sub_1F394C(uint64_t a1)
{
  uint64_t v2 = sub_138E8(11);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    int v3 = *(os_log_s **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "IAPManager.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = 494;
        *(_WORD *)&_BYTE buf[18] = 2048;
        *(void *)&_BYTE buf[20] = a1;
        _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d + IAPManager[%p]::HandleIAPStateChange()", buf, 0x1Cu);
      }
    }
  }

  uint64_t v7 = a1;
  int v4 = (dispatch_queue_s *)sub_869B4();
  if (dispatch_get_specific("VirtualAudioQueueKey") == "VirtualAudioQueueKey")
  {
    sub_1F14DC(a1);
  }

  else
  {
    int v8 = &v7;
    *(void *)AudioObjectPropertyAddress buf = _NSConcreteStackBlock;
    *(void *)&_DWORD buf[8] = 0x40000000LL;
    *(void *)&buf[16] = sub_1F3D5C;
    *(void *)&_BYTE buf[24] = &unk_475B08;
    BOOL v10 = &v8;
    dispatch_sync(v4, buf);
  }

  uint64_t v5 = sub_138E8(11);
  if ((*(_BYTE *)(v5 + 8) & 1) != 0)
  {
    char v6 = *(os_log_s **)v5;
    if (*(void *)v5)
    {
      if (os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "IAPManager.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = 500;
        *(_WORD *)&_BYTE buf[18] = 2048;
        *(void *)&_BYTE buf[20] = a1;
        _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d - IAPManager[%p]::HandleIAPStateChange()", buf, 0x1Cu);
      }
    }
  }

void sub_1F3B1C( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf, __int128 a12, __int16 a13, __int16 a14, int a15, int a16)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    uint64_t v17 = __cxa_begin_catch(a1);
    unint64_t v18 = (os_log_t *)sub_138E8(13);
    os_log_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      int v20 = v17[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a12) = 1024;
      DWORD1(a12) = v20;
      WORD4(a12) = 2080;
      *(void *)((char *)&a12 + 10) = "";
      a14 = 1024;
      a15 = 35;
      uint64_t v21 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      __int16 v22 = v19;
      uint32_t v23 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v22, OS_LOG_TYPE_ERROR, v21, (uint8_t *)&buf, v23);
    }
  }

  else
  {
    __int16 v24 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      os_log_t v25 = v24;
      __int16 v26 = (os_log_t *)sub_138E8(13);
      os_log_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        uint64_t v28 = (*(uint64_t (**)(void *))(*(void *)v25 + 16LL))(v25);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = v28;
        WORD6(a12) = 2080;
        *(void *)((char *)&a12 + 14) = "";
        HIWORD(a15) = 1024;
        a16 = 35;
        uint64_t v21 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        __int16 v22 = v27;
        uint32_t v23 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      char v29 = (os_log_t *)sub_138E8(13);
      os_log_t v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = "";
        WORD6(a12) = 1024;
        *(_DWORD *)((char *)&a12 + 14) = 35;
        uint64_t v21 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        __int16 v22 = v30;
        uint32_t v23 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x1F3A6CLL);
}

void sub_1F3D5C(uint64_t a1)
{
}

void sub_1F3DC0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    uint64_t v15 = __cxa_begin_catch(exception_object);
    CFIndex v16 = (os_log_t *)sub_138E8(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(va_start(va, a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(va_start(va, a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 47;
      os_log_t v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      int v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }

  else
  {
    __int16 v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint32_t v23 = v22;
      __int16 v24 = (os_log_t *)sub_138E8(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16LL))(v23);
        LODWORD(va_start(va, a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(va_start(va, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 47;
        os_log_t v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        int v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      os_log_t v27 = (os_log_t *)sub_138E8(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(va_start(va, a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(va_start(va, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 47;
        os_log_t v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        int v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x1F3D90LL);
}

uint64_t sub_1F4000()
{
  uint64_t result = qword_490F28;
  if (!qword_490F28)
  {
    uint64_t v1 = (os_log_t *)sub_138E8(13);
    uint64_t v2 = *v1;
    if (*v1)
    {
      if (os_log_type_enabled(*v1, OS_LOG_TYPE_ERROR))
      {
        int v4 = 136315394;
        uint64_t v5 = "IAPManager.cpp";
        __int16 v6 = 1024;
        int v7 = 158;
        _os_log_impl( &dword_0,  v2,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [sIAPManager is NULL]: sIAPManager is NULL!",  (uint8_t *)&v4,  0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "sIAPManager is NULL!");
  }

  return result;
}

void sub_1F40F8(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1F4114(uint64_t **a1, unint64_t a2, unint64_t a3)
{
  if (!a2)
  {
    BOOL v10 = (os_log_t *)sub_138E8(13);
    BOOL v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      os_log_t v17 = "IAPManager.cpp";
      __int16 v18 = 1024;
      int v19 = 244;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::invalid_argument) [inProc is NULL]: inProc is NULL.",  (uint8_t *)&v16,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1013D0(exception, "inProc is NULL.");
  }

  __int16 v6 = a1 + 17;
  int v7 = ((uint64_t (*)(uint64_t **))(*a1)[2])(a1);
  v8.n128_u64[0] = a2;
  v8.n128_u64[1] = a3;
  uint64_t result = sub_1F4368(v6, a2, v8);
  if ((result & 1) == 0)
  {
    uint64_t v13 = (os_log_t *)sub_138E8(13);
    uint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      os_log_t v17 = "IAPManager.cpp";
      __int16 v18 = 1024;
      int v19 = 249;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Attempt to add a listener for which the proc has already been added.",  (uint8_t *)&v16,  0x12u);
    }

    uint64_t v15 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v15, "Attempt to add a listener for which the proc has already been added.");
  }

  if (v7) {
    return ((uint64_t (*)(uint64_t **))(*a1)[3])(a1);
  }
  return result;
}

void sub_1F4300(_Unwind_Exception *exception_object)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1F4368(uint64_t **a1, unint64_t a2, __n128 a3)
{
  uint64_t v5 = a1 + 1;
  int v4 = a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        __int16 v6 = (uint64_t **)v4;
        unint64_t v7 = v4[4];
        if (v7 <= a2) {
          break;
        }
        int v4 = *v6;
        uint64_t v5 = v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }

      if (v7 >= a2) {
        return 0LL;
      }
      int v4 = v6[1];
      if (!v4)
      {
        uint64_t v5 = v6 + 1;
        goto LABEL_9;
      }
    }
  }

  else
  {
    __int16 v6 = a1 + 1;
LABEL_9:
    __n128 v8 = (__n128 *)operator new(0x30uLL);
    void v8[2] = a3;
    sub_32C38(a1, (uint64_t)v6, v5, (uint64_t *)v8);
    return 1LL;
  }

uint64_t *sub_1F440C(uint64_t **a1, unint64_t a2)
{
  if (!a2)
  {
    unint64_t v7 = (os_log_t *)sub_138E8(13);
    __n128 v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      uint64_t v14 = "IAPManager.cpp";
      __int16 v15 = 1024;
      int v16 = 255;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::invalid_argument) [inProc is NULL]: inProc is NULL.",  (uint8_t *)&v13,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1013D0(exception, "inProc is NULL.");
  }

  int v4 = a1 + 17;
  int v5 = ((uint64_t (*)(uint64_t **))(*a1)[2])(a1);
  uint64_t result = sub_1F4644(v4, a2);
  if (!result)
  {
    BOOL v10 = (os_log_t *)sub_138E8(13);
    BOOL v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      uint64_t v14 = "IAPManager.cpp";
      __int16 v15 = 1024;
      int v16 = 260;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Attempt to remove a listener that does not exist in mPortConnectionListenerMap.",  (uint8_t *)&v13,  0x12u);
    }

    __int128 v12 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error( v12,  "Attempt to remove a listener that does not exist in mPortConnectionListenerMap.");
  }

  if (v5) {
    return (uint64_t *)((uint64_t (*)(uint64_t **))(*a1)[3])(a1);
  }
  return result;
}

void sub_1F45E4(_Unwind_Exception *exception_object)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1F4644(uint64_t **a1, unint64_t a2)
{
  int v4 = (uint64_t *)(a1 + 1);
  uint64_t result = a1[1];
  if (result)
  {
    int v5 = v4;
    __int16 v6 = result;
    do
    {
      unint64_t v7 = v6[4];
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        uint64_t v9 = (uint64_t **)v6;
      }
      else {
        uint64_t v9 = (uint64_t **)(v6 + 1);
      }
      if (v8) {
        int v5 = v6;
      }
      __int16 v6 = *v9;
    }

    while (*v9);
    if (v5 == v4 || v5[4] > a2)
    {
      return 0LL;
    }

    else
    {
      BOOL v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          BOOL v11 = v10;
          BOOL v10 = (uint64_t *)*v10;
        }

        while (v10);
      }

      else
      {
        __int128 v12 = v5;
        do
        {
          BOOL v11 = (uint64_t *)v12[2];
          BOOL v13 = *v11 == (void)v12;
          __int128 v12 = v11;
        }

        while (!v13);
      }

      if (*a1 == v5) {
        *a1 = v11;
      }
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      sub_911E8(result, v5);
      operator delete(v5);
      return (void *)(&dword_0 + 1);
    }
  }

  return result;
}

void sub_1F470C(uint64_t a1, int a2, unint64_t a3, unint64_t a4)
{
  if (!a3)
  {
    char v31 = (os_log_t *)sub_138E8(13);
    int v32 = *v31;
    if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)CFStringRef v37 = "IAPManager.cpp";
      *(_WORD *)&v37[8] = 1024;
      *(_DWORD *)&v37[10] = 266;
      _os_log_impl( &dword_0,  v32,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::invalid_argument) [inProc is NULL]: inProc is NULL.",  buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1013D0(exception, "inProc is NULL.");
  }

  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
  BOOL v10 = (uint64_t **)(a1 + 168);
  uint64_t v9 = *(void *)(a1 + 168);
  if (!v9) {
    goto LABEL_12;
  }
  uint64_t v11 = a1 + 168;
  do
  {
    int v12 = *(_DWORD *)(v9 + 32);
    BOOL v13 = v12 < a2;
    if (v12 >= a2) {
      uint64_t v14 = (uint64_t *)v9;
    }
    else {
      uint64_t v14 = (uint64_t *)(v9 + 8);
    }
    if (!v13) {
      uint64_t v11 = v9;
    }
    uint64_t v9 = *v14;
  }

  while (*v14);
  if ((uint64_t **)v11 != v10 && *(_DWORD *)(v11 + 32) <= a2)
  {
    v27.n128_u64[0] = a3;
    v27.n128_u64[1] = a4;
    if ((sub_1F4368((uint64_t **)(v11 + 40), a3, v27) & 1) == 0)
    {
      os_log_t v28 = (os_log_t *)sub_138E8(13);
      char v29 = *v28;
      if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)CFStringRef v37 = "IAPManager.cpp";
        *(_WORD *)&v37[8] = 1024;
        *(_DWORD *)&v37[10] = 274;
        _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Attempt to add a listener for which the proc has already been added.",  buf,  0x12u);
      }

      os_log_t v30 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v30, "Attempt to add a listener for which the proc has already been added.");
    }
  }

  else
  {
LABEL_12:
    v35[0] = 0LL;
    v35[1] = 0LL;
    __int16 v34 = (uint64_t *)v35;
    v15.n128_u64[0] = a3;
    v15.n128_u64[1] = a4;
    sub_1F4368(&v34, a3, v15);
    *(_DWORD *)AudioObjectPropertyAddress buf = a2;
    sub_1F3464((uint64_t)&v37[4], &v34);
    int v16 = *v10;
    os_log_t v17 = (uint64_t **)(a1 + 168);
    if (*v10)
    {
      while (1)
      {
        while (1)
        {
          os_log_t v17 = (uint64_t **)v16;
          int v18 = *((_DWORD *)v16 + 8);
          int v16 = *v17;
          BOOL v10 = v17;
          if (!*v17) {
            goto LABEL_19;
          }
        }

        int v16 = v17[1];
        if (!v16)
        {
          BOOL v10 = v17 + 1;
          goto LABEL_19;
        }
      }
    }

    else
    {
LABEL_19:
      int v19 = (uint64_t *)operator new(0x40uLL);
      int v20 = v19;
      int v21 = *(_DWORD *)buf;
      uint64_t v23 = *(void *)&v37[4];
      uint64_t v22 = *(void *)&v37[12];
      v19[6] = *(void *)&v37[12];
      __int16 v24 = (char *)(v19 + 6);
      *((_DWORD *)v19 + 8) = v21;
      v19[5] = v23;
      uint64_t v25 = v38;
      v19[7] = v38;
      if (v25)
      {
        *(void *)(v22 + 16) = v24;
        *(void *)&v37[4] = &v37[12];
        *(void *)&v37[12] = 0LL;
        uint64_t v38 = 0LL;
      }

      else
      {
        v19[5] = (uint64_t)v24;
      }

      *int v19 = 0LL;
      v19[1] = 0LL;
      void v19[2] = (uint64_t)v17;
      *BOOL v10 = v19;
      uint64_t v26 = **(void **)(a1 + 160);
      if (v26)
      {
        *(void *)(a1 + 160) = v26;
        int v20 = *v10;
      }

      sub_7A420(*(uint64_t **)(a1 + 168), v20);
      ++*(void *)(a1 + 176);
    }

    sub_32C8C(*(void **)&v37[12]);
    sub_32C8C(v35[0]);
  }

  if (v8) {
    (*(void (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
  }
}

void sub_1F4A44( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v15 + 24LL))(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1F4AD0(void *a1, int a2, unint64_t a3)
{
  if (!a3)
  {
    int v16 = (os_log_t *)sub_138E8(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v22 = 136315394;
      uint64_t v23 = "IAPManager.cpp";
      __int16 v24 = 1024;
      int v25 = 287;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::invalid_argument) [inProc is NULL]: inProc is NULL.",  (uint8_t *)&v22,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1013D0(exception, "inProc is NULL.");
  }

  int v6 = (*(uint64_t (**)(void *))(*a1 + 16LL))(a1);
  uint64_t v7 = a1[21];
  if (!v7) {
    goto LABEL_16;
  }
  int v8 = a1 + 21;
  do
  {
    int v9 = *(_DWORD *)(v7 + 32);
    BOOL v10 = v9 < a2;
    if (v9 >= a2) {
      uint64_t v11 = (uint64_t *)v7;
    }
    else {
      uint64_t v11 = (uint64_t *)(v7 + 8);
    }
    if (!v10) {
      int v8 = (void *)v7;
    }
    uint64_t v7 = *v11;
  }

  while (*v11);
  if (v8 == a1 + 21 || *((_DWORD *)v8 + 8) > a2)
  {
LABEL_16:
    BOOL v13 = (os_log_t *)sub_138E8(13);
    uint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      int v22 = 136315394;
      uint64_t v23 = "IAPManager.cpp";
      __int16 v24 = 1024;
      int v25 = 292;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Attempt to remove a listener for an IAPPortType that has never received a listener.",  (uint8_t *)&v22,  0x12u);
    }

    uint64_t v15 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error( v15,  "Attempt to remove a listener for an IAPPortType that has never received a listener.");
  }

  uint64_t result = sub_1F4644((uint64_t **)v8 + 5, a3);
  if (!result)
  {
    int v19 = (os_log_t *)sub_138E8(13);
    int v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      int v22 = 136315394;
      uint64_t v23 = "IAPManager.cpp";
      __int16 v24 = 1024;
      int v25 = 294;
      _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Attempt to remove a listener that does not exist in mVolumeSupportListenerMap.",  (uint8_t *)&v22,  0x12u);
    }

    int v21 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v21, "Attempt to remove a listener that does not exist in mVolumeSupportListenerMap.");
  }

  if (v6) {
    return (uint64_t *)(*(uint64_t (**)(void *))(*a1 + 24LL))(a1);
  }
  return result;
}

void sub_1F4D88(_Unwind_Exception *exception_object)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1F4DF8(uint64_t a1)
{
  uint64_t v2 = sub_138E8(11);
  uint64_t v3 = sub_138E8(38);
  char v4 = 0;
  uint64_t v5 = 0LL;
  *(void *)int v12 = 0x100000002LL;
  uint64_t v6 = *(void *)(v2 + 8);
  while (1)
  {
    uint64_t v7 = *(int *)&v12[4 * v5];
    char v8 = v4;
    if (((v6 & v7) != 0) != ((*(void *)(v3 + 8) & v7) != 0)) {
      break;
    }
    char v4 = 1;
    uint64_t v5 = 1LL;
    if ((v8 & 1) != 0) {
      goto LABEL_7;
    }
  }

  if ((v6 & v7) == 0) {
    uint64_t v2 = v3;
  }
LABEL_7:
  int v9 = *(os_log_s **)v2;
  if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    int v10 = *(unsigned __int8 *)(a1 + 120);
    *(_DWORD *)int v12 = 136315650;
    *(void *)&v12[4] = "IAPManager.cpp";
    __int16 v13 = 1024;
    int v14 = 320;
    __int16 v15 = 1024;
    int v16 = v10;
    _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Get volume control support value of %u. Value is cached -- did not call iapd.",  v12,  0x18u);
  }

  return *(unsigned __int8 *)(a1 + 120);
}

float sub_1F4F28(float *a1)
{
  uint64_t v2 = sub_138E8(11);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    uint64_t v3 = *(os_log_s **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int v19 = 136315394;
        *(void *)&v19[4] = "IAPManager.cpp";
        __int16 v20 = 1024;
        int v21 = 327;
        _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d + IAPManager::GetVolume()", v19, 0x12u);
      }
    }
  }

  int v4 = (*(uint64_t (**)(float *))(*(void *)a1 + 16LL))(a1);
  uint64_t v5 = sub_138E8(11);
  uint64_t v6 = sub_138E8(38);
  char v7 = 0;
  uint64_t v8 = 0LL;
  *(void *)int v19 = 0x100000002LL;
  uint64_t v9 = *(void *)(v5 + 8);
  while (1)
  {
    uint64_t v10 = *(int *)&v19[4 * v8];
    char v11 = v7;
    if (((v9 & v10) != 0) != ((*(void *)(v6 + 8) & v10) != 0)) {
      break;
    }
    char v7 = 1;
    uint64_t v8 = 1LL;
    if ((v11 & 1) != 0) {
      goto LABEL_11;
    }
  }

  if ((v9 & v10) == 0) {
    uint64_t v5 = v6;
  }
LABEL_11:
  int v12 = *(os_log_s **)v5;
  if (v12 && os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    double v13 = a1[31];
    *(_DWORD *)int v19 = 136315650;
    *(void *)&v19[4] = "IAPManager.cpp";
    __int16 v20 = 1024;
    int v21 = 331;
    __int16 v22 = 2048;
    double v23 = v13;
    _os_log_impl(&dword_0, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Get volume value of %f (cached).", v19, 0x1Cu);
  }

  uint64_t v14 = sub_138E8(11);
  if ((*(_BYTE *)(v14 + 8) & 1) != 0)
  {
    __int16 v15 = *(os_log_s **)v14;
    if (*(void *)v14)
    {
      if (os_log_type_enabled(*(os_log_t *)v14, OS_LOG_TYPE_DEBUG))
      {
        double v16 = a1[31];
        *(_DWORD *)int v19 = 136315650;
        *(void *)&v19[4] = "IAPManager.cpp";
        __int16 v20 = 1024;
        int v21 = 333;
        __int16 v22 = 2048;
        double v23 = v16;
        _os_log_impl(&dword_0, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d - IAPManager::GetVolume() returned %f", v19, 0x1Cu);
      }
    }
  }

  float v17 = a1[31];
  if (v4) {
    (*(void (**)(float *))(*(void *)a1 + 24LL))(a1);
  }
  return v17;
}

void sub_1F5198(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

void sub_1F51DC(uint64_t a1, float a2)
{
  uint64_t v4 = sub_138E8(11);
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
  {
    uint64_t v5 = *(os_log_s **)v4;
    if (*(void *)v4)
    {
      if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)char v29 = 136315650;
        *(void *)&v29[4] = "IAPManager.cpp";
        __int16 v30 = 1024;
        int v31 = 341;
        __int16 v32 = 2048;
        double v33 = a2;
        _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d + IAPManager::SetVolume(inVolume: %f)", v29, 0x1Cu);
      }
    }
  }

  if (sub_1F5650((unsigned __int8 *)a1))
  {
    uint64_t v6 = sub_138E8(11);
    uint64_t v7 = sub_138E8(38);
    char v8 = 0;
    uint64_t v9 = 0LL;
    *(void *)char v29 = 0x100000002LL;
    uint64_t v10 = *(void *)(v6 + 8);
    while (1)
    {
      uint64_t v11 = *(int *)&v29[4 * v9];
      char v12 = v8;
      if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
        break;
      }
      char v8 = 1;
      uint64_t v9 = 1LL;
      if ((v12 & 1) != 0) {
        goto LABEL_16;
      }
    }

    if ((v10 & v11) == 0) {
      uint64_t v6 = v7;
    }
LABEL_16:
    int v21 = *(os_log_s **)v6;
    if (v21 && os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)char v29 = 136315650;
      *(void *)&v29[4] = "IAPManager.cpp";
      __int16 v30 = 1024;
      int v31 = 351;
      __int16 v32 = 2048;
      double v33 = a2;
      _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Ignoring call to set volume value of %f on iapd (muted).",  v29,  0x1Cu);
    }
  }

  else
  {
    int v13 = IAPAudioSetVolumeForTransport(*(unsigned int *)(a1 + 88), a2);
    uint64_t v14 = sub_138E8(11);
    uint64_t v15 = sub_138E8(38);
    char v16 = 0;
    uint64_t v17 = 0LL;
    *(void *)char v29 = 0x100000002LL;
    uint64_t v18 = *(void *)(v14 + 8);
    while (1)
    {
      uint64_t v19 = *(int *)&v29[4 * v17];
      char v20 = v16;
      if (((v18 & v19) != 0) != ((*(void *)(v15 + 8) & v19) != 0)) {
        break;
      }
      char v16 = 1;
      uint64_t v17 = 1LL;
      if ((v20 & 1) != 0) {
        goto LABEL_21;
      }
    }

    if ((v18 & v19) == 0) {
      uint64_t v14 = v15;
    }
LABEL_21:
    __int16 v22 = *(os_log_s **)v14;
    if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)char v29 = 136315906;
      *(void *)&v29[4] = "IAPManager.cpp";
      __int16 v30 = 1024;
      int v31 = 346;
      __int16 v32 = 2048;
      double v33 = a2;
      __int16 v34 = 1024;
      int v35 = v13;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Set volume value of %f on iapd (status: %u).",  v29,  0x22u);
    }

    if (v13 != 1)
    {
      uint64_t v26 = (os_log_t *)sub_138E8(13);
      __n128 v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)char v29 = 136315394;
        *(void *)&v29[4] = "IAPManager.cpp";
        __int16 v30 = 1024;
        int v31 = 347;
        _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): IAPAudioSetVolumeForTransport() returned FALSE.",  v29,  0x12u);
      }

      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "IAPAudioSetVolumeForTransport() returned FALSE.");
    }
  }

  int v23 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
  *(float *)(a1 + 124) = a2;
  uint64_t v24 = sub_138E8(11);
  if ((*(_BYTE *)(v24 + 8) & 1) != 0)
  {
    int v25 = *(os_log_s **)v24;
    if (*(void *)v24)
    {
      if (os_log_type_enabled(*(os_log_t *)v24, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)char v29 = 136315650;
        *(void *)&v29[4] = "IAPManager.cpp";
        __int16 v30 = 1024;
        int v31 = 357;
        __int16 v32 = 2048;
        double v33 = a2;
        _os_log_impl(&dword_0, v25, OS_LOG_TYPE_DEBUG, "%25s:%-5d - IAPManager::SetVolume(inVolume: %f)", v29, 0x1Cu);
      }
    }
  }

  if (v23) {
    (*(void (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
  }
}

void sub_1F5604(_Unwind_Exception *a1)
{
}

BOOL sub_1F5650(unsigned __int8 *a1)
{
  int v2 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)a1 + 16LL))(a1);
  uint64_t v3 = sub_138E8(11);
  uint64_t v4 = sub_138E8(38);
  char v5 = 0;
  uint64_t v6 = 0LL;
  *(void *)uint64_t v14 = 0x100000002LL;
  uint64_t v7 = *(void *)(v3 + 8);
  while (1)
  {
    uint64_t v8 = *(int *)&v14[4 * v6];
    char v9 = v5;
    if (((v7 & v8) != 0) != ((*(void *)(v4 + 8) & v8) != 0)) {
      break;
    }
    char v5 = 1;
    uint64_t v6 = 1LL;
    if ((v9 & 1) != 0) {
      goto LABEL_7;
    }
  }

  if ((v7 & v8) == 0) {
    uint64_t v3 = v4;
  }
LABEL_7:
  uint64_t v10 = *(os_log_s **)v3;
  if (v10 && os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    int v11 = a1[128];
    *(_DWORD *)uint64_t v14 = 136315650;
    *(void *)&char v14[4] = "IAPManager.cpp";
    __int16 v15 = 1024;
    int v16 = 365;
    __int16 v17 = 1024;
    int v18 = v11;
    _os_log_impl(&dword_0, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Get mute value of %u (cached).", v14, 0x18u);
  }

  int v12 = a1[128];
  if (v2) {
    (*(void (**)(unsigned __int8 *))(*(void *)a1 + 24LL))(a1);
  }
  return v12 != 0;
}

void sub_1F57B4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

void sub_1F57EC(uint64_t a1, int a2)
{
  if (sub_1F5650((unsigned __int8 *)a1) == a2)
  {
    uint64_t v13 = sub_138E8(11);
    uint64_t v14 = sub_138E8(38);
    char v15 = 0;
    uint64_t v16 = 0LL;
    *(void *)int v23 = 0x100000002LL;
    uint64_t v17 = *(void *)(v13 + 8);
    while (1)
    {
      uint64_t v18 = *(int *)&v23[4 * v16];
      char v19 = v15;
      if (((v17 & v18) != 0) != ((*(void *)(v14 + 8) & v18) != 0)) {
        break;
      }
      char v15 = 1;
      uint64_t v16 = 1LL;
      if ((v19 & 1) != 0) {
        goto LABEL_21;
      }
    }

    if ((v17 & v18) == 0) {
      uint64_t v13 = v14;
    }
LABEL_21:
    __int16 v22 = *(os_log_s **)v13;
    if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int v23 = 136315394;
      *(void *)&v23[4] = "IAPManager.cpp";
      __int16 v24 = 1024;
      int v25 = 384;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Ignoring call to set mute (cached value identical to parameter value).",  v23,  0x12u);
    }
  }

  else
  {
    float v4 = 0.0;
    if ((a2 & 1) == 0) {
      float v4 = sub_1F4F28((float *)a1);
    }
    int v5 = IAPAudioSetVolumeForTransport(*(unsigned int *)(a1 + 88), v4);
    uint64_t v6 = sub_138E8(11);
    uint64_t v7 = sub_138E8(38);
    char v8 = 0;
    uint64_t v9 = 0LL;
    *(void *)int v23 = 0x100000002LL;
    uint64_t v10 = *(void *)(v6 + 8);
    while (1)
    {
      uint64_t v11 = *(int *)&v23[4 * v9];
      char v12 = v8;
      if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
        break;
      }
      char v8 = 1;
      uint64_t v9 = 1LL;
      if ((v12 & 1) != 0) {
        goto LABEL_14;
      }
    }

    if ((v10 & v11) == 0) {
      uint64_t v6 = v7;
    }
LABEL_14:
    char v20 = *(os_log_s **)v6;
    if (v20 && os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int v23 = 136316162;
      *(void *)&v23[4] = "IAPManager.cpp";
      __int16 v24 = 1024;
      int v25 = 377;
      __int16 v26 = 1024;
      int v27 = a2;
      __int16 v28 = 2048;
      double v29 = v4;
      __int16 v30 = 1024;
      int v31 = v5;
      _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Set mute value of %u. Set volume value of %f on iapd (status: %u).",  v23,  0x28u);
    }

    int v21 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
    *(_BYTE *)(a1 + 128) = a2;
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
    }
  }

void sub_1F5A6C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1F5A78(uint64_t a1)
{
  uint64_t v2 = sub_138E8(11);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    uint64_t v3 = *(os_log_s **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v8 = 136315650;
        uint64_t v9 = "IAPManager.cpp";
        __int16 v10 = 1024;
        int v11 = 391;
        __int16 v12 = 1024;
        int v13 = a1;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d +- IAPManager::SetSampleRateForUSB(inSampleRate: %u)",  (uint8_t *)&v8,  0x18u);
      }
    }
  }

  int v4 = IAPDigitalAudioSetSampleRate(a1);
  int v5 = (os_log_t *)sub_138E8(11);
  uint64_t v6 = *v5;
  if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEBUG))
  {
    int v8 = 136315906;
    uint64_t v9 = "IAPManager.cpp";
    __int16 v10 = 1024;
    int v11 = 394;
    __int16 v12 = 1024;
    int v13 = a1;
    __int16 v14 = 1024;
    int v15 = v4;
    _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d IAPDigitalAudioSetSampleRate(%u) returned status %u.",  (uint8_t *)&v8,  0x1Eu);
  }

  return v4 == 1;
}

uint64_t sub_1F5BDC(uint64_t a1)
{
  uint64_t v2 = sub_138E8(11);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    uint64_t v3 = *(os_log_s **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        char v19 = "IAPManager.cpp";
        __int16 v20 = 1024;
        int v21 = 411;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d +- IAPManager::GetSupportedSampleRatesForUSB()",  buf,  0x12u);
      }
    }
  }

  int v4 = (os_log_t *)sub_138E8(11);
  int v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    char v19 = "IAPManager.cpp";
    __int16 v20 = 1024;
    int v21 = 413;
    _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Calling IAPDigitalAudioCopySupportSampleRates().",  buf,  0x12u);
  }

  uint64_t v6 = (const __CFArray *)IAPDigitalAudioCopySupportSampleRates();
  CFArrayRef v16 = v6;
  __int16 v17 = 1;
  if (!v6 || (int Count = CFArrayGetCount(v6)) == 0)
  {
LABEL_16:
    __int16 v10 = (os_log_t *)sub_138E8(13);
    int v11 = *v10;
    if (*v10)
    {
      if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        char v19 = "IAPManager.cpp";
        __int16 v20 = 1024;
        int v21 = 435;
        _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to find a sample rate!",  buf,  0x12u);
      }
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to find a sample rate!");
  }

  unsigned int v8 = 0;
  unsigned int v9 = 0;
  do
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 0;
    sub_1A0E0C(&v16, v8, buf);
    if (*(_DWORD *)buf == 44100)
    {
      unsigned int v9 = 44100;
      goto LABEL_21;
    }

    if (v9 <= *(_DWORD *)buf) {
      unsigned int v9 = *(_DWORD *)buf;
    }
    ++v8;
  }

  while (Count != v8);
  if (!v9) {
    goto LABEL_16;
  }
LABEL_21:
  int v13 = (os_log_t *)sub_138E8(11);
  __int16 v14 = *v13;
  if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    char v19 = "IAPManager.cpp";
    __int16 v20 = 1024;
    int v21 = 436;
    __int16 v22 = 1024;
    unsigned int v23 = v9;
    _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d Returning sample rate: %u", buf, 0x18u);
  }

  *(void *)a1 = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  *(_WORD *)(a1 + 8) = 257;
  sub_1378C(a1, v9);
  return sub_13818((uint64_t)&v16);
}

void sub_1F5ECC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1F5F18(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8LL))(result);
  }
  return result;
}

BOOL sub_1F5F2C(int a1, uint64_t *a2)
{
  if (*(_DWORD *)(v14 + 144) == a1)
  {
    BOOL v4 = 1LL;
  }

  else
  {
    sub_B8CBC(&v12, a2 + 2, "", 879);
    int v5 = v13;
    BOOL v4 = *(_DWORD *)(v12 + 144) == a1;
    if (v13)
    {
      p_unsigned int shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        unint64_t v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }

  unsigned int v8 = v15;
  if (v15)
  {
    unsigned int v9 = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  return v4;
}

void sub_1F6018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

BOOL sub_1F602C(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    while (1)
    {
      uint64_t v2 = *a1;
      if (!*(_DWORD *)(*a1 + 4) && *(_DWORD *)v2 == 1986291046) {
        break;
      }
      if (++a1 == a2) {
        return 0LL;
      }
    }

    v8[0] = &off_475BC8;
    unsigned int v9 = v8;
    sub_1F6154((uint64_t)v7, (void *)(v2 + 16), (uint64_t)v8);
    int v5 = v9;
    if (v9 == v8)
    {
      uint64_t v6 = 4LL;
      int v5 = v8;
    }

    else
    {
      if (!v9)
      {
LABEL_12:
        BOOL v3 = v7[2] != 0LL;
        sub_FF3B8(v7[1]);
        return v3;
      }

      uint64_t v6 = 5LL;
    }

    (*(void (**)(void))(*v5 + 8 * v6))();
    goto LABEL_12;
  }

  return 0LL;
}

void sub_1F6118( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  CFArrayRef v16 = a15;
  if (a15 == &a12)
  {
    uint64_t v17 = 4LL;
    CFArrayRef v16 = &a12;
  }

  else
  {
    if (!a15) {
      goto LABEL_6;
    }
    uint64_t v17 = 5LL;
  }

  (*(void (**)(void))(*(void *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_1F6154(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  for (uint64_t i = (void *)a2[1]; i != a2; uint64_t i = (void *)i[1])
  {
    unint64_t v7 = (std::__shared_weak_count *)i[5];
    if (v7)
    {
      unsigned int v8 = std::__shared_weak_count::lock(v7);
      uint64_t v38 = v8;
      if (v8)
      {
        unsigned int v9 = v8;
        uint64_t v37 = i[4];
        if (!v37) {
          goto LABEL_19;
        }
        uint64_t v10 = *(void *)(a3 + 24);
        if (!v10) {
          sub_82CEC();
        }
        unint64_t v35 = 0LL;
        __int16 v36 = 0LL;
        int v11 = (std::__shared_weak_count *)i[5];
        if (v11)
        {
          uint64_t v12 = std::__shared_weak_count::lock(v11);
          if (v12)
          {
            int v13 = v12;
            unint64_t v14 = i[4];
            p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
            do
              unint64_t v16 = __ldxr(p_shared_weak_owners);
            while (__stxr(v16 + 1, p_shared_weak_owners));
            unint64_t v35 = v14;
            __int16 v36 = v12;
            p_unsigned int shared_owners = (unint64_t *)&v12->__shared_owners_;
            do
              unint64_t v18 = __ldaxr(p_shared_owners);
            while (__stlxr(v18 - 1, p_shared_owners));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v13);
            }
          }

          else
          {
            unint64_t v35 = 0LL;
            __int16 v36 = 0LL;
          }
        }

        sub_1331F0((uint64_t **)a1, &v35, (uint64_t)&v35);
        if (v36) {
          std::__shared_weak_count::__release_weak(v36);
        }
        unsigned int v9 = v38;
        if (v38)
        {
LABEL_19:
          char v19 = (unint64_t *)&v9->__shared_owners_;
          do
            unint64_t v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
      }
    }

    int v21 = (std::__shared_weak_count *)i[3];
    if (v21)
    {
      __int16 v22 = std::__shared_weak_count::lock(v21);
      uint64_t v38 = v22;
      if (v22)
      {
        unsigned int v23 = v22;
        uint64_t v37 = i[2];
        if (!v37) {
          goto LABEL_40;
        }
        uint64_t v24 = *(void *)(a3 + 24);
        if (!v24) {
          sub_82CEC();
        }
        unint64_t v35 = 0LL;
        __int16 v36 = 0LL;
        int v25 = (std::__shared_weak_count *)i[3];
        if (v25)
        {
          __int16 v26 = std::__shared_weak_count::lock(v25);
          if (v26)
          {
            int v27 = v26;
            unint64_t v28 = i[2];
            double v29 = (unint64_t *)&v26->__shared_weak_owners_;
            do
              unint64_t v30 = __ldxr(v29);
            while (__stxr(v30 + 1, v29));
            unint64_t v35 = v28;
            __int16 v36 = v26;
            int v31 = (unint64_t *)&v26->__shared_owners_;
            do
              unint64_t v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v27);
            }
          }

          else
          {
            unint64_t v35 = 0LL;
            __int16 v36 = 0LL;
          }
        }

        sub_1331F0((uint64_t **)a1, &v35, (uint64_t)&v35);
        if (v36) {
          std::__shared_weak_count::__release_weak(v36);
        }
        unsigned int v23 = v38;
        if (v38)
        {
LABEL_40:
          double v33 = (unint64_t *)&v23->__shared_owners_;
          do
            unint64_t v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
      }
    }
  }

void sub_1F63C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  sub_7A768((uint64_t)&a11);
  sub_FF3B8(*v11);
  _Unwind_Resume(a1);
}

void *sub_1F6408()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_475BC8;
  return result;
}

void sub_1F642C(uint64_t a1, void *a2)
{
  *a2 = &off_475BC8;
}

BOOL sub_1F6444(uint64_t a1, uint64_t a2)
{
  BOOL v3 = sub_204348(a2, (const UInt8 *)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

BOOL sub_1F649C(_DWORD **a1, _DWORD **a2, char a3)
{
  if (a1 != a2)
  {
    while (**a1 != 1986291046)
    {
      if (++a1 == a2) {
        return 0LL;
      }
    }

    BOOL v4 = *a1 + 4;
    unsigned int v9 = &off_475C10;
    char v10 = a3;
    int v11 = &v9;
    sub_1F6154((uint64_t)v8, v4, (uint64_t)&v9);
    int v5 = v11;
    if (v11 == &v9)
    {
      uint64_t v6 = 4LL;
      int v5 = &v9;
    }

    else
    {
      if (!v11)
      {
LABEL_10:
        BOOL v3 = v8[2] != 0LL;
        sub_FF3B8(v8[1]);
        return v3;
      }

      uint64_t v6 = 5LL;
    }

    (*v5)[v6]();
    goto LABEL_10;
  }

  return 0LL;
}

void sub_1F6584( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  unint64_t v16 = a15;
  if (a15 == &a12)
  {
    uint64_t v17 = 4LL;
    unint64_t v16 = &a12;
  }

  else
  {
    if (!a15) {
      goto LABEL_6;
    }
    uint64_t v17 = 5LL;
  }

  (*(void (**)(void))(*(void *)v16 + 8 * v17))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_BYTE *sub_1F65C8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &off_475C10;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t sub_1F6600(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &off_475C10;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

uint64_t sub_1F6620(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1FF9AC((void *)a2);
  if ((_DWORD)result)
  {
    if (*(_BYTE *)(a1 + 8))
    {
      if (*(void *)(a2 + 192))
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 152LL))(a2);
        if ((_DWORD)result)
        {
          if (*(_DWORD *)(a2 + 144) == 1885892674) {
            return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 424LL))(a2);
          }
          else {
            return sub_20371C(a2);
          }
        }
      }

      else
      {
        return 0LL;
      }
    }

    else
    {
      return 1LL;
    }
  }

  return result;
}

BOOL sub_1F66B8(int a1, uint64_t *a2, uint64_t *a3)
{
  if (a2 == a3) {
    return 0LL;
  }
  while (1)
  {
    uint64_t v4 = *a2;
    if (!*(_DWORD *)(*a2 + 4) && *(_DWORD *)v4 == 1986291046) {
      break;
    }
    if (++a2 == a3) {
      return 0LL;
    }
  }

  unint64_t v7 = (void *)(v4 + 16);
  unsigned int v8 = *(void **)(v4 + 24);
  if (v8 == (void *)(v4 + 16)) {
    return 0LL;
  }
  do
  {
    sub_B8CBC(&v21, v8 + 2, "", 948);
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 112LL))(v21);
    if ((v9 & 0xFF00000000LL) != 0) {
      int v10 = v9;
    }
    else {
      int v10 = 1701868910;
    }
    if (v10 == a1)
    {
      BOOL v5 = 1LL;
    }

    else
    {
      sub_B8CBC(&v19, v8 + 4, "", 950);
      uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 112LL))(v19);
      if ((v11 & 0xFF00000000LL) != 0) {
        int v12 = v11;
      }
      else {
        int v12 = 1701868910;
      }
      BOOL v5 = v12 == a1;
      int v13 = v20;
      if (v20)
      {
        p_unsigned int shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          unint64_t v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }

    unint64_t v16 = v22;
    if (v22)
    {
      uint64_t v17 = (unint64_t *)&v22->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }

    if (v5) {
      break;
    }
    unsigned int v8 = (void *)v8[1];
  }

  while (v8 != v7);
  return v5;
}

void sub_1F6844( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10)
  {
    p_unsigned int shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }

  if (a12)
  {
    unint64_t v15 = (unint64_t *)&a12->__shared_owners_;
    do
      unint64_t v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }

  _Unwind_Resume(exception_object);
}

void sub_1F68CC(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_1F690C((uint64_t *)v2);
    operator delete(**a1);
  }

void sub_1F690C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16LL)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  a1[1] = v2;
}

uint64_t sub_1F6954(uint64_t *a1, uint64_t *a2)
{
  if (a1 == a2) {
    return 0LL;
  }
  while (*(_DWORD *)(*a1 + 4) || *(_DWORD *)*a1 != 1986291046)
  {
    if (++a1 == a2) {
      return 0LL;
    }
  }

  return sub_1F6998(*a1);
}

uint64_t sub_1F6998(uint64_t a1)
{
  BOOL v3 = (void *)(a1 + 16);
  sub_1F6AA0((uint64_t)v14, (void *)(a1 + 16));
  uint64_t v4 = *(void **)(a1 + 24);
  if (v16 < 2 || v4 == v3)
  {
LABEL_15:
    uint64_t v12 = 0LL;
  }

  else
  {
    while (1)
    {
      uint64_t v6 = (std::__shared_weak_count *)v4[5];
      if (v6)
      {
        unint64_t v7 = std::__shared_weak_count::lock(v6);
        unint64_t v18 = v7;
        if (v7)
        {
          unsigned int v8 = v7;
          uint64_t v9 = v4[4];
          uint64_t v17 = v9;
          if (v9) {
            BOOL v1 = sub_202EE8(v9);
          }
          p_unsigned int shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            unint64_t v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }

          if (v9 != 0 && v1) {
            break;
          }
        }
      }

      uint64_t v4 = (void *)v4[1];
      if (v4 == v3) {
        goto LABEL_15;
      }
    }

    uint64_t v12 = 1LL;
  }

  sub_FF3B8(v15);
  return v12;
}

void sub_1F6A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, ...)
{
}

void *sub_1F6AA0(uint64_t a1, void *a2)
{
  v4[0] = &off_475D30;
  BOOL v5 = v4;
  sub_1F6154(a1, a2, (uint64_t)v4);
  uint64_t result = v5;
  if (v5 == v4)
  {
    uint64_t v3 = 4LL;
    uint64_t result = v4;
  }

  else
  {
    if (!v5) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_1F6B34( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  unint64_t v14 = a13;
  if (a13 == &a10)
  {
    uint64_t v15 = 4LL;
    unint64_t v14 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v15 = 5LL;
  }

  (*(void (**)(void))(*(void *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void *sub_1F6B78()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_475D30;
  return result;
}

void sub_1F6B9C(uint64_t a1, void *a2)
{
  *a2 = &off_475D30;
}

BOOL sub_1F6BB4(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 144) == 1885892674;
}

void *sub_1F6BD4()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_475C58;
  return result;
}

void sub_1F6BF8(uint64_t a1, void *a2)
{
  *a2 = &off_475C58;
}

uint64_t sub_1F6C10(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 416LL))(a2);
}

void *sub_1F6C28()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_475CA0;
  return result;
}

void sub_1F6C4C(uint64_t a1, void *a2)
{
  *a2 = &off_475CA0;
}

BOOL sub_1F6C64(uint64_t a1, uint64_t a2)
{
  return (*(_WORD *)(a2 + 184) & 1) == 0 && *(_DWORD *)(a2 + 144) != 1885433888;
}

BOOL sub_1F6C84(uint64_t a1, void *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    BOOL v5 = std::__shared_weak_count::lock(v4);
    if (v5 && *a2 == a1)
    {
      BOOL v6 = 1LL;
LABEL_14:
      p_unsigned int shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        unint64_t v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }

      return v6;
    }
  }

  else
  {
    BOOL v5 = 0LL;
  }

  unint64_t v7 = (std::__shared_weak_count *)a2[3];
  if (v7 && (unsigned int v8 = std::__shared_weak_count::lock(v7)) != 0LL)
  {
    uint64_t v9 = v8;
    BOOL v6 = a2[2] == a1;
    int v10 = (unint64_t *)&v8->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  else
  {
    BOOL v6 = 0LL;
  }

  if (v5) {
    goto LABEL_14;
  }
  return v6;
}

BOOL sub_1F6D68(uint64_t a1)
{
  int v1 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 400LL))(v6);
  uint64_t v2 = v7;
  if (v7)
  {
    p_unsigned int shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }

  return v1 == 1;
}

void sub_1F6DF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1F6E10()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_475CE8;
  return result;
}

void sub_1F6E34(uint64_t a1, void *a2)
{
  *a2 = &off_475CE8;
}

uint64_t sub_1F6E4C()
{
  return 1LL;
}

uint64_t sub_1F6E54(uint64_t *a1, uint64_t *a2)
{
  if (a1 == a2) {
    return 0LL;
  }
  uint64_t v3 = a1;
  do
  {
    uint64_t v4 = *v3;
    if (!*(_DWORD *)(*v3 + 4) && *(_DWORD *)v4 == 1986291046)
    {
      uint64_t v5 = v4 + 16;
      for (uint64_t i = *(void *)(v4 + 24); i != v5; uint64_t i = *(void *)(i + 8))
      {
        if (sub_1F6D68(i + 16)) {
          return 1LL;
        }
      }
    }

    ++v3;
  }

  while (v3 != a2);
  return 0LL;
}

uint64_t sub_1F6EF0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 192);
  if (!v2 || !sub_203C24(v2)) {
    return 0LL;
  }
  uint64_t v3 = *(void *)(a1 + 192);
  strcpy((char *)v13, "diabbolg");
  BYTE1(v13[2]) = 0;
  HIWORD(v13[2]) = 0;
  unint64_t v4 = sub_5C2F8(v3);
  *((void *)&v7 + 1) = v5;
  *(void *)&__int128 v7 = v4;
  uint64_t v6 = v7 >> 32;
  if ((v6 & 0xFF00000000LL) == 0) {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v6 != 8223 && (_DWORD)v6 != 8202) {
    return 1LL;
  }
  uint64_t v12 = sub_31F914();
  uint64_t v9 = (os_log_t *)sub_138E8(20);
  int v10 = *v9;
  if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_DEBUG))
  {
    v13[0] = 136315650;
    *(void *)&v13[1] = "RouteUtilities.cpp";
    __int16 v14 = 1024;
    int v15 = 1107;
    __int16 v16 = 1024;
    int v17 = v12;
    _os_log_impl(&dword_0, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Device changes based on PME: %u", (uint8_t *)v13, 0x18u);
  }

  return v12;
}

BOOL sub_1F7024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    while (*(_DWORD *)(*(void *)a2 + 4LL) || **(_DWORD **)a2 != 1986291046)
    {
      a2 += 8LL;
      if (a2 == a3) {
        return 0LL;
      }
    }
  }

  if (a2 == a3) {
    return 0LL;
  }
  uint64_t v4 = *(void *)a2 + 16LL;
  uint64_t v5 = *(void *)(*(void *)a2 + 24LL);
  if (v5 == v4) {
    return 0LL;
  }
  do
  {
    BOOL result = sub_1F6C84(a1, (void *)(v5 + 16));
    if (result) {
      break;
    }
    uint64_t v5 = *(void *)(v5 + 8);
  }

  while (v5 != v4);
  return result;
}

double sub_1F70C0(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  *(void *)&__int128 v22 = a6;
  *((void *)&v22 + 1) = a7;
  if (a2 != a3)
  {
    int v10 = a4;
    if (a4 != a5)
    {
      unint64_t v11 = a2;
      do
      {
        unsigned int v12 = *((_DWORD *)v11 + 7);
        unsigned int v13 = *((_DWORD *)v10 + 7);
        if (v12 >= v13)
        {
          if (v13 >= v12)
          {
            sub_11A238((uint64_t)&v22, (unsigned int *)v11 + 7);
            int v17 = (void *)v11[1];
            if (v17)
            {
              do
              {
                __int16 v16 = v17;
                int v17 = (void *)*v17;
              }

              while (v17);
            }

            else
            {
              do
              {
                __int16 v16 = (void *)v11[2];
                BOOL v18 = *v16 == (void)v11;
                unint64_t v11 = v16;
              }

              while (!v18);
            }
          }

          else
          {
            __int16 v16 = v11;
          }

          uint64_t v19 = (void *)v10[1];
          if (v19)
          {
            do
            {
              int v10 = v19;
              uint64_t v19 = (void *)*v19;
            }

            while (v19);
          }

          else
          {
            do
            {
              unint64_t v20 = v10;
              int v10 = (void *)v10[2];
            }

            while ((void *)*v10 != v20);
          }

          unint64_t v11 = v16;
        }

        else
        {
          __int16 v14 = (void *)v11[1];
          if (v14)
          {
            do
            {
              unint64_t v11 = v14;
              __int16 v14 = (void *)*v14;
            }

            while (v14);
          }

          else
          {
            do
            {
              int v15 = v11;
              unint64_t v11 = (void *)v11[2];
            }

            while ((void *)*v11 != v15);
          }
        }
      }

      while (v11 != a3 && v10 != a5);
    }
  }

  *(void *)a1 = a3;
  *(void *)(a1 + 8) = a5;
  double result = *(double *)&v22;
  *(_OWORD *)(a1 + 16) = v22;
  return result;
}

void sub_1F71EC(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a5 == 1)
  {
    sub_B8F68(&v16, (uint64_t *)(a4 + 16), "", 1274);
    unsigned int v12 = v17;
    int v13 = *(_DWORD *)(v16 + 264);
    if (v17)
    {
      p_unsigned int shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        unint64_t v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }

  else
  {
    int v13 = 0;
  }

  sub_17E44C((uint64_t)&v16, a2, a3, v13);
  sub_2D89F8(&v20, a6, (int *)&v16);
  if (__p)
  {
    uint64_t v19 = __p;
    operator delete(__p);
  }

  if (v22)
  {
    *(_OWORD *)a1 = v20;
    *(void *)(a1 + 16) = v21;
    *(_BYTE *)(a1 + 24) = 1;
  }

  else
  {
    sub_2D0F1C((_BYTE *)a1, a7, a2);
  }

void sub_1F7304( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1F7320( uint64_t *a1, uint64_t a2, _OWORD *a3, void *a4, uint64_t a5, uint64_t a6, unsigned int *a7, uint64_t *a8)
{
  int v48 = a2;
  *a1 = 0LL;
  a1[1] = 0LL;
  sub_1F71EC((uint64_t)&__p, a2, a3, a4[1], a4[2], a5, a6);
  if (!v47) {
    return;
  }
  __int16 v42 = 0LL;
  int v43 = 0LL;
  uint64_t v44 = 0LL;
  sub_DA744(&v42, __p, (uint64_t)v46, (v46 - (_BYTE *)__p) >> 3);
  unsigned int v12 = v42;
  if (v42 == v43)
  {
    uint64_t v21 = sub_138E8(20);
    uint64_t v22 = sub_138E8(24);
    char v23 = 0;
    uint64_t v24 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v25 = *(void *)(v21 + 8);
    while (1)
    {
      uint64_t v26 = *(int *)&buf[4 * v24];
      char v27 = v23;
      if (((v25 & v26) != 0) != ((*(void *)(v22 + 8) & v26) != 0)) {
        break;
      }
      char v23 = 1;
      uint64_t v24 = 1LL;
      if ((v27 & 1) != 0) {
        goto LABEL_14;
      }
    }

    if ((v25 & v26) == 0) {
      uint64_t v21 = v22;
    }
LABEL_14:
    unint64_t v28 = *(os_log_s **)v21;
    if (*(void *)v21 && os_log_type_enabled(*(os_log_t *)v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RouteUtilities.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = 1340;
      _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Empty DSPChainConfigVector (expected during bringup)",  buf,  0x12u);
    }

    goto LABEL_45;
  }

  uint64_t v13 = (char *)v43 - (char *)v42;
  if ((unint64_t)((char *)v43 - (char *)v42) >= 0x11)
  {
    uint64_t v14 = sub_138E8(20);
    uint64_t v15 = sub_138E8(24);
    char v16 = 0;
    uint64_t v17 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v18 = *(void *)(v14 + 8);
    while (1)
    {
      uint64_t v19 = *(int *)&buf[4 * v17];
      char v20 = v16;
      if (((v18 & v19) != 0) != ((*(void *)(v15 + 8) & v19) != 0)) {
        break;
      }
      char v16 = 1;
      uint64_t v17 = 1LL;
      if ((v20 & 1) != 0) {
        goto LABEL_19;
      }
    }

    if ((v18 & v19) == 0) {
      uint64_t v14 = v15;
    }
LABEL_19:
    double v29 = *(os_log_s **)v14;
    if (v29 && os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "RouteUtilities.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = 1309;
      __int16 v50 = 2048;
      uint64_t v51 = v13 >> 3;
      _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_INFO,  "%25s:%-5d Get DSP properties returned a list of %lu entries. We currently base DSP on the first entry only.",  buf,  0x1Cu);
    }
  }

  uint64_t v30 = *v12;
  if (*v12)
  {
    *a8 = v30;
    if (*(_BYTE *)(v30 + 52))
    {
      v41[0] = *(void *)a7;
      v41[1] = v30;
      sub_1F77FC();
      sub_90C4C((uint64_t)buf, (int *)v41);
      if (buf[16])
      {
        sub_91174(a1, *(uint64_t *)buf, *(uint64_t *)&buf[8]);
        if (*a1) {
          sub_199F9C(*a1, 1);
        }
LABEL_40:
        double v33 = *(std::__shared_weak_count **)&buf[8];
        if (!*(void *)&buf[8]) {
          goto LABEL_45;
        }
        int v39 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v35 = __ldaxr(v39);
        while (__stlxr(v35 - 1, v39));
        goto LABEL_43;
      }

      sub_1F786C((uint64_t *)&v40, &v42, a4, a7, &v48);
      sub_127660((uint64_t)a1, &v40);
      __int16 v36 = (std::__shared_weak_count *)*((void *)&v40 + 1);
      if (*((void *)&v40 + 1))
      {
        uint64_t v37 = (unint64_t *)(*((void *)&v40 + 1) + 8LL);
        do
          unint64_t v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }

      sub_1F77FC();
      sub_90EEC((unsigned int *)v41, a1);
      if (buf[16]) {
        goto LABEL_40;
      }
    }

    else
    {
      int v31 = (os_log_t *)sub_138E8(24);
      unint64_t v32 = *v31;
      if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "RouteUtilities.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = 1333;
        _os_log_impl(&dword_0, v32, OS_LOG_TYPE_INFO, "%25s:%-5d Creating output DSP Chain, not caching.", buf, 0x12u);
      }

      sub_1F786C((uint64_t *)buf, &v42, a4, a7, &v48);
      sub_127660((uint64_t)a1, (__int128 *)buf);
      double v33 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        unint64_t v34 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
LABEL_43:
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
    }

void sub_1F777C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, char a21, uint64_t a22, char a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19)
  {
    if (a16) {
      operator delete(a16);
    }
  }

  sub_7A768(v23);
  _Unwind_Resume(a1);
}

void sub_1F77FC()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_493050);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_493050))
    {
      qword_493000 = 0LL;
      qword_492FF8 = (uint64_t)&qword_493000;
      qword_493008 = 0LL;
      unk_493010 = 850045863LL;
      xmmword_493018 = 0u;
      unk_493028 = 0u;
      xmmword_493038 = 0u;
      qword_493048 = 0LL;
      __cxa_guard_release(&qword_493050);
    }
  }

void sub_1F786C(uint64_t *a1, uint64_t **a2, void *a3, unsigned int *a4, int *a5)
{
  v560 = a4;
  v584 = a3;
  uint64_t v5 = *a2;
  if (*a2 == a2[1])
  {
    *a1 = 0LL;
    a1[1] = 0LL;
    return;
  }

  v573 = a1;
  if (!*v5 || (v553 = a5, (sub_7531C() & 1) == 0) && *(void *)**a2 == *(void *)(**a2 + 8))
  {
    unint64_t v11 = v573;
    uint64_t *v573 = 0LL;
    v11[1] = 0LL;
    return;
  }

  uint64_t v559 = **a2;
  __int128 v7 = (os_log_t *)sub_138E8(24);
  unsigned int v8 = *v7;
  if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
  {
    sub_2CF0E8(&v627[0].__pn_, v559);
    uint64_t v9 = (v627[0].__pn_.__r_.__value_.__s.__size_ & 0x80u) == 0
       ? v627
       : (std::__fs::filesystem::path *)v627[0].__pn_.__r_.__value_.__r.__words[0];
    *(_DWORD *)v637 = 136315650;
    *(void *)&v637[4] = "RouteUtilities.cpp";
    *(_WORD *)&v637[12] = 1024;
    *(_DWORD *)&v637[14] = 455;
    *(_WORD *)&v637[18] = 2080;
    *(void *)&v637[20] = v9;
    _os_log_impl(&dword_0, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d DSPChainConfig: %s", v637, 0x1Cu);
  }

  int v10 = (void **)(v559 + 24);
  if (*(char *)(v559 + 47) < 0)
  {
    unint64_t v12 = *(void *)(v559 + 32);
    if (v12)
    {
      sub_24054(&v599, *v10, v12);
      goto LABEL_20;
    }
  }

  else if (*(_BYTE *)(v559 + 47))
  {
    *(_OWORD *)&v599.__r_.__value_.__l.__data_ = *(_OWORD *)v10;
    v599.__r_.__value_.__l.__cap_ = *(void *)(v559 + 40);
    goto LABEL_20;
  }

  sub_1FF224(&v599, (uint64_t)v584);
LABEL_20:
  if ((sub_7531C() & 1) != 0)
  {
    BOOL v13 = 1;
  }

  else
  {
    uint64_t v14 = (void *)sub_CFFF0(*(void **)v559, *(void **)(v559 + 8));
    uint64_t v15 = sub_D01B4(v14, 1685090932);
    if (v15)
    {
      int v17 = *((_DWORD *)v15 + 6);
      char v16 = (int *)(v15 + 3);
      if (v17 != 7)
      {
        v541 = (os_log_t *)sub_138E8(13);
        v542 = *v541;
        if (*v541 && os_log_type_enabled(*v541, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v637 = 136315394;
          *(void *)&v637[4] = "DSPChainUtilities.cpp";
          *(_WORD *)&v637[12] = 1024;
          *(_DWORD *)&v637[14] = 180;
          _os_log_impl( &dword_0,  v542,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  v637,  0x12u);
        }

        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Precondition failure.");
      }

      BOOL v13 = sub_2DCA7C(v16) == 1685287015;
    }

    else
    {
      BOOL v13 = 0;
    }
  }

  uint64_t v18 = (os_log_t *)sub_138E8(24);
  uint64_t v19 = *v18;
  if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_DEFAULT))
  {
    char v20 = &v599;
    if ((v599.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      char v20 = (std::string *)v599.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)v637 = 136315906;
    *(void *)&v637[4] = "RouteUtilities.cpp";
    *(_WORD *)&v637[12] = 1024;
    *(_DWORD *)&v637[14] = 460;
    *(_WORD *)&v637[18] = 2080;
    *(void *)&v637[20] = v20;
    *(_WORD *)&v637[28] = 1024;
    *(_DWORD *)&v637[30] = v13;
    _os_log_impl(&dword_0, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d dspchain name is %s, graph-based: %d", v637, 0x22u);
  }

  if (v13)
  {
    LODWORD(v585) = *(_DWORD *)(v559 + 48);
    uint64_t v21 = (os_log_t *)sub_138E8(24);
    uint64_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_DEFAULT))
    {
      int size = (char)v599.__r_.__value_.__s.__size_;
      std::string::size_type v24 = v599.__r_.__value_.__r.__words[0];
      sub_2CA1C(v627, v585);
      uint64_t v25 = &v599;
      if (size < 0) {
        uint64_t v25 = (std::string *)v24;
      }
      if ((v627[0].__pn_.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v26 = v627;
      }
      else {
        uint64_t v26 = (std::__fs::filesystem::path *)v627[0].__pn_.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)v637 = 136315906;
      *(void *)&v637[4] = "DSPGraphChain.cpp";
      *(_WORD *)&v637[12] = 1024;
      *(_DWORD *)&v637[14] = 28;
      *(_WORD *)&v637[18] = 2080;
      *(void *)&v637[20] = v25;
      *(_WORD *)&v637[28] = 2080;
      *(void *)&v637[30] = v26;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Creating DSP Graph Chain %s, chain type: %s",  v637,  0x26u);
    }

    if ((int)v585 <= 1684434035)
    {
      if ((_DWORD)v585 == 1668049011) {
        goto LABEL_77;
      }
      if ((_DWORD)v585 != 1668051824) {
        goto LABEL_88;
      }
    }

    else if ((_DWORD)v585 != 1936749172)
    {
      if ((_DWORD)v585 != 1869375603)
      {
        if ((_DWORD)v585 == 1684434036)
        {
          char v27 = operator new(0x488uLL);
          sub_818B8((uint64_t)v27, (__int128 *)&v599);
          unint64_t v28 = (std::__shared_weak_count *)operator new(0x20uLL);
          v28->__shared_owners_ = 0LL;
          p_unsigned int shared_owners = (unint64_t *)&v28->__shared_owners_;
          v28->__vftable = (std::__shared_weak_count_vtbl *)&off_46D3F0;
          v28->__shared_weak_owners_ = 0LL;
          v28[1].__vftable = (std::__shared_weak_count_vtbl *)v27;
          *(void *)&__int128 v30 = v27;
          *((void *)&v30 + 1) = v28;
          int v31 = (std::__shared_weak_count *)*((void *)v27 + 2);
          if (!v31)
          {
            do
              unint64_t v35 = __ldxr(p_shared_owners);
            while (__stxr(v35 + 1, p_shared_owners));
            p_shared_weak_owners = (unint64_t *)&v28->__shared_weak_owners_;
            do
              unint64_t v37 = __ldxr(p_shared_weak_owners);
            while (__stxr(v37 + 1, p_shared_weak_owners));
            *((void *)v27 + 1) = v27;
            *((void *)v27 + 2) = v28;
            goto LABEL_55;
          }

          if (v31->__shared_owners_ == -1)
          {
            do
              unint64_t v32 = __ldxr(p_shared_owners);
            while (__stxr(v32 + 1, p_shared_owners));
            __int128 v585 = v30;
            double v33 = (unint64_t *)&v28->__shared_weak_owners_;
            do
              unint64_t v34 = __ldxr(v33);
            while (__stxr(v34 + 1, v33));
            *((void *)v27 + 1) = v27;
            *((void *)v27 + 2) = v28;
            std::__shared_weak_count::__release_weak(v31);
            __int128 v30 = v585;
            do
LABEL_55:
              unint64_t v38 = __ldaxr(p_shared_owners);
            while (__stlxr(v38 - 1, p_shared_owners));
            goto LABEL_217;
          }

LABEL_412:
                sub_1FE7A8((uint64_t)v637, v213, v215, &v603, (uint64_t)v627);
                unint64_t v240 = v601;
                if (v601 >= v602)
                {
                  unint64_t v242 = 0xF0F0F0F0F0F0F0F1LL * ((uint64_t)(v601 - v600) >> 3);
                  unint64_t v243 = v242 + 1;
                  if (v242 + 1 > 0x1E1E1E1E1E1E1E1LL) {
                    sub_7A87C();
                  }
                  else {
                    unint64_t v244 = v243;
                  }
                  v626 = v563;
                  if (v244) {
                    unint64_t v244 = (unint64_t)sub_1FE648(v244);
                  }
                  else {
                    uint64_t v245 = 0LL;
                  }
                  v624.__r_.__value_.__r.__words[0] = v244;
                  v624.__r_.__value_.__l.__size_ = v244 + 136 * v242;
                  v624.__r_.__value_.__l.__cap_ = v624.__r_.__value_.__l.__size_;
                  unint64_t v625 = v244 + 136 * v245;
                  sub_22C360(v624.__r_.__value_.__l.__size_, (uint64_t)v637);
                  v624.__r_.__value_.__l.__cap_ += 136LL;
                  sub_1FE68C(&v600, &v624);
                  unint64_t v241 = v601;
                  sub_1FE75C((uint64_t)&v624);
                }

                else
                {
                  sub_22C360(v601, (uint64_t)v637);
                  unint64_t v241 = v240 + 136;
                }

                unint64_t v601 = v241;
                if ((v644[7] & 0x80000000) != 0) {
                  operator delete(v643[2]);
                }
                sub_9DBD0((uint64_t)v572);
                sub_9DBD0((uint64_t)v568);
                if (SHIBYTE(v604) < 0) {
                  operator delete((void *)v603);
                }
                if (v606) {
                  CFRelease(v606);
                }
                ++*((void *)&v612 + 1);
              }

              if ((char)v627[0].__pn_.__r_.__value_.__s.__size_ < 0)
              {
                v627[0].__pn_.__r_.__value_.__l.__size_ = 8LL;
                unint64_t v221 = (std::__fs::filesystem::path *)v627[0].__pn_.__r_.__value_.__r.__words[0];
                uint64_t v222 = (std::string::size_type *)(v627[0].__pn_.__r_.__value_.__r.__words[0] + 8);
              }

              else
              {
                v627[0].__pn_.__r_.__value_.__s.__size_ = 8;
                unint64_t v221 = v627;
                uint64_t v222 = v568;
              }

              uint64_t v223 = 0x706972747375612ELL;
              goto LABEL_368;
            }

LABEL_445:
            sub_8D530((uint64_t)&v617);
LABEL_446:
            if (v622) {
              CFRelease(v622);
            }
            if (v621 < 0) {
              operator delete((void *)v620[0]);
            }
            ++v633.__r_.__value_.__l.__size_;
          }
        }
      }
    }

    v250 = sub_D01B4(v579, 1684303986);
    if (v250)
    {
      uint64_t v251 = sub_2DD25C((int *)v250 + 6);
      uint64_t v252 = *(void *)(v251 + 8);
      if (v251 != v252)
      {
        uint64_t v577 = v580;
        uint64_t v571 = v251;
        while (1)
        {
          uint64_t v581 = v252;
          int v254 = *(_DWORD *)(v252 + 16);
          v253 = (int *)(v252 + 16);
          if (v254 != 17)
          {
            uint64_t v260 = sub_2DCA7C(v253);
            v629.__r_.__value_.__r.__words[0] = v577 | (v260 << 32);
            LODWORD(v612) = 0;
            uint64_t v590 = 0x676C6F6264667070LL;
            int v591 = 0;
            double v261 = (void *)v584[1];
            if (v261 == v584) {
              goto LABEL_511;
            }
            do
            {
              v262 = sub_B8F68((uint64_t *)v637, v261 + 2, "", 79);
              if (*(void *)v637
                && (uint64_t v263 = *(void *)(*(void *)v637 + 192LL),
                    v262 = (std::__shared_weak_count *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v263 + 16LL))( v263,  &v590),  (_DWORD)v262))
              {
                v262 = (std::__shared_weak_count *)(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, std::string *))(*(void *)v263 + 32LL))( v263,  &v590,  8LL,  &v629);
                LODWORD(v612) = (_DWORD)v262;
                if ((_DWORD)v262) {
                  uint64_t v264 = v263;
                }
                else {
                  uint64_t v264 = 0LL;
                }
              }

              else
              {
                uint64_t v264 = 0LL;
              }

              __int16 v265 = *(std::__shared_weak_count **)&v637[8];
              if (*(void *)&v637[8])
              {
                int v266 = (unint64_t *)(*(void *)&v637[8] + 8LL);
                do
                  unint64_t v267 = __ldaxr(v266);
                while (__stlxr(v267 - 1, v266));
                if (!v267)
                {
                  ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
                  std::__shared_weak_count::__release_weak(v265);
                }
              }

              if (v264) {
                break;
              }
              double v261 = (void *)v261[1];
            }

            while (v261 != v584);
            if (!v264)
            {
LABEL_511:
              v277 = (os_log_t *)sub_138E8(20);
              v278 = *v277;
              if (*v277 && os_log_type_enabled(*v277, OS_LOG_TYPE_INFO))
              {
                sub_2CA1C(v627, v580);
                int v279 = (char)v627[0].__pn_.__r_.__value_.__s.__size_;
                std::string::size_type v280 = v627[0].__pn_.__r_.__value_.__r.__words[0];
                sub_2CA1C(&v633, v260);
                v281 = v627;
                if (v279 < 0) {
                  v281 = (std::__fs::filesystem::path *)v280;
                }
                v282 = &v633;
                if ((v633.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  v282 = (std::string *)v633.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)v637 = v574;
                *(void *)&v637[4] = "RouteUtilities.cpp";
                *(_WORD *)&v637[12] = 1024;
                *(_DWORD *)&v637[14] = 611;
                *(_WORD *)&v637[18] = 2080;
                *(void *)&v637[20] = v281;
                *(_WORD *)&v637[28] = 2080;
                *(void *)&v637[30] = v282;
                *(_WORD *)&v637[38] = 1024;
                *(_DWORD *)&v637[40] = v260;
                _os_log_impl( &dword_0,  v278,  OS_LOG_TYPE_INFO,  "%25s:%-5d Unable to find a physical device that provides device-specific data for DSP processor %s, pr operty '%s' (%u)",  v637,  0x2Cu);
              }
            }

            else if ((_DWORD)v612)
            {
              __n128 v268 = __chkstk_darwin(v262);
              __int16 v270 = (char *)&v547 - ((v269 + 15) & 0x1FFFFFFF0LL);
              uint64_t v588 = 0x676C6F6264667070LL;
              int v589 = 0;
              (*(void (**)(uint64_t, uint64_t *, uint64_t, std::string *, __int128 *, char *, __n128))(*(void *)v264 + 40LL))( v264,  &v588,  8LL,  &v629,  &v612,  v270,  v268);
              uint64_t v271 = sub_138E8(24);
              if ((*(_BYTE *)(v271 + 8) & 1) != 0)
              {
                v272 = *(os_log_s **)v271;
                if (*(void *)v271)
                {
                  if (os_log_type_enabled(*(os_log_t *)v271, OS_LOG_TYPE_DEBUG))
                  {
                    sub_2CA1C(v627, v260);
                    int v273 = (char)v627[0].__pn_.__r_.__value_.__s.__size_;
                    std::string::size_type v274 = v627[0].__pn_.__r_.__value_.__r.__words[0];
                    sub_2CA1C(&v633, v580);
                    char v275 = v627;
                    if (v273 < 0) {
                      char v275 = (std::__fs::filesystem::path *)v274;
                    }
                    v276 = &v633;
                    if ((v633.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                      v276 = (std::string *)v633.__r_.__value_.__r.__words[0];
                    }
                    *(_DWORD *)v637 = v574;
                    *(void *)&v637[4] = "RouteUtilities.cpp";
                    *(_WORD *)&v637[12] = 1024;
                    *(_DWORD *)&v637[14] = 617;
                    *(_WORD *)&v637[18] = 2080;
                    *(void *)&v637[20] = v275;
                    *(_WORD *)&v637[28] = 1024;
                    *(_DWORD *)&v637[30] = v260;
                    *(_WORD *)&v637[34] = 2080;
                    *(void *)&v637[36] = v276;
                    _os_log_impl( &dword_0,  v272,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Setting device-specific property '%s' (%u) on DSP processor with type '%s'",  v637,  0x2Cu);
                    uint64_t v251 = v571;
                  }
                }
              }

              (*(void (**)(uint64_t, uint64_t, char *, void, void, void))(*(void *)v593 + 56LL))( v593,  v260,  v270,  v612,  0LL,  0LL);
            }

            goto LABEL_771;
          }

          uint64_t v255 = sub_2DD358(v253);
          sub_1FDD64((uint64_t)&v633, v255);
          *(void *)&__int128 v607 = &v607;
          *((void *)&v607 + 1) = &v607;
          v608 = 0LL;
          uint64_t v256 = sub_2DCA7C(v578);
          if (LODWORD(v633.__r_.__value_.__l.__data_) == 16)
          {
            uint64_t v283 = sub_2DD25C((int *)&v633);
            sub_1FE1EC((uint64_t *)v637, v283);
            uint64_t v284 = *(void *)&v637[8];
            if (*(_BYTE **)&v637[8] == v637)
            {
              double v258 = 0LL;
              uint64_t v259 = 0LL;
            }

            else
            {
              double v258 = 0LL;
              v285 = 0LL;
              unint64_t v286 = 0LL;
              do
              {
                sub_2DC450((uint64_t)v627, v284 + 16);
                int v287 = sub_2DCA7C((int *)v627);
                int v288 = v287;
                if ((unint64_t)v285 >= v286)
                {
                  uint64_t v289 = v285 - v258;
                  unint64_t v290 = v289 + 1;
                  else {
                    unint64_t v291 = v290;
                  }
                  if (v291) {
                    unint64_t v291 = (unint64_t)sub_7A890(v291);
                  }
                  else {
                    uint64_t v292 = 0LL;
                  }
                  v293 = (_DWORD *)(v291 + 4 * v289);
                  _DWORD *v293 = v288;
                  uint64_t v259 = (uint64_t)(v293 + 1);
                  while (v285 != v258)
                  {
                    int v294 = *--v285;
                    *--v293 = v294;
                  }

                  unint64_t v286 = v291 + 4 * v292;
                  if (v258) {
                    operator delete(v258);
                  }
                  double v258 = v293;
                }

                else
                {
                  _DWORD *v285 = v287;
                  uint64_t v259 = (uint64_t)(v285 + 1);
                }

                sub_2DBF5C((uint64_t)v627);
                uint64_t v284 = *(void *)(v284 + 8);
                v285 = (_DWORD *)v259;
              }

              while ((_BYTE *)v284 != v637);
            }

            sub_149990((uint64_t *)v637);
            uint64_t v251 = v571;
          }

          else if (LODWORD(v633.__r_.__value_.__l.__data_) == 7)
          {
            int v257 = sub_2DCA7C((int *)&v633);
            double v258 = sub_7A890(1uLL);
            *double v258 = v257;
            uint64_t v259 = (uint64_t)(v258 + 1);
          }

          else
          {
            double v258 = 0LL;
            uint64_t v259 = 0LL;
          }

          memset(v637, 0, 24);
          sub_7A5B8(v637, v258, v259, (v259 - (uint64_t)v258) >> 2);
          strcpy(&v637[24], "cwdv");
          v637[32] = 0;
          *(_DWORD *)&v637[40] = 3;
          v295 = v576;
          void *v576 = 0LL;
          v295[1] = 0LL;
          v638 = v295;
          v640[2] = 44739242;
          CFTypeRef v641 = 0LL;
          sub_335C00((uint64_t *)v627, v584, (uint64_t)v637);
          sub_85B80((uint64_t *)&v607);
          std::string::size_type v296 = v627[0].__pn_.__r_.__value_.__l.__cap_;
          if (v627[0].__pn_.__r_.__value_.__l.__cap_)
          {
            v297 = (void *)v627[0].__pn_.__r_.__value_.__l.__size_;
            std::string::size_type v298 = v627[0].__pn_.__r_.__value_.__r.__words[0];
            uint64_t v299 = *(void *)v627[0].__pn_.__r_.__value_.__l.__size_;
            *(void *)(v299 + 8) = *(void *)(v627[0].__pn_.__r_.__value_.__r.__words[0] + 8);
            **(void **)(v298 + 8) = v299;
            uint64_t v300 = v607;
            *(void *)(v607 + 8) = v297;
            void *v297 = v300;
            *(void *)(v298 + 8) = &v607;
            *(void *)&__int128 v607 = v298;
            v608 += v296;
            v627[0].__pn_.__r_.__value_.__l.__cap_ = 0LL;
          }

          sub_85B80((uint64_t *)v627);
          if (v608) {
            break;
          }
          v301 = (os_log_t *)sub_138E8(13);
          v302 = *v301;
          if (*v301 && os_log_type_enabled(*v301, OS_LOG_TYPE_ERROR))
          {
            v624.__r_.__value_.__r.__words[0] = (std::string::size_type)&v624;
            v624.__r_.__value_.__l.__size_ = (std::string::size_type)&v624;
            v624.__r_.__value_.__l.__cap_ = 0LL;
            if (v258 != (_DWORD *)v259)
            {
              v303 = v258;
              do
              {
                sub_2CA1C(&v629, *v303);
                v304 = (char *)operator new(0x28uLL);
                *(std::string *)(v304 + 16) = v629;
                std::string::size_type v305 = v624.__r_.__value_.__r.__words[0];
                *(void *)v304 = v624.__r_.__value_.__r.__words[0];
                *((void *)v304 + 1) = &v624;
                *(void *)(v305 + 8) = v304;
                v624.__r_.__value_.__r.__words[0] = (std::string::size_type)v304;
                ++v624.__r_.__value_.__l.__cap_;
                ++v303;
              }

              while (v303 != (unsigned int *)v259);
            }

            sub_7D084(&v629, ",");
            sub_1518D0(&v612, (uint64_t)&v624, (uint64_t)&v629);
            int v306 = SHIBYTE(v613);
            v307 = (__int128 *)v612;
            sub_2CA1C(v620, v256);
            v308 = &v612;
            if (v306 < 0) {
              v308 = v307;
            }
            v309 = v620;
            if (v621 < 0) {
              v309 = (const void **)v620[0];
            }
            LODWORD(v627[0].__pn_.__r_.__value_.__l.__data_) = v561;
            *(std::string::size_type *)((char *)v627[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RouteUtilities.cpp";
            WORD2(v627[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&v627[0].__pn_.__r_.__value_.__r.__words[1] + 6) = 596;
            WORD1(v627[0].__pn_.__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&v627[0].__pn_.__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v308;
            WORD2(v627[1].__pn_.__r_.__value_.__r.__words[0]) = 2080;
            *(std::string::size_type *)((char *)v627[1].__pn_.__r_.__value_.__r.__words + 6) = (std::string::size_type)v309;
            _os_log_impl( &dword_0,  v302,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: No ports found that match any of the ones requested (%s) for property %s, skipping it",  (uint8_t *)v627,  0x26u);
            if (v621 < 0) {
              operator delete((void *)v620[0]);
            }
            if (SHIBYTE(v613) < 0) {
              operator delete((void *)v612);
            }
            sub_1532B4(&v624);
          }

          if (v608) {
            break;
          }
LABEL_764:
          if (v641) {
            CFRelease(v641);
          }
          sub_32C8C(v639);
          if (*(void *)v637)
          {
            *(void *)&v637[8] = *(void *)v637;
            operator delete(*(void **)v637);
          }

          if (v258) {
            operator delete(v258);
          }
          sub_85B80((uint64_t *)&v607);
          sub_2DBF5C((uint64_t)v578);
          sub_2DBF5C((uint64_t)&v633);
LABEL_771:
          uint64_t v252 = *(void *)(v581 + 8);
          if (v251 == v252) {
            goto LABEL_772;
          }
        }

        sub_B8F68((uint64_t *)&v624, (uint64_t *)(*((void *)&v607 + 1) + 16LL), "", 601);
        uint64_t v311 = v624.__r_.__value_.__r.__words[0];
        LODWORD(v603) = v256;
        v605.__r_.__value_.__r.__words[0] = 0LL;
        if ((int)v256 > 1751937132)
        {
          if ((int)v256 <= 1936749412)
          {
            if ((_DWORD)v256 == 1751937133)
            {
              (*(void (**)(uint64_t, uint64_t, void, void, float))(*(void *)v593 + 72LL))( v593,  1751937133LL,  0LL,  0LL,  1.0);
              goto LABEL_759;
            }

            if ((_DWORD)v256 != 1936745841)
            {
              if ((_DWORD)v256 != 1936746611) {
                goto LABEL_657;
              }
              goto LABEL_600;
            }

            v325 = (os_log_t *)sub_138E8(20);
            v326 = *v325;
            if (*v325 && os_log_type_enabled(*v325, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(v627[0].__pn_.__r_.__value_.__l.__data_) = v569;
              *(std::string::size_type *)((char *)v627[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RouteUtilities.cpp";
              WORD2(v627[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&v627[0].__pn_.__r_.__value_.__r.__words[1] + 6) = 361;
              _os_log_impl( &dword_0,  v326,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Getting SpEQ data from FDR",  (uint8_t *)v627,  0x12u);
            }

            sub_191948((uint64_t)v627, *(void *)(v311 + 192), COERCE_DOUBLE(1869968496LL));
            v613 = 0LL;
            __int128 v612 = 0u;
            int v327 = v627[1].__pn_.__r_.__value_.__s.__data_[0];
            v328 = v627;
            if (!v627[1].__pn_.__r_.__value_.__s.__data_[0]) {
              v328 = (std::__fs::filesystem::path *)&v612;
            }
            std::string::size_type v329 = v328->__pn_.__r_.__value_.__r.__words[0];
            int32x2_t v330 = vdup_n_s32(v627[1].__pn_.__r_.__value_.__s.__data_[0] == 0);
            v331.i64[0] = v330.u32[0];
            v331.i64[1] = v330.u32[1];
            int8x16_t v332 = vandq_s8( *(int8x16_t *)&v627[0].__pn_.__r_.__value_.__r.__words[1],  (int8x16_t)vcgezq_s64(vshlq_n_s64(v331, 0x3FuLL)));
            *(_OWORD *)&v328->__pn_.__r_.__value_.__r.__words[1] = 0uLL;
            v328->__pn_.__r_.__value_.__r.__words[0] = 0LL;
            v629.__r_.__value_.__r.__words[0] = v329;
            *(int8x16_t *)&v629.__r_.__value_.__r.__words[1] = v332;
            if ((void)v612) {
              operator delete((void *)v612);
            }
            if (v327 && v627[0].__pn_.__r_.__value_.__r.__words[0]) {
              operator delete(v627[0].__pn_.__r_.__value_.__l.__data_);
            }
            sub_380650((uint64_t *)v620, (uint64_t)&v629);
            v333 = v620[0];
            if (v620[0])
            {
              v334 = (os_log_t *)sub_138E8(20);
              v335 = *v334;
              if (*v334 && os_log_type_enabled(*v334, OS_LOG_TYPE_DEFAULT))
              {
                v336 = CFCopyDescription(v333);
                sub_48188((uint64_t)&v612, v336);
                if (v336) {
                  CFRelease(v336);
                }
                v337 = &v612;
                if (SHIBYTE(v613) < 0) {
                  v337 = (__int128 *)v612;
                }
                LODWORD(v627[0].__pn_.__r_.__value_.__l.__data_) = v565;
                *(std::string::size_type *)((char *)v627[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RouteUtilities.cpp";
                WORD2(v627[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&v627[0].__pn_.__r_.__value_.__r.__words[1] + 6) = 368;
                WORD1(v627[0].__pn_.__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&v627[0].__pn_.__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v337;
                _os_log_impl( &dword_0,  v335,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d FDR Speaker EQ data: %s",  (uint8_t *)v627,  0x1Cu);
                if (SHIBYTE(v613) < 0) {
                  operator delete((void *)v612);
                }
              }

              sub_1FE270((uint64_t)v627, (int *)&v603);
              sub_1FE388(v583, v620);
              *(void *)&__int128 v612 = v627;
              *((void *)&v612 + 1) = 2LL;
              CFDictionaryRef v322 = sub_5A950((uint64_t)&v612);
              uint64_t v338 = 0LL;
              v605.__r_.__value_.__r.__words[0] = (std::string::size_type)v322;
              do
              {
                v339 = *(std::string::pointer *)((char *)&v627[1].__pn_.__r_.__value_.__l.__data_ + v338);
                if (v339) {
                  CFRelease(v339);
                }
                v340 = *(const void **)((char *)&v627[0].__pn_.__r_.__value_.__l.__cap_ + v338);
                if (v340) {
                  CFRelease(v340);
                }
                v338 -= 16LL;
              }

              while (v338 != -32);
              if (v333) {
                CFRelease(v333);
              }
            }

            else
            {
              v369 = (os_log_t *)sub_138E8(20);
              v370 = *v369;
              if (*v369 && os_log_type_enabled(*v369, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(v627[0].__pn_.__r_.__value_.__l.__data_) = v569;
                *(std::string::size_type *)((char *)v627[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RouteUtilities.cpp";
                WORD2(v627[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&v627[0].__pn_.__r_.__value_.__r.__words[1] + 6) = 373;
                _os_log_impl( &dword_0,  v370,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d FDR doesn't have Speaker EQ data",  (uint8_t *)v627,  0x12u);
              }

              CFDictionaryRef v322 = 0LL;
            }

            v371 = (float *)v629.__r_.__value_.__r.__words[0];
            if (!v629.__r_.__value_.__r.__words[0]) {
              goto LABEL_748;
            }
            v629.__r_.__value_.__l.__size_ = v629.__r_.__value_.__r.__words[0];
            goto LABEL_747;
          }

          switch((_DWORD)v256)
          {
            case 0x73707365:
              float v351 = sub_200CDC((uint64_t)v624.__r_.__value_.__l.__data_);
              (*(void (**)(uint64_t, uint64_t, void, void, float))(*(void *)v593 + 72LL))( v593,  1936749413LL,  0LL,  0LL,  v351);
              goto LABEL_759;
            case 0x73707473:
              v341 = (os_log_t *)sub_138E8(20);
              v342 = *v341;
              if (*v341 && os_log_type_enabled(*v341, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(v627[0].__pn_.__r_.__value_.__l.__data_) = v569;
                *(std::string::size_type *)((char *)v627[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RouteUtilities.cpp";
                WORD2(v627[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&v627[0].__pn_.__r_.__value_.__r.__words[1] + 6) = 347;
                _os_log_impl( &dword_0,  v342,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Getting Speaker Thiele-Small data From FDR",  (uint8_t *)v627,  0x12u);
              }

              sub_380024((uint64_t *)&v612);
              v343 = (const void *)v612;
              if ((void)v612)
              {
                v344 = (os_log_t *)sub_138E8(20);
                v345 = *v344;
                if (*v344 && os_log_type_enabled(*v344, OS_LOG_TYPE_DEFAULT))
                {
                  v346 = CFCopyDescription(v343);
                  sub_48188((uint64_t)&v629, v346);
                  if (v346) {
                    CFRelease(v346);
                  }
                  v347 = &v629;
                  if ((v629.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                    v347 = (std::string *)v629.__r_.__value_.__r.__words[0];
                  }
                  LODWORD(v627[0].__pn_.__r_.__value_.__l.__data_) = v565;
                  *(std::string::size_type *)((char *)v627[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RouteUtilities.cpp";
                  WORD2(v627[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&v627[0].__pn_.__r_.__value_.__r.__words[1] + 6) = 350;
                  WORD1(v627[0].__pn_.__r_.__value_.__r.__words[2]) = 2080;
                  *(std::string::size_type *)((char *)&v627[0].__pn_.__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v347;
                  _os_log_impl( &dword_0,  v345,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d FDR Speaker Thiele-Small data: %s",  (uint8_t *)v627,  0x1Cu);
                }

                sub_1FE270((uint64_t)v627, (int *)&v603);
                sub_59370((CFStringRef *)v583, "cfobject");
                CFRetain(v343);
                v627[1].__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v343;
                v629.__r_.__value_.__r.__words[0] = (std::string::size_type)v627;
                v629.__r_.__value_.__l.__size_ = 2LL;
                CFDictionaryRef v322 = sub_5A950((uint64_t)&v629);
                uint64_t v348 = 0LL;
                v605.__r_.__value_.__r.__words[0] = (std::string::size_type)v322;
                do
                {
                  v349 = *(std::string::pointer *)((char *)&v627[1].__pn_.__r_.__value_.__l.__data_ + v348);
                  if (v349) {
                    CFRelease(v349);
                  }
                  v350 = *(const void **)((char *)&v627[0].__pn_.__r_.__value_.__l.__cap_ + v348);
                  if (v350) {
                    CFRelease(v350);
                  }
                  v348 -= 16LL;
                }

                while (v348 != -32);
                if (v343) {
                  CFRelease(v343);
                }
                goto LABEL_748;
              }

              v372 = (os_log_t *)sub_138E8(20);
              v373 = *v372;
              if (*v372 && os_log_type_enabled(*v372, OS_LOG_TYPE_DEFAULT))
              {
                LODWORD(v627[0].__pn_.__r_.__value_.__l.__data_) = v569;
                *(std::string::size_type *)((char *)v627[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RouteUtilities.cpp";
                WORD2(v627[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&v627[0].__pn_.__r_.__value_.__r.__words[1] + 6) = 355;
                _os_log_impl( &dword_0,  v373,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d FDR doesn't have Speaker Thiele-Small data",  (uint8_t *)v627,  0x12u);
              }

LABEL_605:
              CFDictionaryRef v322 = 0LL;
              goto LABEL_748;
            case 0x7472696D:
              (*(void (**)(__int128 *__return_ptr, void, std::string::size_type))(**(void **)(v624.__r_.__value_.__r.__words[0] + 192)
                                                                                             + 288LL))( &v612,  *(void *)(v624.__r_.__value_.__r.__words[0] + 192),  v624.__r_.__value_.__r.__words[0]);
              v314 = (float *)*((void *)&v612 + 1);
              v313 = (float *)v612;
              if ((void)v612 == *((void *)&v612 + 1))
              {
                sub_2038A4((uint64_t *)v620, v311);
                v315 = (const __CFArray *)v620[0];
                if (v620[0]
                  && ((CFIndex Count = CFArrayGetCount((CFArrayRef)v620[0]), (v316 = (const __CFArray *)v620[0]) == 0LL)
                    ? (CFIndex v557 = 0LL)
                    : (CFIndex v557 = CFArrayGetCount((CFArrayRef)v620[0])),
                      Count))
                {
                  v313 = 0LL;
                  v314 = 0LL;
                  unint64_t v566 = 0LL;
                  unint64_t v374 = 0LL;
                  v556 = v315;
                  do
                  {
                    if (v315 == v316 && v374 == v557) {
                      break;
                    }
                    sub_2C9C4C(v627, v315, v374);
                    if (!v627[0].__pn_.__r_.__value_.__r.__words[0])
                    {
                      v520 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(v520, "Could not construct");
                    }

                    v375 = sub_8D6E0((const __CFDictionary *)v627[0].__pn_.__r_.__value_.__l.__data_, "trim_gain_db");
                    if (v375)
                    {
                      unint64_t v376 = sub_A15C8((uint64_t)v375);
                      if (HIDWORD(v376)) {
                        continue;
                      }
                    }

                    sub_8DEEC();
                    int v377 = v376;
                    if ((unint64_t)v314 >= v566)
                    {
                      uint64_t v378 = v314 - v313;
                      unint64_t v379 = v378 + 1;
                      uint64_t v380 = v566 - (void)v313;
                      else {
                        unint64_t v381 = v379;
                      }
                      if (v381) {
                        unint64_t v381 = (unint64_t)sub_7A890(v381);
                      }
                      else {
                        uint64_t v382 = 0LL;
                      }
                      v383 = (float *)(v381 + 4 * v378);
                      *(_DWORD *)v383 = v377;
                      v384 = v383 + 1;
                      while (v314 != v313)
                      {
                        int v385 = *((_DWORD *)v314-- - 1);
                        *((_DWORD *)v383-- - 1) = v385;
                      }

                      unint64_t v566 = v381 + 4 * v382;
                      if (v313) {
                        operator delete(v313);
                      }
                      v313 = v383;
                      v314 = v384;
                      uint64_t v251 = v571;
                      v315 = v556;
                    }

                    else
                    {
                      *(_DWORD *)v314++ = v376;
                    }

                    if (v627[0].__pn_.__r_.__value_.__r.__words[0]) {
                      CFRelease(v627[0].__pn_.__r_.__value_.__l.__data_);
                    }
                    ++v374;
                  }

                  while (v374 != Count);
                }

                else
                {
                  v313 = 0LL;
                  v314 = 0LL;
                }

                uint64_t v386 = sub_138E8(13);
                if ((*(_BYTE *)(v386 + 8) & 1) != 0)
                {
                  v387 = *(os_log_s **)v386;
                  if (*(void *)v386)
                  {
                    if (os_log_type_enabled(*(os_log_t *)v386, OS_LOG_TYPE_DEBUG))
                    {
                      sub_2029E8(&v629, v313, v314);
                      v388 = &v629;
                      if ((v629.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                        v388 = (std::string *)v629.__r_.__value_.__r.__words[0];
                      }
                      LODWORD(v627[0].__pn_.__r_.__value_.__l.__data_) = v565;
                      *(std::string::size_type *)((char *)v627[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"PortUtilities.cpp";
                      WORD2(v627[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&v627[0].__pn_.__r_.__value_.__r.__words[1] + 6) = 164;
                      WORD1(v627[0].__pn_.__r_.__value_.__r.__words[2]) = 2080;
                      *(std::string::size_type *)((char *)&v627[0].__pn_.__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v388;
                      _os_log_impl( &dword_0,  v387,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d FDR Sorted TrimGains Vector: %s",  (uint8_t *)v627,  0x1Cu);
                    }
                  }
                }

                if (v620[0]) {
                  CFRelease(v620[0]);
                }
                if ((void)v612)
                {
                  *((void *)&v612 + 1) = v612;
                  operator delete((void *)v612);
                }
              }

              CFDataRef v389 = CFDataCreate(0LL, (const UInt8 *)v313, (char *)v314 - (char *)v313);
              if (!v389)
              {
                v528 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v528, "Could not construct");
              }

              sub_14591C(&v612, v389);
              sub_1FE270((uint64_t)v627, (int *)&v603);
              sub_1FE340(v583, (const void **)&v612);
              v629.__r_.__value_.__r.__words[0] = (std::string::size_type)v627;
              v629.__r_.__value_.__l.__size_ = 2LL;
              CFDictionaryRef v322 = sub_5A950((uint64_t)&v629);
              uint64_t v390 = 0LL;
              v605.__r_.__value_.__r.__words[0] = (std::string::size_type)v322;
              do
              {
                v391 = *(std::string::pointer *)((char *)&v627[1].__pn_.__r_.__value_.__l.__data_ + v390);
                if (v391) {
                  CFRelease(v391);
                }
                v392 = *(const void **)((char *)&v627[0].__pn_.__r_.__value_.__l.__cap_ + v390);
                if (v392) {
                  CFRelease(v392);
                }
                v390 -= 16LL;
              }

              while (v390 != -32);
              if ((void)v612) {
                CFRelease((CFTypeRef)v612);
              }
              if (!v313) {
                goto LABEL_748;
              }
              v371 = v313;
LABEL_747:
              operator delete(v371);
              goto LABEL_748;
          }

LABEL_657:
          v352 = (os_log_t *)sub_138E8(24);
          os_log_t v353 = *v352;
          if (*v352 && os_log_type_enabled(*v352, OS_LOG_TYPE_ERROR))
          {
            sub_2CA1C(&v629, v256);
            v354 = &v629;
            if ((v629.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              v354 = (std::string *)v629.__r_.__value_.__r.__words[0];
            }
            LODWORD(v627[0].__pn_.__r_.__value_.__l.__data_) = v565;
            *(std::string::size_type *)((char *)v627[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RouteUtilities.cpp";
            WORD2(v627[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&v627[0].__pn_.__r_.__value_.__r.__words[1] + 6) = 378;
            WORD1(v627[0].__pn_.__r_.__value_.__r.__words[2]) = 2080;
            *(std::string::size_type *)((char *)&v627[0].__pn_.__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v354;
            v355 = v353;
            v356 = "%25s:%-5d Unsupported device specific property: %s";
            uint32_t v357 = 28;
LABEL_684:
            _os_log_impl(&dword_0, v355, OS_LOG_TYPE_ERROR, v356, (uint8_t *)v627, v357);
            goto LABEL_759;
          }

          goto LABEL_759;
        }

        if ((int)v256 <= 64002)
        {
          if ((_DWORD)v256 == 1)
          {
            if ((*(unsigned int (**)(uint64_t))(*(void *)v593 + 152LL))(v593) == 1936747629)
            {
              float v324 = sub_200CDC(v311);
              (*(void (**)(uint64_t, uint64_t, void, void, float))(*(void *)v593 + 72LL))( v593,  1LL,  0LL,  0LL,  v324);
            }

            else
            {
              v365 = (os_log_t *)sub_138E8(20);
              os_log_t v366 = *v365;
              if (*v365 && os_log_type_enabled(*v365, OS_LOG_TYPE_ERROR))
              {
                uint64_t v367 = (*(uint64_t (**)(uint64_t))(*(void *)v593 + 152LL))(v593);
                sub_2CA1C(&v629, v367);
                v368 = &v629;
                if ((v629.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  v368 = (std::string *)v629.__r_.__value_.__r.__words[0];
                }
                LODWORD(v627[0].__pn_.__r_.__value_.__l.__data_) = v561;
                *(std::string::size_type *)((char *)v627[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RouteUtilities.cpp";
                WORD2(v627[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&v627[0].__pn_.__r_.__value_.__r.__words[1] + 6) = 255;
                WORD1(v627[0].__pn_.__r_.__value_.__r.__words[2]) = 1024;
                HIDWORD(v627[0].__pn_.__r_.__value_.__r.__words[2]) = 1;
                LOWORD(v627[1].__pn_.__r_.__value_.__l.__data_) = 2080;
                *(std::string::size_type *)((char *)v627[1].__pn_.__r_.__value_.__r.__words + 2) = (std::string::size_type)v368;
                v355 = v366;
                v356 = "%25s:%-5d No known process for collecting port specific data for parameter %d on processor type %s";
                uint32_t v357 = 34;
                goto LABEL_684;
              }
            }

LABEL_759:
            v397 = (std::__shared_weak_count *)v624.__r_.__value_.__l.__size_;
            if (v624.__r_.__value_.__l.__size_)
            {
              v398 = (unint64_t *)(v624.__r_.__value_.__l.__size_ + 8);
              do
                unint64_t v399 = __ldaxr(v398);
              while (__stlxr(v399 - 1, v398));
              if (!v399)
              {
                ((void (*)(std::__shared_weak_count *))v397->__on_zero_shared)(v397);
                std::__shared_weak_count::__release_weak(v397);
              }
            }

            goto LABEL_764;
          }

          if ((_DWORD)v256 != 64001) {
            goto LABEL_657;
          }
        }

        else
        {
          if ((_DWORD)v256 == 64003)
          {
LABEL_600:
            LODWORD(v620[0]) = 0;
            if (*(_DWORD *)(v624.__r_.__value_.__r.__words[0] + 148) == 1885544823)
            {
              unint64_t v323 = sub_1FE3D0(1885544823, *(void *)(v624.__r_.__value_.__r.__words[0] + 192));
              if (HIDWORD(v323)) {
                LODWORD(v620[0]) = v323;
              }
            }

            if ((_DWORD)v256 != 64003)
            {
              CFDataRef v358 = CFDataCreate(0LL, (const UInt8 *)v620, 4LL);
              if (!v358)
              {
                v529 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v529, "Could not construct");
              }

              sub_14591C(&v612, v358);
              sub_1FE270((uint64_t)v627, (int *)&v603);
              sub_1FE340(v583, (const void **)&v612);
              v629.__r_.__value_.__r.__words[0] = (std::string::size_type)v627;
              v629.__r_.__value_.__l.__size_ = 2LL;
              CFDictionaryRef v322 = sub_5A950((uint64_t)&v629);
              uint64_t v359 = 0LL;
              v605.__r_.__value_.__r.__words[0] = (std::string::size_type)v322;
              do
              {
                v360 = *(std::string::pointer *)((char *)&v627[1].__pn_.__r_.__value_.__l.__data_ + v359);
                if (v360) {
                  CFRelease(v360);
                }
                v361 = *(const void **)((char *)&v627[0].__pn_.__r_.__value_.__l.__cap_ + v359);
                if (v361) {
                  CFRelease(v361);
                }
                v359 -= 16LL;
              }

              while (v359 != -32);
              if ((void)v612) {
                CFRelease((CFTypeRef)v612);
              }
              goto LABEL_748;
            }

            (*(void (**)(uint64_t, uint64_t, const void **, uint64_t, void, void))(*(void *)v593 + 56LL))( v593,  64003LL,  v620,  4LL,  0LL,  0LL);
            goto LABEL_605;
          }

          if ((_DWORD)v256 != 1668641398)
          {
            if ((_DWORD)v256 == 1751935092)
            {
              v310.n128_u32[0] = 1174423552;
              if (*(_DWORD *)(v624.__r_.__value_.__r.__words[0] + 148) == 1885544823)
              {
                unint64_t v312 = sub_1FE3D0(1885544823, *(void *)(v624.__r_.__value_.__r.__words[0] + 192));
                if (!HIDWORD(v312) || !(_DWORD)v312) {
                  goto LABEL_759;
                }
                v310.n128_f32[0] = (float)v312;
              }

              (*(void (**)(uint64_t, uint64_t, void, void, __n128))(*(void *)v593 + 72LL))( v593,  1751935092LL,  0LL,  0LL,  v310);
              goto LABEL_759;
            }

            goto LABEL_657;
          }
        }

        sub_2012E0((CFDictionaryRef *)&v612, (uint64_t)v624.__r_.__value_.__l.__data_);
        sub_200F50(v311);
        v317 = (os_log_t *)sub_138E8(20);
        v318 = *v317;
        if (*v317 && os_log_type_enabled(*v317, OS_LOG_TYPE_DEFAULT))
        {
          v319 = CFCopyDescription((CFTypeRef)v612);
          sub_48188((uint64_t)&v629, v319);
          if (v319) {
            CFRelease(v319);
          }
          v320 = &v629;
          if ((v629.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            v320 = (std::string *)v629.__r_.__value_.__r.__words[0];
          }
          LODWORD(v627[0].__pn_.__r_.__value_.__l.__data_) = v565;
          *(std::string::size_type *)((char *)v627[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RouteUtilities.cpp";
          WORD2(v627[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&v627[0].__pn_.__r_.__value_.__r.__words[1] + 6) = 279;
          WORD1(v627[0].__pn_.__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&v627[0].__pn_.__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v320;
          _os_log_impl( &dword_0,  v318,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Headset volume curve: %s",  (uint8_t *)v627,  0x1Cu);
        }

        if ((_DWORD)v256 == 64001)
        {
          v321 = (const void *)v612;
          v627[0].__pn_.__r_.__value_.__r.__words[0] = v612;
          (*(void (**)(uint64_t, uint64_t, std::__fs::filesystem::path *, uint64_t, void, void))(*(void *)v593 + 56LL))( v593,  64001LL,  v627,  8LL,  0LL,  0LL);
          CFDictionaryRef v322 = 0LL;
          if (!v321)
          {
LABEL_748:
            if (v322)
            {
              v393 = (os_log_t *)sub_138E8(20);
              v394 = *v393;
              if (*v393 && os_log_type_enabled(*v393, OS_LOG_TYPE_DEFAULT))
              {
                sub_2CA1C(&v629, v603);
                v395 = &v629;
                if ((v629.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  v395 = (std::string *)v629.__r_.__value_.__r.__words[0];
                }
                LODWORD(v627[0].__pn_.__r_.__value_.__l.__data_) = v565;
                *(std::string::size_type *)((char *)v627[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RouteUtilities.cpp";
                WORD2(v627[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&v627[0].__pn_.__r_.__value_.__r.__words[1] + 6) = 384;
                WORD1(v627[0].__pn_.__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&v627[0].__pn_.__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v395;
                _os_log_impl( &dword_0,  v394,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Setting property %s on the DSP Processor instance",  (uint8_t *)v627,  0x1Cu);
              }

              sub_2DC034((uint64_t)&v612, v322);
              LODWORD(v629.__r_.__value_.__l.__data_) = 1735553138;
              sub_2DC450((uint64_t)p_size, (uint64_t)&v612);
              sub_149710((uint64_t)v627, (int *)&v629, 1LL);
              sub_2DBF5C((uint64_t)p_size);
              sub_2DBF5C((uint64_t)&v612);
              sub_1FD148((uint64_t)v627, v593);
              sub_D0C4C((void *)v627[0].__pn_.__r_.__value_.__l.__cap_);
              v396 = (void *)v627[0].__pn_.__r_.__value_.__r.__words[0];
              v627[0].__pn_.__r_.__value_.__r.__words[0] = 0LL;
              if (v396) {
                operator delete(v396);
              }
              if (v605.__r_.__value_.__r.__words[0]) {
                CFRelease(v605.__r_.__value_.__l.__data_);
              }
            }

            goto LABEL_759;
          }
        }

        else
        {
          sub_1FE270((uint64_t)v627, (int *)&v603);
          sub_1FE388(v583, (const void **)&v612);
          v629.__r_.__value_.__r.__words[0] = (std::string::size_type)v627;
          v629.__r_.__value_.__l.__size_ = 2LL;
          CFDictionaryRef v322 = sub_5A950((uint64_t)&v629);
          uint64_t v362 = 0LL;
          v605.__r_.__value_.__r.__words[0] = (std::string::size_type)v322;
          do
          {
            v363 = *(std::string::pointer *)((char *)&v627[1].__pn_.__r_.__value_.__l.__data_ + v362);
            if (v363) {
              CFRelease(v363);
            }
            v364 = *(const void **)((char *)&v627[0].__pn_.__r_.__value_.__l.__cap_ + v362);
            if (v364) {
              CFRelease(v364);
            }
            v362 -= 16LL;
          }

          while (v362 != -32);
          v321 = (const void *)v612;
          if (!(void)v612) {
            goto LABEL_748;
          }
        }

        CFRelease(v321);
        goto LABEL_748;
      }
    }

LABEL_772:
    v400 = (void **)*v570;
    v401 = (void **)v570[1];
    while (v400 != v401)
    {
      v402 = *v400;
      if (!*v400)
      {
        v515 = (os_log_t *)sub_138E8(13);
        v516 = *v515;
        if (*v515 && os_log_type_enabled(*v515, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(v627, v580);
          v517 = (v627[0].__pn_.__r_.__value_.__s.__size_ & 0x80u) == 0
               ? v627
               : (std::__fs::filesystem::path *)v627[0].__pn_.__r_.__value_.__r.__words[0];
          *(_DWORD *)v637 = v565;
          *(void *)&v637[4] = "RouteUtilities.cpp";
          *(_WORD *)&v637[12] = 1024;
          *(_DWORD *)&v637[14] = 628;
          *(_WORD *)&v637[18] = 2080;
          *(void *)&v637[20] = v517;
          _os_log_impl( &dword_0,  v516,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [config is NULL]: Routing database error: NULL configuration in l ist of configs for processor of type '%s'",  v637,  0x1Cu);
        }

        v518 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error( v518,  "Routing database error: NULL configuration in list of configs for processor of type '%s'");
      }

      v403 = sub_D01B4(*v400, 1685090932);
      if (v403)
      {
        uint64_t v404 = sub_2DCA7C((int *)v403 + 6);
        if (v580 != (_DWORD)v404)
        {
          v405 = (os_log_t *)sub_138E8(13);
          v406 = *v405;
          if (*v405)
          {
            if (os_log_type_enabled(*v405, OS_LOG_TYPE_ERROR))
            {
              sub_2CA1C(v627, v404);
              int v407 = (char)v627[0].__pn_.__r_.__value_.__s.__size_;
              std::string::size_type v408 = v627[0].__pn_.__r_.__value_.__r.__words[0];
              sub_2CA1C(&v633, v580);
              v409 = v627;
              if (v407 < 0) {
                v409 = (std::__fs::filesystem::path *)v408;
              }
              v410 = &v633;
              if ((v633.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                v410 = (std::string *)v633.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)v637 = v574;
              *(void *)&v637[4] = "RouteUtilities.cpp";
              *(_WORD *)&v637[12] = 1024;
              *(_DWORD *)&v637[14] = 636;
              *(_WORD *)&v637[18] = 2048;
              *(void *)&v637[20] = v402;
              *(_WORD *)&v637[28] = 2080;
              *(void *)&v637[30] = v409;
              *(_WORD *)&v637[38] = 2080;
              *(void *)&v637[40] = v410;
              _os_log_impl( &dword_0,  v406,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Type for config at %p ('%s') does not match master config's type ('%s')",  v637,  0x30u);
            }
          }
        }
      }

      v411 = sub_D01B4(v402, 1685086576);
      if (v411)
      {
        int v414 = *((_DWORD *)v411 + 6);
        v412 = (int *)(v411 + 3);
        int v413 = v414;
        if (v414 == 15)
        {
          for (uint64_t j = *(float **)(sub_2DD064(v412) + 16); j; uint64_t j = *(float **)j)
          {
            uint64_t v416 = *((unsigned int *)j + 4);
            float v417 = sub_2DCB78(j + 6);
            (*(void (**)(uint64_t, uint64_t, void, void, float))(*(void *)v593 + 72LL))( v593,  v416,  0LL,  0LL,  v417);
          }
        }

        else if (v413 == 13)
        {
          *(void *)v637 = sub_2DCE6C(v412);
          (*(void (**)(uint64_t, _BYTE *))(*(void *)v593 + 96LL))(v593, v637);
        }
      }

      ++v400;
    }

    v418 = sub_D01B4(v579, 1684171107);
    if (v418)
    {
      uint64_t v419 = sub_2DCA7C((int *)v418 + 6);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v593 + 232LL))(v593, 1LL, v419);
    }

    v420 = sub_D01B4(v579, 1684172643);
    if (v420)
    {
      uint64_t v421 = sub_2DCA7C((int *)v420 + 6);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v593 + 232LL))(v593, 2LL, v421);
    }

    v422 = sub_D01B4(v579, 1685088623);
    if (v422)
    {
      for (unsigned int k = *(int **)(sub_2DD064((int *)v422 + 6) + 16); k; unsigned int k = *(int **)k)
      {
        uint64_t v424 = k[4];
        v425 = (void *)sub_2DD25C(k + 6);
        if (v425[2] != 2LL)
        {
          v426 = (os_log_t *)sub_138E8(13);
          v427 = *v426;
          if (*v426)
          {
            if (os_log_type_enabled(*v426, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v637 = v569;
              *(void *)&v637[4] = "RouteUtilities.cpp";
              *(_WORD *)&v637[12] = 1024;
              *(_DWORD *)&v637[14] = 694;
              _os_log_impl( &dword_0,  v427,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Invalid channel list size",  v637,  0x12u);
            }
          }
        }

        uint64_t v428 = sub_2DCA7C((int *)(v425[1] + 16LL));
        uint64_t v429 = sub_2DCA7C((int *)(*v425 + 16LL));
        if ((_DWORD)v428) {
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v593 + 240LL))(v593, 1LL, v424, v428);
        }
        if ((_DWORD)v429) {
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v593 + 240LL))(v593, 2LL, v424, v429);
        }
      }
    }

    v430 = sub_D01B4(v579, 1970496883);
    if (v430)
    {
      uint64_t v431 = sub_2DCD70((int *)v430 + 6);
      if (v431)
      {
        if (v598)
        {
          if (v596 != (void *)v431)
          {
            int v597 = *(_DWORD *)(v431 + 32);
            sub_85088(v596, *(uint64_t **)(v431 + 16));
          }
        }

        else
        {
          sub_8427C((uint64_t)v596, v431);
          char v598 = 1;
        }
      }
    }

    uint64_t v432 = *v573;
    if (*v573)
    {
      uint64_t v586 = v593;
      v587 = v594;
      if (v594)
      {
        v433 = (unint64_t *)&v594->__shared_owners_;
        do
          unint64_t v434 = __ldxr(v433);
        while (__stxr(v434 + 1, v433));
      }

      int v435 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v432 + 24LL))(v432, &v586);
      int v436 = v435;
      v437 = v587;
      if (!v587) {
        goto LABEL_823;
      }
      v438 = (unint64_t *)&v587->__shared_owners_;
      do
        unint64_t v439 = __ldaxr(v438);
      while (__stlxr(v439 - 1, v438));
      if (!v439)
      {
        ((void (*)(std::__shared_weak_count *))v437->__on_zero_shared)(v437);
        std::__shared_weak_count::__release_weak(v437);
        if (!v436) {
          goto LABEL_828;
        }
      }

      else
      {
LABEL_823:
        if (!v435) {
          goto LABEL_828;
        }
      }

      v440 = (os_log_t *)sub_138E8(20);
      v441 = *v440;
      if (*v440 && os_log_type_enabled(*v440, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v637 = v565;
        *(void *)&v637[4] = "RouteUtilities.cpp";
        *(_WORD *)&v637[12] = 1024;
        *(_DWORD *)&v637[14] = 727;
        *(_WORD *)&v637[18] = 1024;
        *(_DWORD *)&v637[20] = v436;
        _os_log_impl(&dword_0, v441, OS_LOG_TYPE_ERROR, "%25s:%-5d Error %u adding DSP processor", v637, 0x18u);
      }
    }

LABEL_828:
    v442 = v594;
    if (v594)
    {
      v443 = (unint64_t *)&v594->__shared_owners_;
      do
        unint64_t v444 = __ldaxr(v443);
      while (__stlxr(v444 - 1, v443));
      if (!v444)
      {
        ((void (*)(std::__shared_weak_count *))v442->__on_zero_shared)(v442);
        std::__shared_weak_count::__release_weak(v442);
      }
    }

    unint64_t v143 = (void ***)(v570 + 3);
  }

  while (v570 + 3 != v562);
  uint64_t v456 = *v573;
  if (*v573)
  {
    memset(&v629, 0, sizeof(v629));
    sub_8420C((char *)&v629, (uint64_t *)v585, v144, (uint64_t)((uint64_t)v144 - v585) >> 3);
    std::string::size_type v457 = *(void *)(v456 + 16);
    v627[0].__pn_.__r_.__value_.__r.__words[0] = *(void *)(v456 + 8);
    v627[0].__pn_.__r_.__value_.__l.__size_ = v457;
    if (v457)
    {
      v458 = (unint64_t *)(v457 + 16);
      do
        unint64_t v459 = __ldxr(v458);
      while (__stxr(v459 + 1, v458));
    }

    memset(&v627[0].__pn_.__r_.__value_.__r.__words[2], 0, sizeof(std::__fs::filesystem::path));
    sub_8420C( &v627[0].__pn_.__r_.__value_.__s.__data_[16],  (uint64_t *)v629.__r_.__value_.__l.__data_,  (uint64_t *)v629.__r_.__value_.__l.__size_,  (uint64_t)(v629.__r_.__value_.__l.__size_ - v629.__r_.__value_.__r.__words[0]) >> 3);
    v634 = 0LL;
    v460 = (char *)operator new(0x30uLL);
    *(void *)v460 = &off_473E00;
    __int128 v461 = *(_OWORD *)&v627[0].__pn_.__r_.__value_.__r.__words[2];
    *(_OWORD *)(v460 + 8) = *(_OWORD *)&v627[0].__pn_.__r_.__value_.__l.__data_;
    *(_OWORD *)&v627[0].__pn_.__r_.__value_.__l.__data_ = 0uLL;
    *(_OWORD *)(v460 + 24) = v461;
    *((void *)v460 + 5) = v627[1].__pn_.__r_.__value_.__l.__size_;
    memset(&v627[0].__pn_.__r_.__value_.__r.__words[2], 0, sizeof(std::__fs::filesystem::path));
    v634 = (std::string *)v460;
    v462 = (std::__shared_weak_count *)operator new(0x88uLL);
    *(_OWORD *)&v462->__shared_owners_ = 0u;
    v463 = (unint64_t *)&v462->__shared_owners_;
    v462->__vftable = (std::__shared_weak_count_vtbl *)off_47A850;
    v462[1].__vftable = (std::__shared_weak_count_vtbl *)off_47A7A0;
    v464 = v462 + 1;
    *(_OWORD *)&v462[1].__shared_owners_ = 0u;
    v465 = v462 + 2;
    if (*(char *)(v456 + 735) < 0)
    {
      sub_24054(v465, *(void **)(v456 + 712), *(void *)(v456 + 720));
      v460 = (char *)v634;
      if (!v634)
      {
        v468 = (std::string **)&v462[4];
        goto LABEL_855;
      }

      v467 = &v462[4].__vftable;
      if (v634 == &v633)
      {
        void *v467 = v462 + 3;
        (*(void (**)(std::string *))(v633.__r_.__value_.__r.__words[0] + 24))(&v633);
LABEL_856:
        v469 = &off_47A7F8;
        LODWORD(v462[4].__shared_owners_) = 0;
        if (!v558) {
          v469 = &off_47A7E0;
        }
        *(_OWORD *)&v462[4].__shared_weak_owners_ = *(_OWORD *)v469;
        v462[5].__shared_owners_ = (uint64_t)v469[2];
        *(void *)&__int128 v607 = v462 + 1;
        *((void *)&v607 + 1) = v462;
        shared_weak_owners = (std::__shared_weak_count *)v462[1].__shared_weak_owners_;
        if (shared_weak_owners)
        {
          if (shared_weak_owners->__shared_owners_ != -1) {
            goto LABEL_871;
          }
          do
            unint64_t v471 = __ldxr(v463);
          while (__stxr(v471 + 1, v463));
          v472 = (unint64_t *)&v462->__shared_weak_owners_;
          do
            unint64_t v473 = __ldxr(v472);
          while (__stxr(v473 + 1, v472));
          v462[1].__shared_owners_ = (uint64_t)v464;
          v462[1].__shared_weak_owners_ = (uint64_t)v462;
          std::__shared_weak_count::__release_weak(shared_weak_owners);
        }

        else
        {
          do
            unint64_t v474 = __ldxr(v463);
          while (__stxr(v474 + 1, v463));
          v475 = (unint64_t *)&v462->__shared_weak_owners_;
          do
            unint64_t v476 = __ldxr(v475);
          while (__stxr(v476 + 1, v475));
          v462[1].__shared_owners_ = (uint64_t)v464;
          v462[1].__shared_weak_owners_ = (uint64_t)v462;
        }

        do
          unint64_t v477 = __ldaxr(v463);
        while (__stlxr(v477 - 1, v463));
        if (!v477)
        {
          ((void (*)(std::__shared_weak_count *))v462->__on_zero_shared)(v462);
          std::__shared_weak_count::__release_weak(v462);
        }

LABEL_871:
        __int128 v478 = v607;
        __int128 v612 = v607;
        __int128 v607 = 0uLL;
        v480 = *(_OWORD **)(v456 + 344);
        unint64_t v479 = *(void *)(v456 + 352);
        if ((unint64_t)v480 >= v479)
        {
          __int128 v583 = v478;
          uint64_t v482 = *(void *)(v456 + 336);
          uint64_t v483 = ((uint64_t)v480 - v482) >> 4;
          uint64_t v484 = v479 - v482;
          uint64_t v485 = v484 >> 3;
          else {
            unint64_t v486 = v485;
          }
          *(void *)&v637[32] = v456 + 352;
          v487 = (char *)sub_7BE90(v486);
          v489 = &v487[16 * v483];
          *(_OWORD *)v489 = v583;
          __int128 v612 = 0uLL;
          v491 = *(void **)(v456 + 336);
          v490 = *(void **)(v456 + 344);
          if (v490 == v491)
          {
            int64x2_t v494 = vdupq_n_s64((unint64_t)v490);
            v492 = &v487[16 * v483];
          }

          else
          {
            v492 = &v487[16 * v483];
            do
            {
              __int128 v493 = *((_OWORD *)v490 - 1);
              v490 -= 2;
              *((_OWORD *)v492 - 1) = v493;
              v492 -= 16;
              void *v490 = 0LL;
              v490[1] = 0LL;
            }

            while (v490 != v491);
            int64x2_t v494 = *(int64x2_t *)(v456 + 336);
          }

          v481 = v489 + 16;
          *(void *)(v456 + 336) = v492;
          *(void *)(v456 + 344) = v489 + 16;
          *(int64x2_t *)&v637[8] = v494;
          uint64_t v495 = *(void *)(v456 + 352);
          *(void *)(v456 + 352) = &v487[16 * v488];
          *(void *)&v637[24] = v495;
          *(void *)v637 = v494.i64[0];
          sub_A0D64((uint64_t)v637);
        }

        else
        {
          _OWORD *v480 = v478;
          v481 = v480 + 1;
          __int128 v612 = 0uLL;
        }

        *(void *)(v456 + 344) = v481;
        v496 = v634;
        if (v634 == &v633)
        {
          uint64_t v497 = 4LL;
          v496 = &v633;
        }

        else
        {
          if (!v634)
          {
LABEL_895:
            if (v627[0].__pn_.__r_.__value_.__l.__cap_) {
              operator delete((void *)v627[0].__pn_.__r_.__value_.__l.__cap_);
            }
            if (v627[0].__pn_.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v627[0].__pn_.__r_.__value_.__l.__size_);
            }
            if (v629.__r_.__value_.__r.__words[0]) {
              operator delete(v629.__r_.__value_.__l.__data_);
            }
            uint64_t v456 = *v573;
LABEL_902:
            CFTypeRef v498 = v595;
            if (v595)
            {
              v499 = *(const void **)(v456 + 1072);
              *(void *)(v456 + 1072) = v595;
              CFRetain(v498);
              if (v499) {
                CFRelease(v499);
              }
              uint64_t v456 = *v573;
            }

            std::string::operator=((std::string *)(v456 + 744), (const std::string *)(v559 + 144));
            uint64_t v500 = *v573;
            if ((void *)(*v573 + 768) != v584)
            {
              sub_1FE510((uint64_t *)(*v573 + 768), (void *)v584[1], v584);
              uint64_t v500 = *v573;
            }

            v501 = v553;
            if (v598 && (void *)(v500 + 1000) != v596)
            {
              *(_DWORD *)(v500 + 1032) = v597;
              sub_85088((void *)(v500 + 1000), (uint64_t *)v596[2]);
              uint64_t v500 = *v573;
              v501 = v553;
            }

            char v502 = 0;
            int v503 = *v501;
            if (v503 > 1919776354)
            {
              if (v503 > 1987081832)
              {
                if (v503 == 1987081833) {
                  goto LABEL_925;
                }
                unsigned __int16 v505 = 30319;
              }

              else
              {
                if (v503 == 1919776355) {
                  goto LABEL_925;
                }
                unsigned __int16 v505 = 26467;
              }

              int v504 = v505 | 0x76700000;
            }

            else
            {
              if (v503 <= 1768779618)
              {
                if (v503 != 1735222132)
                {
                  int v504 = 1768057203;
                  goto LABEL_923;
                }

LABEL_925:
                *(_BYTE *)(v500 + 798) = v502;
                uint64_t v506 = sub_138E8(24);
                if ((*(_BYTE *)(v506 + 8) & 1) != 0)
                {
                  v507 = *(os_log_s **)v506;
                  if (*(void *)v506)
                  {
                    if (os_log_type_enabled(*(os_log_t *)v506, OS_LOG_TYPE_DEBUG))
                    {
                      uint64_t v508 = sub_2B8B8(*v573);
                      v509 = v627;
                      sub_2CC00(&v627[0].__pn_, v508);
                      if ((v627[0].__pn_.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                        v509 = (std::__fs::filesystem::path *)v627[0].__pn_.__r_.__value_.__r.__words[0];
                      }
                      uint64_t v510 = sub_2B940(*v573);
                      sub_2CC00(&v633, v510);
                      int v511 = (char)v633.__r_.__value_.__s.__size_;
                      std::string::size_type v512 = v633.__r_.__value_.__r.__words[0];
                      sub_2BE2C(&v629, *v573);
                      v513 = &v633;
                      if (v511 < 0) {
                        v513 = (std::string *)v512;
                      }
                      if ((v629.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                        v514 = &v629;
                      }
                      else {
                        v514 = (std::string *)v629.__r_.__value_.__r.__words[0];
                      }
                      *(_DWORD *)v637 = 136316162;
                      *(void *)&v637[4] = "RouteUtilities.cpp";
                      *(_WORD *)&v637[12] = 1024;
                      *(_DWORD *)&v637[14] = 771;
                      *(_WORD *)&v637[18] = 2080;
                      *(void *)&v637[20] = v509;
                      *(_WORD *)&v637[28] = 2080;
                      *(void *)&v637[30] = v513;
                      *(_WORD *)&v637[38] = 2080;
                      *(void *)&v637[40] = v514;
                      _os_log_impl( &dword_0,  v507,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Created a DSP chain with input format: %s and output format: %s \n %s",  v637,  0x30u);
                    }
                  }
                }

                goto LABEL_941;
              }

              if (v503 == 1768779619) {
                goto LABEL_925;
              }
              int v504 = 1768781411;
            }

LABEL_923:
            if (v503 != v504) {
              char v502 = 1;
            }
            goto LABEL_925;
          }

          uint64_t v497 = 5LL;
        }

        (*(void (**)(void))(v496->__r_.__value_.__r.__words[0] + 8 * v497))();
        goto LABEL_895;
      }
    }

    else
    {
      std::__shared_count v466 = *(std::__shared_count *)(v456 + 712);
      v462[2].__shared_weak_owners_ = *(void *)(v456 + 728);
      v465->std::__shared_count = v466;
      v467 = &v462[4].__vftable;
    }

    v468 = &v634;
    void *v467 = v460;
LABEL_855:
    *v468 = 0LL;
    goto LABEL_856;
  }

LABEL_941:
  if (v595) {
    CFRelease(v595);
  }
  if (v598) {
    sub_83284((uint64_t)v596);
  }
  if ((void)v585) {
    operator delete((void *)v585);
  }
}

void sub_1FC418(_Unwind_Exception *a1)
{
  if (*(_BYTE *)(v1 + 504)) {
    sub_83284(v1 + 464);
  }
  uint64_t v3 = *(void **)(v1 + 368);
  if (v3) {
    operator delete(v3);
  }
  sub_7A768(*(void *)(v1 + 248));
  _Unwind_Resume(a1);
}

uint64_t sub_1FD148(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(uint64_t ***)(result + 16);
  if (v3)
  {
    while (1)
    {
      uint64_t v5 = *((unsigned int *)v3 + 4);
      sub_2DC450((uint64_t)v56, (uint64_t)(v3 + 3));
      int v6 = v56[0];
      __int128 v7 = (os_log_t *)sub_138E8(24);
      unsigned int v8 = *v7;
      if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v9 = v2;
        sub_2CA1C(v64, v5);
        int v10 = SHIBYTE(v65);
        unint64_t v11 = (void **)v64[0];
        sub_151FB8(&__p, (uint64_t)v56);
        unint64_t v12 = v64;
        if (v10 < 0) {
          unint64_t v12 = v11;
        }
        p_p = &__p;
        if (v62 < 0) {
          p_p = (void **)__p;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "RouteUtilities.cpp";
        __int16 v67 = 1024;
        *(_DWORD *)unint64_t v68 = 125;
        *(_WORD *)&v68[4] = 2080;
        *(void *)&v68[6] = v12;
        __int16 v69 = 2080;
        int64_t v70 = p_p;
        _os_log_impl(&dword_0, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting property %s = %s", buf, 0x26u);
        if (SHIBYTE(v62) < 0) {
          operator delete(__p);
        }
        uint64_t v2 = v9;
        if (SHIBYTE(v65) < 0) {
          operator delete(v64[0]);
        }
      }

      switch(v6)
      {
        case 7:
          *(_DWORD *)AudioObjectPropertyAddress buf = sub_2DCA7C(v56);
          (*(void (**)(uint64_t, uint64_t, _BYTE *, uint64_t, void, void))(*(void *)a2 + 56LL))( a2,  v5,  buf,  4LL,  0LL,  0LL);
          goto LABEL_111;
        case 13:
          *(void *)AudioObjectPropertyAddress buf = sub_2DCE6C(v56);
          (*(void (**)(uint64_t, uint64_t, _BYTE *, uint64_t, void, void))(*(void *)a2 + 56LL))( a2,  v5,  buf,  8LL,  0LL,  0LL);
          goto LABEL_111;
        case 14:
          *(void *)AudioObjectPropertyAddress buf = sub_2DCF68(v56);
          (*(void (**)(uint64_t, uint64_t, _BYTE *, uint64_t, void, void))(*(void *)a2 + 56LL))( a2,  v5,  buf,  8LL,  0LL,  0LL);
          goto LABEL_111;
        case 16:
          uint64_t v16 = sub_2DD25C(v56);
          sub_1FE1EC(&v53, v16);
          if (!v55)
          {
            char v27 = (os_log_t *)sub_138E8(24);
            unint64_t v28 = *v27;
            if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "RouteUtilities.cpp";
              __int16 v67 = 1024;
              *(_DWORD *)unint64_t v68 = 186;
              _os_log_impl(&dword_0, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d DSP property list is empty.", buf, 0x12u);
            }

            goto LABEL_110;
          }

          sub_2DC450((uint64_t)v52, (uint64_t)(v54 + 2));
          int v17 = v52[0];
          switch(v52[0])
          {
            case 7:
              v71[0] = &off_475B80;
              unint64_t v72 = v71;
              __int128 __p = 0LL;
              unsigned int v61 = 0LL;
              uint64_t v62 = 0LL;
              int v31 = v54;
              unint64_t v32 = &v53;
              if (v54 != &v53)
              {
                do
                {
                  sub_2DC450((uint64_t)buf, (uint64_t)(v31 + 2));
                  if (!v72) {
                    sub_82CEC();
                  }
                  (*(void (**)(void *, _BYTE *, void **))(*v72 + 48LL))(v72, buf, &__p);
                  sub_2DBF5C((uint64_t)buf);
                  int v31 = (uint64_t *)v31[1];
                }

                while (v31 != &v53);
                unint64_t v32 = v54;
              }

              sub_7D084(v57, "valuelist: ");
              while (v32 != &v53)
              {
                *(_OWORD *)uint64_t v64 = *(_OWORD *)v57;
                unint64_t v65 = v57[2];
                memset(v57, 0, sizeof(v57));
                sub_2DC450((uint64_t)v63, (uint64_t)(v32 + 2));
                sub_151FB8(buf, (uint64_t)v63);
                if (SHIBYTE(v65) >= 0) {
                  double v33 = v64;
                }
                else {
                  double v33 = (void **)v64[0];
                }
                if (SHIBYTE(v65) >= 0) {
                  std::string::size_type v34 = HIBYTE(v65);
                }
                else {
                  std::string::size_type v34 = (std::string::size_type)v64[1];
                }
                unint64_t v35 = std::string::insert((std::string *)buf, 0LL, (const std::string::value_type *)v33, v34);
                __int16 v36 = (void *)v35->__r_.__value_.__r.__words[0];
                v75[0] = v35->__r_.__value_.__l.__size_;
                *(void *)((char *)v75 + 7) = *(std::string::size_type *)((char *)&v35->__r_.__value_.__r.__words[1] + 7);
                unsigned __int8 size = v35->__r_.__value_.__s.__size_;
                v35->__r_.__value_.__l.__size_ = 0LL;
                v35->__r_.__value_.__l.__cap_ = 0LL;
                v35->__r_.__value_.__r.__words[0] = 0LL;
                if ((v68[9] & 0x80000000) != 0) {
                  operator delete(*(void **)buf);
                }
                if (SHIBYTE(v57[2]) < 0) {
                  operator delete(v57[0]);
                }
                v57[0] = v36;
                v57[1] = (void *)v75[0];
                *(void **)((char *)&v57[1] + 7) = *(void **)((char *)v75 + 7);
                HIBYTE(v57[2]) = size;
                sub_2DBF5C((uint64_t)v63);
                if (SHIBYTE(v65) < 0) {
                  operator delete(v64[0]);
                }
                unint64_t v32 = (uint64_t *)v32[1];
              }

              *(_OWORD *)int v58 = *(_OWORD *)v57;
              BOOL v59 = v57[2];
              memset(v57, 0, sizeof(v57));
              __int128 v40 = (os_log_t *)sub_138E8(24);
              int v41 = *v40;
              if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_DEBUG))
              {
                __int16 v42 = "unknown";
                sub_7D084(v64, v42);
                int v43 = v64;
                if (SHIBYTE(v65) < 0) {
                  int v43 = (void **)v64[0];
                }
                uint64_t v44 = v58;
                if (SHIBYTE(v59) < 0) {
                  uint64_t v44 = (void **)v58[0];
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                *(void *)&uint8_t buf[4] = "RouteUtilities.cpp";
                __int16 v67 = 1024;
                *(_DWORD *)unint64_t v68 = 113;
                *(_WORD *)&v68[4] = 2080;
                *(void *)&v68[6] = v43;
                __int16 v69 = 2080;
                int64_t v70 = v44;
                _os_log_impl(&dword_0, v41, OS_LOG_TYPE_DEBUG, "%25s:%-5d setting property %s = %s", buf, 0x26u);
                if (SHIBYTE(v65) < 0) {
                  operator delete(v64[0]);
                }
              }

              (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 56LL))(a2, v5);
              if (SHIBYTE(v59) < 0) {
                operator delete(v58[0]);
              }
              if (__p)
              {
                unsigned int v61 = __p;
                operator delete(__p);
              }

              unint64_t v45 = v72;
              if (v72 == v71)
              {
                unint64_t v45 = v71;
                goto LABEL_107;
              }

              break;
            case 0xF:
              for (uint64_t i = v54; i != &v53; uint64_t i = (uint64_t *)i[1])
              {
                uint64_t v30 = sub_2DD064((int *)i + 4);
                sub_1FD148(v30, a2);
              }

              goto LABEL_109;
            case 9:
              v73[0] = &off_475B38;
              unint64_t v74 = v73;
              __int128 __p = 0LL;
              unsigned int v61 = 0LL;
              uint64_t v62 = 0LL;
              uint64_t v18 = v54;
              uint64_t v19 = &v53;
              if (v54 != &v53)
              {
                do
                {
                  sub_2DC450((uint64_t)buf, (uint64_t)(v18 + 2));
                  if (!v74) {
                    sub_82CEC();
                  }
                  (*(void (**)(void *, _BYTE *, void **))(*v74 + 48LL))(v74, buf, &__p);
                  sub_2DBF5C((uint64_t)buf);
                  uint64_t v18 = (uint64_t *)v18[1];
                }

                while (v18 != &v53);
                uint64_t v19 = v54;
              }

              sub_7D084(v57, "valuelist: ");
              while (v19 != &v53)
              {
                *(_OWORD *)uint64_t v64 = *(_OWORD *)v57;
                unint64_t v65 = v57[2];
                memset(v57, 0, sizeof(v57));
                sub_2DC450((uint64_t)v63, (uint64_t)(v19 + 2));
                sub_151FB8(buf, (uint64_t)v63);
                if (SHIBYTE(v65) >= 0) {
                  char v20 = v64;
                }
                else {
                  char v20 = (void **)v64[0];
                }
                if (SHIBYTE(v65) >= 0) {
                  std::string::size_type v21 = HIBYTE(v65);
                }
                else {
                  std::string::size_type v21 = (std::string::size_type)v64[1];
                }
                uint64_t v22 = std::string::insert((std::string *)buf, 0LL, (const std::string::value_type *)v20, v21);
                uint64_t v23 = (void *)v22->__r_.__value_.__r.__words[0];
                v75[0] = v22->__r_.__value_.__l.__size_;
                *(void *)((char *)v75 + 7) = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
                unsigned __int8 v24 = v22->__r_.__value_.__s.__size_;
                v22->__r_.__value_.__l.__size_ = 0LL;
                v22->__r_.__value_.__l.__cap_ = 0LL;
                v22->__r_.__value_.__r.__words[0] = 0LL;
                if ((v68[9] & 0x80000000) != 0) {
                  operator delete(*(void **)buf);
                }
                if (SHIBYTE(v57[2]) < 0) {
                  operator delete(v57[0]);
                }
                v57[0] = v23;
                v57[1] = (void *)v75[0];
                *(void **)((char *)&v57[1] + 7) = *(void **)((char *)v75 + 7);
                HIBYTE(v57[2]) = v24;
                sub_2DBF5C((uint64_t)v63);
                if (SHIBYTE(v65) < 0) {
                  operator delete(v64[0]);
                }
                uint64_t v19 = (uint64_t *)v19[1];
              }

              *(_OWORD *)int v58 = *(_OWORD *)v57;
              BOOL v59 = v57[2];
              memset(v57, 0, sizeof(v57));
              int v46 = (os_log_t *)sub_138E8(24);
              unint64_t v47 = *v46;
              if (*v46 && os_log_type_enabled(*v46, OS_LOG_TYPE_DEBUG))
              {
                unint64_t v48 = "unknown";
                sub_7D084(v64, v48);
                uint64_t v49 = v64;
                if (SHIBYTE(v65) < 0) {
                  uint64_t v49 = (void **)v64[0];
                }
                unint64_t v50 = v58;
                if (SHIBYTE(v59) < 0) {
                  unint64_t v50 = (void **)v58[0];
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                *(void *)&uint8_t buf[4] = "RouteUtilities.cpp";
                __int16 v67 = 1024;
                *(_DWORD *)unint64_t v68 = 113;
                *(_WORD *)&v68[4] = 2080;
                *(void *)&v68[6] = v49;
                __int16 v69 = 2080;
                int64_t v70 = v50;
                _os_log_impl(&dword_0, v47, OS_LOG_TYPE_DEBUG, "%25s:%-5d setting property %s = %s", buf, 0x26u);
                if (SHIBYTE(v65) < 0) {
                  operator delete(v64[0]);
                }
              }

              (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 56LL))(a2, v5);
              if (SHIBYTE(v59) < 0) {
                operator delete(v58[0]);
              }
              if (__p)
              {
                unsigned int v61 = __p;
                operator delete(__p);
              }

              unint64_t v45 = v74;
              if (v74 == v73)
              {
                unint64_t v45 = v73;
LABEL_107:
                uint64_t v51 = 4LL;
LABEL_108:
                (*(void (**)(void))(*v45 + 8 * v51))();
                goto LABEL_109;
              }

              break;
            default:
              unint64_t v38 = (os_log_t *)sub_138E8(24);
              int v39 = *v38;
              if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                *(void *)&uint8_t buf[4] = "RouteUtilities.cpp";
                __int16 v67 = 1024;
                *(_DWORD *)unint64_t v68 = 181;
                *(_WORD *)&v68[4] = 1024;
                *(_DWORD *)&v68[6] = v17;
                _os_log_impl( &dword_0,  v39,  OS_LOG_TYPE_ERROR,  "%25s:%-5d DSP property list item type (%d) is not supported.",  buf,  0x18u);
              }

              goto LABEL_109;
          }

          if (v45)
          {
            uint64_t v51 = 5LL;
            goto LABEL_108;
          }

void sub_1FDB58( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *__p, uint64_t a29, int a30, __int16 a31, char a32, char a33, void *a34, uint64_t a35, uint64_t a36, char a37, uint64_t a38, void *a39, uint64_t a40, int a41, __int16 a42, char a43, char a44, uint64_t a45, void *a46, uint64_t a47, int a48, __int16 a49, char a50,char a51)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a34)
  {
    a35 = (uint64_t)a34;
    operator delete(a34);
  }

  uint64_t v53 = *(void **)(v51 - 160);
  if (v53 == (void *)(v51 - 184))
  {
    uint64_t v54 = 4LL;
    uint64_t v53 = (void *)(v51 - 184);
  }

  else
  {
    if (!v53) {
      goto LABEL_10;
    }
    uint64_t v54 = 5LL;
  }

  (*(void (**)(void))(*v53 + 8 * v54))();
LABEL_10:
  sub_2DBF5C((uint64_t)&a15);
  sub_149990(&a17);
  sub_2DBF5C((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_1FDD64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2DC450(a1, a2);
  sub_2DC450(v4 + 16, a2 + 16);
  return a1;
}

void sub_1FDD98(_Unwind_Exception *a1)
{
}

uint64_t sub_1FDDAC(void *a1, int a2)
{
  uint64_t v2 = sub_D01B4(a1, a2);
  if (v2)
  {
    LODWORD(v2) = sub_2DC888((int *)v2 + 6);
    int v3 = 1;
  }

  else
  {
    int v3 = 0;
  }

  return v2 | (v3 << 8);
}

void sub_1FDDDC(uint64_t a1, int a2, int a3, void *a4, uint64_t *a5)
{
  unsigned int v8 = sub_D01B4(a4, a2);
  if (v8)
  {
    uint64_t v9 = sub_2DD064((int *)v8 + 6);
    sub_D1274((uint64_t)&v21, v9);
    int v10 = v22;
    if (v22)
    {
      do
      {
        unint64_t v11 = (const void *)sub_2DCF68(v10 + 6);
        unint64_t v12 = v11;
        if (v11) {
          CFRetain(v11);
        }
        sub_7F234(cf, v12);
        if (!*(void *)cf)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
        }

        sub_48100((uint64_t)v19, *(const __CFString **)cf);
        if (*(void *)cf) {
          CFRelease(*(CFTypeRef *)cf);
        }
        BOOL v13 = (os_log_t *)sub_138E8(24);
        uint64_t v14 = *v13;
        if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v15 = v19;
          if (v20 < 0) {
            uint64_t v15 = (void **)v19[0];
          }
          *(_DWORD *)CFTypeRef cf = 136315650;
          *(void *)&cf[4] = "RouteUtilities.cpp";
          __int16 v27 = 1024;
          int v28 = 405;
          __int16 v29 = 2080;
          uint64_t v30 = v15;
          _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Adding conditional overlay tuning %s", cf, 0x1Cu);
        }

        v24[0] = v10[4] != 0;
        int v25 = 0;
        sub_1FE7A8((uint64_t)cf, a1, a3, (__int128 *)v19, (uint64_t)v23);
        sub_1FE0BC(a5, (uint64_t)cf);
        if (v32 < 0) {
          operator delete(__p);
        }
        sub_9DBD0((uint64_t)&v28 + 2);
        sub_9DBD0((uint64_t)v24);
        if (v20 < 0) {
          operator delete(v19[0]);
        }
        int v10 = *(int **)v10;
      }

      while (v10);
      uint64_t v16 = v22;
    }

    else
    {
      uint64_t v16 = 0LL;
    }

    sub_D0C4C(v16);
    int v17 = v21;
    std::string::size_type v21 = 0LL;
    if (v17) {
      operator delete(v17);
    }
  }

void sub_1FE030( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, char a34)
{
}

uint64_t sub_1FE0BC(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[136];
  unint64_t v5 = a1[137];
  if (v4 >= v5)
  {
    uint64_t v8 = a1[135];
    unint64_t v9 = 0xF0F0F0F0F0F0F0F1LL * ((uint64_t)(v4 - v8) >> 3);
    if (v9 + 1 > 0x1E1E1E1E1E1E1E1LL) {
      sub_7A87C();
    }
    unint64_t v10 = 0xF0F0F0F0F0F0F0F1LL * ((uint64_t)(v5 - v8) >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0xF0F0F0F0F0F0F0LL) {
      unint64_t v12 = 0x1E1E1E1E1E1E1E1LL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v18 = a1 + 137;
    if (v12) {
      unint64_t v12 = (unint64_t)sub_1FE648(v12);
    }
    else {
      uint64_t v13 = 0LL;
    }
    unint64_t v14 = v12;
    uint64_t v15 = v12 + 136 * v9;
    unint64_t v17 = v12 + 136 * v13;
    sub_1FE5C0(v15, a2);
    uint64_t v16 = v15 + 136;
    sub_1FE68C(a1 + 135, &v14);
    uint64_t v7 = a1[136];
    uint64_t result = sub_1FE75C((uint64_t)&v14);
  }

  else
  {
    uint64_t result = sub_1FE5C0(a1[136], a2);
    uint64_t v7 = v4 + 136;
    a1[136] = v4 + 136;
  }

  a1[136] = v7;
  return result;
}

void sub_1FE1CC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 1088) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1FE1EC(uint64_t *a1, uint64_t a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
  {
    unint64_t v5 = sub_1498C0(i + 16);
    uint64_t v6 = *a1;
    *unint64_t v5 = *a1;
    v5[1] = a1;
    *(void *)(v6 + 8) = v5;
    *a1 = (uint64_t)v5;
    ++a1[2];
  }

  return a1;
}

void sub_1FE25C(_Unwind_Exception *a1)
{
}

uint64_t sub_1FE270(uint64_t a1, int *a2)
{
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
  *(void *)(a1 + 8) = v4;
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  return a1;
}

void sub_1FE304(_Unwind_Exception *a1)
{
  int v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_7DCC4((const void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1FE340(uint64_t a1, const void **a2)
{
  CFNumberRef v4 = *a2;
  if (v4) {
    CFRetain(v4);
  }
  *(void *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_1FE388(uint64_t a1, const void **a2)
{
  CFNumberRef v4 = *a2;
  if (v4) {
    CFRetain(v4);
  }
  *(void *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_1FE3D0(int a1, uint64_t a2)
{
  if (a1 != 1885544823 || a2 == 0) {
    goto LABEL_10;
  }
  AudioObjectID v13 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120LL))(a2);
  strcpy((char *)&buf, "diabbolg");
  BYTE1(buf.mElement) = 0;
  HIWORD(buf.mElement) = 0;
  unint64_t v3 = sub_36EF4(&v13, &buf, 0, 0LL);
  *((void *)&v6 + 1) = v4;
  *(void *)&__int128 v6 = v3;
  uint64_t v5 = v6 >> 32;
  if ((v5 & 0xFF00000000LL) == 0)
  {
LABEL_10:
    uint64_t v11 = 0LL;
    uint64_t v10 = 0LL;
    uint64_t v9 = 0LL;
  }

  else
  {
    uint64_t v7 = (os_log_t *)sub_138E8(24);
    uint64_t v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
    {
      buf.int mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "RouteUtilities.cpp";
      __int16 v15 = 1024;
      int v16 = 227;
      __int16 v17 = 1024;
      int v18 = v5;
      _os_log_impl(&dword_0, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Bluetooth Headset Type: %u", (uint8_t *)&buf, 0x18u);
    }

    uint64_t v9 = v5 & 0xFFFFFF00;
    uint64_t v10 = v5;
    uint64_t v11 = 0x100000000LL;
  }

  return v10 | v11 | v9;
}

void *sub_1FE510(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v4 = a2;
  __int128 v6 = (uint64_t *)a1[1];
  if (a2 != a3 && v6 != a1)
  {
    do
    {
      uint64_t v8 = v4[2];
      uint64_t v7 = v4[3];
      if (v7)
      {
        uint64_t v9 = (unint64_t *)(v7 + 16);
        do
          unint64_t v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }

      uint64_t v11 = (std::__shared_weak_count *)v6[3];
      void v6[2] = v8;
      v6[3] = v7;
      if (v11) {
        std::__shared_weak_count::__release_weak(v11);
      }
      uint64_t v4 = (void *)v4[1];
      __int128 v6 = (uint64_t *)v6[1];
    }

    while (v4 != a3 && v6 != a1);
  }

  if (v6 == a1) {
    return sub_134D88(a1, a1, v4, a3);
  }
  else {
    return sub_11C618((uint64_t)a1, v6, a1);
  }
}

uint64_t sub_1FE5C0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  sub_199E0C(a1 + 16, a2 + 16);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  uint64_t v4 = (_BYTE *)(a1 + 112);
  if (*(char *)(a2 + 135) < 0)
  {
    sub_24054(v4, *(void **)(a2 + 112), *(void *)(a2 + 120));
  }

  else
  {
    __int128 v5 = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(_OWORD *)uint64_t v4 = v5;
  }

  return a1;
}

void sub_1FE634(_Unwind_Exception *a1)
{
}

void *sub_1FE648(unint64_t a1)
{
  if (a1 >= 0x1E1E1E1E1E1E1E2LL) {
    sub_7A8C4();
  }
  return operator new(136 * a1);
}

uint64_t *sub_1FE68C(uint64_t *result, void *a2)
{
  unint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  for (uint64_t i = 136LL; ; i -= 136LL)
  {
    uint64_t v8 = v6 + i;
    if (v4 + i - 136 == v5) {
      break;
    }
    uint64_t v9 = v4 + i - 272;
    uint64_t result = (uint64_t *)sub_1FE5C0(v8 - 272, v9);
  }

  uint64_t v10 = v8 - 136;
  a2[1] = v10;
  uint64_t v11 = *v3;
  *unint64_t v3 = v10;
  a2[1] = v11;
  uint64_t v12 = v3[1];
  v3[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = v3[2];
  v3[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1FE75C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 136;
    sub_196198(i - 136);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1FE7A8(uint64_t a1, uint64_t a2, int a3, __int128 *a4, uint64_t a5)
{
  *(void *)a1 = a2;
  sub_199E0C(a1 + 16, a5 + 8);
  *(_DWORD *)(a1 + 104) = a3;
  uint64_t v8 = (_BYTE *)(a1 + 112);
  if (*((char *)a4 + 23) < 0)
  {
    sub_24054(v8, *(void **)a4, *((void *)a4 + 1));
  }

  else
  {
    __int128 v9 = *a4;
    *(void *)(a1 + 128) = *((void *)a4 + 2);
    *(_OWORD *)uint64_t v8 = v9;
  }

  return a1;
}

void sub_1FE818(_Unwind_Exception *a1)
{
}

uint64_t sub_1FE82C(uint64_t a1)
{
  return a1;
}

void *sub_1FE86C()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_475B80;
  return result;
}

void sub_1FE890(uint64_t a1, void *a2)
{
  *a2 = &off_475B80;
}

uint64_t sub_1FE8A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = sub_2DCA7C(v20);
  int v5 = v4;
  uint64_t v7 = *(_DWORD **)(a3 + 8);
  unint64_t v6 = *(void *)(a3 + 16);
  if ((unint64_t)v7 >= v6)
  {
    __int128 v9 = *(_DWORD **)a3;
    uint64_t v10 = ((uint64_t)v7 - *(void *)a3) >> 2;
    unint64_t v11 = v10 + 1;
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 1 > v11) {
      unint64_t v11 = v12 >> 1;
    }
    BOOL v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v11;
    }
    if (v14)
    {
      unint64_t v14 = (unint64_t)sub_7A890(v14);
      __int128 v9 = *(_DWORD **)a3;
      uint64_t v7 = *(_DWORD **)(a3 + 8);
    }

    else
    {
      uint64_t v15 = 0LL;
    }

    int v16 = (_DWORD *)(v14 + 4 * v10);
    unint64_t v17 = v14 + 4 * v15;
    _DWORD *v16 = v5;
    uint64_t v8 = v16 + 1;
    while (v7 != v9)
    {
      int v18 = *--v7;
      *--int v16 = v18;
    }

    *(void *)a3 = v16;
    *(void *)(a3 + 8) = v8;
    *(void *)(a3 + 16) = v17;
    if (v9) {
      operator delete(v9);
    }
  }

  else
  {
    *uint64_t v7 = v4;
    uint64_t v8 = v7 + 1;
  }

  *(void *)(a3 + 8) = v8;
  return sub_2DBF5C((uint64_t)v20);
}

void sub_1FE99C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1FE9B8()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_475B38;
  return result;
}

void sub_1FE9DC(uint64_t a1, void *a2)
{
  *a2 = &off_475B38;
}

uint64_t sub_1FE9F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v4 = sub_2DCB78(v20);
  float v5 = v4;
  uint64_t v7 = *(float **)(a3 + 8);
  unint64_t v6 = *(void *)(a3 + 16);
  if ((unint64_t)v7 >= v6)
  {
    __int128 v9 = *(float **)a3;
    uint64_t v10 = ((uint64_t)v7 - *(void *)a3) >> 2;
    unint64_t v11 = v10 + 1;
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 1 > v11) {
      unint64_t v11 = v12 >> 1;
    }
    BOOL v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v11;
    }
    if (v14)
    {
      unint64_t v14 = (unint64_t)sub_7A890(v14);
      __int128 v9 = *(float **)a3;
      uint64_t v7 = *(float **)(a3 + 8);
    }

    else
    {
      uint64_t v15 = 0LL;
    }

    int v16 = (float *)(v14 + 4 * v10);
    unint64_t v17 = v14 + 4 * v15;
    float *v16 = v5;
    uint64_t v8 = v16 + 1;
    while (v7 != v9)
    {
      int v18 = *((_DWORD *)v7-- - 1);
      *((_DWORD *)v16-- - 1) = v18;
    }

    *(void *)a3 = v16;
    *(void *)(a3 + 8) = v8;
    *(void *)(a3 + 16) = v17;
    if (v9) {
      operator delete(v9);
    }
  }

  else
  {
    *uint64_t v7 = v4;
    uint64_t v8 = v7 + 1;
  }

  *(void *)(a3 + 8) = v8;
  return sub_2DBF5C((uint64_t)v20);
}

void sub_1FEAE8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1FEAFC(_BYTE *a1, int a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a6 == 1)
  {
    sub_B8F68(&v16, (uint64_t *)(a5 + 16), "", 1350);
    uint64_t v12 = v17;
    int v13 = *(_DWORD *)(v16 + 264);
    if (v17)
    {
      p_unsigned int shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        unint64_t v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }

  else
  {
    int v13 = 0;
  }

  sub_1FEC04((uint64_t)&v16, 0, a2, a3, v13, a7);
  sub_2D89F8(a1, a4, (int *)&v16);
  if (__p)
  {
    uint64_t v19 = __p;
    operator delete(__p);
  }

void sub_1FEBE8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1FEC04(uint64_t a1, int a2, int a3, _OWORD *a4, int a5, uint64_t a6)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_OWORD *)(a1 + 8) = *a4;
  *(_DWORD *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + 48) = 0LL;
  sub_7A5B8( (void *)(a1 + 32),  *(const void **)a6,  *(void *)(a6 + 8),  (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 2);
  sub_2CE7A0((_DWORD *)a1);
  return a1;
}

void sub_1FEC64(_Unwind_Exception *exception_object)
{
  float v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_1FEC80(_DWORD *a1, char a2)
{
  if ((sub_753A8() & 0xFFFFFFFE) == 0x6A)
  {
    if ((a2 & 1) != 0) {
      return 1LL;
    }
    if (*a1 == 1987011684) {
      return 0LL;
    }
  }

  else
  {
    unsigned __int8 v5 = atomic_load((unsigned __int8 *)&qword_48FD58);
    if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_48FD58))
    {
      int v21 = sub_753A8();
      char v22 = 1;
      if ((v21 - 2) >= 4
        && ((v21 - 48) > 0x22 || ((1LL << (v21 - 48)) & 0x480100001LL) == 0))
      {
        char v22 = 0;
      }

      byte_48FD50 = v22;
      __cxa_guard_release(&qword_48FD58);
    }

    if (!byte_48FD50) {
      return 0LL;
    }
  }

  int v25 = 0LL;
  uint64_t v26 = 0LL;
  uint64_t v27 = 0LL;
  strcpy(v28, "cwdv");
  v28[8] = 0;
  int v29 = 3;
  v31[0] = 0LL;
  v31[1] = 0LL;
  uint64_t v30 = v31;
  CFTypeRef cf = 0LL;
  int v32 = 44739210;
  sub_7267C((unint64_t *)v24, (uint64_t)a1, (uint64_t)&v25);
  unint64_t v6 = (os_log_t *)sub_138E8(20);
  uint64_t v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
  {
    sub_2D9BB0(&__p, (uint64_t)v24, 1);
    uint64_t v8 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    unint64_t v35 = "RouteUtilities.cpp";
    __int16 v36 = 1024;
    int v37 = 1486;
    __int16 v38 = 2080;
    int v39 = v8;
    _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Reference stream port ? in %s", buf, 0x1Cu);
  }

  for (uint64_t i = (uint64_t *)v24[1]; ; uint64_t i = (uint64_t *)i[1])
  {
    if (i == v24)
    {
      uint64_t v4 = 0LL;
      goto LABEL_30;
    }

    uint64_t v10 = (std::__shared_weak_count *)i[3];
    if (!v10) {
      continue;
    }
    unint64_t v11 = std::__shared_weak_count::lock(v10);
    if (!v11) {
      continue;
    }
    uint64_t v12 = v11;
    uint64_t v13 = i[2];
    if (!v13)
    {
      p_unsigned int shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        unint64_t v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v12);
      }

      continue;
    }

    BOOL v14 = sub_203D48(*(_DWORD *)(v13 + 144));
    BOOL v15 = v14;
    uint64_t v16 = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17) {
      break;
    }
    if (v14) {
      goto LABEL_37;
    }
LABEL_28:
    ;
  }

  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (!v15) {
    goto LABEL_28;
  }
LABEL_37:
  uint64_t v4 = 1LL;
LABEL_30:
  sub_85B80(v24);
  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(v31[0]);
  if (v25)
  {
    uint64_t v26 = v25;
    operator delete(v25);
  }

  return v4;
}

void sub_1FEF88( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, CFTypeRef cf)
{
}

BOOL sub_1FF038(int a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if (*(void *)(a2 + 8) != a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    while (1)
    {
      sub_B8F68(&v10, (uint64_t *)(v3 + 16), "", 554);
      unsigned __int8 v5 = v11;
      int v6 = *(_DWORD *)(v10 + 144);
      if (v11)
      {
        p_unsigned int shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          unint64_t v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }

      if (v6 == a1) {
        break;
      }
      uint64_t v3 = *(void *)(v3 + 8);
      if (v3 == a2)
      {
        uint64_t v3 = a2;
        return v3 != a2;
      }
    }
  }

  return v3 != a2;
}

BOOL sub_1FF0FC(uint64_t a1)
{
  uint64_t v2 = a1;
  if (*(void *)(a1 + 8) != a1)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    while (1)
    {
      sub_B8F68(&v8, (uint64_t *)(v2 + 16), "", 562);
      uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 112LL))(v8);
      uint64_t v4 = v9;
      if (v9)
      {
        p_unsigned int shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          unint64_t v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }

      uint64_t v2 = *(void *)(v2 + 8);
      if (v2 == a1)
      {
        uint64_t v2 = a1;
        return v2 != a1;
      }
    }
  }

  return v2 != a1;
}

void sub_1FF1E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    p_unsigned int shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      unint64_t v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }

  _Unwind_Resume(exception_object);
}

void sub_1FF224(std::string *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4 != a2)
  {
    while (1)
    {
      sub_B8F68(&v19, (uint64_t *)(v4 + 16), "", 672);
      int v5 = *(_DWORD *)(v19 + 144);
      memset(__s, 0, 24);
      if (v5 <= 1886222184)
      {
        if (v5 > 1885892705)
        {
          if (v5 <= 1886152046)
          {
            switch(v5)
            {
              case 1885892706:
                __s[23] = 20;
                qmemcpy(__s, "Bluetooth HFP Output", 20);
                std::string::size_type v7 = 20LL;
                goto LABEL_79;
              case 1885892727:
                __s[23] = 16;
                uint64_t v13 = "Wired Headphones";
                goto LABEL_67;
              case 1886152041:
                __s[23] = 18;
                *(_WORD *)&__s[16] = 29813;
                uint64_t v10 = "Bluetooth LE Input";
LABEL_48:
                *(_OWORD *)__s = *(_OWORD *)v10;
                std::string::size_type v7 = 18LL;
                goto LABEL_79;
            }
          }

          else if (v5 > 1886216808)
          {
            if (v5 == 1886216809)
            {
              __s[23] = 19;
              *(_DWORD *)&__s[15] = 1701736296;
              unint64_t v12 = "Built-in Microphone";
              goto LABEL_74;
            }

            if (v5 == 1886216820)
            {
              __s[23] = 19;
              *(_DWORD *)&__s[15] = 1953853550;
              unint64_t v12 = "Bluetooth HFP Input";
LABEL_74:
              *(_OWORD *)__s = *(_OWORD *)v12;
              std::string::size_type v7 = 19LL;
              goto LABEL_79;
            }
          }

          else
          {
            if (v5 == 1886152047)
            {
              __s[23] = 19;
              *(_DWORD *)&__s[15] = 1953853556;
              unint64_t v12 = "Bluetooth LE Output";
              goto LABEL_74;
            }

            if (v5 == 1886154613)
            {
              __s[23] = 8;
              uint64_t v9 = 0x74754F20656E694CLL;
LABEL_57:
              *(void *)__s = v9;
              std::string::size_type v7 = 8LL;
              goto LABEL_79;
            }
          }
        }

        else if (v5 <= 1885631343)
        {
          switch(v5)
          {
            case 1885433953:
              __s[23] = 12;
              *(_DWORD *)&__s[8] = 1869177973;
              BOOL v14 = "AirPlayAudio";
              goto LABEL_61;
            case 1885433971:
              __s[23] = 13;
              qmemcpy(__s, "AirPlayScreen", 13);
              std::string::size_type v7 = 13LL;
              goto LABEL_79;
            case 1885629550:
              __s[23] = 8;
              uint64_t v9 = 0x6B6E696C6E776F44LL;
              goto LABEL_57;
          }
        }

        else if (v5 > 1885889644)
        {
          if (v5 == 1885889645)
          {
            __s[23] = 4;
            *(_DWORD *)__s = 1229800520;
            std::string::size_type v7 = 4LL;
            goto LABEL_79;
          }

          if (v5 == 1885892674)
          {
            __s[23] = 14;
            unint64_t v11 = "Bluetooth A2DP";
            goto LABEL_44;
          }
        }

        else
        {
          if (v5 == 1885631344)
          {
            __s[23] = 12;
            *(_DWORD *)&__s[8] = 1953656656;
            BOOL v14 = "Display Port";
LABEL_61:
            *(void *)__s = *(void *)v14;
            std::string::size_type v7 = 12LL;
            goto LABEL_79;
          }

          if (v5 == 1885888867)
          {
            __s[23] = 10;
            *(_WORD *)&__s[8] = 29813;
            unint64_t v6 = "HAC Output";
LABEL_70:
            *(void *)__s = *(void *)v6;
            std::string::size_type v7 = 10LL;
            goto LABEL_79;
          }
        }

        goto LABEL_77;
      }

      if (v5 > 1886680168)
      {
        if (v5 <= 1886742894)
        {
          switch(v5)
          {
            case 1886680169:
              __s[23] = 9;
              qmemcpy(__s, "TTY Input", 9);
              std::string::size_type v7 = 9LL;
              goto LABEL_79;
            case 1886680175:
              __s[23] = 10;
              *(_WORD *)&__s[8] = 29813;
              unint64_t v6 = "TTY Output";
              goto LABEL_70;
            case 1886742889:
              __s[23] = 14;
              unint64_t v11 = "USB IDAM Input";
LABEL_44:
              *(void *)__s = *(void *)v11;
              *(void *)&__s[6] = *(void *)(v11 + 6);
              std::string::size_type v7 = 14LL;
              goto LABEL_79;
          }
        }

        else if (v5 > 1886745448)
        {
          if (v5 == 1886745449)
          {
            __s[23] = 15;
            BOOL v15 = "USB Audio Input";
            goto LABEL_76;
          }

          if (v5 == 1886745455)
          {
            __s[23] = 16;
            uint64_t v13 = "USB Audio Output";
LABEL_67:
            *(_OWORD *)__s = *(_OWORD *)v13;
            std::string::size_type v7 = 16LL;
            goto LABEL_79;
          }
        }

        else
        {
          if (v5 == 1886742895)
          {
            __s[23] = 15;
            BOOL v15 = "USB IDAM Output";
LABEL_76:
            *(void *)__s = *(void *)v15;
            *(void *)&__s[7] = *(void *)(v15 + 7);
            std::string::size_type v7 = 15LL;
            goto LABEL_79;
          }

          if (v5 == 1886743662)
          {
            __s[23] = 6;
            qmemcpy(__s, "Uplink", 6);
            std::string::size_type v7 = 6LL;
            goto LABEL_79;
          }
        }

        goto LABEL_77;
      }

      if (v5 <= 1886545250) {
        break;
      }
      if (v5 > 1886675560)
      {
        if (v5 == 1886675561)
        {
          __s[23] = 17;
          qmemcpy(__s, "Thunderbolt Input", 17);
          std::string::size_type v7 = 17LL;
          goto LABEL_79;
        }

        if (v5 == 1886675567)
        {
          __s[23] = 18;
          *(_WORD *)&__s[16] = 29813;
          uint64_t v10 = "Thunderbolt Output";
          goto LABEL_48;
        }

        goto LABEL_77;
      }

      if (v5 == 1886545251)
      {
        __s[23] = 8;
        uint64_t v9 = 0x7265766965636552LL;
        goto LABEL_57;
      }

      if (v5 != 1886613611) {
        goto LABEL_77;
      }
      __s[23] = 7;
      *(_DWORD *)__s = 1634037843;
      std::string::size_type v7 = 7LL;
      int v8 = 1919249249;
LABEL_78:
      *(_DWORD *)&__s[3] = v8;
LABEL_79:
      std::string::append(a1, __s, v7);
      if (__s[23] < 0) {
        operator delete(*(void **)__s);
      }
      uint64_t v16 = v20;
      if (v20)
      {
        p_unsigned int shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          unint64_t v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }

      uint64_t v4 = *(void *)(v4 + 8);
      if (v4 == a2) {
        return;
      }
      std::string::append(a1, ", ", 2uLL);
    }

    switch(v5)
    {
      case 1886222185:
        __s[23] = 16;
        uint64_t v13 = "Wired Microphone";
        goto LABEL_67;
      case 1886284905:
        __s[23] = 10;
        *(_WORD *)&__s[8] = 29813;
        unint64_t v6 = "NULL Input";
        goto LABEL_70;
      case 1886287212:
        __s[23] = 11;
        qmemcpy(__s, "NULL Output", 11);
        std::string::size_type v7 = 11LL;
        goto LABEL_79;
    }

void sub_1FF96C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

uint64_t sub_1FF9AC(void *a1)
{
  if (!a1[24]) {
    return 0LL;
  }
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 152LL))(a1);
  if ((_DWORD)result)
  {
    uint64_t v3 = a1[24];
    if (!v3)
    {
      uint64_t v4 = (os_log_t *)sub_138E8(13);
      int v5 = *v4;
      if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "PortUtilities.cpp";
        __int16 v10 = 1024;
        int v11 = 94;
        _os_log_impl(&dword_0, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }

    strcpy(buf, "paaibolg");
    buf[9] = 0;
    *(_WORD *)&_DWORD buf[10] = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, _BYTE *))(*(void *)v3 + 16LL))(v3, buf);
    if ((_DWORD)result)
    {
      int v7 = 4;
      int v8 = 0;
      strcpy(buf, "paaibolg");
      buf[9] = 0;
      *(_WORD *)&_DWORD buf[10] = 0;
      (*(void (**)(uint64_t, _BYTE *, void, void, int *, int *))(*(void *)v3 + 40LL))( v3,  buf,  0LL,  0LL,  &v7,  &v8);
      return v8 != 0;
    }
  }

  return result;
}

void sub_1FFB34(_Unwind_Exception *a1)
{
}

uint64_t sub_1FFB50(void *a1, int a2, float *a3)
{
  uint64_t v3 = a1[24];
  *a3 = 100.0;
  if (!v3) {
    return 0LL;
  }
  strcpy((char *)buf, "esodbolg");
  BYTE1(buf[0].mElement) = 0;
  HIWORD(buf[0].mElement) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, AudioObjectPropertyAddress *))(*(void *)v3 + 16LL))(v3, buf);
  if (!(_DWORD)result) {
    return result;
  }
  strcpy((char *)buf, "esodbolg");
  BYTE1(buf[0].mElement) = 0;
  HIWORD(buf[0].mElement) = 0;
  int v8 = (*(uint64_t (**)(uint64_t, AudioObjectPropertyAddress *, void, void))(*(void *)v3 + 32LL))( v3,  buf,  0LL,  0LL);
  int v41 = 0;
  int v42 = v8;
  uint64_t v40 = 0x676C6F62646F7365LL;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, float *))(*(void *)v3 + 40LL))( v3,  &v40,  0LL,  0LL,  &v42,  a3);
  if (*a3 < 50.0 || *a3 > 150.0)
  {
    if (a2)
    {
      uint64_t v13 = (os_log_t *)sub_138E8(24);
      BOOL v14 = *v13;
      if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
      {
        AudioObjectPropertyElement v15 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 120LL))(v3);
        double v16 = *a3;
        buf[0].int mSelector = 136315906;
        *(void *)&buf[0].AudioObjectPropertyScope mScope = "PortUtilities.cpp";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 530;
        HIWORD(buf[1].mScope) = 1024;
        buf[1].AudioObjectPropertyElement mElement = v15;
        LOWORD(cf[0]) = 2048;
        *(CFTypeRef *)((char *)cf + 2) = *(CFTypeRef *)&v16;
        _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PlaybackDosimetry : Fetched invalid sensitivity from device [%u]: %f",  (uint8_t *)buf,  0x22u);
      }

      unint64_t v17 = (os_log_t *)sub_138E8(24);
      unint64_t v18 = *v17;
      if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_DEBUG))
      {
        buf[0].int mSelector = 136315394;
        *(void *)&buf[0].AudioObjectPropertyScope mScope = "PortUtilities.cpp";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 208;
        _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d PlaybackDosimetry : Reporting sensitivity to metrics.",  (uint8_t *)buf,  0x12u);
      }

      int v46 = 0LL;
      unint64_t v47 = 0LL;
      unint64_t v45 = (uint64_t *)&v46;
      std::to_string(&v43, *a3);
      if ((v43.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v19 = &v43;
      }
      else {
        uint64_t v19 = (std::string *)v43.__r_.__value_.__r.__words[0];
      }
      if (v19)
      {
        if ((v43.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          CFIndex size = v43.__r_.__value_.__s.__size_;
        }
        else {
          CFIndex size = v43.__r_.__value_.__l.__size_;
        }
        int v21 = (char *)CFStringCreateWithBytes(0LL, (const UInt8 *)v19, size, 0x8000100u, 0);
        uint64_t v44 = (std::string *)v21;
        if (!v21)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
        }
      }

      else
      {
        int v21 = 0LL;
        uint64_t v44 = 0LL;
      }

      sub_7D084(buf, "headphone_sensitivity");
      if (v21) {
        CFRetain(v21);
      }
      cf[0] = v21;
      sub_20050C(&v45, (void **)buf, (__int128 *)buf);
      if (cf[0]) {
        CFRelease(cf[0]);
      }
      if (SHIBYTE(buf[1].mElement) < 0) {
        operator delete(*(void **)&buf[0].mSelector);
      }
      if (v21) {
        CFRelease(v21);
      }
      if (sub_1FF9AC(a1))
      {
        unsigned int v23 = sub_59468((uint64_t)a1);
        std::to_string(&v43, v23);
        if ((v43.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          unsigned __int8 v24 = &v43;
        }
        else {
          unsigned __int8 v24 = (std::string *)v43.__r_.__value_.__r.__words[0];
        }
        if (v24)
        {
          if ((v43.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            CFIndex v25 = v43.__r_.__value_.__s.__size_;
          }
          else {
            CFIndex v25 = v43.__r_.__value_.__l.__size_;
          }
          uint64_t v26 = (char *)CFStringCreateWithBytes(0LL, (const UInt8 *)v24, v25, 0x8000100u, 0);
          uint64_t v44 = (std::string *)v26;
          if (!v26)
          {
            uint64_t v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v27, "Could not construct");
          }
        }

        else
        {
          uint64_t v26 = 0LL;
          uint64_t v44 = 0LL;
        }

        sub_2005A4(buf, "bluetooth_product_id", (const void **)&v44);
        sub_20050C(&v45, (void **)buf, (__int128 *)buf);
        if (cf[0]) {
          CFRelease(cf[0]);
        }
        if (SHIBYTE(buf[1].mElement) < 0) {
          operator delete(*(void **)&buf[0].mSelector);
        }
        if (v26) {
          CFRelease(v26);
        }
      }

      else
      {
        uint64_t v28 = a1[24];
        if (!v28)
        {
LABEL_66:
          memset(buf, 0, sizeof(buf));
          sub_7DCF4(buf, v47);
          unint64_t v35 = v45;
          if (v45 != (uint64_t *)&v46)
          {
            do
            {
              sub_20067C(buf, (const UInt8 *)v35 + 32, (const void **)v35 + 7);
              __int16 v36 = (uint64_t *)v35[1];
              if (v36)
              {
                do
                {
                  int v37 = v36;
                  __int16 v36 = (uint64_t *)*v36;
                }

                while (v36);
              }

              else
              {
                do
                {
                  int v37 = (uint64_t *)v35[2];
                  BOOL v38 = *v37 == (void)v35;
                  unint64_t v35 = v37;
                }

                while (!v38);
              }

              unint64_t v35 = v37;
            }

            while (v37 != (uint64_t *)&v46);
          }

          CFDictionaryRef v39 = sub_7C1F4((void ***)buf);
          v43.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
          sub_7CFCC((void ***)&v43);
          v43.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
          sub_E5360((uint64_t)v39, 1LL, 6LL);
          if (v39) {
            CFRelease(v39);
          }
          sub_200798(v46);
          return 0LL;
        }

        LODWORD(v43.__r_.__value_.__l.__data_) = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 120LL))(v28);
        strcpy((char *)buf, "diabbolg");
        BYTE1(buf[0].mElement) = 0;
        HIWORD(buf[0].mElement) = 0;
        unint64_t v29 = sub_36EF4((AudioObjectID *)&v43, buf, 0, 0LL);
        *((void *)&v32 + 1) = v30;
        *(void *)&__int128 v32 = v29;
        uint64_t v31 = v32 >> 32;
        if ((v31 & 0xFF00000000LL) != 0) {
          uint64_t v33 = v31;
        }
        else {
          uint64_t v33 = 0LL;
        }
        sub_2CA1C(&v43, v33);
        if ((v43.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type v34 = &v43;
        }
        else {
          std::string::size_type v34 = (std::string *)v43.__r_.__value_.__r.__words[0];
        }
        uint64_t v44 = v34;
        sub_200624(buf, (char **)&v44);
        sub_20050C(&v45, (void **)buf, (__int128 *)buf);
        if (cf[0]) {
          CFRelease(cf[0]);
        }
        if (SHIBYTE(buf[1].mElement) < 0) {
          operator delete(*(void **)&buf[0].mSelector);
        }
      }

      goto LABEL_66;
    }

    return 0LL;
  }

  uint64_t v9 = (os_log_t *)sub_138E8(24);
  __int16 v10 = *v9;
  if (*v9)
  {
    if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
    {
      AudioObjectPropertyElement v11 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 120LL))(v3);
      double v12 = *a3;
      buf[0].int mSelector = 136315906;
      *(void *)&buf[0].AudioObjectPropertyScope mScope = "PortUtilities.cpp";
      LOWORD(buf[1].mSelector) = 1024;
      *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 525;
      HIWORD(buf[1].mScope) = 1024;
      buf[1].AudioObjectPropertyElement mElement = v11;
      LOWORD(cf[0]) = 2048;
      *(CFTypeRef *)((char *)cf + 2) = *(CFTypeRef *)&v12;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d PlaybackDosimetry : Fetched sensitivity from device [%u]: %f",  (uint8_t *)buf,  0x22u);
    }
  }

  return 1LL;
}

void sub_20016C( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, __int128 buf, __int128 a23)
{
  if (a2)
  {
    if (a17 < 0) {
      operator delete(__p);
    }
    sub_200798(a20);
    if (a2 == 3)
    {
      CFIndex v25 = __cxa_begin_catch(a1);
      uint64_t v26 = (os_log_t *)sub_138E8(24);
      uint64_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_DEFAULT))
      {
        int v28 = v25[2];
        LODWORD(buf) = 136315650;
        *(void *)((char *)&buf + 4) = "PortUtilities.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 534;
        WORD1(a23) = 1024;
        DWORD1(a23) = v28;
        _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d PlaybackDosimetry : Failed to fetch sensitivity from device, fallback to default: %u",  (uint8_t *)&buf,  0x18u);
      }
    }

    else
    {
      unint64_t v29 = __cxa_begin_catch(a1);
      if (a2 == 2)
      {
        uint64_t v30 = v29;
        uint64_t v31 = (os_log_t *)sub_138E8(24);
        __int128 v32 = *v31;
        if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v33 = (*(uint64_t (**)(void *))(*(void *)v30 + 16LL))(v30);
          LODWORD(buf) = 136315650;
          *(void *)((char *)&buf + 4) = "PortUtilities.cpp";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 536;
          WORD1(a23) = 2080;
          *(void *)((char *)&a23 + 4) = v33;
          _os_log_impl( &dword_0,  v32,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d PlaybackDosimetry : Failed to fetch sensitivity from device, fallback to default: %s",  (uint8_t *)&buf,  0x1Cu);
        }
      }

      else
      {
        std::string::size_type v34 = (os_log_t *)sub_138E8(24);
        unint64_t v35 = *v34;
        if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf) = 136315394;
          *(void *)((char *)&buf + 4) = "PortUtilities.cpp";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 538;
          _os_log_impl( &dword_0,  v35,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d PlaybackDosimetry : Failed to fetch sensitivity from device, fallback to default",  (uint8_t *)&buf,  0x12u);
        }
      }
    }

    __cxa_end_catch();
    JUMPOUT(0x200134LL);
  }

  _Unwind_Resume(a1);
}

void sub_20050C(uint64_t **a1, void **a2, __int128 *a3)
{
  int v5 = (uint64_t **)sub_845D8((uint64_t)a1, &v13, a2);
  if (!*v5)
  {
    unint64_t v6 = v5;
    int v7 = operator new(0x40uLL);
    v11[1] = a1 + 1;
    __int128 v8 = *a3;
    *(void *)a3 = 0LL;
    *((void *)a3 + 1) = 0LL;
    uint64_t v9 = *((void *)a3 + 2);
    uint64_t v10 = *((void *)a3 + 3);
    *((void *)a3 + 2) = 0LL;
    *((void *)a3 + 3) = 0LL;
    uint64_t v7[2] = v8;
    *((void *)v7 + 6) = v9;
    *((void *)v7 + 7) = v10;
    char v12 = 1;
    sub_32C38(a1, v13, v6, (uint64_t *)v7);
    v11[0] = 0LL;
    sub_2008F4((uint64_t)v11);
  }

void *sub_2005A4(void *a1, char *a2, const void **a3)
{
  int v5 = *a3;
  if (v5) {
    CFRetain(v5);
  }
  a1[3] = v5;
  return a1;
}

uint64_t sub_2005E4(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *sub_200624(void *a1, char **a2)
{
  uint64_t v4 = (CFStringRef *)sub_7D084(a1, "bluetooth_product_id");
  sub_59370(v4 + 3, *a2);
  return a1;
}

void sub_200660(_Unwind_Exception *exception_object)
{
}

uint64_t sub_20067C(void *a1, const UInt8 *a2, const void **a3)
{
  unint64_t v6 = a1 + 2;
  unint64_t v7 = a1[2];
  unint64_t v8 = a1[1];
  if (v8 >= v7)
  {
    uint64_t v11 = (uint64_t)(v8 - *a1) >> 4;
    uint64_t v12 = v7 - *a1;
    uint64_t v13 = v12 >> 3;
    else {
      unint64_t v14 = v13;
    }
    char v20 = v6;
    if (v14) {
      unint64_t v14 = (unint64_t)sub_7BE90(v14);
    }
    else {
      uint64_t v15 = 0LL;
    }
    unint64_t v16 = v14;
    unint64_t v17 = (CFStringRef *)(v14 + 16 * v11);
    unint64_t v19 = v14 + 16 * v15;
    sub_20081C(v17, a2, a3);
    unint64_t v18 = v17 + 2;
    sub_7DFF0(a1, &v16);
    unint64_t v10 = a1[1];
    uint64_t result = sub_7BEC4((uint64_t)&v16);
  }

  else
  {
    uint64_t result = (uint64_t)sub_20081C((CFStringRef *)a1[1], a2, a3);
    unint64_t v10 = v8 + 16;
    a1[1] = v8 + 16;
  }

  a1[1] = v10;
  return result;
}

void sub_200778(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_200798(void *a1)
{
  if (a1)
  {
    sub_200798(*a1);
    sub_200798(a1[1]);
    sub_2007D8((uint64_t)(a1 + 4));
    operator delete(a1);
  }

void sub_2007D8(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
}

CFStringRef *sub_20081C(CFStringRef *a1, const UInt8 *a2, const void **a3)
{
  CFIndex v5 = *((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    CFIndex v6 = a2[23];
  }

  else
  {
    a2 = *(const UInt8 **)a2;
    CFIndex v6 = v5;
  }

  CFStringRef v7 = CFStringCreateWithBytes(0LL, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  unint64_t v8 = (const __CFString *)*a3;
  if (v8) {
    CFRetain(v8);
  }
  a1[1] = v8;
  return a1;
}

void sub_2008C4(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2008F4(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_2007D8((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }

double sub_200938(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  *a3 = 0;
  if (a2)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 256LL))( &v22,  a2,  1LL,  a1);
    if (v23)
    {
      uint64_t v4 = std::__shared_weak_count::lock(v23);
      if (v4 && v22)
      {
        double v5 = (*(double (**)(uint64_t))(*(void *)v22 + 96LL))(v22);
        double v7 = v6;
        *a3 = 1;
        unint64_t v8 = (os_log_t *)sub_138E8(24);
        float v9 = v5;
        float v10 = v7;
        uint64_t v11 = *v8;
        if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          CFIndex v25 = "PortUtilities.cpp";
          __int16 v26 = 1024;
          int v27 = 261;
          __int16 v28 = 2048;
          double v29 = v10;
          __int16 v30 = 2048;
          double v31 = v9;
          _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d PlaybackDosimetry : volume range = %f -> %f",  buf,  0x26u);
        }

        if (v9 > v10)
        {
          uint64_t v12 = (os_log_t *)sub_138E8(13);
          uint64_t v13 = *v12;
          if (*v12)
          {
            if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
              CFIndex v25 = "PortUtilities.cpp";
              __int16 v26 = 1024;
              int v27 = 262;
              __int16 v28 = 2048;
              double v29 = v9;
              __int16 v30 = 2048;
              double v31 = v10;
              _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Min volume is greater than max volume: %f > %f",  buf,  0x26u);
            }
          }

          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Min volume is greater than max volume: %f > %f");
        }

void sub_200C94( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_weak(a12);
  }
  _Unwind_Resume(a1);
}

float sub_200CDC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 192);
  uint64_t v3 = *(unsigned int *)(a1 + 264);
  float v15 = 0.0;
  if ((sub_1FFB50((void *)a1, 1, &v15) & 1) != 0) {
    return v15;
  }
  int v4 = *(_DWORD *)(a1 + 264);
  if (v4 <= 1647521841)
  {
    if (v4 > 1634231919)
    {
      if (v4 == 1634231920 || v4 == 1635085420) {
        goto LABEL_21;
      }
      int v5 = 1647393080;
    }

    else
    {
      if (v4 == 1214329654 || v4 == 1214394677) {
        goto LABEL_21;
      }
      int v5 = 1633759844;
    }

    if (v4 != v5) {
      goto LABEL_31;
    }
LABEL_21:
    int v7 = 1120403456;
LABEL_22:
    int v6 = v7;
    goto LABEL_23;
  }

  if (v4 > 1647718502)
  {
    if (v4 == 2003068262 || v4 == 1752709424) {
      goto LABEL_21;
    }
    if (v4 == 1647718503)
    {
      int v6 = 1121045709;
      goto LABEL_23;
    }

void sub_200F50(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 144);
  uint64_t v3 = *(unsigned int *)(a1 + 264);
  uint64_t v4 = *(void *)(a1 + 192);
  int v5 = (os_log_t *)sub_138E8(24);
  int v6 = *v5;
  if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEBUG))
  {
    sub_2CA1C(&v28, v2);
    int size = (char)v28.__r_.__value_.__s.__size_;
    std::string::size_type v8 = v28.__r_.__value_.__r.__words[0];
    sub_2CA1C(__p, v3);
    float v9 = &v28;
    if (size < 0) {
      float v9 = (std::string *)v8;
    }
    if (v27 >= 0) {
      int v10 = __p;
    }
    else {
      int v10 = (void **)__p[0];
    }
    buf.int mSelector = 136315906;
    *(void *)&buf.AudioObjectPropertyScope mScope = "PortUtilities.cpp";
    __int16 v30 = 1024;
    int v31 = 762;
    __int16 v32 = 2080;
    std::string::size_type v33 = (std::string::size_type)v9;
    __int16 v34 = 2080;
    unint64_t v35 = v10;
    _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d PlaybackDosimetry: Port type/subtype = %s/%s",  (uint8_t *)&buf,  0x26u);
    if (v27 < 0) {
      operator delete(__p[0]);
    }
  }

  int v11 = sub_1FF9AC((void *)a1);
  uint64_t v12 = (os_log_t *)sub_138E8(24);
  uint64_t v13 = *v12;
  if (v11)
  {
    if (v13 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v14 = sub_59468(a1);
      std::to_string(&v28, v14);
      if ((v28.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        float v15 = &v28;
      }
      else {
        float v15 = (std::string *)v28.__r_.__value_.__r.__words[0];
      }
      buf.int mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "PortUtilities.cpp";
      __int16 v30 = 1024;
      int v31 = 765;
      __int16 v32 = 2080;
      std::string::size_type v33 = (std::string::size_type)v15;
      unint64_t v16 = "%25s:%-5d PlaybackDosimetry: Port Apple bluetooth product = %s";
      unint64_t v17 = v13;
LABEL_31:
      _os_log_impl(&dword_0, v17, OS_LOG_TYPE_DEBUG, v16, (uint8_t *)&buf, 0x1Cu);
    }
  }

  else
  {
    if (v13 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 144LL))(&v28, a1);
      buf.int mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "PortUtilities.cpp";
      __int16 v30 = 1024;
      int v31 = 769;
      __int16 v32 = 2112;
      std::string::size_type v33 = v28.__r_.__value_.__r.__words[0];
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d PlaybackDosimetry: Port bluetooth product name = %@",  (uint8_t *)&buf,  0x1Cu);
      sub_19DFC((uint64_t)&v28);
    }

    LODWORD(v28.__r_.__value_.__l.__data_) = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 120LL))(v4);
    strcpy((char *)&buf, "diabbolg");
    BYTE1(buf.mElement) = 0;
    HIWORD(buf.mElement) = 0;
    unint64_t v18 = sub_36EF4((AudioObjectID *)&v28, &buf, 0, 0LL);
    *((void *)&v21 + 1) = v19;
    *(void *)&__int128 v21 = v18;
    uint64_t v20 = v21 >> 32;
    if ((v20 & 0xFF00000000LL) != 0) {
      uint64_t v22 = v20;
    }
    else {
      uint64_t v22 = 0LL;
    }
    unsigned int v23 = (os_log_t *)sub_138E8(24);
    os_log_t v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_DEBUG))
    {
      sub_2CA1C(&v28, v22);
      if ((v28.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        double v25 = &v28;
      }
      else {
        double v25 = (std::string *)v28.__r_.__value_.__r.__words[0];
      }
      buf.int mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "PortUtilities.cpp";
      __int16 v30 = 1024;
      int v31 = 775;
      __int16 v32 = 2080;
      std::string::size_type v33 = (std::string::size_type)v25;
      unint64_t v16 = "%25s:%-5d PlaybackDosimetry: Port bluetooth product ID = %s";
      unint64_t v17 = v24;
      goto LABEL_31;
    }
  }

void sub_2012C0(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2012E0(CFDictionaryRef *a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a2 + 144);
  memset(v93, 0, 24);
  std::string __p = 0LL;
  __int128 v92 = 0uLL;
  BOOL v5 = (_DWORD)v4 == 1885892674 || (_DWORD)v4 == 1885892706;
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 192);
    if (v6)
    {
      strcpy((char *)buf, "cvodbolg");
      BYTE1(buf[0].mElement) = 0;
      HIWORD(buf[0].mElement) = 0;
      if ((*(unsigned int (**)(uint64_t, AudioObjectPropertyAddress *))(*(void *)v6 + 16LL))(v6, buf))
      {
        CFArrayRef theArray = 0LL;
        int v95 = 0;
        int v96 = 8;
        uint64_t v94 = 0x676C6F62646F7663LL;
        (*(void (**)(uint64_t, uint64_t *, void, void, int *, CFArrayRef *))(*(void *)v6 + 40LL))( v6,  &v94,  0LL,  0LL,  &v96,  &theArray);
        int v7 = theArray;
        if (!theArray)
        {
          std::string::size_type v8 = (os_log_t *)sub_138E8(24);
          float v9 = *v8;
          if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
          {
            AudioObjectPropertyElement v10 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 120LL))(v6);
            buf[0].int mSelector = 136315650;
            *(void *)&buf[0].AudioObjectPropertyScope mScope = "PortUtilities.cpp";
            LOWORD(buf[1].mSelector) = 1024;
            *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 315;
            HIWORD(buf[1].mScope) = 1024;
            buf[1].AudioObjectPropertyElement mElement = v10;
            _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d PlaybackDosimetry : device [%u] does not have volume curve data.",  (uint8_t *)buf,  0x18u);
          }

          int v7 = theArray;
          if (!theArray) {
            goto LABEL_154;
          }
        }

        AudioObjectPropertyElement Count = CFArrayGetCount(v7);
        if (!theArray)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
        }

        AudioObjectPropertyElement v12 = Count;
        sub_1473F4((uint64_t)buf, theArray);
        uint64_t v13 = *(float **)&buf[0].mSelector;
        std::string __p = *(void **)&buf[0].mSelector;
        __int128 v92 = *(_OWORD *)&buf[0].mElement;
        if (*(void *)&buf[0].mElement != *(void *)&buf[0].mSelector
          && *(void *)&buf[0].mElement - *(void *)&buf[0].mSelector >= 5uLL)
        {
          while (*v13 == 0.0)
          {
          }

          __int128 v66 = (os_log_t *)sub_138E8(24);
          __int16 v67 = *v66;
          if (*v66 && os_log_type_enabled(*v66, OS_LOG_TYPE_DEBUG))
          {
            buf[0].int mSelector = 136315650;
            *(void *)&buf[0].AudioObjectPropertyScope mScope = "PortUtilities.cpp";
            LOWORD(buf[1].mSelector) = 1024;
            *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 328;
            HIWORD(buf[1].mScope) = 1024;
            buf[1].AudioObjectPropertyElement mElement = v12;
            _os_log_impl( &dword_0,  v67,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d PlaybackDosimetry : number of volume map steps: %u",  (uint8_t *)buf,  0x18u);
          }

          unint64_t v68 = (os_log_t *)sub_138E8(24);
          __int16 v69 = *v68;
          if (*v68 && os_log_type_enabled(*v68, OS_LOG_TYPE_DEBUG))
          {
            AudioObjectPropertyElement v70 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 120LL))(v6);
            sub_2029E8(&v100, (float *)__p, (float *)v92);
            unint64_t v71 = (v100.__r_.__value_.__s.__size_ & 0x80u) == 0
                ? &v100
                : (std::string *)v100.__r_.__value_.__r.__words[0];
            buf[0].int mSelector = 136315906;
            *(void *)&buf[0].AudioObjectPropertyScope mScope = "PortUtilities.cpp";
            LOWORD(buf[1].mSelector) = 1024;
            *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 330;
            HIWORD(buf[1].mScope) = 1024;
            buf[1].AudioObjectPropertyElement mElement = v70;
            LOWORD(buf[2].mSelector) = 2080;
            *(void *)((char *)&buf[2].mSelector + 2) = v71;
            _os_log_impl( &dword_0,  v69,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d PlaybackDosimetry : fetched volume map from device [%u]: %s",  (uint8_t *)buf,  0x22u);
          }

          int v72 = 1;
LABEL_149:
          if (theArray) {
            CFRelease(theArray);
          }
          if ((_DWORD)v4 == 1885892674 && v72)
          {
            LODWORD(v100.__r_.__value_.__l.__data_) = ((void)v92 - (void)__p) >> 2;
            sub_202AFC(buf, 1885892674LL, v6, (unsigned int *)&v100);
            goto LABEL_161;
          }

LABEL_161:
          if (v93[0])
          {
            v93[1] = v93[0];
            operator delete(v93[0]);
          }

          *(_OWORD *)unint64_t v93 = *(_OWORD *)&buf[0].mSelector;
          v93[2] = *(void **)&buf[1].mScope;
          goto LABEL_165;
        }

  if (!*a2)
  {
    uint64_t v122 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v122, "Could not construct");
  }

  if (sub_D12E8(*a2, (const UInt8 *)"chainType"))
  {
    if (!*a2)
    {
      unint64_t v138 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v138, "Could not construct");
    }

    sub_392A70(v155, *a2, (const UInt8 *)"chainType");
    *(_DWORD *)(a1 + 120) = sub_1581F8((const void **)v155);
    if (*(void *)v155) {
      CFRelease(*(CFTypeRef *)v155);
    }
  }

  if (!*a2)
  {
    int v123 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v123, "Could not construct");
  }

  *(_BYTE *)(a1 + 288) = (unsigned __int16)sub_22C330(*a2, (const UInt8 *)"shouldCache") > 0x100u;
  __int128 v92 = (os_log_t *)sub_138E8(20);
  unint64_t v93 = *v92;
  if (*v92 && os_log_type_enabled(*v92, OS_LOG_TYPE_INFO))
  {
    uint64_t v94 = "true";
    if (!*(_BYTE *)(a1 + 288)) {
      uint64_t v94 = "false";
    }
    else {
      int v95 = *(void **)a1;
    }
    *(_DWORD *)std::string::size_type v155 = 136316162;
    *(void *)&v155[4] = "DSPGraphConfig_Utilities.cpp";
    *(_WORD *)&v155[12] = 1024;
    *(_DWORD *)&v155[14] = 569;
    *(_WORD *)&v155[18] = 2080;
    *(void *)&v155[20] = v94;
    *(_WORD *)&v155[28] = 2080;
    *(void *)&v155[30] = "shouldCache";
    *(_WORD *)&v155[38] = 2080;
    int v156 = v95;
    _os_log_impl(&dword_0, v93, OS_LOG_TYPE_INFO, "%25s:%-5d Parsed value %s for key %s in graph %s", v155, 0x30u);
  }

  if (!*a2)
  {
    std::string::size_type v124 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v124, "Could not construct");
  }

  if (sub_D12E8(*a2, (const UInt8 *)"customMacros"))
  {
    if (!*a2)
    {
      char v139 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v139, "Could not construct");
    }

    sub_1468E4(v155, *a2, (const UInt8 *)"customMacros");
    int v96 = *(const void **)(a1 + 296);
    *(void *)(a1 + 296) = *(void *)v155;
    *(void *)std::string::size_type v155 = v96;
    if (v96) {
      CFRelease(v96);
    }
  }

void sub_2022A4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, CFTypeRef cf, uint64_t a20, uint64_t a21, int a22, __int16 a23, char a24, char a25, void *a26, uint64_t a27, int a28, __int16 a29, char a30, char a31, void *__p, uint64_t a33, int a34, __int16 a35, char a36, char a37, uint64_t buf, int a39, __int16 a40, __int16 a41, __int16 a42, __int16 a43, int a44, CFTypeRef a45)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (a2 == 3)
  {
    unint64_t v48 = __cxa_begin_catch(exception_object);
    std::string::size_type v49 = (os_log_t *)sub_138E8(24);
    os_log_t v50 = *v49;
    if (*v49 && os_log_type_enabled(*v49, OS_LOG_TYPE_DEFAULT))
    {
      int v51 = v48[2];
      LODWORD(buf) = 136315650;
      *(void *)(v45 + 4) = "PortUtilities.cpp";
      a40 = 1024;
      *(_DWORD *)(v45 + 14) = 343;
      a43 = 1024;
      a44 = v51;
      CFStringRef v52 = "%25s:%-5d PlaybackDosimetry : Failed to fetch volume map from device, fallback to default: %u";
      uint64_t v53 = v50;
      uint32_t v54 = 24;
LABEL_15:
      _os_log_impl(&dword_0, v53, OS_LOG_TYPE_DEFAULT, v52, (uint8_t *)&buf, v54);
    }
  }

  else
  {
    uint64_t v55 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      CFIndex v56 = v55;
      CFStringRef v57 = (os_log_t *)sub_138E8(24);
      os_log_t v58 = *v57;
      if (*v57 && os_log_type_enabled(*v57, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v59 = (*(uint64_t (**)(void *))(*(void *)v56 + 16LL))(v56);
        LODWORD(buf) = 136315650;
        *(void *)(v45 + 4) = "PortUtilities.cpp";
        a40 = 1024;
        *(_DWORD *)(v45 + 14) = 345;
        a43 = 2080;
        *(void *)(v45 + 20) = v59;
        CFStringRef v52 = "%25s:%-5d PlaybackDosimetry : Failed to fetch volume map from device, fallback to default: %s";
        uint64_t v53 = v58;
        uint32_t v54 = 28;
        goto LABEL_15;
      }
    }

    else
    {
      unint64_t v60 = (os_log_t *)sub_138E8(24);
      os_log_t v61 = *v60;
      if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 136315394;
        *(void *)(v45 + 4) = "PortUtilities.cpp";
        a40 = 1024;
        *(_DWORD *)(v45 + 14) = 347;
        CFStringRef v52 = "%25s:%-5d PlaybackDosimetry : Failed to fetch volume map from device, fallback to default";
        uint64_t v53 = v61;
        uint32_t v54 = 18;
        goto LABEL_15;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x201EE8LL);
}

void sub_202848(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(void *)(a1 + 192);
  uint64_t v6 = *(unsigned int *)(a1 + 144);
  int v7 = *(_DWORD *)(a1 + 264);
  if (v7 == 1214539380 || v7 == 1751410292)
  {
    if ((sub_1CA280() & 1) != 0
      || MGGetBoolAnswer(@"YiUtBQygkHRhLcdO3LFB4A")
      && MGGetBoolAnswer(@"DeviceSupportsUSBTypeC"))
    {
      goto LABEL_9;
    }
  }

  else if (v7 == 1752709424)
  {
LABEL_9:
    unsigned int v12 = 2;
    sub_202AFC(&__src, v6, v5, &v12);
    float v9 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v9;
      operator delete(v9);
    }

    AudioObjectPropertyElement v10 = (char *)__src;
    *(void *)a2 = __src;
    uint64_t v11 = v14;
    *(_OWORD *)(a2 + 8) = v14;
    return;
  }

  __src = (void *)0x40000000C2980000LL;
  sub_909D8((char *)a2, (char *)&__src, (uint64_t)&v14, 2uLL);
}

std::string *sub_2029E8(std::string *a1, float *a2, float *a3)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      std::to_string(&v9, *a2);
      uint64_t v6 = (v9.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v9 : (std::string *)v9.__r_.__value_.__r.__words[0];
      std::string::size_type v7 = (v9.__r_.__value_.__s.__size_ & 0x80u) == 0 ? v9.__r_.__value_.__s.__size_ : v9.__r_.__value_.__l.__size_;
      std::string::append(a1, (const std::string::value_type *)v6, v7);
      if (++a2 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }

  return std::string::append(a1, " }", 2uLL);
}

void sub_202AC0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_202AFC(void *a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  char v48 = 0;
  double v8 = sub_200938(a2, a3, &v48);
  if (!v48)
  {
    CFDictionaryRef v39 = (os_log_t *)sub_138E8(13);
    uint64_t v40 = *v39;
    if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
    {
      int v41 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 120LL))(a3);
      sub_2CA1C(v46, a2);
      int v42 = v47 >= 0 ? v46 : (void **)v46[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      os_log_t v50 = "PortUtilities.cpp";
      __int16 v51 = 1024;
      int v52 = 284;
      __int16 v53 = 1024;
      int v54 = v41;
      __int16 v55 = 2080;
      CFIndex v56 = v42;
      _os_log_impl( &dword_0,  v40,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Device [%u - %s] does not have volume range.",  buf,  0x22u);
      if (v47 < 0) {
        operator delete(v46[0]);
      }
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Device [%u - %s] does not have volume range.");
  }

  uint64_t v10 = *a4;
  if ((_DWORD)v10)
  {
    double v11 = v8;
    double v12 = v9;
    uint64_t v13 = (char *)sub_7A890(*a4);
    uint64_t v15 = &v13[4 * v14];
    bzero(v13, 4 * v10);
    *(void *)&__int128 v18 = &v13[4 * v10];
    *((void *)&v18 + 1) = v15;
    uint64_t v19 = *a4;
    if ((_DWORD)v19)
    {
      uint64_t v20 = 0LL;
      *(float *)v17.i32 = v11;
      float v21 = v12;
      float v22 = v21 - *(float *)v17.i32;
      uint64x2_t v23 = (uint64x2_t)vdupq_n_s64(v19 - 1);
      *(float *)v16.i32 = v22 / (float)(v10 - 1);
      int64x2_t v24 = (int64x2_t)xmmword_403210;
      int64x2_t v25 = vdupq_n_s64(2uLL);
      uint64_t v26 = (v19 + 1) & 0x1FFFFFFFELL;
      float32x2_t v27 = (float32x2_t)vdup_lane_s32(v16, 0);
      float32x2_t v28 = (float32x2_t)vdup_lane_s32(v17, 0);
      do
      {
        int32x2_t v29 = vmovn_s64((int64x2_t)vcgeq_u64(v23, (uint64x2_t)v24));
        v30.i32[0] = v20;
        v30.i32[1] = v20 + 1;
        float32x2_t v31 = vmla_f32(v28, v27, vcvt_f32_u32(v30));
        if ((v29.i8[0] & 1) != 0) {
          *(_DWORD *)&v13[4 * v20] = v31.i32[0];
        }
        if ((v29.i8[4] & 1) != 0) {
          *(_DWORD *)&v13[4 * v20 + 4] = v31.i32[1];
        }
        v20 += 2LL;
        int64x2_t v24 = vaddq_s64(v24, v25);
      }

      while (v26 != v20);
    }
  }

  else
  {
    uint64_t v13 = 0LL;
    __int128 v18 = 0uLL;
  }

  *a1 = v13;
  uint64_t v44 = (float *)v18;
  *(_OWORD *)(a1 + 1) = v18;
  os_log_t v32 = (os_log_t *)sub_138E8(24);
  std::string::size_type v33 = *v32;
  if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_DEBUG))
  {
    int v34 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 120LL))(a3);
    sub_2CA1C(v46, a2);
    int v35 = v47;
    __int16 v36 = (void **)v46[0];
    sub_2029E8(&__p, (float *)v13, v44);
    os_log_t v37 = v46;
    if (v35 < 0) {
      os_log_t v37 = v36;
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
    os_log_t v50 = "PortUtilities.cpp";
    __int16 v51 = 1024;
    int v52 = 288;
    __int16 v53 = 1024;
    int v54 = v34;
    __int16 v55 = 2080;
    CFIndex v56 = v37;
    __int16 v57 = 2080;
    os_log_t v58 = p_p;
    _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d PlaybackDosimetry : created input volume map for device [%u - %s]: %s",  buf,  0x2Cu);
    if (v47 < 0) {
      operator delete(v46[0]);
    }
  }

void sub_202E84(_Unwind_Exception *exception_object)
{
}

BOOL sub_202EE8(uint64_t a1)
{
  if (!*(void *)(a1 + 192)) {
    return 0LL;
  }
  (*(void (**)(CFTypeRef *__return_ptr))(**(void **)(a1 + 192) + 304LL))(&cf);
  if (!cf) {
    return 0LL;
  }
  CFRelease(cf);
  (*(void (**)(CFTypeRef *__return_ptr))(**(void **)(a1 + 192) + 304LL))(&cf);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  BOOL v3 = (unint64_t)CFArrayGetCount((CFArrayRef)cf) > 1;
  if (cf) {
    CFRelease(cf);
  }
  return v3;
}

void sub_202FCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_203004()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_475D78;
  return result;
}

void sub_203028(uint64_t a1, void *a2)
{
  *a2 = &off_475D78;
}

uint64_t sub_203040()
{
  return 1LL;
}

void *sub_203048(uint64_t *a1, void *a2)
{
  uint64_t v4 = sub_546E0();
  v7[0] = &off_475DC0;
  double v8 = v7;
  sub_FFB0C(a1, v4, a2, (uint64_t)v7);
  uint64_t result = v8;
  if (v8 == v7)
  {
    uint64_t v6 = 4LL;
    uint64_t result = v7;
  }

  else
  {
    if (!v8) {
      return result;
    }
    uint64_t v6 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_2030FC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  uint64_t v15 = a13;
  if (a13 == v13)
  {
    uint64_t v16 = 4LL;
    uint64_t v15 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v16 = 5LL;
  }

  (*(void (**)(void))(*(void *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void *sub_20313C()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_475DC0;
  return result;
}

void sub_203160(uint64_t a1, void *a2)
{
  *a2 = &off_475DC0;
}

BOOL sub_203178(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a2 + 400LL))(a2) == 1;
}

BOOL sub_2031A0()
{
  std::string __p = 0LL;
  float32x2_t v27 = 0LL;
  uint64_t v28 = 0LL;
  strcpy(v29, "cwdv");
  v29[8] = 0;
  int v30 = 3;
  v32[0] = 0LL;
  v32[1] = 0LL;
  float32x2_t v31 = v32;
  CFTypeRef cf = 0LL;
  int v33 = 44722848;
  uint64_t v0 = sub_546E0();
  v35[0] = (uint64_t)&off_475D78;
  os_log_t v37 = v35;
  sub_FFB0C(v22, v0, &__p, (uint64_t)v35);
  sub_9DCB8(&v23, v22);
  sub_85B80(v22);
  uint64_t v1 = v37;
  if (v37 == v35)
  {
    uint64_t v2 = 4LL;
    uint64_t v1 = v35;
  }

  else
  {
    if (!v37) {
      goto LABEL_6;
    }
    uint64_t v2 = 5LL;
  }

  (*(void (**)(void))(*v1 + 8 * v2))();
LABEL_6:
  sub_5541C();
  v35[0] = (uint64_t)v35;
  v35[1] = (uint64_t)v35;
  uint64_t v36 = 0LL;
  BOOL v3 = v24;
  if (v24 != &v23)
  {
    uint64_t v4 = 0LL;
    uint64_t v5 = qword_491020[0];
    uint64_t v6 = (_DWORD *)unk_491028;
    uint64_t v7 = v25;
    do
    {
      uint64_t v8 = v3[2];
      if (v8) {
        LODWORD(v8) = *(_DWORD *)(v8 + 144);
      }
      double v9 = (_DWORD *)v5;
      if ((_DWORD *)v5 == v6)
      {
LABEL_13:
        uint64_t v10 = v3;
      }

      else
      {
        while ((_DWORD)v8 != *v9)
        {
          if (++v9 == v6) {
            goto LABEL_13;
          }
        }

        uint64_t v10 = &v23;
        if ((uint64_t *)v3[1] == &v23)
        {
          char v13 = 1;
        }

        else
        {
          uint64_t v10 = (uint64_t *)v3[1];
          do
          {
            uint64_t v11 = v10[2];
            if (v11) {
              LODWORD(v11) = *(_DWORD *)(v11 + 144);
            }
            double v12 = (_DWORD *)v5;
            while ((_DWORD)v11 != *v12)
            {
              if (++v12 == v6)
              {
                char v13 = 0;
                goto LABEL_28;
              }
            }

            uint64_t v10 = (uint64_t *)v10[1];
          }

          while (v10 != &v23);
          char v13 = 1;
          uint64_t v10 = &v23;
        }

void sub_20343C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2034B8(uint64_t a1)
{
  if (*(void *)(a1 + 192) && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 152LL))(a1))
  {
    int v2 = *(_DWORD *)(a1 + 144);
    if (v2 == 1886216820 || v2 == 1885892706)
    {
      sub_FAA90(v23, a1);
      if (!v23[2])
      {
        uint64_t v16 = 0LL;
LABEL_40:
        sub_85B80(v23);
        return v16;
      }

      sub_B8F68((uint64_t *)&v21, (uint64_t *)(v23[1] + 16), "", 905);
      uint64_t v4 = v21;
      if (v21[24])
      {
        int v5 = (*(uint64_t (**)(void *))(*v21 + 152LL))(v21);
        int v6 = v4[36] == 1885892674 ? v5 : 0;
        if (v6 == 1)
        {
          (*(void (**)(uint64_t *__return_ptr, _DWORD *))(*(void *)v4 + 272LL))(v24, v4);
          sub_EDD50(&v25, v24);
          sub_85B80(v24);
          if (v27)
          {
            uint64_t v7 = v26;
            if (v26 == &v25) {
              goto LABEL_42;
            }
            while (1)
            {
              uint64_t v8 = (std::__shared_weak_count *)v7[3];
              if (v8)
              {
                double v9 = (_DWORD *)v7[2];
                p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
                do
                  unint64_t v11 = __ldxr(p_shared_weak_owners);
                while (__stxr(v11 + 1, p_shared_weak_owners));
                double v12 = std::__shared_weak_count::lock(v8);
                if (v12)
                {
                  char v13 = v12;
                  p_unsigned int shared_owners = (unint64_t *)&v12->__shared_owners_;
                  do
                    unint64_t v15 = __ldaxr(p_shared_owners);
                  while (__stlxr(v15 - 1, p_shared_owners));
                  if (!v15)
                  {
                    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
                    std::__shared_weak_count::__release_weak(v13);
                  }
                }

                else
                {
                  double v9 = 0LL;
                }

                std::__shared_weak_count::__release_weak(v8);
                if (v9 == v4) {
                  break;
                }
              }

              uint64_t v7 = (uint64_t *)v7[1];
              if (v7 == &v25)
              {
                uint64_t v7 = &v25;
                break;
              }
            }

            if (v26 == v7)
            {
LABEL_42:
              uint64_t v16 = 1LL;
              goto LABEL_43;
            }

            if (&v25 != v7)
            {
              uint64_t v16 = 2LL;
LABEL_43:
              sub_1BB88(&v25);
              goto LABEL_35;
            }
          }

          sub_1BB88(&v25);
        }
      }

      uint64_t v16 = 0LL;
LABEL_35:
      uint64_t v17 = v22;
      if (v22)
      {
        uint64_t v18 = (unint64_t *)&v22->__shared_owners_;
        do
          unint64_t v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }

      goto LABEL_40;
    }
  }

  return 0LL;
}

void sub_2036E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  sub_85B80((uint64_t *)va2);
  sub_7A768((uint64_t)va);
  sub_85B80((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20371C(uint64_t a1)
{
  if (!*(void *)(a1 + 192)) {
    return 0LL;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152LL))(a1);
  if (!(_DWORD)result) {
    return result;
  }
  int v3 = *(_DWORD *)(a1 + 144);
  if (v3 != 1886216820 && v3 != 1885892706) {
    return 0LL;
  }
  uint64_t v5 = &v11;
  sub_FAA90(&v11, a1);
  uint64_t v6 = v13;
  if (v13)
  {
    uint64_t v7 = v12;
    if (v12 == &v11)
    {
      LOBYTE(v5) = 0;
    }

    else
    {
      do
      {
        sub_B8F68(&v14, v7 + 2, "", 923);
        LOBYTE(v5) = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 424LL))(v14);
        uint64_t v8 = v15;
        if (v15)
        {
          p_unsigned int shared_owners = (unint64_t *)&v15->__shared_owners_;
          do
            unint64_t v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }

        uint64_t v7 = (uint64_t *)v7[1];
      }

      while (v7 != &v11);
    }
  }

  sub_85B80(&v11);
  return (v6 != 0) & v5;
}

void sub_203850( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  unint64_t v15 = a14;
  if (a14)
  {
    p_unsigned int shared_owners = (unint64_t *)&a14->__shared_owners_;
    do
      unint64_t v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  sub_85B80(&a10);
  _Unwind_Resume(a1);
}

void sub_2038A4(uint64_t *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 144);
  *a1 = 0LL;
  if (v4 == 1886216809) {
    int v5 = 1768845428;
  }
  else {
    int v5 = 1735159650;
  }
  if (v4 == 1886613611 || v4 == 1886545251) {
    AudioObjectPropertyScope v7 = 1869968496;
  }
  else {
    AudioObjectPropertyScope v7 = v5;
  }
  uint64_t v8 = *(void *)(a2 + 192);
  LODWORD(block) = 1936945763;
  HIDWORD(block) = v7;
  LODWORD(v23) = 0;
  if ((*(unsigned int (**)(uint64_t, void ***))(*(void *)v8 + 16LL))(v8, &block))
  {
    AudioObjectID v9 = (*(uint64_t (**)(void))(**(void **)(a2 + 192) + 120LL))(*(void *)(a2 + 192));
    inAddress.AudioObjectPropertyElement mElement = 0;
    AudioObjectID v21 = v9;
    inAddress.int mSelector = 1936945763;
    inAddress.AudioObjectPropertyScope mScope = v7;
    sub_90764((uint64_t)&block, &v21, &inAddress, 0, 0LL);
    int v10 = (int)block;
    if ((_DWORD)block || !(_BYTE)p_p)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_4865A0;
      exception[2] = v10;
    }

    std::string __p = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
    uint64_t v11 = (void *)v23;
    sub_7A5B8(&__p, (const void *)v23, (uint64_t)v24, ((uint64_t)v24 - v23) >> 2);
    if (v11) {
      operator delete(v11);
    }
  }

  else
  {
    std::string __p = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
  }

  switch(v4)
  {
    case 1886216809:
      unsigned __int8 v15 = atomic_load((unsigned __int8 *)&qword_4A92C8);
      if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_4A92C8)) {
        __cxa_guard_release(&qword_4A92C8);
      }
      blocunsigned int k = _NSConcreteStackBlock;
      uint64_t v23 = 0x40000000LL;
      int64x2_t v24 = sub_37EC20;
      uint64_t v25 = &unk_484738;
      p_p = &__p;
      if (qword_4A92D0 != -1) {
        dispatch_once(&qword_4A92D0, &block);
      }
      uint64_t v13 = qword_4A92C0;
      if (qword_4A92C0) {
        CFRetain((CFTypeRef)qword_4A92C0);
      }
      break;
    case 1886545251:
      unsigned __int8 v14 = atomic_load((unsigned __int8 *)&qword_4A92B0);
      if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_4A92B0)) {
        __cxa_guard_release(&qword_4A92B0);
      }
      if (qword_4A92B8 != -1) {
        dispatch_once(&qword_4A92B8, &stru_4846B8);
      }
      uint64_t v13 = qword_4A92A8;
      if (qword_4A92A8) {
        CFRetain((CFTypeRef)qword_4A92A8);
      }
      break;
    case 1886613611:
      unsigned __int8 v12 = atomic_load((unsigned __int8 *)&qword_4A9298);
      if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_4A9298)) {
        __cxa_guard_release(&qword_4A9298);
      }
      blocunsigned int k = _NSConcreteStackBlock;
      uint64_t v23 = 0x40000000LL;
      int64x2_t v24 = sub_37D3D0;
      uint64_t v25 = &unk_484678;
      p_p = &__p;
      if (qword_4A92A0 != -1) {
        dispatch_once(&qword_4A92A0, &block);
      }
      uint64_t v13 = qword_4A9290;
      if (qword_4A9290) {
        CFRetain((CFTypeRef)qword_4A9290);
      }
      break;
    default:
      goto LABEL_35;
  }

  *a1 = v13;
LABEL_35:
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }

void sub_203BF4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18)
{
  if (a18)
  {
    if (__p) {
      operator delete(__p);
    }
  }

  sub_7A6D8(v18);
  _Unwind_Resume(a1);
}

BOOL sub_203C24(uint64_t a1)
{
  if (!a1)
  {
    int v4 = (os_log_t *)sub_138E8(13);
    int v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      uint64_t v8 = "PortUtilities.cpp";
      __int16 v9 = 1024;
      int v10 = 1060;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v7,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 376LL))(a1);
  return (v1 & 0xFF00000000LL) != 0 && (_DWORD)v1 != 0;
}

void sub_203D2C(_Unwind_Exception *exception_object)
{
}

BOOL sub_203D48(int a1)
{
  uint64_t v2 = qword_491040;
  sub_203DB0();
  if (v2 == qword_491048) {
    return 0LL;
  }
  uint64_t v3 = v2 + 4;
  do
  {
    int v4 = *(_DWORD *)(v3 - 4);
    BOOL result = v4 == a1;
    BOOL v6 = v4 == a1 || v3 == qword_491048;
    v3 += 4LL;
  }

  while (!v6);
  return result;
}

void sub_203DB0()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_491058);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_491058))
    {
      qmemcpy(v1, "ptspptrpt2aptfhptelptwhptbtptpcptsaptlaptmaptaaptdhptaup", sizeof(v1));
      sub_1873F8(&qword_491040, v1, 0xEuLL);
      __cxa_guard_release(&qword_491058);
    }
  }

void sub_203E60(_Unwind_Exception *a1)
{
}

void sub_203E78(void *a1, uint64_t a2, uint64_t a3)
{
  int v5 = (uint64_t *)v16[1];
  sub_82AF0((uint64_t)v19, a3);
  BOOL v6 = v16;
  if (v5 != v16)
  {
    BOOL v6 = v5;
    while (1)
    {
      sub_B8F68(&v17, v6 + 2, "", 1102);
      if (!v20) {
        sub_82CEC();
      }
      char v7 = (*(uint64_t (**)(_BYTE *, uint64_t))(*(void *)v20 + 48LL))(v20, v17);
      uint64_t v8 = v18;
      if (v18)
      {
        p_unsigned int shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          unint64_t v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }

      if ((v7 & 1) != 0) {
        break;
      }
      BOOL v6 = (uint64_t *)v6[1];
      if (v6 == v16)
      {
        BOOL v6 = v16;
        break;
      }
    }
  }

  uint64_t v11 = v20;
  if (v20 == v19)
  {
    uint64_t v12 = 4LL;
    uint64_t v11 = v19;
  }

  else
  {
    if (!v20) {
      goto LABEL_17;
    }
    uint64_t v12 = 5LL;
  }

  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_17:
  if (v6 == v16)
  {
    *a1 = 0LL;
    a1[1] = 0LL;
  }

  else
  {
    *a1 = v6[2];
    uint64_t v13 = v6[3];
    a1[1] = v13;
    if (v13)
    {
      unsigned __int8 v14 = (unint64_t *)(v13 + 16);
      do
        unint64_t v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
  }

  sub_85B80(v16);
}

void sub_204008( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_2040A8()
{
  BOOL result = operator new(0x10uLL);
  void *result = &off_475E08;
  return result;
}

void sub_2040CC(uint64_t a1, void *a2)
{
  *a2 = &off_475E08;
}

BOOL sub_2040E4(uint64_t a1, uint64_t a2)
{
  return (*(_WORD *)(a2 + 184) & 1) == 0;
}

void *sub_2040F4(void *a1, uint64_t a2)
{
  v4[0] = &off_475E50;
  int v5 = v4;
  sub_203E78(a1, a2, (uint64_t)v4);
  BOOL result = v5;
  if (v5 == v4)
  {
    uint64_t v3 = 4LL;
    BOOL result = v4;
  }

  else
  {
    if (!v5) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_204188( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  unsigned __int8 v14 = a13;
  if (a13 == &a10)
  {
    uint64_t v15 = 4LL;
    unsigned __int8 v14 = &a10;
  }

  else
  {
    if (!a13) {
      goto LABEL_6;
    }
    uint64_t v15 = 5LL;
  }

  (*(void (**)(void))(*(void *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void *sub_2041CC()
{
  BOOL result = operator new(0x10uLL);
  void *result = &off_475E50;
  return result;
}

void sub_2041F0(uint64_t a1, void *a2)
{
  *a2 = &off_475E50;
}

BOOL sub_204208(uint64_t a1, uint64_t a2)
{
  return sub_203D48(*(_DWORD *)(a2 + 144));
}

uint64_t sub_204210(_BYTE *a1, uint64_t a2, double a3)
{
  int v9 = 1651798886;
  double v10 = a3;
  if ((sub_5C3C4(a2) & 1) == 0)
  {
    LOBYTE(v14) = 0;
    char v15 = 0;
    LOBYTE(v7) = 0;
    char v8 = 0;
    sub_8D530((uint64_t)&v14);
LABEL_8:
    *a1 = 0;
    a1[8] = 0;
    return sub_8D530((uint64_t)&v7);
  }

  LOBYTE(v14) = 0;
  char v15 = 0;
  LOBYTE(v7) = 0;
  char v8 = 0;
  sub_8D530((uint64_t)&v14);
  unsigned __int8 v14 = 0LL;
  int v5 = v14;
  CFTypeRef v12 = v14;
  sub_360D4(&v11, &v12);
  char v8 = 1;
  uint64_t v7 = v11;
  if (v5) {
    CFRelease(v5);
  }
  *(void *)a1 = v7;
  uint64_t v7 = 0LL;
  a1[8] = 1;
  return sub_8D530((uint64_t)&v7);
}

BOOL sub_204348(uint64_t a1, const UInt8 *a2)
{
  if (!v7)
  {
    sub_8D530((uint64_t)&v6);
    return 0LL;
  }

  uint64_t v3 = v6;
  BOOL v6 = 0LL;
  sub_8D530((uint64_t)&v6);
  if (!v3) {
    return 0LL;
  }
  BOOL v4 = (unsigned __int16)sub_1468B4(v3, a2) > 0x100u;
  CFRelease(v3);
  return v4;
}

BOOL sub_2043D4(uint64_t a1)
{
  BOOL v2 = sub_204348(a1, (const UInt8 *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

uint64_t sub_20442C(uint64_t a1, int a2)
{
  uint64_t v3 = (void *)sub_EAD14();
  *(void *)char v8 = CFStringCreateWithCString(0LL, "AOP Audio-1", 0x600u);
  v8[8] = 1;
  uint64_t v4 = sub_EAE28(v3, (CFStringRef *)v8);
  sub_19DFC((uint64_t)v8);
  if (!v4)
  {
    char v5 = (os_log_t *)sub_138E8(13);
    BOOL v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)char v8 = 136315394;
      *(void *)&v8[4] = "PortUtilities.cpp";
      __int16 v9 = 1024;
      int v10 = 1207;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Low power microphone device is expected but not available.",  v8,  0x12u);
    }

    return *(void *)(a1 + 192);
  }

  return v4;
}

void sub_204554(_Unwind_Exception *exception_object)
{
}

BOOL sub_204570(int a1, uint64_t a2)
{
  if (a1 != 1885892727 || a2 == 0) {
    return 0LL;
  }
  LODWORD(v14) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120LL))(a2);
  uint64_t inAddress = 0x676C6F6268656164LL;
  LODWORD(inAddress_8) = 0;
  sub_C57E0((uint64_t)&v19, (AudioObjectID *)&v14, (AudioObjectPropertyAddress *)&inAddress);
  if (!v22) {
    return 0LL;
  }
  uint64_t v3 = v21;
  AudioObjectID v21 = 0LL;
  uint64_t v16 = &off_486378;
  CFDictionaryRef theDict = v3;
  char v18 = 1;
  sub_39FD8(&v20);
  if (!v18) {
    return 0LL;
  }
  if ((sub_782DC(theDict, @"hasAudioJack") & 1) == 0)
  {
    if (v18) {
      sub_39FD8(&v16);
    }
    return 0LL;
  }

  unsigned __int8 v14 = &off_475E98;
  CFBooleanRef BOOLean = 0LL;
  if (!theDict) {
    goto LABEL_34;
  }
  value = 0LL;
  if (CFDictionaryGetValueIfPresent(theDict, @"hasAudioJack", (const void **)&value))
  {
    if (value) {
      CFTypeID v4 = CFGetTypeID(value);
    }
    else {
      CFTypeID v4 = 0LL;
    }
    CFTypeID TypeID = CFBooleanGetTypeID();
    CFTypeID v8 = (CFTypeID)value;
    if (v4 == TypeID)
    {
      if (value)
      {
        CFRetain(value);
        uint64_t v9 = v8;
      }

      else
      {
        uint64_t v9 = 0LL;
      }

      sub_783AC((uint64_t)&v14, v9);
    }

    else
    {
      if (value) {
        CFTypeID v8 = CFGetTypeID(value);
      }
      if (v8 == CFNumberGetTypeID())
      {
        int v10 = (const __CFNumber *)value;
        if (value) {
          CFRetain(value);
        }
        uint64_t v19 = &off_47D048;
        uint64_t v20 = v10;
        unsigned int v11 = sub_20479C(v10);
        CFTypeRef v12 = (CFTypeRef *)&kCFBooleanTrue;
        if (!v11) {
          CFTypeRef v12 = (CFTypeRef *)&kCFBooleanFalse;
        }
        uint64_t v13 = (const __CFBoolean *)*v12;
        if (*v12) {
          CFRetain(*v12);
        }
        CFBooleanRef BOOLean = v13;
        uint64_t inAddress = (uint64_t)&off_475E98;
        uint64_t inAddress_8 = 0LL;
        sub_39FD8(&inAddress);
        sub_39FD8(&v19);
      }
    }
  }

  if (BOOLean) {
    BOOL v5 = CFBooleanGetValue(BOOLean) != 0;
  }
  else {
LABEL_34:
  }
    BOOL v5 = 0LL;
  sub_39FD8(&v14);
  if (v18) {
    sub_39FD8(&v16);
  }
  return v5;
}

CFNumberRef sub_20479C(const __CFNumber *result)
{
  unsigned int valuePtr = 0;
  if (result)
  {
    CFNumberGetValue(result, kCFNumberSInt32Type, &valuePtr);
    return (const __CFNumber *)valuePtr;
  }

  return result;
}

void sub_2047D4(void *a1)
{
  uint64_t v1 = sub_39FD8(a1);
  operator delete(v1);
}

uint64_t sub_2047E8(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      BOOL v2 = "unkn";
      goto LABEL_3;
    case 1:
      uint64_t v4 = 4362LL;
      goto LABEL_6;
    case 2:
      uint64_t v4 = 5904LL;
      goto LABEL_6;
    case 3:
      BOOL v2 = "dlit";
      goto LABEL_3;
    case 4:
      BOOL v2 = "hlit";
      goto LABEL_3;
    case 5:
      uint64_t v4 = 4363LL;
LABEL_6:
      uint64_t result = sub_2CA1C(a1, v4);
      break;
    default:
      BOOL v2 = "";
LABEL_3:
      uint64_t result = (uint64_t)sub_7D084(a1, v2);
      break;
  }

  return result;
}

void sub_204854(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 88);
  uint64_t v11 = *(void *)(a2 + 80);
  CFTypeRef v12 = v4;
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      unint64_t v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
  }

  sub_FA188(a1, (uint64_t)&v11);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v7 = *(void *)(a1 + 80);
  CFTypeID v8 = *(std::__shared_weak_count **)(a1 + 88);
  uint64_t v11 = v7;
  CFTypeRef v12 = v8;
  if (v8)
  {
    uint64_t v9 = (unint64_t *)&v8->__shared_weak_owners_;
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  sub_FA188(a2, (uint64_t)&v11);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_204904(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_20492C(int a1)
{
  uint64_t v2 = qword_491080;
  sub_204994();
  if (v2 == qword_491088) {
    return 1LL;
  }
  uint64_t v3 = v2 + 4;
  do
  {
    int v4 = *(_DWORD *)(v3 - 4);
    BOOL result = v4 != a1;
    BOOL v6 = v4 == a1 || v3 == qword_491088;
    v3 += 4LL;
  }

  while (!v6);
  return result;
}

void sub_204994()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_491078);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_491078))
  {
    qmemcpy(v1, " papibdhcnapcahplunpilnpnlupnldpmfbpferp", sizeof(v1));
    sub_1873F8(qword_491060, v1, 0xAuLL);
    __cxa_guard_release(&qword_491078);
  }

  if (qword_491080 == qword_491088)
  {
    sub_204AAC((char *)qword_491080, (char *)qword_491060[0], unk_491068, (unk_491068 - qword_491060[0]) >> 2);
    sub_203DB0();
    sub_204AAC((char *)qword_491088, (char *)qword_491040, (char *)qword_491048, (qword_491048 - qword_491040) >> 2);
  }

void sub_204A8C(_Unwind_Exception *a1)
{
}

void sub_204AAC(char *__dst, char *__src, char *a3, uint64_t a4)
{
  if (a4 < 1) {
    return;
  }
  BOOL v5 = __src;
  unint64_t v7 = qword_491088;
  if (a4 > (qword_491090 - qword_491088) >> 2)
  {
    unint64_t v8 = a4 + ((qword_491088 - qword_491080) >> 2);
    if (v8 >> 62) {
      sub_7A87C();
    }
    uint64_t v9 = (uint64_t)&__dst[-qword_491080] >> 2;
    uint64_t v10 = qword_491090 - qword_491080;
    if ((qword_491090 - qword_491080) >> 1 > v8) {
      unint64_t v8 = v10 >> 1;
    }
    else {
      unint64_t v11 = v8;
    }
    __p[4] = &qword_491090;
    if (v11) {
      unint64_t v11 = (unint64_t)sub_7A890(v11);
    }
    else {
      uint64_t v12 = 0LL;
    }
    char v22 = (_DWORD *)(v11 + 4 * v9);
    __p[0] = (void *)v11;
    __p[1] = v22;
    __p[3] = (void *)(v11 + 4 * v12);
    uint64_t v23 = 4 * a4;
    int64x2_t v24 = &v22[a4];
    do
    {
      int v25 = *(_DWORD *)v5;
      v5 += 4;
      *v22++ = v25;
      v23 -= 4LL;
    }

    while (v23);
    __p[2] = v24;
    sub_1876D4((void **)&qword_491080, (uint64_t)__p, __dst);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    return;
  }

  uint64_t v13 = qword_491088 - (void)__dst;
  uint64_t v14 = (qword_491088 - (uint64_t)__dst) >> 2;
  if (v14 >= a4)
  {
    char v15 = &__src[4 * a4];
    uint64_t v17 = qword_491088;
LABEL_17:
    char v18 = &__dst[4 * a4];
    uint64_t v19 = (int *)(v17 - 4 * a4);
    uint64_t v20 = (_DWORD *)v17;
    if ((unint64_t)v19 < v7)
    {
      uint64_t v20 = (_DWORD *)v17;
      do
      {
        int v21 = *v19++;
        *v20++ = v21;
      }

      while ((unint64_t)v19 < v7);
    }

    qword_491088 = (uint64_t)v20;
    if (v15 != v5) {
      memmove(__dst, v5, v15 - v5);
    }
    return;
  }

  char v15 = &__src[4 * v14];
  int64_t v16 = a3 - v15;
  if (a3 != v15) {
    memmove((void *)qword_491088, &__src[4 * v14], a3 - v15);
  }
  uint64_t v17 = v7 + v16;
  qword_491088 = v7 + v16;
  if (v13 >= 1) {
    goto LABEL_17;
  }
}

void sub_204C7C(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 480LL))(a1))
  {
    uint64_t v2 = *(const void **)(a1 + 248);
    int v4 = v2;
    if (*(_BYTE *)(a1 + 256)) {
      BOOL v3 = v2 == 0LL;
    }
    else {
      BOOL v3 = 1;
    }
    if (!v3) {
      CFRetain(v2);
    }
    sub_15869C(&cf, v2);
    sub_19DFC((uint64_t)&v4);
    if (cf) {
      CFRelease(cf);
    }
  }

void sub_204CF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_204D10(uint64_t a1)
{
  uint64_t v1 = (void *)sub_36F1E0(a1);
  operator delete(v1);
}

uint64_t sub_204D24(os_unfair_lock_s *a1)
{
  uint64_t v2 = (os_log_t *)sub_138E8(17);
  BOOL v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEBUG))
  {
    int v12 = 136315394;
    uint64_t v13 = "Device_LPMic_Injector_Aspen.cpp";
    __int16 v14 = 1024;
    int v15 = 20;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d initializing Device_HAL_Common", (uint8_t *)&v12, 0x12u);
  }

  sub_36A36C(a1);
  int v4 = (os_log_t *)sub_138E8(17);
  BOOL v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    int v12 = 136315650;
    uint64_t v13 = "Device_LPMic_Injector_Aspen.cpp";
    __int16 v14 = 1024;
    int v15 = 22;
    __int16 v16 = 1024;
    int v17 = 1;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d initialized Device_HAL_Common: %u", (uint8_t *)&v12, 0x18u);
  }

  BOOL v6 = (os_log_t *)sub_138E8(17);
  unint64_t v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEBUG))
  {
    int v12 = 136315394;
    uint64_t v13 = "Device_LPMic_Injector_Aspen.cpp";
    __int16 v14 = 1024;
    int v15 = 26;
    _os_log_impl(&dword_0, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating controls and ports", (uint8_t *)&v12, 0x12u);
  }

  if (!(*(unsigned int (**)(os_unfair_lock_s *, uint64_t))(*(void *)&a1->_os_unfair_lock_opaque + 88LL))( a1,  1LL))
  {
    uint64_t v9 = (os_log_t *)sub_138E8(13);
    uint64_t v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      uint64_t v13 = "Device_LPMic_Injector_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 27;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): LPMic-Injector output device has no output streams.",  (uint8_t *)&v12,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "LPMic-Injector output device has no output streams.");
  }

  sub_373CEC((uint64_t *)a1, &qword_4910E0, 1);
  return 1LL;
}

void sub_204F9C(_Unwind_Exception *a1)
{
}

uint64_t sub_204FB8(uint64_t a1, unsigned int a2)
{
  if (a2 != 1819306350)
  {
    BOOL v3 = (os_log_t *)sub_138E8(17);
    int v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, a2);
      BOOL v5 = v11 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      uint64_t v13 = "Device_LPMic_Injector_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 46;
      __int16 v16 = 2080;
      int v17 = v5;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).",  buf,  0x1Cu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }

    BOOL v6 = (os_log_t *)sub_138E8(13);
    unint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v13 = "Device_LPMic_Injector_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 47;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unsupported VirtualAudioPortType.",  buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }

  return 0LL;
}

void sub_205164(_Unwind_Exception *a1)
{
}

void sub_205184(uint64_t a1)
{
  uint64_t v1 = (void *)sub_208FC0(a1);
  operator delete(v1);
}

BOOL sub_205198(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  if (a2->mSelector == 1937006964) {
    return 1LL;
  }
  sub_1BB60((std::mutex *)a1);
  return AudioObjectHasProperty(*(_DWORD *)(a1 + 268), a2) != 0;
}

BOOL sub_2051EC(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  return a2->mSelector == 1937006964 || sub_36854C(a1, a2);
}

uint64_t sub_20520C(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    uint64_t v9 = (os_log_t *)sub_138E8(13);
    uint64_t v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v17);
      char v11 = v20 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      char v22 = "Device_CarPlay_Aspen.cpp";
      __int16 v23 = 1024;
      int v24 = 397;
      __int16 v25 = 2080;
      uint64_t v26 = v11;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((a3 != 0) == (a4 == 0LL))
  {
    uint64_t v13 = (os_log_t *)sub_138E8(13);
    __int16 v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v17);
      int v15 = v20 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      char v22 = "Device_CarPlay_Aspen.cpp";
      __int16 v23 = 1024;
      int v24 = 398;
      __int16 v25 = 2080;
      uint64_t v26 = v15;
      __int16 v27 = 1024;
      UInt32 v28 = a3;
      __int16 v29 = 2048;
      int v30 = a4;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }

    __int16 v16 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v16 = &off_4865A0;
    v16[2] = 561211770;
  }

  if (a2->mSelector == 1937006964) {
    return 4LL;
  }
  else {
    return sub_21524(a1, a2, a3, a4);
  }
}

void sub_2054E4( _DWORD *a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4, UInt32 *a5, float *a6)
{
  if (((*(uint64_t (**)(_DWORD *))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    __int16 v16 = (os_log_t *)sub_138E8(13);
    uint64_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v32);
      char v18 = v35 >= 0 ? __p : (void **)__p[0];
      buf.int mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
      __int16 v37 = 1024;
      int v38 = 419;
      __int16 v39 = 2080;
      uint64_t v40 = (const char *)v18;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  (uint8_t *)&buf,  0x1Cu);
      if (v35 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((a3 != 0) == (a4 == 0LL))
  {
    char v20 = (os_log_t *)sub_138E8(13);
    int v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v32);
      char v22 = v35 >= 0 ? __p : (void **)__p[0];
      buf.int mSelector = 136316162;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
      __int16 v37 = 1024;
      int v38 = 420;
      __int16 v39 = 2080;
      uint64_t v40 = (const char *)v22;
      __int16 v41 = 1024;
      LODWORD(v42[0]) = a3;
      WORD2(v42[0]) = 2048;
      *(void *)((char *)v42 + 6) = a4;
      _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        (uint8_t *)&buf,
        0x2Cu);
      if (v35 < 0) {
        operator delete(__p[0]);
      }
    }

    __int16 v23 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v23 = &off_4865A0;
    void v23[2] = 561211770;
  }

  if (!a6)
  {
    int v24 = (os_log_t *)sub_138E8(13);
    __int16 v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v32);
      uint64_t v26 = v35 >= 0 ? __p : (void **)__p[0];
      buf.int mSelector = 136315906;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
      __int16 v37 = 1024;
      int v38 = 421;
      __int16 v39 = 2080;
      uint64_t v40 = "outData";
      __int16 v41 = 2080;
      v42[0] = v26;
      _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  (uint8_t *)&buf,  0x26u);
      if (v35 < 0) {
        operator delete(__p[0]);
      }
    }

    __int16 v27 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v27 = &off_4865A0;
    v27[2] = 561211770;
  }

  if (a2->mSelector == 1937006964)
  {
    int v12 = a1[123];
    if (v12 != 1937006968 && v12 != 1937010030)
    {
      __int16 v29 = (os_log_t *)sub_138E8(13);
      int v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        buf.int mSelector = 136315394;
        *(void *)&buf.AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
        __int16 v37 = 1024;
        int v38 = 426;
        _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&buf,  0x12u);
      }

      float32x2_t v31 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v31, "Precondition failure.");
    }

    LODWORD(__p[0]) = a1[67];
    strcpy((char *)&buf, "tatsbolg");
    BYTE1(buf.mElement) = 0;
    HIWORD(buf.mElement) = 0;
    unint64_t v13 = sub_36EF4((AudioObjectID *)__p, &buf, 0, 0LL);
    int v15 = v13;
    if ((_DWORD)v13 || !v14)
    {
      UInt32 v28 = __cxa_allocate_exception(0x10uLL);
      *(void *)UInt32 v28 = &off_4865A0;
      _OWORD v28[2] = v15;
    }

    sub_5CABC(SHIDWORD(v13), a5, a6);
  }

  else
  {
    sub_232A4((uint64_t)a1, a2, a3, a4, a5, a6);
  }

void sub_205A14(_Unwind_Exception *a1)
{
}

uint64_t sub_205A30( uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4, UInt32 a5, float *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    os_log_t v50 = (os_log_t *)sub_138E8(13);
    __int16 v51 = *v50;
    if (*v50 && os_log_type_enabled(*v50, OS_LOG_TYPE_ERROR))
    {
      __p.__r_.__value_.__r.__words[0] = *(void *)&a2->mSelector;
      LODWORD(__p.__r_.__value_.__r.__words[1]) = a2->mElement;
      sub_613AC((uint64_t)&__lk, (unsigned int *)&__p);
      int v52 = v84 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
      buf.int mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
      __int16 v86 = 1024;
      int v87 = 439;
      __int16 v88 = 2080;
      uint64_t v89 = (const char *)v52;
      _os_log_impl( &dword_0,  v51,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  (uint8_t *)&buf,  0x1Cu);
      if (v84 < 0) {
        operator delete(__lk.__m_);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((a3 != 0) == (a4 == 0LL))
  {
    int v54 = (os_log_t *)sub_138E8(13);
    __int16 v55 = *v54;
    if (*v54 && os_log_type_enabled(*v54, OS_LOG_TYPE_ERROR))
    {
      __p.__r_.__value_.__r.__words[0] = *(void *)&a2->mSelector;
      LODWORD(__p.__r_.__value_.__r.__words[1]) = a2->mElement;
      sub_613AC((uint64_t)&__lk, (unsigned int *)&__p);
      CFIndex v56 = v84 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
      buf.int mSelector = 136316162;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
      __int16 v86 = 1024;
      int v87 = 440;
      __int16 v88 = 2080;
      uint64_t v89 = (const char *)v56;
      __int16 v90 = 1024;
      LODWORD(v91[0]) = a3;
      WORD2(v91[0]) = 2048;
      *(void *)((char *)v91 + 6) = a4;
      _os_log_impl( &dword_0,  v55,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        (uint8_t *)&buf,
        0x2Cu);
      if (v84 < 0) {
        operator delete(__lk.__m_);
      }
    }

    __int16 v57 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v57 = &off_4865A0;
    void v57[2] = 561211770;
  }

  if (!a6)
  {
    os_log_t v58 = (os_log_t *)sub_138E8(13);
    uint64_t v59 = *v58;
    if (*v58 && os_log_type_enabled(*v58, OS_LOG_TYPE_ERROR))
    {
      __p.__r_.__value_.__r.__words[0] = *(void *)&a2->mSelector;
      LODWORD(__p.__r_.__value_.__r.__words[1]) = a2->mElement;
      sub_613AC((uint64_t)&__lk, (unsigned int *)&__p);
      unint64_t v60 = v84 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
      buf.int mSelector = 136315906;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
      __int16 v86 = 1024;
      int v87 = 441;
      __int16 v88 = 2080;
      uint64_t v89 = "inData";
      __int16 v90 = 2080;
      v91[0] = v60;
      _os_log_impl( &dword_0,  v59,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  (uint8_t *)&buf,  0x26u);
      if (v84 < 0) {
        operator delete(__lk.__m_);
      }
    }

    os_log_t v61 = __cxa_allocate_exception(0x10uLL);
    *(void *)os_log_t v61 = &off_4865A0;
    v61[2] = 561211770;
  }

  if (((*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *))(*(void *)a1 + 24LL))(a1, a2) & 1) == 0)
  {
    uint64_t v62 = (os_log_t *)sub_138E8(13);
    __int128 v63 = *v62;
    if (*v62 && os_log_type_enabled(*v62, OS_LOG_TYPE_ERROR))
    {
      __p.__r_.__value_.__r.__words[0] = *(void *)&a2->mSelector;
      LODWORD(__p.__r_.__value_.__r.__words[1]) = a2->mElement;
      sub_613AC((uint64_t)&__lk, (unsigned int *)&__p);
      uint64_t v64 = v84 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
      buf.int mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
      __int16 v86 = 1024;
      int v87 = 442;
      __int16 v88 = 2080;
      uint64_t v89 = (const char *)v64;
      _os_log_impl( &dword_0,  v63,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not settable.",  (uint8_t *)&buf,  0x1Cu);
      if (v84 < 0) {
        operator delete(__lk.__m_);
      }
    }

    unint64_t v65 = __cxa_allocate_exception(0x10uLL);
    *(void *)unint64_t v65 = &off_4865A0;
    v65[2] = 1852797029;
  }

  if (a2->mSelector != 1937138532)
  {
    if (a2->mSelector != 1937006964) {
      return sub_3686A0(a1, a2, a3, a4, a5, a6);
    }
    int v12 = *(_DWORD *)(a1 + 492);
    if (v12 != 1937006968 && v12 != 1937010030)
    {
      uint64_t v75 = (os_log_t *)sub_138E8(13);
      CFDictionaryRef v76 = *v75;
      if (*v75 && os_log_type_enabled(*v75, OS_LOG_TYPE_ERROR))
      {
        buf.int mSelector = 136315394;
        *(void *)&buf.AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
        __int16 v86 = 1024;
        int v87 = 448;
        _os_log_impl( &dword_0,  v76,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&buf,  0x12u);
      }

      uint64_t v77 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v77, "Precondition failure.");
    }

    *(float *)&uint64_t v78 = *a6;
    uint64_t v13 = sub_138E8(17);
    uint64_t v14 = sub_138E8(29);
    char v15 = 0;
    uint64_t v16 = 0LL;
    *(void *)&buf.int mSelector = 0x100000002LL;
    uint64_t v17 = *(void *)(v13 + 8);
    do
    {
      uint64_t v18 = *((int *)&buf.mSelector + v16);
      char v19 = v15;
      if (((v17 & v18) != 0) != ((*(void *)(v14 + 8) & v18) != 0))
      {
        if ((v17 & v18) == 0) {
          uint64_t v13 = v14;
        }
        if ((*(void *)(v13 + 8) & 1) != 0) {
          goto LABEL_24;
        }
        goto LABEL_35;
      }

      char v15 = 1;
      uint64_t v16 = 1LL;
    }

    while ((v19 & 1) == 0);
    if ((v17 & 1) == 0) {
      goto LABEL_35;
    }
LABEL_24:
    UInt32 v28 = *(os_log_s **)v13;
    if (v28 && os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      int v80 = *(const __CFDictionary **)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)&__lk, (unsigned int *)&v80);
      int v29 = v84;
      unsigned int m = __lk.__m_;
      sub_2CA1C(&__p, v78);
      p_lunsigned int k = &__lk;
      if (v29 < 0) {
        p_lunsigned int k = (std::unique_lock<std::mutex> *)m;
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      buf.int mSelector = 136315906;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
      __int16 v86 = 1024;
      int v87 = 452;
      __int16 v88 = 2080;
      uint64_t v89 = (const char *)p_lk;
      __int16 v90 = 2080;
      v91[0] = p_p;
      _os_log_impl(&dword_0, v28, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting property %s to %s.", (uint8_t *)&buf, 0x26u);
      if (v84 < 0) {
        operator delete(__lk.__m_);
      }
    }

void sub_2067C4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, char a17, int a18, int a19, __int16 a20, char a21, char a22, char a23)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_13850((uint64_t)&a11);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_206868(uint64_t a1)
{
  uint64_t v2 = operator new(0xCuLL);
  BOOL v5 = v2 + 3;
  BOOL v6 = (char *)(v2 + 3);
  *(void *)uint64_t v2 = qword_491188;
  v2[2] = dword_491190;
  std::string __p = v2;
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 424LL))(a1, &__p);
  if (__p)
  {
    BOOL v5 = __p;
    operator delete(__p);
  }

  return sub_369228(a1);
}

void sub_2068E4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_206900(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 88LL))(a1, 1LL);
  int v3 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 88LL))(a1, 0LL);
  int v4 = *(_DWORD *)(a1 + 492);
  if (v4 == 1937010030 && v3 == 0)
  {
    uint64_t v171 = (os_log_t *)sub_138E8(13);
    unint64_t v172 = *v171;
    if (*v171 && os_log_type_enabled(*v171, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_CarPlay_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = 181;
      _os_log_impl( &dword_0,  v172,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): CarPlay main audio device lacks an input stream.",  buf,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CarPlay main audio device lacks an input stream.");
  }

  if (v4 == 1937010030 && v2 == 0)
  {
    unint64_t v174 = (os_log_t *)sub_138E8(13);
    uint64_t v175 = *v174;
    if (*v174 && os_log_type_enabled(*v174, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_CarPlay_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = 182;
      _os_log_impl( &dword_0,  v175,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): CarPlay main audio device lacks an output stream.",  buf,  0x12u);
    }

    unint64_t v176 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v176, "CarPlay main audio device lacks an output stream.");
  }

  int v7 = v3;
  if (v4 == 1937006956 && v3)
  {
    unint64_t v177 = (os_log_t *)sub_138E8(13);
    unint64_t v178 = *v177;
    if (*v177 && os_log_type_enabled(*v177, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_CarPlay_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = 183;
      _os_log_impl( &dword_0,  v178,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): CarPlay alternate audio device incorrectly has an input stream.",  buf,  0x12u);
    }

    char v179 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v179, "CarPlay alternate audio device incorrectly has an input stream.");
  }

  if (v4 == 1937006956 && !v2)
  {
    v180 = (os_log_t *)sub_138E8(13);
    uint64_t v181 = *v180;
    if (*v180 && os_log_type_enabled(*v180, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_CarPlay_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = 184;
      _os_log_impl( &dword_0,  v181,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): CarPlay alternate audio device lacks an output stream.",  buf,  0x12u);
    }

    CFTypeRef v182 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v182, "CarPlay alternate audio device lacks an output stream.");
  }

  if (v4 == 1937006968 && (v2 != 0) == (v3 != 0))
  {
    uint64_t v183 = (os_log_t *)sub_138E8(13);
    uint64_t v184 = *v183;
    if (*v183 && os_log_type_enabled(*v183, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_CarPlay_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = 185;
      _os_log_impl( &dword_0,  v184,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): CarPlay aux audio device has incorrect streams",  buf,  0x12u);
    }

    unint64_t v185 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v185, "CarPlay aux audio device has incorrect streams");
  }

  if (v4 == 1937006956) {
    unsigned int v8 = 1886614625;
  }
  else {
    unsigned int v8 = 1886609775;
  }
  if (v4 == 1937010030) {
    uint64_t v9 = 1886614639LL;
  }
  else {
    uint64_t v9 = v8;
  }
  if (v2)
  {
    uint64_t v10 = operator new(0x50uLL);
    sub_EC558((uint64_t)v10);
    sub_1D5AE0((void *)a1, (uint64_t)v10);
    sub_1D55D4((uint64_t *)a1, 1u, v9, (uint64_t)v10);
    char v11 = operator new(0x68uLL);
    sub_EC5B8((uint64_t)v11, 0);
    sub_1D5AE0((void *)a1, (uint64_t)v11);
    sub_1D580C(a1, 1u, v9, (uint64_t)v11);
  }

  if (v7)
  {
    int v12 = operator new(0x68uLL);
    sub_EC5B8((uint64_t)v12, 0);
    sub_1D5AE0((void *)a1, (uint64_t)v12);
    sub_1D580C(a1, 0, 1886614633LL, (uint64_t)v12);
  }

  LODWORD(v202[0]) = *(_DWORD *)(a1 + 268);
  strcpy(buf, "tttsbolg");
  buf[9] = 0;
  *(_WORD *)&_DWORD buf[10] = 0;
  unint64_t v13 = sub_36EF4((AudioObjectID *)v202, (const AudioObjectPropertyAddress *)buf, 0, 0LL);
  int v15 = v13;
  if ((_DWORD)v13 || !v14)
  {
    int v186 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v186 = &off_4865A0;
    v186[2] = v15;
  }

  if (HIDWORD(v13) == 1937012588) {
    int v16 = 1885544823;
  }
  else {
    int v16 = 1885566825;
  }
  uint64_t v17 = &unk_3FF000;
  if (*(_DWORD *)(a1 + 492) == 1937010030)
  {
    if (v2 && v7) {
      goto LABEL_43;
    }
    uint64_t v18 = sub_138E8(17);
    uint64_t v19 = sub_138E8(29);
    char v20 = 0;
    uint64_t v21 = 0LL;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
    uint64_t v22 = *(void *)(v18 + 8);
    while (1)
    {
      uint64_t v23 = *(int *)&buf[4 * v21];
      char v24 = v20;
      if (((v22 & v23) != 0) != ((*(void *)(v19 + 8) & v23) != 0)) {
        break;
      }
      char v20 = 1;
      uint64_t v21 = 1LL;
      if ((v24 & 1) != 0) {
        goto LABEL_39;
      }
    }

    if ((v22 & v23) == 0) {
      uint64_t v18 = v19;
    }
LABEL_39:
    uint64_t v25 = *(os_log_s **)v18;
    if (v25 && os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_CarPlay_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = 217;
      _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Main audio device does not support input and output.",  buf,  0x12u);
    }
  }

  if (!v2)
  {
    std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v41 = 0LL;
    __int128 v201 = 0uLL;
    goto LABEL_129;
  }

LABEL_123:
  __int128 v201 = v61;
  sub_19DFC((uint64_t)theString);
  uint64_t v17 = &unk_3FF000;
LABEL_124:
  sub_19DFC((uint64_t)v204);
  sub_19DFC((uint64_t)v203);
  sub_19DFC((uint64_t)v202);
  if ((v2 != 0) != (v41 == 0LL))
  {
    int v16 = v40;
  }

  else
  {
    AudioObjectPropertyElement v79 = (os_log_t *)sub_138E8(13);
    int v80 = *v79;
    int v16 = v40;
    if (*v79 && os_log_type_enabled(*v79, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_CarPlay_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = 240;
      *(_WORD *)&_BYTE buf[18] = 1024;
      *(_DWORD *)&_BYTE buf[20] = v2 != 0;
      *(_WORD *)&_BYTE buf[24] = 2048;
      *(void *)&buf[26] = v41;
      _os_log_impl( &dword_0,  v80,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: If hasOutput (%u) is true, outputPort (%p) must be non-NULL, and conversely.",  buf,  0x22u);
    }
  }

  unint64_t v66 = v118;
  __int16 v67 = *(void *)(v118 + 208);
  unint64_t v68 = *(void *)(v118 + 216);
  if (v67 == v68)
  {
    if (*(_BYTE *)(v118 + 240))
    {
      CFDictionaryRef v76 = *(_DWORD *)(v118 + 232);
      LODWORD(__dst.__pn_.__r_.__value_.__l.__data_) = 7;
      __dst.__pn_.__r_.__value_.__l.__size_ = v76;
      *(_DWORD *)AudioObjectPropertyAddress buf = 1684171107;
      sub_2DC450((uint64_t)&buf[8], (uint64_t)&__dst);
      sub_148DB8((uint64_t)v125, *(int *)buf, buf);
      sub_2DBF5C((uint64_t)&buf[8]);
      sub_2DBF5C((uint64_t)&__dst);
      unint64_t v77 = *(_DWORD *)(v118 + 236);
      LODWORD(__dst.__pn_.__r_.__value_.__l.__data_) = 7;
      __dst.__pn_.__r_.__value_.__l.__size_ = v77;
      *(_DWORD *)AudioObjectPropertyAddress buf = 1684172643;
      sub_2DC450((uint64_t)&buf[8], (uint64_t)&__dst);
      sub_148DB8((uint64_t)v125, *(int *)buf, buf);
      sub_2DBF5C((uint64_t)&buf[8]);
      sub_2DBF5C((uint64_t)&__dst);
    }
  }

  else
  {
    memset(buf, 0, 32);
    *(_DWORD *)&_BYTE buf[32] = 1065353216;
    if (((v68 - v67) & 0x7FFFFFFF8LL) != 0)
    {
      unint64_t v69 = 0LL;
      AudioObjectPropertyElement v70 = 0;
      unint64_t v71 = 0;
      do
      {
        unint64_t v72 = (unsigned int *)(v67 + 8 * v69);
        unint64_t v74 = *v72;
        std::string::size_type v73 = v72[1];
        LODWORD(__dst.__pn_.__r_.__value_.__l.__data_) = 7;
        __dst.__pn_.__r_.__value_.__l.__size_ = v74;
        LODWORD(__dst.__pn_.__r_.__value_.__r.__words[2]) = 7;
        unint64_t v133 = v73;
        sub_149910((uint64_t *)&v137, (uint64_t)&__dst, 2LL);
        sub_2DC204((uint64_t)&v128, (uint64_t)&v137);
        LODWORD(v130.__r_.__value_.__l.__data_) = v69;
        sub_2DC450((uint64_t)&v130.__r_.__value_.__l.__size_, (uint64_t)&v128);
        sub_148DB8((uint64_t)buf, (int)v130.__r_.__value_.__l.__data_, &v130);
        sub_2DBF5C((uint64_t)&v130.__r_.__value_.__l.__size_);
        sub_2DBF5C((uint64_t)&v128);
        sub_149990((uint64_t *)&v137);
        for (uint64_t i = 16LL; i != -16; i -= 16LL)
          sub_2DBF5C((uint64_t)&__dst + i);
        if (v74) {
          ++v70;
        }
        if (v73) {
          ++v71;
        }
        ++v69;
        unint64_t v66 = v118;
        __int16 v67 = *(void *)(v118 + 208);
      }

      while (v69 < ((unint64_t)(*(void *)(v118 + 216) - v67) >> 3));
    }

    else
    {
      unint64_t v71 = 0;
      AudioObjectPropertyElement v70 = 0;
    }

    sub_2DC194((uint64_t)&v130, (uint64_t)buf);
    LODWORD(__dst.__pn_.__r_.__value_.__l.__data_) = 1685088623;
    sub_2DC450((uint64_t)&__dst.__pn_.__r_.__value_.__l.__size_, (uint64_t)&v130);
    sub_148DB8((uint64_t)v125, (int)__dst.__pn_.__r_.__value_.__l.__data_, &__dst);
    sub_2DBF5C((uint64_t)&__dst.__pn_.__r_.__value_.__l.__size_);
    sub_2DBF5C((uint64_t)&v130);
    LODWORD(v130.__r_.__value_.__l.__data_) = 7;
    v130.__r_.__value_.__l.__size_ = v70;
    LODWORD(__dst.__pn_.__r_.__value_.__l.__data_) = 1684171107;
    sub_2DC450((uint64_t)&__dst.__pn_.__r_.__value_.__l.__size_, (uint64_t)&v130);
    sub_148DB8((uint64_t)v125, (int)__dst.__pn_.__r_.__value_.__l.__data_, &__dst);
    sub_2DBF5C((uint64_t)&__dst.__pn_.__r_.__value_.__l.__size_);
    sub_2DBF5C((uint64_t)&v130);
    LODWORD(v130.__r_.__value_.__l.__data_) = 7;
    v130.__r_.__value_.__l.__size_ = v71;
    LODWORD(__dst.__pn_.__r_.__value_.__l.__data_) = 1684172643;
    sub_2DC450((uint64_t)&__dst.__pn_.__r_.__value_.__l.__size_, (uint64_t)&v130);
    sub_148DB8((uint64_t)v125, (int)__dst.__pn_.__r_.__value_.__l.__data_, &__dst);
    sub_2DBF5C((uint64_t)&__dst.__pn_.__r_.__value_.__l.__size_);
    sub_2DBF5C((uint64_t)&v130);
    sub_D0C4C(*(void **)&buf[16]);
    unint64_t v78 = *(void **)buf;
    *(void *)AudioObjectPropertyAddress buf = 0LL;
    if (v78) {
      operator delete(v78);
    }
    if (*(_BYTE *)(v66 + 240))
    {
      AudioObjectPropertyElement v79 = (os_log_t *)sub_138E8(20);
      int v80 = *v79;
      if (*v79)
      {
        if (os_log_type_enabled(*v79, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v81 = &v121;
          if ((v121.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            uint64_t v81 = (std::string *)v121.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "DSPGraphConfig_Utilities.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_BYTE buf[14] = 422;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&_BYTE buf[20] = v81;
          _os_log_impl( &dword_0,  v80,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Configuration data for graph %s specified per-bus channel counts and separate bus count.  Only the first field will be used",  buf,  0x1Cu);
        }
      }
    }
  }

  uint64_t v82 = *(unsigned int **)(v66 + 128);
  for (uint64_t j = *(unsigned int **)(v66 + 136); v82 != j; v82 += 4)
  {
    uint64_t v84 = (os_log_t *)sub_138E8(20);
    uint64_t v85 = *v84;
    if (*v84 && os_log_type_enabled(*v84, OS_LOG_TYPE_INFO))
    {
      sub_2CA1C(&__dst, *v82);
      uint64_t v86 = (__dst.__pn_.__r_.__value_.__s.__size_ & 0x80u) == 0
          ? &__dst
          : (std::__fs::filesystem::path *)__dst.__pn_.__r_.__value_.__r.__words[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "DSPGraphConfig_Utilities.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = 203;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&_BYTE buf[20] = v86;
      _os_log_impl(&dword_0, v85, OS_LOG_TYPE_INFO, "%25s:%-5d Running action for property: %s", buf, 0x1Cu);
    }

    uint64_t v87 = sub_394AB8(*v82);
    if (!v87)
    {
      BOOL v110 = (os_log_t *)sub_138E8(13);
      uint64_t v111 = *v110;
      if (*v110 && os_log_type_enabled(*v110, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "DSPGraphConfig_Utilities.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = 204;
        _os_log_impl( &dword_0,  v111,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
      }

void sub_208440( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20, char a21, uint64_t a22, char a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31, uint64_t a32, void *a33, uint64_t a34, int a35, __int16 a36, char a37, char a38, void *__p, uint64_t a40, int a41, __int16 a42, char a43, char a44)
{
  if (a44 < 0) {
    operator delete(__p);
  }
  sub_88540(v44 - 176);
  sub_7A768((uint64_t)&a21);
  sub_88540((uint64_t)&a25);
  sub_7A768((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_2086DC(uint64_t a1, unsigned int a2)
{
  if (a2 != 1886609775 && a2 != 1886614639 && a2 != 1886614625)
  {
    BOOL v5 = (os_log_t *)sub_138E8(13);
    BOOL v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, a2);
      if (v11 >= 0) {
        int v7 = __p;
      }
      else {
        int v7 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      unint64_t v13 = "Device_CarPlay_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 347;
      __int16 v16 = 2080;
      uint64_t v17 = v7;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unsupported VirtualAudioPortType: %s.",  buf,  0x1Cu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType: %s.");
  }

  return 0LL;
}

void sub_208834(_Unwind_Exception *a1)
{
}

BOOL sub_208850(AudioObjectID a1)
{
  AudioObjectID v17 = a1;
  strcpy((char *)&buf, "tvtsbolg");
  BYTE1(buf.mElement) = 0;
  HIWORD(buf.mElement) = 0;
  unint64_t v2 = sub_36EF4(&v17, &buf, 0, 0LL);
  *((void *)&v5 + 1) = v3;
  *(void *)&__int128 v5 = v2;
  uint64_t v4 = v5 >> 32;
  if ((v4 & 0xFF00000000LL) != 0) {
    int v6 = v4;
  }
  else {
    int v6 = 0;
  }
  uint64_t v7 = sub_138E8(28);
  uint64_t v8 = sub_138E8(23);
  char v9 = 0;
  uint64_t v10 = 0LL;
  *(void *)&buf.int mSelector = 0x100000002LL;
  uint64_t v11 = *(void *)(v7 + 8);
  while (1)
  {
    uint64_t v12 = *((int *)&buf.mSelector + v10);
    char v13 = v9;
    if (((v11 & v12) != 0) != ((*(void *)(v8 + 8) & v12) != 0)) {
      break;
    }
    char v9 = 1;
    uint64_t v10 = 1LL;
    if ((v13 & 1) != 0) {
      goto LABEL_10;
    }
  }

  if ((v11 & v12) == 0) {
    uint64_t v7 = v8;
  }
LABEL_10:
  __int16 v14 = *(os_log_s **)v7;
  if (v14 && os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = "yes";
    buf.int mSelector = 136315906;
    *(void *)&buf.AudioObjectPropertyScope mScope = "Device_CarPlay_Aspen.cpp";
    int v20 = 70;
    __int16 v19 = 1024;
    if (!v6) {
      int v15 = "no";
    }
    __int16 v21 = 1024;
    AudioObjectID v22 = a1;
    __int16 v23 = 2080;
    char v24 = v15;
    _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Device %u supports voice trigger: %s.",  (uint8_t *)&buf,  0x22u);
  }

  return v6 != 0;
}

uint64_t sub_2089E4(uint64_t a1, unsigned int a2, _DWORD *a3, _BYTE *a4)
{
  if (a2)
  {
    uint64_t v6 = a2;
    do
    {
      uint64_t v7 = (os_log_t *)sub_138E8(17);
      uint64_t v8 = *v7;
      if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
      {
        sub_2CA1C(&v26, *a3);
        if (v28 >= 0) {
          char v9 = &v26;
        }
        else {
          char v9 = v26;
        }
        (*(void (**)(CFStringRef *__return_ptr, _BYTE *))(*(void *)a4 + 128LL))(theString, a4);
        sub_48E98(__p, theString[0]);
        uint64_t v10 = __p;
        if (v25 < 0) {
          uint64_t v10 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "Device_CarPlay_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = 130;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&_BYTE buf[20] = v9;
        *(_WORD *)&_BYTE buf[28] = 2080;
        *(void *)&_BYTE buf[30] = v10;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Received notification (%s) from audio device with UID %s",  buf,  0x26u);
        if (v25 < 0) {
          operator delete(__p[0]);
        }
        sub_19DFC((uint64_t)theString);
        if (SHIBYTE(v28) < 0) {
          operator delete(v26);
        }
      }

      if (*a3 == 1937012340)
      {
        AudioObjectID v11 = (*(uint64_t (**)(_BYTE *))(*(void *)a4 + 120LL))(a4);
        int v12 = sub_208850(v11);
        char v13 = (os_log_t *)sub_138E8(17);
        __int16 v14 = *v13;
        if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
        {
          (*(void (**)(void **__return_ptr, _BYTE *))(*(void *)a4 + 128LL))(__p, a4);
          sub_48E98(&v26, (CFStringRef)__p[0]);
          int v15 = &v26;
          if (v28 < 0) {
            int v15 = v26;
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "Device_CarPlay_Aspen.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_BYTE buf[14] = 149;
          *(_WORD *)&_BYTE buf[18] = 1024;
          *(_DWORD *)&_BYTE buf[20] = v12;
          *(_WORD *)&_BYTE buf[24] = 2080;
          *(void *)&buf[26] = v15;
          _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Voice trigger support changed to %u for audio device with UID %s",  buf,  0x22u);
          if (SHIBYTE(v28) < 0) {
            operator delete(v26);
          }
          sub_19DFC((uint64_t)__p);
        }

        if (a4[504] != v12)
        {
          a4[504] = v12;
          uint64_t v27 = 0LL;
          uint64_t v28 = 0LL;
          uint64_t v26 = &v27;
          __int16 v16 = operator new(4uLL);
          _DWORD *v16 = 1886609775;
          *(void *)AudioObjectPropertyAddress buf = v16;
          *(void *)&_DWORD buf[8] = v16 + 1;
          *(void *)&buf[16] = v16 + 1;
          strcpy(&buf[24], "cwdv");
          _BYTE buf[32] = 0;
          int v30 = 3;
          v32[0] = 0LL;
          v32[1] = 0LL;
          uint64_t v31 = v32;
          int v33 = 44739242;
          CFTypeRef cf = 0LL;
          sub_3710DC((uint64_t *)__p, (uint64_t)a4, (uint64_t)buf);
          if (cf) {
            CFRelease(cf);
          }
          sub_32C8C(v32[0]);
          if (*(void *)buf)
          {
            *(void *)&_DWORD buf[8] = *(void *)buf;
            operator delete(*(void **)buf);
          }

          *(_DWORD *)AudioObjectPropertyAddress buf = 1886418288;
          sub_EE1E8((uint64_t *)&buf[8], __p);
          sub_10179C((uint64_t **)&v26, *(unsigned int *)buf, (int *)buf);
          sub_85B80((uint64_t *)&buf[8]);
          uint64_t v17 = sub_546E0();
          sub_101870(v17, &v26, 0);
          sub_85B80((uint64_t *)__p);
          sub_EDF34(v27);
        }
      }

      else
      {
        uint64_t v18 = (os_log_t *)sub_138E8(17);
        __int16 v19 = *v18;
        if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_DEFAULT))
        {
          sub_2CA1C(&v26, *a3);
          if (v28 >= 0) {
            int v20 = &v26;
          }
          else {
            int v20 = v26;
          }
          (*(void (**)(CFStringRef *__return_ptr, _BYTE *))(*(void *)a4 + 128LL))(theString, a4);
          sub_48E98(__p, theString[0]);
          __int16 v21 = __p;
          if (v25 < 0) {
            __int16 v21 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "Device_CarPlay_Aspen.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_BYTE buf[14] = 137;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&_BYTE buf[20] = v20;
          *(_WORD *)&_BYTE buf[28] = 2080;
          *(void *)&_BYTE buf[30] = v21;
          _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Unhandled notification (%s) from bluetooth audio device with UID %s",  buf,  0x26u);
          if (v25 < 0) {
            operator delete(__p[0]);
          }
          sub_19DFC((uint64_t)theString);
          if (SHIBYTE(v28) < 0) {
            operator delete(v26);
          }
        }
      }

      a3 += 3;
      --v6;
    }

    while (v6);
  }

  return 0LL;
}

void sub_208E60( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_208F00(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_476288;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_208F10(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_476288;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_208F30(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_208F40(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_4762F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_208F50(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_4762F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_208F70(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_208F80(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_4762C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_208F90(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_4762C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_208FB0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_208FC0(uint64_t a1)
{
  *(void *)a1 = off_4760A0;
  sub_7D898(a1 + 640);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 576));
  std::mutex::~mutex((std::mutex *)(a1 + 512));
  unint64_t v2 = *(const void **)(a1 + 496);
  if (v2) {
    CFRelease(v2);
  }
  return sub_36F1E0(a1);
}

BOOL sub_209014(const __CFString *a1)
{
  if (!a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_7E414(exception);
  }

  sub_48100((uint64_t)v4, a1);
  if ((v5 & 0x80000000) == 0) {
    return v5 != 0;
  }
  BOOL v1 = v4[1] != 0LL;
  operator delete(v4[0]);
  return v1;
}

void sub_209094(_Unwind_Exception *a1)
{
}

uint64_t sub_2090A8(uint64_t a1, AudioObjectPropertySelector a2, const __CFString *a3)
{
  uint64_t v4 = sub_36E3FC(a1, a2, a3, a3, 0LL);
  *(void *)uint64_t v4 = off_4760A0;
  AudioObjectPropertySelector v5 = *(_DWORD *)(v4 + 268);
  __p.int mSelector = v5;
  strcpy(buf, "tstsbolg");
  buf[9] = 0;
  *(_WORD *)&_DWORD buf[10] = 0;
  unint64_t v6 = sub_36EF4(&__p.mSelector, (const AudioObjectPropertyAddress *)buf, 0, 0LL);
  int v8 = v6;
  if ((_DWORD)v6 || !v7)
  {
    __int16 v23 = (os_log_t *)sub_138E8(17);
    char v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_CarPlay_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = 104;
      __int16 v32 = 1024;
      AudioObjectPropertySelector v33 = v5;
      _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Failed to retrieve CarPlay stream type for object %u.",  buf,  0x18u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = v8;
  }

  *(_DWORD *)(a1 + 492) = HIDWORD(v6);
  AudioObjectID v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
  CFStringRef v10 = CFStringCreateWithBytes(0LL, (const UInt8 *)"", 0LL, 0x8000100u, 0);
  if (!v10)
  {
    uint64_t v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v26, "Could not construct");
  }

  AudioObjectID v11 = (const __CFString **)(a1 + 496);
  AudioObjectID v30 = v9;
  *(void *)&__p.int mSelector = 0x676C6F6273747575LL;
  __p.AudioObjectPropertyElement mElement = 0;
  sub_15AC6C((uint64_t)buf, &v30, &__p);
  LOBYTE(__p.mSelector) = 0;
  LOBYTE(__p.mElement) = 0;
  if (buf[16])
  {
    *(void *)&__p.int mSelector = *(void *)&buf[8];
    *(void *)&_DWORD buf[8] = 0LL;
    LOBYTE(__p.mElement) = 1;
  }

  sub_D9A9C((uint64_t)&buf[8]);
  sub_15AD84((void *)(a1 + 496), (uint64_t)&__p, v10);
  sub_D9A9C((uint64_t)&__p);
  CFRelease(v10);
  *(_BYTE *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 850045863LL;
  *(void *)(a1 + 568) = 0LL;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(void *)(a1 + 576) = 1018212795LL;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 609) = 0u;
  strcpy((char *)(a1 + 628), "egfcbolg");
  *(_BYTE *)(a1 + 637) = 0;
  *(_WORD *)(a1 + 638) = 0;
  sub_7D684( (void *)(a1 + 640),  *(_DWORD *)(a1 + 268),  (AudioObjectPropertyAddress *)(a1 + 628),  a1 + 576,  a1 + 512,  a1 + 624);
  if (*(_DWORD *)(a1 + 492) == 1937010030 && sub_1CBE08()) {
    sub_371820(a1, 0, 0x6F757470u, 0);
  }
  uint64_t v12 = sub_138E8(28);
  uint64_t v13 = sub_138E8(23);
  char v14 = 0;
  uint64_t v15 = 0LL;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
  uint64_t v16 = *(void *)(v12 + 8);
  while (1)
  {
    uint64_t v17 = *(int *)&buf[4 * v15];
    char v18 = v14;
    if (((v16 & v17) != 0) != ((*(void *)(v13 + 8) & v17) != 0)) {
      break;
    }
    char v14 = 1;
    uint64_t v15 = 1LL;
    if ((v18 & 1) != 0) {
      goto LABEL_15;
    }
  }

  if ((v16 & v17) == 0) {
    uint64_t v12 = v13;
  }
LABEL_15:
  __int16 v19 = *(os_log_s **)v12;
  if (v19 && os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    AudioObjectPropertySelector v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
    if (sub_209014(*v11))
    {
      if (!*v11)
      {
        uint64_t v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v27, "Could not construct");
      }

      sub_48100((uint64_t)&__p, *v11);
      if (v29 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = *(AudioObjectPropertyAddress **)&__p.mSelector;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_CarPlay_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = 93;
      __int16 v32 = 1024;
      AudioObjectPropertySelector v33 = v20;
      __int16 v34 = 2080;
      char v35 = (const char *)p_p;
      _os_log_impl(&dword_0, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Device %u OOB UUID: %s.", buf, 0x22u);
      if (v29 < 0) {
        operator delete(*(void **)&__p.mSelector);
      }
    }

    else
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_CarPlay_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = 93;
      __int16 v32 = 1024;
      AudioObjectPropertySelector v33 = v20;
      __int16 v34 = 2080;
      char v35 = "not supported";
      _os_log_impl(&dword_0, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Device %u OOB UUID: %s.", buf, 0x22u);
    }
  }

  return a1;
}

void sub_209584(_Unwind_Exception *a1)
{
  if (*v2) {
    CFRelease(*v2);
  }
  sub_36F1E0(v1);
  _Unwind_Resume(a1);
}

void sub_20961C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_209630(a1);
  operator delete(v1);
}

uint64_t sub_209630(uint64_t a1)
{
  *(void *)a1 = off_476330;
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 280);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 264);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 248);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 232);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  *(void *)(a1 + 136) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 160));
  sub_15A0A0(a1 + 8);
  return a1;
}

void sub_2096AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (!a4)
  {
    uint64_t v4 = (os_log_t *)sub_138E8(13);
    uint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      int v8 = "HeadsetJackHandler.cpp";
      __int16 v9 = 1024;
      int v10 = 100;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::invalid_argument) [clientData is NULL]: clientData was NULL",  (uint8_t *)&v7,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1013D0(exception, "clientData was NULL");
  }

  sub_209E18(a4, a1, a2, a3);
}

void sub_2097B0(_Unwind_Exception *exception_object)
{
}

void sub_2097CC(void *a1)
{
  if (!a1[29] && !a1[31] && !a1[33] && !a1[35])
  {
    char v29 = (os_log_t *)sub_138E8(21);
    AudioObjectID v30 = *v29;
    if (*v29)
    {
      if (os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        int v52 = 136315394;
        uint64_t v53 = "HeadsetJackHandler.cpp";
        __int16 v54 = 1024;
        int v55 = 230;
        _os_log_impl(&dword_0, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d All port types are NULL...", (uint8_t *)&v52, 0x12u);
      }
    }
  }

  if (a1[31])
  {
    if (!a1[29])
    {
      int v7 = (os_log_t *)sub_138E8(21);
      int v8 = *v7;
      if (*v7)
      {
        if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
        {
          __int16 v9 = (std::__shared_weak_count *)a1[31];
          if (v9)
          {
            int v10 = std::__shared_weak_count::lock(v9);
            if (v10) {
              uint64_t v11 = a1[30];
            }
            else {
              uint64_t v11 = 0LL;
            }
          }

          else
          {
            uint64_t v11 = 0LL;
            int v10 = 0LL;
          }

          uint64_t v31 = (std::__shared_weak_count *)a1[29];
          if (v31)
          {
            __int16 v32 = std::__shared_weak_count::lock(v31);
            if (v32) {
              uint64_t v33 = a1[28];
            }
            else {
              uint64_t v33 = 0LL;
            }
          }

          else
          {
            uint64_t v33 = 0LL;
            __int16 v32 = 0LL;
          }

          int v52 = 136315906;
          uint64_t v53 = "HeadsetJackHandler.cpp";
          __int16 v54 = 1024;
          int v55 = 241;
          __int16 v56 = 2048;
          uint64_t v57 = v11;
          __int16 v58 = 2048;
          uint64_t v59 = v33;
          _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Wired microphone Port is non-NULL but wired headphones Port is NULL... mWiredMicrophonePort: %p; m"
            "WiredHeadphonesPort: %p.",
            (uint8_t *)&v52,
            0x26u);
          if (v32)
          {
            p_unsigned int shared_owners = (unint64_t *)&v32->__shared_owners_;
            do
              unint64_t v41 = __ldaxr(p_shared_owners);
            while (__stlxr(v41 - 1, p_shared_owners));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }

          if (v10)
          {
            int v42 = (unint64_t *)&v10->__shared_owners_;
            do
              unint64_t v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
        }
      }
    }
  }

  if ((a1[33] == 0LL) != (a1[35] == 0LL))
  {
    unint64_t v2 = (os_log_t *)sub_138E8(21);
    uint64_t v3 = *v2;
    if (*v2)
    {
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
      {
        uint64_t v4 = (std::__shared_weak_count *)a1[33];
        if (v4)
        {
          uint64_t v5 = std::__shared_weak_count::lock(v4);
          if (v5) {
            uint64_t v6 = a1[32];
          }
          else {
            uint64_t v6 = 0LL;
          }
        }

        else
        {
          uint64_t v6 = 0LL;
          uint64_t v5 = 0LL;
        }

        uint64_t v12 = (std::__shared_weak_count *)a1[35];
        if (v12)
        {
          uint64_t v13 = std::__shared_weak_count::lock(v12);
          if (v13) {
            uint64_t v14 = a1[34];
          }
          else {
            uint64_t v14 = 0LL;
          }
        }

        else
        {
          uint64_t v14 = 0LL;
          uint64_t v13 = 0LL;
        }

        int v52 = 136315906;
        uint64_t v53 = "HeadsetJackHandler.cpp";
        __int16 v54 = 1024;
        int v55 = 252;
        __int16 v56 = 2048;
        uint64_t v57 = v6;
        __int16 v58 = 2048;
        uint64_t v59 = v14;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "%25s:%-5d TTY output and input are mismatched... mTTYOutputPort: %p; mTTYInputPort: %p.",
          (uint8_t *)&v52,
          0x26u);
        if (v13)
        {
          uint64_t v15 = (unint64_t *)&v13->__shared_owners_;
          do
            unint64_t v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }

        if (v5)
        {
          uint64_t v17 = (unint64_t *)&v5->__shared_owners_;
          do
            unint64_t v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
      }
    }
  }

  if (a1[33])
  {
    if (!a1[29])
    {
      __int16 v19 = (os_log_t *)sub_138E8(21);
      AudioObjectPropertySelector v20 = *v19;
      if (*v19)
      {
        if (os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
        {
          __int16 v21 = (std::__shared_weak_count *)a1[33];
          if (v21)
          {
            AudioObjectID v22 = std::__shared_weak_count::lock(v21);
            if (v22) {
              uint64_t v23 = a1[32];
            }
            else {
              uint64_t v23 = 0LL;
            }
          }

          else
          {
            uint64_t v23 = 0LL;
            AudioObjectID v22 = 0LL;
          }

          __int16 v34 = (std::__shared_weak_count *)a1[29];
          if (v34)
          {
            char v35 = std::__shared_weak_count::lock(v34);
            if (v35) {
              uint64_t v36 = a1[28];
            }
            else {
              uint64_t v36 = 0LL;
            }
          }

          else
          {
            uint64_t v36 = 0LL;
            char v35 = 0LL;
          }

          int v52 = 136315906;
          uint64_t v53 = "HeadsetJackHandler.cpp";
          __int16 v54 = 1024;
          int v55 = 263;
          __int16 v56 = 2048;
          uint64_t v57 = v23;
          __int16 v58 = 2048;
          uint64_t v59 = v36;
          _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d TTY output is non-NULL, but wired headphones is NULL... mTTYOutputPort: %p; mWiredHeadphonesPort: %p.",
            (uint8_t *)&v52,
            0x26u);
          if (v35)
          {
            uint64_t v44 = (unint64_t *)&v35->__shared_owners_;
            do
              unint64_t v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
              std::__shared_weak_count::__release_weak(v35);
            }
          }

          if (v22)
          {
            char v46 = (unint64_t *)&v22->__shared_owners_;
            do
              unint64_t v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
        }
      }
    }
  }

  if (a1[35])
  {
    if (!a1[31])
    {
      char v24 = (os_log_t *)sub_138E8(21);
      char v25 = *v24;
      if (*v24)
      {
        if (os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
        {
          uint64_t v26 = (std::__shared_weak_count *)a1[35];
          if (v26)
          {
            uint64_t v27 = std::__shared_weak_count::lock(v26);
            if (v27) {
              uint64_t v28 = a1[34];
            }
            else {
              uint64_t v28 = 0LL;
            }
          }

          else
          {
            uint64_t v28 = 0LL;
            uint64_t v27 = 0LL;
          }

          std::chrono::steady_clock::time_point v37 = (std::__shared_weak_count *)a1[31];
          if (v37)
          {
            std::chrono::steady_clock::time_point v38 = std::__shared_weak_count::lock(v37);
            if (v38) {
              uint64_t v39 = a1[30];
            }
            else {
              uint64_t v39 = 0LL;
            }
          }

          else
          {
            uint64_t v39 = 0LL;
            std::chrono::steady_clock::time_point v38 = 0LL;
          }

          int v52 = 136315906;
          uint64_t v53 = "HeadsetJackHandler.cpp";
          __int16 v54 = 1024;
          int v55 = 274;
          __int16 v56 = 2048;
          uint64_t v57 = v28;
          __int16 v58 = 2048;
          uint64_t v59 = v39;
          _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_ERROR,  "%25s:%-5d TTY input is non-NULL, but wired microphone is NULL... mTTYInputPort: %p; mWiredMicrophonePort: %p.",
            (uint8_t *)&v52,
            0x26u);
          if (v38)
          {
            uint64_t v48 = (unint64_t *)&v38->__shared_owners_;
            do
              unint64_t v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }

          if (v27)
          {
            char v50 = (unint64_t *)&v27->__shared_owners_;
            do
              unint64_t v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
        }
      }
    }
  }

void sub_209E18(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  AudioObjectPropertyElement v79 = a1 + 17;
  int v81 = (*(uint64_t (**)(void))(a1[17] + 16))();
  sub_2097CC(a1);
  if (a1[29])
  {
    sub_B8CBC((uint64_t *)buf, a1 + 28, "", 114);
    int v82 = (*(uint64_t (**)(void))(**(void **)buf + 152LL))(*(void *)buf);
    int v8 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      __int16 v9 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }

  else
  {
    int v82 = 0;
  }

  if (a1[31])
  {
    sub_B8CBC((uint64_t *)buf, a1 + 30, "", 116);
    int v80 = (*(uint64_t (**)(void))(**(void **)buf + 152LL))(*(void *)buf);
    uint64_t v11 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      uint64_t v12 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }

  else
  {
    int v80 = 0;
  }

  if (a1[35] && a1[33])
  {
    sub_B8CBC((uint64_t *)buf, a1 + 34, "", 119);
    if ((*(unsigned int (**)(void))(**(void **)buf + 152LL))(*(void *)buf))
    {
      sub_B8CBC(&v88, a1 + 32, "", 119);
      int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v88 + 152LL))(v88);
      uint64_t v15 = (std::__shared_weak_count *)v89;
      if (v89)
      {
        unint64_t v16 = (unint64_t *)(v89 + 1);
        do
          unint64_t v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }

    else
    {
      int v14 = 0;
    }

    unint64_t v18 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      __int16 v19 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }

  else
  {
    int v14 = 0;
  }

  if (a1[29])
  {
    sub_B8CBC((uint64_t *)buf, a1 + 28, "", 124);
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)buf + 544LL))(*(void *)buf, a2, a3, a4);
    __int16 v21 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      AudioObjectID v22 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }

  if (a1[31])
  {
    sub_B8CBC((uint64_t *)buf, a1 + 30, "", 127);
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)buf + 544LL))(*(void *)buf, a2, a3, a4);
    char v24 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      char v25 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }

  if (a1[35] && a1[33])
  {
    sub_B8CBC((uint64_t *)buf, a1 + 34, "", 131);
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)buf + 544LL))(*(void *)buf, a2, a3, a4);
    uint64_t v27 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      uint64_t v28 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }

    sub_B8CBC((uint64_t *)buf, a1 + 32, "", 132);
    (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)buf + 544LL))(*(void *)buf, a2, a3, a4);
    AudioObjectID v30 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      uint64_t v31 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }

  if (a1[29])
  {
    uint64_t v33 = (os_log_t *)sub_138E8(21);
    __int16 v34 = *v33;
    if (*v33)
    {
      if (os_log_type_enabled(*v33, OS_LOG_TYPE_DEBUG))
      {
        sub_B8CBC(&v88, a1 + 28, "", 140);
        int v35 = (*(uint64_t (**)(uint64_t))(*(void *)v88 + 152LL))(v88);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "HeadsetJackHandler.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = 140;
        __int16 v92 = 1024;
        *(_DWORD *)unint64_t v93 = v35;
        *(_WORD *)&v93[4] = 1024;
        *(_DWORD *)&v93[6] = v82;
        _os_log_impl( &dword_0,  v34,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Wired headphones state: %u; headphones cached state: %u.",
          buf,
          0x1Eu);
        uint64_t v36 = (std::__shared_weak_count *)v89;
        if (v89)
        {
          std::chrono::steady_clock::time_point v37 = (unint64_t *)(v89 + 1);
          do
            unint64_t v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
    }
  }

  if (a1[31])
  {
    uint64_t v39 = (os_log_t *)sub_138E8(21);
    int v40 = *v39;
    if (*v39)
    {
      if (os_log_type_enabled(*v39, OS_LOG_TYPE_DEBUG))
      {
        sub_B8CBC(&v88, a1 + 30, "", 146);
        int v41 = (*(uint64_t (**)(uint64_t))(*(void *)v88 + 152LL))(v88);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "HeadsetJackHandler.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = 146;
        __int16 v92 = 1024;
        *(_DWORD *)unint64_t v93 = v41;
        *(_WORD *)&v93[4] = 1024;
        *(_DWORD *)&v93[6] = v80;
        _os_log_impl( &dword_0,  v40,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Wired microphone state: %u; wire microphone cached state: %u.",
          buf,
          0x1Eu);
        int v42 = (std::__shared_weak_count *)v89;
        if (v89)
        {
          unint64_t v43 = (unint64_t *)(v89 + 1);
          do
            unint64_t v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
      }
    }
  }

  if (a1[35])
  {
    if (a1[33])
    {
      unint64_t v45 = (os_log_t *)sub_138E8(21);
      char v46 = *v45;
      if (*v45)
      {
        if (os_log_type_enabled(*v45, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "HeadsetJackHandler.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_BYTE buf[14] = 151;
          __int16 v92 = 1024;
          *(_DWORD *)unint64_t v93 = v14;
          _os_log_impl(&dword_0, v46, OS_LOG_TYPE_DEBUG, "%25s:%-5d TTY cached state (all connected): %u.", buf, 0x18u);
        }
      }
    }

    uint64_t v47 = a1[35];
    uint64_t v88 = (uint64_t)&v88;
    uint64_t v89 = &v88;
    uint64_t v90 = 0LL;
    if (v47 && a1[33])
    {
      sub_B8CBC((uint64_t *)buf, a1 + 34, "", 161);
      if ((*(unsigned int (**)(void))(**(void **)buf + 152LL))(*(void *)buf))
      {
        sub_B8CBC(&v85, a1 + 32, "", 161);
        int v48 = (*(uint64_t (**)(uint64_t))(*(void *)v85 + 152LL))(v85);
        unint64_t v49 = (std::__shared_weak_count *)v86;
        if (v86)
        {
          char v50 = (unint64_t *)(v86 + 1);
          do
            unint64_t v51 = __ldaxr(v50);
          while (__stlxr(v51 - 1, v50));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
      }

      else
      {
        int v48 = 0;
      }

      int v52 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        uint64_t v53 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }

      if (v14 != v48)
      {
        uint64_t v47 = a1[35];
        goto LABEL_94;
      }

      goto LABEL_95;
    }
  }

  else
  {
    uint64_t v47 = 0LL;
    uint64_t v88 = (uint64_t)&v88;
    uint64_t v89 = &v88;
    uint64_t v90 = 0LL;
  }

  if ((v14 & 1) != 0)
  {
LABEL_94:
    sub_85C34(&v88, a1[34], v47);
    sub_85C34(&v88, a1[32], a1[33]);
  }

LABEL_131:
  unint64_t v72 = (os_log_t *)sub_138E8(21);
  std::string::size_type v73 = *v72;
  if (*v72 && os_log_type_enabled(*v72, OS_LOG_TYPE_DEBUG))
  {
    sub_134CF0(v83, (uint64_t)v89, (uint64_t)&v88);
    sub_2D9BB0(&__p, (uint64_t)v83, 1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "HeadsetJackHandler.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&_BYTE buf[14] = 195;
    __int16 v92 = 2080;
    *(void *)unint64_t v93 = p_p;
    _os_log_impl(&dword_0, v73, OS_LOG_TYPE_DEBUG, "%25s:%-5d fullCachePortList: %s.", buf, 0x1Cu);
    sub_85B80(v83);
  }

  unint64_t v75 = (os_log_t *)sub_138E8(21);
  CFDictionaryRef v76 = *v75;
  if (*v75 && os_log_type_enabled(*v75, OS_LOG_TYPE_DEBUG))
  {
    sub_134CF0(v83, (uint64_t)v86, (uint64_t)&v85);
    sub_2D9BB0(&__p, (uint64_t)v83, 1);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      unint64_t v77 = &__p;
    }
    else {
      unint64_t v77 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "HeadsetJackHandler.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&_BYTE buf[14] = 199;
    __int16 v92 = 2080;
    *(void *)unint64_t v93 = v77;
    _os_log_impl(&dword_0, v76, OS_LOG_TYPE_DEBUG, "%25s:%-5d portPropertyUpdatePortList: %s.", buf, 0x1Cu);
    sub_85B80(v83);
  }

  if (v90)
  {
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
    *(_DWORD *)AudioObjectPropertyAddress buf = 1717793397;
    sub_EE1E8((uint64_t *)&buf[8], &v88);
    sub_10179C((uint64_t **)&__p, *(unsigned int *)buf, (int *)buf);
    sub_85B80((uint64_t *)&buf[8]);
    if (!v87) {
      goto LABEL_153;
    }
  }

  else
  {
    if (!v87) {
      goto LABEL_154;
    }
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
  }

  *(_DWORD *)AudioObjectPropertyAddress buf = 1886418288;
  sub_EE1E8((uint64_t *)&buf[8], &v85);
  sub_10179C((uint64_t **)&__p, *(unsigned int *)buf, (int *)buf);
  sub_85B80((uint64_t *)&buf[8]);
LABEL_153:
  uint64_t v78 = sub_546E0();
  sub_101870(v78, &__p, 0);
  sub_EDF34((void *)__p.__r_.__value_.__l.__size_);
LABEL_154:
  sub_2097CC(a1);
  sub_85B80(&v85);
  sub_85B80(&v88);
  if (v81) {
    (*(void (**)(void *))(*v79 + 24LL))(v79);
  }
}

void sub_20AA90( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v17 = va_arg(va3, void);
  uint64_t v19 = va_arg(va3, void);
  uint64_t v20 = va_arg(va3, void);
  sub_7A768((uint64_t)va);
  sub_7A768((uint64_t)va3);
  sub_85B80((uint64_t *)va1);
  sub_85B80((uint64_t *)va2);
  if (a5) {
    (*(void (**)(uint64_t))(*(void *)a3 + 24LL))(a3);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20AC18(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6)
{
  *(void *)a1 = off_476330;
  uint64_t v12 = a1 + 8;
  sub_B1F7C(a1 + 8, (uint64_t)"HALJackStateHandler mutex");
  *(void *)(a1 + 96) = a6;
  *(_BYTE *)(a1 + 104) = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a6 + 16LL))(a6, "kcajtpni");
  int v13 = (*(uint64_t (**)(void, const char *))(**(void **)(a1 + 96) + 16LL))( *(void *)(a1 + 96),  "kcajptuo");
  *(_BYTE *)(a1 + 105) = v13;
  *(void *)(a1 + 112) = a1 + 112;
  *(void *)(a1 + 120) = a1 + 112;
  *(void *)(a1 + 128) = 0LL;
  if (*(_BYTE *)(a1 + 104))
  {
    if (sub_F31A4(*(void *)(a1 + 96), "kcajtpni", (uint64_t)sub_1589B0, v12, 1))
    {
      int v35 = (os_log_t *)sub_138E8(13);
      uint64_t v36 = *v35;
      if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
      {
        int v41 = 136315394;
        int v42 = "HALJackStateHandler.cpp";
        __int16 v43 = 1024;
        int v44 = 115;
        _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to add an input jack state change listener with the HAL.",  (uint8_t *)&v41,  0x12u);
      }

      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unable to add an input jack state change listener with the HAL.");
    }

    int v13 = *(unsigned __int8 *)(a1 + 105);
  }

  if (v13 && sub_F31A4(*(void *)(a1 + 96), "kcajptuo", (uint64_t)sub_1589B0, v12, 1))
  {
    unint64_t v38 = (os_log_t *)sub_138E8(13);
    uint64_t v39 = *v38;
    if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
    {
      int v41 = 136315394;
      int v42 = "HALJackStateHandler.cpp";
      __int16 v43 = 1024;
      int v44 = 121;
      _os_log_impl( &dword_0,  v39,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to add an output jack state change listener with the HAL.",  (uint8_t *)&v41,  0x12u);
    }

    int v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v40, "Unable to add an output jack state change listener with the HAL.");
  }

  sub_B1F7C(a1 + 136, (uint64_t)"HeadsetJackHandler mutex");
  *(void *)(a1 + 224) = *a2;
  uint64_t v14 = a2[1];
  *(void *)(a1 + 232) = v14;
  if (v14)
  {
    uint64_t v15 = (unint64_t *)(v14 + 16);
    do
      unint64_t v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }

  *(void *)(a1 + 240) = *a3;
  uint64_t v17 = a3[1];
  *(void *)(a1 + sub_7A768(v41 - 248) = v17;
  if (v17)
  {
    unint64_t v18 = (unint64_t *)(v17 + 16);
    do
      unint64_t v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }

  *(void *)(a1 + 256) = *a5;
  uint64_t v20 = a5[1];
  *(void *)(a1 + 264) = v20;
  if (v20)
  {
    __int16 v21 = (unint64_t *)(v20 + 16);
    do
      unint64_t v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }

  *(void *)(a1 + 272) = *a4;
  uint64_t v23 = a4[1];
  *(void *)(a1 + 280) = v23;
  if (!v23)
  {
    if (!*(void *)(a1 + 264)) {
      goto LABEL_19;
    }
LABEL_27:
    AudioObjectID v30 = (os_log_t *)sub_138E8(13);
    uint64_t v31 = *v30;
    if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
    {
      int v41 = 136315394;
      int v42 = "HeadsetJackHandler.cpp";
      __int16 v43 = 1024;
      int v44 = 65;
      _os_log_impl( &dword_0,  v31,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): inTTYInputPort and inTTYOutputPort must both be NULL or non-NULL",  (uint8_t *)&v41,  0x12u);
    }

    unint64_t v32 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v32, "inTTYInputPort and inTTYOutputPort must both be NULL or non-NULL");
LABEL_35:
  }

  char v24 = (unint64_t *)(v23 + 16);
  do
    unint64_t v25 = __ldxr(v24);
  while (__stxr(v25 + 1, v24));
  if ((*(void *)(a1 + 280) == 0LL) != (*(void *)(a1 + 264) == 0LL)) {
    goto LABEL_27;
  }
LABEL_19:
  if (!a2[1] && !a3[1] && !a4[1] && !a5[1])
  {
    uint64_t v33 = (os_log_t *)sub_138E8(13);
    __int16 v34 = *v33;
    if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
    {
      int v41 = 136315394;
      int v42 = "HeadsetJackHandler.cpp";
      __int16 v43 = 1024;
      int v44 = 69;
      _os_log_impl( &dword_0,  v34,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): All input Ports are NULL.",  (uint8_t *)&v41,  0x12u);
    }

    unint64_t v32 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v32, "All input Ports are NULL.");
    goto LABEL_35;
  }

  int v26 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 16LL))(v12);
  uint64_t v27 = operator new(0x20uLL);
  v27[2] = sub_2096AC;
  v27[3] = a1;
  uint64_t v28 = *(void *)(a1 + 112);
  void *v27 = v28;
  v27[1] = a1 + 112;
  *(void *)(v28 + 8) = v27;
  *(void *)(a1 + 112) = v27;
  ++*(void *)(a1 + 128);
  sub_159258(v12, (uint64_t (*)(BOOL, BOOL, uint64_t, uint64_t))sub_2096AC, a1);
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v12 + 24LL))(v12);
  }
  sub_2097CC((void *)a1);
  return a1;
}

void sub_20B124(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(v1 + 32));
  _Unwind_Resume(a1);
}

void sub_20B22C(uint64_t *a1)
{
  unint64_t v2 = a1 + 17;
  int v3 = (*(uint64_t (**)(uint64_t *))(a1[17] + 16))(a1 + 17);
  sub_2097CC(a1);
  int v4 = (*(uint64_t (**)(uint64_t *))(a1[1] + 16))(a1 + 1);
  uint64_t v5 = a1 + 14;
  uint64_t v6 = (uint64_t *)a1[15];
  if (v6 != a1 + 14)
  {
    while ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))v6[2] != sub_2096AC || v6[3] != (void)a1)
    {
      uint64_t v6 = (uint64_t *)v6[1];
      if (v6 == v5) {
        goto LABEL_10;
      }
    }

    if (v6 != v5)
    {
      uint64_t v8 = *v6;
      *(void *)(v8 + 8) = v6[1];
      *(void *)v6[1] = v8;
      --a1[16];
      operator delete(v6);
    }
  }

void sub_20B374(_Unwind_Exception *exception_object)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B3A0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_20D52C(a1, a2, a3, a4, a5);
  (*(void (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 40LL))(a1, a2, a4, a3);
  return v9;
}

void sub_20B400(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)a2 = a2 + 8;
  uint64_t v3 = *(void *)a1 + 16LL;
  for (uint64_t i = *(void **)(*(void *)a1 + 24LL); i != (void *)v3; uint64_t i = (void *)i[1])
  {
    sub_B8CBC(&v13, i + 2, "", 269);
    uint64_t v5 = v14;
    int v6 = *(_DWORD *)(v13 + 144);
    if (v14)
    {
      p_unsigned int shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        unint64_t v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }

    if (v6 == 1885433888)
    {
      sub_B8CBC(&v13, i + 4, "", 271);
      uint64_t v9 = v14;
      int v10 = *(_DWORD *)(v13 + 144);
      if (v14)
      {
        uint64_t v11 = (unint64_t *)&v14->__shared_owners_;
        do
          unint64_t v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }

      if (v10 == 1886613611) {
        sub_104A84((uint64_t **)a2, 8, (uint64_t)(i + 2));
      }
      sub_104A84((uint64_t **)a2, 1, (uint64_t)(i + 2));
    }
  }

void sub_20B560(_Unwind_Exception *a1)
{
}

void sub_20B57C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  int64x2_t v107 = 0uLL;
  uint64_t v108 = 0LL;
  int64x2_t v105 = 0uLL;
  v106[0] = 0LL;
  for (uint64_t i = *(void **)(*(void *)a2 + 24LL); i != (void *)(*(void *)a2 + 16LL); uint64_t i = (void *)i[1])
  {
    sub_B8CBC(&v103, i + 4, "", 106);
    uint64_t v8 = *(void *)(v103 + 192);
    if (!v8)
    {
      char v83 = (os_log_t *)sub_138E8(13);
      uint64_t v84 = *v83;
      if (*v83 && os_log_type_enabled(*v83, OS_LOG_TYPE_ERROR))
      {
        (*(void (**)(__int128 *__return_ptr))(*(void *)v103 + 144LL))(&v102);
        uint64_t v85 = v102;
        sub_2CA1C(&__p, *(unsigned int *)(v103 + 144));
        if (v101 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "RoutingHandler_Broadcast_GenericConfig1.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = 112;
        *(_WORD *)&_BYTE buf[18] = 2112;
        *(void *)&_BYTE buf[20] = v85;
        *(_WORD *)&_BYTE buf[28] = 2080;
        *(void *)&_BYTE buf[30] = p_p;
        _os_log_impl( &dword_0,  v84,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [controlDevice is NULL]: could not get device for port \\%@\\ (type: '%s').",  buf,  0x26u);
        if (v101 < 0) {
          operator delete(__p);
        }
        sub_19DFC((uint64_t)&v102);
      }

      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_4865A0;
      exception[2] = 2003329396;
    }

    unsigned __int32 v9 = *(_DWORD *)(v103 + 144);
    int v10 = *(_DWORD *)(v103 + 264);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t, void))(*(void *)v8 + 248LL))(&__p, v8, 1LL, v9);
    if (!v100 || v100->__shared_owners_ == -1)
    {
      int v80 = (os_log_t *)sub_138E8(13);
      int v81 = *v80;
      if (*v80 && os_log_type_enabled(*v80, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "RoutingHandler_Broadcast_GenericConfig1.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = 115;
        _os_log_impl( &dword_0,  v81,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to locate mute control.",  buf,  0x12u);
      }

      int v82 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v82, "Unable to locate mute control.");
    }

    sub_150BF4(&v102, (uint64_t)__p, v100);
    uint64_t v11 = v107.i64[1];
    if (v107.i64[1] >= (unint64_t)v108)
    {
      uint64_t v13 = (v107.i64[1] - v107.i64[0]) >> 4;
      unint64_t v14 = (uint64_t)&v108[-v107.i64[0]] >> 3;
      if (v14 <= v13 + 1) {
        unint64_t v14 = v13 + 1;
      }
      else {
        unint64_t v15 = v14;
      }
      *(void *)&_BYTE buf[32] = &v108;
      unint64_t v16 = (char *)sub_7BE90(v15);
      unint64_t v18 = &v16[16 * v13];
      *(_OWORD *)unint64_t v18 = v102;
      __int128 v102 = 0uLL;
      unint64_t v19 = (void *)v107.i64[1];
      uint64_t v20 = (void *)v107.i64[0];
      if (v107.i64[1] == v107.i64[0])
      {
        int64x2_t v23 = vdupq_n_s64(v107.u64[1]);
        __int16 v21 = &v16[16 * v13];
      }

      else
      {
        __int16 v21 = &v16[16 * v13];
        do
        {
          __int128 v22 = *((_OWORD *)v19 - 1);
          v19 -= 2;
          *((_OWORD *)v21 - 1) = v22;
          v21 -= 16;
          *unint64_t v19 = 0LL;
          v19[1] = 0LL;
        }

        while (v19 != v20);
        int64x2_t v23 = v107;
      }

      unint64_t v12 = v18 + 16;
      v107.i64[0] = (uint64_t)v21;
      v107.i64[1] = (uint64_t)(v18 + 16);
      *(int64x2_t *)&_DWORD buf[8] = v23;
      char v24 = v108;
      uint64_t v108 = &v16[16 * v17];
      *(void *)&_BYTE buf[24] = v24;
      *(void *)AudioObjectPropertyAddress buf = v23.i64[0];
      sub_A0D64((uint64_t)buf);
    }

    else
    {
      *(_OWORD *)v107.i64[1] = v102;
      unint64_t v12 = (_OWORD *)(v11 + 16);
    }

    v107.i64[1] = (uint64_t)v12;
    if ((sub_1BB228(a2, (uint64_t)(i + 2), 1LL) & 0xFF00000000LL) != 0 && sub_1F6EF0(v103))
    {
      sub_1B2A3C(&v102, a2, a3[2], v103, i[9], a4);
      if (!(void)v102)
      {
        __int128 v91 = (os_log_t *)sub_138E8(13);
        __int16 v92 = *v91;
        if (*v91 && os_log_type_enabled(*v91, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "RoutingHandler_Broadcast_GenericConfig1.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_BYTE buf[14] = 126;
          _os_log_impl( &dword_0,  v92,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to locate volume control.",  buf,  0x12u);
        }

        unint64_t v93 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v93, "Unable to locate volume control.");
      }

      uint64_t v25 = v105.i64[1];
      if (v105.i64[1] >= v106[0])
      {
        uint64_t v44 = (v105.i64[1] - v105.i64[0]) >> 4;
        unint64_t v45 = v44 + 1;
        uint64_t v46 = v106[0] - v105.i64[0];
        if ((v106[0] - v105.i64[0]) >> 3 > v45) {
          unint64_t v45 = v46 >> 3;
        }
        else {
          unint64_t v47 = v45;
        }
        *(void *)&_BYTE buf[32] = v106;
        int v48 = (char *)sub_7BE90(v47);
        char v50 = &v48[16 * v44];
        uint64_t v51 = *((void *)&v102 + 1);
        *(_OWORD *)char v50 = v102;
        if (v51)
        {
          int v52 = (unint64_t *)(v51 + 8);
          do
            unint64_t v53 = __ldxr(v52);
          while (__stxr(v53 + 1, v52));
        }

        unint64_t v54 = (void *)v105.i64[1];
        int v55 = (void *)v105.i64[0];
        if (v105.i64[1] == v105.i64[0])
        {
          int64x2_t v58 = vdupq_n_s64(v105.u64[1]);
          __int16 v56 = &v48[16 * v44];
        }

        else
        {
          __int16 v56 = &v48[16 * v44];
          do
          {
            __int128 v57 = *((_OWORD *)v54 - 1);
            v54 -= 2;
            *((_OWORD *)v56 - 1) = v57;
            v56 -= 16;
            *unint64_t v54 = 0LL;
            v54[1] = 0LL;
          }

          while (v54 != v55);
          int64x2_t v58 = v105;
        }

        unint64_t v29 = v50 + 16;
        v105.i64[0] = (uint64_t)v56;
        v105.i64[1] = (uint64_t)(v50 + 16);
        *(int64x2_t *)&_DWORD buf[8] = v58;
        uint64_t v63 = v106[0];
        v106[0] = &v48[16 * v49];
        *(void *)&_BYTE buf[24] = v63;
        *(void *)AudioObjectPropertyAddress buf = v58.i64[0];
        sub_A0D64((uint64_t)buf);
      }

      else
      {
        *(void *)v105.i64[1] = v102;
        uint64_t v26 = *((void *)&v102 + 1);
        *(void *)(v25 + 8) = *((void *)&v102 + 1);
        if (v26)
        {
          uint64_t v27 = (unint64_t *)(v26 + 8);
          do
            unint64_t v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }

        unint64_t v29 = (_OWORD *)(v25 + 16);
      }

      v105.i64[1] = (uint64_t)v29;
      AudioObjectID v30 = (std::__shared_weak_count *)*((void *)&v102 + 1);
      if (!*((void *)&v102 + 1)) {
        goto LABEL_59;
      }
      int v64 = (unint64_t *)(*((void *)&v102 + 1) + 8LL);
      do
        unint64_t v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (v65) {
        goto LABEL_59;
      }
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    }

    else
    {
      sub_1B37C4((uint64_t *)&v102, a2, a3[2], v103, i[9], a4, 0);
      AudioObjectID v30 = (std::__shared_weak_count *)*((void *)&v102 + 1);
      if (!*((void *)&v102 + 1) || *(void *)(*((void *)&v102 + 1) + 8LL) == -1LL)
      {
        uint64_t v88 = (os_log_t *)sub_138E8(13);
        uint64_t v89 = *v88;
        if (*v88 && os_log_type_enabled(*v88, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "RoutingHandler_Broadcast_GenericConfig1.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_BYTE buf[14] = 133;
          _os_log_impl( &dword_0,  v89,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to locate volume control.",  buf,  0x12u);
        }

        uint64_t v90 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v90, "Unable to locate volume control.");
      }

      sub_CB19C(&v98, v102, *((std::__shared_weak_count **)&v102 + 1));
      uint64_t v31 = v105.i64[1];
      if (v105.i64[1] >= v106[0])
      {
        uint64_t v33 = (v105.i64[1] - v105.i64[0]) >> 4;
        unint64_t v34 = (v106[0] - v105.i64[0]) >> 3;
        if (v34 <= v33 + 1) {
          unint64_t v34 = v33 + 1;
        }
        if (v106[0] - v105.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL) {
          unint64_t v35 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v34;
        }
        *(void *)&_BYTE buf[32] = v106;
        uint64_t v36 = (char *)sub_7BE90(v35);
        unint64_t v38 = &v36[16 * v33];
        *(_OWORD *)unint64_t v38 = v98;
        __int128 v98 = 0uLL;
        uint64_t v39 = (void *)v105.i64[1];
        int v40 = (void *)v105.i64[0];
        if (v105.i64[1] == v105.i64[0])
        {
          int64x2_t v43 = vdupq_n_s64(v105.u64[1]);
          int v41 = &v36[16 * v33];
        }

        else
        {
          int v41 = &v36[16 * v33];
          do
          {
            __int128 v42 = *((_OWORD *)v39 - 1);
            v39 -= 2;
            *((_OWORD *)v41 - 1) = v42;
            v41 -= 16;
            void *v39 = 0LL;
            v39[1] = 0LL;
          }

          while (v39 != v40);
          int64x2_t v43 = v105;
        }

        unint64_t v32 = v38 + 16;
        v105.i64[0] = (uint64_t)v41;
        v105.i64[1] = (uint64_t)(v38 + 16);
        *(int64x2_t *)&_DWORD buf[8] = v43;
        uint64_t v59 = v106[0];
        v106[0] = &v36[16 * v37];
        *(void *)&_BYTE buf[24] = v59;
        *(void *)AudioObjectPropertyAddress buf = v43.i64[0];
        sub_A0D64((uint64_t)buf);
      }

      else
      {
        *(_OWORD *)v105.i64[1] = v98;
        unint64_t v32 = (_OWORD *)(v31 + 16);
      }

      v105.i64[1] = (uint64_t)v32;
    }

    std::__shared_weak_count::__release_weak(v30);
LABEL_59:
    if (v100) {
      std::__shared_weak_count::__release_weak(v100);
    }
    unint64_t v60 = v104;
    if (v104)
    {
      p_unsigned int shared_owners = (unint64_t *)&v104->__shared_owners_;
      do
        unint64_t v62 = __ldaxr(p_shared_owners);
      while (__stlxr(v62 - 1, p_shared_owners));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
  }

  unint64_t v66 = operator new(0x68uLL);
  sub_20D0B4((uint64_t)v66, (char **)&v105);
  a3[4] = (uint64_t)v66;
  __int16 v67 = operator new(0x68uLL);
  sub_20D2F0((uint64_t)v67, (char **)&v107);
  a3[5] = (uint64_t)v67;
  unint64_t v68 = operator new(0x68uLL);
  sub_CAEBC((uint64_t *)buf);
  uint64_t v94 = *(std::__shared_weak_count **)&buf[8];
  __int128 v97 = *(_OWORD *)buf;
  *(void *)AudioObjectPropertyAddress buf = 0LL;
  *(void *)&_DWORD buf[8] = 0LL;
  sub_CAF18((uint64_t)v68, &v97);
  a3[6] = (uint64_t)v68;
  if (v94)
  {
    unint64_t v69 = (unint64_t *)&v94->__shared_owners_;
    do
      unint64_t v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }

  unint64_t v71 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    unint64_t v72 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }

  unint64_t v74 = operator new(0x68uLL);
  sub_CB144((uint64_t *)buf);
  int v95 = *(std::__shared_weak_count **)&buf[8];
  __int128 v96 = *(_OWORD *)buf;
  *(void *)AudioObjectPropertyAddress buf = 0LL;
  *(void *)&_DWORD buf[8] = 0LL;
  sub_CAF18((uint64_t)v74, &v96);
  a3[7] = (uint64_t)v74;
  if (v95)
  {
    unint64_t v75 = (unint64_t *)&v95->__shared_owners_;
    do
      unint64_t v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }

  unint64_t v77 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    uint64_t v78 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }

  *(void *)AudioObjectPropertyAddress buf = &v105;
  sub_7A668((void ***)buf);
  *(void *)AudioObjectPropertyAddress buf = &v107;
  sub_7A668((void ***)buf);
}

void sub_20BF20( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char **a18, std::__shared_weak_count *a19, uint64_t a20, char a21, uint64_t a22, char a23, uint64_t a24, char *a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
  a18 = &a25;
  sub_7A668((void ***)&a18);
  a25 = &a29;
  sub_7A668((void ***)&a25);
  _Unwind_Resume(a1);
}

void sub_20C08C(uint64_t a1@<X0>, _DWORD *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t **a5@<X8>)
{
  uint64_t v108 = (__int128 *)(a2 + 30);
  uint64_t v112 = *(unsigned int **)a2;
  memset(__p, 0, sizeof(__p));
  sub_105E0C((char **)v114, *(_DWORD *)(a1 + 8), a2, (unsigned int **)__p);
  unint64_t v9 = sub_1BAF50((uint64_t)a3);
  char v10 = sub_7531C();
  uint64_t v109 = a2;
  uint64_t v111 = a2 + 6;
  if (HIDWORD(v9)) {
    char v11 = v10;
  }
  else {
    char v11 = 0;
  }
  BOOL v12 = (v11 & 1) == 0 && (v9 & 0xFFFFFFFD) == 1;
  int v107 = v12;
  if (*(_BYTE *)(a1 + 12))
  {
    uint64_t v13 = (void *)a3[1];
    if (v13 != a3)
    {
      while (1)
      {
        unint64_t v14 = (void *)v13[6];
        unint64_t v15 = (void *)v13[7];
LABEL_10:
        if (v14 != v15) {
          break;
        }
        uint64_t v13 = (void *)v13[1];
        if (v13 == a3) {
          goto LABEL_17;
        }
      }

      sub_9DCB8((uint64_t *)buf, v14);
      for (uint64_t i = *(void *)&buf[8]; ; uint64_t i = *(void *)(i + 8))
      {
        if ((uint8_t *)i == buf)
        {
          sub_1BB88((uint64_t *)buf);
          v14 += 3;
          goto LABEL_10;
        }

        if (*(_DWORD *)(*(void *)(i + 16) + 144LL) == 1886613611) {
          break;
        }
      }

      sub_1BB88((uint64_t *)buf);
      int v48 = a2;
      uint64_t v17 = (uint64_t *)operator new(0x390uLL);
      sub_2EF040((uint64_t)v17, a3, (uint64_t)v112, v108, v114, v107, a4);
      uint64_t v49 = a3[1];
      if ((void *)v49 == a3) {
        goto LABEL_138;
      }
      uint64_t v50 = 0LL;
      do
      {
        v50 += (*(unsigned int (**)(void))(**(void **)(v49 + 16) + 192LL))(*(void *)(v49 + 16));
        uint64_t v49 = *(void *)(v49 + 8);
      }

      while ((void *)v49 != a3);
      if (v50 != 1)
      {
LABEL_138:
        uint64_t v99 = (os_log_t *)sub_138E8(13);
        uint64_t v100 = *v99;
        if (*v99 && os_log_type_enabled(*v99, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_BYTE buf[14] = 296;
          _os_log_impl( &dword_0,  v100,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }

        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Precondition failure.");
      }

      sub_2315F8(v17);
      unint64_t v125 = (uint8_t *)&v125;
      int v126 = &v125;
      uint64_t v127 = 0LL;
      uint64_t v51 = (void *)a3[1];
      if (v51 != a3)
      {
        do
        {
          if (((*(uint64_t (**)(void))(*(void *)v51[2] + 192LL))(v51[2]) & 1) == 0)
          {
            int v52 = (uint8_t *)sub_85E54(v51 + 2);
            unint64_t v53 = v125;
            *(void *)int v52 = v125;
            *((void *)v52 + 1) = &v125;
            *((void *)v53 + 1) = v52;
            unint64_t v125 = v52;
            ++v127;
          }

          uint64_t v51 = (void *)v51[1];
        }

        while (v51 != a3);
        for (uint64_t j = v126; j != &v125; uint64_t j = (uint8_t **)j[1])
        {
          uint64_t v55 = sub_28153C((uint64_t)v17, v109[34], v111, 1LL, 0LL, (uint64_t *)j + 2, v112);
          __int16 v56 = operator new(0x18uLL);
          v56[1] = v17 + 106;
          v56[2] = v55;
          uint64_t v57 = v17[106];
          void *v56 = v57;
          *(void *)(v57 + 8) = v56;
          v17[106] = (uint64_t)v56;
          ++v17[108];
        }
      }

      uint64_t v117 = 0LL;
      int64x2_t v58 = (unsigned int *)*((void *)v112 + 3);
      if (v58 == v112 + 4)
      {
LABEL_67:
        uint64_t v63 = (os_log_t *)sub_138E8(13);
        int v64 = *v63;
        if (*v63 && os_log_type_enabled(*v63, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastFanout.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_BYTE buf[14] = 181;
          _os_log_impl( &dword_0,  v64,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Found no speaker device",  buf,  0x12u);
        }

        uint64_t v65 = 0LL;
      }

      else
      {
        while (1)
        {
          sub_B8CBC((uint64_t *)buf, (uint64_t *)v58 + 4, "", 172);
          uint64_t v59 = *(std::__shared_weak_count **)&buf[8];
          uint64_t v60 = *(void *)(*(void *)buf + 192LL);
          if (*(void *)&buf[8])
          {
            __int128 v61 = (unint64_t *)(*(void *)&buf[8] + 8LL);
            do
              unint64_t v62 = __ldaxr(v61);
            while (__stlxr(v62 - 1, v61));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }

          int64x2_t v58 = (unsigned int *)*((void *)v58 + 1);
          if (v58 == v112 + 4) {
            goto LABEL_67;
          }
        }

        uint64_t v65 = *((void *)v58 + 9);
      }

      unint64_t v71 = v135;
      v135[0] = (uint64_t *)&off_47C960;
      unint64_t v137 = v135;
      unint64_t v118 = &v118;
      uint64_t v119 = (uint64_t *)&v118;
      uint64_t v120 = 0LL;
      unint64_t v72 = (void *)a3[1];
      if (v72 == a3)
      {
        uint64_t v76 = 4LL;
      }

      else
      {
        do
        {
          unint64_t v73 = (void *)v72[6];
          unint64_t v74 = (void *)v72[7];
          while (v73 != v74)
          {
            for (unsigned int k = (void *)v73[1]; k != v73; unsigned int k = (void *)k[1])
            {
              if (!v137) {
                sub_82CEC();
              }
            }

            v73 += 3;
          }

          unint64_t v72 = (void *)v72[1];
        }

        while (v72 != a3);
        unint64_t v71 = v137;
        if (v137 == v135)
        {
          uint64_t v76 = 4LL;
          unint64_t v71 = v135;
          int v48 = v109;
        }

        else
        {
          int v48 = v109;
          if (!v137)
          {
LABEL_101:
            uint64_t v77 = v48[34];
            uint64_t v78 = *((void *)v112 + 5);
            *(void *)AudioObjectPropertyAddress buf = *(void *)(v48 + 31);
            sub_1F7320((uint64_t *)v123, v77, v111, &v118, v65, v78, (unsigned int *)buf, &v117);
            unint64_t v79 = (std::__shared_weak_count *)v17[98];
            int v80 = (std::__shared_weak_count *)v17[99];
            *(void *)&v116[0] = v79;
            *((void *)&v116[0] + 1) = v80;
            if (v80)
            {
              p_unsigned int shared_owners = (unint64_t *)&v80->__shared_owners_;
              do
                unint64_t v82 = __ldxr(p_shared_owners);
              while (__stxr(v82 + 1, p_shared_owners));
              v122[0] = v79;
              v122[1] = v80;
              p_shared_weak_owners = (unint64_t *)&v80->__shared_weak_owners_;
              do
                unint64_t v84 = __ldxr(p_shared_weak_owners);
              while (__stxr(v84 + 1, p_shared_weak_owners));
            }

            else
            {
              v122[0] = v79;
              v122[1] = 0LL;
            }

            __int128 v121 = *(_OWORD *)v123;
            v123[0] = 0LL;
            v123[1] = 0LL;
            uint64_t v85 = v117;
            sub_280F54((uint64_t)buf, v65, *((void *)v112 + 5), *v112, 1768776806LL);
            uint64_t v86 = (void **)sub_22B748((uint64_t)v17, (uint64_t *)v122, &v118, &v121, v85, (uint64_t)buf);
            uint64_t v87 = (std::__shared_weak_count *)*((void *)&v121 + 1);
            if (*((void *)&v121 + 1))
            {
              uint64_t v88 = (unint64_t *)(*((void *)&v121 + 1) + 8LL);
              do
                unint64_t v89 = __ldaxr(v88);
              while (__stlxr(v89 - 1, v88));
              if (!v89)
              {
                ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                std::__shared_weak_count::__release_weak(v87);
              }
            }

            if (v122[1]) {
              std::__shared_weak_count::__release_weak(v122[1]);
            }
            uint64_t v90 = (std::__shared_weak_count *)*((void *)&v116[0] + 1);
            if (*((void *)&v116[0] + 1))
            {
              __int128 v91 = (unint64_t *)(*((void *)&v116[0] + 1) + 8LL);
              do
                unint64_t v92 = __ldaxr(v91);
              while (__stlxr(v92 - 1, v91));
              if (!v92)
              {
                ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                std::__shared_weak_count::__release_weak(v90);
              }
            }

            memset(buf, 0, sizeof(buf));
            v115[0] = v86;
            if (v86)
            {
              unint64_t v93 = (std::__shared_weak_count *)operator new(0x20uLL);
              v93->__vftable = (std::__shared_weak_count_vtbl *)&off_47C9A8;
              v93->__shared_owners_ = 0LL;
              v93->__shared_weak_owners_ = 0LL;
              v93[1].__vftable = (std::__shared_weak_count_vtbl *)v86;
            }

            else
            {
              unint64_t v93 = 0LL;
            }

            v115[1] = (void **)&v93->__vftable;
            sub_85AF8(v116, v115);
            sub_2318DC((unint64_t *)v17, (uint64_t **)buf, (uint64_t **)v116);
            std::string::size_type v124 = (void **)v116;
            sub_7A668(&v124);
            if (v93)
            {
              uint64_t v94 = (unint64_t *)&v93->__shared_owners_;
              do
                unint64_t v95 = __ldaxr(v94);
              while (__stlxr(v95 - 1, v94));
              if (!v95)
              {
                ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                std::__shared_weak_count::__release_weak(v93);
              }
            }

            *(void *)&v116[0] = buf;
            sub_7A668((void ***)v116);
            (*(void (**)(uint64_t *))(*v17 + 600))(v17);
            __int128 v96 = v123[1];
            if (v123[1])
            {
              __int128 v97 = &v123[1]->__shared_owners_;
              do
                unint64_t v98 = __ldaxr((unint64_t *)v97);
              while (__stlxr(v98 - 1, (unint64_t *)v97));
              if (!v98)
              {
                ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                std::__shared_weak_count::__release_weak(v96);
              }
            }

            sub_85B80((uint64_t *)&v118);
            sub_85CA0((uint64_t *)&v125);
            goto LABEL_134;
          }

          uint64_t v76 = 5LL;
        }
      }

      ((void (*)(void))(*v71)[v76])();
      goto LABEL_101;
    }
  }

void sub_20CE14( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char *a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, char a34, uint64_t a35, uint64_t a36, char a37, uint64_t a38, char a39, std::__shared_weak_count *a40, char a41, uint64_t a42, uint64_t a43, char a44)
{
  a29 = &a24;
  sub_7A668((void ***)&a29);
  if (a21) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20D0B4(uint64_t a1, char **a2)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 64) = 0LL;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(void *)(a1 + 80) = 0LL;
  uint64_t v3 = (int64x2_t *)(a1 + 80);
  *(void *)a1 = off_484208;
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  int v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 == v5)
  {
    sub_CAEBC((uint64_t *)&v33);
    __int128 v14 = v33;
    __int128 v34 = v33;
    __int128 v33 = 0uLL;
    unint64_t v15 = *(void *)(a1 + 96);
    unint64_t v16 = *(_OWORD **)(a1 + 88);
    if ((unint64_t)v16 >= v15)
    {
      __int128 v32 = v14;
      uint64_t v18 = ((uint64_t)v16 - v3->i64[0]) >> 4;
      uint64_t v19 = v15 - v3->i64[0];
      uint64_t v20 = v19 >> 3;
      else {
        unint64_t v21 = v20;
      }
      uint64_t v38 = a1 + 96;
      __int128 v22 = (char *)sub_7BE90(v21);
      char v24 = &v22[16 * v18];
      *(_OWORD *)char v24 = v32;
      __int128 v34 = 0uLL;
      uint64_t v26 = *(void **)(a1 + 80);
      uint64_t v25 = *(void **)(a1 + 88);
      if (v25 == v26)
      {
        int64x2_t v29 = vdupq_n_s64((unint64_t)v25);
        uint64_t v27 = &v22[16 * v18];
      }

      else
      {
        uint64_t v27 = &v22[16 * v18];
        do
        {
          __int128 v28 = *((_OWORD *)v25 - 1);
          v25 -= 2;
          *((_OWORD *)v27 - 1) = v28;
          v27 -= 16;
          *uint64_t v25 = 0LL;
          v25[1] = 0LL;
        }

        while (v25 != v26);
        int64x2_t v29 = *v3;
      }

      uint64_t v17 = v24 + 16;
      *(void *)(a1 + 80) = v27;
      *(void *)(a1 + 88) = v24 + 16;
      int64x2_t v36 = v29;
      uint64_t v30 = *(void *)(a1 + 96);
      *(void *)(a1 + 96) = &v22[16 * v23];
      uint64_t v37 = v30;
      uint64_t v35 = v29.i64[0];
      sub_A0D64((uint64_t)&v35);
    }

    else
    {
      _OWORD *v16 = v14;
      uint64_t v17 = v16 + 1;
      __int128 v34 = 0uLL;
    }

    *(void *)(a1 + 88) = v17;
  }

  else
  {
    uint64_t v6 = v5 - v4;
    sub_1664F0((void **)(a1 + 80));
    if (v5 - v4 < 0) {
      sub_7A87C();
    }
    uint64_t v7 = v6 >> 4;
    uint64_t v8 = *(void *)(a1 + 96) - *(void *)(a1 + 80);
    else {
      unint64_t v9 = v7;
    }
    sub_846C4(v3, v9);
    char v10 = *(void **)(a1 + 88);
    do
    {
      *char v10 = *(void *)v4;
      uint64_t v11 = *((void *)v4 + 1);
      v10[1] = v11;
      if (v11)
      {
        BOOL v12 = (unint64_t *)(v11 + 8);
        do
          unint64_t v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }

      v4 += 16;
      v10 += 2;
    }

    while (v4 != v5);
    *(void *)(a1 + 88) = v10;
  }

  sub_CC160(a1);
  return a1;
}

void sub_20D2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_7A768((uint64_t)va1);
  sub_7A768((uint64_t)va);
  sub_7A668((void ***)va1);
  sub_F3008(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_20D2F0(uint64_t a1, char **a2)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 64) = 0LL;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(void *)(a1 + 80) = 0LL;
  uint64_t v3 = (int64x2_t *)(a1 + 80);
  *(void *)a1 = off_484208;
  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  int v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 == v5)
  {
    sub_CAEBC((uint64_t *)&v33);
    __int128 v14 = v33;
    __int128 v34 = v33;
    __int128 v33 = 0uLL;
    unint64_t v15 = *(void *)(a1 + 96);
    unint64_t v16 = *(_OWORD **)(a1 + 88);
    if ((unint64_t)v16 >= v15)
    {
      __int128 v32 = v14;
      uint64_t v18 = ((uint64_t)v16 - v3->i64[0]) >> 4;
      uint64_t v19 = v15 - v3->i64[0];
      uint64_t v20 = v19 >> 3;
      else {
        unint64_t v21 = v20;
      }
      uint64_t v38 = a1 + 96;
      __int128 v22 = (char *)sub_7BE90(v21);
      char v24 = &v22[16 * v18];
      *(_OWORD *)char v24 = v32;
      __int128 v34 = 0uLL;
      uint64_t v26 = *(void **)(a1 + 80);
      uint64_t v25 = *(void **)(a1 + 88);
      if (v25 == v26)
      {
        int64x2_t v29 = vdupq_n_s64((unint64_t)v25);
        uint64_t v27 = &v22[16 * v18];
      }

      else
      {
        uint64_t v27 = &v22[16 * v18];
        do
        {
          __int128 v28 = *((_OWORD *)v25 - 1);
          v25 -= 2;
          *((_OWORD *)v27 - 1) = v28;
          v27 -= 16;
          *uint64_t v25 = 0LL;
          v25[1] = 0LL;
        }

        while (v25 != v26);
        int64x2_t v29 = *v3;
      }

      uint64_t v17 = v24 + 16;
      *(void *)(a1 + 80) = v27;
      *(void *)(a1 + 88) = v24 + 16;
      int64x2_t v36 = v29;
      uint64_t v30 = *(void *)(a1 + 96);
      *(void *)(a1 + 96) = &v22[16 * v23];
      uint64_t v37 = v30;
      uint64_t v35 = v29.i64[0];
      sub_A0D64((uint64_t)&v35);
    }

    else
    {
      _OWORD *v16 = v14;
      uint64_t v17 = v16 + 1;
      __int128 v34 = 0uLL;
    }

    *(void *)(a1 + 88) = v17;
  }

  else
  {
    uint64_t v6 = v5 - v4;
    sub_1664F0((void **)(a1 + 80));
    if (v5 - v4 < 0) {
      sub_7A87C();
    }
    uint64_t v7 = v6 >> 4;
    uint64_t v8 = *(void *)(a1 + 96) - *(void *)(a1 + 80);
    else {
      unint64_t v9 = v7;
    }
    sub_846C4(v3, v9);
    char v10 = *(void **)(a1 + 88);
    do
    {
      *char v10 = *(void *)v4;
      uint64_t v11 = *((void *)v4 + 1);
      v10[1] = v11;
      if (v11)
      {
        BOOL v12 = (unint64_t *)(v11 + 8);
        do
          unint64_t v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }

      v4 += 16;
      v10 += 2;
    }

    while (v4 != v5);
    *(void *)(a1 + 88) = v10;
  }

  sub_CC160(a1);
  return a1;
}

void sub_20D4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_7A768((uint64_t)va1);
  sub_7A768((uint64_t)va);
  sub_7A668((void ***)va1);
  sub_F3008(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_20D52C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a2;
  uint64_t v87 = &v87;
  uint64_t v88 = (uint64_t *)&v87;
  uint64_t v89 = 0LL;
  v86[0] = 0LL;
  v86[1] = 0LL;
  uint64_t v85 = v86;
  int v8 = a2[3];
  unint64_t v9 = (os_log_t *)sub_138E8(20);
  uint64_t v76 = a1;
  int v75 = v8;
  char v10 = *v9;
  if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "RoutingHandler_Broadcast_GenericConfig1.cpp";
    __int16 v91 = 1024;
    int v92 = 161;
    _os_log_impl(&dword_0, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Configuring broadcast route controls", buf, 0x12u);
  }

  uint64_t v11 = *(void **)(*(void *)v6 + 24LL);
  if (v11 != (void *)(*(void *)v6 + 16LL))
  {
    BOOL v12 = (void **)&v96[2];
    unint64_t v13 = (void **)&buf[8];
    __int128 v14 = "";
    uint64_t v77 = v6;
    do
    {
      sub_B8CBC(&v83, v11 + 4, v14, 165);
      unint64_t v15 = *(os_unfair_lock_s **)(v83 + 192);
      if (!v15)
      {
        uint64_t v65 = (os_log_t *)sub_138E8(13);
        unint64_t v66 = *v65;
        if (*v65 && os_log_type_enabled(*v65, OS_LOG_TYPE_ERROR))
        {
          (*(void (**)(void ***__return_ptr))(*(void *)v83 + 144LL))(v82);
          unint64_t v67 = v82[0];
          sub_2CA1C(&__p, *(unsigned int *)(v83 + 144));
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "RoutingHandler_Broadcast_GenericConfig1.cpp";
          __int16 v91 = 1024;
          int v92 = 170;
          __int16 v93 = 2112;
          uint64_t v94 = (std::string *)v67;
          __int16 v95 = 2080;
          *(void *)__int128 v96 = p_p;
          _os_log_impl( &dword_0,  v66,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [activeDevice is NULL]: could not get device for port \\%@\\ (type: '%s').",  buf,  0x26u);
          sub_19DFC((uint64_t)v82);
        }

        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &off_4865A0;
        exception[2] = 2003329396;
      }

      int v16 = (*(uint64_t (**)(void, void))(*(void *)&v15->_os_unfair_lock_opaque + 240LL))( *(void *)(v83 + 192),  *(unsigned int *)(v83 + 144));
      __p.__r_.__value_.__r.__words[0] = 0x6F7574706D757465LL;
      LODWORD(__p.__r_.__value_.__r.__words[1]) = v16;
      if ((*(unsigned int (**)(os_unfair_lock_s *, std::string *))(*(void *)&v15->_os_unfair_lock_opaque
                                                                             + 16LL))( v15,  &__p))
      {
        uint64_t v17 = operator new(0x28uLL);
        void *v17 = &off_4842A0;
        v17[1] = v15;
        void v17[2] = __p.__r_.__value_.__r.__words[0];
        *((_DWORD *)v17 + 6) = __p.__r_.__value_.__r.__words[1];
        *(void *)((char *)v17 + 28) = 0x100000000LL;
        uint64_t v18 = operator new(0x18uLL);
        uint64_t v19 = *(void **)(a3 + 8);
        *uint64_t v18 = a3;
        v18[1] = v19;
        v18[2] = v17;
        *uint64_t v19 = v18;
        uint64_t v20 = *(void *)(a3 + 16) + 1LL;
        *(void *)(a3 + 8) = v18;
        *(void *)(a3 + 16) = v20;
        sub_1BCA18((uint64_t)v17);
      }

      sub_57ADC((uint64_t *)&v85, *(_DWORD *)(v83 + 144), *(_DWORD *)(v83 + 144));
      unint64_t v21 = v88;
      do
      {
        __int128 v22 = v21;
        char v24 = v21 + 1;
        unint64_t v21 = (uint64_t *)v21[1];
        uint64_t v23 = (os_unfair_lock_s *)v24[1];
      }

      while (v23 != v15 && v21 != (uint64_t *)&v87);
      if (v23 == v15)
      {
        uint64_t v27 = v13;
        __int128 v28 = v12;
        int64x2_t v29 = v14;
        uint64_t v30 = (uint64_t *)v22[6];
        uint64_t v31 = (std::__shared_weak_count *)v11[5];
        if (v31)
        {
          __int128 v32 = std::__shared_weak_count::lock(v31);
          __int128 v33 = v32;
          if (v32)
          {
            uint64_t v34 = v11[4];
            p_shared_weak_owners = (unint64_t *)&v32->__shared_weak_owners_;
            do
              unint64_t v36 = __ldxr(p_shared_weak_owners);
            while (__stxr(v36 + 1, p_shared_weak_owners));
            p_unsigned int shared_owners = (unint64_t *)&v32->__shared_owners_;
            do
              unint64_t v38 = __ldaxr(p_shared_owners);
            while (__stlxr(v38 - 1, p_shared_owners));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v33);
            }
          }

          else
          {
            uint64_t v34 = 0LL;
          }
        }

        else
        {
          uint64_t v34 = 0LL;
          __int128 v33 = 0LL;
        }

        uint64_t v39 = operator new(0x20uLL);
        v39[2] = v34;
        v39[3] = v33;
        v39[1] = v30;
        uint64_t v40 = *v30;
        void *v39 = *v30;
        *(void *)(v40 + 8) = v39;
        uint64_t *v30 = (uint64_t)v39;
        ++v30[2];
        __int128 v14 = v29;
        BOOL v12 = v28;
        unint64_t v13 = v27;
        uint64_t v6 = v77;
      }

      else
      {
LABEL_13:
        sub_1D2530(buf, (uint64_t)v15, v83);
        uint64_t v25 = operator new(0x78uLL);
        *uint64_t v25 = 0LL;
        v25[1] = 0LL;
        sub_20DEC4(v25 + 2, (uint64_t)buf);
        uint64_t v26 = (uint64_t)v87;
        *uint64_t v25 = v87;
        v25[1] = &v87;
        *(void *)(v26 + 8) = v25;
        uint64_t v87 = v25;
        ++v89;
        sub_85D64(v98);
        sub_85D64(v97);
        v82[0] = v12;
        sub_85DA4(v82);
        v82[0] = v13;
        sub_85DA4(v82);
      }

      sub_1B6C7C(v15, 1, v6[3], v11[9], a3);
      unint64_t v41 = v84;
      if (v84)
      {
        __int128 v42 = (unint64_t *)&v84->__shared_owners_;
        do
          unint64_t v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }

      uint64_t v11 = (void *)v11[1];
    }

    while (v11 != (void *)(*(void *)v6 + 16LL));
  }

  if (!v89)
  {
    unint64_t v70 = (os_log_t *)sub_138E8(13);
    unint64_t v71 = *v70;
    if (*v70 && os_log_type_enabled(*v70, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandler_Broadcast_GenericConfig1.cpp";
      __int16 v91 = 1024;
      int v92 = 200;
      _os_log_impl( &dword_0,  v71,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): could not get any IO devices for broadcast route",  buf,  0x12u);
    }

    unint64_t v72 = __cxa_allocate_exception(0x10uLL);
    *(void *)unint64_t v72 = &off_4865A0;
    v72[2] = 2003329396;
  }

  for (uint64_t i = v88; i != (uint64_t *)&v87; uint64_t i = (uint64_t *)i[1])
  {
    sub_85EA4(buf, i + 2);
    unint64_t v45 = (char *)operator new(0x30uLL);
    int v46 = (*(uint64_t (**)(void))(**(void **)buf + 120LL))(*(void *)buf);
    sub_85A90(&v78, *(void **)&v96[2]);
    *(void *)unint64_t v45 = off_484140;
    *((_DWORD *)v45 + 2) = v46;
    *((void *)v45 + 2) = v45 + 16;
    *((void *)v45 + 3) = v45 + 16;
    *((void *)v45 + 4) = 0LL;
    uint64_t v47 = v80;
    if (v80)
    {
      uint64_t v49 = v78;
      int v48 = v79;
      uint64_t v50 = *v79;
      *(void *)(v50 + 8) = *(void *)(v78 + 8);
      **(void **)(v49 + 8) = v50;
      uint64_t v51 = *((void *)v45 + 2);
      *(void *)(v51 + 8) = v48;
      *int v48 = v51;
      *((void *)v45 + 2) = v49;
      *(void *)(v49 + 8) = v45 + 16;
      *((void *)v45 + 4) = v47;
      uint64_t v80 = 0LL;
    }

    strcpy(v45 + 40, "duar");
    int v52 = operator new(0x18uLL);
    unint64_t v53 = *(void **)(a3 + 8);
    *int v52 = a3;
    v52[1] = v53;
    v52[2] = v45;
    *unint64_t v53 = v52;
    uint64_t v54 = *(void *)(a3 + 16) + 1LL;
    *(void *)(a3 + 8) = v52;
    *(void *)(a3 + 16) = v54;
    sub_CCAB4((uint64_t)v45);
    sub_85B80(&v78);
    sub_85D64(v98);
    sub_85D64(v97);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v96[2];
    sub_85DA4((void ***)&__p);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf[8];
    sub_85DA4((void ***)&__p);
  }

  (*(void (**)(uint64_t *__return_ptr, uint64_t, int *, void **, void ***))(*(void *)v76 + 48LL))( &v83,  v76,  v6,  &v87,  &v85);
  if (v75 == 1918990112) {
    int v55 = sub_14D9C8();
  }
  else {
    int v55 = 0;
  }
  int v56 = sub_1BDD40(&v85, &v83);
  if (v55)
  {
    if (v56)
    {
      uint64_t v57 = (os_log_t *)sub_138E8(2);
      int64x2_t v58 = *v57;
      if (*v57)
      {
        if (os_log_type_enabled(*v57, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "RoutingHandler_Broadcast_GenericConfig1.cpp";
          __int16 v91 = 1024;
          int v92 = 219;
          _os_log_impl( &dword_0,  v58,  OS_LOG_TYPE_ERROR,  "%25s:%-5d RawModeDisablesSpeakerProcessing is active, but Speaker Protection is also active in HAL",  buf,  0x12u);
        }
      }
    }

    goto LABEL_45;
  }

  if ((v56 & 1) != 0)
  {
LABEL_45:
    sub_1BCA68((uint64_t)v6, a3);
    sub_1BCF60(v83, a3, a5, v75);
    uint64_t v59 = 0LL;
    *(void *)(a4 + 16) = v83;
    *(void *)(a4 + 24) = 0LL;
    goto LABEL_56;
  }

  uint64_t v60 = (os_log_t *)sub_138E8(19);
  __int128 v61 = *v60;
  if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_DEFAULT))
  {
    sub_1ACDE4(&__p, (uint64_t)v6);
    unint64_t v62 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "RoutingHandler_Broadcast_GenericConfig1.cpp";
    __int16 v91 = 1024;
    int v92 = 224;
    __int16 v93 = 2080;
    uint64_t v94 = v62;
    _os_log_impl( &dword_0,  v61,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d HAL Speaker Protection is missing. Failing route %s",  buf,  0x1Cu);
  }

  uint64_t v63 = v83;
  uint64_t v83 = 0LL;
  if (v63) {
    (*(void (**)(uint64_t))(*(void *)v63 + 8LL))(v63);
  }
  uint64_t v59 = 1LL;
LABEL_56:
  sub_32C8C(v86[0]);
  sub_85CA0((uint64_t *)&v87);
  return v59;
}

void sub_20DDD4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, uint64_t a28)
{
  if (a23) {
    (*(void (**)(uint64_t))(*(void *)a23 + 8LL))(a23);
  }
  sub_32C8C(a26);
  sub_85CA0(&a28);
  _Unwind_Resume(a1);
}

void *sub_20DEC4(void *result, uint64_t a2)
{
  void *result = *(void *)a2;
  result[1] = 0LL;
  result[2] = 0LL;
  result[3] = 0LL;
  *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 8);
  result[3] = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  *(void *)(a2 + 24) = 0LL;
  result[4] = 0LL;
  result[5] = 0LL;
  result[6] = 0LL;
  *((_OWORD *)result + 2) = *(_OWORD *)(a2 + 32);
  result[6] = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0LL;
  *(void *)(a2 + 40) = 0LL;
  *(void *)(a2 + 48) = 0LL;
  result[7] = *(void *)(a2 + 56);
  int v2 = (void *)(a2 + 64);
  uint64_t v3 = *(void *)(a2 + 64);
  result[8] = v3;
  int v4 = result + 8;
  uint64_t v5 = *(void *)(a2 + 72);
  result[9] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    *(void *)(a2 + 56) = v2;
    void *v2 = 0LL;
    *(void *)(a2 + 72) = 0LL;
  }

  else
  {
    result[7] = v4;
  }

  result[10] = *(void *)(a2 + 80);
  uint64_t v6 = (void *)(a2 + 88);
  uint64_t v7 = *(void *)(a2 + 88);
  result[11] = v7;
  int v8 = result + 11;
  uint64_t v9 = *(void *)(a2 + 96);
  result[12] = v9;
  if (v9)
  {
    *(void *)(v7 + 16) = v8;
    *(void *)(a2 + 80) = v6;
    *uint64_t v6 = 0LL;
    *(void *)(a2 + 96) = 0LL;
  }

  else
  {
    result[10] = v8;
  }

  return result;
}

uint64_t sub_20DF7C(uint64_t a1, void **a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = (uint64_t *)(*a2)[3];
  sub_B8CBC((uint64_t *)&v320, v9 + 4, "", 84);
  char v10 = (os_unfair_lock_s *)*((void *)v320 + 24);
  if (!v10)
  {
    double v258 = (os_log_t *)sub_138E8(13);
    uint64_t v259 = *v258;
    if (*v258 && os_log_type_enabled(*v258, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(int64x2_t *__return_ptr))(*(void *)v320 + 144LL))(&v322);
      uint64_t v260 = v322.i64[0];
      sub_2CA1C(&v324, v320[36]);
      if ((v324.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        double v261 = &v324;
      }
      else {
        double v261 = (std::string *)v324.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "RoutingHandler_Playback_GenericConfig1.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = 93;
      *(_WORD *)&_BYTE buf[18] = 2112;
      *(void *)&_BYTE buf[20] = v260;
      *(_WORD *)&_BYTE buf[28] = 2080;
      *(void *)&_BYTE buf[30] = v261;
      _os_log_impl( &dword_0,  v259,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [activeDevice is NULL]: could not get device for port \\ %@\\ (type: '%s').",  buf,  0x26u);
      sub_19DFC((uint64_t)&v322);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003329396;
  }

  int v289 = *((_DWORD *)a2 + 3);
  unsigned int v290 = v320[36];
  int v11 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&v10->_os_unfair_lock_opaque + 240LL))(v10);
  uint64_t v318 = 0x6F7574706D757465LL;
  int v319 = v11;
  if ((*(unsigned int (**)(os_unfair_lock_s *, uint64_t *))(*(void *)&v10->_os_unfair_lock_opaque + 24LL))( v10,  &v318))
  {
    BOOL v12 = operator new(0x28uLL);
    void *v12 = &off_4842A0;
    v12[1] = v10;
    void v12[2] = v318;
    *((_DWORD *)v12 + 6) = v319;
    *(void *)((char *)v12 + 28) = 0x100000000LL;
    unint64_t v13 = operator new(0x18uLL);
    __int128 v14 = *(void **)(a3 + 8);
    void *v13 = a3;
    v13[1] = v14;
    uint64_t v13[2] = v12;
    *__int128 v14 = v13;
    uint64_t v15 = *(void *)(a3 + 16) + 1LL;
    *(void *)(a3 + 8) = v13;
    *(void *)(a3 + 16) = v15;
    sub_1BCA18((uint64_t)v12);
  }

  sub_1B6C7C(v10, 1, *((_DWORD *)a2 + 3), v9[9], a3);
  if (v290 == 1886545251)
  {
    int v16 = (void *)sub_EAD14();
    *(void *)AudioObjectPropertyAddress buf = CFStringCreateWithCString(0LL, "Speaker", 0x600u);
    _DWORD buf[8] = 1;
    uint64_t v17 = sub_EAE28(v16, (CFStringRef *)buf);
    sub_19DFC((uint64_t)buf);
    if (v17)
    {
      if (sub_2C7C00(v17))
      {
        uint64_t v18 = operator new(0x20uLL);
        sub_32DB08((uint64_t)v18, v17, *a2);
        uint64_t v19 = operator new(0x18uLL);
        uint64_t v20 = *(void **)(a3 + 8);
        *uint64_t v19 = a3;
        v19[1] = v20;
        void v19[2] = v18;
        *uint64_t v20 = v19;
        uint64_t v21 = *(void *)(a3 + 16) + 1LL;
        *(void *)(a3 + 8) = v19;
        *(void *)(a3 + 16) = v21;
        (*(void (**)(void *))(*(void *)v18 + 16LL))(v18);
      }
    }
  }

  if (sub_105B8C(*(uint64_t **)(a5 + 8), 3))
  {
    uint64_t v22 = sub_105C24(a5, 3);
    sub_B8CBC((uint64_t *)&v324, (uint64_t *)(v22 + 16), "", 119);
    if (v290 == 1886545251)
    {
      if (*(os_unfair_lock_s **)(v324.__r_.__value_.__r.__words[0] + 192) == v10)
      {
        if (*(_DWORD *)(v324.__r_.__value_.__r.__words[0] + 144) == 1885888867)
        {
          if (!sub_105B8C(*(uint64_t **)(a5 + 8), 2))
          {
            int v23 = (*(uint64_t (**)(os_unfair_lock_s *, uint64_t))(*(void *)&v10->_os_unfair_lock_opaque
                                                                         + 240LL))( v10,  1885888867LL);
            char v24 = operator new(0x28uLL);
            *char v24 = &off_4842A0;
            v24[1] = v10;
            v24[2] = 0x6F7574706D757465LL;
            *((_DWORD *)v24 + 6) = v23;
            *(void *)((char *)v24 + 28) = 0x100000000LL;
            uint64_t v25 = operator new(0x18uLL);
            uint64_t v26 = *(void **)(a3 + 8);
            *uint64_t v25 = a3;
            v25[1] = v26;
            void v25[2] = v24;
            void *v26 = v25;
            uint64_t v27 = *(void *)(a3 + 16) + 1LL;
            *(void *)(a3 + 8) = v25;
            *(void *)(a3 + 16) = v27;
            sub_1BCA18((uint64_t)v24);
            int size = (std::__shared_weak_count *)v324.__r_.__value_.__l.__size_;
            if (v324.__r_.__value_.__l.__size_)
            {
              int64x2_t v29 = (unint64_t *)(v324.__r_.__value_.__l.__size_ + 8);
              do
                unint64_t v30 = __ldaxr(v29);
              while (__stlxr(v30 - 1, v29));
              if (!v30)
              {
                ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                std::__shared_weak_count::__release_weak(size);
              }
            }

            goto LABEL_18;
          }

          int v273 = (os_log_t *)sub_138E8(13);
          std::string::size_type v274 = *v273;
          if (*v273 && os_log_type_enabled(*v273, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "RoutingHandler_Playback_GenericConfig1.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&_BYTE buf[14] = 132;
            _os_log_impl( &dword_0,  v274,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Illegal route: both HAC and ANC are present in route. Database error?",  buf,  0x12u);
          }

          __n128 v268 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v268, "Illegal route: both HAC and ANC are present in route. Database error?");
        }

        else
        {
          uint64_t v271 = (os_log_t *)sub_138E8(13);
          v272 = *v271;
          if (*v271 && os_log_type_enabled(*v271, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "RoutingHandler_Playback_GenericConfig1.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&_BYTE buf[14] = 129;
            _os_log_impl( &dword_0,  v272,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Illegal route: HAC connection's destination port type is not HAC . Database error?",  buf,  0x12u);
          }

          __n128 v268 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error( v268,  "Illegal route: HAC connection's destination port type is not HAC. Database error?");
        }
      }

      else
      {
        uint64_t v269 = (os_log_t *)sub_138E8(13);
        __int16 v270 = *v269;
        if (*v269 && os_log_type_enabled(*v269, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "RoutingHandler_Playback_GenericConfig1.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&_BYTE buf[14] = 126;
          _os_log_impl( &dword_0,  v270,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Illegal route: HAC and downlink connections' destination devices d o not match. Database error?",  buf,  0x12u);
        }

        __n128 v268 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error( v268,  "Illegal route: HAC and downlink connections' destination devices do not match. Database error?");
      }
    }

    else
    {
      int v266 = (os_log_t *)sub_138E8(13);
      unint64_t v267 = *v266;
      if (*v266 && os_log_type_enabled(*v266, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "RoutingHandler_Playback_GenericConfig1.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = 123;
        _os_log_impl( &dword_0,  v267,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Detected presence of HAC connection in a non-Receiver route. Database error?",  buf,  0x12u);
      }

      __n128 v268 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error( v268,  "Detected presence of HAC connection in a non-Receiver route. Database error?");
    }
  }

void sub_2101E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, std::__shared_weak_count *a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,char a61)
{
  a38 = (uint64_t)&a41;
  sub_7A668((void ***)&a38);
  a41 = (uint64_t)&a61;
  sub_7A668((void ***)&a41);
  if (a44) {
    (*(void (**)(uint64_t))(*(void *)a44 + 8LL))(a44);
  }
  sub_32C8C((void *)a46);
  sub_85B80(&a51);
  if (__p)
  {
    a55 = (uint64_t)__p;
    operator delete(__p);
  }

  sub_7A768((uint64_t)&a59);
  _Unwind_Resume(a1);
}

uint64_t *sub_210660(uint64_t *a1, void *a2, uint64_t a3)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  if (a3)
  {
    uint64_t v5 = 104 * a3;
    do
    {
      uint64_t v6 = sub_85E54(a2);
      uint64_t v7 = *a1;
      *uint64_t v6 = *a1;
      v6[1] = a1;
      *(void *)(v7 + 8) = v6;
      *a1 = (uint64_t)v6;
      ++a1[2];
      a2 += 13;
      v5 -= 104LL;
    }

    while (v5);
  }

  return a1;
}

void sub_2106D0(_Unwind_Exception *a1)
{
}

uint64_t sub_2106EC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = (os_log_t *)sub_138E8(19);
  char v10 = *v9;
  if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
  {
    sub_1ACDE4(&v315, a2);
    int v11 = (v315.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v315 : (std::string *)v315.__r_.__value_.__r.__words[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&_BYTE buf[14] = 164;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&_BYTE buf[20] = v11;
    _os_log_impl(&dword_0, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Activating route %s", buf, 0x1Cu);
  }

  if ((sub_105B8C(*(uint64_t **)(a5 + 8), 0) & 1) == 0)
  {
    int v230 = (os_log_t *)sub_138E8(13);
    unint64_t v231 = *v230;
    if (*v230 && os_log_type_enabled(*v230, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = 165;
      _os_log_impl(&dword_0, v231, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if ((sub_105B8C(*(uint64_t **)(a5 + 8), 1) & 1) == 0)
  {
    unint64_t v233 = (os_log_t *)sub_138E8(13);
    char v234 = *v233;
    if (*v233 && os_log_type_enabled(*v233, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = 166;
      _os_log_impl(&dword_0, v234, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    CFTypeID v235 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v235, "Precondition failure.");
  }

  uint64_t v269 = (uint64_t *)sub_105C24(a5, 0);
  uint64_t v12 = sub_105C24(a5, 1);
  int v268 = *(_DWORD *)(a2 + 12);
  sub_B8CBC((uint64_t *)&v305, v269, "", 172);
  int v266 = a4;
  sub_B8CBC((uint64_t *)&v304, (uint64_t *)(v12 + 16), "", 173);
  unsigned int v13 = *((_DWORD *)v305 + 36);
  uint64_t v14 = *(unsigned int *)(v304 + 144);
  __int128 v301 = 0LL;
  uint64_t v302 = 0LL;
  uint64_t v303 = 0LL;
  (*(void (**)(_BYTE *__return_ptr))(*(void *)v305[24] + 128LL))(buf);
  CFComparisonResult v15 = CFStringCompare(*(CFStringRef *)buf, @"Codec", 0LL);
  sub_19DFC((uint64_t)buf);
  if (v15)
  {
    int v16 = (os_unfair_lock_s *)v305[24];
    if (!v16)
    {
      uint64_t v17 = (os_log_t *)sub_138E8(13);
      uint64_t v18 = *v17;
      if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
      {
        (*(void (**)(void **__return_ptr))(*v305 + 144))(&v299);
        uint64_t v19 = v299;
        sub_2CA1C(&v315, *((unsigned int *)v305 + 36));
        if ((v315.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v20 = &v315;
        }
        else {
          uint64_t v20 = (std::string *)v315.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = 211;
        *(_WORD *)&_BYTE buf[18] = 2112;
        *(void *)&_BYTE buf[20] = v19;
        *(_WORD *)&_BYTE buf[28] = 2080;
        *(void *)&_BYTE buf[30] = v20;
        _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [inputIODevice is NULL]: could not get device for port \\%@\\ (type: '%s').",  buf,  0x26u);
        sub_19DFC((uint64_t)&v299);
      }

      goto LABEL_377;
    }
  }

  else
  {
    uint64_t v21 = (void *)sub_EAD14();
    *(void *)AudioObjectPropertyAddress buf = CFStringCreateWithCString(0LL, "Codec", 0x600u);
    _DWORD buf[8] = 1;
    int v16 = (os_unfair_lock_s *)sub_EAE28(v21, (CFStringRef *)buf);
    uint64_t v22 = sub_19DFC((uint64_t)buf);
    if (!v16)
    {
      unint64_t v247 = (os_log_t *)sub_138E8(13);
      uint64_t v248 = *v247;
      if (*v247 && os_log_type_enabled(*v247, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = 186;
        _os_log_impl( &dword_0,  v248,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [inputControlDevice is NULL]: could not get codec device",  buf,  0x12u);
      }

LABEL_377:
      unint64_t v249 = __cxa_allocate_exception(0x10uLL);
      *(void *)unint64_t v249 = &off_4865A0;
      v249[2] = 2003329396;
    }

    sub_1B6AD4(v22, (uint64_t)v16, (uint64_t)v305, a2, v269[7], *(_DWORD *)(a2 + 12));
    int v23 = v306;
    uint64_t v299 = v305;
    char v300 = v306;
    if (v306)
    {
      p_shared_weak_owners = (unint64_t *)&v306->__shared_weak_owners_;
      do
        unint64_t v25 = __ldxr(p_shared_weak_owners);
      while (__stxr(v25 + 1, p_shared_weak_owners));
    }

    sub_1BC5DC((uint64_t)&v315, (char **)buf, (uint64_t *)&v299);
    sub_7E6D4( (char *)&v301,  v315.__r_.__value_.__l.__data_,  v315.__r_.__value_.__l.__size_,  (uint64_t)(v315.__r_.__value_.__l.__size_ - v315.__r_.__value_.__r.__words[0]) >> 2);
    if (v315.__r_.__value_.__r.__words[0])
    {
      v315.__r_.__value_.__l.__size_ = v315.__r_.__value_.__r.__words[0];
      operator delete(v315.__r_.__value_.__l.__data_);
    }

    if (v23) {
      std::__shared_weak_count::__release_weak(v23);
    }
    if (v16[171]._os_unfair_lock_opaque < (unint64_t)((v302 - (uint64_t)v301) >> 2))
    {
      unint64_t v250 = (os_log_t *)sub_138E8(13);
      uint64_t v251 = *v250;
      if (*v250 && os_log_type_enabled(*v250, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v315.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v315.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
        WORD2(v315.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&v315.__r_.__value_.__r.__words[1] + 6) = 203;
        _os_log_impl( &dword_0,  v251,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [inputIODevice is NULL]: could not get input device",  (uint8_t *)&v315,  0x12u);
      }

      uint64_t v252 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v252 = &off_4865A0;
      v252[2] = 2003329396;
    }

    if (*(void *)buf)
    {
      *(void *)&_DWORD buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
  }

  if (v13 == 1885629550 && (_DWORD)v14 == 1886743662)
  {
    strcpy(buf, "crscbolg");
    buf[9] = 0;
    *(_WORD *)&_DWORD buf[10] = 0;
    sub_1BC73C((uint64_t)buf, a3, 1650602615);
    strcpy(buf, "sddmurtp");
    buf[9] = 0;
    *(_WORD *)&_DWORD buf[10] = 0;
    sub_1BC73C((uint64_t)buf, a3, 1634742884);
  }

  sub_1B6C7C(v16, 0, *(_DWORD *)(a2 + 12), v269[7], a3);
  sub_9005C();
  if (byte_48CC70)
  {
    BOOL v26 = (unsigned __int16)sub_2D032C(*(void *)(a2 + 104), *(unsigned int *)(a2 + 12), v13) > 0x100u;
    sub_1BADEC(v26, v305[24]);
  }

  sub_1B6AD4((uint64_t)&v299, (uint64_t)v16, (uint64_t)v305, a2, v269[7], *(_DWORD *)(a2 + 12));
  uint64_t v27 = v306;
  *(void *)AudioObjectPropertyAddress buf = v305;
  *(void *)&_DWORD buf[8] = v306;
  if (v306)
  {
    __int128 v28 = (unint64_t *)&v306->__shared_weak_owners_;
    do
      unint64_t v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }

  sub_1BB524((unsigned int **)&v299, (uint64_t *)buf, v16);
  unsigned int v265 = v13;
  if (v27) {
    std::__shared_weak_count::__release_weak(v27);
  }
  unint64_t v30 = *(os_unfair_lock_s **)(v304 + 192);
  if (!v30)
  {
    unsigned __int16 v236 = (os_log_t *)sub_138E8(13);
    uint64_t v237 = *v236;
    if (*v236 && os_log_type_enabled(*v236, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void **__return_ptr))(*(void *)v304 + 144LL))(v294);
      unint64_t v238 = v294[0];
      sub_2CA1C(&v315, *(unsigned int *)(v304 + 144));
      if ((v315.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v239 = &v315;
      }
      else {
        uint64_t v239 = (std::string *)v315.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&_BYTE buf[14] = 241;
      *(_WORD *)&_BYTE buf[18] = 2112;
      *(void *)&_BYTE buf[20] = v238;
      *(_WORD *)&_BYTE buf[28] = 2080;
      *(void *)&_BYTE buf[30] = v239;
      _os_log_impl( &dword_0,  v237,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [outputIODevice is NULL]: \"could not get device for port \\" "\"%@\\\" (type: '%s').\""",  buf,  0x26u);
      sub_19DFC((uint64_t)v294);
    }

    unint64_t v240 = __cxa_allocate_exception(0x10uLL);
    *(void *)unint64_t v240 = &off_4865A0;
    v240[2] = 2003329396;
  }

  if ((_DWORD)v14 == 1886545251)
  {
    uint64_t v31 = (void *)sub_EAD14();
    *(void *)AudioObjectPropertyAddress buf = CFStringCreateWithCString(0LL, "Speaker", 0x600u);
    _DWORD buf[8] = 1;
    uint64_t v32 = sub_EAE28(v31, (CFStringRef *)buf);
    sub_19DFC((uint64_t)buf);
    strcpy(buf, "shCSptuo");
    buf[9] = 0;
    *(_WORD *)&_DWORD buf[10] = 0;
    if (v32)
    {
      if ((*(unsigned int (**)(uint64_t, _BYTE *))(*(void *)v32 + 16LL))(v32, buf)
        && sub_2C7C00(v32))
      {
        __int128 v33 = operator new(0x20uLL);
        sub_32DB08((uint64_t)v33, v32, *(void **)a2);
        uint64_t v34 = operator new(0x18uLL);
        uint64_t v35 = *(void **)(a3 + 8);
        void *v34 = a3;
        v34[1] = v35;
        void v34[2] = v33;
        void *v35 = v34;
        uint64_t v36 = *(void *)(a3 + 16) + 1LL;
        *(void *)(a3 + 8) = v34;
        *(void *)(a3 + 16) = v36;
        (*(void (**)(void *))(*(void *)v33 + 16LL))(v33);
      }
    }
  }

  int v37 = (*(uint64_t (**)(os_unfair_lock_s *, uint64_t))(*(void *)&v30->_os_unfair_lock_opaque + 240LL))( v30,  v14);
  uint64_t v297 = 0x6F7574706D757465LL;
  int v298 = v37;
  if ((*(unsigned int (**)(os_unfair_lock_s *, uint64_t *))(*(void *)&v30->_os_unfair_lock_opaque + 24LL))( v30,  &v297))
  {
    unint64_t v38 = operator new(0x28uLL);
    void *v38 = &off_4842A0;
    v38[1] = v30;
    void v38[2] = v297;
    *((_DWORD *)v38 + 6) = v298;
    *(void *)((char *)v38 + 28) = 0x100000000LL;
    uint64_t v39 = operator new(0x18uLL);
    unint64_t v40 = *(void **)(a3 + 8);
    void *v39 = a3;
    v39[1] = v40;
    v39[2] = v38;
    *unint64_t v40 = v39;
    uint64_t v41 = *(void *)(a3 + 16) + 1LL;
    *(void *)(a3 + 8) = v39;
    *(void *)(a3 + 16) = v41;
    sub_1BCA18((uint64_t)v38);
  }

  sub_1B6C7C(v30, 1, *(_DWORD *)(a2 + 12), *(void *)(v12 + 56), a3);
  uint64_t v42 = sub_105C24(a5, 3);
  std::string::size_type v295 = 0LL;
  __int128 v296 = 0LL;
  unint64_t v43 = *(std::__shared_weak_count **)(v42 + 24);
  if (!v43) {
    goto LABEL_59;
  }
  uint64_t v44 = std::__shared_weak_count::lock(v43);
  if (!v44)
  {
LABEL_58:
    std::string::size_type v295 = 0LL;
    __int128 v296 = 0LL;
    goto LABEL_59;
  }

  uint64_t v45 = v44;
  std::string::size_type v46 = *(void *)(v42 + 16);
  unint64_t v47 = (unint64_t *)&v44->__shared_weak_owners_;
  do
    unint64_t v48 = __ldxr(v47);
  while (__stxr(v48 + 1, v47));
  std::string::size_type v295 = v46;
  __int128 v296 = v44;
  p_unsigned int shared_owners = (unint64_t *)&v44->__shared_owners_;
  do
    unint64_t v50 = __ldaxr(p_shared_owners);
  while (__stlxr(v50 - 1, p_shared_owners));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v45);
  }

LABEL_291:
            unint64_t v206 = operator new(0x68uLL);
            sub_CB144((uint64_t *)buf);
            int v273 = *(std::__shared_weak_count **)&buf[8];
            __int128 v274 = *(_OWORD *)buf;
            *(void *)AudioObjectPropertyAddress buf = 0LL;
            *(void *)&_DWORD buf[8] = 0LL;
            sub_CAF18((uint64_t)v206, &v274);
            v266[7] = v206;
            if (v273)
            {
              uint64_t v207 = (unint64_t *)&v273->__shared_owners_;
              do
                unint64_t v208 = __ldaxr(v207);
              while (__stlxr(v208 - 1, v207));
              if (!v208)
              {
                ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
                std::__shared_weak_count::__release_weak(v273);
              }
            }

            unint64_t v209 = *(std::__shared_weak_count **)&buf[8];
            if (*(void *)&buf[8])
            {
              uint64_t v210 = (unint64_t *)(*(void *)&buf[8] + 8LL);
              do
                unint64_t v211 = __ldaxr(v210);
              while (__stlxr(v211 - 1, v210));
              if (!v211)
              {
                ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
                std::__shared_weak_count::__release_weak(v209);
              }
            }

            __int16 v212 = (std::__shared_weak_count *)*((void *)&v286 + 1);
            if (*((void *)&v286 + 1))
            {
              uint64_t v213 = (unint64_t *)(*((void *)&v286 + 1) + 8LL);
              do
                unint64_t v214 = __ldaxr(v213);
              while (__stlxr(v214 - 1, v213));
              if (!v214)
              {
                ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
                std::__shared_weak_count::__release_weak(v212);
              }
            }

            *(void *)AudioObjectPropertyAddress buf = v287;
            sub_7A668((void ***)buf);
            if (v290) {
              std::__shared_weak_count::__release_weak(v290);
            }
            if (v292) {
              std::__shared_weak_count::__release_weak(v292);
            }
            if (v316)
            {
              sub_D0C4C((void *)v315.__r_.__value_.__l.__cap_);
              int v215 = (void *)v315.__r_.__value_.__r.__words[0];
              v315.__r_.__value_.__r.__words[0] = 0LL;
              if (v215) {
                operator delete(v215);
              }
            }

            uint64_t v100 = 0LL;
            goto LABEL_314;
          }

LABEL_281:
          std::string::size_type v202 = operator new(0x68uLL);
          sub_CAEBC((uint64_t *)buf);
          v272 = *(std::__shared_weak_count **)&buf[8];
          __int128 v275 = *(_OWORD *)buf;
          *(void *)AudioObjectPropertyAddress buf = 0LL;
          *(void *)&_DWORD buf[8] = 0LL;
          sub_CAF18((uint64_t)v202, &v275);
          v266[6] = v202;
          if (v272)
          {
            unsigned __int8 v203 = (unint64_t *)&v272->__shared_owners_;
            do
              unint64_t v204 = __ldaxr(v203);
            while (__stlxr(v204 - 1, v203));
            if (!v204)
            {
              ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
              std::__shared_weak_count::__release_weak(v272);
            }
          }

          __int128 v199 = *(std::__shared_weak_count **)&buf[8];
          if (!*(void *)&buf[8]) {
            goto LABEL_291;
          }
          uint64_t v205 = (unint64_t *)(*(void *)&buf[8] + 8LL);
          do
            unint64_t v201 = __ldaxr(v205);
          while (__stlxr(v201 - 1, v205));
          goto LABEL_289;
        }

LABEL_270:
        if (v172) {
          goto LABEL_271;
        }
        goto LABEL_281;
      }
    }

    else
    {
      std::string::size_type v91 = v293;
    }

    sub_1B37C4((uint64_t *)v283, a2, (uint64_t)v91, v304, *(void *)(v12 + 56), a3, 0);
    if (!v283[1] || v283[1]->__shared_owners_ == -1)
    {
      unint64_t v244 = (os_log_t *)sub_138E8(13);
      uint64_t v245 = *v244;
      if (*v244 && os_log_type_enabled(*v244, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = 404;
        _os_log_impl( &dword_0,  v245,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to locate volume control",  buf,  0x12u);
      }

      int v246 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v246, "Unable to locate volume control");
    }

    sub_CB19C(&v282, (uint64_t)v283[0], v283[1]);
    char v101 = v287[1];
    if (v287[1] >= v288)
    {
      int64_t v102 = ((char *)v287[1] - (char *)v287[0]) >> 4;
      unint64_t v103 = v102 + 1;
      uint64_t v104 = (char *)v288 - (char *)v287[0];
      else {
        unint64_t v105 = v103;
      }
      *(void *)&_BYTE buf[32] = &v288;
      BOOL v106 = (char *)sub_7BE90(v105);
      uint64_t v108 = &v106[16 * v102];
      *(std::__shared_count *)uint64_t v108 = v282;
      std::__shared_count v282 = (std::__shared_count)0LL;
      uint64_t v110 = v287[0];
      uint64_t v109 = v287[1];
      if (v287[1] == v287[0])
      {
        int64x2_t v113 = vdupq_n_s64((unint64_t)v287[1]);
        uint64_t v111 = (std::__shared_weak_count *)&v106[16 * v102];
      }

      else
      {
        uint64_t v111 = (std::__shared_weak_count *)&v106[16 * v102];
        do
        {
          __int128 v112 = *(_OWORD *)&v109[-1].__shared_owners_;
          uint64_t v109 = (std::__shared_weak_count *)((char *)v109 - 16);
          *(_OWORD *)&v111[-1].__shared_owners_ = v112;
          uint64_t v111 = (std::__shared_weak_count *)((char *)v111 - 16);
          v109->__vftable = 0LL;
          v109->__shared_owners_ = 0LL;
        }

        while (v109 != v110);
        int64x2_t v113 = *(int64x2_t *)v287;
      }

      unint64_t v129 = (std::__shared_weak_count *)(v108 + 16);
      v287[0] = v111;
      v287[1] = (std::__shared_weak_count *)(v108 + 16);
      *(int64x2_t *)&_DWORD buf[8] = v113;
      unint64_t v130 = v288;
      int v288 = (std::__shared_weak_count *)&v106[16 * v107];
      *(void *)&uint8_t buf[24] = v130;
      *(void *)AudioObjectPropertyAddress buf = v113.i64[0];
      sub_A0D64((uint64_t)buf);
      unsigned int shared_owners = (std::__shared_weak_count *)v282.__shared_owners_;
      v287[1] = v129;
      if (v282.__shared_owners_)
      {
        uint64_t v132 = (unint64_t *)(v282.__shared_owners_ + 8);
        do
          unint64_t v133 = __ldaxr(v132);
        while (__stlxr(v133 - 1, v132));
        if (!v133)
        {
          ((void (*)(std::__shared_weak_count *))shared_owners->__on_zero_shared)(shared_owners);
          std::__shared_weak_count::__release_weak(shared_owners);
        }
      }
    }

    else
    {
      v287[1]->std::__shared_count = v282;
      v287[1] = (std::__shared_weak_count *)&v101->__shared_weak_owners_;
    }

    int v134 = v283[1];
    if (v283[1]) {
      goto LABEL_188;
    }
    goto LABEL_189;
  }

  if (((v74 | v71) & 1) != 0) {
    goto LABEL_109;
  }
  __int128 v97 = (os_log_t *)sub_138E8(19);
  uint64_t v98 = *v97;
  if (*v97 && os_log_type_enabled(*v97, OS_LOG_TYPE_DEFAULT))
  {
    sub_1ACDE4(&v315, a2);
    uint64_t v99 = (v315.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v315 : (std::string *)v315.__r_.__value_.__r.__words[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&_BYTE buf[14] = 362;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&_BYTE buf[20] = v99;
    _os_log_impl( &dword_0,  v98,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d HAL Speaker Protection is missing. Failing route %s",  buf,  0x1Cu);
  }

  uint64_t v100 = 1LL;
LABEL_314:
  if (v293) {
    (*(void (**)(uint64_t *))(*v293 + 8))(v293);
  }
  if (v294[0])
  {
    v294[1] = v294[0];
    operator delete(v294[0]);
  }

  if (v296) {
    std::__shared_weak_count::__release_weak(v296);
  }
  if (v299)
  {
    char v300 = v299;
    operator delete(v299);
  }

  if (v301) {
    operator delete(v301);
  }
  __int128 v216 = (std::__shared_weak_count *)*((void *)&v304 + 1);
  if (*((void *)&v304 + 1))
  {
    int64x2_t v217 = (unint64_t *)(*((void *)&v304 + 1) + 8LL);
    do
      unint64_t v218 = __ldaxr(v217);
    while (__stlxr(v218 - 1, v217));
    if (!v218)
    {
      ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
      std::__shared_weak_count::__release_weak(v216);
    }
  }

  uint64_t v219 = v306;
  if (v306)
  {
    std::__fs::filesystem::path::__string_view v220 = (unint64_t *)&v306->__shared_owners_;
    do
      unint64_t v221 = __ldaxr(v220);
    while (__stlxr(v221 - 1, v220));
    if (!v221)
    {
      ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
      std::__shared_weak_count::__release_weak(v219);
    }
  }

  return v100;
}

      unint64_t v159 = (*(uint64_t (**)(uint64_t))(*(void *)v109 + 112LL))(v109);
      if ((_DWORD)v85) {
        unint64_t v160 = v159;
      }
      else {
        unint64_t v160 = 1;
      }
      if ((v160 & 1) == 0)
      {
        uint64_t v161 = sub_138E8(2);
        if ((*(_BYTE *)(v161 + 8) & 1) != 0)
        {
          uint64_t v162 = *(id *)v161;
          if (v162)
          {
            unint64_t v163 = (os_log_s *)v162;
            if (os_log_type_enabled(v163, OS_LOG_TYPE_DEBUG))
            {
              (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v109 + 96LL))(&v552, v109);
              uint64_t v164 = &v552;
              if ((v552.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                uint64_t v164 = (std::string *)v552.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)v539 = 136315650;
              *(void *)&v539[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&v539[12] = 1024;
              *(_DWORD *)&v539[14] = 4157;
              *(_WORD *)&v539[18] = 2080;
              *(void *)&v539[20] = v164;
              _os_log_impl( &dword_0,  v163,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Adding Device %s to the public route configuration",  v539,  0x1Cu);
            }
          }
        }

        if (v493 >= v84)
        {
          uint64_t v165 = ((char *)v493 - (char *)v489) >> 4;
          char v166 = v165 + 1;
          if (v84 - v489 > v166) {
            char v166 = v84 - v489;
          }
          else {
            __int128 v167 = v166;
          }
          if (v167 >> 60) {
            sub_7A8C4();
          }
          int64x2_t v168 = (char *)operator new(16 * v167);
          unint64_t v169 = (uint64_t *)&v168[16 * v165];
          *unint64_t v169 = v109;
          v169[1] = (uint64_t)v107;
          if (v493 == v489)
          {
            uint64_t v173 = &v168[16 * v165];
            unint64_t v171 = v489;
          }

          else
          {
            unint64_t v170 = &v168[16 * v165];
            unint64_t v171 = v489;
            BOOL v172 = v493;
            do
            {
              uint64_t v173 = v170 - 16;
              *((_OWORD *)v170 - 1) = *((_OWORD *)v172 - 1);
              v172 -= 2;
              v170 -= 16;
            }

            while (v172 != v489);
          }

          unint64_t v84 = (uint64_t *)&v168[16 * v167];
          __int128 v493 = v169 + 2;
          if (v171) {
            operator delete(v171);
          }
          v489 = (uint64_t *)v173;
        }

        else
        {
          *__int128 v493 = v109;
          v493[1] = (uint64_t)v107;
          v493 += 2;
        }
      }

      unint64_t v83 = (uint64_t *)v83[1];
      if (v83 == &v517) {
        goto LABEL_330;
      }
    }

    switch((int)v85)
    {
      case 0:
        if (!v108)
        {
          v441 = sub_138E8(13);
          v442 = sub_8C7D4(1, *(void **)v441, *(void *)(v441 + 8));
          v443 = (void *)objc_claimAutoreleasedReturnValue(v442);
          unint64_t v444 = v443;
          if (v443)
          {
            uint64_t v445 = v443;
            if (os_log_type_enabled(v445, OS_LOG_TYPE_ERROR))
            {
              sub_33464(&v552, (unsigned int *)&value);
              uint64_t v446 = (v552.__r_.__value_.__s.__size_ & 0x80u) == 0
                   ? &v552
                   : (std::string *)v552.__r_.__value_.__r.__words[0];
              *(_DWORD *)v539 = 136315650;
              *(void *)&v539[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&v539[12] = 1024;
              *(_DWORD *)&v539[14] = 4137;
              *(_WORD *)&v539[18] = 2080;
              *(void *)&v539[20] = v446;
              _os_log_impl( &dword_0,  v445,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [device is NULL]: Encountered a NULL device (type %s) slated to deactivate",  v539,  0x1Cu);
            }
          }

          float v417 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v417, "Encountered a NULL device (type %s) slated to deactivate");
          goto LABEL_788;
        }

        if (!(_DWORD)v101 && (_DWORD)v86 == 1986291046)
        {
          int v436 = sub_138E8(13);
          v437 = sub_8C7D4(1, *(void **)v436, *(void *)(v436 + 8));
          v438 = (void *)objc_claimAutoreleasedReturnValue(v437);
          unint64_t v439 = v438;
          if (v438)
          {
            v440 = v438;
            if (os_log_type_enabled(v440, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v539 = 136315394;
              *(void *)&v539[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&v539[12] = 1024;
              *(_DWORD *)&v539[14] = 4139;
              _os_log_impl( &dword_0,  v440,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Attempt to remove the default virtual audio device. Not allowed.",  v539,  0x12u);
            }
          }

          float v417 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v417, "Attempt to remove the default virtual audio device. Not allowed.");
          goto LABEL_788;
        }

        int64_t v114 = *(id *)sub_138E8(2);
        unint64_t v115 = v114;
        if (v114)
        {
          uint64_t v116 = (os_log_s *)v114;
          if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v539 = 136315650;
            *(void *)&v539[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&v539[12] = 1024;
            *(_DWORD *)&v539[14] = 4140;
            *(_WORD *)&v539[18] = 2048;
            *(void *)&v539[20] = v109;
            _os_log_impl(&dword_0, v116, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Queuing VAD %p for removal", v539, 0x1Cu);
          }
        }

        sub_BB590(v109);
        unint64_t v117 = *(char ***)buf;
        unsigned int v118 = operator new(0x10uLL);
        char *v118 = off_4790E0;
        v118[1] = v109;
        sub_E4104(v117, (uint64_t)v118);
        sub_E37D4(&v546, 1, *(_DWORD *)(v109 + 8));
        if ((unint64_t)v490 >= v497)
        {
          uint64_t v132 = v490 - __p;
          unint64_t v133 = v132 + 1;
          else {
            int v134 = v133;
          }
          if (v134) {
            int v134 = (unint64_t)sub_7DC90(v134);
          }
          else {
            unsigned __int8 v135 = 0LL;
          }
          uint64_t v174 = (uint64_t *)(v134 + 8 * v132);
          *uint64_t v174 = v109;
          unint64_t v175 = v174 + 1;
          if (v490 == __p)
          {
            uint64_t v176 = __p;
          }

          else
          {
            uint64_t v176 = __p;
            unint64_t v177 = v490;
            do
            {
              unint64_t v178 = *--v177;
              *--uint64_t v174 = v178;
            }

            while (v177 != __p);
          }

          uint64_t v497 = v134 + 8 * v135;
          if (v176) {
            operator delete(v176);
          }
          std::string __p = v174;
          v490 = v175;
        }

        else
        {
          *v490++ = v109;
        }

        sub_25FBC0((void *)LODWORD(value.__r_.__value_.__l.__data_), SHIDWORD(value.__r_.__value_.__r.__words[0]), v494);
        sub_1F77FC();
        std::mutex::lock((std::mutex *)&unk_493010);
        char v179 = (uint64_t *)qword_492FF8;
        if ((uint64_t *)qword_492FF8 != &qword_493000)
        {
          do
          {
            if (v179[4] == value.__r_.__value_.__r.__words[0])
            {
              uint64_t v180 = (uint64_t *)v179[1];
              unint64_t v181 = v179;
              if (v180)
              {
                do
                {
                  CFTypeRef v182 = v180;
                  uint64_t v180 = (uint64_t *)*v180;
                }

                while (v180);
              }

              else
              {
                do
                {
                  CFTypeRef v182 = (uint64_t *)v181[2];
                  uint64_t v32 = *v182 == (void)v181;
                  unint64_t v181 = v182;
                }

                while (!v32);
              }

              --qword_493008;
              sub_911E8((uint64_t *)qword_493000, v179);
              sub_7A768((uint64_t)(v179 + 6));
              operator delete(v179);
            }

            else
            {
              unint64_t v183 = (uint64_t *)v179[1];
              if (v183)
              {
                do
                {
                  CFTypeRef v182 = v183;
                  unint64_t v183 = (uint64_t *)*v183;
                }

                while (v183);
              }

              else
              {
                do
                {
                  CFTypeRef v182 = (uint64_t *)v179[2];
                  uint64_t v32 = *v182 == (void)v179;
                  char v179 = v182;
                }

                while (!v32);
              }
            }

            char v179 = v182;
          }

          while (v182 != &qword_493000);
        }

        std::mutex::unlock((std::mutex *)&unk_493010);
        LODWORD(v85) = 0;
        goto LABEL_270;
      case 1:
        if (v108)
        {
          v430 = sub_138E8(13);
          uint64_t v431 = sub_8C7D4(1, *(void **)v430, *(void *)(v430 + 8));
          uint64_t v432 = (void *)objc_claimAutoreleasedReturnValue(v431);
          v433 = v432;
          if (v432)
          {
            unint64_t v434 = v432;
            if (os_log_type_enabled(v434, OS_LOG_TYPE_ERROR))
            {
              sub_33464(&v552, (unsigned int *)&value);
              int v435 = (v552.__r_.__value_.__s.__size_ & 0x80u) == 0
                   ? &v552
                   : (std::string *)v552.__r_.__value_.__r.__words[0];
              *(_DWORD *)v539 = 136315650;
              *(void *)&v539[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&v539[12] = 1024;
              *(_DWORD *)&v539[14] = 4103;
              *(_WORD *)&v539[18] = 2080;
              *(void *)&v539[20] = v435;
              _os_log_impl( &dword_0,  v434,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Creating an already constructed device (%s)",  v539,  0x1Cu);
            }
          }

          float v417 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v417, "Creating an already constructed device (%s)");
          goto LABEL_788;
        }

        uint64_t v119 = sub_138E8(2);
        if ((*(_BYTE *)(v119 + 8) & 1) != 0)
        {
          uint64_t v120 = *(id *)v119;
          if (v120)
          {
            __int128 v121 = (os_log_s *)v120;
            if (os_log_type_enabled(v121, OS_LOG_TYPE_DEBUG))
            {
              sub_33464(&v552, (unsigned int *)v83 + 4);
              uint64_t v122 = &v552;
              if ((v552.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                uint64_t v122 = (std::string *)v552.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)v539 = 136315650;
              *(void *)&v539[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&v539[12] = 1024;
              *(_DWORD *)&v539[14] = 4106;
              *(_WORD *)&v539[18] = 2080;
              *(void *)&v539[20] = v122;
              _os_log_impl( &dword_0,  v121,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - Creating VirtualAudio_Device for [%s].",  v539,  0x1Cu);
            }
          }
        }

        sub_25FC3C(v539, a2, (unsigned int *)v83 + 4, *((_DWORD *)v83 + 7), *((_DWORD *)v83 + 6), &v546);
        unint64_t v123 = *(void *)v539;
        sub_BBFD0(*(unint64_t **)v539);
        *(void *)v539 = 0LL;
        unint64_t v125 = *(char **)(a2 + 152);
        uint64_t v124 = *(void *)(a2 + 160);
        if ((unint64_t)v125 >= v124)
        {
          __int128 v127 = (v125 - *v494) >> 3;
          int64x2_t v128 = v124 - (void)*v494;
          unint64_t v129 = v128 >> 2;
          else {
            unint64_t v130 = v129;
          }
          if (v130) {
            unint64_t v130 = (unint64_t)sub_7DC90(v130);
          }
          else {
            CFArrayRef v131 = 0LL;
          }
          uint64_t v136 = (void *)(v130 + 8 * v127);
          void *v136 = v123;
          unint64_t v126 = v136 + 1;
          int64x2_t v138 = *(char **)(a2 + 144);
          __int128 v137 = *(char **)(a2 + 152);
          if (v137 != v138)
          {
            do
            {
              __int128 v139 = *((void *)v137 - 1);
              v137 -= 8;
              *--uint64_t v136 = v139;
            }

            while (v137 != v138);
            __int128 v137 = *v494;
          }

          *(void *)(a2 + 144) = v136;
          *(void *)(a2 + 152) = v126;
          *(void *)(a2 + 160) = v130 + 8 * v131;
          if (v137) {
            operator delete(v137);
          }
        }

        else
        {
          *(void *)unint64_t v125 = v123;
          unint64_t v126 = v125 + 8;
        }

        *(void *)(a2 + 152) = v126;
        uint64_t v109 = *(v126 - 1);
        unint64_t v140 = v515;
        if ((unint64_t)v515 >= v516)
        {
          unint64_t v142 = ((char *)v515 - (_BYTE *)v514) >> 3;
          unint64_t v143 = (uint64_t)(v516 - (void)v514) >> 2;
          if (v143 <= v142 + 1) {
            unint64_t v143 = v142 + 1;
          }
          else {
            uint64_t v144 = v143;
          }
          if (v144) {
            uint64_t v144 = (unint64_t)sub_7DC90(v144);
          }
          else {
            uint64_t v145 = 0LL;
          }
          uint64_t v146 = (uint64_t *)(v144 + 8 * v142);
          *uint64_t v146 = v109;
          unint64_t v141 = v146 + 1;
          uint64_t v148 = (char *)v514;
          uint64_t v147 = (char *)v515;
          if (v515 != v514)
          {
            do
            {
              int v149 = *((void *)v147 - 1);
              v147 -= 8;
              *--uint64_t v146 = v149;
            }

            while (v147 != v148);
            uint64_t v147 = (char *)v514;
          }

          v514 = v146;
          v515 = v141;
          v516 = v144 + 8 * v145;
          if (v147) {
            operator delete(v147);
          }
        }

        else
        {
          os_log_t *v515 = v109;
          unint64_t v141 = v140 + 1;
        }

        v515 = v141;
        if (*(void *)v539) {
          (*(void (**)(void))(**(void **)v539 + 8LL))(*(void *)v539);
        }
LABEL_250:
        if (!v109)
        {
          v411 = sub_138E8(13);
          v412 = sub_8C7D4(1, *(void **)v411, *(void *)(v411 + 8));
          int v413 = (void *)objc_claimAutoreleasedReturnValue(v412);
          int v414 = v413;
          if (v413)
          {
            v415 = v413;
            if (os_log_type_enabled(v415, OS_LOG_TYPE_ERROR))
            {
              sub_33464(&v552, (unsigned int *)&value);
              uint64_t v416 = (v552.__r_.__value_.__s.__size_ & 0x80u) == 0
                   ? &v552
                   : (std::string *)v552.__r_.__value_.__r.__words[0];
              *(_DWORD *)v539 = 136315650;
              *(void *)&v539[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&v539[12] = 1024;
              *(_DWORD *)&v539[14] = 4120;
              *(_WORD *)&v539[18] = 2080;
              *(void *)&v539[20] = v416;
              _os_log_impl( &dword_0,  v415,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [device is NULL]: Encountered a NULL device (%s) slated to change",  v539,  0x1Cu);
            }
          }

          float v417 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v417, "Encountered a NULL device (%s) slated to change");
          goto LABEL_788;
        }

        goto LABEL_251;
      case 2:
        goto LABEL_250;
      case 3:
        if (!v108)
        {
          uint64_t v424 = sub_138E8(13);
          v425 = sub_8C7D4(1, *(void **)v424, *(void *)(v424 + 8));
          v426 = (void *)objc_claimAutoreleasedReturnValue(v425);
          v427 = v426;
          if (v426)
          {
            uint64_t v428 = v426;
            if (os_log_type_enabled(v428, OS_LOG_TYPE_ERROR))
            {
              sub_33464(&v552, (unsigned int *)&value);
              uint64_t v429 = (v552.__r_.__value_.__s.__size_ & 0x80u) == 0
                   ? &v552
                   : (std::string *)v552.__r_.__value_.__r.__words[0];
              *(_DWORD *)v539 = 136315650;
              *(void *)&v539[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&v539[12] = 1024;
              *(_DWORD *)&v539[14] = 4127;
              *(_WORD *)&v539[18] = 2080;
              *(void *)&v539[20] = v429;
              _os_log_impl( &dword_0,  v428,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [device is NULL]: Encountered a NULL device (type %s) slated to hide /reveal",  v539,  0x1Cu);
            }
          }

          float v417 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v417, "Encountered a NULL device (type %s) slated to hide /reveal");
LABEL_788:
        }

        sub_C1554(v108, *((_DWORD *)v83 + 6), (uint64_t)&v546);
LABEL_209:
        LODWORD(v85) = 4;
        goto LABEL_270;
      case 4:
        if (v108) {
          goto LABEL_209;
        }
        v418 = sub_138E8(13);
        uint64_t v419 = sub_8C7D4(1, *(void **)v418, *(void *)(v418 + 8));
        v420 = (void *)objc_claimAutoreleasedReturnValue(v419);
        uint64_t v421 = v420;
        if (v420)
        {
          v422 = v420;
          if (os_log_type_enabled(v422, OS_LOG_TYPE_ERROR))
          {
            sub_33464(&v552, (unsigned int *)&value);
            v423 = (v552.__r_.__value_.__s.__size_ & 0x80u) == 0
                 ? &v552
                 : (std::string *)v552.__r_.__value_.__r.__words[0];
            *(_DWORD *)v539 = 136315650;
            *(void *)&v539[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&v539[12] = 1024;
            *(_DWORD *)&v539[14] = 4133;
            *(_WORD *)&v539[18] = 2080;
            *(void *)&v539[20] = v423;
            _os_log_impl( &dword_0,  v422,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [device is NULL]: Encountered a NULL device (type %s) slated to persist",  v539,  0x1Cu);
          }
        }

        float v417 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v417, "Encountered a NULL device (type %s) slated to persist");
        goto LABEL_788;
      default:
        goto LABEL_270;
    }
  }

  v491 = 0LL;
  v492 = 0LL;
  uint64_t v500 = 0LL;
  v489 = 0LL;
  __int128 v493 = 0LL;
LABEL_330:
  uint64_t v184 = *(uint64_t **)(a2 + 144);
  __int128 v185 = *(uint64_t **)(a2 + 152);
  int64x2_t v186 = sub_72A04(1986291046, 0, v184, v185);
  if (!v186)
  {
    v467 = sub_138E8(13);
    v468 = sub_8C7D4(1, *(void **)v467, *(void *)(v467 + 8));
    v469 = (void *)objc_claimAutoreleasedReturnValue(v468);
    v470 = v469;
    if (v469)
    {
      unint64_t v471 = v469;
      if (os_log_type_enabled(v471, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v539 = 136315394;
        *(void *)&v539[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v539[12] = 1024;
        *(_DWORD *)&v539[14] = 4163;
        _os_log_impl( &dword_0,  v471,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [defaultVAD is NULL]: No Default VAD",  v539,  0x12u);
      }
    }

    v472 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v472, "No Default VAD");
  }

  if ((unint64_t)((char *)v185 - (char *)v184) >= 9 && v184 != v185)
  {
    uint64_t v187 = v186;
    unint64_t v188 = "VirtualAudio_PlugIn.mm";
    while (1)
    {
      uint64_t v189 = *(void *)(*v184 + 576);
      v535 = (void *)v189;
      unint64_t v190 = sub_138E8(2);
      if ((*(_BYTE *)(v190 + 8) & 1) != 0)
      {
        __int128 v191 = *(id *)v190;
        if (v191)
        {
          unint64_t v192 = (os_log_s *)v191;
          if (os_log_type_enabled(v192, OS_LOG_TYPE_DEBUG))
          {
            sub_33464(&v552, (unsigned int *)&v535);
            uint64_t v193 = &v552;
            if ((v552.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              uint64_t v193 = (std::string *)v552.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)v539 = 136315650;
            *(void *)&v539[4] = v188;
            *(_WORD *)&v539[12] = 1024;
            *(_DWORD *)&v539[14] = 4176;
            *(_WORD *)&v539[18] = 2080;
            *(void *)&v539[20] = v193;
            _os_log_impl( &dword_0,  v192,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Checking Device [%s] for shared hardware",  v539,  0x1Cu);
          }
        }
      }

      if (HIDWORD(v189)) {
        unint64_t v194 = 0;
      }
      else {
        unint64_t v194 = (_DWORD)v189 == 1986291046;
      }
      if (v194)
      {
        unint64_t v201 = sub_138E8(2);
        if ((*(_BYTE *)(v201 + 8) & 1) == 0) {
          goto LABEL_364;
        }
        std::string::size_type v202 = *(id *)v201;
        if (!v202) {
          goto LABEL_364;
        }
        uint64_t v197 = (os_log_s *)v202;
        if (os_log_type_enabled(v197, OS_LOG_TYPE_DEBUG))
        {
          sub_33464(&v552, (unsigned int *)&v535);
          unsigned __int8 v203 = &v552;
          if ((v552.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            unsigned __int8 v203 = (std::string *)v552.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)v539 = 136315650;
          *(void *)&v539[4] = v188;
          *(_WORD *)&v539[12] = 1024;
          *(_DWORD *)&v539[14] = 4180;
          *(_WORD *)&v539[18] = 2080;
          *(void *)&v539[20] = v203;
          __int128 v199 = v197;
          __int128 v200 = "%25s:%-5d Ignoring default VAD [%s]";
LABEL_359:
          _os_log_impl(&dword_0, v199, OS_LOG_TYPE_DEBUG, v200, v539, 0x1Cu);
        }