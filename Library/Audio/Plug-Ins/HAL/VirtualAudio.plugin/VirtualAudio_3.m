void sub_1115F0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, void *a30, uint64_t a31, int a32, __int16 a33, char a34, char a35, uint64_t a36, uint64_t a37, int a38, __int16 a39, char a40, char a41, void *a42, uint64_t a43, int a44, __int16 a45, char a46, char a47)
{
  uint64_t v47;
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1116D0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a2 != *(_DWORD *)a1 || *(_DWORD *)(a2 + 4) != *(_DWORD *)(a1 + 4)) {
    return 0LL;
  }
  if (*(_BYTE *)(a2 + 12)) {
    BOOL v2 = *(_BYTE *)(a1 + 12) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return (*(_BYTE *)(a2 + 12) != 0) == (*(_BYTE *)(a1 + 12) != 0);
  }
  else {
    return *(_DWORD *)(a2 + 8) == *(_DWORD *)(a1 + 8);
  }
}

void sub_11173C( uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int **a4, uint64_t a5, void *a6, uint64_t a7, int a8, void *a9, unsigned int *a10, uint64_t a11, char a12, uint64_t *a13, unsigned int a14, const std::string *a15)
{
  *(void *)a1 = off_4709D0;
  *(void *)(a1 + 8) = 1LL;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  v550[0] = 0LL;
  v550[1] = 0LL;
  v549 = (unsigned int *)v550;
  uint64_t v15 = *a3;
  uint64_t v16 = a3[1];
  while (v15 != v16)
  {
    if (!*(_BYTE *)(v15 + 212))
    {
      v510 = (os_log_t *)sub_138E8(13);
      v511 = *v510;
      if (*v510 && os_log_type_enabled(*v510, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "RoutingManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 1060;
        _os_log_impl( &dword_0,  v511,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)buf,  0x12u);
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }

    v15 += 216LL;
  }

  v18 = *a4;
  v17 = a4[1];
  while (v18 != v17)
  {
    sub_1163D8((uint64_t **)&v549, *v18, v18[1], (uint64_t *)v18);
    v18 += 30;
  }

  uint64_t v19 = sub_138E8(8);
  if ((*(_BYTE *)(v19 + 8) & 1) != 0)
  {
    v20 = *(os_log_s **)v19;
    if (*(void *)v19)
    {
      if (os_log_type_enabled(*(os_log_t *)v19, OS_LOG_TYPE_DEBUG))
      {
        sub_DDFE8(&v582, v549, (unsigned int *)v550);
        v21 = (v582.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v582 : (std::string *)v582.__r_.__value_.__r.__words[0];
        buf[0] = 136315650;
        *(void *)&buf[1] = "RoutingManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 1073;
        HIWORD(buf[4]) = 2080;
        *(void *)&buf[5] = v21;
        _os_log_impl(&dword_0, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d Resultant Device Contexts %s", (uint8_t *)buf, 0x1Cu);
      }
    }
  }

  (*(void (**)(void, uint64_t *, unsigned int **))(**(void **)(a2 + 16) + 16LL))( *(void *)(a2 + 16),  a3,  &v549);
  uint64_t v22 = sub_5954C();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v22 + 256LL))(v22))
  {
    uint64_t v23 = *a3;
    uint64_t v24 = a3[1];
    while (1)
    {
      if (v23 == v24)
      {
        int v29 = 1;
        goto LABEL_33;
      }

      uint64_t v25 = *(void *)v23;
      uint64_t v26 = *(void *)v23 + 16LL;
      uint64_t v27 = *(void *)(*(void *)v23 + 24LL);
      if (v27 != v26) {
        break;
      }
LABEL_25:
      uint64_t v28 = v25 + 16;
      while (v26 != v28)
      {
        uint64_t v26 = *(void *)(v26 + 8);
      }

      v23 += 216LL;
    }

    while (!sub_1F5F2C(1885433953, (uint64_t *)(v27 + 16)))
    {
      uint64_t v27 = *(void *)(v27 + 8);
      if (v27 == v26)
      {
        uint64_t v25 = *(void *)v23;
        uint64_t v26 = *(void *)(*(void *)v23 + 24LL);
        goto LABEL_25;
      }
    }

LABEL_762:
            v486 = (uint64_t *)*v466;
            if (!*v466)
            {
              v487 = (uint64_t *)operator new(0x40uLL);
              v486 = v487;
              *(void *)&buf[2] = v188 + 32;
              v487[4] = (uint64_t)v465[4];
              v487[5] = (uint64_t)(v487 + 5);
              v487[6] = (uint64_t)(v487 + 5);
              v487[7] = 0LL;
              v488 = v465[7];
              if (v488)
              {
                v490 = v465[5];
                v489 = v465[6];
                uint64_t v491 = *v489;
                *(void *)(v491 + 8) = v490[1];
                *(void *)v490[1] = v491;
                uint64_t v492 = v487[5];
                *(void *)(v492 + 8) = v489;
                uint64_t *v489 = v492;
                v487[5] = (uint64_t)v490;
                v490[1] = (uint64_t)(v487 + 5);
                v487[7] = (uint64_t)v488;
                v465[7] = 0LL;
              }

              LOBYTE(buf[4]) = 1;
              uint64_t v493 = *(void *)v567;
              uint64_t *v487 = 0LL;
              v487[1] = 0LL;
              v487[2] = v493;
              uint64_t *v466 = (uint64_t)v487;
              v494 = (uint64_t *)**v526;
              v495 = v487;
              if (v494)
              {
                *v526 = v494;
                v495 = (uint64_t *)*v466;
              }

              sub_7A420(*(uint64_t **)(v188 + 32), v495);
              ++*(void *)(v188 + 40);
              *(void *)buf = 0LL;
              sub_23202C((uint64_t)buf);
            }

            goto LABEL_769;
          }

LABEL_760:
          v466 = sub_232070((uint64_t)v526, v567, v467, v468);
          goto LABEL_762;
        }

        v486 = v466;
LABEL_769:
        v496 = (uint64_t *)v486[1];
        if (v496)
        {
          do
          {
            v466 = v496;
            v496 = (uint64_t *)*v496;
          }

          while (v496);
        }

        else
        {
          do
          {
            v466 = (uint64_t *)v486[2];
            BOOL v33 = *v466 == (void)v486;
            v486 = v466;
          }

          while (!v33);
        }

        v497 = v465[1];
        if (v497)
        {
          do
          {
            v498 = (uint64_t **)v497;
            v497 = (uint64_t *)*v497;
          }

          while (v497);
        }

        else
        {
          do
          {
            v498 = (uint64_t **)v465[2];
            BOOL v33 = *v498 == (uint64_t *)v465;
            v465 = v498;
          }

          while (!v33);
        }

        v465 = v498;
        if (v498 == &v554) {
          goto LABEL_782;
        }
      }

      uint64_t v472 = *v466;
      v473 = v466;
      if (*v526 == v466) {
        goto LABEL_743;
      }
      uint64_t v474 = *v466;
      v475 = v466;
      if (v472)
      {
        do
        {
          v473 = (uint64_t *)v474;
          uint64_t v474 = *(void *)(v474 + 8);
        }

        while (v474);
      }

      else
      {
        do
        {
          v473 = (uint64_t *)v475[2];
          BOOL v33 = *v473 == (void)v475;
          v475 = v473;
        }

        while (v33);
      }

      unsigned int v476 = *((_DWORD *)v473 + 8);
      unsigned int v467 = *((_DWORD *)v465 + 8);
      unsigned int v468 = *((_DWORD *)v465 + 9);
      BOOL v33 = v476 == v467;
      BOOL v477 = v476 < v467;
      if (v33) {
        BOOL v477 = *((_DWORD *)v473 + 9) < v468;
      }
      if (v477)
      {
LABEL_743:
        if (v472)
        {
          *(void *)v567 = v473;
          v466 = v473 + 1;
        }

        else
        {
          *(void *)v567 = v466;
        }

        goto LABEL_762;
      }

      goto LABEL_760;
    }

LABEL_782:
    v499 = v584;
    v584 = 0LL;
    if (v499 == (std::string *)&v582.__r_.__value_.__r.__words[1])
    {
      uint64_t v500 = 4LL;
      v499 = (std::string *)&v582.__r_.__value_.__r.__words[1];
    }

    else
    {
      if (!v499)
      {
LABEL_787:
        sub_35B78((uint64_t)&v582);
        int v541 = 0;
        int64x2_t v542 = v556;
        v543 = v557;
        int64x2_t v556 = 0uLL;
        v557 = 0LL;
        goto LABEL_788;
      }

      uint64_t v500 = 5LL;
    }

    (*(void (**)(void))(v499->__r_.__value_.__r.__words[0] + 8 * v500))();
    goto LABEL_787;
  }

  v434 = v191;
  while (1)
  {
    if (!*(_BYTE *)(*((void *)v434 + 1) + 212LL))
    {
      v523 = (os_log_t *)sub_138E8(13);
      v524 = *v523;
      if (*v523 && os_log_type_enabled(*v523, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "RoutingHandlerDispatcher.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 153;
        _os_log_impl( &dword_0,  v524,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)buf,  0x12u);
      }

      v525 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v525, "Precondition failure.");
    }

    buf[2] = 1;
    v572 = 0LL;
    CFTypeRef cf = 0LL;
    memset(&buf[3], 0, 52);
    v571 = &v572;
    v575 = 0LL;
    uint64_t v576 = 0LL;
    v574 = 0LL;
    int v577 = 1;
    uint64_t v435 = *((void *)v434 + 1);
    uint64_t v436 = *(unsigned int *)(v435 + 208);
    v529 = *(unsigned int **)v435;
    uint64_t v438 = sub_138E8(19);
    if ((*(_BYTE *)(v438 + 8) & 1) != 0)
    {
      v439 = *(os_log_s **)v438;
      if (*(void *)v438)
      {
        if (os_log_type_enabled(*(os_log_t *)v438, OS_LOG_TYPE_DEBUG))
        {
          sub_2DA51C(&v566, v529);
          int size = (char)v566.__r_.__value_.__s.__size_;
          std::string::size_type v441 = v566.__r_.__value_.__r.__words[0];
          sub_7D084(v551, off_46F498[v436]);
          v442 = &v566;
          if (size < 0) {
            v442 = (std::string *)v441;
          }
          v443 = v551;
          if (v552 < 0) {
            v443 = (void **)v551[0];
          }
          *(_DWORD *)v567 = 136315906;
          *(void *)&v567[4] = "RoutingHandlerDispatcher.cpp";
          *(_WORD *)&v567[12] = 1024;
          *(_DWORD *)&v567[14] = 174;
          *(_WORD *)&v567[18] = 2080;
          *(void *)&v567[20] = v442;
          __int16 v568 = 2080;
          v569 = v443;
          _os_log_impl( &dword_0,  v439,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Ignoring Processing Route %s due to Result: %s",  v567,  0x26u);
          if (v552 < 0) {
            operator delete(v551[0]);
          }
        }
      }
    }

LABEL_721:
    int v577 = v436;
    *(void *)buf = *(void *)v529;
    buf[2] = v529[2];
    sub_119A94((uint64_t)&v556, (__int128 *)buf);
    if (v574)
    {
      v575 = v574;
      operator delete(v574);
    }

    sub_32C8C(v572);
    v434 += 16;
    if (v434 == v189) {
      goto LABEL_729;
    }
  }

  uint64_t v444 = sub_138E8(19);
  if ((*(_BYTE *)(v444 + 8) & 1) != 0)
  {
    v445 = *(os_log_s **)v444;
    if (*(void *)v444)
    {
      if (os_log_type_enabled(*(os_log_t *)v444, OS_LOG_TYPE_DEBUG))
      {
        sub_2DA51C(&v566, v529);
        v446 = "????";
        int v447 = (char)v566.__r_.__value_.__s.__size_;
        std::string::size_type v448 = v566.__r_.__value_.__r.__words[0];
        sub_7D084(v551, v446);
        v449 = &v566;
        if (v447 < 0) {
          v449 = (std::string *)v448;
        }
        v450 = v551;
        if (v552 < 0) {
          v450 = (void **)v551[0];
        }
        *(_DWORD *)v567 = 136315906;
        *(void *)&v567[4] = "RoutingHandlerDispatcher.cpp";
        *(_WORD *)&v567[12] = 1024;
        *(_DWORD *)&v567[14] = 162;
        *(_WORD *)&v567[18] = 2080;
        *(void *)&v567[20] = v449;
        __int16 v568 = 2080;
        v569 = v450;
        _os_log_impl(&dword_0, v445, OS_LOG_TYPE_DEBUG, "%25s:%-5d Processing Route %s for Result: %s", v567, 0x26u);
        if (v552 < 0) {
          operator delete(v551[0]);
        }
      }
    }
  }

  uint64_t v451 = *(void *)v529;
  uint64_t v527 = *(void *)v434;
  uint64_t v528 = *((void *)v434 + 1);
  v452 = sub_232070((uint64_t)&v553, &v566, *(void *)v529, HIDWORD(*(void *)v529));
  v453 = (uint64_t *)*v452;
  if (!*v452)
  {
    v454 = v452;
    v453 = (uint64_t *)operator new(0x40uLL);
    *(void *)&v567[8] = &v554;
    v453[4] = v451;
    v453[5] = (uint64_t)(v453 + 5);
    v453[6] = (uint64_t)(v453 + 5);
    v453[7] = 0LL;
    v567[16] = 1;
    std::string::size_type v455 = v566.__r_.__value_.__r.__words[0];
    uint64_t *v453 = 0LL;
    v453[1] = 0LL;
    v453[2] = v455;
    uint64_t *v454 = (uint64_t)v453;
    v456 = v453;
    if (*v553)
    {
      v553 = (uint64_t **)*v553;
      v456 = (uint64_t *)*v454;
    }

    sub_7A420(v554, v456);
    ++v555;
    *(void *)v567 = 0LL;
    sub_23202C((uint64_t)v567);
  }

  if ((sub_14F834() & 1) == 0 && sub_EAA74("VA_RoutingHandlerActivation", 0x1BuLL) == &qword_4938E0)
  {
    v458 = 0LL;
  }

  else
  {
    unsigned __int8 v457 = atomic_load((unsigned __int8 *)&qword_493908);
    if ((v457 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
    {
      qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_493908);
    }

    v458 = (char *)os_signpost_id_generate((os_log_t)qword_493900);
    unsigned __int8 v459 = atomic_load((unsigned __int8 *)&qword_493908);
    if ((v459 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
    {
      qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_493908);
    }

    if ((unint64_t)(v458 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v460 = (os_log_s *)qword_493900;
      if (os_signpost_enabled((os_log_t)qword_493900))
      {
        sub_1ACDE4((std::string *)v567, v528);
        v461 = v567;
        if (v567[23] < 0) {
          v461 = *(_BYTE **)v567;
        }
        LODWORD(v566.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v566.__r_.__value_.__r.__words + 4) = (std::string::size_type)v461;
        _os_signpost_emit_with_name_impl( &dword_0,  v460,  OS_SIGNPOST_INTERVAL_BEGIN,  (os_signpost_id_t)v458,  "VA_RoutingHandlerActivation",  "Activating route: %s",  (uint8_t *)&v566,  0xCu);
        if ((v567[23] & 0x80000000) != 0) {
          operator delete(*(void **)v567);
        }
      }
    }
  }

  v551[0] = v458;
  uint64_t v462 = sub_138E8(42);
  if ((*(_BYTE *)(v462 + 8) & 1) != 0)
  {
    v463 = *(os_log_s **)v462;
    if (*(void *)v462)
    {
      if (os_log_type_enabled(*(os_log_t *)v462, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v567 = 136315650;
        *(void *)&v567[4] = "SignpostUtilities.h";
        *(_WORD *)&v567[12] = 1024;
        *(_DWORD *)&v567[14] = 94;
        *(_WORD *)&v567[18] = 2080;
        *(void *)&v567[20] = "kRoutingHandlerActivation";
        _os_log_impl(&dword_0, v463, OS_LOG_TYPE_DEBUG, "%25s:%-5d Starting measurement for signpost %s", v567, 0x1Cu);
      }
    }
  }

  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(void *)v527 + 32LL))(v567, v527, v528);
  int v464 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, _DWORD *, _BYTE *))(*(void *)v527 + 24LL))( v527,  v528,  v453 + 5,  buf,  v567);
  sub_8DF20(*(void **)&v567[8]);
  sub_105C74((os_signpost_id_t *)v551);
  if (!v464) {
    goto LABEL_721;
  }
  int v541 = v464;
  v543 = 0LL;
  int64x2_t v542 = 0uLL;
  memset(v567, 0, 24);
  v566.__r_.__value_.__r.__words[0] = (std::string::size_type)v567;
  sub_110D60((void ***)&v566);
  if (v574)
  {
    v575 = v574;
    operator delete(v574);
  }

  sub_32C8C(v572);
  sub_35B78((uint64_t)&v582);
LABEL_788:
  sub_129F98(v554);
  *(void *)buf = &v556;
  sub_110D60((void ***)buf);
  sub_32C8C(v559[0]);
LABEL_330:
  sub_32C8C((void *)__p.__r_.__value_.__l.__size_);
  if (v191) {
    operator delete(v191);
  }
  if (v538)
  {
    uint64_t v239 = sub_138E8(8);
    uint64_t v240 = sub_138E8(34);
    char v241 = 0;
    uint64_t v242 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v243 = *(void *)(v239 + 8);
    while (1)
    {
      uint64_t v244 = (int)buf[v242];
      char v245 = v241;
      if (((v243 & v244) != 0) != ((*(void *)(v240 + 8) & v244) != 0)) {
        break;
      }
      char v241 = 1;
      uint64_t v242 = 1LL;
      if ((v245 & 1) != 0) {
        goto LABEL_343;
      }
    }

    if ((v243 & v244) == 0) {
      uint64_t v239 = v240;
    }
LABEL_343:
    v253 = *(os_log_s **)v239;
    if (v253 && os_log_type_enabled(v253, OS_LOG_TYPE_DEFAULT))
    {
      v254 = "failed";
      *(void *)&buf[1] = "RoutingManager.cpp";
      buf[0] = 136315650;
      if (!v541) {
        v254 = "succeeded";
      }
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 3015;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v254;
      _os_log_impl( &dword_0,  v253,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d [AirPlay route change] Routing handler route processing complete (%s).",  (uint8_t *)buf,  0x1Cu);
    }

    uint64_t v255 = sub_138E8(8);
    uint64_t v256 = sub_138E8(34);
    char v257 = 0;
    uint64_t v258 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v259 = *(void *)(v255 + 8);
    while (1)
    {
      uint64_t v260 = (int)buf[v258];
      char v261 = v257;
      if (((v259 & v260) != 0) != ((*(void *)(v256 + 8) & v260) != 0)) {
        break;
      }
      char v257 = 1;
      uint64_t v258 = 1LL;
      if ((v261 & 1) != 0) {
        goto LABEL_365;
      }
    }

    if ((v259 & v260) == 0) {
      uint64_t v255 = v256;
    }
LABEL_365:
    v271 = *(os_log_s **)v255;
    if (v271 && os_log_type_enabled(v271, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 3016;
      v272 = v271;
      os_log_type_t v273 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_373;
    }
  }

  else
  {
    uint64_t v246 = sub_138E8(8);
    uint64_t v247 = sub_138E8(34);
    char v248 = 0;
    uint64_t v249 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v250 = *(void *)(v246 + 8);
    while (1)
    {
      uint64_t v251 = (int)buf[v249];
      char v252 = v248;
      if (((v250 & v251) != 0) != ((*(void *)(v247 + 8) & v251) != 0)) {
        break;
      }
      char v248 = 1;
      uint64_t v249 = 1LL;
      if ((v252 & 1) != 0) {
        goto LABEL_354;
      }
    }

    if ((v250 & v251) == 0) {
      uint64_t v246 = v247;
    }
LABEL_354:
    v262 = *(os_log_s **)v246;
    if (v262 && os_log_type_enabled(v262, OS_LOG_TYPE_INFO))
    {
      v263 = "failed";
      *(void *)&buf[1] = "RoutingManager.cpp";
      buf[0] = 136315650;
      if (!v541) {
        v263 = "succeeded";
      }
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 3020;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v263;
      _os_log_impl( &dword_0,  v262,  OS_LOG_TYPE_INFO,  "%25s:%-5d Routing handler route processing complete (%s).",  (uint8_t *)buf,  0x1Cu);
    }

    uint64_t v264 = sub_138E8(8);
    uint64_t v265 = sub_138E8(34);
    char v266 = 0;
    uint64_t v267 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v268 = *(void *)(v264 + 8);
    while (1)
    {
      uint64_t v269 = (int)buf[v267];
      char v270 = v266;
      if (((v268 & v269) != 0) != ((*(void *)(v265 + 8) & v269) != 0)) {
        break;
      }
      char v266 = 1;
      uint64_t v267 = 1LL;
      if ((v270 & 1) != 0) {
        goto LABEL_370;
      }
    }

    if ((v268 & v269) == 0) {
      uint64_t v264 = v265;
    }
LABEL_370:
    v274 = *(os_log_s **)v264;
    if (v274 && os_log_type_enabled(v274, OS_LOG_TYPE_INFO))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 3021;
      v272 = v274;
      os_log_type_t v273 = OS_LOG_TYPE_INFO;
LABEL_373:
      _os_log_impl( &dword_0,  v272,  v273,  "%25s:%-5d <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<",  (uint8_t *)buf,  0x12u);
    }
  }

  if (v541)
  {
    v275 = (os_log_t *)sub_138E8(8);
    v276 = *v275;
    if (*v275 && os_log_type_enabled(*v275, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v278 = *a3;
      uint64_t v277 = a3[1];
      memset(v567, 0, 24);
      std::string::append((std::string *)v567, "{ ", 2uLL);
      if (v278 != v277)
      {
        while (1)
        {
          sub_1AD4D8(&v582, v278);
          if ((v582.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            v279 = &v582;
          }
          else {
            v279 = (std::string *)v582.__r_.__value_.__r.__words[0];
          }
          if ((v582.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v280 = v582.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v280 = v582.__r_.__value_.__l.__size_;
          }
          std::string::append((std::string *)v567, (const std::string::value_type *)v279, v280);
          v278 += 216LL;
          if (v278 == v277) {
            break;
          }
          std::string::append((std::string *)v567, ", ", 2uLL);
        }
      }

      std::string::append((std::string *)v567, " }", 2uLL);
      if (v567[23] >= 0) {
        v281 = v567;
      }
      else {
        v281 = *(_BYTE **)v567;
      }
      buf[0] = 136315906;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 3024;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v281;
      LOWORD(buf[7]) = 1024;
      *(_DWORD *)((char *)&buf[7] + 2) = v541;
      _os_log_impl( &dword_0,  v276,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d The routing handlers failed to handle the route %s (result %d)",  (uint8_t *)buf,  0x22u);
      if ((v567[23] & 0x80000000) != 0) {
        operator delete(*(void **)v567);
      }
    }

    goto LABEL_658;
  }

  if (0xEEEEEEEEEEEEEEEFLL * ((v542.i64[1] - v542.i64[0]) >> 3) != 0x84BDA12F684BDA13LL * ((a3[1] - *a3) >> 3))
  {
    v516 = (os_log_t *)sub_138E8(13);
    v517 = *v516;
    if (*v516 && os_log_type_enabled(*v516, OS_LOG_TYPE_ERROR))
    {
      unint64_t v518 = 0x84BDA12F684BDA13LL * ((a3[1] - *a3) >> 3);
      buf[0] = 136315906;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 3028;
      HIWORD(buf[4]) = 2048;
      *(void *)&buf[5] = 0xEEEEEEEEEEEEEEEFLL * ((v542.i64[1] - v542.i64[0]) >> 3);
      LOWORD(buf[7]) = 2048;
      *(void *)((char *)&buf[7] + 2) = v518;
      _os_log_impl( &dword_0,  v517,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): The number of device states (%lu) returned by the routing handler di spatcher did not equal the number of concrete routes in the route (%lu).",  (uint8_t *)buf,  0x26u);
    }

    v519 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error( v519,  "The number of device states (%lu) returned by the routing handler dispatcher did not equal the number of concrete routes in the route (%lu).");
  }

  v282 = (os_log_t *)sub_138E8(8);
  v283 = *v282;
  if (*v282 && os_log_type_enabled(*v282, OS_LOG_TYPE_DEBUG))
  {
    sub_110E40(&v582, *(void **)(a2 + 48), (void *)(a2 + 56));
    int v284 = (char)v582.__r_.__value_.__s.__size_;
    std::string::size_type v285 = v582.__r_.__value_.__r.__words[0];
    sub_110E40((std::string *)v567, *(void **)a5, (void *)(a5 + 8));
    v286 = &v582;
    if (v284 < 0) {
      v286 = (std::string *)v285;
    }
    if (v567[23] >= 0) {
      v287 = v567;
    }
    else {
      v287 = *(_BYTE **)v567;
    }
    buf[0] = 136315906;
    *(void *)&buf[1] = "RoutingManager.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 3030;
    HIWORD(buf[4]) = 2080;
    *(void *)&buf[5] = v286;
    LOWORD(buf[7]) = 2080;
    *(void *)((char *)&buf[7] + 2) = v287;
    _os_log_impl( &dword_0,  v283,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Setting mDisallowedPortTypes. Old: %s; new: %s.",
      (uint8_t *)buf,
      0x26u);
    if ((v567[23] & 0x80000000) != 0) {
      operator delete(*(void **)v567);
    }
  }

  v288 = (os_log_t *)sub_138E8(8);
  v289 = *v288;
  if (*v288 && os_log_type_enabled(*v288, OS_LOG_TYPE_DEBUG))
  {
    sub_110E40(&v582, *(void **)(a2 + 120), (void *)(a2 + 128));
    int v290 = (char)v582.__r_.__value_.__s.__size_;
    std::string::size_type v291 = v582.__r_.__value_.__r.__words[0];
    sub_110E40((std::string *)v567, *(void **)a7, (void *)(a7 + 8));
    v292 = &v582;
    if (v290 < 0) {
      v292 = (std::string *)v291;
    }
    if (v567[23] >= 0) {
      v293 = v567;
    }
    else {
      v293 = *(_BYTE **)v567;
    }
    buf[0] = 136315906;
    *(void *)&buf[1] = "RoutingManager.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 3032;
    HIWORD(buf[4]) = 2080;
    *(void *)&buf[5] = v292;
    LOWORD(buf[7]) = 2080;
    *(void *)((char *)&buf[7] + 2) = v293;
    _os_log_impl( &dword_0,  v289,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Setting mAllowedPortTypes. Old: %s; new: %s.",
      (uint8_t *)buf,
      0x26u);
    if ((v567[23] & 0x80000000) != 0) {
      operator delete(*(void **)v567);
    }
  }

  v294 = (os_log_t *)sub_138E8(8);
  v295 = *v294;
  if (*v294 && os_log_type_enabled(*v294, OS_LOG_TYPE_DEBUG))
  {
    sub_173AF4(&v582, (void *)(a2 + 216));
    int v296 = (char)v582.__r_.__value_.__s.__size_;
    std::string::size_type v297 = v582.__r_.__value_.__r.__words[0];
    sub_173AF4((std::string *)v567, (void *)a11);
    v298 = &v582;
    if (v296 < 0) {
      v298 = (std::string *)v297;
    }
    if (v567[23] >= 0) {
      v299 = v567;
    }
    else {
      v299 = *(_BYTE **)v567;
    }
    buf[0] = 136315906;
    *(void *)&buf[1] = "RoutingManager.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 3034;
    HIWORD(buf[4]) = 2080;
    *(void *)&buf[5] = v298;
    LOWORD(buf[7]) = 2080;
    *(void *)((char *)&buf[7] + 2) = v299;
    _os_log_impl( &dword_0,  v295,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Setting mPreferredPersistentRoute. Old: %s; new: %s.",
      (uint8_t *)buf,
      0x26u);
    if ((v567[23] & 0x80000000) != 0) {
      operator delete(*(void **)v567);
    }
  }

  v301 = (_DWORD *)v542.i64[1];
  v300 = (_DWORD *)v542.i64[0];
  if (0x84BDA12F684BDA13LL * ((a3[1] - *a3) >> 3) != 0xEEEEEEEEEEEEEEEFLL * ((v542.i64[1] - v542.i64[0]) >> 3))
  {
    v520 = (os_log_t *)sub_138E8(13);
    v521 = *v520;
    if (*v520 && os_log_type_enabled(*v520, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 1017;
      _os_log_impl( &dword_0,  v521,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)buf,  0x12u);
    }

    v522 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v522, "Precondition failure.");
  }

  v578 = (uint64_t (**)())&v578;
  v579 = &v578;
  v580 = 0LL;
  if (v542.i64[0] != v542.i64[1])
  {
    do
    {
      v302 = (uint64_t *)*a3;
      v303 = (uint64_t *)a3[1];
      if ((uint64_t *)*a3 != v303)
      {
        while (*(_DWORD *)(*v302 + 4) != v300[1] || *(_DWORD *)*v302 != *v300)
        {
          v302 += 27;
          if (v302 == v303) {
            goto LABEL_792;
          }
        }
      }

      if (v302 == v303)
      {
LABEL_792:
        v501 = (os_log_t *)sub_138E8(13);
        v502 = *v501;
        if (*v501 && os_log_type_enabled(*v501, OS_LOG_TYPE_ERROR))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "RoutingManager.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 1030;
          _os_log_impl( &dword_0,  v502,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)buf,  0x12u);
        }

        v503 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v503, "Precondition failure.");
      }

      uint64_t v304 = *v302;
      memset(buf, 0, 24);
      strcpy((char *)&buf[6], "cwdv");
      LOBYTE(buf[8]) = 0;
      buf[10] = 3;
      *(void *)&buf[14] = 0LL;
      v571 = 0LL;
      *(void *)&buf[12] = &buf[14];
      LODWORD(v572) = 44739242;
      CFTypeRef cf = 0LL;
      sub_7267C((unint64_t *)&v582, v304, (uint64_t)buf);
      v305 = (uint64_t (**)())sub_116500((uint64_t)v300, &v582);
      v306 = v578;
      *v305 = (uint64_t (*)())v578;
      v305[1] = (uint64_t (*)())&v578;
      v306[1] = (uint64_t (*)())v305;
      v578 = v305;
      v580 = (int64x2_t *)((char *)v580 + 1);
      sub_85B80((uint64_t *)&v582);
      if (cf) {
        CFRelease(cf);
      }
      sub_32C8C(*(void **)&buf[14]);
      if (*(void *)buf)
      {
        *(void *)&buf[2] = *(void *)buf;
        operator delete(*(void **)buf);
      }

      v300 += 30;
    }

    while (v300 != v301);
  }

  v307 = *a4;
  v308 = a4[1];
  if (*a4 != v308)
  {
    do
    {
      *(void *)buf = buf;
      *(void *)&buf[2] = buf;
      *(void *)&buf[4] = 0LL;
      v309 = (uint64_t (***)())sub_116500((uint64_t)v307, buf);
      *v309 = (uint64_t (**)())&v578;
      v310 = v579;
      v309[1] = (uint64_t (**)())v579;
      *v310 = (uint64_t (**)())v309;
      v579 = v309;
      v580 = (int64x2_t *)((char *)v580 + 1);
      sub_85B80((uint64_t *)buf);
      v307 += 30;
    }

    while (v307 != v308);
  }

  *(void *)buf = buf;
  *(void *)&buf[2] = buf;
  *(void *)&buf[10] = 0LL;
  *(void *)&buf[8] = 0LL;
  *(void *)&buf[4] = 0LL;
  *(void *)&buf[6] = &buf[8];
  v311 = (void **)*a3;
  v312 = (void **)a3[1];
  if ((void **)*a3 == v312) {
    goto LABEL_796;
  }
  v313 = (uint64_t *)(a2 + 456);
  do
  {
    v314 = operator new(0x90uLL);
    void *v314 = 0LL;
    v314[1] = 0LL;
    sub_DBC08((uint64_t)(v314 + 2), v311);
    uint64_t v315 = *(void *)buf;
    void *v314 = *(void *)buf;
    v314[1] = buf;
    *(void *)(v315 + 8) = v314;
    *(void *)buf = v314;
    ++*(void *)&buf[4];
    v311 += 27;
  }

  while (v311 != v312);
  v316 = (_DWORD *)*a3;
  v317 = (_DWORD *)a3[1];
  while (1)
  {
    if (v316 == v317) {
      goto LABEL_796;
    }
    if (!*(_DWORD *)(*(void *)v316 + 4LL) && **(_DWORD **)v316 == 1986291046) {
      break;
    }
    v316 += 54;
  }

  if (v317 == v316)
  {
LABEL_796:
    v504 = (os_log_t *)sub_138E8(13);
    v505 = *v504;
    if (*v504 && os_log_type_enabled(*v504, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v582.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v582.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RouteCache.cpp";
      WORD2(v582.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&v582.__r_.__value_.__r.__words[1] + 6) = 505;
      _os_log_impl( &dword_0,  v505,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v582,  0x12u);
    }

    v506 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v506, "Precondition failure.");
  }

  if (&buf[6] != v316 + 20)
  {
    v318 = (void *)*((void *)v316 + 10);
    v319 = v316 + 22;
    if (*(void *)&buf[10])
    {
      std::string::size_type v320 = *(void *)&buf[6];
      *(void *)&buf[6] = &buf[8];
      *(void *)(*(void *)&buf[8] + 16LL) = 0LL;
      *(void *)&buf[8] = 0LL;
      *(void *)&buf[10] = 0LL;
      if (*(void *)(v320 + 8)) {
        std::string::size_type v321 = *(void *)(v320 + 8);
      }
      else {
        std::string::size_type v321 = v320;
      }
      v582.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf[6];
      v582.__r_.__value_.__l.__size_ = v321;
      v582.__r_.__value_.__l.__cap_ = v321;
      if (!v321 || (v582.__r_.__value_.__l.__size_ = (std::string::size_type)sub_68080(v321), v318 == v319))
      {
        v332 = v318;
      }

      else
      {
        do
        {
          uint64_t v323 = v318[4];
          uint64_t v322 = v318[5];
          if (v322)
          {
            v324 = (unint64_t *)(v322 + 16);
            do
              unint64_t v325 = __ldxr(v324);
            while (__stxr(v325 + 1, v324));
          }

          v326 = *(std::__shared_weak_count **)(v321 + 40);
          *(void *)(v321 + 32) = v323;
          *(void *)(v321 + 40) = v322;
          if (v326) {
            std::__shared_weak_count::__release_weak(v326);
          }
          if ((void *)v321 != v318) {
            sub_7E6D4((char *)(v321 + 48), (char *)v318[6], v318[7], (uint64_t)(v318[7] - v318[6]) >> 2);
          }
          cap = (void *)v582.__r_.__value_.__l.__cap_;
          v328 = *(void **)&buf[8];
          v329 = &buf[8];
          v330 = &buf[8];
          if (*(void *)&buf[8])
          {
            do
            {
              while (1)
              {
                v329 = v328;
                if (!sub_862E4(cap + 4, v328 + 4)) {
                  break;
                }
                v328 = (void *)*v329;
                v330 = v329;
                if (!*v329) {
                  goto LABEL_472;
                }
              }

              v328 = (void *)v329[1];
            }

            while (v328);
            v330 = v329 + 1;
          }

LABEL_472:
          void *cap = 0LL;
          cap[1] = 0LL;
          cap[2] = v329;
          void *v330 = cap;
          if (**(void **)&buf[6])
          {
            *(void *)&buf[6] = **(void **)&buf[6];
            cap = (void *)*v330;
          }

          sub_7A420(*(uint64_t **)&buf[8], cap);
          ++*(void *)&buf[10];
          v582.__r_.__value_.__l.__cap_ = v582.__r_.__value_.__l.__size_;
          if (v582.__r_.__value_.__l.__size_) {
            v582.__r_.__value_.__l.__size_ = (std::string::size_type)sub_68080(v582.__r_.__value_.__l.__size_);
          }
          v331 = (void *)v318[1];
          if (v331)
          {
            do
            {
              v332 = v331;
              v331 = (void *)*v331;
            }

            while (v331);
          }

          else
          {
            do
            {
              v332 = (void *)v318[2];
              BOOL v33 = *v332 == (void)v318;
              v318 = v332;
            }

            while (!v33);
          }

          std::string::size_type v321 = v582.__r_.__value_.__l.__cap_;
          if (v582.__r_.__value_.__l.__cap_) {
            BOOL v333 = v332 == v319;
          }
          else {
            BOOL v333 = 1;
          }
          v318 = v332;
        }

        while (!v333);
      }

      sub_DDF9C((uint64_t)&v582);
      v318 = v332;
    }

    if (v318 != v319)
    {
      do
      {
        sub_861FC((uint64_t)v567, (uint64_t)&buf[6], (uint64_t)(v318 + 4));
        v334 = *(void **)v567;
        v335 = *(void **)&buf[8];
        v336 = &buf[8];
        v337 = &buf[8];
        if (*(void *)&buf[8])
        {
          do
          {
            while (1)
            {
              v336 = v335;
              if (!sub_862E4(v334 + 4, v335 + 4)) {
                break;
              }
              v335 = (void *)*v336;
              v337 = v336;
              if (!*v336) {
                goto LABEL_496;
              }
            }

            v335 = (void *)v336[1];
          }

          while (v335);
          v337 = v336 + 1;
        }

LABEL_496:
        void *v334 = 0LL;
        v334[1] = 0LL;
        v334[2] = v336;
        void *v337 = v334;
        if (**(void **)&buf[6])
        {
          *(void *)&buf[6] = **(void **)&buf[6];
          v334 = (void *)*v337;
        }

        sub_7A420(*(uint64_t **)&buf[8], v334);
        ++*(void *)&buf[10];
        *(void *)v567 = 0LL;
        sub_862A0((uint64_t)v567);
        v338 = (void *)v318[1];
        if (v338)
        {
          do
          {
            v339 = v338;
            v338 = (void *)*v338;
          }

          while (v338);
        }

        else
        {
          do
          {
            v339 = (void *)v318[2];
            BOOL v33 = *v339 == (void)v318;
            v318 = v339;
          }

          while (!v33);
        }

        v318 = v339;
      }

      while (v339 != v319);
    }
  }

  sub_DDEE4(v313);
  uint64_t v340 = *(void *)&buf[4];
  if (*(void *)&buf[4])
  {
    v341 = *(void **)&buf[2];
    uint64_t v342 = *(void *)buf;
    uint64_t v343 = **(void **)&buf[2];
    *(void *)(v343 + 8) = *(void *)(*(void *)buf + 8LL);
    **(void **)(v342 + 8) = v343;
    uint64_t v344 = *(void *)(a2 + 456);
    *(void *)(v344 + 8) = v341;
    void *v341 = v344;
    *(void *)(a2 + 456) = v342;
    *(void *)(v342 + 8) = v313;
    *(void *)(a2 + 472) += v340;
    *(void *)&buf[4] = 0LL;
  }

  uint64_t v345 = a2 + 488;
  sub_85D64(*(void **)(a2 + 488));
  v346 = *(void **)&buf[8];
  *(void *)(a2 + 480) = *(void *)&buf[6];
  *(void *)(a2 + 488) = v346;
  uint64_t v347 = *(void *)&buf[10];
  *(void *)(a2 + 496) = *(void *)&buf[10];
  if (v347)
  {
    v346[2] = v345;
    v346 = 0LL;
    *(void *)&buf[6] = &buf[8];
    *(void *)&buf[8] = 0LL;
    *(void *)&buf[10] = 0LL;
  }

  else
  {
    *(void *)(a2 + 480) = v345;
  }

  sub_85D64(v346);
  sub_DDEE4((uint64_t *)buf);
  if (!*(void *)(a2 + 472))
  {
    v350 = (os_log_t *)sub_138E8(8);
    v351 = *v350;
    if (*v350)
    {
      if (os_log_type_enabled(*v350, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "RouteCache.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 509;
        _os_log_impl(&dword_0, v351, OS_LOG_TYPE_ERROR, "%25s:%-5d Route Cache is Empty", (uint8_t *)buf, 0x12u);
      }
    }
  }

  v348 = v565;
  v565 = 0LL;
  if (v348 == v564)
  {
    uint64_t v349 = 4LL;
    v348 = v564;
LABEL_517:
    (*(void (**)(void))(*(void *)v348 + 8 * v349))();
  }

  else if (v348)
  {
    uint64_t v349 = 5LL;
    goto LABEL_517;
  }

  *(_OWORD *)(a2 + 32) = *v535;
  if (a2 + 48 != a5) {
    sub_52A24(a2 + 48, *(void **)a5, (void *)(a5 + 8));
  }
  sub_111034((uint64_t ***)buf, a6);
  uint64_t v352 = a2 + 80;
  sub_1112B0(*(void **)(a2 + 80));
  uint64_t v353 = *(void *)&buf[2];
  *(void *)(a2 + 72) = *(void *)buf;
  *(void *)(a2 + 80) = v353;
  uint64_t v354 = *(void *)&buf[4];
  *(void *)(a2 + 88) = *(void *)&buf[4];
  if (v354)
  {
    *(void *)(v353 + 16) = v352;
    *(void *)buf = &buf[2];
    *(void *)&buf[2] = 0LL;
    *(void *)&buf[4] = 0LL;
  }

  else
  {
    *(void *)(a2 + 72) = v352;
  }

  uint64_t v355 = a2 + 104;
  sub_1112F0(*(void **)(a2 + 104));
  v356 = *(void **)&buf[8];
  *(void *)(a2 + 96) = *(void *)&buf[6];
  *(void *)(a2 + 104) = v356;
  uint64_t v357 = *(void *)&buf[10];
  *(void *)(a2 + 112) = *(void *)&buf[10];
  if (v357)
  {
    v356[2] = v355;
    *(void *)&buf[6] = &buf[8];
    *(void *)&buf[8] = 0LL;
    *(void *)&buf[10] = 0LL;
    v356 = 0LL;
  }

  else
  {
    *(void *)(a2 + 96) = v355;
  }

  sub_1112F0(v356);
  sub_1112B0(*(void **)&buf[2]);
  if (a2 + 120 != a7) {
    sub_52A24(a2 + 120, *(void **)a7, (void *)(a7 + 8));
  }
  *(_DWORD *)(a2 + 144) = a8;
  *(_BYTE *)(a2 + 384) = a12;
  v358 = (uint64_t **)(a2 + 152);
  if ((void *)(a2 + 152) != a9)
  {
    v360 = a9 + 1;
    v359 = (void *)*a9;
    if (*(void *)(a2 + 168))
    {
      uint64_t v362 = *(void *)(a2 + 160);
      v361 = (uint64_t **)(a2 + 160);
      uint64_t v363 = *(void *)(a2 + 152);
      *(void *)(a2 + 152) = a2 + 160;
      *(void *)(v362 + 16) = 0LL;
      *(void *)(a2 + 160) = 0LL;
      *(void *)(a2 + 168) = 0LL;
      if (*(void *)(v363 + 8)) {
        uint64_t v364 = *(void *)(v363 + 8);
      }
      else {
        uint64_t v364 = v363;
      }
      *(void *)buf = a2 + 152;
      *(void *)&buf[2] = v364;
      *(void *)&buf[4] = v364;
      if (!v364 || (*(void *)&buf[2] = sub_68080(v364), v359 == v360))
      {
        v375 = v359;
      }

      else
      {
        do
        {
          uint64_t v366 = v359[4];
          uint64_t v365 = v359[5];
          if (v365)
          {
            v367 = (unint64_t *)(v365 + 16);
            do
              unint64_t v368 = __ldxr(v367);
            while (__stxr(v368 + 1, v367));
          }

          v369 = *(std::__shared_weak_count **)(v364 + 40);
          *(void *)(v364 + 32) = v366;
          *(void *)(v364 + 40) = v365;
          if (v369) {
            std::__shared_weak_count::__release_weak(v369);
          }
          uint64_t v370 = *(void *)&buf[4];
          v371 = *v361;
          v372 = (uint64_t **)(a2 + 160);
          v373 = (uint64_t **)(a2 + 160);
          if (*v361)
          {
            do
            {
              while (1)
              {
                v372 = (uint64_t **)v371;
                v371 = *v372;
                v373 = v372;
                if (!*v372) {
                  goto LABEL_546;
                }
              }

              v371 = v372[1];
            }

            while (v371);
            v373 = v372 + 1;
          }

        sub_2B1FE0((uint64_t)v554, *v519, v315);
        sub_2A4D2C(v512, (uint64_t)v554);
        v351 = (std::__shared_weak_count *)v554[0].__r_.__value_.__l.__cap_;
        if (v554[0].__r_.__value_.__l.__cap_)
        {
          uint64_t v352 = (unint64_t *)(v554[0].__r_.__value_.__l.__cap_ + 8);
          do
            uint64_t v353 = __ldaxr(v352);
          while (__stlxr(v353 - 1, v352));
          if (!v353)
          {
            ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
            std::__shared_weak_count::__release_weak(v351);
          }
        }

        uint64_t v354 = sub_138E8(16);
        uint64_t v355 = sub_138E8(33);
        v356 = 0;
        uint64_t v357 = 0LL;
        v554[0].__r_.__value_.__r.__words[0] = 0x100000002LL;
        v358 = *(void *)(v354 + 8);
        while (1)
        {
          v359 = *((int *)&v554[0].__r_.__value_.__l.__data_ + v357);
          v360 = v356;
          if (((v358 & v359) != 0) != ((*(void *)(v355 + 8) & v359) != 0)) {
            break;
          }
          v356 = 1;
          uint64_t v357 = 1LL;
          if ((v360 & 1) != 0)
          {
            if ((v358 & 1) == 0) {
              goto LABEL_514;
            }
            goto LABEL_509;
          }
        }

        if ((v358 & v359) == 0) {
          uint64_t v354 = v355;
        }
        if ((*(void *)(v354 + 8) & 1) != 0)
        {
LABEL_509:
          v361 = *(os_log_s **)v354;
          if (*(void *)v354 && os_log_type_enabled(*(os_log_t *)v354, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v362 = (uint64_t *)&v543 + 1;
            if (v506) {
              uint64_t v362 = (uint64_t *)&v545;
            }
            uint64_t v363 = *v362;
            LODWORD(v554[0].__r_.__value_.__l.__data_) = 136315906;
            *(std::string::size_type *)((char *)v554[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AggregateDevice_Multi.cpp";
            WORD2(v554[0].__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&v554[0].__r_.__value_.__r.__words[1] + 6) = 272;
            WORD1(v554[0].__r_.__value_.__r.__words[2]) = 2048;
            *(std::string::size_type *)((char *)&v554[0].__r_.__value_.__r.__words[2] + 4) = v363 - 32;
            WORD2(v554[1].__r_.__value_.__r.__words[0]) = 1024;
            *(_DWORD *)((char *)v554[1].__r_.__value_.__r.__words + 6) = v315;
            _os_log_impl( &dword_0,  v361,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - created pointer underlying stream %p wired to client stream index %u.",  (uint8_t *)v554,  0x22u);
          }
        }

LABEL_546:
          sub_32C38(v358, (uint64_t)v372, v373, (uint64_t *)v370);
          *(void *)&buf[4] = *(void *)&buf[2];
          if (*(void *)&buf[2]) {
            *(void *)&buf[2] = sub_68080(*(uint64_t *)&buf[2]);
          }
          v374 = (void *)v359[1];
          if (v374)
          {
            do
            {
              v375 = v374;
              v374 = (void *)*v374;
            }

            while (v374);
          }

          else
          {
            do
            {
              v375 = (void *)v359[2];
              BOOL v33 = *v375 == (void)v359;
              v359 = v375;
            }

            while (!v33);
          }

          uint64_t v364 = *(void *)&buf[4];
          if (*(void *)&buf[4]) {
            BOOL v376 = v375 == v360;
          }
          else {
            BOOL v376 = 1;
          }
          v359 = v375;
        }

        while (!v376);
      }

      sub_117484((uint64_t)buf);
      v359 = v375;
    }

    if (v359 != v360)
    {
      v377 = (uint64_t **)(a2 + 160);
      do
      {
        v378 = operator new(0x30uLL);
        v378[4] = v359[4];
        uint64_t v379 = v359[5];
        v378[5] = v379;
        if (v379)
        {
          v380 = (unint64_t *)(v379 + 16);
          do
            unint64_t v381 = __ldxr(v380);
          while (__stxr(v381 + 1, v380));
        }

        v382 = *v377;
        v383 = (uint64_t **)(a2 + 160);
        v384 = (uint64_t **)(a2 + 160);
        if (*v377)
        {
          do
          {
            while (1)
            {
              v383 = (uint64_t **)v382;
              v382 = *v383;
              v384 = v383;
              if (!*v383) {
                goto LABEL_572;
              }
            }

            v382 = v383[1];
          }

          while (v382);
          v384 = v383 + 1;
        }

LABEL_572:
        sub_32C38(v358, (uint64_t)v383, v384, v378);
        v385 = (void *)v359[1];
        if (v385)
        {
          do
          {
            v386 = v385;
            v385 = (void *)*v385;
          }

          while (v385);
        }

        else
        {
          do
          {
            v386 = (void *)v359[2];
            BOOL v33 = *v386 == (void)v359;
            v359 = v386;
          }

          while (!v33);
        }

        v359 = v386;
      }

      while (v386 != v360);
    }
  }

  sub_1165B8((std::string *)(a2 + 416), a15);
  uint64_t v387 = a2;
  v388 = (void **)(a2 + 392);
  if ((uint64_t *)(a2 + 392) != a13)
  {
    uint64_t v390 = *a13;
    uint64_t v389 = a13[1];
    unint64_t v391 = 0x6FB586FB586FB587LL * ((v389 - *a13) >> 3);
    uint64_t v392 = *(void *)(a2 + 408);
    uint64_t v393 = *(void *)(a2 + 392);
    if (0x6FB586FB586FB587LL * ((v392 - v393) >> 3) >= v391)
    {
      if (0x6FB586FB586FB587LL * ((*(void *)(a2 + 400) - v393) >> 3) < v391)
      {
        uint64_t v400 = v390 + 8 * ((*(void *)(a2 + 400) - v393) >> 3);
        sub_1169F0(*a13, v400, *(void *)(a2 + 392));
        uint64_t v387 = a2;
        uint64_t v399 = sub_1173A4(v400, v389, *(void *)(a2 + 400));
        goto LABEL_594;
      }

      uint64_t v401 = sub_1169F0(*a13, a13[1], *(void *)(a2 + 392));
      for (uint64_t k = *(void *)(a2 + 400); k != v401; uint64_t k = sub_8F164(k - 440))
        ;
      uint64_t v387 = a2;
      *(void *)(a2 + 400) = v401;
    }

    else
    {
      if (v393)
      {
        uint64_t v394 = *(void *)(a2 + 400);
        v395 = *(void **)(a2 + 392);
        if (v394 != v393)
        {
          do
            uint64_t v394 = sub_8F164(v394 - 440);
          while (v394 != v393);
          v395 = *v388;
        }

        *(void *)(a2 + 400) = v393;
        operator delete(v395);
        uint64_t v392 = 0LL;
        *v388 = 0LL;
        *(void *)(a2 + 400) = 0LL;
        *(void *)(a2 + 408) = 0LL;
      }

      if (v391 > 0x94F2094F2094F2LL) {
        sub_7A87C();
      }
      unint64_t v396 = 0x6FB586FB586FB587LL * (v392 >> 3);
      uint64_t v397 = 2 * v396;
      if (2 * v396 <= v391) {
        uint64_t v397 = v391;
      }
      if (v396 >= 0x4A7904A7904A79LL) {
        unint64_t v398 = 0x94F2094F2094F2LL;
      }
      else {
        unint64_t v398 = v397;
      }
      sub_117434(v388, v398);
      uint64_t v387 = a2;
      uint64_t v399 = sub_1173A4(v390, v389, *(void *)(a2 + 400));
LABEL_594:
      *(void *)(v387 + 400) = v399;
    }
  }

  if (v387 + 216 != a11)
  {
    sub_8D094( v387 + 216,  *(const void ***)a11,  *(const void ***)(a11 + 8),  (uint64_t)(*(void *)(a11 + 8) - *(void *)a11) >> 3);
    sub_8D094( a2 + 240,  *(const void ***)(a11 + 24),  *(const void ***)(a11 + 32),  (uint64_t)(*(void *)(a11 + 32) - *(void *)(a11 + 24)) >> 3);
    *(_DWORD *)(a2 + 296) = *(_DWORD *)(a11 + 80);
    sub_52360((void *)(a2 + 264), *(char **)(a11 + 64));
    *(_DWORD *)(a2 + 336) = *(_DWORD *)(a11 + 120);
    sub_52360((void *)(a2 + 304), *(char **)(a11 + 104));
    *(_DWORD *)(a2 + 376) = *(_DWORD *)(a11 + 160);
    sub_52360((void *)(a2 + 344), *(char **)(a11 + 144));
  }

  uint64_t v403 = sub_138E8(8);
  if ((*(_BYTE *)(v403 + 8) & 1) != 0)
  {
    v404 = *(os_log_s **)v403;
    if (*(void *)v403)
    {
      if (os_log_type_enabled(*(os_log_t *)v403, OS_LOG_TYPE_DEBUG))
      {
        sub_2CA1C(&v582, *(unsigned int *)(a2 + 176));
        int v405 = (char)v582.__r_.__value_.__s.__size_;
        std::string::size_type v406 = v582.__r_.__value_.__r.__words[0];
        sub_2CA1C(&__p, *a10);
        v407 = &v582;
        if (v405 < 0) {
          v407 = (std::string *)v406;
        }
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        buf[0] = 136315906;
        *(void *)&buf[1] = "RoutingManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 3053;
        HIWORD(buf[4]) = 2080;
        *(void *)&buf[5] = v407;
        LOWORD(buf[7]) = 2080;
        *(void *)((char *)&buf[7] + 2) = p_p;
        _os_log_impl( &dword_0,  v404,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d mRouteInitiationInfo. Old: %s; new: %s.",
          (uint8_t *)buf,
          0x26u);
      }
    }
  }

  if (*a10 != 1635087471)
  {
    *(_DWORD *)(a2 + 176) = *a10;
    std::string::operator=((std::string *)(a2 + 184), (const std::string *)(a10 + 2));
    *(void *)(a2 + 208) = *((void *)a10 + 4);
    uint64_t v409 = sub_138E8(8);
    if ((*(_BYTE *)(v409 + 8) & 1) != 0)
    {
      v410 = *(os_log_s **)v409;
      if (*(void *)v409)
      {
        if (os_log_type_enabled(*(os_log_t *)v409, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(&v582, *(unsigned int *)(a2 + 176));
          v411 = (v582.__r_.__value_.__s.__size_ & 0x80u) == 0
               ? &v582
               : (std::string *)v582.__r_.__value_.__r.__words[0];
          buf[0] = 136315650;
          *(void *)&buf[1] = "RoutingManager.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 3058;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = v411;
          _os_log_impl( &dword_0,  v410,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Set RouteInitiationInfo to %s.",  (uint8_t *)buf,  0x1Cu);
        }
      }
    }
  }

  uint64_t v412 = sub_138E8(8);
  uint64_t v413 = sub_138E8(34);
  char v414 = 0;
  uint64_t v415 = 0LL;
  *(void *)buf = 0x100000002LL;
  uint64_t v416 = *(void *)(v412 + 8);
  while (1)
  {
    uint64_t v417 = (int)buf[v415];
    char v418 = v414;
    if (((v416 & v417) != 0) != ((*(void *)(v413 + 8) & v417) != 0)) {
      break;
    }
    char v414 = 1;
    uint64_t v415 = 1LL;
    if ((v418 & 1) != 0)
    {
      if ((v416 & 1) == 0) {
        goto LABEL_655;
      }
      goto LABEL_630;
    }
  }

  if ((v416 & v417) == 0) {
    uint64_t v412 = v413;
  }
  if ((*(void *)(v412 + 8) & 1) != 0)
  {
LABEL_630:
    v419 = *(os_log_s **)v412;
    if (v419 && os_log_type_enabled(v419, OS_LOG_TYPE_DEBUG))
    {
      memset(&__p, 0, sizeof(__p));
      std::string::append(&__p, "[ ", 2uLL);
      for (m = v579; m != &v578; m = (uint64_t (***)())m[1])
      {
        sub_EB0D4(&v582, (unsigned int *)m + 4);
        if ((v582.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          v421 = &v582;
        }
        else {
          v421 = (std::string *)v582.__r_.__value_.__r.__words[0];
        }
        if ((v582.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type v422 = v582.__r_.__value_.__s.__size_;
        }
        else {
          std::string::size_type v422 = v582.__r_.__value_.__l.__size_;
        }
        std::string::append(&__p, (const std::string::value_type *)v421, v422);
        sub_2D9BB0(&v582, (uint64_t)(m + 17), 1);
        if ((v582.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          v423 = &v582;
        }
        else {
          v423 = (std::string *)v582.__r_.__value_.__r.__words[0];
        }
        if ((v582.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type v424 = v582.__r_.__value_.__s.__size_;
        }
        else {
          std::string::size_type v424 = v582.__r_.__value_.__l.__size_;
        }
        std::string::append(&__p, (const std::string::value_type *)v423, v424);
      }

      std::string::append(&__p, " ]", 2uLL);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        v425 = &__p;
      }
      else {
        v425 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      buf[0] = 136315650;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 3061;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v425;
      _os_log_impl( &dword_0,  v419,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Creating successful route update result with DeviceInfoState: %s",  (uint8_t *)buf,  0x1Cu);
    }
  }

LABEL_655:
  char v426 = *(_BYTE *)(a2 + 384);
  *(_OWORD *)buf = *v535;
  sub_116648((uint64_t *)&buf[4], (uint64_t)&v578);
  LOBYTE(buf[10]) = v426;
  v582.__r_.__value_.__r.__words[0] = (std::string::size_type)off_4709D0;
  LODWORD(v582.__r_.__value_.__r.__words[1]) = 0;
  HIDWORD(v582.__r_.__value_.__r.__words[1]) = a14;
  v427 = (uint64_t *)operator new(0x30uLL);
  *(_OWORD *)v427 = *(_OWORD *)buf;
  sub_116648(v427 + 2, (uint64_t)&buf[4]);
  *((_BYTE *)v427 + 40) = buf[10];
  v582.__r_.__value_.__l.__cap_ = (std::string::size_type)v427;
  char v583 = 0;
  LOBYTE(v584) = 0;
  sub_725DC(a1, (uint64_t)&v582);
  v582.__r_.__value_.__r.__words[0] = (std::string::size_type)off_4709D0;
  v428 = (void *)v582.__r_.__value_.__l.__cap_;
  if (v582.__r_.__value_.__l.__cap_)
  {
    sub_10AF78((uint64_t *)(v582.__r_.__value_.__l.__cap_ + 16));
    operator delete(v428);
  }

  sub_10AF78((uint64_t *)&buf[4]);
  sub_10AF78((uint64_t *)&v578);
LABEL_658:
  *(void *)buf = &v542;
  sub_110D60((void ***)buf);
  sub_11675C((uint64_t)&v544);
  sub_35B78((uint64_t)v563);
  if (*(_DWORD *)(a1 + 8))
  {
    v429 = (os_log_t *)sub_138E8(8);
    v430 = *v429;
    if (*v429)
    {
      if (os_log_type_enabled(*v429, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v582.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v582.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RoutingManager.cpp";
        WORD2(v582.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&v582.__r_.__value_.__r.__words[1] + 6) = 3077;
        _os_log_impl( &dword_0,  v430,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Routing is not supported: attempt to activate the routes failed.",  (uint8_t *)&v582,  0x12u);
      }
    }
  }

  sub_32C8C(v550[0]);
}

void sub_11580C( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, char a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a2)
  {
    if (SLOBYTE(STACK[0x277]) < 0) {
      operator delete((void *)STACK[0x260]);
    }
    sub_1169B8((uint64_t)&STACK[0x2B0]);
    sub_35B78(v72 - 160);
    sub_129F98((void *)a65);
    *(void *)(v72 - 160) = &a67;
    sub_110D60((void ***)(v72 - 160));
    sub_32C8C((void *)a71);
    sub_32C8C((void *)STACK[0x208]);
    if (v71) {
      operator delete(v71);
    }
    sub_11675C((uint64_t)&a49);
    sub_35B78((uint64_t)&STACK[0x238]);
    if (a2 == 3)
    {
      uint64_t v75 = (unsigned int *)__cxa_begin_catch(a1);
      uint64_t v76 = (os_log_t *)sub_138E8(8);
      char v77 = *v76;
      if (*v76 && os_log_type_enabled(*v76, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(&STACK[0x238], v75[2]);
        if (SLOBYTE(STACK[0x24F]) >= 0) {
          v78 = &STACK[0x238];
        }
        else {
          v78 = (unint64_t *)STACK[0x238];
        }
        *(_DWORD *)(v72 - 160) = 136315650;
        STACK[0x354] = (unint64_t)"RoutingManager.cpp";
        *(_WORD *)(v72 - 148) = 1024;
        LODWORD(STACK[0x35E]) = 3068;
        *(_WORD *)(v72 - 142) = 2080;
        *(void *)(v72 - 140) = v78;
        _os_log_impl( &dword_0,  v77,  OS_LOG_TYPE_ERROR,  "%25s:%-5d CAException thrown during mRoutingHandlerDispatcher->ProcessRoute: '%s'.",  (uint8_t *)(v72 - 160),  0x1Cu);
        if (SLOBYTE(STACK[0x24F]) < 0) {
          operator delete((void *)STACK[0x238]);
        }
      }
    }

    else
    {
      uint64_t v79 = __cxa_begin_catch(a1);
      if (a2 == 2)
      {
        uint64_t v80 = v79;
        uint64_t v81 = (os_log_t *)sub_138E8(8);
        uint64_t v82 = *v81;
        if (*v81 && os_log_type_enabled(*v81, OS_LOG_TYPE_ERROR))
        {
          uint64_t v83 = (*(uint64_t (**)(void *))(*(void *)v80 + 16LL))(v80);
          *(_DWORD *)(v72 - 160) = 136315650;
          uint64_t v84 = v72 - 160;
          *(void *)(v84 + 4) = "RoutingManager.cpp";
          *(_WORD *)(v72 - 148) = 1024;
          *(_DWORD *)(v84 + 14) = 3073;
          *(_WORD *)(v72 - 142) = 2080;
          *(void *)(v84 + 20) = v83;
          _os_log_impl( &dword_0,  v82,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Standard Library exception thrown during mRoutingHandlerDispatcher->ProcessRoute: %s.",  (uint8_t *)(v72 - 160),  0x1Cu);
        }
      }

      else
      {
        uint64_t v85 = (os_log_t *)sub_138E8(8);
        uint64_t v86 = *v85;
        if (*v85 && os_log_type_enabled(*v85, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)(v72 - 160) = 136315394;
          uint64_t v87 = v72 - 160;
          *(void *)(v87 + 4) = "RoutingManager.cpp";
          *(_WORD *)(v72 - 148) = 1024;
          *(_DWORD *)(v87 + 14) = 3075;
          _os_log_impl( &dword_0,  v86,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Unknown exception thrown during mRoutingHandlerDispatcher->ProcessRoute.",  (uint8_t *)(v72 - 160),  0x12u);
        }
      }
    }

    __cxa_end_catch();
    JUMPOUT(0x1147E4LL);
  }

  _Unwind_Resume(a1);
}

void sub_1162E8()
{
}

void sub_116320(void ***a1)
{
  v1 = *a1;
  BOOL v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 6;
        sub_55F18(v4 - 4);
        v4 = v6;
      }

      while (v6 != v2);
      v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void *sub_116394(void *a1)
{
  BOOL v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

uint64_t *sub_1163D8(uint64_t **a1, unsigned int a2, unsigned int a3, uint64_t *a4)
{
  result = sub_71B20((uint64_t)a1, &v9, a2, a3);
  if (!*result)
  {
    v7 = (uint64_t **)result;
    v8 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v8 + 28) = *a4;
    return sub_32C38(a1, v9, v7, v8);
  }

  return result;
}

uint64_t sub_116458(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0LL;
  v3 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      sub_117CFC((uint64_t **)a1, v3, *((_DWORD *)v5 + 7), *((_DWORD *)v5 + 8), (void *)((char *)v5 + 28));
      v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (void *)*v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          v5 = v7;
        }

        while (!v8);
      }

      v5 = v7;
    }

    while (v7 != v4);
  }

  return a1;
}

void sub_1164EC(_Unwind_Exception *a1)
{
}

void *sub_116500(uint64_t a1, void *a2)
{
  v4 = operator new(0xA0uLL);
  void *v4 = 0LL;
  v4[1] = 0LL;
  __int128 v5 = *(_OWORD *)(a1 + 16);
  *((_OWORD *)v4 + 1) = *(_OWORD *)a1;
  *((_OWORD *)v4 + 2) = v5;
  __int128 v6 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v4 + 3) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v4 + 4) = v6;
  sub_1167B0((uint64_t)(v4 + 10), (void *)(a1 + 64));
  v4[13] = 0LL;
  v4[14] = 0LL;
  v4[15] = 0LL;
  sub_116930( v4 + 13,  *(__int128 **)(a1 + 88),  *(__int128 **)(a1 + 96),  (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 4);
  *((_DWORD *)v4 + 32) = *(_DWORD *)(a1 + 112);
  v4[17] = v4 + 17;
  v4[18] = v4 + 17;
  v4[19] = 0LL;
  sub_CCA0C((uint64_t)(v4 + 17), v4 + 17, a2);
  return v4;
}

void sub_116594(_Unwind_Exception *a1)
{
}

void sub_1165B8(std::string *__dst, const std::string *a2)
{
  if (__dst[1].__r_.__value_.__s.__data_[0] == a2[1].__r_.__value_.__s.__data_[0])
  {
    if (__dst[1].__r_.__value_.__s.__data_[0]) {
      std::string::operator=(__dst, a2);
    }
  }

  else if (__dst[1].__r_.__value_.__s.__data_[0])
  {
    __dst[1].__r_.__value_.__s.__data_[0] = 0;
  }

  else
  {
    if ((char)a2->__r_.__value_.__s.__size_ < 0)
    {
      sub_24054(__dst, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }

    else
    {
      __int128 v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      __dst->__r_.__value_.__l.__cap_ = a2->__r_.__value_.__l.__cap_;
      *(_OWORD *)&__dst->__r_.__value_.__l.__data_ = v3;
    }

    __dst[1].__r_.__value_.__s.__data_[0] = 1;
  }

uint64_t *sub_116648(uint64_t *a1, uint64_t a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
  {
    __int128 v5 = operator new(0xA0uLL);
    void *v5 = 0LL;
    v5[1] = 0LL;
    __int128 v6 = *(_OWORD *)(i + 16);
    __int128 v7 = *(_OWORD *)(i + 32);
    __int128 v8 = *(_OWORD *)(i + 64);
    *((_OWORD *)v5 + 3) = *(_OWORD *)(i + 48);
    *((_OWORD *)v5 + 4) = v8;
    *((_OWORD *)v5 + 1) = v6;
    *((_OWORD *)v5 + 2) = v7;
    sub_1167B0((uint64_t)(v5 + 10), (void *)(i + 80));
    v5[13] = 0LL;
    v5[14] = 0LL;
    v5[15] = 0LL;
    sub_116930( v5 + 13,  *(__int128 **)(i + 104),  *(__int128 **)(i + 112),  (uint64_t)(*(void *)(i + 112) - *(void *)(i + 104)) >> 4);
    *((_DWORD *)v5 + 32) = *(_DWORD *)(i + 128);
    sub_85A90(v5 + 17, (void *)(i + 136));
    uint64_t v9 = *a1;
    void *v5 = *a1;
    v5[1] = a1;
    *(void *)(v9 + 8) = v5;
    *a1 = (uint64_t)v5;
    ++a1[2];
  }

  return a1;
}

void sub_116718(_Unwind_Exception *a1)
{
}

uint64_t sub_11675C(uint64_t a1)
{
  if (std::uncaught_exceptions() > *(_DWORD *)a1) {
    (*(void (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 8) + 24LL) + 16LL))( *(void *)(*(void *)(a1 + 8) + 24LL),  a1 + 16);
  }
  sub_32C8C(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_1167B0(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0LL;
  uint64_t v3 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  v4 = a2 + 1;
  __int128 v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      __int128 v6 = (unsigned int *)(v5 + 4);
      __int128 v7 = *(uint64_t **)(a1 + 8);
      __int128 v8 = v3;
      uint64_t v9 = *(void *)(a1 + 8);
      v10 = v3;
      if (v7)
      {
        do
        {
          __int128 v8 = (uint64_t **)v9;
          uint64_t v9 = *(void *)(v9 + 8);
        }

        while (v9);
      }

      else
      {
        do
        {
          __int128 v8 = (uint64_t **)v10[2];
          BOOL v11 = *v8 == (uint64_t *)v10;
          v10 = v8;
        }

        while (v11);
      }

      unsigned int v12 = *v6;
      if (*((_DWORD *)v8 + 8) < *v6)
      {
LABEL_8:
        if (v7) {
          v13 = v8;
        }
        else {
          v13 = v3;
        }
        if (v7) {
          v14 = v8 + 1;
        }
        else {
          v14 = v3;
        }
      }

      else
      {
        v13 = v3;
        v14 = v3;
        if (v7)
        {
          v14 = v3;
          while (1)
          {
            while (1)
            {
              v13 = (uint64_t **)v7;
              unsigned int v18 = *((_DWORD *)v7 + 8);
              if (v12 >= v18) {
                break;
              }
              __int128 v7 = *v13;
              v14 = v13;
              if (!*v13) {
                goto LABEL_15;
              }
            }

            if (v18 >= v12) {
              break;
            }
            v14 = v13 + 1;
            __int128 v7 = v13[1];
            if (!v7) {
              goto LABEL_15;
            }
          }
        }
      }

      if (!*v14)
      {
LABEL_15:
        uint64_t v15 = (uint64_t *)operator new(0x30uLL);
        *((_OWORD *)v15 + 2) = *(_OWORD *)v6;
        sub_32C38((uint64_t **)a1, (uint64_t)v13, v14, v15);
      }

      uint64_t v16 = (void *)v5[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          uint64_t v16 = (void *)*v16;
        }

        while (v16);
      }

      else
      {
        do
        {
          v17 = (void *)v5[2];
          BOOL v11 = *v17 == (void)v5;
          __int128 v5 = v17;
        }

        while (!v11);
      }

      __int128 v5 = v17;
    }

    while (v17 != v4);
  }

  return a1;
}

void sub_11691C(_Unwind_Exception *a1)
{
}

_OWORD *sub_116930(_OWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  if (a4)
  {
    v4 = result;
    if (a4 >> 60) {
      sub_7A87C();
    }
    result = sub_7BE90(a4);
    void *v4 = result;
    v4[1] = result;
    v4[2] = &result[v7];
    while (a2 != a3)
    {
      __int128 v8 = *a2++;
      *result++ = v8;
    }

    v4[1] = result;
  }

  return result;
}

void sub_11699C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_1169B8(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }

  sub_32C8C(*(void **)(a1 + 72));
  return a1;
}

uint64_t sub_1169F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    for (uint64_t i = a1; i != a2; i += 440LL)
    {
      *(void *)a3 = *(void *)i;
      if (a3 != i)
      {
        sub_7E6D4( (char *)(a3 + 8),  *(char **)(i + 8),  *(void *)(i + 16),  (uint64_t)(*(void *)(i + 16) - *(void *)(i + 8)) >> 2);
        sub_52A24(a3 + 32, *(void **)(i + 32), (void *)(i + 40));
        uint64_t v6 = *(void *)(i + 56);
        *(_DWORD *)(a3 + 64) = *(_DWORD *)(i + 64);
        *(void *)(a3 + 56) = v6;
        uint64_t v7 = i + 72;
        __int128 v8 = (_DWORD *)(a3 + 72);
        uint64_t v9 = *(void *)(i + 80);
        v10 = *(_DWORD **)(a3 + 80);
        if (v9 != i + 72 && v10 != v8)
        {
          do
          {
            v10[4] = *(_DWORD *)(v9 + 16);
            uint64_t v9 = *(void *)(v9 + 8);
            v10 = (_DWORD *)*((void *)v10 + 1);
          }

          while (v9 != v7 && v10 != v8);
        }

        if (v10 == v8)
        {
          if (v9 != v7)
          {
            uint64_t v15 = operator new(0x18uLL);
            uint64_t v16 = v15;
            *uint64_t v15 = 0LL;
            v15[1] = 0LL;
            *((_DWORD *)v15 + 4) = *(_DWORD *)(v9 + 16);
            uint64_t v17 = *(void *)(v9 + 8);
            if (v17 == v7)
            {
              uint64_t v18 = 1LL;
            }

            else
            {
              uint64_t v18 = 1LL;
              uint64_t v19 = v15;
              do
              {
                uint64_t v15 = operator new(0x18uLL);
                *uint64_t v15 = v19;
                v15[1] = 0LL;
                *((_DWORD *)v15 + 4) = *(_DWORD *)(v17 + 16);
                v19[1] = v15;
                ++v18;
                uint64_t v17 = *(void *)(v17 + 8);
                uint64_t v19 = v15;
              }

              while (v17 != v7);
            }

            uint64_t v20 = *(void *)(a3 + 72);
            *(void *)(v20 + 8) = v16;
            *uint64_t v16 = v20;
            *(void *)(a3 + 72) = v15;
            v15[1] = v8;
            *(void *)(a3 + 88) += v18;
          }
        }

        else
        {
          uint64_t v12 = *(void *)(a3 + 72);
          uint64_t v13 = *(void *)v10;
          *(void *)(v13 + 8) = *(void *)(v12 + 8);
          **(void **)(v12 + 8) = v13;
          do
          {
            v14 = (_DWORD *)*((void *)v10 + 1);
            --*(void *)(a3 + 88);
            operator delete(v10);
            v10 = v14;
          }

          while (v14 != v8);
        }
      }

      *(_BYTE *)(a3 + 96) = *(_BYTE *)(i + 96);
      sub_82AF0((uint64_t)v43, i + 104);
      v21 = (void *)(a3 + 104);
      uint64_t v22 = v44;
      if ((void *)(a3 + 104) != v43)
      {
        uint64_t v23 = *(void **)(a3 + 128);
        if (v44 == v43)
        {
          if (v23 == v21)
          {
            (*(void (**)(void *, void *))(v43[0] + 24LL))(v43, v45);
            (*(void (**)(void *))(*v44 + 32LL))(v44);
            char v44 = 0LL;
            (*(void (**)(void, void *))(**(void **)(a3 + 128) + 24LL))(*(void *)(a3 + 128), v43);
            (*(void (**)(void))(**(void **)(a3 + 128) + 32LL))(*(void *)(a3 + 128));
            *(void *)(a3 + 128) = 0LL;
            char v44 = v43;
            (*(void (**)(void *, uint64_t))(v45[0] + 24LL))(v45, a3 + 104);
            (*(void (**)(void *))(v45[0] + 32LL))(v45);
            *(void *)(a3 + 128) = v21;
            uint64_t v22 = v44;
          }

          else
          {
            (*(void (**)(void *, uint64_t))(v43[0] + 24LL))(v43, a3 + 104);
            (*(void (**)(void *))(*v44 + 32LL))(v44);
            uint64_t v22 = *(void **)(a3 + 128);
            char v44 = v22;
            *(void *)(a3 + 128) = v21;
          }
        }

        else
        {
          if (v23 == v21)
          {
            (*(void (**)(uint64_t, void *))(*v21 + 24LL))(a3 + 104, v43);
            (*(void (**)(void))(**(void **)(a3 + 128) + 32LL))(*(void *)(a3 + 128));
            *(void *)(a3 + 128) = v44;
            uint64_t v22 = v43;
            char v44 = v43;
LABEL_34:
            uint64_t v24 = 4LL;
            goto LABEL_35;
          }

          char v44 = *(void **)(a3 + 128);
          *(void *)(a3 + 128) = v22;
          uint64_t v22 = v23;
        }
      }

      if (v22 == v43)
      {
        uint64_t v22 = v43;
        goto LABEL_34;
      }

      if (!v22) {
        goto LABEL_36;
      }
      uint64_t v24 = 5LL;
LABEL_35:
      (*(void (**)(void))(*v22 + 8 * v24))();
LABEL_36:
      sub_82AF0((uint64_t)v43, i + 136);
      uint64_t v25 = (void *)(a3 + 136);
      uint64_t v26 = v44;
      if ((void *)(a3 + 136) != v43)
      {
        uint64_t v27 = *(void **)(a3 + 160);
        if (v44 == v43)
        {
          if (v27 == v25)
          {
            (*(void (**)(void *, void *))(v43[0] + 24LL))(v43, v45);
            (*(void (**)(void *))(*v44 + 32LL))(v44);
            char v44 = 0LL;
            (*(void (**)(void, void *))(**(void **)(a3 + 160) + 24LL))(*(void *)(a3 + 160), v43);
            (*(void (**)(void))(**(void **)(a3 + 160) + 32LL))(*(void *)(a3 + 160));
            *(void *)(a3 + 160) = 0LL;
            char v44 = v43;
            (*(void (**)(void *, uint64_t))(v45[0] + 24LL))(v45, a3 + 136);
            (*(void (**)(void *))(v45[0] + 32LL))(v45);
            *(void *)(a3 + 160) = v25;
            uint64_t v26 = v44;
          }

          else
          {
            (*(void (**)(void *, uint64_t))(v43[0] + 24LL))(v43, a3 + 136);
            (*(void (**)(void *))(*v44 + 32LL))(v44);
            uint64_t v26 = *(void **)(a3 + 160);
            char v44 = v26;
            *(void *)(a3 + 160) = v25;
          }
        }

        else
        {
          if (v27 == v25)
          {
            (*(void (**)(uint64_t, void *))(*v25 + 24LL))(a3 + 136, v43);
            (*(void (**)(void))(**(void **)(a3 + 160) + 32LL))(*(void *)(a3 + 160));
            *(void *)(a3 + 160) = v44;
            uint64_t v26 = v43;
            char v44 = v43;
LABEL_48:
            uint64_t v28 = 4LL;
            goto LABEL_49;
          }

          char v44 = *(void **)(a3 + 160);
          *(void *)(a3 + 160) = v26;
          uint64_t v26 = v27;
        }
      }

      if (v26 == v43)
      {
        uint64_t v26 = v43;
        goto LABEL_48;
      }

      if (!v26) {
        goto LABEL_50;
      }
      uint64_t v28 = 5LL;
LABEL_49:
      (*(void (**)(void))(*v26 + 8 * v28))();
LABEL_50:
      sub_82AF0((uint64_t)v43, i + 168);
      int v29 = (void *)(a3 + 168);
      int v30 = v44;
      if ((void *)(a3 + 168) != v43)
      {
        v31 = *(void **)(a3 + 192);
        if (v44 == v43)
        {
          if (v31 == v29)
          {
            (*(void (**)(void *, void *))(v43[0] + 24LL))(v43, v45);
            (*(void (**)(void *))(*v44 + 32LL))(v44);
            char v44 = 0LL;
            (*(void (**)(void, void *))(**(void **)(a3 + 192) + 24LL))(*(void *)(a3 + 192), v43);
            (*(void (**)(void))(**(void **)(a3 + 192) + 32LL))(*(void *)(a3 + 192));
            *(void *)(a3 + 192) = 0LL;
            char v44 = v43;
            (*(void (**)(void *, uint64_t))(v45[0] + 24LL))(v45, a3 + 168);
            (*(void (**)(void *))(v45[0] + 32LL))(v45);
            *(void *)(a3 + 192) = v29;
            int v30 = v44;
          }

          else
          {
            (*(void (**)(void *, uint64_t))(v43[0] + 24LL))(v43, a3 + 168);
            (*(void (**)(void *))(*v44 + 32LL))(v44);
            int v30 = *(void **)(a3 + 192);
            char v44 = v30;
            *(void *)(a3 + 192) = v29;
          }
        }

        else
        {
          if (v31 == v29)
          {
            (*(void (**)(uint64_t, void *))(*v29 + 24LL))(a3 + 168, v43);
            (*(void (**)(void))(**(void **)(a3 + 192) + 32LL))(*(void *)(a3 + 192));
            *(void *)(a3 + 192) = v44;
            int v30 = v43;
            char v44 = v43;
LABEL_62:
            uint64_t v32 = 4LL;
            goto LABEL_63;
          }

          char v44 = *(void **)(a3 + 192);
          *(void *)(a3 + 192) = v30;
          int v30 = v31;
        }
      }

      if (v30 == v43)
      {
        int v30 = v43;
        goto LABEL_62;
      }

      if (!v30) {
        goto LABEL_64;
      }
      uint64_t v32 = 5LL;
LABEL_63:
      (*(void (**)(void))(*v30 + 8 * v32))();
LABEL_64:
      sub_82AF0((uint64_t)v43, i + 200);
      BOOL v33 = (void *)(a3 + 200);
      v34 = v44;
      if ((void *)(a3 + 200) != v43)
      {
        v35 = *(void **)(a3 + 224);
        if (v44 == v43)
        {
          if (v35 == v33)
          {
            (*(void (**)(void *, void *))(v43[0] + 24LL))(v43, v45);
            (*(void (**)(void *))(*v44 + 32LL))(v44);
            char v44 = 0LL;
            (*(void (**)(void, void *))(**(void **)(a3 + 224) + 24LL))(*(void *)(a3 + 224), v43);
            (*(void (**)(void))(**(void **)(a3 + 224) + 32LL))(*(void *)(a3 + 224));
            *(void *)(a3 + 224) = 0LL;
            char v44 = v43;
            (*(void (**)(void *, uint64_t))(v45[0] + 24LL))(v45, a3 + 200);
            (*(void (**)(void *))(v45[0] + 32LL))(v45);
            *(void *)(a3 + 224) = v33;
            v34 = v44;
          }

          else
          {
            (*(void (**)(void *, uint64_t))(v43[0] + 24LL))(v43, a3 + 200);
            (*(void (**)(void *))(*v44 + 32LL))(v44);
            v34 = *(void **)(a3 + 224);
            char v44 = v34;
            *(void *)(a3 + 224) = v33;
          }
        }

        else
        {
          if (v35 == v33)
          {
            (*(void (**)(uint64_t, void *))(*v33 + 24LL))(a3 + 200, v43);
            (*(void (**)(void))(**(void **)(a3 + 224) + 32LL))(*(void *)(a3 + 224));
            *(void *)(a3 + 224) = v44;
            v34 = v43;
            char v44 = v43;
LABEL_76:
            uint64_t v36 = 4LL;
            goto LABEL_77;
          }

          char v44 = *(void **)(a3 + 224);
          *(void *)(a3 + 224) = v34;
          v34 = v35;
        }
      }

      if (v34 == v43)
      {
        v34 = v43;
        goto LABEL_76;
      }

      if (!v34) {
        goto LABEL_78;
      }
      uint64_t v36 = 5LL;
LABEL_77:
      (*(void (**)(void))(*v34 + 8 * v36))();
LABEL_78:
      sub_82AF0((uint64_t)v43, i + 232);
      uint64_t v37 = (void *)(a3 + 232);
      uint64_t v38 = v44;
      if ((void *)(a3 + 232) != v43)
      {
        v39 = *(void **)(a3 + 256);
        if (v44 == v43)
        {
          if (v39 == v37)
          {
            (*(void (**)(void *, void *))(v43[0] + 24LL))(v43, v45);
            (*(void (**)(void *))(*v44 + 32LL))(v44);
            char v44 = 0LL;
            (*(void (**)(void, void *))(**(void **)(a3 + 256) + 24LL))(*(void *)(a3 + 256), v43);
            (*(void (**)(void))(**(void **)(a3 + 256) + 32LL))(*(void *)(a3 + 256));
            *(void *)(a3 + 256) = 0LL;
            char v44 = v43;
            (*(void (**)(void *, uint64_t))(v45[0] + 24LL))(v45, a3 + 232);
            (*(void (**)(void *))(v45[0] + 32LL))(v45);
            *(void *)(a3 + 256) = v37;
            uint64_t v38 = v44;
          }

          else
          {
            (*(void (**)(void *, uint64_t))(v43[0] + 24LL))(v43, a3 + 232);
            (*(void (**)(void *))(*v44 + 32LL))(v44);
            uint64_t v38 = *(void **)(a3 + 256);
            char v44 = v38;
            *(void *)(a3 + 256) = v37;
          }
        }

        else
        {
          if (v39 == v37)
          {
            (*(void (**)(uint64_t, void *))(*v37 + 24LL))(a3 + 232, v43);
            (*(void (**)(void))(**(void **)(a3 + 256) + 32LL))(*(void *)(a3 + 256));
            *(void *)(a3 + 256) = v44;
            uint64_t v38 = v43;
            char v44 = v43;
LABEL_90:
            uint64_t v40 = 4LL;
            goto LABEL_91;
          }

          char v44 = *(void **)(a3 + 256);
          *(void *)(a3 + 256) = v38;
          uint64_t v38 = v39;
        }
      }

      if (v38 == v43)
      {
        uint64_t v38 = v43;
        goto LABEL_90;
      }

      if (v38)
      {
        uint64_t v40 = 5LL;
LABEL_91:
        (*(void (**)(void))(*v38 + 8 * v40))();
      }

      if (a3 != i)
      {
        sub_8D094( a3 + 264,  *(const void ***)(i + 264),  *(const void ***)(i + 272),  (uint64_t)(*(void *)(i + 272) - *(void *)(i + 264)) >> 3);
        sub_8D094( a3 + 288,  *(const void ***)(i + 288),  *(const void ***)(i + 296),  (uint64_t)(*(void *)(i + 296) - *(void *)(i + 288)) >> 3);
        *(_DWORD *)(a3 + 344) = *(_DWORD *)(i + 344);
        sub_52360((void *)(a3 + 312), *(char **)(i + 328));
        *(_DWORD *)(a3 + 384) = *(_DWORD *)(i + 384);
        sub_52360((void *)(a3 + 352), *(char **)(i + 368));
        *(_DWORD *)(a3 + 424) = *(_DWORD *)(i + 424);
        sub_52360((void *)(a3 + 392), *(char **)(i + 408));
      }

      int v41 = *(_DWORD *)(i + 432);
      *(_BYTE *)(a3 + 436) = *(_BYTE *)(i + 436);
      *(_DWORD *)(a3 + 432) = v41;
      a3 += 440LL;
    }
  }

  return a3;
}

void sub_11733C(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1173A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0LL;
    do
    {
      sub_71648(a3 + v6, a1 + v6);
      v6 += 440LL;
    }

    while (a1 + v6 != a2);
    a3 += v6;
  }

  return a3;
}

char *sub_117434(void *a1, unint64_t a2)
{
  if (a2 >= 0x94F2094F2094F3LL) {
    sub_7A87C();
  }
  result = (char *)sub_8F5F8(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[440 * v4];
  return result;
}

uint64_t sub_117484(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        BOOL v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }

      while (v3);
      *(void *)(a1 + 8) = v2;
    }

    sub_FF3B8(v2);
  }

  return a1;
}

unint64_t *sub_1174D0(unint64_t *a1, unint64_t *a2, unint64_t a3)
{
  uint64_t v3 = a1;
  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      __int128 v5 = (uint64_t *)*a2;
      if (sub_D7370((unint64_t *)(*a2 + 16), a1 + 2))
      {
        uint64_t v6 = *v5;
        *(void *)(v6 + 8) = v5[1];
        *(void *)v5[1] = v6;
        unint64_t v7 = *v3;
        *(void *)(v7 + 8) = v5;
        uint64_t *v5 = v7;
        unint64_t *v3 = (unint64_t)v5;
        v5[1] = (uint64_t)v3;
        return (unint64_t *)v5;
      }
    }

    else
    {
      unint64_t v9 = a3 >> 1;
      unint64_t v10 = (a3 >> 1) + 1;
      BOOL v11 = a1;
      do
      {
        BOOL v11 = (unint64_t *)v11[1];
        --v10;
      }

      while (v10 > 1);
      uint64_t v12 = (unint64_t *)sub_1174D0(a1, v11, a3 >> 1);
      uint64_t v3 = (unint64_t *)sub_1174D0(v11, a2, a3 - v9);
      if (sub_D7370(v3 + 2, v12 + 2))
      {
        for (uint64_t i = (unint64_t *)v3[1]; i != a2; uint64_t i = (unint64_t *)i[1])
        {
          if (!sub_D7370(i + 2, v12 + 2)) {
            goto LABEL_14;
          }
        }

        uint64_t i = a2;
LABEL_14:
        unint64_t v15 = *i;
        unint64_t v16 = *v3;
        *(void *)(v16 + 8) = *(void *)(*i + 8);
        **(void **)(v15 + 8) = v16;
        unint64_t v17 = *v12;
        v14 = (unint64_t *)v12[1];
        *(void *)(v17 + 8) = v3;
        unint64_t *v3 = v17;
        *uint64_t v12 = v15;
        *(void *)(v15 + 8) = v12;
      }

      else
      {
        v14 = (unint64_t *)v12[1];
        uint64_t i = v3;
        uint64_t v3 = v12;
      }

      if (v14 != i && i != a2)
      {
        uint64_t v18 = i;
        do
        {
          if (sub_D7370(i + 2, v14 + 2))
          {
            for (std::string::size_type j = (unint64_t *)i[1]; j != a2; std::string::size_type j = (unint64_t *)j[1])
            {
              if (!sub_D7370(j + 2, v14 + 2)) {
                goto LABEL_25;
              }
            }

            std::string::size_type j = a2;
LABEL_25:
            unint64_t v20 = *j;
            unint64_t v21 = *i;
            *(void *)(v21 + 8) = *(void *)(*j + 8);
            **(void **)(v20 + 8) = v21;
            if (v18 == i) {
              uint64_t v18 = j;
            }
            unint64_t v23 = *v14;
            uint64_t v22 = (unint64_t *)v14[1];
            *(void *)(v23 + 8) = i;
            *uint64_t i = v23;
            unint64_t *v14 = v20;
            *(void *)(v20 + 8) = v14;
            v14 = v22;
            uint64_t i = j;
          }

          else
          {
            v14 = (unint64_t *)v14[1];
          }
        }

        while (v14 != v18 && i != a2);
      }
    }
  }

  return v3;
}

uint64_t sub_1176BC(uint64_t result, uint64_t *a2, uint64_t a3, void *a4, void *a5)
{
  if (a4 != a5)
  {
    __int128 v5 = (void *)*a5;
    if (result != a3)
    {
      if (v5 == a4)
      {
        uint64_t v8 = 1LL;
      }

      else
      {
        uint64_t v6 = -1LL;
        unint64_t v7 = a4;
        do
        {
          unint64_t v7 = (void *)v7[1];
          ++v6;
        }

        while (v7 != v5);
        uint64_t v8 = v6 + 2;
      }

      *(void *)(a3 + 16) -= v8;
      *(void *)(result + 16) += v8;
    }

    uint64_t v9 = *a4;
    *(void *)(v9 + 8) = v5[1];
    *(void *)v5[1] = v9;
    uint64_t v10 = *a2;
    *(void *)(v10 + 8) = a4;
    *a4 = v10;
    *a2 = (uint64_t)v5;
    v5[1] = a2;
  }

  return result;
}

uint64_t sub_117740(uint64_t a1)
{
  *(void *)a1 = off_470C18;
  sub_32C8C(*(void **)(a1 + 16));
  return a1;
}

void sub_117774(void **a1)
{
  *a1 = off_470C18;
  sub_32C8C(a1[2]);
  operator delete(a1);
}

void *sub_1177A8(uint64_t a1)
{
  BOOL v2 = (void *)(a1 + 8);
  uint64_t v3 = operator new(0x28uLL);
  void *v3 = off_470C18;
  sub_116458((uint64_t)(v3 + 1), v2);
  v3[4] = *(void *)(a1 + 32);
  return v3;
}

void sub_1177FC(_Unwind_Exception *a1)
{
}

uint64_t sub_117810(uint64_t a1, void *a2)
{
  *a2 = off_470C18;
  uint64_t result = sub_116458((uint64_t)(a2 + 1), (void *)(a1 + 8));
  a2[4] = *(void *)(a1 + 32);
  return result;
}

void sub_117850(uint64_t a1)
{
}

void sub_117858(void **a1)
{
}

void sub_117880(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 32);
  uint64_t v3 = v2 + 57;
  uint64_t v4 = sub_138E8(8);
  uint64_t v5 = sub_138E8(34);
  char v6 = 0;
  uint64_t v7 = 0LL;
  *(void *)buf = 0x100000002LL;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = *(int *)&buf[4 * v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1LL;
    if ((v10 & 1) != 0)
    {
      if ((v8 & 1) == 0) {
        goto LABEL_16;
      }
      goto LABEL_9;
    }
  }

  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
  if ((*(void *)(v4 + 8) & 1) != 0)
  {
LABEL_9:
    BOOL v11 = *(os_log_s **)v4;
    if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      sub_DDFE8(&__p, *(unsigned int **)(a1 + 8), (unsigned int *)(a1 + 16));
      uint64_t v12 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "RouteCache.cpp";
      __int16 v42 = 1024;
      int v43 = 520;
      __int16 v44 = 2080;
      uint64_t v45 = v12;
      _os_log_impl(&dword_0, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Clearing %s from Route Cache", buf, 0x1Cu);
    }
  }

uint64_t *sub_117CFC(uint64_t **a1, uint64_t *a2, unsigned int a3, unsigned int a4, uint64_t *a5)
{
  uint64_t v7 = sub_117D78(a1, a2, &v12, &v11, a3, a4);
  uint64_t v8 = (uint64_t *)*v7;
  if (!*v7)
  {
    uint64_t v9 = (uint64_t **)v7;
    uint64_t v8 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v8 + 28) = *a5;
    sub_32C38(a1, (uint64_t)v12, v9, v8);
  }

  return v8;
}

uint64_t *sub_117D78(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, unsigned int a5, unsigned int a6)
{
  unsigned int v6 = *((_DWORD *)a2 + 7);
  unsigned int v7 = *((_DWORD *)a2 + 8);
  BOOL v8 = v7 > a6;
  if (v6 != a5) {
    BOOL v8 = v6 > a5;
  }
  if (v8)
  {
LABEL_5:
    uint64_t v9 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      BOOL v11 = a2;
LABEL_23:
      if (v9)
      {
        *a3 = v11;
        return v11 + 1;
      }

      else
      {
        *a3 = a2;
        return a2;
      }
    }

    if (v9)
    {
      char v10 = (uint64_t *)*a2;
      do
      {
        BOOL v11 = v10;
        char v10 = (uint64_t *)v10[1];
      }

      while (v10);
    }

    else
    {
      unint64_t v17 = a2;
      do
      {
        BOOL v11 = (uint64_t *)v17[2];
        BOOL v13 = *v11 == (void)v17;
        unint64_t v17 = v11;
      }

      while (v13);
    }

    unsigned int v18 = *((_DWORD *)v11 + 7);
    BOOL v13 = v18 == a5;
    BOOL v19 = v18 < a5;
    if (v13) {
      BOOL v19 = *((_DWORD *)v11 + 8) < a6;
    }
    if (v19) {
      goto LABEL_23;
    }
    return sub_71B20((uint64_t)a1, a3, a5, a6);
  }

  BOOL v12 = v7 < a6;
  BOOL v13 = v6 == a5;
  BOOL v14 = v6 < a5;
  if (v13) {
    BOOL v14 = v12;
  }
  if (v14)
  {
    uint64_t v15 = a2[1];
    if (v15)
    {
      uint64_t v16 = (uint64_t *)a2[1];
      do
      {
        a4 = (uint64_t **)v16;
        uint64_t v16 = (uint64_t *)*v16;
      }

      while (v16);
    }

    else
    {
      char v20 = a2;
      do
      {
        a4 = (uint64_t **)v20[2];
        BOOL v13 = *a4 == v20;
        char v20 = (uint64_t *)a4;
      }

      while (!v13);
    }

    if (a4 == a1 + 1) {
      goto LABEL_34;
    }
    unsigned int v21 = *((_DWORD *)a4 + 7);
    BOOL v13 = v21 == a5;
    BOOL v22 = v21 > a5;
    if (v13) {
      BOOL v22 = *((_DWORD *)a4 + 8) > a6;
    }
    if (v22)
    {
LABEL_34:
      if (v15)
      {
        *a3 = (uint64_t *)a4;
      }

      else
      {
        *a3 = a2;
        return a2 + 1;
      }

      return (uint64_t *)a4;
    }

    return sub_71B20((uint64_t)a1, a3, a5, a6);
  }

  *a3 = a2;
  *a4 = a2;
  return (uint64_t *)a4;
}

std::string *sub_117EDC(std::string *a1, void *a2, void *a3)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      sub_48E98(__p, (CFStringRef)a2[4]);
      if ((v13 & 0x80u) == 0) {
        unsigned int v6 = __p;
      }
      else {
        unsigned int v6 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        std::string::size_type v7 = v13;
      }
      else {
        std::string::size_type v7 = (std::string::size_type)__p[1];
      }
      std::string::append(a1, (const std::string::value_type *)v6, v7);
      BOOL v8 = (void *)a2[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          BOOL v8 = (void *)*v8;
        }

        while (v8);
      }

      else
      {
        do
        {
          uint64_t v9 = (void *)a2[2];
          BOOL v10 = *v9 == (void)a2;
          a2 = v9;
        }

        while (!v10);
      }

      if (v9 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
      a2 = v9;
    }
  }

  return std::string::append(a1, " }", 2uLL);
}

void sub_117FE0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_11801C(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  BOOL v2 = a2 + 1;
  uint64_t v3 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      sub_B8F68(&v12, v3 + 4, "", 164);
      uint64_t v5 = *(const __CFString **)(v12 + 248);
      CFStringRef v14 = v5;
      if (*(_BYTE *)(v12 + 256)) {
        BOOL v6 = v5 == 0LL;
      }
      else {
        BOOL v6 = 1;
      }
      if (!v6) {
        CFRetain(v5);
      }
      sub_118354((uint64_t **)a1, &v14, (uint64_t)&v14);
      sub_19DFC((uint64_t)&v14);
      std::string::size_type v7 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          unint64_t v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }

      BOOL v10 = (void *)v3[1];
      if (v10)
      {
        do
        {
          BOOL v11 = v10;
          BOOL v10 = (void *)*v10;
        }

        while (v10);
      }

      else
      {
        do
        {
          BOOL v11 = (void *)v3[2];
          BOOL v6 = *v11 == (void)v3;
          uint64_t v3 = v11;
        }

        while (!v6);
      }

      uint64_t v3 = v11;
    }

    while (v11 != v2);
  }

void sub_118138( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }

  sub_1112B0(*v10);
  _Unwind_Resume(a1);
}

uint64_t sub_11819C(uint64_t a1)
{
  return a1;
}

uint64_t *sub_1181CC(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unsigned int v6 = *((_DWORD *)a2 + 8), v6 > a5))
  {
    std::string::size_type v7 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      unint64_t v9 = a2;
LABEL_17:
      if (v7)
      {
        *a3 = v9;
        return v9 + 1;
      }

      else
      {
        *a3 = a2;
        return a2;
      }
    }

    if (v7)
    {
      BOOL v8 = (uint64_t *)*a2;
      do
      {
        unint64_t v9 = v8;
        BOOL v8 = (uint64_t *)v8[1];
      }

      while (v8);
    }

    else
    {
      uint64_t v12 = a2;
      do
      {
        unint64_t v9 = (uint64_t *)v12[2];
        BOOL v13 = *v9 == (void)v12;
        uint64_t v12 = v9;
      }

      while (v13);
    }

    if (*((_DWORD *)v9 + 8) < a5) {
      goto LABEL_17;
    }
    uint64_t v14 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v15 = (uint64_t *)v14;
          unsigned int v16 = *(_DWORD *)(v14 + 32);
          if (v16 <= a5) {
            break;
          }
          uint64_t v14 = *v15;
          uint64_t v5 = v15;
          if (!*v15) {
            goto LABEL_43;
          }
        }

        if (v16 >= a5) {
          break;
        }
        uint64_t v5 = v15 + 1;
        uint64_t v14 = v15[1];
      }

      while (v14);
      goto LABEL_43;
    }

void sub_118354(uint64_t **a1, CFStringRef *a2, uint64_t a3)
{
  uint64_t v5 = sub_118418((uint64_t)a1, &v13, a2);
  if (!*v5)
  {
    unsigned int v6 = (uint64_t **)v5;
    std::string::size_type v7 = operator new(0x30uLL);
    v11[0] = v7;
    v11[1] = a1 + 1;
    char v12 = 0;
    BOOL v8 = *(const void **)a3;
    v7[4] = *(void *)a3;
    int v9 = *(unsigned __int8 *)(a3 + 8);
    *((_BYTE *)v7 + 40) = v9;
    if (v9) {
      BOOL v10 = v8 == 0LL;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10) {
      CFRetain(v8);
    }
    char v12 = 1;
    sub_32C38(a1, v13, v6, v7);
    v11[0] = 0LL;
    sub_1184AC((uint64_t)v11);
  }

void sub_118404( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_118418(uint64_t a1, void *a2, CFStringRef *a3)
{
  uint64_t v5 = (uint64_t *)(a1 + 8);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        std::string::size_type v7 = v4;
        if (CFStringCompare(*a3, (CFStringRef)v4[4], 0LL) != kCFCompareLessThan) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      if (CFStringCompare((CFStringRef)v7[4], *a3, 0LL) != kCFCompareLessThan) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = (uint64_t *)v7[1];
    }

    while (v4);
  }

  else
  {
    std::string::size_type v7 = (uint64_t *)(a1 + 8);
  }

void sub_1184AC(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_19DFC((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }

void sub_1184F0(uint64_t a1)
{
  BOOL v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_118540(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }

  sub_32C8C(*(void **)(a1 + 72));
}

BOOL sub_118570(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    unsigned int v6 = v5;
    if (v5)
    {
      uint64_t v7 = *a1;
      p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
      do
        unint64_t v9 = __ldxr(p_shared_weak_owners);
      while (__stxr(v9 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        unint64_t v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v6);
      }
    }

    else
    {
      uint64_t v7 = 0LL;
    }
  }

  else
  {
    uint64_t v7 = 0LL;
    unsigned int v6 = 0LL;
  }

  char v12 = (std::__shared_weak_count *)a2[1];
  if (!v12)
  {
    uint64_t v15 = 0LL;
    uint64_t v14 = 0LL;
    goto LABEL_21;
  }

  uint64_t v13 = std::__shared_weak_count::lock(v12);
  uint64_t v14 = v13;
  if (!v13)
  {
    uint64_t v15 = 0LL;
    if (!v6) {
      goto LABEL_28;
    }
LABEL_22:
    char v20 = std::__shared_weak_count::lock(v6);
    if (v20) {
      uint64_t v21 = v7;
    }
    else {
      uint64_t v21 = 0LL;
    }
    if (!v14) {
      goto LABEL_34;
    }
    goto LABEL_29;
  }

  uint64_t v15 = *a2;
  unsigned int v16 = (unint64_t *)&v13->__shared_weak_owners_;
  do
    unint64_t v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  uint64_t v18 = (unint64_t *)&v13->__shared_owners_;
  do
    unint64_t v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
  {
LABEL_21:
    if (!v6) {
      goto LABEL_28;
    }
    goto LABEL_22;
  }

  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v14);
  if (v6) {
    goto LABEL_22;
  }
LABEL_28:
  uint64_t v21 = 0LL;
  char v20 = 0LL;
  if (!v14)
  {
LABEL_34:
    BOOL v24 = v21 == 0;
    goto LABEL_35;
  }

uint64_t sub_118780(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)
    || *(void *)(a1 + 24) != *(void *)(a2 + 24))
  {
    return 0LL;
  }

  uint64_t v4 = a1 + 8;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 == a1 + 8)
  {
LABEL_9:
    uint64_t result = sub_11A788(a1 + 32, (void *)(a2 + 32));
    if (!(_DWORD)result) {
      return result;
    }
    if (*(_DWORD *)(a1 + 80) == *(_DWORD *)(a2 + 80))
    {
      uint64_t result = sub_11A8D4((unsigned __int8 *)(a1 + 88), (unsigned __int8 *)(a2 + 88));
      if ((_DWORD)result) {
        return *(unsigned __int8 *)(a1 + 124) == *(unsigned __int8 *)(a2 + 124);
      }
      return result;
    }

    return 0LL;
  }

  uint64_t v6 = a2 + 8;
  while (1)
  {
    uint64_t v6 = *(void *)(v6 + 8);
    uint64_t result = sub_11A314((unsigned __int8 *)(v5 + 16), (unsigned __int8 *)(v6 + 16));
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t v5 = *(void *)(v5 + 8);
    if (v5 == v4) {
      goto LABEL_9;
    }
  }

uint64_t sub_11886C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1188BC(uint64_t a1, void *a2, void *a3, uint64_t *a4)
{
  uint64_t v7 = sub_138E8(8);
  if ((*(_BYTE *)(v7 + 8) & 1) != 0)
  {
    BOOL v8 = *(os_log_s **)v7;
    if (*(void *)v7)
    {
      if (os_log_type_enabled(*(os_log_t *)v7, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v9 = a1 > 4 ? "????" : off_46F498[a1];
        sub_7D084(__p, v9);
        BOOL v10 = (SBYTE7(v124) & 0x80u) == 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "RoutingManager.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3096;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v10;
        _os_log_impl(&dword_0, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Current reconfiguration context: %s.", buf, 0x1Cu);
        if (SBYTE7(v124) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  uint64_t v11 = sub_138E8(8);
  if ((*(_BYTE *)(v11 + 8) & 1) != 0)
  {
    char v12 = *(os_log_s **)v11;
    if (*(void *)v11)
    {
      if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
      {
        sub_2DA930((std::string *)__p, a2);
        uint64_t v13 = (SBYTE7(v124) & 0x80u) == 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "RoutingManager.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3098;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v13;
        _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - Updating reconfiguration context for sources: %s.",  buf,  0x1Cu);
        if (SBYTE7(v124) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  uint64_t v14 = sub_138E8(8);
  if ((*(_BYTE *)(v14 + 8) & 1) != 0)
  {
    uint64_t v15 = *(os_log_s **)v14;
    if (*(void *)v14)
    {
      if (os_log_type_enabled(*(os_log_t *)v14, OS_LOG_TYPE_DEBUG))
      {
        sub_2DA930((std::string *)__p, a2 + 3);
        unsigned int v16 = (SBYTE7(v124) & 0x80u) == 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "RoutingManager.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3100;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v16;
        _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - Updating reconfiguration context for destinations: %s.",  buf,  0x1Cu);
        if (SBYTE7(v124) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  __int128 v124 = 0u;
  __int128 v125 = 0u;
  *(_OWORD *)std::string __p = 0u;
  uint64_t v17 = *a4;
  uint64_t v118 = a4[1];
  if (*a4 != v118)
  {
    uint64_t v116 = a3;
    unsigned int v117 = a1;
    do
    {
      int v18 = *(_DWORD *)(v17 + 12);
      BOOL v19 = v18 == 1986556788 || v18 == 1987208039;
      int v21 = v19 || v18 == 1987211117;
      sub_DCF84((uint64_t *)buf, *(void *)v17, v21);
      BOOL v22 = operator new(0x30uLL);
      *BOOL v22 = a2;
      v22[1] = buf;
      v22[2] = __p;
      uint64_t v23 = v17 + 208;
      BOOL v24 = v22;
      v22[3] = a2 + 3;
      v22[4] = &buf[24];
      v22[5] = (char *)&v124 + 8;
      do
      {
        unint64_t v26 = (void *)*v24;
        uint64_t v25 = (void *)v24[1];
        uint64_t v134 = 0LL;
        uint64_t v135 = 0LL;
        char v133 = &v134;
        BOOL v29 = (void *)*v26;
        unint64_t v28 = v26 + 1;
        uint64_t v27 = v29;
        char v32 = (void *)*v25;
        uint64_t v30 = v25 + 1;
        uint64_t v31 = v32;
        if (v27 != v28 && v31 != v30)
        {
          uint64_t v34 = (uint64_t *)&v134;
          do
          {
            unint64_t v35 = v27[4];
            unint64_t v36 = v31[4];
            if (v35 >= v36)
            {
              if (v36 >= v35)
              {
                uint64_t v39 = sub_DD32C((uint64_t **)&v133, v34, v35, v27[4]);
                uint64_t v40 = (uint64_t *)v39[1];
                if (v40)
                {
                  do
                  {
                    uint64_t v34 = v40;
                    uint64_t v40 = (uint64_t *)*v40;
                  }

                  while (v40);
                }

                else
                {
                  do
                  {
                    uint64_t v34 = (uint64_t *)v39[2];
                    BOOL v19 = *v34 == (void)v39;
                    uint64_t v39 = v34;
                  }

                  while (!v19);
                }

                int v41 = (void *)v27[1];
                if (v41)
                {
                  do
                  {
                    uint64_t v27 = v41;
                    int v41 = (void *)*v41;
                  }

                  while (v41);
                }

                else
                {
                  do
                  {
                    __int16 v42 = v27;
                    uint64_t v27 = (void *)v27[2];
                  }

                  while ((void *)*v27 != v42);
                }
              }

              int v43 = (void *)v31[1];
              if (v43)
              {
                do
                {
                  uint64_t v31 = v43;
                  int v43 = (void *)*v43;
                }

                while (v43);
              }

              else
              {
                do
                {
                  __int16 v44 = v31;
                  uint64_t v31 = (void *)v31[2];
                }

                while ((void *)*v31 != v44);
              }
            }

            else
            {
              uint64_t v37 = (void *)v27[1];
              if (v37)
              {
                do
                {
                  uint64_t v27 = v37;
                  uint64_t v37 = (void *)*v37;
                }

                while (v37);
              }

              else
              {
                do
                {
                  uint64_t v38 = v27;
                  uint64_t v27 = (void *)v27[2];
                }

                while ((void *)*v27 != v38);
              }
            }
          }

          while (v27 != v28 && v31 != v30);
          if (v135)
          {
            if (!*(_BYTE *)(v17 + 212))
            {
              uint64_t v110 = (os_log_t *)sub_138E8(13);
              uint64_t v111 = *v110;
              if (*v110 && os_log_type_enabled(*v110, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)uint64_t v140 = 136315394;
                *(void *)&v140[4] = "RoutingManager.cpp";
                *(_WORD *)&v140[12] = 1024;
                *(_DWORD *)&v140[14] = 3121;
                _os_log_impl( &dword_0,  v111,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  v140,  0x12u);
              }

              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(exception, "Precondition failure.");
            }

            uint64_t v45 = sub_138E8(8);
            if ((*(_BYTE *)(v45 + 8) & 1) != 0)
            {
              uint64_t v46 = *(os_log_s **)v45;
              if (*(void *)v45)
              {
                if (os_log_type_enabled(*(os_log_t *)v45, OS_LOG_TYPE_DEBUG))
                {
                  sub_2DA930(&v132, &v133);
                  uint64_t v47 = &v132;
                  if ((v132.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                    uint64_t v47 = (std::string *)v132.__r_.__value_.__r.__words[0];
                  }
                  *(_DWORD *)uint64_t v140 = 136315650;
                  *(void *)&v140[4] = "RoutingManager.cpp";
                  *(_WORD *)&v140[12] = 1024;
                  *(_DWORD *)&v140[14] = 3124;
                  *(_WORD *)&v140[18] = 2080;
                  *(void *)&v140[20] = v47;
                  _os_log_impl( &dword_0,  v46,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - Common Physical Devices: %s.",  v140,  0x1Cu);
                }
              }
            }

            char v48 = (void **)v24[2];
            uint64_t v49 = *(void *)v17;
            char v51 = (uint64_t *)v48[1];
            unint64_t v50 = (unint64_t)v48[2];
            if ((unint64_t)v51 >= v50)
            {
              uint64_t v53 = ((char *)v51 - (_BYTE *)*v48) >> 4;
              unint64_t v54 = v53 + 1;
              uint64_t v55 = v50 - (void)*v48;
              if (v55 >> 3 > v54) {
                unint64_t v54 = v55 >> 3;
              }
              else {
                unint64_t v56 = v54;
              }
              if (v56 >> 60) {
                sub_7A8C4();
              }
              uint64_t v57 = (char *)operator new(16 * v56);
              uint64_t v58 = (uint64_t *)&v57[16 * v53];
              *uint64_t v58 = v49;
              v58[1] = v23;
              uint64_t v60 = (char *)*v48;
              char v59 = (char *)v48[1];
              uint64_t v61 = v58;
              if (v59 != *v48)
              {
                do
                {
                  *((_OWORD *)v61 - 1) = *((_OWORD *)v59 - 1);
                  v61 -= 2;
                  v59 -= 16;
                }

                while (v59 != v60);
                char v59 = (char *)*v48;
              }

              uint64_t v62 = &v57[16 * v56];
              uint64_t v52 = v58 + 2;
              *char v48 = v61;
              v48[1] = v58 + 2;
              v48[2] = v62;
              if (v59) {
                operator delete(v59);
              }
            }

            else
            {
              *char v51 = v49;
              v51[1] = v23;
              uint64_t v52 = v51 + 2;
            }

            v48[1] = v52;
          }
        }

        sub_32C8C(v134);
        v24 += 3;
      }

      while (v24 != v22 + 6);
      operator delete(v22);
      sub_32C8C(v145);
      sub_32C8C(*(void **)&buf[8]);
      v17 += 216LL;
    }

    while (v17 != v118);
    a1 = v117;
    a3 = v116;
    if (__p[0] != __p[1])
    {
      uint64_t v63 = sub_138E8(8);
      if ((*(_BYTE *)(v63 + 8) & 1) != 0)
      {
        v64 = *(os_log_s **)v63;
        if (*(void *)v63)
        {
          if (os_log_type_enabled(*(os_log_t *)v63, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&buf[4] = "RoutingManager.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3131;
            _os_log_impl( &dword_0,  v64,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - Route shares source hardware with existing route.",  buf,  0x12u);
          }
        }
      }
    }
  }

  if (*((void *)&v124 + 1) != (void)v125)
  {
    uint64_t v65 = sub_138E8(8);
    if ((*(_BYTE *)(v65 + 8) & 1) != 0)
    {
      uint64_t v66 = *(os_log_s **)v65;
      if (*(void *)v65)
      {
        if (os_log_type_enabled(*(os_log_t *)v65, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&buf[4] = "RoutingManager.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3133;
          _os_log_impl( &dword_0,  v66,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - Route shares destination hardware with existing route.",  buf,  0x12u);
        }
      }
    }
  }

  if ((a1 - 5) >= 0xFFFFFFFE)
  {
    for (uint64_t i = (_DWORD **)__p[0]; i != __p[1]; i += 2)
    {
    }

    for (uint64_t j = *((void *)&v124 + 1); j != (void)v125; j += 16LL)
    {
    }

    goto LABEL_175;
  }

LABEL_104:
  if (!sub_7051C())
  {
LABEL_171:
    sub_119EDC((unsigned int **)__p[0], (unsigned int **)__p[1]);
    else {
      a1 = a1;
    }
    sub_119EDC(*((unsigned int ***)&v124 + 1), (unsigned int **)v125);
    goto LABEL_175;
  }

  sub_85A90(&v120, a3);
  if (!v122)
  {
    v113 = (os_log_t *)sub_138E8(13);
    v114 = *v113;
    if (*v113 && os_log_type_enabled(*v113, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "RoutingManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5542;
      _os_log_impl(&dword_0, v114, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    uint64_t v115 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v115, "Precondition failure.");
  }

  char v67 = (uint64_t *)__p[0];
  uint64_t v68 = (uint64_t *)__p[1];
  uint64_t v129 = (uint64_t *)&v129;
  char v130 = (uint64_t *)&v129;
  std::string::size_type v131 = 0LL;
  if (__p[0] == __p[1])
  {
    v132.__r_.__value_.__r.__words[0] = (std::string::size_type)&v132;
    v132.__r_.__value_.__l.__size_ = (std::string::size_type)&v132;
    p_cap = &v132.__r_.__value_.__l.__cap_;
    goto LABEL_137;
  }

  do
  {
    uint64_t v69 = *v67;
    memset(buf, 0, 24);
    strcpy((char *)&buf[24], "cwdv");
    LOBYTE(v145) = 0;
    int v146 = 3;
    v148[0] = 0LL;
    v148[1] = 0LL;
    uint64_t v147 = v148;
    int v149 = 44739242;
    CFTypeRef v150 = 0LL;
    sub_7267C((unint64_t *)v140, v69, (uint64_t)buf);
    if (v150) {
      CFRelease(v150);
    }
    sub_32C8C(v148[0]);
    if (*(void *)buf)
    {
      *(void *)&buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }

    sub_85A90((uint64_t *)buf, &v129);
    for (uint64_t k = *(void *)&v140[8]; (_BYTE *)k != v140; uint64_t k = *(void *)(k + 8))
    {
      sub_B8F68((uint64_t *)&v133, (uint64_t *)(k + 16), "", 5549);
      char v71 = (std::__shared_weak_count *)v134;
      int v72 = *((_DWORD *)v133 + 36);
      if (v134)
      {
        char v73 = (unint64_t *)(v134 + 1);
        do
          unint64_t v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }

      if (v72 != 1885433888) {
        sub_85C34((uint64_t *)buf, *(void *)(k + 16), *(void *)(k + 24));
      }
    }

    char v133 = (uint64_t ***)&v133;
    uint64_t v134 = (uint64_t **)&v133;
    uint64_t v135 = 0LL;
    uint64_t v75 = *(void *)&buf[16];
    if (*(void *)&buf[16])
    {
      uint64_t v77 = *(void *)buf;
      uint64_t v76 = *(uint64_t ***)&buf[8];
      uint64_t v78 = **(void **)&buf[8];
      *(void *)(v78 + 8) = *(void *)(*(void *)buf + 8LL);
      **(void **)(v77 + 8) = v78;
      uint64_t v79 = (uint64_t *)v133;
      v133[1] = v76;
      *uint64_t v76 = v79;
      *(void *)(v77 + 8) = &v133;
      char v133 = (uint64_t ***)v77;
      uint64_t v135 = v75;
      *(void *)&_DWORD buf[16] = 0LL;
    }

    sub_85B80((uint64_t *)buf);
    sub_85B80((uint64_t *)v140);
    sub_85B80((uint64_t *)&v129);
    uint64_t v80 = v135;
    if (v135)
    {
      uint64_t v82 = (uint64_t *)v133;
      uint64_t v81 = v134;
      uint64_t v83 = *v134;
      v83[1] = (uint64_t)v133[1];
      *(void *)v82[1] = v83;
      uint64_t v84 = (uint64_t)v129;
      v129[1] = (uint64_t)v81;
      *uint64_t v81 = v84;
      v82[1] = (uint64_t)&v129;
      uint64_t v129 = v82;
      v131 += v80;
      uint64_t v135 = 0LL;
    }

    sub_85B80((uint64_t *)&v133);
    v67 += 2;
  }

  while (v67 != v68);
  std::string::size_type v85 = v131;
  v132.__r_.__value_.__r.__words[0] = (std::string::size_type)&v132;
  v132.__r_.__value_.__l.__size_ = (std::string::size_type)&v132;
  v132.__r_.__value_.__l.__cap_ = 0LL;
  a1 = a1;
  if (v131)
  {
    std::string::size_type v87 = (std::string::size_type)v129;
    uint64_t v86 = v130;
    uint64_t v88 = *v130;
    *(void *)(v88 + 8) = v129[1];
    **(void **)(v87 + 8) = v88;
    std::string::size_type v89 = v132.__r_.__value_.__r.__words[0];
    *(void *)(v132.__r_.__value_.__r.__words[0] + 8) = v86;
    *uint64_t v86 = v89;
    *(void *)(v87 + 8) = &v132;
    v132.__r_.__value_.__r.__words[0] = v87;
    v132.__r_.__value_.__l.__cap_ = v85;
    p_cap = &v131;
LABEL_137:
    std::string::size_type *p_cap = 0LL;
  }

  sub_85B80((uint64_t *)&v129);
  sub_1174D0( (unint64_t *)v132.__r_.__value_.__l.__size_,  (unint64_t *)&v132,  v132.__r_.__value_.__l.__cap_);
  sub_1174D0(v121, (unint64_t *)&v120, v122);
  *(void *)uint64_t v140 = v140;
  *(void *)&v140[8] = v140;
  *(void *)&v140[16] = 0LL;
  uint64_t v93 = (uint64_t *)v121;
  int size = (std::string *)v132.__r_.__value_.__l.__size_;
  if (v121 == (unint64_t *)&v120 || (std::string *)v132.__r_.__value_.__l.__size_ == &v132)
  {
    uint64_t v134 = 0LL;
    uint64_t v135 = 0LL;
    char v133 = &v134;
    uint64_t v127 = (uint64_t **)&v133;
    m = &v134;
  }

  else
  {
    uint64_t v95 = (uint64_t *)v140;
    do
    {
      if (sub_D7370((unint64_t *)v93 + 2, &size->__r_.__value_.__l.__cap_))
      {
        uint64_t v93 = (uint64_t *)v93[1];
      }

      else
      {
        if (!sub_D7370(&size->__r_.__value_.__l.__cap_, (unint64_t *)v93 + 2))
        {
          uint64_t v95 = (uint64_t *)sub_11A2A0((uint64_t)v140, v95, v93[2], v93[3])[1];
          uint64_t v93 = (uint64_t *)v93[1];
        }

        int size = (std::string *)size->__r_.__value_.__l.__size_;
      }
    }

    while (v93 != &v120 && size != &v132);
    uint64_t v96 = *(void *)&v140[8];
    uint64_t v134 = 0LL;
    uint64_t v135 = 0LL;
    char v133 = &v134;
    uint64_t v127 = (uint64_t **)&v133;
    for (m = &v134; (_BYTE *)v96 != v140; uint64_t v96 = *(void *)(v96 + 8))
    {
      sub_B8F68((uint64_t *)buf, (uint64_t *)(v96 + 16), "", 5558);
      v97 = *(std::__shared_weak_count **)&buf[8];
      int v98 = *(_DWORD *)(*(void *)buf + 144LL);
      if (*(void *)&buf[8])
      {
        uint64_t v99 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v100 = __ldaxr(v99);
        while (__stlxr(v100 - 1, v99));
        if (!v100)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }

      *(_DWORD *)buf = v98;
      sub_FFE48(&v127, (unsigned int *)buf);
    }
  }

  if (sub_1CC7B8())
  {
    qmemcpy(buf, "ibmpptspkpsp", 12);
    sub_7A22C((uint64_t)&v127, (unsigned int *)buf, 3LL);
  }

  else
  {
    uint64_t v141 = 0x70737470706D6269LL;
    sub_7A22C((uint64_t)&v127, (unsigned int *)&v141, 2LL);
  }

  char v142 = 0LL;
  uint64_t v143 = 0LL;
  uint64_t v141 = (uint64_t)&v142;
  v138 = &v134;
  v139 = (uint64_t *)v133;
  p_m = &m;
  char v137 = v127;
  v126.__r_.__value_.__r.__words[0] = (std::string::size_type)&v141;
  v126.__r_.__value_.__l.__size_ = (std::string::size_type)&v142;
  sub_11A048((uint64_t)buf, (uint64_t)&v139, &v138, (uint64_t)&v137, &p_m, (__n128 *)&v126);
  if (v143)
  {
    uint64_t v101 = (os_log_t *)sub_138E8(8);
    char v102 = *v101;
    if (*v101 && os_log_type_enabled(*v101, OS_LOG_TYPE_DEFAULT))
    {
      sub_110E40(&v126, (void *)v141, &v142);
      uint64_t v103 = (v126.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v126 : (std::string *)v126.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "RoutingManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5569;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = v103;
      _os_log_impl( &dword_0,  v102,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Cannot persist VAD; NonShareable ports in route : %s",
        buf,
        0x1Cu);
    }

    BOOL v104 = v143 == 0;
  }

  else
  {
    BOOL v104 = 1;
  }

  sub_32C8C(v142);
  sub_32C8C(m);
  sub_32C8C(v134);
  sub_85B80((uint64_t *)v140);
  sub_85B80((uint64_t *)&v132);
  sub_85B80(&v120);
  if (!v104) {
    goto LABEL_171;
  }
LABEL_175:
  uint64_t v105 = sub_138E8(8);
  if ((*(_BYTE *)(v105 + 8) & 1) != 0)
  {
    char v106 = *(os_log_s **)v105;
    if (*(void *)v105)
    {
      if (os_log_type_enabled(*(os_log_t *)v105, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v107 = a1 > 4 ? "????" : off_46F498[a1];
        sub_7D084(v140, v107);
        char v108 = v140[23] >= 0 ? v140 : *(_BYTE **)v140;
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "RoutingManager.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3175;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v108;
        _os_log_impl(&dword_0, v106, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Final Reconfiguration Context %s.", buf, 0x1Cu);
        if ((v140[23] & 0x80000000) != 0) {
          operator delete(*(void **)v140);
        }
      }
    }
  }

  if (*((void *)&v124 + 1))
  {
    *(void *)&__int128 v125 = *((void *)&v124 + 1);
    operator delete(*((void **)&v124 + 1));
  }

  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  return a1;
}

    os_log_type_t v166 = 0LL;
    v194.__r_.__value_.__r.__words[0] = (std::string::size_type)v166;
    LOWORD(v194.__r_.__value_.__r.__words[1]) = 0;
    sub_1541E8((uint64_t)v189, (CFArrayRef *)&v194);
    uint64_t v86 = (void *)sub_13818((uint64_t)&v194);
    sub_7D084(v86, "  - Output Ports: { ");
    std::string::size_type v87 = *(_DWORD **)v189;
    if (*(void *)&v189[8] != *(void *)v189)
    {
      uint64_t v88 = 0LL;
      std::string::size_type v89 = (uint64_t)(*(void *)&v189[8] - *(void *)v189) >> 2;
      for (uint64_t j = 1; ; ++j)
      {
        uint64_t v175 = 0LL;
        v165 = 4;
        char v174 = 0x676C6F6270747970LL;
        AudioObjectGetPropertyData( v87[v88],  (const AudioObjectPropertyAddress *)&v174,  0,  0LL,  &v165,  (char *)&v175 + 4);
        std::to_string(&v170, v87[v88]);
        uint64_t v91 = std::string::insert(&v170, 0LL, "(", 1uLL);
        char v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
        v171.__r_.__value_.__l.__cap_ = v91->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v92;
        v91->__r_.__value_.__l.__size_ = 0LL;
        v91->__r_.__value_.__l.__cap_ = 0LL;
        v91->__r_.__value_.__r.__words[0] = 0LL;
        uint64_t v93 = std::string::append(&v171, ":", 1uLL);
        uint64_t v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
        v172.__r_.__value_.__l.__cap_ = v93->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v172.__r_.__value_.__l.__data_ = v94;
        v93->__r_.__value_.__l.__size_ = 0LL;
        v93->__r_.__value_.__l.__cap_ = 0LL;
        v93->__r_.__value_.__r.__words[0] = 0LL;
        sub_2CA1C(&v167, HIDWORD(v175));
        if ((v169 & 0x80u) == 0) {
          uint64_t v95 = (const std::string::value_type *)&v167;
        }
        else {
          uint64_t v95 = v167;
        }
        if ((v169 & 0x80u) == 0) {
          uint64_t v96 = v169;
        }
        else {
          uint64_t v96 = v168;
        }
        v97 = std::string::append(&v172, v95, v96);
        int v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
        v173.__r_.__value_.__l.__cap_ = v97->__r_.__value_.__l.__cap_;
        *(_OWORD *)&v173.__r_.__value_.__l.__data_ = v98;
        v97->__r_.__value_.__l.__size_ = 0LL;
        v97->__r_.__value_.__l.__cap_ = 0LL;
        v97->__r_.__value_.__r.__words[0] = 0LL;
        uint64_t v99 = std::string::append(&v173, ")", 1uLL);
        unint64_t v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
        cap = v99->__r_.__value_.__l.__cap_;
        inAddress = v100;
        v99->__r_.__value_.__l.__size_ = 0LL;
        v99->__r_.__value_.__l.__cap_ = 0LL;
        v99->__r_.__value_.__r.__words[0] = 0LL;
        if (cap >= 0) {
          uint64_t v101 = (const std::string::value_type *)&inAddress;
        }
        else {
          uint64_t v101 = (const std::string::value_type *)inAddress;
        }
        if (cap >= 0) {
          char v102 = HIBYTE(cap);
        }
        else {
          char v102 = *((void *)&inAddress + 1);
        }
        std::string::append(&v194, v101, v102);
        if (SHIBYTE(cap) < 0) {
          operator delete((void *)inAddress);
        }
        if (v89 <= j) {
          break;
        }
        std::string::append(&v194, ", ", 2uLL);
        uint64_t v88 = j;
      }
    }

    std::string::append(&v194, " }", 2uLL);
    uint64_t v103 = sub_153968((uint64_t)&v194);
    BOOL v104 = v164;
    v103[1] = v164;
    uint64_t v105 = *v104;
    *uint64_t v103 = *v104;
    *(void *)(v105 + 8) = v103;
    *BOOL v104 = (uint64_t)v103;
    ++v104[2];
    if (((char)v194.__r_.__value_.__s.__size_ & 0x80000000) == 0)
    {
      if (!v87) {
        goto LABEL_136;
      }
LABEL_135:
      operator delete(v87);
      goto LABEL_136;
    }

    operator delete(v194.__r_.__value_.__l.__data_);
    if (v87) {
      goto LABEL_135;
    }
LABEL_136:
    if (v182)
    {
      char v161 = v9;
      char v106 = 0;
      uint64_t v107 = 0LL;
      LOWORD(v172.__r_.__value_.__l.__data_) = 256;
      do
      {
        char v108 = v106;
        uint64_t v109 = v172.__r_.__value_.__s.__data_[v107];
        if (v172.__r_.__value_.__s.__data_[v107]) {
          uint64_t v110 = 1869968496;
        }
        else {
          uint64_t v110 = 1768845428;
        }
        LODWORD(inAddress) = 1937009955;
        *(void *)((char *)&inAddress + 4) = v110;
        LODWORD(v173.__r_.__value_.__l.__data_) = 0;
        PropertyDataSize = AudioObjectGetPropertyDataSize( v182,  (const AudioObjectPropertyAddress *)&inAddress,  0,  0LL,  (UInt32 *)&v173);
        if (LODWORD(v173.__r_.__value_.__l.__data_)) {
          char v112 = (_DWORD)PropertyDataSize == 0;
        }
        else {
          char v112 = 0;
        }
        if (v112)
        {
          v113 = 4 * ((unint64_t)LODWORD(v173.__r_.__value_.__l.__data_) >> 2);
          __chkstk_darwin(PropertyDataSize);
          v114 = (char *)&v160 - ((v113 + 15) & 0x1FFFFFFF0LL);
          if (AudioObjectGetPropertyData( v182,  (const AudioObjectPropertyAddress *)&inAddress,  0,  0LL,  (UInt32 *)&v173,  v114))
          {
            uint64_t v115 = sub_138E8(2);
            uint64_t v116 = sub_138E8(1);
            unsigned int v117 = 0;
            uint64_t v118 = 0LL;
            *(void *)v189 = 0x100000002LL;
            uint64_t v119 = *(void *)(v115 + 8);
            while (1)
            {
              uint64_t v120 = *(int *)&v189[4 * v118];
              char v121 = v117;
              if (((v119 & v120) != 0) != ((*(void *)(v116 + 8) & v120) != 0)) {
                break;
              }
              unsigned int v117 = 1;
              uint64_t v118 = 1LL;
              if ((v121 & 1) != 0) {
                goto LABEL_176;
              }
            }

            if ((v119 & v120) == 0) {
              uint64_t v115 = v116;
            }
LABEL_176:
            uint64_t v134 = sub_138E8(4);
            uint64_t v135 = 0;
            uint64_t v136 = 0LL;
            *(void *)v189 = 0x100000002LL;
            char v137 = *(void *)(v115 + 8);
            while (1)
            {
              v138 = *(int *)&v189[4 * v136];
              v139 = v135;
              if (((v137 & v138) != 0) != ((*(void *)(v134 + 8) & v138) != 0)) {
                break;
              }
              uint64_t v135 = 1;
              uint64_t v136 = 1LL;
              if ((v139 & 1) != 0) {
                goto LABEL_182;
              }
            }

            if ((v137 & v138) == 0) {
              uint64_t v115 = v134;
            }
LABEL_182:
            uint64_t v140 = *(id *)v115;
            uint64_t v141 = v140;
            if (v140)
            {
              char v142 = (os_log_s *)v140;
              if (os_log_type_enabled(v142, OS_LOG_TYPE_ERROR))
              {
                sub_613AC((uint64_t)&v194, (unsigned int *)&inAddress);
                uint64_t v143 = (v194.__r_.__value_.__s.__size_ & 0x80u) == 0
                     ? &v194
                     : (std::string *)v194.__r_.__value_.__r.__words[0];
                *(_DWORD *)v189 = v163.n128_u32[0];
                *(void *)&v189[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&v189[12] = 1024;
                *(_DWORD *)&v189[14] = 665;
                v190 = 2080;
                *(void *)v191 = v143;
                _os_log_impl( &dword_0,  v142,  OS_LOG_TYPE_ERROR,  "%25s:%-5d AudioObjectGetPropertyData(%s) failed.",  v189,  0x1Cu);
              }
            }

            uint64_t v144 = sub_138E8(2);
            uint64_t v145 = sub_138E8(1);
            int v146 = 0;
            uint64_t v147 = 0LL;
            *(void *)v189 = 0x100000002LL;
            char v148 = *(void *)(v144 + 8);
            while (1)
            {
              int v149 = *(int *)&v189[4 * v147];
              CFTypeRef v150 = v146;
              if (((v148 & v149) != 0) != ((*(void *)(v145 + 8) & v149) != 0)) {
                break;
              }
              int v146 = 1;
              uint64_t v147 = 1LL;
              if ((v150 & 1) != 0) {
                goto LABEL_196;
              }
            }

            if ((v148 & v149) == 0) {
              uint64_t v144 = v145;
            }
LABEL_196:
            uint64_t v151 = sub_138E8(4);
            char v152 = 0;
            v153 = 0LL;
            *(void *)v189 = 0x100000002LL;
            v154 = *(void *)(v144 + 8);
            while (1)
            {
              uint64_t v155 = *(int *)&v189[4 * v153];
              uint64_t v156 = v152;
              if (((v154 & v155) != 0) != ((*(void *)(v151 + 8) & v155) != 0)) {
                break;
              }
              char v152 = 1;
              v153 = 1LL;
              if ((v156 & 1) != 0) {
                goto LABEL_202;
              }
            }

            if ((v154 & v155) == 0) {
              uint64_t v144 = v151;
            }
LABEL_202:
            char v157 = *(id *)v144;
            uint64_t v158 = v157;
            if (v157)
            {
              uint64_t v159 = (os_log_s *)v157;
              if (os_log_type_enabled(v159, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v189 = v162.n128_u32[0];
                *(void *)&v189[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&v189[12] = 1024;
                *(_DWORD *)&v189[14] = 667;
                v190 = 1024;
                *(_DWORD *)v191 = v173.__r_.__value_.__l.__data_;
                *(_WORD *)&v191[4] = 2048;
                *(void *)&v191[6] = v113;
                _os_log_impl( &dword_0,  v159,  OS_LOG_TYPE_ERROR,  "%25s:%-5d The HAL returned a size of %u while we expected %lu",  v189,  0x22u);
              }
            }
          }

          else
          {
            data_low = LODWORD(v173.__r_.__value_.__l.__data_);
            v123 = (std::string *)sub_7D084(v189, "  - ");
            if (v109) {
              __int128 v124 = "Output";
            }
            else {
              __int128 v124 = "Input";
            }
            if (v109) {
              __int128 v125 = 6LL;
            }
            else {
              __int128 v125 = 5LL;
            }
            std::string::append(v123, v124, v125);
            std::string::append((std::string *)v189, " Stream IDs: { ", 0xFuLL);
            if (data_low >= 4)
            {
              std::string v126 = 0LL;
              uint64_t v127 = data_low >> 2;
              else {
                uint64_t v128 = v127;
              }
              do
              {
                std::to_string(&v194, *(_DWORD *)&v114[4 * v126]);
                if ((v194.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  uint64_t v129 = &v194;
                }
                else {
                  uint64_t v129 = (std::string *)v194.__r_.__value_.__r.__words[0];
                }
                if ((v194.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  char v130 = v194.__r_.__value_.__s.__size_;
                }
                else {
                  char v130 = v194.__r_.__value_.__l.__size_;
                }
                std::string::append((std::string *)v189, (const std::string::value_type *)v129, v130);
                if (++v126 < v127) {
                  std::string::append((std::string *)v189, ", ", 2uLL);
                }
              }

              while (v128 != v126);
            }

            std::string::append((std::string *)v189, " }", 2uLL);
            std::string::size_type v131 = sub_153968((uint64_t)v189);
            std::string v132 = v164;
            v131[1] = v164;
            char v133 = *v132;
            os_log_s *v131 = *v132;
            *(void *)(v133 + 8) = v131;
            *std::string v132 = (uint64_t)v131;
            ++v132[2];
            if ((v191[3] & 0x80000000) != 0) {
              operator delete(*(void **)v189);
            }
          }
        }

        char v106 = 1;
        uint64_t v107 = 1LL;
      }

      while ((v108 & 1) == 0);
      a2 = v160;
      unint64_t v9 = v161;
    }

    if (v185 < 0) {
      operator delete(v183);
    }
    sub_13850((uint64_t)&v186);
    ++v9;
  }

    sub_7D898((uint64_t)&inClientData);
    std::condition_variable::~condition_variable(&__p);
    std::mutex::~mutex(&v76);
    return v20;
  }

  int v21 = *(id *)sub_138E8(13);
  BOOL v22 = v21;
  if (v21)
  {
    uint64_t v23 = (os_log_s *)v21;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(&v76, v20);
      BOOL v24 = v76.__m_.__opaque[15];
      sig = v76.__m_.__sig;
      inClientData = *(void *)a2;
      uint64_t v58 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)&__p, (unsigned int *)&inClientData);
      unint64_t v26 = &v76;
      if (v24 < 0) {
        unint64_t v26 = (std::mutex *)sig;
      }
      if (__p.__cv_.__opaque[15] >= 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::condition_variable *)__p.__cv_.__sig;
      }
      buf.mSelector = 136316418;
      *(void *)&buf.mScope = "HALPropertySynchronizer.h";
      uint64_t v66 = 1024;
      char v67 = 207;
      uint64_t v68 = 1024;
      *(_DWORD *)uint64_t v69 = v20;
      *(_WORD *)&v69[4] = 2080;
      *(void *)&v69[6] = v26;
      *(_WORD *)&v69[14] = 2080;
      *(void *)&v69[16] = p_p;
      *(_WORD *)&v69[24] = 1024;
      *(_DWORD *)&v69[26] = a1;
      _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) setting property data for property %s on id %u.",  (uint8_t *)&buf,  0x32u);
      if (__p.__cv_.__opaque[15] < 0) {
        operator delete((void *)__p.__cv_.__sig);
      }
      if (v76.__m_.__opaque[15] < 0) {
        operator delete((void *)v76.__m_.__sig);
      }
    }
  }

  return v20;
}

void sub_119858( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, void *a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, void *a43)
{
}

uint64_t sub_1199C0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  __int128 v4 = *(_OWORD *)(a2 + 8);
  __int128 v5 = *(_OWORD *)(a2 + 24);
  __int128 v6 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  if (v7)
  {
    BOOL v8 = (unint64_t *)(v7 + 16);
    do
      unint64_t v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }

  sub_86054(a1 + 80, (void *)(a2 + 80));
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  __int128 v10 = *(_OWORD *)(a2 + 120);
  __int128 v11 = *(_OWORD *)(a2 + 136);
  __int128 v12 = *(_OWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v12;
  *(_OWORD *)(a1 + 136) = v11;
  *(_OWORD *)(a1 + 120) = v10;
  sub_C590C((_BYTE *)(a1 + 176), (__int128 *)(a2 + 176));
  return a1;
}

void sub_119A6C(_Unwind_Exception *a1)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 72);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(a1);
}

void sub_119A94(uint64_t a1, __int128 *a2)
{
  uint64_t v4 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6 >= v5)
  {
    unint64_t v9 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v6 - *(void *)a1) >> 3);
    if (v9 + 1 > 0x222222222222222LL) {
      sub_7A87C();
    }
    unint64_t v10 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v5 - *(void *)a1) >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x111111111111111LL) {
      unint64_t v12 = 0x222222222222222LL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v18 = v4;
    if (v12) {
      unint64_t v12 = (unint64_t)sub_119B98(v12);
    }
    else {
      uint64_t v13 = 0LL;
    }
    unint64_t v14 = v12;
    uint64_t v15 = v12 + 120 * v9;
    unint64_t v17 = v12 + 120 * v13;
    sub_119C24(v15, a2);
    uint64_t v16 = v15 + 120;
    sub_119C98((__int128 **)a1, &v14);
    uint64_t v8 = *(void *)(a1 + 8);
    sub_119D1C((uint64_t)&v14);
  }

  else
  {
    sub_119C24(v6, a2);
    uint64_t v8 = v7 + 120;
  }

  *(void *)(a1 + 8) = v8;
}

void *sub_119B98(unint64_t a1)
{
  if (a1 >= 0x222222222222223LL) {
    sub_7A8C4();
  }
  return operator new(120 * a1);
}

void *sub_119BDC(unint64_t a1)
{
  if (a1 >= 0x12F684BDA12F685LL) {
    sub_7A8C4();
  }
  return operator new(216 * a1);
}

__n128 sub_119C24(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[1];
  __int128 v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  unint64_t v5 = (void *)a2 + 9;
  uint64_t v6 = *((void *)a2 + 9);
  *(void *)(a1 + 72) = v6;
  uint64_t v7 = a1 + 72;
  uint64_t v8 = *((void *)a2 + 10);
  *(void *)(a1 + 80) = v8;
  if (v8)
  {
    *(void *)(v6 + 16) = v7;
    *((void *)a2 + 8) = v5;
    void *v5 = 0LL;
    *((void *)a2 + 10) = 0LL;
  }

  else
  {
    *(void *)(a1 + 64) = v7;
  }

  *(void *)(a1 + 88) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  *(void *)(a1 + 104) = 0LL;
  __n128 result = *(__n128 *)((char *)a2 + 88);
  *(__n128 *)(a1 + 88) = result;
  *(void *)(a1 + 104) = *((void *)a2 + 13);
  *((void *)a2 + 11) = 0LL;
  *((void *)a2 + 12) = 0LL;
  *((void *)a2 + 13) = 0LL;
  *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 28);
  return result;
}

void sub_119C98(__int128 **a1, void *a2)
{
  unint64_t v5 = *a1;
  __int128 v4 = a1[1];
  uint64_t v6 = (__int128 *)a2[1];
  while (v4 != v5)
  {
    __int128 v4 = (__int128 *)((char *)v4 - 120);
    sub_119C24((uint64_t)v6 - 120, v4);
  }

  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = (__int128 *)a2[2];
  a2[2] = v8;
  unint64_t v9 = a1[2];
  a1[2] = (__int128 *)a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t sub_119D1C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 120;
    sub_118540(i - 120);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *sub_119D68(uint64_t *a1, uint64_t a2)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  sub_DD2A8(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_119DA4(_Unwind_Exception *a1)
{
}

uint64_t *sub_119DB8(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  if (v4 != *result)
  {
    uint64_t v7 = 0LL;
    do
    {
      __n128 result = (uint64_t *)sub_1199C0(v6 + v7 - 216, v4 + v7 - 216);
      *(void *)(v6 + v7 - 8) = *(void *)(v4 + v7 - 8);
      v7 -= 216LL;
    }

    while (v4 + v7 != v5);
    v6 += v7;
  }

  a2[1] = v6;
  uint64_t v8 = *v3;
  uint64_t *v3 = v6;
  a2[1] = v8;
  uint64_t v9 = v3[1];
  v3[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = v3[2];
  v3[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t sub_119E90(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 216;
    sub_1184F0(i - 216);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_119EDC(unsigned int **a1, unsigned int **a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = a1;
    do
    {
      if (*v3[1] - 5 >= 0xFFFFFFFE)
      {
        uint64_t v4 = sub_138E8(8);
        if ((*(_BYTE *)(v4 + 8) & 1) != 0)
        {
          uint64_t v5 = *(os_log_s **)v4;
          if (*(void *)v4)
          {
            if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
            {
              sub_2DA51C(&__p, *v3);
              p_p = &__p;
              if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)buf = 136315650;
              uint64_t v9 = "RoutingManager.cpp";
              __int16 v10 = 1024;
              int v11 = 3162;
              __int16 v12 = 2080;
              uint64_t v13 = p_p;
              _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d - Changing Reconfiguration Context to Change for %s.",  buf,  0x1Cu);
            }
          }
        }

        *v3[1] = 2;
      }

      v3 += 2;
    }

    while (v3 != a2);
  }

__n128 sub_11A048(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, __n128 *a6)
{
  uint64_t v8 = *(void **)a2;
  uint64_t v9 = (void *)*a3;
  if (*(void *)a2 == *a3)
  {
LABEL_38:
    __n128 v30 = *a6;
    goto LABEL_39;
  }

  for (uint64_t i = *(void **)a4; *(void *)a4 != *a5; uint64_t i = *(void **)a4)
  {
    unsigned int v15 = *((_DWORD *)v8 + 7);
    unsigned int v16 = *((_DWORD *)i + 7);
    if (v15 >= v16)
    {
      if (v16 >= v15)
      {
        uint64_t v23 = (void *)v8[1];
        if (v23)
        {
          do
          {
            BOOL v24 = v23;
            uint64_t v23 = (void *)*v23;
          }

          while (v23);
        }

        else
        {
          do
          {
            BOOL v24 = (void *)v8[2];
            BOOL v20 = *v24 == (void)v8;
            uint64_t v8 = v24;
          }

          while (!v20);
        }

        *(void *)a2 = v24;
        uint64_t v25 = *(void **)a4;
        unint64_t v26 = *(void **)(*(void *)a4 + 8LL);
        if (v26)
        {
          do
          {
            BOOL v22 = v26;
            unint64_t v26 = (void *)*v26;
          }

          while (v26);
        }

        else
        {
          do
          {
            BOOL v22 = (void *)v25[2];
            BOOL v20 = *v22 == (void)v25;
            uint64_t v25 = v22;
          }

          while (!v20);
        }
      }

      else
      {
        int v21 = (void *)i[1];
        if (v21)
        {
          do
          {
            BOOL v22 = v21;
            int v21 = (void *)*v21;
          }

          while (v21);
        }

        else
        {
          do
          {
            BOOL v22 = (void *)i[2];
            BOOL v20 = *v22 == (void)i;
            uint64_t i = v22;
          }

          while (!v20);
        }
      }

      *(void *)a4 = v22;
    }

    else
    {
      sub_11A238((uint64_t)a6, (unsigned int *)v8 + 7);
      unint64_t v17 = *(void **)a2;
      uint64_t v18 = *(void **)(*(void *)a2 + 8LL);
      if (v18)
      {
        do
        {
          BOOL v19 = v18;
          uint64_t v18 = (void *)*v18;
        }

        while (v18);
      }

      else
      {
        do
        {
          BOOL v19 = (void *)v17[2];
          BOOL v20 = *v19 == (void)v17;
          unint64_t v17 = v19;
        }

        while (!v20);
      }

      *(void *)a2 = v19;
    }

    uint64_t v8 = *(void **)a2;
    uint64_t v9 = (void *)*a3;
    if (*(void *)a2 == *a3) {
      goto LABEL_38;
    }
  }

  __n128 v30 = *a6;
  if (v8 != v9)
  {
    do
    {
      sub_11A238((uint64_t)&v30, (unsigned int *)v8 + 7);
      uint64_t v27 = (void *)v8[1];
      if (v27)
      {
        do
        {
          unint64_t v28 = v27;
          uint64_t v27 = (void *)*v27;
        }

        while (v27);
      }

      else
      {
        do
        {
          unint64_t v28 = (void *)v8[2];
          BOOL v20 = *v28 == (void)v8;
          uint64_t v8 = v28;
        }

        while (!v20);
      }

      uint64_t v8 = v28;
    }

    while (v28 != v9);
    uint64_t v8 = v9;
  }

uint64_t sub_11A238(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = sub_32A38(*(uint64_t ***)a1, *(uint64_t **)(a1 + 8), *a2, a2);
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      uint64_t v5 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }

    while (v4);
  }

  else
  {
    do
    {
      uint64_t v5 = (uint64_t *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      uint64_t v3 = v5;
    }

    while (!v6);
  }

  *(void *)(a1 + 8) = v5;
  return a1;
}

void *sub_11A2A0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  __n128 result = operator new(0x20uLL);
  result[2] = a3;
  result[3] = a4;
  if (a4)
  {
    uint64_t v9 = (unint64_t *)(a4 + 16);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  uint64_t v11 = *a2;
  *(void *)(v11 + 8) = result;
  void *result = v11;
  *a2 = (uint64_t)result;
  result[1] = a2;
  ++*(void *)(a1 + 16);
  return result;
}

uint64_t sub_11A314(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 == a2) {
    return 1LL;
  }
  if (*a1 != *a2 || *((_DWORD *)a1 + 8) != *((_DWORD *)a2 + 8) || *((_DWORD *)a1 + 9) != *((_DWORD *)a2 + 9)) {
    return 0LL;
  }
  if (a1[60] && a2[60])
  {
    if (*((_DWORD *)a1 + 14) != *((_DWORD *)a2 + 14)) {
      return 0LL;
    }
  }

  else if ((a1[60] != 0) != (a2[60] != 0))
  {
    return 0LL;
  }

  if (*((void *)a1 + 3) != *((void *)a2 + 3)) {
    return 0LL;
  }
  __int128 v2 = (unsigned __int8 *)*((void *)a1 + 1);
  uint64_t v3 = a1 + 16;
  if (v2 != a1 + 16)
  {
    uint64_t v4 = (unsigned __int8 *)*((void *)a2 + 1);
    while (1)
    {
      if (*((_DWORD *)v2 + 8) != *((_DWORD *)v4 + 8)) {
        return 0LL;
      }
      if (v2 != v4) {
        break;
      }
LABEL_77:
      uint64_t v23 = (unsigned __int8 *)*((void *)v2 + 1);
      if (v23)
      {
        do
        {
          BOOL v24 = v23;
          uint64_t v23 = *(unsigned __int8 **)v23;
        }

        while (v23);
      }

      else
      {
        do
        {
          BOOL v24 = (unsigned __int8 *)*((void *)v2 + 2);
          BOOL v25 = *(void *)v24 == (void)v2;
          __int128 v2 = v24;
        }

        while (!v25);
      }

      unint64_t v26 = (unsigned __int8 *)*((void *)v4 + 1);
      if (v26)
      {
        do
        {
          uint64_t v27 = v26;
          unint64_t v26 = *(unsigned __int8 **)v26;
        }

        while (v26);
      }

      else
      {
        do
        {
          uint64_t v27 = (unsigned __int8 *)*((void *)v4 + 2);
          BOOL v25 = *(void *)v27 == (void)v4;
          uint64_t v4 = v27;
        }

        while (!v25);
      }

      uint64_t result = 1LL;
      uint64_t v4 = v27;
      __int128 v2 = v24;
      if (v24 == v3) {
        return result;
      }
    }

    uint64_t v5 = (std::__shared_weak_count *)*((void *)v2 + 6);
    if (v5)
    {
      BOOL v6 = std::__shared_weak_count::lock(v5);
      if (v6) {
        uint64_t v7 = *((void *)v2 + 5);
      }
      else {
        uint64_t v7 = 0LL;
      }
    }

    else
    {
      uint64_t v7 = 0LL;
      BOOL v6 = 0LL;
    }

    uint64_t v8 = (std::__shared_weak_count *)*((void *)v4 + 6);
    if (v8 && (uint64_t v9 = std::__shared_weak_count::lock(v8)) != 0LL)
    {
      unint64_t v10 = v9;
      BOOL v11 = v7 == *((void *)v4 + 5);
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        unint64_t v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v10);
      }
    }

    else
    {
      BOOL v11 = v7 == 0;
    }

    if (v6)
    {
      unint64_t v14 = (unint64_t *)&v6->__shared_owners_;
      do
        unint64_t v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }

    if (!v11) {
      return 0LL;
    }
    int v16 = *((_DWORD *)v2 + 14);
    sub_B8F68(&v29, (uint64_t *)v4 + 5, "", 326);
    if (v16 != *(_DWORD *)(v29 + 264)
      || *((_DWORD *)v2 + 15) != *((_DWORD *)v4 + 15)
      || !sub_DA92C(*((void **)v2 + 8), *((void *)v2 + 9), *((void **)v4 + 8), *((void *)v4 + 9)))
    {
      goto LABEL_70;
    }

    uint64_t v17 = *((void *)v2 + 11);
    uint64_t v18 = *((void *)v4 + 11);
    if (v17 != v18)
    {
      if (*(_BYTE *)(v17 + 12) && *(_BYTE *)(v18 + 12))
      {
      }

      else if ((*(_BYTE *)(v17 + 12) != 0) != (*(_BYTE *)(v18 + 12) != 0))
      {
        goto LABEL_70;
      }

      if (*(_BYTE *)(v17 + 20) && *(_BYTE *)(v18 + 20))
      {
      }

      else if ((*(_BYTE *)(v17 + 20) != 0) != (*(_BYTE *)(v18 + 20) != 0))
      {
        goto LABEL_70;
      }

      if (*(_BYTE *)(v17 + 28) && *(_BYTE *)(v18 + 28))
      {
      }

      else if ((*(_BYTE *)(v17 + 28) != 0) != (*(_BYTE *)(v18 + 28) != 0))
      {
        goto LABEL_70;
      }

      if (*(_BYTE *)(v17 + 40) && *(_BYTE *)(v18 + 40))
      {
        if (*(void *)(v17 + 32) != *(void *)(v18 + 32)) {
          goto LABEL_70;
        }
      }

      else if ((*(_BYTE *)(v17 + 40) != 0) != (*(_BYTE *)(v18 + 40) != 0))
      {
        goto LABEL_70;
      }

      if (*(_BYTE *)(v17 + 52) && *(_BYTE *)(v18 + 52))
      {
        if (*(_DWORD *)(v17 + 48) != *(_DWORD *)(v18 + 48)) {
          goto LABEL_70;
        }
      }

      else if ((*(_BYTE *)(v17 + 52) != 0) != (*(_BYTE *)(v18 + 52) != 0))
      {
        goto LABEL_70;
      }

      if (*(_BYTE *)(v17 + 64) && *(_BYTE *)(v18 + 64))
      {
        if (*(void *)(v17 + 56) != *(void *)(v18 + 56)) {
          goto LABEL_70;
        }
      }

      else if ((*(_BYTE *)(v17 + 64) != 0) != (*(_BYTE *)(v18 + 64) != 0))
      {
        goto LABEL_70;
      }
    }

    if (*((_DWORD *)v2 + 24) == *((_DWORD *)v4 + 24))
    {
      BOOL v19 = v2[100] == v4[100];
LABEL_71:
      BOOL v20 = v30;
      if (v30)
      {
        int v21 = (unint64_t *)&v30->__shared_owners_;
        do
          unint64_t v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }

      if (!v19) {
        return 0LL;
      }
      goto LABEL_77;
    }

void sub_11A774( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_11A788(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 16) != a2[2]) {
    return 0LL;
  }
  __int128 v2 = *(void **)a1;
  if (*(void *)a1 != a1 + 8)
  {
    uint64_t v3 = (void *)*a2;
    while (v2[4] == v3[4])
    {
      uint64_t v4 = (void *)v2[1];
      uint64_t v5 = v2;
      if (v4)
      {
        do
        {
          __int128 v2 = v4;
          uint64_t v4 = (void *)*v4;
        }

        while (v4);
      }

      else
      {
        do
        {
          __int128 v2 = (void *)v5[2];
          BOOL v6 = *v2 == (void)v5;
          uint64_t v5 = v2;
        }

        while (!v6);
      }

      uint64_t v7 = (void *)v3[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          uint64_t v8 = (void *)v3[2];
          BOOL v6 = *v8 == (void)v3;
          uint64_t v3 = v8;
        }

        while (!v6);
      }

      uint64_t v3 = v8;
      if (v2 == (void *)(a1 + 8)) {
        goto LABEL_16;
      }
    }

    return 0LL;
  }

uint64_t sub_11A8D4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1[24]) {
    BOOL v2 = a2[24] == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return (a1[24] != 0) == (a2[24] != 0);
  }
  uint64_t v4 = a1[23];
  if ((v4 & 0x80u) == 0LL) {
    uint64_t v5 = a1[23];
  }
  else {
    uint64_t v5 = *((void *)a1 + 1);
  }
  uint64_t v6 = a2[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0LL) {
    uint64_t v6 = *((void *)a2 + 1);
  }
  if (v5 != v6) {
    return 0LL;
  }
  if (v7 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1LL;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a1++;
    int v9 = v10;
    int v12 = *a2++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    BOOL v2 = v9 == v11;
    BOOL v3 = v9 == v11;
  }

  while (v2 && v14);
  return v3;
}

uint64_t sub_11A9A4(uint64_t a1)
{
  BOOL v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t sub_11A9F0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  __int128 v4 = *(_OWORD *)(a2 + 8);
  __int128 v5 = *(_OWORD *)(a2 + 24);
  __int128 v6 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  if (v7)
  {
    uint64_t v8 = (unint64_t *)(v7 + 16);
    do
      unint64_t v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }

  sub_86054(a1 + 80, (void *)(a2 + 80));
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  __int128 v10 = *(_OWORD *)(a2 + 120);
  __int128 v11 = *(_OWORD *)(a2 + 136);
  __int128 v12 = *(_OWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v12;
  *(_OWORD *)(a1 + 136) = v11;
  *(_OWORD *)(a1 + 120) = v10;
  sub_C590C((_BYTE *)(a1 + 176), (__int128 *)(a2 + 176));
  return a1;
}

void sub_11AA9C(_Unwind_Exception *a1)
{
  BOOL v3 = *(std::__shared_weak_count **)(v1 + 72);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_11AAC4(uint64_t a1)
{
  BOOL v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t sub_11AB10(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    goto LABEL_42;
  }
  unsigned int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    unsigned int v5 = *(_DWORD *)(v2 + 32);
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      uint64_t v7 = (uint64_t *)v2;
    }
    else {
      uint64_t v7 = (uint64_t *)(v2 + 8);
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }

  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32))
  {
LABEL_42:
    BOOL v25 = (os_log_t *)sub_138E8(13);
    unint64_t v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      int v28 = 136315394;
      uint64_t v29 = "RoutingManager.cpp";
      __int16 v30 = 1024;
      int v31 = 5273;
      _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Corruption in the routing database. Calling find(inCategoryMode.mCat egory) returned an invalid iterator.",  (uint8_t *)&v28,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error( exception,  "Corruption in the routing database. Calling find(inCategoryMode.mCategory) returned an invalid iterator.");
  }

  if (*(_BYTE *)(v4 + 78))
  {
    BOOL v8 = 1;
LABEL_14:
    int v9 = 1;
    return v8 | (v9 << 8);
  }

  uint64_t v12 = *(void *)(a1 + 80);
  uint64_t v10 = a1 + 80;
  uint64_t v11 = v12;
  if (!v12) {
    goto LABEL_26;
  }
  unsigned int v13 = a2[1];
  uint64_t v14 = v10;
  uint64_t v15 = v11;
  do
  {
    unsigned int v16 = *(_DWORD *)(v15 + 28);
    BOOL v17 = v16 >= v13;
    if (v16 >= v13) {
      uint64_t v18 = (uint64_t *)v15;
    }
    else {
      uint64_t v18 = (uint64_t *)(v15 + 8);
    }
    if (v17) {
      uint64_t v14 = v15;
    }
    uint64_t v15 = *v18;
  }

  while (*v18);
  if (v14 == v10 || *(_DWORD *)(v14 + 28) > v13) {
LABEL_26:
  }
    uint64_t v14 = v10;
  BOOL v8 = v14 != v10;
  if (!*((_BYTE *)a2 + 12)) {
    goto LABEL_14;
  }
  if (!v11) {
    goto LABEL_39;
  }
  unsigned int v19 = a2[2];
  uint64_t v20 = v10;
  do
  {
    unsigned int v21 = *(_DWORD *)(v11 + 28);
    BOOL v22 = v21 >= v19;
    if (v21 >= v19) {
      uint64_t v23 = (uint64_t *)v11;
    }
    else {
      uint64_t v23 = (uint64_t *)(v11 + 8);
    }
    if (v22) {
      uint64_t v20 = v11;
    }
    uint64_t v11 = *v23;
  }

  while (*v23);
  if (v20 == v10 || *(_DWORD *)(v20 + 28) > v19) {
LABEL_39:
  }
    uint64_t v20 = v10;
  int v9 = v20 != v10;
  return v8 | (v9 << 8);
}

void sub_11ACF8(_Unwind_Exception *exception_object)
{
}

void sub_11AD14(void *a1)
{
  if (a1)
  {
    sub_11AD14(*a1);
    sub_11AD14(a1[1]);
    sub_FF3B8((void *)a1[6]);
    operator delete(a1);
  }

void sub_11AD54(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5, unsigned int *a6)
{
  if (((*(uint64_t (**)(void))(qword_48F828 + 48))() & 1) == 0)
  {
    v162 = (os_log_t *)sub_138E8(13);
    v163 = *v162;
    if (*v162 && os_log_type_enabled(*v162, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2263;
      _os_log_impl(&dword_0, v163, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (*a6 > (unint64_t)((uint64_t)(a3[1] - *a3) >> 4))
  {
    v165 = (os_log_t *)sub_138E8(13);
    os_log_type_t v166 = *v165;
    if (*v165 && os_log_type_enabled(*v165, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2264;
      _os_log_impl(&dword_0, v166, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    v167 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v167, "Precondition failure.");
  }

  int v9 = a6[1] & 3;
  if ((a6[1] & 3) == 0)
  {
    uint64_t v168 = (os_log_t *)sub_138E8(13);
    uint64_t v169 = *v168;
    if (*v168 && os_log_type_enabled(*v168, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2265;
      _os_log_impl(&dword_0, v169, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    char v170 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v170, "Precondition failure.");
  }

  if (*(_DWORD *)(a4 + 32) != 1668510820)
  {
    uint64_t v171 = (os_log_t *)sub_138E8(13);
    uint64_t v172 = *v171;
    if (*v171 && os_log_type_enabled(*v171, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2266;
      _os_log_impl(&dword_0, v172, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    uint64_t v173 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v173, "Precondition failure.");
  }

  *(void *)a1 = off_4709D0;
  *(void *)(a1 + 8) = 1LL;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  memset(v199, 0, sizeof(v199));
  uint64_t v187 = a5;
  if (v9 != 3)
  {
    uint64_t v126 = sub_138E8(8);
    if ((*(_BYTE *)(v126 + 8) & 1) != 0)
    {
      uint64_t v127 = *(os_log_s **)v126;
      if (*(void *)v126)
      {
        if (os_log_type_enabled(*(os_log_t *)v126, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2446;
          _os_log_impl( &dword_0,  v127,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Scanning inPortStack per port, seeking viable concrete routes for single port routing",  buf,  0x12u);
        }
      }
    }

    std::string::size_type v128 = *a6;
    if (!(_DWORD)v128) {
      std::string::size_type v128 = (uint64_t)(a3[1] - *a3) >> 4;
    }
    v203.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
    v203.__r_.__value_.__l.__size_ = v128;
    unsigned int v204 = 0LL;
    uint64_t v205 = 0LL;
    uint64_t v184 = a5 + 24;
    v203.__r_.__value_.__l.__cap_ = a5 + 24;
    *(void *)BOOL v207 = sub_1276C4((uint64_t)&v203);
    *(void *)&v207[8] = v129;
    uint64_t v130 = *(void *)(v203.__r_.__value_.__r.__words[0] + 8) - *(void *)v203.__r_.__value_.__l.__data_;
    BOOL v15 = v203.__r_.__value_.__l.__size_ >= v130 >> 4;
    std::string::size_type size = v130 >> 4;
    if (!v15) {
      std::string::size_type size = v203.__r_.__value_.__l.__size_;
    }
    uint64_t v186 = *(void *)v203.__r_.__value_.__l.__data_ + 16 * size;
    v181 = (_OWORD *)(a5 + 8);
    uint64_t v177 = a6;
LABEL_248:
    std::string v132 = *(void **)v207;
    if (*(void *)v207 == v186) {
      goto LABEL_305;
    }
    char v133 = *(std::__shared_weak_count **)(*(void *)v207 + 8LL);
    if (!v133) {
      goto LABEL_304;
    }
    uint64_t v134 = std::__shared_weak_count::lock(v133);
    *(void *)&v212[8] = v134;
    if (!v134) {
      goto LABEL_304;
    }
    uint64_t v135 = v134;
    *(void *)v212 = *v132;
    if (!*(void *)v212)
    {
      int v159 = 17;
      goto LABEL_298;
    }

    if (((a6[1] & 1) == 0 || (*(_WORD *)(*(void *)v212 + 184LL) & 1) == 0)
      && ((a6[1] & 2) == 0 || (*(_WORD *)(*(void *)v212 + 184LL) & 1) != 0))
    {
      int v159 = 16 * (*(_DWORD *)(a1 + 8) == 0);
      goto LABEL_298;
    }

    BOOL v136 = *(_DWORD *)(a4 + 32) == 1668510820;
    *(_OWORD *)((char *)v196.__r_.__value_.__r.__words + 3) = *v181;
    _DWORD buf[16] = v136;
    *(_OWORD *)&buf[17] = *(_OWORD *)&v196.__r_.__value_.__l.__data_;
    *(_DWORD *)&uint8_t buf[32] = *(_DWORD *)((char *)&v196.__r_.__value_.__r.__words[1] + 7);
    *(void *)buf = a4;
    *(void *)&buf[8] = v184;
    uint64_t v209 = 0LL;
    uint64_t v210 = 0LL;
    uint64_t v138 = sub_11DDE4((uint64_t *)buf);
    uint64_t v139 = *(void *)buf;
    if (*(void *)buf == v138) {
      goto LABEL_297;
    }
    uint64_t v140 = v137;
    uint64_t v141 = (uint64_t)(v137 + 1);
    while (1)
    {
      sub_70C60((int64x2_t *)&__p, a2, v138 + 16, a4, v187);
      std::string::size_type v142 = __p.__r_.__value_.__l.__size_;
      std::string::size_type v143 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
      {
        uint64_t v144 = *(void *)v212;
        do
        {
          uint64_t v145 = *(void *)v143 + 16LL;
          uint64_t v146 = *(void *)(*(void *)v143 + 24LL);
          if (v145 != v146)
          {
            do
            {
              BOOL v147 = sub_1F6C84(v144, (void *)(v146 + 16));
              if (v147) {
                break;
              }
              uint64_t v146 = *(void *)(v146 + 8);
            }

            while (v145 != v146);
            if (v147) {
              goto LABEL_266;
            }
          }

          v143 += 8LL;
        }

        while (v143 != v142);
        if (sub_12775C(a4, *(void *)(v187 + 8), *(void *)(v187 + 16), v184, (uint64_t *)&__p, v144))
        {
LABEL_266:
          if ((sub_14F834() & 1) == 0
            && sub_EAA74("VA_BuildAlternateRoutesAndActivateForLastInWins", 0x2FuLL) == &qword_4938E0)
          {
            os_signpost_id_t v149 = 0LL;
          }

          else
          {
            unsigned __int8 v148 = atomic_load((unsigned __int8 *)&qword_493908);
            if ((v148 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
            {
              qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
              __cxa_guard_release(&qword_493908);
            }

            os_signpost_id_t v149 = os_signpost_id_generate((os_log_t)qword_493900);
            unsigned __int8 v150 = atomic_load((unsigned __int8 *)&qword_493908);
            if ((v150 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
            {
              qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
              __cxa_guard_release(&qword_493908);
            }

            if (v149 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              uint64_t v151 = (os_log_s *)qword_493900;
              if (os_signpost_enabled((os_log_t)qword_493900))
              {
                sub_2DA6D0(&v196, (unsigned int ***)&__p);
                int v152 = (char)v196.__r_.__value_.__s.__size_;
                std::string::size_type v153 = v196.__r_.__value_.__r.__words[0];
                sub_2DABA8(&v190, v138 + 16);
                v154 = &v196;
                if (v152 < 0) {
                  v154 = (std::string *)v153;
                }
                uint64_t v155 = &v190;
                if ((v190.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  uint64_t v155 = (std::string *)v190.__r_.__value_.__r.__words[0];
                }
                LODWORD(v211.__r_.__value_.__l.__data_) = 136315394;
                *(std::string::size_type *)((char *)v211.__r_.__value_.__r.__words + 4) = (std::string::size_type)v154;
                WORD2(v211.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&v211.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v155;
                _os_signpost_emit_with_name_impl( &dword_0,  v151,  OS_SIGNPOST_INTERVAL_BEGIN,  v149,  "VA_BuildAlternateRoutesAndActivateForLastInWins",  "ActivateForLastInWins, Primary route = %s, Abstract route =%s",  (uint8_t *)&v211,  0x16u);
              }
            }
          }

          sub_1278E8(&v201, v149);
          sub_11DE5C((uint64_t)&v196, a2, (std::string::size_type)&__p, *(uint64_t **)(v138 + 104), v187, (uint64_t *)v199);
          sub_725DC(a1, (uint64_t)&v196);
          v196.__r_.__value_.__r.__words[0] = (std::string::size_type)off_4709D0;
          cap = (void *)v196.__r_.__value_.__l.__cap_;
          if (v196.__r_.__value_.__l.__cap_)
          {
            sub_10AF78((uint64_t *)(v196.__r_.__value_.__l.__cap_ + 16));
            operator delete(cap);
          }

          int v157 = *(_DWORD *)(a1 + 8);
          sub_1279C8(&v201);
          if (!v157)
          {
            v196.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            sub_11E38C((void ***)&v196);
LABEL_297:
            uint64_t v135 = *(std::__shared_weak_count **)&v212[8];
            a6 = v177;
            int v159 = 16 * (*(_DWORD *)(a1 + 8) == 0);
            if (*(void *)&v212[8])
            {
LABEL_298:
              p_shared_owners = (unint64_t *)&v135->__shared_owners_;
              do
                unint64_t v161 = __ldaxr(p_shared_owners);
              while (__stlxr(v161 - 1, p_shared_owners));
              if (!v161)
              {
                ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                std::__shared_weak_count::__release_weak(v135);
              }
            }

            if (v159 != 17 && v159) {
              goto LABEL_305;
            }
LABEL_304:
            sub_127EE0((uint64_t *)v207);
            goto LABEL_248;
          }
        }
      }

      v196.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      sub_11E38C((void ***)&v196);
      uint64_t v138 = *(void *)(v138 + 8);
      uint64_t v158 = *v140;
      if (v138 != *v140)
      {
        do
        {
          if (sub_11E3FC(v141, v138 + 16)) {
            goto LABEL_288;
          }
          uint64_t v138 = *(void *)(v138 + 8);
        }

        while (v138 != v158);
        uint64_t v138 = v158;
      }

LABEL_288:
      if (v138 == v139) {
        goto LABEL_297;
      }
    }
  }

  uint64_t v10 = sub_138E8(8);
  if ((*(_BYTE *)(v10 + 8) & 1) != 0)
  {
    uint64_t v11 = *(os_log_s **)v10;
    if (*(void *)v10)
    {
      if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2344;
        _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Scanning inPortStack per port, seeking viable concrete routes for input/output Port routing",  buf,  0x12u);
      }
    }
  }

  std::string::size_type v12 = *a6;
  if (!(_DWORD)v12) {
    std::string::size_type v12 = (uint64_t)(a3[1] - *a3) >> 4;
  }
  v196.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v196.__r_.__value_.__l.__size_ = v12;
  uint64_t v197 = 0LL;
  uint64_t v198 = 0LL;
  std::string::size_type v185 = a5 + 24;
  v196.__r_.__value_.__l.__cap_ = a5 + 24;
  v195[0] = sub_1276C4((uint64_t)&v196);
  v195[1] = v13;
  uint64_t v14 = *(void *)(v196.__r_.__value_.__r.__words[0] + 8) - *(void *)v196.__r_.__value_.__l.__data_;
  BOOL v15 = v196.__r_.__value_.__l.__size_ >= v14 >> 4;
  std::string::size_type v16 = v14 >> 4;
  if (!v15) {
    std::string::size_type v16 = v196.__r_.__value_.__l.__size_;
  }
  uint64_t v175 = *(void *)v196.__r_.__value_.__l.__data_ + 16 * v16;
  char v174 = (_OWORD *)(a5 + 8);
  uint64_t v178 = a3;
LABEL_15:
  BOOL v17 = (uint64_t *)v195[0];
  if (v195[0] != v175)
  {
    uint64_t v18 = *(std::__shared_weak_count **)(v195[0] + 8);
    if (!v18) {
      goto LABEL_237;
    }
    unsigned int v19 = std::__shared_weak_count::lock(v18);
    unint64_t v194 = v19;
    if (!v19) {
      goto LABEL_237;
    }
    uint64_t v193 = *v17;
    if (!v193)
    {
      char v48 = v19;
      int v49 = 13;
      goto LABEL_231;
    }

    uint64_t v20 = (os_signpost_id_t *)*a3;
    unsigned int v21 = (os_signpost_id_t *)a3[1];
    if ((os_signpost_id_t *)*a3 == v21)
    {
      BOOL v22 = (os_signpost_id_t *)*a3;
      goto LABEL_73;
    }

    BOOL v22 = (os_signpost_id_t *)*a3;
    while (1)
    {
      uint64_t v23 = (std::__shared_weak_count *)v22[1];
      if (v23)
      {
        BOOL v24 = std::__shared_weak_count::lock(v23);
        BOOL v25 = v24;
        if (v24)
        {
          os_signpost_id_t v26 = *v22;
          p_shared_weak_owners = (unint64_t *)&v24->__shared_weak_owners_;
          do
            unint64_t v28 = __ldxr(p_shared_weak_owners);
          while (__stxr(v28 + 1, p_shared_weak_owners));
          uint64_t v29 = (unint64_t *)&v24->__shared_owners_;
          do
            unint64_t v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v25);
          }
        }

        else
        {
          os_signpost_id_t v26 = 0LL;
        }
      }

      else
      {
        os_signpost_id_t v26 = 0LL;
        BOOL v25 = 0LL;
      }

      int v31 = (std::__shared_weak_count *)v17[1];
      if (v31)
      {
        char v32 = std::__shared_weak_count::lock(v31);
        uint64_t v33 = v32;
        if (v32)
        {
          uint64_t v34 = *v17;
          unint64_t v35 = (unint64_t *)&v32->__shared_weak_owners_;
          do
            unint64_t v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
          uint64_t v37 = (unint64_t *)&v32->__shared_owners_;
          do
            unint64_t v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (v38)
          {
            if (v25) {
              goto LABEL_39;
            }
          }

          else
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v33);
            if (v25)
            {
LABEL_39:
              uint64_t v39 = std::__shared_weak_count::lock(v25);
              if (v39) {
                os_signpost_id_t v40 = v26;
              }
              else {
                os_signpost_id_t v40 = 0LL;
              }
              if (!v33) {
                goto LABEL_53;
              }
              goto LABEL_46;
            }
          }
        }

        else
        {
          uint64_t v34 = 0LL;
          if (v25) {
            goto LABEL_39;
          }
        }
      }

      else
      {
        uint64_t v34 = 0LL;
        uint64_t v33 = 0LL;
        if (v25) {
          goto LABEL_39;
        }
      }

      os_signpost_id_t v40 = 0LL;
      uint64_t v39 = 0LL;
      if (!v33) {
        goto LABEL_53;
      }
LABEL_46:
      int v41 = std::__shared_weak_count::lock(v33);
      if (v41)
      {
        __int16 v42 = v41;
        BOOL v43 = v40 == v34;
        __int16 v44 = (unint64_t *)&v41->__shared_owners_;
        do
          unint64_t v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v42);
        }

        if (!v39) {
          goto LABEL_57;
        }
        goto LABEL_54;
      }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error((std::logic_error *)exception, "Precondition failure.");
    char v121 = (void (*)(void *))&std::logic_error::~logic_error;
    goto LABEL_289;
  }

  sub_6DD4();
  if (((*(uint64_t (**)(uint64_t *))(qword_48F828 + 48))(&qword_48F828) & 1) == 0)
  {
    uint64_t v129 = (os_log_t *)sub_138E8(13);
    uint64_t v130 = *v129;
    if (*v129 && os_log_type_enabled(*v129, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v156 = 136315394;
      *(void *)&v156[4] = "RoutingManager.cpp";
      *(_WORD *)&v156[12] = 1024;
      *(_DWORD *)&v156[14] = 4551;
      _os_log_impl(&dword_0, v130, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v156, 0x12u);
    }

LABEL_57:
      if (v33) {
        goto LABEL_58;
      }
LABEL_59:
      a3 = v178;
      if (v25) {
        std::__shared_weak_count::__release_weak(v25);
      }
      if (v43) {
        goto LABEL_72;
      }
      v22 += 2;
      if (v22 == v21)
      {
        BOOL v22 = v21;
LABEL_72:
        uint64_t v20 = (os_signpost_id_t *)v178[1];
LABEL_73:
        unsigned int v204 = 0LL;
        uint64_t v205 = 0LL;
        uint64_t v50 = (char *)v20 - (char *)v22;
        v203.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
        std::string::size_type v179 = (std::string::size_type)v22 + (v50 & 0xFFFFFFFFFFFFFFF0LL);
        v203.__r_.__value_.__l.__size_ = v179;
        v203.__r_.__value_.__l.__cap_ = v185;
        if (v50)
        {
          uint64_t v98 = 16 * (v50 >> 4);
          while (!sub_127B60((os_log_s *)&v203.__r_.__value_.__r.__words[2], (uint64_t)v22))
          {
            v22 += 2;
            v98 -= 16LL;
            if (!v98)
            {
              unsigned int v204 = (os_signpost_id_t *)v179;
              LOBYTE(v205) = 1;
              goto LABEL_178;
            }
          }
        }

        unsigned int v204 = v22;
        LOBYTE(v205) = 1;
        if ((os_signpost_id_t *)v179 == v22) {
          goto LABEL_178;
        }
        while (2)
        {
          os_signpost_id_t v201 = 0LL;
          v202 = 0LL;
          char v51 = (std::__shared_weak_count *)v22[1];
          if (!v51) {
            goto LABEL_156;
          }
          v202 = std::__shared_weak_count::lock(v51);
          if (!v202) {
            goto LABEL_164;
          }
          os_signpost_id_t v52 = *v22;
          os_signpost_id_t v201 = v52;
          if (!v52)
          {
LABEL_156:
            int v93 = 3;
            goto LABEL_157;
          }

          if ((*(_WORD *)(v193 + 184) & 1) == (*(_WORD *)(v52 + 184) & 1))
          {
            int v93 = 0;
            goto LABEL_157;
          }

          BOOL v53 = *(_DWORD *)(a4 + 32) == 1668510820;
          *(_OWORD *)((char *)__p.__r_.__value_.__r.__words + 3) = *v174;
          _DWORD buf[16] = v53;
          *(_OWORD *)&buf[17] = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(_DWORD *)&uint8_t buf[32] = *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
          *(void *)buf = a4;
          *(void *)&buf[8] = v185;
          uint64_t v209 = 0LL;
          uint64_t v210 = 0LL;
          uint64_t v54 = sub_11DDE4((uint64_t *)buf);
          v183 = v55;
          uint64_t v56 = v54;
          uint64_t v182 = *(void *)buf;
          if (*(void *)buf == v54)
          {
LABEL_171:
            int v93 = 0;
            goto LABEL_172;
          }

          uint64_t v180 = (uint64_t)(v55 + 1);
LABEL_81:
          sub_70C60((int64x2_t *)v207, a2, v56 + 16, a4, a5);
          uint64_t v57 = *(void *)v207;
          if (*(void *)v207 != *(void *)&v207[8])
          {
            uint64_t v58 = (uint64_t)(*(void *)&v207[8] - *(void *)v207) >> 3;
            if (v58 == 1)
            {
              uint64_t v62 = v193;
              uint64_t v75 = **(void **)v207 + 16LL;
              uint64_t v76 = *(void *)(**(void **)v207 + 24LL);
              if (v75 == v76)
              {
                uint64_t v69 = v201;
                goto LABEL_125;
              }

              do
              {
                BOOL v77 = sub_1F6C84(v62, (void *)(v76 + 16));
                if (v77) {
                  break;
                }
                uint64_t v76 = *(void *)(v76 + 8);
              }

              while (v75 != v76);
              uint64_t v69 = v201;
              if (!v77) {
                goto LABEL_125;
              }
              uint64_t v78 = **(void **)v207 + 16LL;
              uint64_t v79 = *(void *)(**(void **)v207 + 24LL);
              if (v78 == v79) {
                goto LABEL_125;
              }
              do
              {
                BOOL v80 = sub_1F6C84(v69, (void *)(v79 + 16));
                if (v80) {
                  break;
                }
                uint64_t v79 = *(void *)(v79 + 8);
              }

              while (v78 != v79);
              if (!v80) {
                goto LABEL_125;
              }
              goto LABEL_127;
            }

            if (v58 == 2)
            {
              uint64_t v59 = 0LL;
              unsigned int v60 = 0;
              int v61 = -1;
              uint64_t v62 = v193;
              int v63 = -1;
              do
              {
                uint64_t v64 = *(void *)(v57 + 8 * v59);
                uint64_t v65 = v64 + 16;
                uint64_t v66 = *(void *)(v64 + 24);
                if (v64 + 16 == v66)
                {
                  BOOL v67 = 0;
                  BOOL v70 = 0;
                  uint64_t v69 = v201;
                }

                else
                {
                  do
                  {
                    BOOL v67 = sub_1F6C84(v62, (void *)(v66 + 16));
                    if (v67) {
                      break;
                    }
                    uint64_t v66 = *(void *)(v66 + 8);
                  }

                  while (v65 != v66);
                  uint64_t v68 = *(void *)(v64 + 24);
                  uint64_t v69 = v201;
                  if (v65 == v68)
                  {
                    BOOL v70 = 0;
                  }

                  else
                  {
                    do
                    {
                      BOOL v70 = sub_1F6C84(v69, (void *)(v68 + 16));
                      if (v70) {
                        break;
                      }
                      uint64_t v68 = *(void *)(v68 + 8);
                    }

                    while (v65 != v68);
                  }
                }

                char v71 = v61 != -1 || v70;
                char v72 = v67 & v71;
                BOOL v73 = v63 != -1 && v70;
                if ((v72 & 1) != 0 || v73)
                {
                  a5 = v187;
                  goto LABEL_125;
                }

                if (v67) {
                  int v61 = v60;
                }
                if (v70) {
                  int v63 = v60;
                }
                uint64_t v57 = *(void *)v207;
                uint64_t v59 = ++v60;
              }

              while (v60 < (unint64_t)((uint64_t)(*(void *)&v207[8] - *(void *)v207) >> 3));
              if (v61 == -1 || v63 == -1)
              {
                a5 = v187;
              }

              else
              {
                BOOL v74 = v61 == v63;
                a5 = v187;
                if (!v74) {
                  goto LABEL_127;
                }
              }
            }

            else
            {
              uint64_t v69 = v201;
              uint64_t v62 = v193;
            }

  char v51 = (void **)&v40;
  sub_8C8F0(&v51);
  BOOL result = v48;
  if (v48 == v47)
  {
    char v32 = 4LL;
    BOOL result = v47;
  }

  else
  {
    if (!v48) {
      return result;
    }
    char v32 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void *))(*result + 8 * v32))(result);
}

      ;
    }

    while (v17 != -1);
  }

  if (v31) {
    CFRelease(v31);
  }
  if ((v18 & 1) != 0) {
    return v5;
  }
  return a1;
}

  uint64_t v29 = (char *)v25 - (char *)v19;
  if (v25 != (std::string *)v23 || v21 == 0LL) {
    int v31 = v29;
  }
  else {
    int v31 = -1LL;
  }
  char v32 = (os_log_t *)sub_138E8(17);
  uint64_t v33 = *v32;
  if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v34 = &v92;
    if ((v92.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v34 = (std::string *)v92.__r_.__value_.__r.__words[0];
    }
    unint64_t v35 = v89;
    if (cap < 0) {
      unint64_t v35 = (CFTypeRef *)v89[0];
    }
    p_str = &__str;
    if ((__str.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)cfa = 136316162;
    *(void *)&cfa[4] = "Device_USB_Aspen.cpp";
    *(_WORD *)&cfa[12] = 1024;
    *(_DWORD *)&cfa[14] = 262;
    *(_WORD *)&cfa[18] = 2080;
    *(void *)&cfa[20] = v34;
    *(_WORD *)&cfa[28] = 2080;
    *(void *)&cfa[30] = v35;
    uint64_t v95 = 2080;
    unint64_t v96 = p_str;
    _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d UID is %s will search for last occurrence of %s, and replace it with %s",  cfa,  0x30u);
  }

  uint64_t v37 = cf;
  if (v31 != -1LL)
  {
    if (cap >= 0) {
      unint64_t v38 = HIBYTE(cap);
    }
    else {
      unint64_t v38 = (std::string::size_type)v89[1];
    }
    if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v39 = &__str;
    }
    else {
      uint64_t v39 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      os_signpost_id_t v40 = __str.__r_.__value_.__s.__size_;
    }
    else {
      os_signpost_id_t v40 = __str.__r_.__value_.__l.__size_;
    }
    std::string::replace(&v92, v31, v38, (const std::string::value_type *)v39, v40);
    int v41 = (os_log_t *)sub_138E8(17);
    __int16 v42 = *v41;
    if (*v41 && os_log_type_enabled(*v41, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v43 = &v92;
      if ((v92.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        BOOL v43 = (std::string *)v92.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)cfa = 136315650;
      *(void *)&cfa[4] = "Device_USB_Aspen.cpp";
      *(_WORD *)&cfa[12] = 1024;
      *(_DWORD *)&cfa[14] = 269;
      *(_WORD *)&cfa[18] = 2080;
      *(void *)&cfa[20] = v43;
      _os_log_impl(&dword_0, v42, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Updated USB UID is %s", cfa, 0x1Cu);
    }

    if ((v92.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int16 v44 = &v92;
    }
    else {
      __int16 v44 = (std::string *)v92.__r_.__value_.__r.__words[0];
    }
    if (v44)
    {
      if ((v92.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        unint64_t v45 = v92.__r_.__value_.__s.__size_;
      }
      else {
        unint64_t v45 = v92.__r_.__value_.__l.__size_;
      }
      uint64_t v37 = CFStringCreateWithBytes(0LL, (const UInt8 *)v44, v45, 0x8000100u, 0);
      if (!v37)
      {
        uint64_t v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v46, "Could not construct");
      }
    }

    else
    {
      uint64_t v37 = 0LL;
    }
  }

  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v89[0]);
  }
  CFRelease(v12);
  sub_1EFBEC((uint64_t)&v92, a2, COERCE_DOUBLE(1735159650LL));
  if (!v92.__r_.__value_.__s.__data_[16])
  {
    int v49 = 0LL;
    goto LABEL_160;
  }

  unint64_t v47 = (const void *)v92.__r_.__value_.__l.__size_;
  if (v92.__r_.__value_.__l.__size_) {
    CFRetain((CFTypeRef)v92.__r_.__value_.__l.__size_);
  }
  sub_7F234(&v87, v47);
  if (!v87.__r_.__value_.__r.__words[0])
  {
    os_signpost_id_t v84 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v84, "Could not construct");
  }

  sub_7D084(v89, "");
  char v48 = (const __CFString *)v87.__r_.__value_.__r.__words[0];
  if (SHIBYTE(cap) < 0)
  {
    sub_24054(cfa, (void *)v89[0], (unint64_t)v89[1]);
  }

  else
  {
    *(_OWORD *)cfa = *(_OWORD *)v89;
    *(void *)&cfa[16] = cap;
  }

  if (v48 && (uint64_t v50 = CFStringGetTypeID(), v50 == CFGetTypeID(v48)))
  {
    sub_7D354((uint64_t)&__str, v48);
    if ((cfa[23] & 0x80000000) != 0) {
      operator delete(*(void **)cfa);
    }
  }

  else
  {
    __str = *(std::string *)cfa;
  }

  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v89[0]);
  }
  if (v87.__r_.__value_.__r.__words[0]) {
    CFRelease(v87.__r_.__value_.__l.__data_);
  }
  os_signpost_id_t v52 = __str.__r_.__value_.__l.__size_;
  char v51 = (std::string *)__str.__r_.__value_.__r.__words[0];
  BOOL v53 = &__str;
  if ((__str.__r_.__value_.__s.__size_ & 0x80u) == 0)
  {
    uint64_t v54 = __str.__r_.__value_.__s.__size_;
  }

  else
  {
    uint64_t v54 = __str.__r_.__value_.__l.__size_;
    BOOL v53 = (std::string *)__str.__r_.__value_.__r.__words[0];
  }

  if (!v54) {
    goto LABEL_154;
  }
  uint64_t v55 = (unsigned __int8 *)v53 + v54;
  uint64_t v56 = v53;
  uint64_t v57 = (std::string *)v55;
  do
  {
    uint64_t v58 = v56;
    uint64_t v59 = (unsigned __int8 *)v56;
    while (1)
    {
      unsigned int v60 = *v59++;
      if (v60 == 58) {
        break;
      }
      uint64_t v58 = (std::string *)v59;
      if (v59 == v55)
      {
        uint64_t v58 = v57;
        goto LABEL_130;
      }
    }

    uint64_t v56 = (std::string *)((char *)&v58->__r_.__value_.__l.__data_ + 1);
    uint64_t v57 = v58;
  }

  while (v59 != v55);
LABEL_130:
  int v61 = (char *)v58 - (char *)v53;
  if (v58 == (std::string *)v55) {
    int v61 = -1LL;
  }
  uint64_t v62 = v61 + 1;
  if ((__str.__r_.__value_.__s.__size_ & 0x80) == 0)
  {
    if (v61 != __str.__r_.__value_.__s.__size_ - 1LL)
    {
      char v51 = &__str;
      os_signpost_id_t v52 = __str.__r_.__value_.__s.__size_;
      goto LABEL_137;
    }

        int v41 = (os_log_t *)sub_138E8(24);
        __int16 v42 = *v41;
        if (*v41 && os_log_type_enabled(*v41, OS_LOG_TYPE_ERROR))
        {
          BOOL v43 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 120LL))(v6);
          sub_2029E8(&v100, (float *)__p, (float *)v92);
          __int16 v44 = (v100.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v100 : (std::string *)v100.__r_.__value_.__r.__words[0];
          buf[0].mSelector = 136315906;
          *(void *)&buf[0].mScope = "PortUtilities.cpp";
          LOWORD(buf[1].mSelector) = 1024;
          *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 339;
          HIWORD(buf[1].mScope) = 1024;
          buf[1].mElement = v43;
          LOWORD(buf[2].mSelector) = 2080;
          *(void *)((char *)&buf[2].mSelector + 2) = v44;
          _os_log_impl( &dword_0,  v42,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PlaybackDosimetry : fetched volume map from device [%u]: %s",  (uint8_t *)buf,  0x22u);
        }

        unint64_t v45 = (os_log_t *)sub_138E8(24);
        uint64_t v46 = *v45;
        if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_DEBUG))
        {
          buf[0].mSelector = 136315394;
          *(void *)&buf[0].mScope = "PortUtilities.cpp";
          LOWORD(buf[1].mSelector) = 1024;
          *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 184;
          _os_log_impl( &dword_0,  v46,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d PlaybackDosimetry : Reporting volume map to metrics.",  (uint8_t *)buf,  0x12u);
        }

        *(_OWORD *)&v99.__r_.__value_.__r.__words[1] = 0uLL;
        v99.__r_.__value_.__r.__words[0] = (std::string::size_type)&v99.__r_.__value_.__l.__size_;
        unint64_t v47 = (float *)__p;
        memset(&v98, 0, sizeof(v98));
        std::string::append(&v98, "{ ", 2uLL);
        if (__p != (void *)v92)
        {
          while (1)
          {
            std::to_string(&v100, *v47);
            if ((v100.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              char v48 = &v100;
            }
            else {
              char v48 = (std::string *)v100.__r_.__value_.__r.__words[0];
            }
            if ((v100.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              int v49 = v100.__r_.__value_.__s.__size_;
            }
            else {
              int v49 = v100.__r_.__value_.__l.__size_;
            }
            std::string::append(&v98, (const std::string::value_type *)v48, v49);
            std::string::append(&v98, ", ", 2uLL);
          }
        }

        std::string::append(&v98, " }", 2uLL);
        if ((v98.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v50 = &v98;
        }
        else {
          uint64_t v50 = (std::string *)v98.__r_.__value_.__r.__words[0];
        }
        if (v50)
        {
          if ((v98.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            char v51 = v98.__r_.__value_.__s.__size_;
          }
          else {
            char v51 = v98.__r_.__value_.__l.__size_;
          }
          os_signpost_id_t v52 = CFStringCreateWithBytes(0LL, (const UInt8 *)v50, v51, 0x8000100u, 0);
          if (!v52)
          {
            BOOL v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v53, "Could not construct");
          }
        }

        else
        {
          os_signpost_id_t v52 = 0LL;
        }

        sub_7D084(buf, "volume_map");
        if (v52) {
          CFRetain(v52);
        }
        *(void *)&buf[2].mSelector = v52;
        sub_20050C((uint64_t **)&v99, (void **)buf, (__int128 *)buf);
        if (*(void *)&buf[2].mSelector) {
          CFRelease(*(CFTypeRef *)&buf[2].mSelector);
        }
        if (SHIBYTE(buf[1].mElement) < 0) {
          operator delete(*(void **)&buf[0].mSelector);
        }
        if (v52) {
          CFRelease(v52);
        }
        if (sub_1FF9AC((void *)a2))
        {
          uint64_t v54 = sub_59468(a2);
          std::to_string(&v100, v54);
          if ((v100.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v55 = &v100;
          }
          else {
            uint64_t v55 = (std::string *)v100.__r_.__value_.__r.__words[0];
          }
          if (v55)
          {
            if ((v100.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              uint64_t v56 = v100.__r_.__value_.__s.__size_;
            }
            else {
              uint64_t v56 = v100.__r_.__value_.__l.__size_;
            }
            uint64_t v57 = CFStringCreateWithBytes(0LL, (const UInt8 *)v55, v56, 0x8000100u, 0);
            v98.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
            if (!v57)
            {
              uint64_t v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v58, "Could not construct");
            }
          }

          else
          {
            uint64_t v57 = 0LL;
            v98.__r_.__value_.__r.__words[0] = 0LL;
          }

          sub_2005A4(buf, "bluetooth_product_id", (const void **)&v98.__r_.__value_.__l.__data_);
          sub_20050C((uint64_t **)&v99, (void **)buf, (__int128 *)buf);
          if (*(void *)&buf[2].mSelector) {
            CFRelease(*(CFTypeRef *)&buf[2].mSelector);
          }
          if (SHIBYTE(buf[1].mElement) < 0) {
            operator delete(*(void **)&buf[0].mSelector);
          }
          if (v57) {
            CFRelease(v57);
          }
        }

        else
        {
          uint64_t v59 = *(void *)(a2 + 192);
          if (!v59)
          {
LABEL_139:
            memset(buf, 0, 24);
            sub_7DCF4(buf, v99.__r_.__value_.__l.__cap_);
            BOOL v73 = v99.__r_.__value_.__r.__words[0];
            if ((std::string::size_type *)v99.__r_.__value_.__l.__data_ != &v99.__r_.__value_.__r.__words[1])
            {
              do
              {
                sub_20067C(buf, (const UInt8 *)(v73 + 32), (const void **)(v73 + 56));
                BOOL v74 = *(std::string **)(v73 + 8);
                if (v74)
                {
                  do
                  {
                    uint64_t v75 = v74;
                    BOOL v74 = (std::string *)v74->__r_.__value_.__r.__words[0];
                  }

                  while (v74);
                }

                else
                {
                  do
                  {
                    uint64_t v75 = *(std::string **)(v73 + 16);
                    unsigned int v5 = v75->__r_.__value_.__r.__words[0] == v73;
                    BOOL v73 = (std::string::size_type)v75;
                  }

                  while (!v5);
                }

                BOOL v73 = (std::string::size_type)v75;
              }

              while (v75 != (std::string *)&v99.__r_.__value_.__r.__words[1]);
            }

            uint64_t v76 = sub_7C1F4((void ***)buf);
            v100.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
            sub_7CFCC((void ***)&v100);
            sub_E5360((uint64_t)v76, 1LL, 6LL);
            if (v76) {
              CFRelease(v76);
            }
            sub_200798((void *)v99.__r_.__value_.__l.__size_);
            char v72 = 0;
            goto LABEL_149;
          }

          LODWORD(v100.__r_.__value_.__l.__data_) = (*(uint64_t (**)(uint64_t))(*(void *)v59 + 120LL))(v59);
          strcpy((char *)buf, "diabbolg");
          BYTE1(buf[0].mElement) = 0;
          HIWORD(buf[0].mElement) = 0;
          unsigned int v60 = sub_36EF4((AudioObjectID *)&v100, buf, 0, 0LL);
          *((void *)&v63 + 1) = v61;
          *(void *)&int v63 = v60;
          uint64_t v62 = v63 >> 32;
          if ((v62 & 0xFF00000000LL) != 0) {
            uint64_t v64 = v62;
          }
          else {
            uint64_t v64 = 0LL;
          }
          sub_2CA1C(&v100, v64);
          if ((v100.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v65 = &v100;
          }
          else {
            uint64_t v65 = (std::string *)v100.__r_.__value_.__r.__words[0];
          }
          v98.__r_.__value_.__r.__words[0] = (std::string::size_type)v65;
          sub_200624(buf, &v98.__r_.__value_.__l.__data_);
          sub_20050C((uint64_t **)&v99, (void **)buf, (__int128 *)buf);
          if (*(void *)&buf[2].mSelector) {
            CFRelease(*(CFTypeRef *)&buf[2].mSelector);
          }
          if (SHIBYTE(buf[1].mElement) < 0) {
            operator delete(*(void **)&buf[0].mSelector);
          }
        }

        goto LABEL_139;
      }

      unint64_t v36 = (os_log_t *)sub_138E8(24);
      uint64_t v37 = *v36;
      if (!*v36 || !os_log_type_enabled(*v36, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_154;
      }
      unint64_t v38 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 120LL))(v6);
      buf[0].mSelector = 136315650;
      *(void *)&buf[0].mScope = "PortUtilities.cpp";
      LOWORD(buf[1].mSelector) = 1024;
      *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 351;
      HIWORD(buf[1].mScope) = 1024;
      buf[1].mElement = v38;
      uint64_t v33 = "%25s:%-5d PlaybackDosimetry : device [%u] does not have a volume map.";
      uint64_t v34 = v37;
      unint64_t v35 = 24;
    }

    else
    {
      int v31 = (os_log_t *)sub_138E8(24);
      char v32 = *v31;
      if (!*v31 || !os_log_type_enabled(*v31, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_154;
      }
      buf[0].mSelector = 136315394;
      *(void *)&buf[0].mScope = "PortUtilities.cpp";
      LOWORD(buf[1].mSelector) = 1024;
      *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 356;
      uint64_t v33 = "%25s:%-5d PlaybackDosimetry : no device to fetch volume map from.";
      uint64_t v34 = v32;
      unint64_t v35 = 18;
    }

    _os_log_impl(&dword_0, v34, OS_LOG_TYPE_DEBUG, v33, (uint8_t *)buf, v35);
    goto LABEL_154;
  }

  if ((_DWORD)v4 != 1885892727)
  {
    sub_202848(a2, (uint64_t)v93, (char *)&__p);
    BOOL v24 = (os_log_t *)sub_138E8(24);
    BOOL v25 = *v24;
    if (!*v24 || !os_log_type_enabled(*v24, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_178;
    }
    sub_2CA1C(&v100, v4);
    if ((v100.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      os_signpost_id_t v26 = &v100;
    }
    else {
      os_signpost_id_t v26 = (std::string *)v100.__r_.__value_.__r.__words[0];
    }
    sub_2029E8(&v99, (float *)v93[0], (float *)v93[1]);
    uint64_t v27 = (char)v99.__r_.__value_.__s.__size_;
    unint64_t v28 = v99.__r_.__value_.__r.__words[0];
    sub_2029E8(&v98, (float *)__p, (float *)v92);
    uint64_t v29 = &v99;
    if (v27 < 0) {
      uint64_t v29 = (std::string *)v28;
    }
    if ((v98.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      unint64_t v30 = &v98;
    }
    else {
      unint64_t v30 = (std::string *)v98.__r_.__value_.__r.__words[0];
    }
    buf[0].mSelector = 136316162;
    *(void *)&buf[0].mScope = "PortUtilities.cpp";
    LOWORD(buf[1].mSelector) = 1024;
    *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 802;
    HIWORD(buf[1].mScope) = 2080;
    *(void *)&buf[1].mElement = v26;
    LOWORD(buf[2].mScope) = 2080;
    *(void *)((char *)&buf[2].mScope + 2) = v29;
    HIWORD(buf[3].mSelector) = 2080;
    *(void *)&buf[3].mScope = v30;
    _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d PlaybackDosimetry : Unsupported port type: %s. Returning volume curve for wired headset. In: %s -> Out: %s",  (uint8_t *)buf,  0x30u);
    goto LABEL_174;
  }

  sub_202848(a2, (uint64_t)v93, (char *)&__p);
  BOOL v17 = (os_log_t *)sub_138E8(24);
  uint64_t v18 = *v17;
  if (!*v17 || !os_log_type_enabled(*v17, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_178;
  }
  sub_2029E8(&v100, (float *)v93[0], (float *)v93[1]);
  unsigned int v19 = (char)v100.__r_.__value_.__s.__size_;
  uint64_t v20 = v100.__r_.__value_.__r.__words[0];
  sub_2029E8(&v99, (float *)__p, (float *)v92);
  unsigned int v21 = &v100;
  if (v19 < 0) {
    unsigned int v21 = (std::string *)v20;
  }
  if ((v99.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    BOOL v22 = &v99;
  }
  else {
    BOOL v22 = (std::string *)v99.__r_.__value_.__r.__words[0];
  }
  buf[0].mSelector = 136315906;
  *(void *)&buf[0].mScope = "PortUtilities.cpp";
  LOWORD(buf[1].mSelector) = 1024;
  *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 790;
  HIWORD(buf[1].mScope) = 2080;
  *(void *)&buf[1].mElement = v21;
  LOWORD(buf[2].mScope) = 2080;
  *(void *)((char *)&buf[2].mScope + 2) = v22;
  uint64_t v23 = "%25s:%-5d PlaybackDosimetry : volume curve for wired headset. In: %s -> Out: %s";
LABEL_173:
  _os_log_impl(&dword_0, v18, OS_LOG_TYPE_DEFAULT, v23, (uint8_t *)buf, 0x26u);
LABEL_174:
LABEL_178:
  sub_59370((CFStringRef *)buf, "InputMap");
  *(void *)&buf[0].mElement = sub_A9308((float **)v93);
  sub_59370((CFStringRef *)&buf[1].mScope, "OutputMap");
  *(void *)&buf[2].mSelector = sub_A9308((float **)&__p);
  v100.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
  v100.__r_.__value_.__l.__size_ = 2LL;
  int v87 = 0LL;
  *a1 = sub_5A950((uint64_t)&v100);
  do
  {
    std::string::size_type v88 = *(const void **)((char *)&buf[2].mSelector + v87);
    if (v88) {
      CFRelease(v88);
    }
    std::string::size_type v89 = *(const void **)((char *)&buf[1].mScope + v87);
    if (v89) {
      CFRelease(v89);
    }
    v87 -= 16LL;
  }

  while (v87 != -32);
  if (__p)
  {
    *(void *)&uint64_t v92 = __p;
    operator delete(__p);
  }

  if (v93[0])
  {
    v93[1] = v93[0];
    operator delete(v93[0]);
  }

              if (v10 < v33)
              {
                unint64_t v35 = *v10;
                void *v10 = *v33;
                *uint64_t v33 = v35;
                do
                {
                  unint64_t v36 = *(void *)(a3 + 24);
                  if (!v36) {
                    goto LABEL_142;
                  }
                  ++v10;
                }

                while (!(*(unsigned int (**)(uint64_t, int *, int *))(*(void *)v36 + 48LL))(v36, &v89, v10));
                while (1)
                {
                  uint64_t v37 = *(void *)(a3 + 24);
                  if (!v37) {
                    goto LABEL_142;
                  }
                  BOOL result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v37 + 48LL))(v37, &v89, --v33);
                  if ((result & 1) == 0) {
                    goto LABEL_57;
                  }
                }
              }

              unint64_t v38 = v10 - 1;
              if (v10 - 1 != v9) {
                *int v9 = *v38;
              }
              a5 = 0;
              *unint64_t v38 = v89;
              continue;
            }
          }

          std::string::size_type v89 = *v9;
          std::string::size_type v16 = v9;
          do
          {
            BOOL v17 = *(void *)(a3 + 24);
            if (!v17) {
              goto LABEL_142;
            }
            uint64_t v18 = v16++;
          }

          while (((*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v17 + 48LL))(v17, v16, &v89) & 1) != 0);
          unsigned int v19 = a2;
          if (v18 != v9)
          {
            while (1)
            {
              uint64_t v20 = *(void *)(a3 + 24);
              if (!v20) {
                goto LABEL_142;
              }
            }
          }

          unsigned int v19 = a2;
          do
          {
            if (v16 >= v19) {
              break;
            }
            unsigned int v21 = *(void *)(a3 + 24);
            if (!v21) {
              goto LABEL_142;
            }
            --v19;
          }

          while (((*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v21 + 48LL))(v21, v19, &v89) & 1) == 0);
LABEL_23:
          BOOL v22 = a2;
          if (v16 < v19)
          {
            uint64_t v23 = v16;
            BOOL v24 = v19;
            do
            {
              BOOL v25 = *v23;
              *uint64_t v23 = *v24;
              *BOOL v24 = v25;
              do
              {
                os_signpost_id_t v26 = *(void *)(a3 + 24);
                if (!v26) {
                  goto LABEL_142;
                }
                uint64_t v18 = v23++;
              }

              while (((*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v26 + 48LL))(v26, v23, &v89) & 1) != 0);
              do
              {
                uint64_t v27 = *(void *)(a3 + 24);
                if (!v27) {
                  goto LABEL_142;
                }
                --v24;
              }

              while (!(*(unsigned int (**)(uint64_t, int *, int *))(*(void *)v27 + 48LL))(v27, v24, &v89));
            }

            while (v23 < v24);
          }

          if (v18 != v9) {
            *int v9 = *v18;
          }
          std::__shared_weak_count *v18 = v89;
          a2 = v22;
          if (v16 < v19)
          {
LABEL_36:
            BOOL result = sub_2DEFE0(v9, v18, a3, a4, a5 & 1);
            a5 = 0;
            uint64_t v10 = v18 + 1;
            continue;
          }

          unint64_t v28 = sub_2DFBC4(v9, v18, a3);
          uint64_t v10 = v18 + 1;
          BOOL result = sub_2DFBC4(v18 + 1, v22, a3);
          if (!(_DWORD)result)
          {
            if (!v28) {
              goto LABEL_36;
            }
            continue;
          }

          a2 = v18;
          if (v28) {
            return result;
          }
          goto LABEL_2;
        }

        if (v9 != a2)
        {
          char v51 = (v12 - 2) >> 1;
          int v87 = v51;
          unsigned __int8 v83 = a2;
          do
          {
            os_signpost_id_t v52 = v51;
            if (v87 >= v51)
            {
              BOOL v53 = (2 * v51) | 1;
              uint64_t v54 = &v9[v53];
              if (2 * v51 + 2 < (uint64_t)v12)
              {
                uint64_t v55 = *(void *)(a3 + 24);
                if (!v55) {
                  goto LABEL_142;
                }
                if ((*(unsigned int (**)(uint64_t, int *, int *))(*(void *)v55 + 48LL))( v55,  &v9[v53],  v54 + 1))
                {
                  ++v54;
                  BOOL v53 = 2 * v52 + 2;
                }
              }

              uint64_t v56 = *(void *)(a3 + 24);
              if (!v56) {
                goto LABEL_142;
              }
              uint64_t v57 = &v9[v52];
              BOOL result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v56 + 48LL))(v56, v54, v57);
              if ((result & 1) == 0)
              {
                std::string::size_type v89 = *v57;
                do
                {
                  uint64_t v58 = v54;
                  *uint64_t v57 = *v54;
                  if (v87 < v53) {
                    break;
                  }
                  uint64_t v59 = (2 * v53) | 1;
                  uint64_t v54 = &v9[v59];
                  BOOL v53 = 2 * v53 + 2;
                  if (v53 >= (uint64_t)v12)
                  {
                    BOOL v53 = v59;
                  }

                  else
                  {
                    unsigned int v60 = *(void *)(a3 + 24);
                    if (!v60) {
                      goto LABEL_142;
                    }
                    if ((*(unsigned int (**)(uint64_t, int *, int *))(*(void *)v60 + 48LL))( v60,  &v9[v59],  v54 + 1))
                    {
                      ++v54;
                    }

                    else
                    {
                      BOOL v53 = v59;
                    }
                  }

                  int v61 = *(void *)(a3 + 24);
                  if (!v61) {
                    goto LABEL_142;
                  }
                  BOOL result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v61 + 48LL))(v61, v54, &v89);
                  uint64_t v57 = v58;
                }

                while (!(_DWORD)result);
                *uint64_t v58 = v89;
                a2 = v83;
              }
            }

            char v51 = v52 - 1;
          }

          while (v52);
          uint64_t v62 = (unint64_t)v11 >> 2;
          do
          {
            int v63 = a2;
            uint64_t v64 = 0LL;
            std::string::size_type v88 = *v9;
            uint64_t v65 = v62 - 2;
            if (v62 < 2) {
              uint64_t v65 = v62 - 1;
            }
            uint64_t v66 = v65 >> 1;
            BOOL v67 = v9;
            do
            {
              uint64_t v68 = &v67[v64 + 1];
              uint64_t v69 = (2 * v64) | 1;
              BOOL v70 = 2 * v64 + 2;
              if (v70 < v62)
              {
                char v71 = *(void *)(a3 + 24);
                if (!v71) {
                  goto LABEL_142;
                }
                BOOL result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v71 + 48LL))( v71,  &v67[v64 + 1],  &v67[v64 + 2]);
                if ((_DWORD)result)
                {
                  ++v68;
                  uint64_t v69 = v70;
                }
              }

              *BOOL v67 = *v68;
              BOOL v67 = v68;
              uint64_t v64 = v69;
            }

            while (v69 <= v66);
            a2 = v63 - 1;
            if (v68 == v63 - 1)
            {
              *uint64_t v68 = v88;
            }

            else
            {
              *uint64_t v68 = *a2;
              *a2 = v88;
              char v72 = (char *)v68 - (char *)v9 + 4;
              if (v72 >= 5)
              {
                BOOL v73 = *(void *)(a3 + 24);
                if (!v73) {
                  goto LABEL_142;
                }
                BOOL v74 = (unint64_t)((v72 >> 2) - 2) >> 1;
                uint64_t v75 = &v9[v74];
                BOOL result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v73 + 48LL))(v73, v75, v68);
                if ((_DWORD)result)
                {
                  std::string::size_type v89 = *v68;
                  do
                  {
                    uint64_t v76 = v75;
                    *uint64_t v68 = *v75;
                    if (!v74) {
                      break;
                    }
                    BOOL v77 = *(void *)(a3 + 24);
                    if (!v77) {
                      goto LABEL_142;
                    }
                    BOOL v74 = (v74 - 1) >> 1;
                    uint64_t v75 = &v9[v74];
                    BOOL result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v77 + 48LL))(v77, v75, &v89);
                    uint64_t v68 = v76;
                  }

                  while ((result & 1) != 0);
                  *uint64_t v76 = v89;
                }
              }
            }
          }

          while (v62-- > 2);
        }

        return result;
    }
  }

    if (!a6[1].__r_.__value_.__s.__data_[0])
    {
LABEL_72:
      sub_2FDDB8((uint64_t)v94, (uint64_t)v91);
      memset(buf, 0, 32);
      LODWORD(buf[1].__r_.__value_.__r.__words[1]) = 1065353216;
      unint64_t v45 = *a8;
      if ((((char *)a8[1] - (char *)*a8) & 0x7FFFFFFF8LL) != 0)
      {
        uint64_t v46 = 0LL;
        do
        {
          unint64_t v47 = *(void *)&v45[2 * v46];
          LODWORD(__p.__r_.__value_.__l.__data_) = 7;
          __p.__r_.__value_.__l.__size_ = v47;
          LODWORD(__p.__r_.__value_.__r.__words[2]) = 7;
          char v102 = HIDWORD(v47);
          sub_149910(v97, (uint64_t)&__p, 2LL);
          sub_2DC204((uint64_t)v98, (uint64_t)v97);
          LODWORD(v99) = v46;
          sub_2DC450((uint64_t)v100, (uint64_t)v98);
          sub_148DB8((uint64_t)buf, (int)v99, &v99);
          sub_2DBF5C((uint64_t)v100);
          sub_2DBF5C((uint64_t)v98);
          sub_149990(v97);
          for (uint64_t i = 16LL; i != -16; i -= 16LL)
            sub_2DBF5C((uint64_t)&__p + i);
          ++v46;
          unint64_t v45 = *a8;
        }

        while (v46 < ((unint64_t)((char *)a8[1] - (char *)*a8) >> 3));
      }

      sub_2DC194((uint64_t)&v99, (uint64_t)buf);
      LODWORD(__p.__r_.__value_.__l.__data_) = 1685088623;
      sub_2DC450((uint64_t)&__p.__r_.__value_.__l.__size_, (uint64_t)&v99);
      sub_148DB8((uint64_t)v94, (int)__p.__r_.__value_.__l.__data_, &__p);
      sub_2DBF5C((uint64_t)&__p.__r_.__value_.__l.__size_);
      sub_2DBF5C((uint64_t)&v99);
      sub_D0C4C((void *)buf[0].__r_.__value_.__l.__cap_);
      int v49 = (void *)buf[0].__r_.__value_.__r.__words[0];
      buf[0].__r_.__value_.__r.__words[0] = 0LL;
      if (v49) {
        operator delete(v49);
      }
      uint64_t v50 = *a8;
      char v51 = a8[1];
      if (*a8 != v51)
      {
        os_signpost_id_t v52 = 0;
        BOOL v53 = *a8;
        do
        {
          uint64_t v54 = *v53;
          v53 += 2;
          if (v54) {
            ++v52;
          }
        }

        while (v53 != v51);
        if (v52 >= 2)
        {
          LODWORD(__p.__r_.__value_.__l.__data_) = 7;
          __p.__r_.__value_.__l.__size_ = v52;
          LODWORD(buf[0].__r_.__value_.__l.__data_) = 1684171107;
          sub_2DC450((uint64_t)&buf[0].__r_.__value_.__l.__size_, (uint64_t)&__p);
          sub_148DB8((uint64_t)v94, (int)buf[0].__r_.__value_.__l.__data_, buf);
          sub_2DBF5C((uint64_t)&buf[0].__r_.__value_.__l.__size_);
          sub_2DBF5C((uint64_t)&__p);
          uint64_t v50 = *a8;
          char v51 = a8[1];
        }

        if (v50 != v51)
        {
          uint64_t v55 = 0;
          do
          {
            if (v50[1]) {
              ++v55;
            }
            v50 += 2;
          }

          while (v50 != v51);
          if (v55 >= 2)
          {
            LODWORD(__p.__r_.__value_.__l.__data_) = 7;
            __p.__r_.__value_.__l.__size_ = v55;
            LODWORD(buf[0].__r_.__value_.__l.__data_) = 1684172643;
            sub_2DC450((uint64_t)&buf[0].__r_.__value_.__l.__size_, (uint64_t)&__p);
            sub_148DB8((uint64_t)v94, (int)buf[0].__r_.__value_.__l.__data_, buf);
            sub_2DBF5C((uint64_t)&buf[0].__r_.__value_.__l.__size_);
            sub_2DBF5C((uint64_t)&__p);
          }
        }
      }

      if (a11)
      {
        for (uint64_t j = *(uint64_t **)(a10 + 16); j; uint64_t j = (uint64_t *)*j)
        {
          uint64_t v57 = (int *)(j + 2);
          uint64_t v58 = *((_DWORD *)j + 4);
          if (sub_149814((uint64_t)v94[0], (unint64_t)v94[1], v58))
          {
            if (*((_DWORD *)j + 6) == 15)
            {
              uint64_t v59 = (os_log_t *)sub_138E8(20);
              unsigned int v60 = *v59;
              if (*v59 && os_log_type_enabled(*v59, OS_LOG_TYPE_INFO))
              {
                int v61 = *v57;
                uint64_t v62 = "unknown";
                sub_7D084(&__p, v62);
                if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  p_p = &__p;
                }
                else {
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
                *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"RoutingSettings_Aspen.cpp";
                WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1853;
                WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
                *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)p_p;
                _os_log_impl( &dword_0,  v60,  OS_LOG_TYPE_INFO,  "%25s:%-5d Merging Maps for key %s",  (uint8_t *)buf,  0x1Cu);
              }

              uint64_t v64 = sub_2DD064((int *)j + 6);
              uint64_t v65 = sub_149814((uint64_t)v94[0], (unint64_t)v94[1], *v57);
              if (*((_DWORD *)v65 + 6) != 15)
              {
                uint64_t v86 = (os_log_t *)sub_138E8(13);
                int v87 = *v86;
                if (*v86 && os_log_type_enabled(*v86, OS_LOG_TYPE_ERROR))
                {
                  LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
                  *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"RoutingSettings_Aspen.cpp";
                  WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
                  *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1857;
                  _os_log_impl( &dword_0,  v87,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)buf,  0x12u);
                }

                exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(exception, "Precondition failure.");
              }

              uint64_t v66 = sub_2DD064((int *)v65 + 6);
              sub_D1274((uint64_t)buf, v66);
              sub_2FDF90((uint64_t)&__p, v94, v65);
              sub_D171C((uint64_t)&__p);
              sub_2DC194((uint64_t)&v99, (uint64_t)buf);
              LODWORD(__p.__r_.__value_.__l.__data_) = *v57;
              sub_2DC450((uint64_t)&__p.__r_.__value_.__l.__size_, (uint64_t)&v99);
              sub_148DB8((uint64_t)v94, (int)__p.__r_.__value_.__l.__data_, &__p);
              sub_2DBF5C((uint64_t)&__p.__r_.__value_.__l.__size_);
              sub_2DBF5C((uint64_t)&v99);
              sub_D0C4C((void *)buf[0].__r_.__value_.__l.__cap_);
              uint64_t v68 = (void *)buf[0].__r_.__value_.__r.__words[0];
              buf[0].__r_.__value_.__r.__words[0] = 0LL;
              if (!v68) {
                continue;
              }
            }

            else
            {
              uint64_t v69 = (os_log_t *)sub_138E8(20);
              BOOL v70 = *v69;
              if (!*v69 || !os_log_type_enabled(*v69, OS_LOG_TYPE_ERROR)) {
                continue;
              }
              char v71 = *v57;
              char v72 = "unknown";
              sub_7D084(&__p, v72);
              BOOL v73 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0
                  ? &__p
                  : (std::string *)__p.__r_.__value_.__r.__words[0];
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"RoutingSettings_Aspen.cpp";
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1868;
              WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v73;
              _os_log_impl( &dword_0,  v70,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Key (%s) is already present in DSP Info Map",  (uint8_t *)buf,  0x1Cu);
              uint64_t v68 = (void *)__p.__r_.__value_.__r.__words[0];
            }

            operator delete(v68);
          }

          else
          {
            sub_D14D8((uint64_t)v94, v58, (_DWORD *)j + 4);
          }
        }
      }

      if (a9 != 0.0)
      {
        *(float64x2_t *)&__p.__r_.__value_.__l.__data_ = vaddq_f64( (float64x2_t)vdupq_lane_s64(COERCE__INT64(a9), 0),  (float64x2_t)xmmword_403330);
        sub_157A88( (uint64_t)buf,  0,  *(double *)&__p.__r_.__value_.__l.__data_,  *(double *)&__p.__r_.__value_.__l.__size_);
        BOOL v74 = atomic_load((unsigned __int8 *)&qword_49D960);
        if ((v74 & 1) == 0 && __cxa_guard_acquire(&qword_49D960))
        {
          sub_303B1C(&qword_49D950, &__p, (__n128 *)buf, 1987013749, 1986359655);
          __cxa_guard_release(&qword_49D960);
        }

        uint64_t v75 = qword_49D950;
        uint64_t v76 = *(std::__shared_weak_count **)algn_49D958;
        uint64_t v99 = (CFStringRef)qword_49D950;
        v100[0] = *(void *)algn_49D958;
        if (*(void *)algn_49D958)
        {
          BOOL v77 = (unint64_t *)(*(void *)algn_49D958 + 8LL);
          do
            uint64_t v78 = __ldxr(v77);
          while (__stxr(v78 + 1, v77));
        }

        sub_143208(a1, v75, (uint64_t)v76);
        if (v76)
        {
          p_shared_owners = (unint64_t *)&v76->__shared_owners_;
          do
            BOOL v80 = __ldaxr(p_shared_owners);
          while (__stlxr(v80 - 1, p_shared_owners));
          if (!v80)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            std::__shared_weak_count::__release_weak(v76);
          }
        }

        sub_32C8C((void *)buf[0].__r_.__value_.__l.__cap_);
      }

      uint64_t v81 = sub_D1274((uint64_t)buf, (uint64_t)v94);
      uint64_t v82 = sub_2FE168(v81);
      sub_D0C4C((void *)buf[0].__r_.__value_.__l.__cap_);
      unsigned __int8 v83 = (void *)buf[0].__r_.__value_.__r.__words[0];
      buf[0].__r_.__value_.__r.__words[0] = 0LL;
      if (v83) {
        operator delete(v83);
      }
      sub_2FE1F0(a1, (uint64_t)v82);
      goto LABEL_137;
    }

    sub_7D084(buf, ".propstrip");
    sub_30372C((std::__fs::filesystem::path *)&__p, a4, a6, (char *)buf);
    os_signpost_id_t v40 = (os_log_t *)sub_138E8(20);
    int v41 = *v40;
    if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_DEBUG))
    {
      __int16 v42 = &__p;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        __int16 v42 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"RoutingSettings_Aspen.cpp";
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1822;
      WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v42;
      _os_log_impl(&dword_0, v41, OS_LOG_TYPE_DEBUG, "%25s:%-5d strip path is %s", (uint8_t *)buf, 0x1Cu);
    }

    sub_303A2C((uint64_t)buf, (__int128 *)&__p, 1886548848);
    sub_2DC2E4((uint64_t)v97, (uint64_t)buf);
    LODWORD(v99) = 1886548848;
    sub_2DC450((uint64_t)v100, (uint64_t)v97);
    sub_148DB8((uint64_t)v91, (int)v99, &v99);
    sub_2DBF5C((uint64_t)v100);
    sub_2DBF5C((uint64_t)v97);
    BOOL v43 = (std::string *)buf[1].__r_.__value_.__l.__data_;
    if ((std::string *)buf[1].__r_.__value_.__l.__data_ == buf)
    {
      __int16 v44 = 4LL;
      BOOL v43 = buf;
    }

    else
    {
      if (!buf[1].__r_.__value_.__r.__words[0]) {
        goto LABEL_70;
      }
      __int16 v44 = 5LL;
    }

    (*(void (**)(void))(v43->__r_.__value_.__r.__words[0] + 8 * v44))();
LABEL_70:
    goto LABEL_72;
  }

LABEL_125:
            uint64_t v82 = *(void *)(a5 + 8);
            uint64_t v81 = *(void *)(a5 + 16);
            if (sub_12775C(a4, v82, v81, v185, (uint64_t *)v207, v62)
              && sub_12775C(a4, v82, v81, v185, (uint64_t *)v207, v69))
            {
LABEL_127:
              if ((sub_14F834() & 1) == 0
                && sub_EAA74("VA_BuildAlternateRoutesAndActivateForLastInWins", 0x2FuLL) == &qword_4938E0)
              {
                os_signpost_id_t v84 = 0LL;
              }

              else
              {
                unsigned __int8 v83 = atomic_load((unsigned __int8 *)&qword_493908);
                if ((v83 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
                {
                  qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
                  __cxa_guard_release(&qword_493908);
                }

                os_signpost_id_t v84 = os_signpost_id_generate((os_log_t)qword_493900);
                unsigned __int8 v85 = atomic_load((unsigned __int8 *)&qword_493908);
                if ((v85 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
                {
                  qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
                  __cxa_guard_release(&qword_493908);
                }

                if (v84 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  uint64_t v86 = (os_log_s *)qword_493900;
                  if (os_signpost_enabled((os_log_t)qword_493900))
                  {
                    sub_2DA6D0(&__p, (unsigned int ***)v207);
                    int v87 = (char)__p.__r_.__value_.__s.__size_;
                    std::string::size_type v88 = __p.__r_.__value_.__r.__words[0];
                    sub_2DABA8(&v211, v56 + 16);
                    p_p = &__p;
                    if (v87 < 0) {
                      p_p = (std::string *)v88;
                    }
                    uint64_t v90 = &v211;
                    if ((v211.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                      uint64_t v90 = (std::string *)v211.__r_.__value_.__r.__words[0];
                    }
                    *(_DWORD *)v212 = 136315394;
                    *(void *)&v212[4] = p_p;
                    *(_WORD *)&v212[12] = 2080;
                    *(void *)&v212[14] = v90;
                    _os_signpost_emit_with_name_impl( &dword_0,  v86,  OS_SIGNPOST_INTERVAL_BEGIN,  v84,  "VA_BuildAlternateRoutesAndActivateForLastInWins",  "ActivateForLastInWins, Primary route = %s, Abstract route =%s",  v212,  0x16u);
                  }
                }
              }

              sub_1278E8(&v200, v84);
              sub_11DE5C( (uint64_t)&v190,  a2,  (std::string::size_type)v207,  *(uint64_t **)(v56 + 104),  a5,  (uint64_t *)v199);
              if (!LODWORD(v190.__r_.__value_.__r.__words[1]))
              {
                sub_1279C8(&v200);
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v207;
                sub_11E38C((void ***)&__p);
                int v93 = 1;
LABEL_172:
                a3 = v178;
LABEL_157:
                uint64_t v94 = v202;
                if (v202)
                {
                  uint64_t v95 = (unint64_t *)&v202->__shared_owners_;
                  do
                    unint64_t v96 = __ldaxr(v95);
                  while (__stlxr(v96 - 1, v95));
                  if (!v96)
                  {
                    ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                    std::__shared_weak_count::__release_weak(v94);
                  }
                }

                if (v93 != 3 && v93) {
                  goto LABEL_225;
                }
LABEL_164:
                v22 += 2;
                std::string::size_type v97 = v203.__r_.__value_.__l.__size_;
                if (v22 != (os_signpost_id_t *)v203.__r_.__value_.__l.__size_)
                {
                  do
                  {
                    v22 += 2;
                  }

                  while (v22 != (os_signpost_id_t *)v97);
                  BOOL v22 = (os_signpost_id_t *)v97;
                }

    uint64_t v58 = (os_log_t *)sub_138E8(1);
    uint64_t v59 = *v58;
    if (*v58 && os_log_type_enabled(*v58, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, *a2);
      if (v62 >= 0) {
        unsigned int v60 = __p;
      }
      else {
        unsigned int v60 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_DevicePropertyCache.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 218;
      uint64_t v64 = 2080;
      uint64_t v65 = v60;
      _os_log_impl(&dword_0, v59, OS_LOG_TYPE_ERROR, "%25s:%-5d Unhandled selector: '%s'", buf, 0x1Cu);
      if (v62 < 0) {
        operator delete(__p[0]);
      }
    }

    return;
  }

  if (v6 > 1634692198)
  {
    if ((v6 - 1635152993) <= 0xE && ((1 << (v6 - 97)) & 0x4015) != 0
      || v6 == 1634692199
      || v6 == 1634694002)
    {
      goto LABEL_106;
    }

    goto LABEL_125;
  }

  if (v6 <= 1633973867)
  {
    if (v6 == 1064725619) {
      goto LABEL_97;
    }
    if (v6 != 1165513555) {
      goto LABEL_125;
    }
    goto LABEL_107;
  }

  if (v6 == 1633973868) {
    goto LABEL_97;
  }
  if (v6 != 1634689389)
  {
    uint64_t v7 = 1634690413;
    goto LABEL_14;
  }

LABEL_211:
                    v203.__r_.__value_.__r.__words[0] = (std::string::size_type)&v211;
                    sub_11E38C((void ***)&v203);
                    uint64_t v103 = *(void *)(v103 + 8);
                    uint64_t v122 = *v105;
                    if (v103 == *v105)
                    {
                      a5 = v187;
                    }

                    else
                    {
                      a5 = v187;
                      while (!sub_11E3FC(v106, v103 + 16))
                      {
                        uint64_t v103 = *(void *)(v103 + 8);
                        if (v103 == v122)
                        {
                          uint64_t v103 = v122;
                          break;
                        }
                      }
                    }

                    if (v103 == v104) {
                      goto LABEL_223;
                    }
                  }
                }

                continue;
              }

              v190.__r_.__value_.__r.__words[0] = (std::string::size_type)off_4709D0;
              uint64_t v91 = (void *)v190.__r_.__value_.__l.__cap_;
              if (v190.__r_.__value_.__l.__cap_)
              {
                sub_10AF78((uint64_t *)(v190.__r_.__value_.__l.__cap_ + 16));
                operator delete(v91);
              }

              sub_1279C8(&v200);
            }
          }

          break;
        }

        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v207;
        sub_11E38C((void ***)&__p);
        uint64_t v56 = *(void *)(v56 + 8);
        uint64_t v92 = *v183;
        if (v56 != *v183)
        {
          do
          {
            if (sub_11E3FC(v180, v56 + 16)) {
              goto LABEL_150;
            }
            uint64_t v56 = *(void *)(v56 + 8);
          }

          while (v56 != v92);
          uint64_t v56 = v92;
        }

            sub_32C38(v77, (uint64_t)v113, v114, (uint64_t *)v107);
            if (v108) {
              std::string::size_type v108 = sub_68080((uint64_t)v108);
            }
            else {
              std::string::size_type v108 = 0LL;
            }
            unsigned __int8 v115 = v109[1];
            if (v115)
            {
              do
              {
                uint64_t v105 = (void **)v115;
                unsigned __int8 v115 = (void *)*v115;
              }

              while (v115);
            }

            else
            {
              do
              {
                uint64_t v105 = (void **)v109[2];
                char v72 = *v105 == v109;
                uint64_t v109 = v105;
              }

              while (!v72);
            }

            if (!v110) {
              break;
            }
            std::string::size_type v107 = (uint64_t)v110;
            uint64_t v109 = v105;
          }

          while (v105 != v228);
        }

        sub_32C8C(v110);
        if (v108)
        {
          for (uint64_t j = (void *)v108[2]; j; uint64_t j = (void *)j[2])
            std::string::size_type v108 = j;
          sub_32C8C(v108);
        }
      }

      else
      {
        sub_32C8C(0LL);
      }
    }

    if (v105 != v228)
    {
      do
      {
        int v117 = (uint64_t *)operator new(0x20uLL);
        std::string::size_type v118 = *((_DWORD *)v105 + 7);
        *((_DWORD *)v117 + 7) = v118;
        uint64_t v119 = *v79;
        uint64_t v120 = (uint64_t **)v79;
        char v121 = (uint64_t **)v79;
        if (*v79)
        {
          do
          {
            while (1)
            {
              uint64_t v120 = (uint64_t **)v119;
              if (v118 >= *(_DWORD *)(v119 + 28)) {
                break;
              }
              uint64_t v119 = *(void *)v119;
              char v121 = v120;
              if (!*v120) {
                goto LABEL_237;
              }
            }

            uint64_t v119 = *(void *)(v119 + 8);
          }

          while (v119);
          char v121 = v120 + 1;
        }

LABEL_305:
  sub_11E670(v199, (uint64_t)(a2 + 63));
  *(void *)buf = v199;
  sub_A0CF0((void ***)buf);
}

      v217 = v516 + 3;
      v218 = 24LL;
      if (v193) {
        v218 = 48LL;
      }
      v515 = v218;
      if (v193) {
        v217 = v516 + 6;
      }
      v514 = v217;
      unsigned int v219 = sub_138E8(16);
      BOOL v220 = sub_138E8(33);
      BOOL v221 = 0;
      v222 = 0LL;
      v554[0].__r_.__value_.__r.__words[0] = 0x100000002LL;
      unsigned int v223 = *(void *)(v219 + 8);
      while (1)
      {
        BOOL v224 = *((int *)&v554[0].__r_.__value_.__l.__data_ + v222);
        BOOL v225 = v221;
        if (((v223 & v224) != 0) != ((*(void *)(v220 + 8) & v224) != 0)) {
          break;
        }
        BOOL v221 = 1;
        v222 = 1LL;
        if ((v225 & 1) != 0)
        {
          if ((v223 & 1) == 0) {
            goto LABEL_324;
          }
          goto LABEL_317;
        }
      }

      if ((v223 & v224) == 0) {
        unsigned int v219 = v220;
      }
      if ((*(void *)(v219 + 8) & 1) != 0)
      {
LABEL_317:
        v226 = *(os_log_s **)v219;
        if (*(void *)v219 && os_log_type_enabled(*(os_log_t *)v219, OS_LOG_TYPE_DEBUG))
        {
          sub_7D084(__src, __s);
          v227 = __src[5] >= 0 ? __src : *(_DWORD **)__src;
          LODWORD(v554[0].__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)v554[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"AggregateDevice_Multi.cpp";
          WORD2(v554[0].__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&v554[0].__r_.__value_.__r.__words[1] + 6) = 193;
          WORD1(v554[0].__r_.__value_.__r.__words[2]) = 2080;
          *(std::string::size_type *)((char *)&v554[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)v227;
          _os_log_impl(&dword_0, v226, OS_LOG_TYPE_DEBUG, "%25s:%-5d - direction: %s", (uint8_t *)v554, 0x1Cu);
          if (SHIBYTE(__src[5]) < 0) {
            operator delete(*(void **)__src);
          }
        }
      }

void sub_11C480( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, void *__p, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, char a47)
{
  a33 = (uint64_t)&a47;
  sub_A0CF0((void ***)&a33);
  sub_7058C(a19);
  _Unwind_Resume(a1);
}

void *sub_11C618(uint64_t a1, void *__p, void *a3)
{
  if (__p != a3)
  {
    uint64_t v4 = __p;
    uint64_t v6 = *a3;
    uint64_t v7 = *__p;
    *(void *)(v7 + 8) = *(void *)(*a3 + 8LL);
    **(void **)(v6 + 8) = v7;
    do
    {
      BOOL v8 = (void *)v4[1];
      --*(void *)(a1 + 16);
      int v9 = (std::__shared_weak_count *)v4[3];
      if (v9) {
        std::__shared_weak_count::__release_weak(v9);
      }
      operator delete(v4);
      uint64_t v4 = v8;
    }

    while (v8 != a3);
  }

  return a3;
}

uint64_t sub_11C698(uint64_t a1)
{
  return a1;
}

void sub_11C6C8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (((*(uint64_t (**)(void))(qword_48F828 + 48))() & 1) == 0)
  {
    unsigned int v204 = (os_log_t *)sub_138E8(13);
    uint64_t v205 = *v204;
    if (*v204 && os_log_type_enabled(*v204, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2507;
      _os_log_impl(&dword_0, v205, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (!*(void *)(a3 + 16))
  {
    BOOL v207 = (os_log_t *)sub_138E8(13);
    uint64_t v208 = *v207;
    if (*v207 && os_log_type_enabled(*v207, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2508;
      _os_log_impl(&dword_0, v208, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    uint64_t v209 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v209, "Precondition failure.");
  }

  uint64_t v8 = sub_138E8(8);
  if ((*(_BYTE *)(v8 + 8) & 1) != 0)
  {
    int v9 = *(os_log_s **)v8;
    if (*(void *)v8)
    {
      if (os_log_type_enabled(*(os_log_t *)v8, OS_LOG_TYPE_DEBUG))
      {
        sub_1263EC(v233, (os_unfair_lock_s **)a5);
        uint64_t v10 = v233[23] >= 0 ? v233 : *(_BYTE **)v233;
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2511;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v10;
        _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Activating for category kVirtualAudioPlugInRoutingCategoryMulti.  Override port: %s",  buf,  0x1Cu);
        if ((v233[23] & 0x80000000) != 0) {
          operator delete(*(void **)v233);
        }
      }
    }
  }

  *(void *)a1 = off_4709D0;
  *(void *)(a1 + 8) = 1LL;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  uint64_t v11 = *(std::__shared_weak_count **)(a5 + 8);
  if (v11 && (std::string::size_type v12 = std::__shared_weak_count::lock(v11)) != 0LL)
  {
    uint64_t v13 = v12;
    v213 = *(os_unfair_lock_s **)a5;
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      unint64_t v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  else
  {
    v213 = 0LL;
  }

  memset(v228, 0, sizeof(v228));
  BOOL v16 = *(_DWORD *)(a3 + 32) == 1668510820;
  *(_OWORD *)&v233[3] = *(_OWORD *)(a4 + 8);
  _DWORD buf[16] = v16;
  *(_OWORD *)&buf[17] = *(_OWORD *)v233;
  *(_DWORD *)&uint8_t buf[32] = *(_DWORD *)&v233[15];
  *(void *)buf = a3;
  *(void *)&buf[8] = a4 + 24;
  uint64_t v236 = 0LL;
  uint64_t v237 = 0LL;
  uint64_t v17 = sub_11DDE4((uint64_t *)buf);
  v217 = v18;
  uint64_t v19 = v17;
  uint64_t v216 = *(void *)buf;
  if (*(void *)buf != v17)
  {
    BOOL v220 = (void *)(a3 + 72);
    std::string v211 = (void *)a5;
    v212 = a2;
    uint64_t v215 = a3;
    uint64_t v210 = (uint64_t)(v18 + 1);
    while (1)
    {
      uint64_t v219 = v19;
      sub_70C60(&v227, a2, v19 + 16, a3, a4);
      if (v227.i64[0] != v227.i64[1])
      {
        if (v227.i64[1] - v227.i64[0] != 8)
        {
          v199 = (os_log_t *)sub_138E8(13);
          os_signpost_id_t v200 = *v199;
          if (*v199 && os_log_type_enabled(*v199, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t v233 = 136315394;
            *(void *)&v233[4] = "RoutingManager.cpp";
            *(_WORD *)&v233[12] = 1024;
            *(_DWORD *)&v233[14] = 2528;
            _os_log_impl( &dword_0,  v200,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Multi does not support decoupled IO routing.",  v233,  0x12u);
          }

          os_signpost_id_t v201 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v201, "Multi does not support decoupled IO routing.");
LABEL_336:
        }

        uint64_t v20 = sub_138E8(8);
        if ((*(_BYTE *)(v20 + 8) & 1) != 0)
        {
          unsigned int v21 = *(os_log_s **)v20;
          if (*(void *)v20)
          {
            if (os_log_type_enabled(*(os_log_t *)v20, OS_LOG_TYPE_DEBUG))
            {
              sub_2DA6D0(&v230, (unsigned int ***)&v227);
              BOOL v22 = &v230;
              if ((v230.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                BOOL v22 = (std::string *)v230.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)uint64_t v233 = 136315650;
              *(void *)&v233[4] = "RoutingManager.cpp";
              *(_WORD *)&v233[12] = 1024;
              *(_DWORD *)&v233[14] = 2529;
              *(_WORD *)&v233[18] = 2080;
              *(void *)&v233[20] = v22;
              _os_log_impl(&dword_0, v21, OS_LOG_TYPE_DEBUG, "%25s:%-5d Built concrete route(s): %s.", v233, 0x1Cu);
            }
          }
        }

        __int128 v23 = 0uLL;
        memset(&__p, 0, sizeof(__p));
        BOOL v24 = (std::string::size_type *)a2[63];
        BOOL v25 = (std::string::size_type *)a2[64];
        if (v24 != v25)
        {
          while (1)
          {
            v224.__r_.__value_.__r.__words[0] = 0LL;
            os_signpost_id_t v26 = (std::__shared_weak_count *)v24[1];
            if (v26) {
              break;
            }
LABEL_95:
            v24 += 2;
            if (v24 == v25)
            {
              __int128 v23 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              std::string::size_type cap = __p.__r_.__value_.__l.__cap_;
              goto LABEL_98;
            }
          }

          uint64_t v27 = std::__shared_weak_count::lock(v26);
          v224.__r_.__value_.__l.__size_ = (std::string::size_type)v27;
          if (v27)
          {
            v224.__r_.__value_.__r.__words[0] = *v24;
            if (!v224.__r_.__value_.__r.__words[0]) {
              goto LABEL_90;
            }
          }

          else if (!v224.__r_.__value_.__r.__words[0])
          {
LABEL_90:
            if (v27)
            {
              BOOL v74 = (unint64_t *)&v27->__shared_owners_;
              do
                unint64_t v75 = __ldaxr(v74);
              while (__stlxr(v75 - 1, v74));
              if (!v75)
              {
                ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                std::__shared_weak_count::__release_weak(v27);
              }
            }

            goto LABEL_95;
          }

          __int128 v28 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          int64_t v29 = __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0];
          uint64_t v30 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4;
          std::string::size_type v31 = __p.__r_.__value_.__r.__words[0]
              + ((__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) & 0xFFFFFFFFFFFFFFF0LL);
          if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__l.__cap_)
          {
            uint64_t v42 = v30 + 1;
            unint64_t v43 = (uint64_t)(__p.__r_.__value_.__l.__cap_ - __p.__r_.__value_.__r.__words[0]) >> 3;
            if (v43 <= v42) {
              unint64_t v43 = v30 + 1;
            }
            if (__p.__r_.__value_.__l.__cap_ - __p.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF0LL) {
              unint64_t v44 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v44 = v43;
            }
            p_std::string::size_type cap = &__p.__r_.__value_.__l.__cap_;
            if (v44) {
              unint64_t v44 = (unint64_t)sub_7BE90(v44);
            }
            else {
              uint64_t v45 = 0LL;
            }
            int v49 = (void *)(v44 + 16 * v30);
            v230.__r_.__value_.__r.__words[0] = v44;
            v230.__r_.__value_.__l.__size_ = (std::string::size_type)v49;
            v230.__r_.__value_.__l.__cap_ = (std::string::size_type)v49;
            std::string::size_type v231 = v44 + 16 * v45;
            if (v30 == v45)
            {
              if (v29 < 1)
              {
                if ((void)v28 == *((void *)&v28 + 1)) {
                  unint64_t v51 = 1LL;
                }
                else {
                  unint64_t v51 = v29 >> 3;
                }
                *(void *)&v233[32] = &__p.__r_.__value_.__l.__cap_;
                os_signpost_id_t v52 = (char *)sub_7BE90(v51);
                std::string::size_type size = v230.__r_.__value_.__l.__size_;
                int64_t v55 = v230.__r_.__value_.__l.__cap_ - v230.__r_.__value_.__l.__size_;
                if (v230.__r_.__value_.__l.__cap_ == v230.__r_.__value_.__l.__size_)
                {
                  int64x2_t v60 = vdupq_n_s64(v230.__r_.__value_.__l.__size_);
                  std::string::size_type v57 = (std::string::size_type)&v52[16 * (v51 >> 2)];
                }

                else
                {
                  uint64_t v56 = v55 >> 4;
                  std::string::size_type v57 = (std::string::size_type)&v52[16 * (v51 >> 2) + (v55 & 0xFFFFFFFFFFFFFFF0LL)];
                  uint64_t v58 = 16 * v56;
                  uint64_t v59 = &v52[16 * (v51 >> 2)];
                  do
                  {
                    *(_OWORD *)uint64_t v59 = *(_OWORD *)size;
                    v59 += 16;
                    *(void *)std::string::size_type size = 0LL;
                    *(void *)(size + 8) = 0LL;
                    size += 16LL;
                    v58 -= 16LL;
                  }

                  while (v58);
                  int64x2_t v60 = *(int64x2_t *)&v230.__r_.__value_.__r.__words[1];
                }

                std::string::size_type v61 = v230.__r_.__value_.__r.__words[0];
                std::string::size_type v62 = v231;
                v230.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
                v230.__r_.__value_.__l.__size_ = (std::string::size_type)&v52[16 * (v51 >> 2)];
                *(int64x2_t *)&v233[8] = v60;
                v230.__r_.__value_.__l.__cap_ = v57;
                std::string::size_type v231 = (std::string::size_type)&v52[16 * v53];
                *(void *)uint64_t v233 = v61;
                *(void *)&v233[24] = v62;
                sub_A0D64((uint64_t)v233);
                int v49 = (void *)v230.__r_.__value_.__l.__cap_;
              }

              else
              {
                if (v42 >= 0) {
                  unint64_t v50 = v30 + 1;
                }
                else {
                  unint64_t v50 = v30 + 2;
                }
                v49 -= 2 * (v50 >> 1);
                v230.__r_.__value_.__l.__size_ = (std::string::size_type)v49;
                v230.__r_.__value_.__l.__cap_ = (std::string::size_type)v49;
              }
            }

            *int v49 = v224.__r_.__value_.__r.__words[0];
            std::string::size_type v63 = v224.__r_.__value_.__l.__size_;
            v49[1] = v224.__r_.__value_.__l.__size_;
            if (v63)
            {
              uint64_t v64 = (unint64_t *)(v63 + 8);
              do
                unint64_t v65 = __ldxr(v64);
              while (__stxr(v65 + 1, v64));
              int v49 = (void *)v230.__r_.__value_.__l.__cap_;
            }

            uint64_t v66 = v49 + 2;
            v230.__r_.__value_.__l.__cap_ = (std::string::size_type)v66;
            std::string::size_type v67 = v230.__r_.__value_.__l.__size_;
            std::string::size_type v68 = __p.__r_.__value_.__r.__words[0];
            if (__p.__r_.__value_.__r.__words[0] != v31)
            {
              uint64_t v69 = (void *)v31;
              do
              {
                __int128 v70 = *((_OWORD *)v69 - 1);
                v69 -= 2;
                *(_OWORD *)(v67 - 16) = v70;
                v67 -= 16LL;
                *uint64_t v69 = 0LL;
                v69[1] = 0LL;
              }

              while (v69 != (void *)v68);
              uint64_t v66 = (_OWORD *)v230.__r_.__value_.__l.__cap_;
            }

            v230.__r_.__value_.__l.__size_ = v67;
            std::string::size_type v71 = __p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_ != v31)
            {
              do
              {
                *v66++ = *(_OWORD *)v31;
                *(void *)std::string::size_type v31 = 0LL;
                *(void *)(v31 + 8) = 0LL;
                v31 += 16LL;
              }

              while (v31 != v71);
              std::string::size_type v67 = v230.__r_.__value_.__l.__size_;
              std::string::size_type v31 = __p.__r_.__value_.__l.__size_;
            }

            std::string::size_type v72 = __p.__r_.__value_.__r.__words[0];
            std::string::size_type v73 = __p.__r_.__value_.__l.__cap_;
            __p.__r_.__value_.__r.__words[0] = v67;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v66;
            __p.__r_.__value_.__l.__cap_ = v231;
            v230.__r_.__value_.__l.__cap_ = v31;
            std::string::size_type v231 = v73;
            v230.__r_.__value_.__r.__words[0] = v72;
            v230.__r_.__value_.__l.__size_ = v72;
            sub_A0D64((uint64_t)&v230);
          }

          else if (v31 == __p.__r_.__value_.__l.__size_)
          {
            std::string::size_type v46 = v224.__r_.__value_.__l.__size_;
            *(_OWORD *)__p.__r_.__value_.__l.__size_ = *(_OWORD *)&v224.__r_.__value_.__l.__data_;
            if (v46)
            {
              unint64_t v47 = (unint64_t *)(v46 + 8);
              do
                unint64_t v48 = __ldxr(v47);
              while (__stxr(v48 + 1, v47));
            }

            __p.__r_.__value_.__l.__size_ = *((void *)&v28 + 1) + 16LL;
          }

          else
          {
            uint64_t v32 = __p.__r_.__value_.__l.__size_ - 16;
            uint64_t v33 = (_OWORD *)__p.__r_.__value_.__l.__size_;
            std::string::size_type v34 = __p.__r_.__value_.__l.__size_ - 16;
            if (__p.__r_.__value_.__l.__size_ >= 0x10)
            {
              do
              {
                *v33++ = *(_OWORD *)v34;
                *(void *)std::string::size_type v34 = 0LL;
                *(void *)(v34 + 8) = 0LL;
                v34 += 16LL;
              }

              while (v34 < *((void *)&v28 + 1));
            }

            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v33;
            if (*((void *)&v28 + 1) != v31 + 16)
            {
              do
                uint64_t v32 = sub_127660(v32, (__int128 *)(v28 + 16 * v30 - 16 + *((void *)&v28 + 1))) - 16;
              while (*((void *)&v28 + 1) != 16LL);
            }

            __int128 v35 = *(_OWORD *)&v224.__r_.__value_.__l.__data_;
            if (v224.__r_.__value_.__l.__size_)
            {
              unint64_t v36 = (unint64_t *)(v224.__r_.__value_.__l.__size_ + 8);
              do
                unint64_t v37 = __ldxr(v36);
              while (__stxr(v37 + 1, v36));
            }

            *(void *)std::string::size_type v31 = v35;
            uint64_t v38 = v28 + 16 * v30;
            uint64_t v39 = *(std::__shared_weak_count **)(v38 + 8);
            *(void *)(v38 + 8) = *((void *)&v35 + 1);
            if (v39)
            {
              os_signpost_id_t v40 = (unint64_t *)&v39->__shared_owners_;
              do
                unint64_t v41 = __ldaxr(v40);
              while (__stlxr(v41 - 1, v40));
              if (!v41)
              {
                ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                std::__shared_weak_count::__release_weak(v39);
              }
            }
          }

          uint64_t v27 = (std::__shared_weak_count *)v224.__r_.__value_.__l.__size_;
          goto LABEL_90;
        }

        std::string::size_type cap = 0LL;
LABEL_98:
        __int128 v225 = v23;
        std::string::size_type v226 = cap;
        memset(&__p, 0, sizeof(__p));
        *(void *)uint64_t v233 = &__p;
        sub_7A668((void ***)v233);
        BOOL v77 = (os_unfair_lock_s **)*((void *)&v225 + 1);
        BOOL v221 = (os_unfair_lock_s **)*((void *)&v225 + 1);
        uint64_t v78 = (os_unfair_lock_s **)v225;
LABEL_99:
        if (v78 != v77)
        {
          uint64_t v79 = *(void *)v227.i64[0] + 16LL;
          BOOL v80 = *(void **)(*(void *)v227.i64[0] + 24LL);
          if (v80 == (void *)v79) {
            goto LABEL_269;
          }
          uint32_t os_unfair_lock_opaque = (*v78)[36]._os_unfair_lock_opaque;
          unsigned int v223 = v78;
          while (1)
          {
            uint64_t v81 = *v78;
            uint64_t v82 = (std::__shared_weak_count *)v78[1];
            if (v82)
            {
              p_shared_weak_owners = (unint64_t *)&v82->__shared_weak_owners_;
              do
                unint64_t v84 = __ldxr(p_shared_weak_owners);
              while (__stxr(v84 + 1, p_shared_weak_owners));
            }

            unsigned __int8 v85 = (std::__shared_weak_count *)v80[3];
            if (!v85) {
              break;
            }
            uint64_t v86 = std::__shared_weak_count::lock(v85);
            int v87 = v86;
            if (!v86) {
              goto LABEL_118;
            }
            std::string::size_type v88 = (os_unfair_lock_s *)v80[2];
            std::string::size_type v89 = (unint64_t *)&v86->__shared_weak_owners_;
            do
              unint64_t v90 = __ldxr(v89);
            while (__stxr(v90 + 1, v89));
            uint64_t v91 = (unint64_t *)&v86->__shared_owners_;
            do
              unint64_t v92 = __ldaxr(v91);
            while (__stlxr(v92 - 1, v91));
            if (v92)
            {
              if (!v82) {
                goto LABEL_119;
              }
            }

            else
            {
              ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
              std::__shared_weak_count::__release_weak(v87);
              if (!v82)
              {
LABEL_119:
                uint64_t v81 = 0LL;
                int v93 = 0LL;
                if (!v87) {
                  goto LABEL_127;
                }
                goto LABEL_120;
              }
            }

LABEL_134:
            char v102 = *v78;
            uint64_t v103 = (std::__shared_weak_count *)v78[1];
            if (v103)
            {
              uint64_t v104 = (unint64_t *)&v103->__shared_weak_owners_;
              do
                unint64_t v105 = __ldxr(v104);
              while (__stxr(v105 + 1, v104));
            }

            uint64_t v106 = (std::__shared_weak_count *)v80[5];
            if (v106)
            {
              std::string::size_type v107 = std::__shared_weak_count::lock(v106);
              std::string::size_type v108 = v107;
              if (v107)
              {
                uint64_t v109 = (os_unfair_lock_s *)v80[4];
                uint64_t v110 = (unint64_t *)&v107->__shared_weak_owners_;
                do
                  unint64_t v111 = __ldxr(v110);
                while (__stxr(v111 + 1, v110));
                BOOL v112 = (unint64_t *)&v107->__shared_owners_;
                do
                  unint64_t v113 = __ldaxr(v112);
                while (__stlxr(v113 - 1, v112));
                if (!v113)
                {
                  ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
                  std::__shared_weak_count::__release_weak(v108);
                }
              }

              else
              {
                uint64_t v109 = 0LL;
              }
            }

            else
            {
              uint64_t v109 = 0LL;
              std::string::size_type v108 = 0LL;
            }

            uint64_t v114 = v79;
            if (v103)
            {
              unsigned __int8 v115 = std::__shared_weak_count::lock(v103);
              if (v115) {
                uint64_t v116 = v102;
              }
              else {
                uint64_t v116 = 0LL;
              }
              if (!v108)
              {
LABEL_161:
                BOOL v101 = v116 == 0LL;
                uint64_t v79 = v114;
                goto LABEL_162;
              }
            }

            else
            {
              uint64_t v116 = 0LL;
              unsigned __int8 v115 = 0LL;
              if (!v108) {
                goto LABEL_161;
              }
            }

            int v117 = std::__shared_weak_count::lock(v108);
            if (!v117) {
              goto LABEL_161;
            }
            std::string::size_type v118 = v117;
            BOOL v101 = v116 == v109;
            uint64_t v119 = (unint64_t *)&v117->__shared_owners_;
            do
              unint64_t v120 = __ldaxr(v119);
            while (__stlxr(v120 - 1, v119));
            uint64_t v79 = v114;
            if (!v120)
            {
              ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
              std::__shared_weak_count::__release_weak(v118);
            }

          if (!v29) {
            return;
          }
          uint64_t v30 = 5LL;
LABEL_136:
          (*(void (**)(void))(*(void *)v29 + 8 * v30))();
          return;
        }

        if (v28)
        {
          unint64_t v75 = CFGetTypeID(*a2);
          uint64_t v76 = CFDictionaryGetTypeID();
          __int128 v28 = (const __CFArray *)*a2;
          if (v75 == v76)
          {
            sub_82AF0((uint64_t)v105, a4);
            sub_145DB4(a1, v28, a3, v105);
            int64_t v29 = v106;
            if (v106 == v105)
            {
              uint64_t v30 = 4LL;
              int64_t v29 = v105;
              goto LABEL_136;
            }

            goto LABEL_134;
          }
        }

      sub_32C8C((void *)__p.__r_.__value_.__l.__size_);
      if (++v44 == v45) {
        return;
      }
    }

    if ((int)v46 <= 1987077986)
    {
      if ((_DWORD)v46 == 1768057203) {
        goto LABEL_115;
      }
      uint64_t v66 = 1919776355;
    }

    else
    {
      if ((_DWORD)v46 == 1987077987 || (_DWORD)v46 == 1987081839) {
        goto LABEL_115;
      }
      uint64_t v66 = 1987081833;
    }

    if ((_DWORD)v46 != v66)
    {
LABEL_116:
      unint64_t v65 = v99;
      goto LABEL_118;
    }

LABEL_162:
            uint64_t v78 = v223;
            if (!v115) {
              goto LABEL_166;
            }
            char v121 = (unint64_t *)&v115->__shared_owners_;
            do
              unint64_t v122 = __ldaxr(v121);
            while (__stlxr(v122 - 1, v121));
            if (v122)
            {
LABEL_166:
              if (!v108) {
                goto LABEL_168;
              }
LABEL_167:
              std::__shared_weak_count::__release_weak(v108);
              goto LABEL_168;
            }

            ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
            std::__shared_weak_count::__release_weak(v115);
            if (v108) {
              goto LABEL_167;
            }
LABEL_168:
            if (v103) {
              std::__shared_weak_count::__release_weak(v103);
            }
LABEL_170:
            if (v87) {
              std::__shared_weak_count::__release_weak(v87);
            }
            if (v82) {
              std::__shared_weak_count::__release_weak(v82);
            }
            if (v101)
            {
              uint64_t v123 = sub_138E8(8);
              if ((*(_BYTE *)(v123 + 8) & 1) != 0)
              {
                __int128 v124 = *(os_log_s **)v123;
                if (*(void *)v123)
                {
                  if (os_log_type_enabled(*(os_log_t *)v123, OS_LOG_TYPE_DEBUG))
                  {
                    sub_23FE8((uint64_t)&v230, *v78 + 2);
                    int v125 = (char)v230.__r_.__value_.__s.__size_;
                    std::string::size_type v126 = v230.__r_.__value_.__r.__words[0];
                    sub_2DA6D0(&__p, (unsigned int ***)&v227);
                    uint64_t v127 = &v230;
                    if (v125 < 0) {
                      uint64_t v127 = (std::string *)v126;
                    }
                    p_p = &__p;
                    if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                    }
                    *(_DWORD *)uint64_t v233 = 136315906;
                    *(void *)&v233[4] = "RoutingManager.cpp";
                    *(_WORD *)&v233[12] = 1024;
                    *(_DWORD *)&v233[14] = 2538;
                    *(_WORD *)&v233[18] = 2080;
                    *(void *)&v233[20] = v127;
                    *(_WORD *)&v233[28] = 2080;
                    *(void *)&v233[30] = p_p;
                    _os_log_impl( &dword_0,  v124,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Cached port %s is used in route(s) %s.",  v233,  0x26u);
                  }
                }
              }

              unsigned __int8 v129 = atomic_load((unsigned __int8 *)&qword_49CD40);
              if ((v129 & 1) == 0 && __cxa_guard_acquire(&qword_49CD40))
              {
                qword_49CD38 = 0LL;
                qword_49CD30 = 0LL;
                qword_49CD28 = (uint64_t)&qword_49CD30;
                __cxa_guard_release(&qword_49CD40);
              }

              uint64_t v130 = *v220;
              if (!*v220) {
                goto LABEL_204;
              }
              std::string::size_type v131 = v220;
              do
              {
                uint32_t v132 = *(_DWORD *)(v130 + 32);
                BOOL v133 = v132 >= os_unfair_lock_opaque;
                if (v132 >= os_unfair_lock_opaque) {
                  uint64_t v134 = (uint64_t *)v130;
                }
                else {
                  uint64_t v134 = (uint64_t *)(v130 + 8);
                }
                if (v133) {
                  std::string::size_type v131 = (void *)v130;
                }
                uint64_t v130 = *v134;
              }

              while (*v134);
              if (v131 == v220)
              {
LABEL_204:
                char v137 = &qword_49CD28;
              }

              else
              {
                uint32_t v135 = *((_DWORD *)v131 + 8);
                BOOL v136 = v131 + 5;
                if (v135 <= os_unfair_lock_opaque) {
                  char v137 = v136;
                }
                else {
                  char v137 = &qword_49CD28;
                }
              }

              if (v137[2])
              {
                uint64_t v138 = sub_138E8(8);
                if ((*(_BYTE *)(v138 + 8) & 1) != 0)
                {
                  uint64_t v139 = *(os_log_s **)v138;
                  if (*(void *)v138)
                  {
                    if (os_log_type_enabled(*(os_log_t *)v138, OS_LOG_TYPE_DEBUG))
                    {
                      sub_2CA1C(&v230, os_unfair_lock_opaque);
                      int v140 = (char)v230.__r_.__value_.__s.__size_;
                      std::string::size_type v141 = v230.__r_.__value_.__r.__words[0];
                      sub_110E40(&__p, (void *)*v137, v137 + 1);
                      std::string::size_type v142 = &v230;
                      if (v140 < 0) {
                        std::string::size_type v142 = (std::string *)v141;
                      }
                      std::string::size_type v143 = &__p;
                      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                        std::string::size_type v143 = (std::string *)__p.__r_.__value_.__r.__words[0];
                      }
                      *(_DWORD *)uint64_t v233 = 136315906;
                      *(void *)&v233[4] = "RoutingManager.cpp";
                      *(_WORD *)&v233[12] = 1024;
                      *(_DWORD *)&v233[14] = 2542;
                      *(_WORD *)&v233[18] = 2080;
                      *(void *)&v233[20] = v142;
                      *(_WORD *)&v233[28] = 2080;
                      *(void *)&v233[30] = v143;
                      _os_log_impl( &dword_0,  v139,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Found excluded port types for port type %s (%s). Seeking connections to remove.",  v233,  0x26u);
                    }
                  }
                }

                uint64_t v144 = *(uint64_t **)(*(void *)v227.i64[0] + 24LL);
                if (v144 != (uint64_t *)(*(void *)v227.i64[0] + 16LL))
                {
                  uint64_t v145 = v137 + 1;
                  do
                  {
                    uint64_t v146 = (void *)*v137;
                    if ((uint64_t *)*v137 == v145)
                    {
LABEL_239:
                      uint64_t v158 = sub_138E8(8);
                      if ((*(_BYTE *)(v158 + 8) & 1) != 0)
                      {
                        int v159 = *(os_log_s **)v158;
                        if (*(void *)v158)
                        {
                          if (os_log_type_enabled(*(os_log_t *)v158, OS_LOG_TYPE_DEBUG))
                          {
                            sub_2DA02C(&v230, v144 + 2);
                            int v160 = (char)v230.__r_.__value_.__s.__size_;
                            std::string::size_type v161 = v230.__r_.__value_.__r.__words[0];
                            sub_2CA1C(&__p, os_unfair_lock_opaque);
                            v162 = &v230;
                            if (v160 < 0) {
                              v162 = (std::string *)v161;
                            }
                            v163 = &__p;
                            if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                              v163 = (std::string *)__p.__r_.__value_.__r.__words[0];
                            }
                            *(_DWORD *)uint64_t v233 = 136315906;
                            *(void *)&v233[4] = "RoutingManager.cpp";
                            *(_WORD *)&v233[12] = 1024;
                            *(_DWORD *)&v233[14] = 2563;
                            *(_WORD *)&v233[18] = 2080;
                            *(void *)&v233[20] = v162;
                            *(_WORD *)&v233[28] = 2080;
                            *(void *)&v233[30] = v163;
                            _os_log_impl( &dword_0,  v159,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Connection %s does not use a port type excluded by %s.",  v233,  0x26u);
                          }
                        }
                      }

                      v164 = (uint64_t *)v144[1];
                    }

                    else
                    {
                      while (1)
                      {
                        int v147 = *((_DWORD *)v146 + 7);
                        sub_B8CBC((uint64_t *)v233, v144 + 2, "", 2551);
                        if (*(_DWORD *)(*(void *)v233 + 144LL) == v147)
                        {
                          BOOL v148 = 1;
                        }

                        else
                        {
                          sub_B8CBC((uint64_t *)&v230, v144 + 4, "", 2552);
                          os_signpost_id_t v149 = (std::__shared_weak_count *)v230.__r_.__value_.__l.__size_;
                          BOOL v148 = *(_DWORD *)(v230.__r_.__value_.__r.__words[0] + 144) == v147;
                          if (v230.__r_.__value_.__l.__size_)
                          {
                            unsigned __int8 v150 = (unint64_t *)(v230.__r_.__value_.__l.__size_ + 8);
                            do
                              unint64_t v151 = __ldaxr(v150);
                            while (__stlxr(v151 - 1, v150));
                            if (!v151)
                            {
                              ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
                              std::__shared_weak_count::__release_weak(v149);
                            }
                          }
                        }

                        int v152 = *(std::__shared_weak_count **)&v233[8];
                        if (*(void *)&v233[8])
                        {
                          std::string::size_type v153 = (unint64_t *)(*(void *)&v233[8] + 8LL);
                          do
                            unint64_t v154 = __ldaxr(v153);
                          while (__stlxr(v154 - 1, v153));
                          if (!v154)
                          {
                            ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                            std::__shared_weak_count::__release_weak(v152);
                          }
                        }

                        if (v148) {
                          break;
                        }
                        uint64_t v155 = (uint64_t *)v146[1];
                        if (v155)
                        {
                          do
                          {
                            uint64_t v156 = v155;
                            uint64_t v155 = (uint64_t *)*v155;
                          }

                          while (v155);
                        }

                        else
                        {
                          do
                          {
                            uint64_t v156 = (uint64_t *)v146[2];
                            BOOL v157 = *v156 == (void)v146;
                            uint64_t v146 = v156;
                          }

                          while (!v157);
                        }

                        uint64_t v146 = v156;
                        if (v156 == v145) {
                          goto LABEL_239;
                        }
                      }

                      uint64_t v165 = sub_138E8(8);
                      if ((*(_BYTE *)(v165 + 8) & 1) != 0)
                      {
                        os_log_type_t v166 = *(os_log_s **)v165;
                        if (*(void *)v165)
                        {
                          if (os_log_type_enabled(*(os_log_t *)v165, OS_LOG_TYPE_DEBUG))
                          {
                            sub_2DA02C(&v230, v144 + 2);
                            if ((v230.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                              v167 = &v230;
                            }
                            else {
                              v167 = (std::string *)v230.__r_.__value_.__r.__words[0];
                            }
                            sub_2CA1C(&__p, os_unfair_lock_opaque);
                            int v168 = (char)__p.__r_.__value_.__s.__size_;
                            std::string::size_type v169 = __p.__r_.__value_.__r.__words[0];
                            sub_110E40(&v224, (void *)*v137, v137 + 1);
                            char v170 = &__p;
                            if (v168 < 0) {
                              char v170 = (std::string *)v169;
                            }
                            uint64_t v171 = &v224;
                            if ((v224.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                              uint64_t v171 = (std::string *)v224.__r_.__value_.__r.__words[0];
                            }
                            *(_DWORD *)uint64_t v233 = 136316162;
                            *(void *)&v233[4] = "RoutingManager.cpp";
                            *(_WORD *)&v233[12] = 1024;
                            *(_DWORD *)&v233[14] = 2558;
                            *(_WORD *)&v233[18] = 2080;
                            *(void *)&v233[20] = v167;
                            *(_WORD *)&v233[28] = 2080;
                            *(void *)&v233[30] = v170;
                            *(_WORD *)&v233[38] = 2080;
                            v234 = v171;
                            _os_log_impl( &dword_0,  v166,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Connection %s uses a port type excluded by %s (one of %s). Removing connection.",  v233,  0x30u);
                          }
                        }
                      }

                      uint64_t v172 = *(void *)v227.i64[0];
                      uint64_t v173 = *v144;
                      v164 = (uint64_t *)v144[1];
                      *(void *)(v173 + 8) = v164;
                      *(void *)v144[1] = v173;
                      --*(void *)(v172 + 32);
                      sub_116394(v144 + 2);
                      operator delete(v144);
                    }

                    uint64_t v144 = v164;
                  }

                  while (v164 != (uint64_t *)(*(void *)v227.i64[0] + 16LL));
                }
              }

                        memset(v218.__m_.__opaque, 0, sizeof(v218.__m_.__opaque));
                        v218.__m_.__sig = 850045863LL;
                        memset(v217.__cv_.__opaque, 0, sizeof(v217.__cv_.__opaque));
                        v217.__cv_.__sig = 1018212795LL;
                        uint64_t v187 = 0;
                        sub_7D684(&__p, v63, &inAddress, (uint64_t)&v217, (uint64_t)&v218, (uint64_t)&v187);
                        uint64_t v86 = 2000LL;
                        while (1)
                        {
                          sub_90508((uint64_t)&v181, (uint64_t)&v203);
                          int v87 = v181;
                          if (v184) {
                            goto LABEL_164;
                          }
                          uint64_t v178 = 0LL;
                          std::string::size_type v179 = 0LL;
                          uint64_t v180 = 0LL;
                          std::string::size_type v89 = v182;
                          unint64_t v90 = (v182 - (uint64_t)v181) >> 2;
                          sub_7A5B8(&v178, v181, v182, v90);
                          uint64_t v175 = 0LL;
                          char v176 = 0LL;
                          BOOL v177 = 0LL;
                          sub_7A5B8(&v175, v163, (uint64_t)v164, ((char *)v164 - (_BYTE *)v163) >> 2);
                          uint64_t v91 = v178;
                          unint64_t v92 = v175;
                          if (v179 - v178 == v176 - v175) {
                            break;
                          }
                          int v93 = 0;
                          if (v175) {
                            goto LABEL_172;
                          }
LABEL_173:
                          if (v91)
                          {
                            std::string::size_type v179 = v91;
                            operator delete(v91);
                          }

                          if (v93)
                          {
                            std::string::size_type v88 = 12;
                            if (!v87) {
                              goto LABEL_166;
                            }
                            goto LABEL_165;
                          }

                          if (v86 > 0)
                          {
                            v94.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
                            uint64_t v95 = sub_138E8(13);
                            if ((*(_BYTE *)(v95 + 8) & 1) != 0)
                            {
                              BOOL v96 = *(os_log_s **)v95;
                              if (*(void *)v95)
                              {
                                if (os_log_type_enabled(*(os_log_t *)v95, OS_LOG_TYPE_DEBUG))
                                {
                                  buf.mSelector = 136315906;
                                  *(void *)&buf.mScope = "HALPropertySynchronizer.h";
                                  uint64_t v208 = 1024;
                                  uint64_t v209 = 257;
                                  uint64_t v210 = 2080;
                                  *(void *)std::string v211 = "with timeout";
                                  *(_WORD *)&v211[8] = 1024;
                                  *(_DWORD *)&v211[10] = v63;
                                  _os_log_impl( &dword_0,  v96,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.",  (uint8_t *)&buf,  0x22u);
                                }
                              }
                            }

                            sub_6DD4();
                            *(void *)&buf.mSelector = &qword_48F828;
                            LOBYTE(buf.mElement) = 0;
                            LOBYTE(buf.mElement) = sub_1A30E4();
                            __lk.__m_ = &v218;
                            __lk.__owns_ = 1;
                            std::mutex::lock(&v218);
                            v97.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
                            if (v187)
                            {
LABEL_184:
                              if (__lk.__owns_) {
                                std::mutex::unlock(__lk.__m_);
                              }
                              sub_7D790((uint64_t)&buf);
                              std::string::size_type v88 = 0;
                              v86 += (std::chrono::system_clock::now().__d_.__rep_ - v94.__d_.__rep_) / -1000;
                              if (!v87) {
                                goto LABEL_166;
                              }
LABEL_165:
                              operator delete(v87);
                              goto LABEL_166;
                            }

                            uint64_t v104 = v97.__d_.__rep_ + 1000000 * v86;
                            while (2)
                            {
                              if (v104 <= std::chrono::steady_clock::now().__d_.__rep_) {
                                goto LABEL_184;
                              }
                              v105.__d_.__rep_ = v104 - std::chrono::steady_clock::now().__d_.__rep_;
                              if (v105.__d_.__rep_ >= 1)
                              {
                                std::chrono::steady_clock::now();
                                v106.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
                                if (!v106.__d_.__rep_)
                                {
                                  std::string::size_type v107 = 0LL;
                                  goto LABEL_206;
                                }

                                if (v106.__d_.__rep_ < 1)
                                {
                                  std::string::size_type v107 = 0x8000000000000000LL;
                                }

                                else
                                {
                                  if ((unint64_t)v106.__d_.__rep_ > 0x20C49BA5E353F7LL)
                                  {
                                    std::string::size_type v107 = 0x7FFFFFFFFFFFFFFFLL;
                                    goto LABEL_206;
                                  }

LABEL_269:
              v78 += 2;
              BOOL v77 = v221;
              goto LABEL_99;
            }

            BOOL v80 = (void *)v80[1];
            if (v80 == (void *)v79) {
              goto LABEL_269;
            }
          }

          int v87 = 0LL;
LABEL_118:
          std::string::size_type v88 = 0LL;
          if (!v82) {
            goto LABEL_119;
          }
          goto LABEL_113;
        }

        *(void *)uint64_t v233 = &v225;
        sub_7A668((void ***)v233);
        uint64_t v174 = *(void *)v227.i64[0];
        if (!*(void *)(*(void *)v227.i64[0] + 32LL))
        {
          v202 = (os_log_t *)sub_138E8(13);
          std::string v203 = *v202;
          if (*v202 && os_log_type_enabled(*v202, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t v233 = 136315394;
            *(void *)&v233[4] = "RoutingManager.cpp";
            *(_WORD *)&v233[12] = 1024;
            *(_DWORD *)&v233[14] = 2572;
            _os_log_impl( &dword_0,  v203,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Somehow removed all connections from our concrete route.",  v233,  0x12u);
          }

          os_signpost_id_t v201 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v201, "Somehow removed all connections from our concrete route.");
          goto LABEL_336;
        }

        a2 = v212;
        if (v213)
        {
          uint64_t v175 = (void *)(v174 + 16);
          for (uint64_t i = *(void **)(v174 + 24); ; uint64_t i = (void *)i[1])
          {
            if (i == v175) {
              goto LABEL_317;
            }
            sub_B8CBC((uint64_t *)v233, i + 2, "", 2577);
            if ((*(_WORD *)(*(void *)v233 + 184LL) & 4) == 0)
            {
              BOOL v177 = 0;
              goto LABEL_305;
            }

            uint64_t v178 = (std::__shared_weak_count *)i[3];
            if (!v178) {
              break;
            }
            std::string::size_type v179 = std::__shared_weak_count::lock(v178);
            uint64_t v180 = v179;
            if (!v179) {
              goto LABEL_290;
            }
            uint64_t v181 = i[2];
            uint64_t v182 = (unint64_t *)&v179->__shared_weak_owners_;
            do
              unint64_t v183 = __ldxr(v182);
            while (__stxr(v183 + 1, v182));
            uint64_t v184 = (unint64_t *)&v179->__shared_owners_;
            do
              unint64_t v185 = __ldaxr(v184);
            while (__stlxr(v185 - 1, v184));
            if (!v185)
            {
              ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
              std::__shared_weak_count::__release_weak(v180);
            }

            uint64_t v186 = std::__shared_weak_count::lock(v180);
            if (!v186) {
              uint64_t v181 = 0LL;
            }
LABEL_291:
            uint64_t v187 = (std::__shared_weak_count *)v211[1];
            if (v187 && (uint64_t v188 = std::__shared_weak_count::lock(v187)) != 0LL)
            {
              v189 = v188;
              BOOL v177 = v181 == *v211;
              std::string v190 = (unint64_t *)&v188->__shared_owners_;
              do
                unint64_t v191 = __ldaxr(v190);
              while (__stlxr(v191 - 1, v190));
              if (!v191)
              {
                ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
                std::__shared_weak_count::__release_weak(v189);
              }

              if (v186)
              {
LABEL_300:
                char v192 = (unint64_t *)&v186->__shared_owners_;
                do
                  unint64_t v193 = __ldaxr(v192);
                while (__stlxr(v193 - 1, v192));
                if (!v193)
                {
                  ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
                  std::__shared_weak_count::__release_weak(v186);
                  if (!v180) {
                    goto LABEL_305;
                  }
LABEL_304:
                  std::__shared_weak_count::__release_weak(v180);
                  goto LABEL_305;
                }
              }
            }

            else
            {
              BOOL v177 = v181 == 0;
              if (v186) {
                goto LABEL_300;
              }
            }

            if (v180) {
              goto LABEL_304;
            }
LABEL_305:
            unint64_t v194 = *(std::__shared_weak_count **)&v233[8];
            if (*(void *)&v233[8])
            {
              unint64_t v195 = (unint64_t *)(*(void *)&v233[8] + 8LL);
              do
                unint64_t v196 = __ldaxr(v195);
              while (__stlxr(v196 - 1, v195));
              if (!v196)
              {
                ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
                std::__shared_weak_count::__release_weak(v194);
              }
            }

            if (v177) {
              goto LABEL_314;
            }
          }

          uint64_t v180 = 0LL;
LABEL_290:
          uint64_t v181 = 0LL;
          uint64_t v186 = 0LL;
          goto LABEL_291;
        }

LABEL_314:
        sub_11DE5C((uint64_t)v233, v212, (std::string::size_type)&v227, *(uint64_t **)(v219 + 104), a4, (uint64_t *)v228);
        sub_725DC(a1, (uint64_t)v233);
        *(void *)uint64_t v233 = off_4709D0;
        uint64_t v197 = *(void **)&v233[16];
        if (*(void *)&v233[16])
        {
          sub_10AF78((uint64_t *)(*(void *)&v233[16] + 16LL));
          operator delete(v197);
        }

        if (!*(_DWORD *)(a1 + 8)) {
          break;
        }
      }

  int64x2_t v238 = (void **)&v112[1].__vftable;
  uint64_t v239 = v112;
  sub_19DFC((uint64_t)&cf);
  *(void *)char v248 = v112 + 1;
LABEL_315:
  *(void *)&v248[2] = v112;
  uint64_t v145 = (unint64_t *)&v112->__shared_owners_;
  do
    uint64_t v146 = __ldxr(v145);
  while (__stxr(v146 + 1, v145));
  sub_3711D4((uint64_t)a1, (void ***)v248);
  int v147 = *(std::__shared_weak_count **)&v248[2];
  if (*(void *)&v248[2])
  {
    BOOL v148 = (unint64_t *)(*(void *)&v248[2] + 8LL);
    do
      os_signpost_id_t v149 = __ldaxr(v148);
    while (__stlxr(v149 - 1, v148));
    if (!v149)
    {
      ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
      std::__shared_weak_count::__release_weak(v147);
    }
  }

  sub_1EE86C((uint64_t)a1);
  unint64_t v151 = v238;
  unsigned __int8 v150 = v239;
  if (v239)
  {
    int v152 = (unint64_t *)&v239->__shared_weak_owners_;
    do
      std::string::size_type v153 = __ldxr(v152);
    while (__stxr(v153 + 1, v152));
    unint64_t v154 = (unint64_t *)&v150->__shared_owners_;
    do
      uint64_t v155 = __ldaxr(v154);
    while (__stlxr(v155 - 1, v154));
    if (!v155)
    {
      ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
      std::__shared_weak_count::__release_weak(v150);
    }
  }

  sub_19DFC((uint64_t)&v241[2]);
  sub_19DFC((uint64_t)&buf[16]);
  sub_19DFC((uint64_t)buf);
  if (!v224)
  {
LABEL_381:
    if (!v150) {
      goto LABEL_384;
    }
    goto LABEL_382;
  }

  sub_F9584((uint64_t)buf, 1885894516LL, *((_DWORD *)a1 + 67));
  uint64_t v156 = (os_log_t *)sub_138E8(17);
  BOOL v157 = *v156;
  if (*v156 && os_log_type_enabled(*v156, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v158 = *(void *)&v241[2];
    int v159 = *(void *)&buf[16];
    int v160 = *(void *)buf;
    (*(void (**)(__int128 *__return_ptr, _BYTE *))(*(void *)a1 + 128LL))(&__p, a1);
    if (v159) {
      std::string::size_type v161 = v159;
    }
    else {
      std::string::size_type v161 = v160;
    }
    if (v158) {
      std::string::size_type v161 = v158;
    }
    v248[0] = 136315906;
    *(void *)&v248[1] = "Device_USB_Aspen.cpp";
    LOWORD(v248[3]) = 1024;
    *(_DWORD *)((char *)&v248[3] + 2) = 651;
    HIWORD(v248[4]) = 2112;
    *(void *)&v248[5] = v161;
    LOWORD(v248[7]) = 2112;
    *(void *)((char *)&v248[7] + 2) = __p;
    _os_log_impl( &dword_0,  v157,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d creating a USB tap stream port with name %@ and UID %@",  (uint8_t *)v248,  0x26u);
    sub_19DFC((uint64_t)&__p);
  }

  sub_373464((char **)v248, (std::mutex *)a1, 1768845428LL);
  (*(void (**)(CFTypeRef *__return_ptr, _BYTE *))(*(void *)a1 + 128LL))(&v232, a1);
  v162 = (std::__shared_weak_count *)operator new(0x228uLL);
  v162->__shared_owners_ = 0LL;
  v163 = (unint64_t *)&v162->__shared_owners_;
  v162->__shared_weak_owners_ = 0LL;
  v162->__vftable = (std::__shared_weak_count_vtbl *)off_485BB8;
  sub_31AA58((uint64_t)&v162[1], (uint64_t)a1, (char **)v248, (uint64_t)buf, (uint64_t)&v232);
  *(void *)&std::string __p = v162 + 1;
  *((void *)&__p + 1) = v162;
  sub_AFDAC((uint64_t)&__p, &v162[4].__shared_owners_, (uint64_t)&v162[1]);
  sub_19DFC((uint64_t)&v232);
  v232 = v248;
  sub_7A668((void ***)&v232);
  CFTypeRef cf = &v162[1];
  std::string v230 = v162;
  do
    v164 = __ldxr(v163);
  while (__stxr(v164 + 1, v163));
  sub_3711D4((uint64_t)a1, (void ***)&cf);
  uint64_t v165 = v230;
  if (v230)
  {
    os_log_type_t v166 = (unint64_t *)&v230->__shared_owners_;
    do
      v167 = __ldaxr(v166);
    while (__stlxr(v167 - 1, v166));
    if (!v167)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
    }
  }

  sub_1EC724((uint64_t)v248, (uint64_t)a1, COERCE_DOUBLE(1735159650LL));
  if (!LOBYTE(v248[4])) {
    goto LABEL_349;
  }
  int v168 = sub_1EC7A4(*(const __CFDictionary **)&v248[2]);
  if (LOBYTE(v248[4])) {
    sub_39FD8(v248);
  }
  if (!v168)
  {
LABEL_349:
    std::string::size_type v169 = (os_log_t *)sub_138E8(17);
    char v170 = *v169;
    if (*v169 && os_log_type_enabled(*v169, OS_LOG_TYPE_INFO))
    {
      v248[0] = 136315394;
      *(void *)&v248[1] = "Device_USB_Aspen.cpp";
      LOWORD(v248[3]) = 1024;
      *(_DWORD *)((char *)&v248[3] + 2) = 659;
      _os_log_impl( &dword_0,  v170,  OS_LOG_TYPE_INFO,  "%25s:%-5d SetPortSubType(TapWiredInput) to USB Default device",  (uint8_t *)v248,  0x12u);
    }

    (*(void (**)(void, uint64_t))(*(void *)__p + 104LL))(__p, 1970496068LL);
  }

  if (sub_1ECFAC((uint64_t)a1))
  {
    uint64_t v171 = (os_log_t *)sub_138E8(17);
    uint64_t v172 = *v171;
    if (*v171 && os_log_type_enabled(*v171, OS_LOG_TYPE_INFO))
    {
      v248[0] = 136315394;
      *(void *)&v248[1] = "Device_USB_Aspen.cpp";
      LOWORD(v248[3]) = 1024;
      *(_DWORD *)((char *)&v248[3] + 2) = 665;
      _os_log_impl( &dword_0,  v172,  OS_LOG_TYPE_INFO,  "%25s:%-5d SetPortSubType(TapWiredInput) to USB display device",  (uint8_t *)v248,  0x12u);
    }

    uint64_t v173 = __p;
    (*(void (**)(void, uint64_t))(*(void *)__p + 104LL))(__p, 1781740087LL);
  }

  else
  {
    uint64_t v173 = __p;
  }

  sub_1EE5B0(1768845428LL, v173, (uint64_t)a1);
  uint64_t v174 = (std::__shared_weak_count *)*((void *)&__p + 1);
  if (*((void *)&__p + 1))
  {
    uint64_t v175 = (unint64_t *)(*((void *)&__p + 1) + 16LL);
    do
      char v176 = __ldxr(v175);
    while (__stxr(v176 + 1, v175));
    BOOL v177 = (unint64_t *)&v174->__shared_owners_;
    do
      uint64_t v178 = __ldaxr(v177);
    while (__stlxr(v178 - 1, v177));
    if (!v178)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }

    sub_19DFC((uint64_t)&v241[2]);
    sub_19DFC((uint64_t)&buf[16]);
    sub_19DFC((uint64_t)buf);
    *(void *)&buf[8] = std::__shared_weak_count::lock(v174);
    if (*(void *)&buf[8])
    {
      *(void *)buf = v173;
      if (v150)
      {
        std::string::size_type v179 = std::__shared_weak_count::lock(v150);
        *(void *)&v248[2] = v179;
        if (v179)
        {
          uint64_t v180 = v179;
          *(void *)char v248 = v151;
          if (v151) {
            sub_204854((uint64_t)v151, v173);
          }
          uint64_t v181 = (unint64_t *)&v180->__shared_owners_;
          do
            uint64_t v182 = __ldaxr(v181);
          while (__stlxr(v182 - 1, v181));
          if (!v182)
          {
            ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
            std::__shared_weak_count::__release_weak(v180);
          }
        }
      }

      unint64_t v183 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        uint64_t v184 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v185 = __ldaxr(v184);
        while (__stlxr(v185 - 1, v184));
        if (!v185)
        {
          ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
          std::__shared_weak_count::__release_weak(v183);
        }
      }
    }

    std::__shared_weak_count::__release_weak(v174);
    goto LABEL_381;
  }

  sub_19DFC((uint64_t)&v241[2]);
  sub_19DFC((uint64_t)&buf[16]);
  sub_19DFC((uint64_t)buf);
  if (v150)
  {
LABEL_382:
    uint64_t v130 = v150;
LABEL_383:
    std::__shared_weak_count::__release_weak(v130);
  }

LABEL_317:
      *(void *)uint64_t v233 = &v227;
      sub_11E38C((void ***)v233);
      uint64_t v19 = *(void *)(v219 + 8);
      uint64_t v198 = *v217;
      if (v19 == *v217)
      {
        a3 = v215;
      }

      else
      {
        a3 = v215;
        while (!sub_11E3FC(v210, v19 + 16))
        {
          uint64_t v19 = *(void *)(v19 + 8);
          if (v19 == v198)
          {
            uint64_t v19 = v198;
            break;
          }
        }
      }

      if (v19 == v216) {
        goto LABEL_326;
      }
    }

    *(void *)uint64_t v233 = &v227;
    sub_11E38C((void ***)v233);
  }

        char v176 = __cxa_allocate_exception(0x10uLL);
        *(void *)char v176 = &off_4865A0;
        v176[2] = v123;
      }

      uint64_t v173 = sub_138E8(13);
      uint64_t v123 = 2003329396;
      uint64_t v174 = sub_8C7D4(1, *(void **)v173, *(void *)(v173 + 8));
      uint64_t v175 = (os_log_s *)objc_claimAutoreleasedReturnValue(v174);
      unint64_t v122 = v175;
      if (!v175 || !os_log_type_enabled(v175, OS_LOG_TYPE_ERROR)) {
        goto LABEL_317;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4833;
      uint64_t v172 = "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): (Error processing kVirtualAudioPlugInPropertyRouteC"
             "onfigurationIsDisruptive.)";
    }

    _os_log_impl(&dword_0, v122, OS_LOG_TYPE_ERROR, v172, buf, 0x12u);
    goto LABEL_317;
  }

  unint64_t v191 = 0LL;
  char v192 = 0LL;
  std::string v190 = &v191;
  *(void *)&buf[8] = 0LL;
  *(void *)&_DWORD buf[16] = 0LL;
  *(void *)buf = &buf[8];
  uint64_t v18 = *(void **)(a1 + 144);
  uint64_t v19 = *(void **)(a1 + 152);
  if (v18 == v19)
  {
    uint64_t v20 = 0LL;
    uint64_t v188 = 0LL;
    v189 = 0LL;
  }

  else
  {
    do
    {
      if (((*(uint64_t (**)(void))(*(void *)*v18 + 112LL))(*v18) & 1) == 0)
      {
        v199.__r_.__value_.__r.__words[0] = *(void *)(*v18 + 576LL);
        sub_1163D8( (uint64_t **)buf,  v199.__r_.__value_.__l.__data_,  HIDWORD(v199.__r_.__value_.__r.__words[0]),  (uint64_t *)&v199);
      }

      ++v18;
    }

    while (v18 != v19);
    uint64_t v20 = *(void **)&buf[8];
    uint64_t v187 = *(void ***)buf;
    uint64_t v188 = *(void **)&buf[8];
    v189 = *(void *)&buf[16];
    if (*(void *)&buf[16])
    {
      *(void *)(*(void *)&buf[8] + 16LL) = &v188;
      *(void *)buf = &buf[8];
      *(void *)&buf[8] = 0LL;
      *(void *)&_DWORD buf[16] = 0LL;
      uint64_t v20 = 0LL;
      goto LABEL_80;
    }
  }

  uint64_t v187 = &v188;
LABEL_80:
  sub_32C8C(v20);
  *(void *)&buf[8] = 0LL;
  *(void *)&_DWORD buf[16] = 0LL;
  *(void *)buf = &buf[8];
  BOOL v25 = v194;
  os_signpost_id_t v26 = v195;
  if (v194 == v195)
  {
    uint64_t v33 = 0LL;
    unint64_t v185 = 0LL;
    uint64_t v186 = 0LL;
LABEL_93:
    uint64_t v184 = (unsigned int *)&v185;
    goto LABEL_94;
  }

  uint64_t v27 = (uint64_t *)&buf[8];
  do
  {
    __int128 v28 = *v25;
    int64_t v29 = sub_117D78((uint64_t **)buf, v27, (uint64_t **)&v199, (uint64_t **)&v182, *v25, HIDWORD(*v25));
    uint64_t v30 = (uint64_t *)*v29;
    if (!*v29)
    {
      std::string::size_type v31 = (uint64_t **)v29;
      uint64_t v30 = (uint64_t *)operator new(0x28uLL);
      *(uint64_t *)((char *)v30 + 28) = v28;
      sub_32C38((uint64_t **)buf, (uint64_t)v199.__r_.__value_.__l.__data_, v31, v30);
    }

    uint64_t v32 = (uint64_t *)v30[1];
    if (v32)
    {
      do
      {
        uint64_t v27 = v32;
        uint64_t v32 = (uint64_t *)*v32;
      }

      while (v32);
    }

    else
    {
      do
      {
        uint64_t v27 = (uint64_t *)v30[2];
        uint64_t v56 = *v27 == (void)v30;
        uint64_t v30 = v27;
      }

      while (!v56);
    }

    v25 += 4;
  }

  while (v25 != v26);
  uint64_t v33 = *(void **)&buf[8];
  uint64_t v184 = *(unsigned int **)buf;
  unint64_t v185 = *(void **)&buf[8];
  uint64_t v186 = *(void *)&buf[16];
  if (!*(void *)&buf[16]) {
    goto LABEL_93;
  }
  *(void *)(*(void *)&buf[8] + 16LL) = &v185;
  *(void *)buf = &buf[8];
  *(void *)&buf[8] = 0LL;
  *(void *)&_DWORD buf[16] = 0LL;
  uint64_t v33 = 0LL;
LABEL_94:
  sub_32C8C(v33);
  std::string::size_type v34 = (uint64_t **)&v182;
  v183[0] = 0LL;
  v183[1] = 0LL;
  uint64_t v182 = (unsigned int *)v183;
  __int128 v35 = v187;
  unint64_t v36 = v184;
  v199.__r_.__value_.__r.__words[0] = (std::string::size_type)&v182;
  v199.__r_.__value_.__l.__size_ = (std::string::size_type)v183;
  if (v187 == &v188)
  {
    std::string::size_type size = v183;
LABEL_120:
    sub_277DEC((uint64_t)buf, v36, (unsigned int *)&v185, (uint64_t)v34, (uint64_t)size);
  }

  else
  {
    while (v36 != (unsigned int *)&v185)
    {
      unint64_t v37 = *((_DWORD *)v35 + 7);
      uint64_t v38 = *((_DWORD *)v35 + 8);
      uint64_t v39 = v36[7];
      os_signpost_id_t v40 = v36[8];
      unint64_t v41 = v38 < v40;
      if (v37 != v39) {
        unint64_t v41 = v37 < v39;
      }
      if (v41)
      {
        sub_26AF10((uint64_t)&v199, (unsigned int *)v35 + 7);
        uint64_t v42 = (void *)v35[1];
        if (v42)
        {
          do
          {
            __int128 v35 = v42;
            uint64_t v42 = (void *)*v42;
          }

          while (v42);
        }

        else
        {
          do
          {
            unint64_t v43 = v35;
            __int128 v35 = (void *)v35[2];
          }

          while ((void *)*v35 != v43);
        }
      }

      else
      {
        unint64_t v44 = v40 < v38;
        if (v37 != v39) {
          unint64_t v44 = v39 < v37;
        }
        if (v44)
        {
          sub_26AF10((uint64_t)&v199, v36 + 7);
        }

        else
        {
          uint64_t v45 = (void *)v35[1];
          std::string::size_type v46 = v35;
          if (v45)
          {
            do
            {
              __int128 v35 = v45;
              uint64_t v45 = (void *)*v45;
            }

            while (v45);
          }

          else
          {
            do
            {
              __int128 v35 = (void *)v46[2];
              uint64_t v56 = *v35 == (void)v46;
              std::string::size_type v46 = v35;
            }

            while (!v56);
          }
        }

        unint64_t v47 = (unsigned int *)*((void *)v36 + 1);
        if (v47)
        {
          do
          {
            unint64_t v36 = v47;
            unint64_t v47 = *(unsigned int **)v47;
          }

          while (v47);
        }

        else
        {
          do
          {
            unint64_t v48 = v36;
            unint64_t v36 = (unsigned int *)*((void *)v36 + 2);
          }

          while (*(unsigned int **)v36 != v48);
        }
      }

      if (v35 == &v188)
      {
        std::string::size_type size = (void **)v199.__r_.__value_.__l.__size_;
        std::string::size_type v34 = (uint64_t **)v199.__r_.__value_.__r.__words[0];
        goto LABEL_120;
      }
    }

    sub_277DEC( (uint64_t)buf,  (unsigned int *)v35,  (unsigned int *)&v188,  (uint64_t)v199.__r_.__value_.__l.__data_,  v199.__r_.__value_.__l.__size_);
  }

  unint64_t v50 = sub_138E8(2);
  if ((*(_BYTE *)(v50 + 8) & 1) != 0)
  {
    unint64_t v51 = *(id *)v50;
    if (v51)
    {
      os_signpost_id_t v52 = (os_log_s *)v51;
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
      {
        sub_DDFE8(&v199, v182, (unsigned int *)v183);
        uint64_t v53 = (v199.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v199 : (std::string *)v199.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4895;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v53;
        _os_log_impl(&dword_0, v52, OS_LOG_TYPE_DEBUG, "%25s:%-5d Differing Devices : %s", buf, 0x1Cu);
      }
    }
  }

  uint64_t v54 = (uint64_t *)v182;
  if (v182 != (unsigned int *)v183)
  {
    do
    {
      int64_t v55 = *((_DWORD *)v54 + 7);
      if (v55 > 1987276896)
      {
        if (v55 > 1987277416)
        {
          if (v55 != 1987277417)
          {
LABEL_243:
            uint64_t v104 = *(id *)sub_138E8(13);
            unint64_t v105 = v104;
            if (v104)
            {
              uint64_t v106 = (os_log_s *)v104;
              if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
              {
                sub_2CA1C(&v199, *((unsigned int *)v54 + 7));
                std::string::size_type v107 = (v199.__r_.__value_.__s.__size_ & 0x80u) == 0
                     ? &v199
                     : (std::string *)v199.__r_.__value_.__r.__words[0];
                *(_DWORD *)buf = 136315650;
                *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 4889;
                *(_WORD *)&buf[18] = 2080;
                *(void *)&buf[20] = v107;
                _os_log_impl( &dword_0,  v106,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Invalid Virtual Audio Device Type %s",  buf,  0x1Cu);
              }
            }

LABEL_252:
            BOOL v24 = 1LL;
            goto LABEL_253;
          }
        }

        else
        {
          uint64_t v56 = v55 == 1987276897 || v55 == 1987276900;
          if (!v56) {
            goto LABEL_243;
          }
        }
      }

      else if (v55 > 1986552182)
      {
        if (v55 != 1986552183 && v55 != 1986818404 && v55 != 1987011684) {
          goto LABEL_243;
        }
      }

      else if (v55 != 1986224492)
      {
        if (v55 == 1986291046 || v55 == 1986291305) {
          goto LABEL_252;
        }
        goto LABEL_243;
      }

      uint64_t v59 = (uint64_t *)v54[1];
      if (v59)
      {
        do
        {
          int64x2_t v60 = v59;
          uint64_t v59 = (uint64_t *)*v59;
        }

        while (v59);
      }

      else
      {
        do
        {
          int64x2_t v60 = (uint64_t *)v54[2];
          uint64_t v56 = *v60 == (void)v54;
          uint64_t v54 = v60;
        }

        while (!v56);
      }

      uint64_t v54 = v60;
    }

    while (v60 != (uint64_t *)v183);
  }

  std::string::size_type v61 = v194;
  if (v194 != v195)
  {
    while (*((_DWORD *)v61 + 1) || *(_DWORD *)v61 != 1986291046)
    {
      v61 += 4;
      if (v61 == v195) {
        goto LABEL_163;
      }
    }
  }

  if (v61 == v195)
  {
LABEL_163:
    std::string::size_type v63 = sub_138E8(13);
    uint64_t v64 = sub_8C7D4(1, *(void **)v63, *(void *)(v63 + 8));
    unint64_t v65 = (os_log_s *)objc_claimAutoreleasedReturnValue(v64);
    uint64_t v66 = v65;
    if (v65 && os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4907;
      _os_log_impl( &dword_0,  v66,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): No Default vad found",  buf,  0x12u);
    }

    std::string::size_type v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v67, "No Default vad found");
  }

  sub_B8E40((uint64_t *)&v199, (uint64_t)(v61 + 1), "", 4911);
  for (uint64_t i = (std::string *)v199.__r_.__value_.__l.__size_; i != &v199; uint64_t i = (std::string *)i->__r_.__value_.__l.__size_)
  {
    std::string::size_type cap = i->__r_.__value_.__l.__cap_;
    if ((*(_WORD *)(cap + 184) & 1) == 0)
    {
      memset(buf, 0, 24);
      strcpy(&buf[24], "cwdv");
      os_signpost_id_t v201 = 0;
      v202 = 3;
      v204[0] = 0LL;
      v204[1] = 0LL;
      std::string v203 = v204;
      CFTypeRef cf = 0LL;
      uint64_t v205 = 44731050;
      __int128 v70 = sub_578E8(*(void *)(a1 + 128), cap, (uint64_t)buf);
      sub_57ADC((uint64_t *)&v190, v70, v70);
      if (cf) {
        CFRelease(cf);
      }
      sub_32C8C(v204[0]);
      if (*(void *)buf)
      {
        *(void *)&buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }
    }
  }

  sub_1BB88((uint64_t *)&v199);
  std::string::size_type v71 = sub_138E8(2);
  std::string::size_type v72 = sub_138E8(34);
  std::string::size_type v73 = 0;
  BOOL v74 = 0LL;
  *(void *)buf = 0x100000002LL;
  unint64_t v75 = *(void *)(v71 + 8);
  while (1)
  {
    uint64_t v76 = *(int *)&buf[4 * v74];
    BOOL v77 = v73;
    if (((v75 & v76) != 0) != ((*(void *)(v72 + 8) & v76) != 0)) {
      break;
    }
    std::string::size_type v73 = 1;
    BOOL v74 = 1LL;
    if ((v77 & 1) != 0)
    {
      if ((v75 & 1) == 0) {
        goto LABEL_191;
      }
      goto LABEL_183;
    }
  }

  if ((v75 & v76) == 0) {
    std::string::size_type v71 = v72;
  }
  if ((*(void *)(v71 + 8) & 1) != 0)
  {
LABEL_183:
    uint64_t v78 = *(id *)v71;
    if (v78)
    {
      uint64_t v79 = (os_log_s *)v78;
      if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
      {
        sub_12476C(&v199, v197, v198);
        BOOL v80 = (v199.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v199 : (std::string *)v199.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4922;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v80;
        _os_log_impl( &dword_0,  v79,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d The current route configuration's default device has the following ouputs: %s",  buf,  0x1Cu);
      }
    }
  }

void sub_11DC60( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39, uint64_t a40, uint64_t a41, char a42, uint64_t a43, uint64_t a44, void *__p, uint64_t a46, int a47, __int16 a48, char a49, char a50)
{
}

uint64_t sub_11DDE4(uint64_t *a1)
{
  if (*((_BYTE *)a1 + 48)) {
    return a1[5];
  }
  uint64_t v2 = *a1;
  for (uint64_t i = *(void *)(*a1 + 8); i != v2; uint64_t i = *(void *)(i + 8))
  {
    if (sub_11E3FC((uint64_t)(a1 + 1), i + 16))
    {
      uint64_t v2 = i;
      break;
    }
  }

  a1[5] = v2;
  *((_BYTE *)a1 + 48) = 1;
  return v2;
}

void sub_11DE5C(uint64_t a1, uint64_t *a2, std::string::size_type a3, uint64_t *a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v27 = 0LL;
  __int128 v28 = 0LL;
  int64_t v29 = 0LL;
  if (a4)
  {
    uint64_t v8 = *a4;
    uint64_t v9 = a4[1];
    *(void *)buf = &v27;
    buf[8] = 0;
    if (v9 == v8)
    {
      unint64_t v14 = 0LL;
    }

    else
    {
      unint64_t v10 = 0x6FB586FB586FB587LL * ((v9 - v8) >> 3);
      if (v10 > 0x94F2094F2094F2LL) {
        sub_7A87C();
      }
      uint64_t v11 = (char *)sub_8F5F8(v10);
      uint64_t v12 = 0LL;
      uint64_t v27 = v11;
      __int128 v28 = v11;
      int64_t v29 = &v11[440 * v13];
      do
      {
        sub_71648((uint64_t)&v11[v12], v8 + v12);
        v12 += 440LL;
      }

      while (v8 + v12 != v9);
      unint64_t v14 = (unint64_t)&v11[v12];
      __int128 v28 = &v11[v12];
    }

    unint64_t v15 = a6;
  }

  else
  {
    unint64_t v15 = a6;
    unint64_t v14 = 0LL;
  }

  uint64_t v16 = *(void *)(a5 + 368);
  for (uint64_t i = *(void *)(a5 + 376); v16 != i; v16 += 440LL)
  {
    if (v14 >= (unint64_t)v29)
    {
      uint64_t v18 = 0x6FB586FB586FB587LL * ((uint64_t)(v14 - (void)v27) >> 3);
      unint64_t v19 = v18 + 1;
      if (0xDF6B0DF6B0DF6B0ELL * ((v29 - v27) >> 3) > v19) {
        unint64_t v19 = 0xDF6B0DF6B0DF6B0ELL * ((v29 - v27) >> 3);
      }
      else {
        unint64_t v20 = v19;
      }
      std::string::size_type v31 = &v29;
      if (v20) {
        unint64_t v20 = (unint64_t)sub_8F5F8(v20);
      }
      else {
        uint64_t v21 = 0LL;
      }
      *(void *)buf = v20;
      *(void *)&buf[8] = v20 + 440 * v18;
      *(void *)&_DWORD buf[16] = *(void *)&buf[8];
      *(void *)&buf[24] = v20 + 440 * v21;
      sub_71648(*(uint64_t *)&buf[8], v16);
      *(void *)&buf[16] += 440LL;
      sub_126574((uint64_t *)&v27, buf);
      unint64_t v14 = (unint64_t)v28;
      sub_126644((uint64_t)buf);
    }

    else
    {
      sub_71648(v14, v16);
      v14 += 440LL;
    }

    __int128 v28 = (char *)v14;
  }

  uint64_t v22 = sub_138E8(8);
  if ((*(_BYTE *)(v22 + 8) & 1) != 0)
  {
    __int128 v23 = *(os_log_s **)v22;
    if (*(void *)v22)
    {
      if (os_log_type_enabled(*(os_log_t *)v22, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4729;
        *(_WORD *)&buf[18] = 2048;
        *(void *)&buf[20] = 0x6FB586FB586FB587LL * ((v28 - v27) >> 3);
        _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d %lu alternate route(s) required... Attempting to build if needed...",  buf,  0x1Cu);
      }
    }
  }

  sub_11E94C(a1, a2, (uint64_t *)&v27, 0, (void **)a5, a3, v15);
  *(void *)buf = &v27;
  sub_8F2D4((void ***)buf);
}

void sub_11E170( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

os_signpost_id_t *sub_11E1F4(os_signpost_id_t *a1)
{
  uint64_t v2 = sub_138E8(42);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    unsigned int v3 = *(os_log_s **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v8 = 136315650;
        uint64_t v9 = "SignpostUtilities.h";
        __int16 v10 = 1024;
        int v11 = 70;
        __int16 v12 = 2080;
        uint64_t v13 = "kBuildAlternateRoutesAndActivateForNormal";
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Ending measurement for signpost %s",  (uint8_t *)&v8,  0x1Cu);
      }
    }
  }

  if (*a1)
  {
    unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_493908);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
    {
      qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_493908);
    }

    os_signpost_id_t v5 = *a1;
    if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v6 = (os_log_s *)qword_493900;
      if (os_signpost_enabled((os_log_t)qword_493900))
      {
        LOWORD(v8) = 0;
        _os_signpost_emit_with_name_impl( &dword_0,  v6,  OS_SIGNPOST_INTERVAL_END,  v5,  "VA_BuildAlternateRoutesAndActivateForNormal",  (const char *)&unk_420CC6,  (uint8_t *)&v8,  2u);
      }
    }
  }

  return a1;
}

void sub_11E380(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

void sub_11E38C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t **)**a1;
  if (v2)
  {
    unsigned __int8 v4 = (uint64_t **)v1[1];
    os_signpost_id_t v5 = **a1;
    if (v4 != v2)
    {
      do
        sub_11E910(--v4);
      while (v4 != v2);
      os_signpost_id_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

BOOL sub_11E3FC(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_54FA4(a2, *(void *)(a1 + 12));
  if (result)
  {
    if (*(_BYTE *)(a1 + 8))
    {
      uint64_t v5 = *(void *)a1 + 8LL;
      uint64_t v6 = **(void ***)a1;
      if (v6 != (void *)v5)
      {
        while (1)
        {
          if (*(void *)(a2 + 8) != a2)
          {
            int v7 = *((_DWORD *)v6 + 7);
            uint64_t v8 = *(void *)(a2 + 8);
            do
            {
              BOOL v9 = *(_DWORD *)(v8 + 16) == v7 || *(_DWORD *)(v8 + 20) == v7;
              char v10 = v9;
              if (v9) {
                break;
              }
              uint64_t v8 = *(void *)(v8 + 8);
            }

            while (v8 != a2);
            if ((v10 & 1) != 0) {
              break;
            }
          }

          int v11 = (void *)v6[1];
          if (v11)
          {
            do
            {
              __int16 v12 = v11;
              int v11 = (void *)*v11;
            }

            while (v11);
          }

          else
          {
            do
            {
              __int16 v12 = (void *)v6[2];
              BOOL v9 = *v12 == (void)v6;
              uint64_t v6 = v12;
            }

            while (!v9);
          }

          uint64_t v6 = v12;
          if (v12 == (void *)v5) {
            return 1LL;
          }
        }

        return 0LL;
      }
    }

    else
    {
      if (!*(void *)(a2 + 16))
      {
        BOOL v24 = (os_log_t *)sub_138E8(8);
        BOOL v25 = *v24;
        if (*v24)
        {
          BOOL v26 = os_log_type_enabled(*v24, OS_LOG_TYPE_DEFAULT);
          BOOL result = 0LL;
          if (!v26) {
            return result;
          }
          int v27 = 136315394;
          __int128 v28 = "RouteUtilities.h";
          __int16 v29 = 1024;
          int v30 = 656;
          _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d No connections in connection list?",  (uint8_t *)&v27,  0x12u);
        }

        return 0LL;
      }

      uint64_t v13 = *(void **)a1;
      if (*(void *)(*(void *)a1 + 16LL))
      {
        uint64_t v14 = *(void *)(a2 + 8);
        if (v14 != a2)
        {
          uint64_t v17 = (void *)*v13;
          unint64_t v15 = v13 + 1;
          uint64_t v16 = v17;
          while (1)
          {
            uint64_t v18 = v16;
            if (v16 != v15)
            {
              uint64_t v18 = v16;
              while (*((_DWORD *)v18 + 7) != *(_DWORD *)(v14 + 16))
              {
                unint64_t v19 = (void *)v18[1];
                if (v19)
                {
                  do
                  {
                    unint64_t v20 = v19;
                    unint64_t v19 = (void *)*v19;
                  }

                  while (v19);
                }

                else
                {
                  do
                  {
                    unint64_t v20 = (void *)v18[2];
                    BOOL v9 = *v20 == (void)v18;
                    uint64_t v18 = v20;
                  }

                  while (!v9);
                }

                uint64_t v18 = v20;
                if (v20 == v15) {
                  goto LABEL_37;
                }
              }
            }

            if (v18 == v15)
            {
LABEL_37:
              uint64_t v21 = v16;
              if (v16 != v15)
              {
                uint64_t v21 = v16;
                while (*((_DWORD *)v21 + 7) != *(_DWORD *)(v14 + 20))
                {
                  uint64_t v22 = (void *)v21[1];
                  if (v22)
                  {
                    do
                    {
                      __int128 v23 = v22;
                      uint64_t v22 = (void *)*v22;
                    }

                    while (v22);
                  }

                  else
                  {
                    do
                    {
                      __int128 v23 = (void *)v21[2];
                      BOOL v9 = *v23 == (void)v21;
                      uint64_t v21 = v23;
                    }

                    while (!v9);
                  }

                  uint64_t v21 = v23;
                  if (v23 == v15) {
                    return 1LL;
                  }
                }
              }

              if (v21 == v15) {
                return 1LL;
              }
            }

            BOOL result = 0LL;
            uint64_t v14 = *(void *)(v14 + 8);
            if (v14 == a2) {
              return result;
            }
          }
        }

        return 0LL;
      }
    }

    return 1LL;
  }

  return result;
}

void sub_11E670(uint64_t **a1, uint64_t a2)
{
  unsigned int v3 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return;
  }
  uint64_t v6 = *(void **)(a2 + 8);
  do
  {
    int v7 = *(void **)a2;
    if (*(void **)a2 == v6) {
      goto LABEL_63;
    }
    do
    {
      uint64_t v8 = (std::__shared_weak_count *)v3[1];
      if (v8)
      {
        BOOL v9 = std::__shared_weak_count::lock(v8);
        char v10 = v9;
        if (v9)
        {
          uint64_t v11 = *v3;
          p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
          do
            unint64_t v13 = __ldxr(p_shared_weak_owners);
          while (__stxr(v13 + 1, p_shared_weak_owners));
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            unint64_t v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v10);
          }
        }

        else
        {
          uint64_t v11 = 0LL;
        }
      }

      else
      {
        uint64_t v11 = 0LL;
        char v10 = 0LL;
      }

      uint64_t v16 = (std::__shared_weak_count *)v7[1];
      if (!v16)
      {
        uint64_t v19 = 0LL;
        uint64_t v18 = 0LL;
LABEL_24:
        if (!v10) {
          goto LABEL_31;
        }
        goto LABEL_25;
      }

      uint64_t v17 = std::__shared_weak_count::lock(v16);
      uint64_t v18 = v17;
      if (v17)
      {
        uint64_t v19 = *v7;
        unint64_t v20 = (unint64_t *)&v17->__shared_weak_owners_;
        do
          unint64_t v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
        uint64_t v22 = (unint64_t *)&v17->__shared_owners_;
        do
          unint64_t v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v18);
          if (!v10) {
            goto LABEL_31;
          }
          goto LABEL_25;
        }

        goto LABEL_24;
      }

      uint64_t v19 = 0LL;
      if (!v10)
      {
LABEL_31:
        uint64_t v25 = 0LL;
        BOOL v24 = 0LL;
        if (!v18) {
          goto LABEL_37;
        }
        goto LABEL_32;
      }

void sub_11E910(uint64_t **a1)
{
  uint64_t v1 = *a1;
  *a1 = 0LL;
  if (v1)
  {
    sub_55F18(v1 + 2);
    operator delete(v1);
  }

void sub_11E94C( uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned int a4, void **a5, std::string::size_type a6, uint64_t *a7)
{
  unint64_t v10 = 0x6FB586FB586FB587LL * ((a3[1] - *a3) >> 3);
  uint64_t v11 = sub_138E8(8);
  uint64_t v12 = *(void *)(v11 + 8);
  uint64_t v253 = a1;
  if (v10 > a4)
  {
    unsigned int v251 = a4;
    if ((v12 & 1) != 0)
    {
      unint64_t v13 = *(os_log_s **)v11;
      if (*(void *)v11)
      {
        if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v14 = 0x6FB586FB586FB587LL * ((a3[1] - *a3) >> 3);
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4807;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = a4;
          *(_WORD *)&buf[24] = 2048;
          *(void *)&buf[26] = v14;
          _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Reviewing alternate device specification %u of %lu...",  buf,  0x22u);
        }
      }
    }

    uint64_t v15 = *a3;
    uint64_t v16 = a2 + 67;
    uint64_t v17 = a2[67];
    if (!v17) {
      goto LABEL_17;
    }
    int v18 = *(_DWORD *)(v15 + 440LL * a4 + 4);
    uint64_t v19 = a2 + 67;
    do
    {
      int v20 = *(_DWORD *)(v17 + 28);
      BOOL v21 = v20 < v18;
      if (v20 >= v18) {
        uint64_t v22 = (uint64_t *)v17;
      }
      else {
        uint64_t v22 = (uint64_t *)(v17 + 8);
      }
      if (!v21) {
        uint64_t v19 = (uint64_t *)v17;
      }
      uint64_t v17 = *v22;
    }

    while (*v22);
    if (v19 == v16 || v18 < *((_DWORD *)v19 + 7)) {
LABEL_17:
    }
      uint64_t v19 = a2 + 67;
    unsigned int v243 = a4;
    uint64_t v249 = *a3;
    uint64_t v23 = *(void *)(v15 + 440LL * a4 + 160);
    if (!v23) {
      sub_82CEC();
    }
    unsigned __int8 v24 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 48LL))(v23);
    uint64_t v25 = *(void *)(v249 + 440LL * a4 + 224);
    if (!v25) {
      sub_82CEC();
    }
    v263 = a5 + 1;
    if (((v19 == v16) & v24 & (*(unsigned int (**)(uint64_t, std::string::size_type))(*(void *)v25 + 48LL))( v25,  a6)) != 0)
    {
      uint64_t v255 = (void *)(v249 + 440LL * a4);
      int v262 = sub_55FD4((uint64_t)a2, (uint64_t)v255);
      uint64_t v26 = sub_138E8(8);
      if ((*(_BYTE *)(v26 + 8) & 1) != 0)
      {
        int v27 = *(os_log_s **)v26;
        if (*(void *)v26)
        {
          if (os_log_type_enabled(*(os_log_t *)v26, OS_LOG_TYPE_DEBUG))
          {
            sub_2CA1C(&v277, *(unsigned int *)(v249 + 440LL * a4 + 60));
            int size = (char)v277.__r_.__value_.__s.__size_;
            std::string::size_type v29 = v277.__r_.__value_.__r.__words[0];
            sub_8F640(&__p, *(unsigned int **)(v249 + 440LL * v251 + 8), *(unsigned int **)(v249 + 440LL * v251 + 16));
            unint64_t v30 = &v277;
            if (size < 0) {
              unint64_t v30 = (std::string *)v29;
            }
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            int v32 = *(_DWORD *)(v249 + 440LL * v251 + 56);
            if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
              p_p = &__p;
            }
            *(_DWORD *)buf = 136316162;
            *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
            uint64_t v33 = "Optional";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4817;
            *(_WORD *)&buf[18] = 2080;
            if (!v32) {
              uint64_t v33 = "Mandatory";
            }
            *(void *)&buf[20] = v30;
            *(_WORD *)&buf[28] = 2080;
            *(void *)&buf[30] = p_p;
            *(_WORD *)&buf[38] = 2080;
            v293 = v33;
            _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Alternate device specification is for VAD type %s and uses port types %s. VAD is %s",  buf,  0x30u);
          }
        }
      }

      uint64_t v260 = (unsigned int *)(v249 + 440LL * v251 + 64);
      std::string::size_type v248 = sub_543D8(*a2, *v260);
      unsigned int v34 = *v260;
      v277.__r_.__value_.__s.__data_[16] = *(_DWORD *)(v248 + 32) == 1668510820;
      HIDWORD(v277.__r_.__value_.__r.__words[2]) = v34;
      int v278 = v262;
      char v279 = 0;
      char v280 = 0;
      v277.__r_.__value_.__r.__words[0] = v248;
      v277.__r_.__value_.__l.__size_ = (std::string::size_type)(a5 + 3);
      uint64_t v282 = 0LL;
      uint64_t v281 = 0LL;
      uint64_t v35 = sub_11DDE4((uint64_t *)&v277);
      uint64_t v259 = v36;
      uint64_t v37 = v35;
      std::string::size_type v258 = v277.__r_.__value_.__r.__words[0];
      if (v277.__r_.__value_.__r.__words[0] != v35)
      {
        uint64_t v38 = v249 + 440LL * v251;
        uint64_t v264 = (unsigned int *)(v38 + 60);
        uint64_t v256 = (uint64_t)(a5 + 6);
        uint64_t v246 = (unsigned __int8 *)(v38 + 96);
        uint64_t v247 = (void *)(v38 + 192);
        char v245 = (const void ***)(v38 + 264);
        uint64_t v242 = (unsigned int *)(v38 + 4);
        uint64_t v244 = v38 + 432;
        uint64_t v270 = (uint64_t)(v36 + 1);
        char v257 = (void *)(v38 + 256);
        uint64_t v250 = a5 + 51;
        char v261 = a5 + 50;
        while (1)
        {
          uint64_t v39 = sub_138E8(8);
          if ((*(_BYTE *)(v39 + 8) & 1) != 0)
          {
            os_signpost_id_t v40 = *(os_log_s **)v39;
            if (*(void *)v39)
            {
              if (os_log_type_enabled(*(os_log_t *)v39, OS_LOG_TYPE_DEBUG))
              {
                sub_2CA1C(&__p, *v264);
                if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  unint64_t v41 = &__p;
                }
                else {
                  unint64_t v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                sub_2DABA8(&v296, v37 + 16);
                int v42 = (char)v296.__r_.__value_.__s.__size_;
                std::string::size_type v43 = v296.__r_.__value_.__r.__words[0];
                LODWORD(v290) = *v260;
                DWORD1(v290) = v262;
                BYTE8(v290) = 0;
                BYTE12(v290) = 0;
                sub_2DB6FC((std::string *)v298, (unsigned int *)&v290);
                unint64_t v44 = &v296;
                if (v42 < 0) {
                  unint64_t v44 = (std::string *)v43;
                }
                uint64_t v45 = v298;
                if (SBYTE3(v300) < 0) {
                  uint64_t v45 = *(const char **)v298;
                }
                *(_DWORD *)buf = 136316162;
                *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 4826;
                *(_WORD *)&buf[18] = 2080;
                *(void *)&buf[20] = v41;
                *(_WORD *)&buf[28] = 2080;
                *(void *)&buf[30] = v44;
                *(_WORD *)&buf[38] = 2080;
                v293 = v45;
                _os_log_impl( &dword_0,  v40,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Checking whether the alternate device specification for %s allows abstract route %s for category/mode %s...",  buf,  0x30u);
                if (SBYTE3(v300) < 0) {
                  operator delete(*(void **)v298);
                }
              }
            }
          }

          if (*v257) {
            break;
          }
LABEL_243:
          uint64_t v37 = *(void *)(v37 + 8);
          uint64_t v160 = *v259;
          if (v37 != *v259)
          {
            while (!sub_11E3FC(v270, v37 + 16))
            {
              uint64_t v37 = *(void *)(v37 + 8);
              if (v37 == v160)
              {
                uint64_t v37 = v160;
                break;
              }
            }
          }

          if (v37 == v258) {
            goto LABEL_338;
          }
        }

        if (((*(uint64_t (**)(void, uint64_t, std::string::size_type, _OWORD *, void **))(*(void *)*v257 + 48LL))( *v257,  v37 + 16,  a6,  v263,  a5 + 19) & 1) == 0) {
          goto LABEL_243;
        }
LABEL_56:
        uint64_t v46 = sub_138E8(8);
        if ((*(_BYTE *)(v46 + 8) & 1) != 0)
        {
          unint64_t v47 = *(os_log_s **)v46;
          if (*(void *)v46)
          {
            if (os_log_type_enabled(*(os_log_t *)v46, OS_LOG_TYPE_DEBUG))
            {
              sub_2CA1C(&__p, *v264);
              int v48 = (char)__p.__r_.__value_.__s.__size_;
              std::string::size_type v49 = __p.__r_.__value_.__r.__words[0];
              sub_2DABA8(&v296, v37 + 16);
              unint64_t v50 = &__p;
              if (v48 < 0) {
                unint64_t v50 = (std::string *)v49;
              }
              unint64_t v51 = &v296;
              if ((v296.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                unint64_t v51 = (std::string *)v296.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)buf = 136315906;
              *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4829;
              *(_WORD *)&buf[18] = 2080;
              *(void *)&buf[20] = v50;
              *(_WORD *)&buf[28] = 2080;
              *(void *)&buf[30] = v51;
              _os_log_impl( &dword_0,  v47,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Alternate device specification for %s allows abstract route %s... Building concrete route...",  buf,  0x26u);
            }
          }
        }

        unsigned int v52 = *v264;
        v276[0] = 0LL;
        v276[1] = 0LL;
        v275 = v276;
        sub_120BE4((uint64_t *)buf, v256, v52);
        sub_120C78((uint64_t *)&v275, *(void **)buf, &buf[8]);
        sub_FF3B8(*(void **)&buf[8]);
        *(_OWORD *)buf = *v263;
        if (!*v247) {
          sub_82CEC();
        }
        int v53 = (*(uint64_t (**)(void, _BYTE *))(*(void *)*v247 + 48LL))(*v247, buf);
        *(_DWORD *)v298 = *v260;
        *(_DWORD *)&v298[4] = v262;
        v298[8] = 0;
        v298[12] = 0;
        unsigned int v54 = *v264;
        unsigned int v55 = *(_DWORD *)v255;
        int v56 = *v246;
        std::string::size_type v57 = (std::string *)operator new(0x20uLL);
        v57->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_470B40;
        v57->__r_.__value_.__l.__size_ = (std::string::size_type)v255;
        v57->__r_.__value_.__l.__cap_ = (std::string::size_type)a5;
        v57[1].__r_.__value_.__r.__words[0] = a6;
        std::string::size_type v297 = v57;
        ((void (*)(_BYTE *__return_ptr, void **))(*a5)[3])(buf, a5);
        sub_120CFC( &v283,  v37 + 16,  v248,  v298,  v256,  a5 + 3,  (uint64_t)&v275,  (uint64_t)(a5 + 12),  0x636F7570u,  0,  v54,  v55,  v53,  v56 != 0,  (uint64_t)&v296,  (uint64_t)buf,  v245);
        if (cf) {
          CFRelease(cf);
        }
        sub_32C8C(v294);
        if (*(void *)buf)
        {
          *(void *)&buf[8] = *(void *)buf;
          operator delete(*(void **)buf);
        }

        uint64_t v58 = v297;
        if (v297 == &v296)
        {
          uint64_t v58 = &v296;
          uint64_t v59 = 4LL;
        }

        else
        {
          if (!v297) {
            goto LABEL_77;
          }
          uint64_t v59 = 5LL;
        }

        (*(void (**)(void))(v58->__r_.__value_.__r.__words[0] + 8 * v59))();
LABEL_77:
        int64x2_t v60 = (__n128 **)v283.i64[0];
        if (v283.i64[1] - v283.i64[0] >= 9uLL)
        {
          uint64_t v236 = (os_log_t *)sub_138E8(13);
          uint64_t v237 = *v236;
          if (*v236 && os_log_type_enabled(*v236, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v298 = 136315394;
            *(void *)&v298[4] = "RoutingManager.cpp";
            *(_WORD *)&v298[12] = 1024;
            *(_DWORD *)&v298[14] = 4851;
            _os_log_impl( &dword_0,  v237,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Received multiple concrete routes for a build of an alternate VA D, while specifying 'CoupleInputOutput'.",  v298,  0x12u);
          }

          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error( exception,  "Received multiple concrete routes for a build of an alternate VAD, while specifying 'CoupleInputOutput'.");
        }

        if (v283.i64[0] != v283.i64[1])
        {
          std::string::size_type v61 = *(unsigned int ***)a6;
          uint64_t v267 = *(unsigned int ***)(a6 + 8);
          if (*(unsigned int ***)a6 == v267)
          {
LABEL_164:
            uint64_t v106 = *v60;
            std::string::size_type v107 = (*v60)->n128_u64[0];
            LODWORD(__p.__r_.__value_.__r.__words[1]) = v106->n128_u32[2];
            __p.__r_.__value_.__r.__words[0] = v107;
            sub_719C8((__n128 **)&__p.__r_.__value_.__l.__cap_, v106 + 1);
            a1 = v253;
            unint64_t v273 = v106[2].n128_u64[1];
            char v108 = 1;
            goto LABEL_166;
          }

          uint64_t v266 = *(void *)v283.i64[0];
          uint64_t v62 = *(void *)v283.i64[0] + 16LL;
          while (1)
          {
            uint64_t v269 = v61;
            std::string::size_type v63 = *v61;
            v286 = 0LL;
            std::string::size_type v285 = 0LL;
            uint64_t v287 = 0LL;
            uint64_t v64 = *(void *)(v266 + 24);
            *(void *)v298 = &v285;
            while (v64 != v62)
            {
              sub_1212DC((char ***)v298, v64 + 16);
              uint64_t v64 = *(void *)(v64 + 8);
            }

            unint64_t v65 = v63 + 4;
            uint64_t v66 = *((void *)v63 + 3);
            *(void *)v298 = &v285;
            while ((unsigned int *)v66 != v65)
            {
              sub_1212DC((char ***)v298, v66 + 16);
              uint64_t v66 = *(void *)(v66 + 8);
            }

            std::string::size_type v67 = (uint64_t **)v285;
            while (1)
            {
              std::string::size_type v68 = v67;
              uint64_t v69 = v286;
              if (v286 == v67) {
                break;
              }
              __int128 v70 = *v67;
              sub_B8CBC((uint64_t *)v298, *v67, "", 390);
              sub_B8CBC((uint64_t *)&v290, v70 + 2, "", 391);
              ++v67;
              if (v286 == v68 + 1)
              {
                LOBYTE(v76) = 1;
              }

              else
              {
                std::string::size_type v71 = v68 + 1;
                do
                {
                  std::string::size_type v72 = *v71;
                  sub_B8CBC((uint64_t *)&v284, *v71, "", 406);
                  sub_B8CBC((uint64_t *)&v289, v72 + 2, "", 407);
                  uint64_t v73 = *(void *)v298;
                  __int128 v288 = *(_OWORD *)&v284.__r_.__value_.__l.__data_;
                  if (v284.__r_.__value_.__l.__size_)
                  {
                    BOOL v74 = (unint64_t *)(v284.__r_.__value_.__l.__size_ + 16);
                    do
                      unint64_t v75 = __ldxr(v74);
                    while (__stxr(v75 + 1, v74));
                  }

                  int v76 = (*(uint64_t (**)(uint64_t, __int128 *))(*(void *)v73 + 296LL))(v73, &v288);
                  if (*((void *)&v288 + 1)) {
                    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v288 + 1));
                  }
                  if (v76)
                  {
                    uint64_t v77 = *(void *)v298;
                    __int128 v288 = v289;
                    if (*((void *)&v289 + 1))
                    {
                      uint64_t v78 = (unint64_t *)(*((void *)&v289 + 1) + 16LL);
                      do
                        unint64_t v79 = __ldxr(v78);
                      while (__stxr(v79 + 1, v78));
                    }

                    int v76 = (*(uint64_t (**)(uint64_t, __int128 *))(*(void *)v77 + 296LL))(v77, &v288);
                    if (*((void *)&v288 + 1)) {
                      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v288 + 1));
                    }
                    if (v76)
                    {
                      uint64_t v80 = v290;
                      __int128 v288 = *(_OWORD *)&v284.__r_.__value_.__l.__data_;
                      if (v284.__r_.__value_.__l.__size_)
                      {
                        uint64_t v81 = (unint64_t *)(v284.__r_.__value_.__l.__size_ + 16);
                        do
                          unint64_t v82 = __ldxr(v81);
                        while (__stxr(v82 + 1, v81));
                      }

                      int v76 = (*(uint64_t (**)(uint64_t, __int128 *))(*(void *)v80 + 296LL))(v80, &v288);
                      if (*((void *)&v288 + 1)) {
                        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v288 + 1));
                      }
                      if (v76)
                      {
                        uint64_t v83 = v290;
                        __int128 v288 = v289;
                        if (*((void *)&v289 + 1))
                        {
                          unint64_t v84 = (unint64_t *)(*((void *)&v289 + 1) + 16LL);
                          do
                            unint64_t v85 = __ldxr(v84);
                          while (__stxr(v85 + 1, v84));
                        }

                        LOBYTE(v76) = (*(uint64_t (**)(uint64_t, __int128 *))(*(void *)v83 + 296LL))( v83,  &v288);
                        if (*((void *)&v288 + 1)) {
                          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v288 + 1));
                        }
                      }
                    }
                  }

                  uint64_t v86 = (std::__shared_weak_count *)*((void *)&v289 + 1);
                  if (*((void *)&v289 + 1))
                  {
                    int v87 = (unint64_t *)(*((void *)&v289 + 1) + 8LL);
                    do
                      unint64_t v88 = __ldaxr(v87);
                    while (__stlxr(v88 - 1, v87));
                    if (!v88)
                    {
                      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                      std::__shared_weak_count::__release_weak(v86);
                    }
                  }

                  std::string::size_type v89 = (std::__shared_weak_count *)v284.__r_.__value_.__l.__size_;
                  if (v284.__r_.__value_.__l.__size_)
                  {
                    unint64_t v90 = (unint64_t *)(v284.__r_.__value_.__l.__size_ + 8);
                    do
                      unint64_t v91 = __ldaxr(v90);
                    while (__stlxr(v91 - 1, v90));
                    if (!v91)
                    {
                      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                      std::__shared_weak_count::__release_weak(v89);
                    }
                  }

                  if (v286 == ++v71) {
                    char v92 = 0;
                  }
                  else {
                    char v92 = v76;
                  }
                }

                while ((v92 & 1) != 0);
              }

              int v93 = (std::__shared_weak_count *)*((void *)&v290 + 1);
              if (*((void *)&v290 + 1))
              {
                uint64_t v94 = (unint64_t *)(*((void *)&v290 + 1) + 8LL);
                do
                  unint64_t v95 = __ldaxr(v94);
                while (__stlxr(v95 - 1, v94));
                if (!v95)
                {
                  ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                  std::__shared_weak_count::__release_weak(v93);
                }
              }

              BOOL v96 = *(std::__shared_weak_count **)&v298[8];
              if (!*(void *)&v298[8]) {
                goto LABEL_139;
              }
              std::string::size_type v97 = (unint64_t *)(*(void *)&v298[8] + 8LL);
              do
                unint64_t v98 = __ldaxr(v97);
              while (__stlxr(v98 - 1, v97));
              if (!v98)
              {
                ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                std::__shared_weak_count::__release_weak(v96);
                if ((v76 & 1) == 0)
                {
LABEL_142:
                  uint64_t v99 = (os_log_t *)sub_138E8(8);
                  unint64_t v100 = *v99;
                  if (*v99 && os_log_type_enabled(*v99, OS_LOG_TYPE_DEFAULT))
                  {
                    BOOL v101 = (uint64_t **)v285;
                    char v102 = v286;
                    memset(&v284, 0, sizeof(v284));
                    std::string::append(&v284, "{ ", 2uLL);
                    if (v101 != v102)
                    {
                      while (1)
                      {
                        sub_2DA02C(&v290, *v101);
                        if (v291 >= 0) {
                          uint64_t v103 = (const std::string::value_type *)&v290;
                        }
                        else {
                          uint64_t v103 = (const std::string::value_type *)v290;
                        }
                        if (v291 >= 0) {
                          std::string::size_type v104 = HIBYTE(v291);
                        }
                        else {
                          std::string::size_type v104 = *((void *)&v290 + 1);
                        }
                        std::string::append(&v284, v103, v104);
                        if (SHIBYTE(v291) < 0) {
                          operator delete((void *)v290);
                        }
                        if (++v101 == v102) {
                          break;
                        }
                        std::string::append(&v284, ", ", 2uLL);
                      }
                    }

                    std::string::append(&v284, " }", 2uLL);
                    unint64_t v105 = &v284;
                    if ((v284.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                      unint64_t v105 = (std::string *)v284.__r_.__value_.__r.__words[0];
                    }
                    *(_DWORD *)v298 = 136315650;
                    *(void *)&v298[4] = "RoutingManager.cpp";
                    *(_WORD *)&v298[12] = 1024;
                    *(_DWORD *)&v298[14] = 4752;
                    __int16 v299 = 2080;
                    v300 = v105;
                    _os_log_impl( &dword_0,  v100,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Connections are incompatible: %s",  v298,  0x1Cu);
                  }

                  break;
                }
              }

              else
              {
LABEL_139:
                if ((v76 & 1) == 0) {
                  goto LABEL_142;
                }
              }
            }

            if (v285)
            {
              v286 = (uint64_t **)v285;
              operator delete(v285);
            }

            if (v69 != v68) {
              break;
            }
            std::string::size_type v61 = v269 + 1;
            if (v269 + 1 == v267)
            {
              int64x2_t v60 = (__n128 **)v283.i64[0];
              goto LABEL_164;
            }
          }
        }

        char v108 = 0;
        __p.__r_.__value_.__s.__data_[0] = 0;
        a1 = v253;
LABEL_166:
        char v274 = v108;
        *(void *)v298 = &v283;
        sub_11E38C((void ***)v298);
        if (!v274)
        {
LABEL_242:
          sub_FF3B8(v276[0]);
          goto LABEL_243;
        }

        uint64_t v109 = sub_138E8(8);
        if ((*(_BYTE *)(v109 + 8) & 1) != 0)
        {
          uint64_t v110 = *(os_log_s **)v109;
          if (*(void *)v109)
          {
            if (os_log_type_enabled(*(os_log_t *)v109, OS_LOG_TYPE_DEBUG))
            {
              sub_2DA51C(&v296, (unsigned int *)&__p);
              uint64_t v111 = *v242;
              BOOL v112 = "????";
              int v113 = (char)v296.__r_.__value_.__s.__size_;
              std::string::size_type v114 = v296.__r_.__value_.__r.__words[0];
              sub_7D084(v298, v112);
              unsigned __int8 v115 = &v296;
              if (v113 < 0) {
                unsigned __int8 v115 = (std::string *)v114;
              }
              uint64_t v116 = v298;
              if (SBYTE3(v300) < 0) {
                uint64_t v116 = *(_BYTE **)v298;
              }
              *(_DWORD *)buf = 136315906;
              *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4863;
              *(_WORD *)&buf[18] = 2080;
              *(void *)&buf[20] = v115;
              *(_WORD *)&buf[28] = 2080;
              *(void *)&buf[30] = v116;
              _os_log_impl( &dword_0,  v110,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Successfully built alternate concrete route %s for alternate VAD %s; adding to accumulated con"
                "crete route list and attempting to recurse...",
                buf,
                0x26u);
              if (SBYTE3(v300) < 0) {
                operator delete(*(void **)v298);
              }
            }
          }
        }

        int v117 = operator new(0x30uLL);
        *(void *)int v117 = __p.__r_.__value_.__r.__words[0];
        *((_DWORD *)v117 + 2) = __p.__r_.__value_.__r.__words[1];
        sub_719C8((__n128 **)v117 + 2, (__n128 *)&__p.__r_.__value_.__r.__words[2]);
        *((void *)v117 + 5) = v273;
        std::string::size_type v118 = (void *)a6;
        unint64_t v120 = *(void **)(a6 + 8);
        unint64_t v119 = *(void *)(a6 + 16);
        if ((unint64_t)v120 >= v119)
        {
          uint64_t v122 = ((uint64_t)v120 - *(void *)a6) >> 3;
          uint64_t v123 = v119 - *(void *)a6;
          uint64_t v124 = v123 >> 2;
          else {
            unint64_t v125 = v124;
          }
          *(void *)&_BYTE buf[32] = a6 + 16;
          if (v125) {
            unint64_t v125 = (unint64_t)sub_7DC90(v125);
          }
          else {
            uint64_t v126 = 0LL;
          }
          uint64_t v127 = (void *)(v125 + 8 * v122);
          unint64_t v128 = v125 + 8 * v126;
          *(void *)&buf[24] = v128;
          *uint64_t v127 = v117;
          char v121 = v127 + 1;
          *(void *)&_DWORD buf[16] = v127 + 1;
          uint64_t v130 = *(unsigned int ***)a6;
          unsigned __int8 v129 = *(unsigned int ***)(a6 + 8);
          if (v129 == *(unsigned int ***)a6)
          {
            int64x2_t v132 = vdupq_n_s64((unint64_t)v129);
            std::string::size_type v118 = (void *)a6;
          }

          else
          {
            do
            {
              uint64_t v131 = (uint64_t)*--v129;
              *unsigned __int8 v129 = 0LL;
              *--uint64_t v127 = v131;
            }

            while (v129 != v130);
            std::string::size_type v118 = (void *)a6;
            int64x2_t v132 = *(int64x2_t *)a6;
            char v121 = *(void **)&buf[16];
            unint64_t v128 = *(void *)&buf[24];
          }

          *std::string::size_type v118 = v127;
          v118[1] = v121;
          *(int64x2_t *)&buf[8] = v132;
          uint64_t v133 = v118[2];
          v118[2] = v128;
          *(void *)&buf[24] = v133;
          *(void *)buf = v132.i64[0];
          sub_55F88((uint64_t)buf);
        }

        else
        {
          *unint64_t v120 = v117;
          char v121 = v120 + 1;
        }

        v118[1] = v121;
        std::string::size_type v134 = __p.__r_.__value_.__r.__words[0];
        unsigned int v135 = *v260;
        LODWORD(v290) = *v260;
        DWORD1(v290) = v262;
        BYTE8(v290) = 0;
        BYTE12(v290) = 0;
        LODWORD(v291) = *(_DWORD *)v244;
        BYTE4(v291) = *(_BYTE *)(v244 + 4);
        uint64_t v136 = sub_138E8(8);
        if ((*(_BYTE *)(v136 + 8) & 1) != 0)
        {
          char v137 = *(os_log_s **)v136;
          if (*(void *)v136)
          {
            if (os_log_type_enabled(*(os_log_t *)v136, OS_LOG_TYPE_DEBUG))
            {
              sub_2DB8A4(&v296, (uint64_t)&v290);
              int v138 = (char)v296.__r_.__value_.__s.__size_;
              std::string::size_type v139 = v296.__r_.__value_.__r.__words[0];
              sub_2DB8A4((std::string *)v298, (uint64_t)&v290);
              int v140 = &v296;
              if (v138 < 0) {
                int v140 = (std::string *)v139;
              }
              std::string::size_type v141 = v298;
              if (SBYTE3(v300) < 0) {
                std::string::size_type v141 = *(_BYTE **)v298;
              }
              *(_DWORD *)buf = 136315906;
              *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1504;
              *(_WORD *)&buf[18] = 2080;
              *(void *)&buf[20] = v140;
              *(_WORD *)&buf[28] = 2080;
              *(void *)&buf[30] = v141;
              _os_log_impl(&dword_0, v137, OS_LOG_TYPE_DEBUG, "%25s:%-5d Adding %s for %s", buf, 0x26u);
              if (SBYTE3(v300) < 0) {
                operator delete(*(void **)v298);
              }
            }
          }
        }

        uint64_t v142 = sub_71A5C((uint64_t)v261, v134, HIDWORD(v134));
        if (v250 != (void **)v142)
        {
          std::string::size_type v143 = (void *)v142;
          if (*(_DWORD *)(v142 + 36) == v135 && *(_DWORD *)(v142 + 40) == v262 && !*(_BYTE *)(v142 + 48))
          {
            if (BYTE4(v291) && *(_BYTE *)(v142 + 56))
            {
              int v144 = v291;
              int v145 = *(_DWORD *)(v142 + 52);
            }

            else
            {
              int v145 = *(unsigned __int8 *)(v142 + 56) != 0;
              int v144 = BYTE4(v291) != 0;
            }

            if (v144 == v145) {
              goto LABEL_220;
            }
          }

          sub_71ACC(v261, (uint64_t *)v142);
          operator delete(v143);
        }

        uint64_t v146 = (char *)operator new(0x40uLL);
        *(void *)(v146 + 28) = v134;
        *(_OWORD *)(v146 + 36) = v290;
        *(void *)(v146 + 52) = v291;
        int v147 = sub_71B20((uint64_t)v261, buf, v134, HIDWORD(v134));
        if (*v147) {
          operator delete(v146);
        }
        else {
          sub_32C38(v261, *(uint64_t *)buf, (uint64_t **)v147, (uint64_t *)v146);
        }
LABEL_220:
        sub_11E94C(a1, a2, a3, v243 + 1, a5, a6, a7);
        if (!*(_DWORD *)(a1 + 8))
        {
          uint64_t v229 = sub_138E8(8);
          if ((*(_BYTE *)(v229 + 8) & 1) != 0)
          {
            std::string v230 = *(os_log_s **)v229;
            if (*(void *)v229)
            {
              if (os_log_type_enabled(*(os_log_t *)v229, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136315394;
                *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 4883;
                _os_log_impl(&dword_0, v230, OS_LOG_TYPE_DEBUG, "%25s:%-5d Recursion succeeded; returning.", buf, 0x12u);
              }
            }
          }

          if (v274) {
            sub_55F18((uint64_t *)&__p.__r_.__value_.__l.__cap_);
          }
          sub_FF3B8(v276[0]);
          return;
        }

        uint64_t v148 = sub_138E8(8);
        if ((*(_BYTE *)(v148 + 8) & 1) != 0)
        {
          os_signpost_id_t v149 = *(os_log_s **)v148;
          if (*(void *)v148)
          {
            if (os_log_type_enabled(*(os_log_t *)v148, OS_LOG_TYPE_DEBUG))
            {
              sub_2DA51C(&v296, (unsigned int *)&__p);
              unsigned __int8 v150 = &v296;
              if ((v296.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                unsigned __int8 v150 = (std::string *)v296.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)buf = 136315650;
              *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4877;
              *(_WORD *)&buf[18] = 2080;
              *(void *)&buf[20] = v150;
              _os_log_impl( &dword_0,  v149,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Recursion failed; removing alternate concrete route from the accumlated concrete route list: %s.",
                buf,
                0x1Cu);
            }
          }
        }

        *(void *)&__int128 v290 = __p.__r_.__value_.__r.__words[0];
        uint64_t v151 = sub_71A5C( (uint64_t)v261,  __p.__r_.__value_.__l.__data_,  HIDWORD(__p.__r_.__value_.__r.__words[0]));
        if (v250 == (void **)v151)
        {
          uint64_t v239 = (os_log_t *)sub_138E8(13);
          uint64_t v240 = *v239;
          if (*v239 && os_log_type_enabled(*v239, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1522;
            _os_log_impl( &dword_0,  v240,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
          }

          char v241 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v241, "Precondition failure.");
        }

        int v152 = (uint64_t *)v151;
        uint64_t v153 = sub_138E8(8);
        if ((*(_BYTE *)(v153 + 8) & 1) != 0)
        {
          unint64_t v154 = *(os_log_s **)v153;
          if (*(void *)v153)
          {
            if (os_log_type_enabled(*(os_log_t *)v153, OS_LOG_TYPE_DEBUG))
            {
              sub_2DB8A4(&v296, (uint64_t)v152 + 36);
              int v155 = (char)v296.__r_.__value_.__s.__size_;
              std::string::size_type v156 = v296.__r_.__value_.__r.__words[0];
              sub_33464((std::string *)v298, (unsigned int *)&v290);
              BOOL v157 = &v296;
              if (v155 < 0) {
                BOOL v157 = (std::string *)v156;
              }
              uint64_t v158 = v298;
              if (SBYTE3(v300) < 0) {
                uint64_t v158 = *(_BYTE **)v298;
              }
              *(_DWORD *)buf = 136315906;
              *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1523;
              *(_WORD *)&buf[18] = 2080;
              *(void *)&buf[20] = v157;
              *(_WORD *)&buf[28] = 2080;
              *(void *)&buf[30] = v158;
              _os_log_impl(&dword_0, v154, OS_LOG_TYPE_DEBUG, "%25s:%-5d Removing %s for %s", buf, 0x26u);
              if (SBYTE3(v300) < 0) {
                operator delete(*(void **)v298);
              }
            }
          }
        }

        sub_71ACC(v261, v152);
        operator delete(v152);
        int v159 = (uint64_t **)(*(void *)(a6 + 8) - 8LL);
        sub_11E910(v159);
        *(void *)(a6 + 8) = v159;
        sub_7058C((void *)a1);
        if (v274) {
          sub_55F18((uint64_t *)&__p.__r_.__value_.__l.__cap_);
        }
        goto LABEL_242;
      }
    }

    else
    {
      uint64_t v219 = sub_138E8(8);
      if ((*(_BYTE *)(v219 + 8) & 1) != 0)
      {
        BOOL v220 = *(os_log_s **)v219;
        if (*(void *)v219)
        {
          if (os_log_type_enabled(*(os_log_t *)v219, OS_LOG_TYPE_DEBUG))
          {
            sub_2CA1C(&v277, *(unsigned int *)(v249 + 440LL * a4 + 60));
            BOOL v221 = (v277.__r_.__value_.__s.__size_ & 0x80u) == 0
                 ? &v277
                 : (std::string *)v277.__r_.__value_.__r.__words[0];
            int v222 = *(_DWORD *)(v249 + 440LL * a4 + 56);
            *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
            *(_DWORD *)buf = 136315906;
            *(_WORD *)&_BYTE buf[12] = 1024;
            unsigned int v223 = v222 ? "not " : "";
            *(_DWORD *)&buf[14] = 4812;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = v221;
            *(_WORD *)&buf[28] = 2080;
            *(void *)&buf[30] = v223;
            _os_log_impl( &dword_0,  v220,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d VirtualAudioDeviceType %s is currently disabled, and is %s mandatory",  buf,  0x26u);
          }
        }
      }
    }

void sub_120930( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t *a40, uint64_t a41, uint64_t a42, uint64_t a43, void *a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a68) {
    sub_55F18(a40);
  }
  sub_FF3B8(a70);
  _Unwind_Resume(a1);
}

void sub_120BD0()
{
}

uint64_t *sub_120BE4(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *(void *)(a2 + 32);
  if (!v3) {
    return sub_121604(a1, a2);
  }
  uint64_t v4 = a2 + 32;
  do
  {
    unsigned int v5 = *(_DWORD *)(v3 + 32);
    BOOL v6 = v5 >= a3;
    if (v5 >= a3) {
      int v7 = (uint64_t *)v3;
    }
    else {
      int v7 = (uint64_t *)(v3 + 8);
    }
    if (v6) {
      uint64_t v4 = v3;
    }
    uint64_t v3 = *v7;
  }

  while (*v7);
  if (v4 == a2 + 32 || *(_DWORD *)(v4 + 32) > a3) {
    return sub_121604(a1, a2);
  }
  BOOL v9 = sub_121604(a1, a2);
  return sub_120C78(v9, *(void **)(v4 + 40), (void *)(v4 + 48));
}

void sub_120C64(_Unwind_Exception *a1)
{
}

uint64_t *sub_120C78(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    unsigned int v5 = (uint64_t **)result;
    BOOL v6 = result + 1;
    do
    {
      BOOL result = sub_1039A8(v5, v6, v4 + 4, v4 + 4);
      int v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          int v7 = (void *)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }

        while (!v9);
      }

      uint64_t v4 = v8;
    }

    while (v8 != a3);
  }

  return result;
}

void sub_120CFC( int64x2_t *a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, void **a6, uint64_t a7, uint64_t a8, unsigned int a9, unsigned __int8 a10, unsigned int a11, unsigned int a12, int a13, unsigned __int8 a14, uint64_t a15, uint64_t a16, const void ***a17)
{
  uint64_t v24 = sub_138E8(8);
  if ((*(_BYTE *)(v24 + 8) & 1) != 0)
  {
    uint64_t v25 = *(os_log_s **)v24;
    if (*(void *)v24)
    {
      if (os_log_type_enabled(*(os_log_t *)v24, OS_LOG_TYPE_DEBUG))
      {
        sub_2DABA8(&v62, a2);
        if ((v62.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v26 = &v62;
        }
        else {
          uint64_t v26 = (std::string *)v62.__r_.__value_.__r.__words[0];
        }
        sub_2CA1C(v60, a4[1]);
        if (v61 >= 0) {
          int v27 = v60;
        }
        else {
          int v27 = (void **)v60[0];
        }
        uint64_t v45 = v27;
        sub_2CA1C(v58, a11);
        if (v59 >= 0) {
          BOOL v28 = v58;
        }
        else {
          BOOL v28 = (void **)v58[0];
        }
        std::string::size_type v43 = v28;
        unint64_t v44 = v26;
        std::to_string(&v57, a12);
        int size = (char)v57.__r_.__value_.__s.__size_;
        std::string::size_type v30 = v57.__r_.__value_.__r.__words[0];
        sub_1214C4(&__p, *(os_unfair_lock_s ***)a7, (os_unfair_lock_s **)(a7 + 8));
        std::string::size_type v31 = &v57;
        if (size < 0) {
          std::string::size_type v31 = (std::string *)v30;
        }
        p_p = &__p;
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136316674;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        __int16 v78 = 1024;
        int v79 = 747;
        __int16 v80 = 2080;
        uint64_t v81 = v44;
        __int16 v82 = 2080;
        uint64_t v83 = v45;
        __int16 v84 = 2080;
        unint64_t v85 = v43;
        __int16 v86 = 2080;
        int v87 = v31;
        __int16 v88 = 2080;
        std::string::size_type v89 = p_p;
        _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to build concrete route for abstract route %s using mode %s, device type %s, context id % s, and excluded ports %s.",  buf,  0x44u);
        if (v59 < 0) {
          operator delete(v58[0]);
        }
        if (v61 < 0) {
          operator delete(v60[0]);
        }
      }
    }
  }

  int v33 = *(_DWORD *)(a3 + 32);
  int v48 = 0LL;
  uint64_t v49 = 0LL;
  unint64_t v47 = 0LL;
  sub_7A5B8(&v47, *(const void **)a16, *(void *)(a16 + 8), (uint64_t)(*(void *)(a16 + 8) - *(void *)a16) >> 2);
  uint64_t v50 = *(void *)(a16 + 24);
  char v51 = *(_BYTE *)(a16 + 32);
  int v52 = *(_DWORD *)(a16 + 40);
  sub_86550(v53, a16 + 48);
  int v54 = *(_DWORD *)(a16 + 72);
  unsigned int v34 = *(const void **)(a16 + 80);
  if (v34) {
    CFRetain(v34);
  }
  CFTypeRef cf = v34;
  sub_54070(v63, a17);
  sub_121604(v71, a7);
  uint64_t v35 = v72;
  sub_82AF0((uint64_t)v72, a15);
  int v74 = v33;
  int v76 = 0LL;
  unint64_t v36 = operator new(0xF0uLL);
  *unint64_t v36 = off_470AB0;
  sub_54070(v36 + 1, v63);
  sub_121604(v36 + 22, (uint64_t)v71);
  sub_121654((uint64_t)(v36 + 25), (uint64_t)v72);
  *((_DWORD *)v36 + 58) = v74;
  int v76 = v36;
  sub_1216B8(a1, a2, a3, a4, a5, a6, a8, a10, a9, a11, a12, a13, a14, (uint64_t)&v47, (uint64_t)v75);
  uint64_t v37 = v76;
  if (v76 == v75)
  {
    uint64_t v38 = 4LL;
    uint64_t v37 = v75;
  }

  else
  {
    if (!v76) {
      goto LABEL_34;
    }
    uint64_t v38 = 5LL;
  }

  (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_34:
  if (v73 == v72)
  {
    uint64_t v39 = 4LL;
  }

  else
  {
    if (!v73) {
      goto LABEL_39;
    }
    uint64_t v39 = 5LL;
    uint64_t v35 = v73;
  }

  (*(void (**)(void *))(*v35 + 8 * v39))(v35);
LABEL_39:
  sub_FF3B8((void *)v71[1]);
  sub_51FD8(v70);
  os_signpost_id_t v40 = v69;
  uint64_t v69 = 0LL;
  if (v40) {
    operator delete(v40);
  }
  sub_51FD8(v68);
  unint64_t v41 = v67;
  std::string::size_type v67 = 0LL;
  if (v41) {
    operator delete(v41);
  }
  sub_51FD8(v66);
  int v42 = v65;
  unint64_t v65 = 0LL;
  if (v42) {
    operator delete(v42);
  }
  *(void *)buf = &v64;
  sub_8C8F0((void ***)buf);
  *(void *)buf = v63;
  sub_8C8F0((void ***)buf);
  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C((void *)v53[1]);
  if (v47)
  {
    int v48 = v47;
    operator delete(v47);
  }

void sub_121188( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, void *__p, uint64_t a35, int a36, __int16 a37, char a38, char a39, void *a40, uint64_t a41, int a42, __int16 a43, char a44, char a45, void *a46, uint64_t a47, int a48, __int16 a49, char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  _Unwind_Resume(a1);
}

void sub_1212D4()
{
}

char ***sub_1212DC(char ***a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  BOOL v6 = (*a1)[1];
  unint64_t v5 = (unint64_t)(*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = *v4;
    uint64_t v9 = (v6 - *v4) >> 3;
    unint64_t v10 = v9 + 1;
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        sub_7A8C4();
      }
      unint64_t v13 = (char *)operator new(8 * v12);
    }

    else
    {
      unint64_t v13 = 0LL;
    }

    uint64_t v14 = &v13[8 * v9];
    *(void *)uint64_t v14 = a2;
    int v7 = v14 + 8;
    if (v6 != v8)
    {
      do
      {
        uint64_t v15 = *((void *)v6 - 1);
        v6 -= 8;
        *((void *)v14 - 1) = v15;
        v14 -= 8;
      }

      while (v6 != v8);
      BOOL v6 = *v4;
    }

    void *v4 = v14;
    v4[1] = v7;
    v4[2] = &v13[8 * v12];
    if (v6) {
      operator delete(v6);
    }
  }

  else
  {
    *(void *)BOOL v6 = a2;
    int v7 = v6 + 8;
  }

  v4[1] = v7;
  return a1;
}

uint64_t sub_1213D4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1214A4((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = result;
  uint64_t v5 = *a1;
  *a1 = result;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

uint64_t sub_121448(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v2 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_weak(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }

    else
    {
      v2 -= 16LL;
    }
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1214A4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = a7;
  while (a3 != a5)
  {
    __int128 v8 = *((_OWORD *)a3 - 1);
    a3 -= 2;
    *(_OWORD *)(result - 16) = v8;
    result -= 16LL;
    *a3 = 0LL;
    a3[1] = 0LL;
  }

  return result;
}

std::string *sub_1214C4(std::string *a1, os_unfair_lock_s **a2, os_unfair_lock_s **a3)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      sub_1263EC(__p, a2 + 4);
      if ((v13 & 0x80u) == 0) {
        uint64_t v6 = __p;
      }
      else {
        uint64_t v6 = (void **)__p[0];
      }
      if ((v13 & 0x80u) == 0) {
        std::string::size_type v7 = v13;
      }
      else {
        std::string::size_type v7 = (std::string::size_type)__p[1];
      }
      std::string::append(a1, (const std::string::value_type *)v6, v7);
      __int128 v8 = a2[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = (os_unfair_lock_s **)v8;
          __int128 v8 = *(os_unfair_lock_s **)&v8->_os_unfair_lock_opaque;
        }

        while (v8);
      }

      else
      {
        do
        {
          uint64_t v9 = (os_unfair_lock_s **)a2[2];
          BOOL v10 = *v9 == (os_unfair_lock_s *)a2;
          a2 = v9;
        }

        while (!v10);
      }

      if (v9 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
      a2 = v9;
    }
  }

  return std::string::append(a1, " }", 2uLL);
}

void sub_1215C8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t *sub_121604(uint64_t *a1, uint64_t a2)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  sub_120C78(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_121640(_Unwind_Exception *a1)
{
}

uint64_t sub_121654(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24LL))(*v3, a1);
      return a1;
    }

    *(void *)(a1 + 24) = v4;
  }

  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }

  void *v3 = 0LL;
  return a1;
}

os_signpost_id_t *sub_1216B8( int64x2_t *a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, void **a6, uint64_t a7, int a8, unsigned int a9, unsigned int a10, int a11, int a12, unsigned __int8 a13, uint64_t a14, uint64_t a15)
{
  int v17 = a13;
  uint64_t v18 = a9;
  if ((sub_14F834() & 1) == 0 && sub_EAA74("VA_PV_BuildConcreteFromAbstract", 0x1FuLL) == &qword_4938E0)
  {
    os_signpost_id_t v20 = 0LL;
  }

  else
  {
    unsigned __int8 v19 = atomic_load((unsigned __int8 *)&qword_493908);
    if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
    {
      qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_493908);
    }

    os_signpost_id_t v20 = os_signpost_id_generate((os_log_t)qword_493900);
    unsigned __int8 v21 = atomic_load((unsigned __int8 *)&qword_493908);
    if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
    {
      qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_493908);
    }

    if (v20 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v22 = (os_log_s *)qword_493900;
      if (os_signpost_enabled((os_log_t)qword_493900))
      {
        sub_2DABA8(&v374, a2);
        if ((v374.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v23 = &v374;
        }
        else {
          uint64_t v23 = (std::string *)v374.__r_.__value_.__r.__words[0];
        }
        sub_2CA1C(&v368, a4[1]);
        uint64_t v330 = a2;
        if ((v368.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v24 = &v368;
        }
        else {
          uint64_t v24 = (std::string *)v368.__r_.__value_.__r.__words[0];
        }
        sub_1245C0(&v367, a5);
        if ((v367.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v25 = &v367;
        }
        else {
          uint64_t v25 = (std::string *)v367.__r_.__value_.__r.__words[0];
        }
        uint64_t v26 = &v364;
        sub_110E40(&v364, *a6, a6 + 1);
        if ((v364.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t v26 = (std::string *)v364.__r_.__value_.__r.__words[0];
        }
        sub_2CA1C(&v361, a9);
        int v27 = v363;
        BOOL v28 = (void **)v361;
        sub_2CA1C(&__p, a10);
        std::string::size_type v29 = &v361;
        if (v27 < 0) {
          std::string::size_type v29 = v28;
        }
        if (v360 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        *(_DWORD *)buf = 136316674;
        *(void *)&uint8_t buf[4] = v23;
        *(_WORD *)&_BYTE buf[12] = 2080;
        *(void *)&buf[14] = v24;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&buf[24] = v25;
        *(_WORD *)&_BYTE buf[32] = 2080;
        *(void *)&buf[34] = v26;
        *(_WORD *)&buf[42] = 2080;
        *(void *)&buf[44] = v29;
        *(_WORD *)&buf[52] = 2080;
        *(void *)&buf[54] = p_p;
        *(_WORD *)&buf[62] = 1024;
        int v17 = a13;
        *(_DWORD *)&buf[64] = a13;
        _os_signpost_emit_with_name_impl( &dword_0,  v22,  OS_SIGNPOST_INTERVAL_BEGIN,  v20,  "VA_PV_BuildConcreteFromAbstract",  "Attempting to build concrete route(s) for abstract route %s. inMode: %s; inDisallowedPorts:%s; inDisallowedPor"
          "tTypes:%s; inVADCoupling: %s; inDeviceType: %s; inPermitUnroutablePorts: %u.",
          buf,
          0x44u);
        if (v360 < 0) {
          operator delete(__p);
        }
        a2 = v330;
        uint64_t v18 = a9;
        if (v363 < 0) {
          operator delete(v361);
        }
      }
    }
  }

  os_signpost_id_t v357 = v20;
  uint64_t v31 = sub_138E8(42);
  if ((*(_BYTE *)(v31 + 8) & 1) != 0)
  {
    int v32 = *(os_log_s **)v31;
    if (*(void *)v31)
    {
      if (os_log_type_enabled(*(os_log_t *)v31, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "SignpostUtilities.h";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 64;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "kBuildConcreteFromAbstract";
        _os_log_impl(&dword_0, v32, OS_LOG_TYPE_DEBUG, "%25s:%-5d Starting measurement for signpost %s", buf, 0x1Cu);
      }
    }
  }

  if (!*(void *)(a2 + 16))
  {
    uint64_t v304 = (os_log_t *)sub_138E8(13);
    v305 = *v304;
    if (*v304 && os_log_type_enabled(*v304, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 515;
      _os_log_impl(&dword_0, v305, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

LABEL_571:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if ((_DWORD)v18 == 1684366192 && ((*(unsigned __int8 *)(a3 + 24) ^ (*(unsigned __int8 *)(a3 + 24) >> 1)) & 1) != 0)
  {
    v306 = (os_log_t *)sub_138E8(13);
    v307 = *v306;
    if (*v306 && os_log_type_enabled(*v306, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 518;
      _os_log_impl(&dword_0, v307, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    goto LABEL_571;
  }

  uint64_t v33 = sub_138E8(8);
  if ((*(_BYTE *)(v33 + 8) & 1) != 0)
  {
    unsigned int v34 = *(os_log_s **)v33;
    if (*(void *)v33)
    {
      if (os_log_type_enabled(*(os_log_t *)v33, OS_LOG_TYPE_DEBUG))
      {
        sub_2DABA8(&v374, a2);
        if ((v374.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v35 = &v374;
        }
        else {
          uint64_t v35 = (std::string *)v374.__r_.__value_.__r.__words[0];
        }
        sub_2CA1C(&v368, a4[1]);
        if ((v368.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          unint64_t v36 = &v368;
        }
        else {
          unint64_t v36 = (std::string *)v368.__r_.__value_.__r.__words[0];
        }
        sub_1245C0(&v367, a5);
        if ((v367.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v37 = &v367;
        }
        else {
          uint64_t v37 = (std::string *)v367.__r_.__value_.__r.__words[0];
        }
        sub_110E40(&v364, *a6, a6 + 1);
        uint64_t v340 = a6;
        uint64_t v331 = a2;
        if ((v364.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v38 = &v364;
        }
        else {
          uint64_t v38 = (std::string *)v364.__r_.__value_.__r.__words[0];
        }
        sub_2CA1C(&v361, v18);
        int v39 = v363;
        os_signpost_id_t v40 = (void **)v361;
        sub_2CA1C(&__p, a10);
        unint64_t v41 = &v361;
        if (v39 < 0) {
          unint64_t v41 = v40;
        }
        if (v360 >= 0) {
          int v42 = &__p;
        }
        else {
          int v42 = __p;
        }
        *(_DWORD *)buf = 136317186;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 527;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v35;
        *(_WORD *)&buf[28] = 2080;
        *(void *)&buf[30] = v36;
        *(_WORD *)&buf[38] = 2080;
        *(void *)&_BYTE buf[40] = v37;
        *(_WORD *)&buf[48] = 2080;
        *(void *)&buf[50] = v38;
        *(_WORD *)&buf[58] = 2080;
        *(void *)&buf[60] = v41;
        __int16 v370 = 2080;
        v371 = v42;
        __int16 v372 = 1024;
        int v373 = v17;
        _os_log_impl( &dword_0,  v34,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to build concrete route(s) for abstract route %s. inMode: %s; inDisallowedPorts:%s; inDis"
          "allowedPortTypes:%s; inPortFilterType:inVADCoupling: %s; inDeviceType: %s; inPermitUnroutablePorts: %u.",
          buf,
          0x54u);
        if (v360 < 0) {
          operator delete(__p);
        }
        a2 = v331;
        a6 = v340;
        if (v363 < 0) {
          operator delete(v361);
        }
      }
    }
  }

  sub_554D0((uint64_t *)&v374, a3 + 40, a4[1]);
  if (v374.__r_.__value_.__l.__cap_)
  {
    std::string::size_type v43 = v374.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v374.__r_.__value_.__l.__data_ != &v374.__r_.__value_.__r.__words[1])
    {
      do
      {
        if (*(void *)(a2 + 8) == a2) {
          goto LABEL_116;
        }
        int v44 = *(_DWORD *)(v43 + 28);
        uint64_t v45 = *(void *)(a2 + 8);
        do
        {
          BOOL v46 = *(_DWORD *)(v45 + 16) == v44 || *(_DWORD *)(v45 + 20) == v44;
          int v47 = v46;
          if (v46) {
            break;
          }
          uint64_t v45 = *(void *)(v45 + 8);
        }

        while (v45 != a2);
        if (!v47)
        {
LABEL_116:
          uint64_t v61 = sub_138E8(8);
          if ((*(_BYTE *)(v61 + 8) & 1) != 0)
          {
            std::string v62 = *(os_log_s **)v61;
            if (*(void *)v61)
            {
              if (os_log_type_enabled(*(os_log_t *)v61, OS_LOG_TYPE_DEBUG))
              {
                std::string::size_type v63 = &v368;
                sub_2CA1C(&v368, a4[1]);
                if ((v368.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  std::string::size_type v63 = (std::string *)v368.__r_.__value_.__r.__words[0];
                }
                sub_12476C(&v367, v374.__r_.__value_.__l.__data_, &v374.__r_.__value_.__l.__size_);
                int size = (char)v367.__r_.__value_.__s.__size_;
                std::string::size_type v65 = v367.__r_.__value_.__r.__words[0];
                sub_2DABA8(&v364, a2);
                uint64_t v66 = &v367;
                if (size < 0) {
                  uint64_t v66 = (std::string *)v65;
                }
                if ((v364.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  std::string::size_type v67 = &v364;
                }
                else {
                  std::string::size_type v67 = (std::string *)v364.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)buf = 136316162;
                *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 543;
                *(_WORD *)&buf[18] = 2080;
                *(void *)&buf[20] = v63;
                *(_WORD *)&buf[28] = 2080;
                *(void *)&buf[30] = v66;
                *(_WORD *)&buf[38] = 2080;
                *(void *)&_BYTE buf[40] = v67;
                _os_log_impl( &dword_0,  v62,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempt to build concrete route(s) failed: Mode %s requires port type(s) %s, which were not all found in abstract route %s.",  buf,  0x30u);
              }
            }
          }

          a1->i64[0] = 0LL;
          a1->i64[1] = 0LL;
          a1[1].i64[0] = 0LL;
          sub_32C8C((void *)v374.__r_.__value_.__l.__size_);
          return sub_1251DC(&v357);
        }

        int v48 = *(std::string **)(v43 + 8);
        if (v48)
        {
          do
          {
            uint64_t v49 = v48;
            int v48 = (std::string *)v48->__r_.__value_.__r.__words[0];
          }

          while (v48);
        }

        else
        {
          do
          {
            uint64_t v49 = *(std::string **)(v43 + 16);
            BOOL v46 = v49->__r_.__value_.__r.__words[0] == v43;
            std::string::size_type v43 = (std::string::size_type)v49;
          }

          while (!v46);
        }

        std::string::size_type v43 = (std::string::size_type)v49;
      }

      while (v49 != (std::string *)&v374.__r_.__value_.__r.__words[1]);
    }
  }

  sub_32C8C((void *)v374.__r_.__value_.__l.__size_);
  if ((sub_54F20(a2 + 24, a4[1]) & 1) == 0)
  {
    uint64_t v55 = sub_138E8(8);
    if ((*(_BYTE *)(v55 + 8) & 1) != 0)
    {
      int v56 = *(os_log_s **)v55;
      if (*(void *)v55)
      {
        if (os_log_type_enabled(*(os_log_t *)v55, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(&v374, a4[1]);
          int v57 = (char)v374.__r_.__value_.__s.__size_;
          std::string::size_type v58 = v374.__r_.__value_.__r.__words[0];
          sub_2DABA8(&v368, a2);
          char v59 = &v374;
          if (v57 < 0) {
            char v59 = (std::string *)v58;
          }
          if ((v368.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            int64x2_t v60 = &v368;
          }
          else {
            int64x2_t v60 = (std::string *)v368.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 552;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = v59;
          *(_WORD *)&buf[28] = 2080;
          *(void *)&buf[30] = v60;
          _os_log_impl( &dword_0,  v56,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempt to build concrete route(s) failed: Mode %s is disallowed in abstract route %s.",  buf,  0x26u);
        }
      }
    }

    a1->i64[0] = 0LL;
    a1->i64[1] = 0LL;
    a1[1].i64[0] = 0LL;
    return sub_1251DC(&v357);
  }

  memset(&v364, 0, sizeof(v364));
  int v50 = *(_DWORD *)(a3 + 32);
  int v325 = v50;
  BOOL v52 = v50 == 1667396196 || v50 == 1668246894;
  uint64_t v332 = a2;
  if ((_DWORD)v18 == 1684366192)
  {
    int v53 = operator new(8uLL);
    *int v53 = 0x100000000LL;
    int v54 = v53 + 1;
  }

  else
  {
    int v53 = operator new(4uLL);
    *(_DWORD *)int v53 = 2;
    int v54 = (void *)((char *)v53 + 4);
  }

  v316 = v54;
  uint64_t v68 = a15;
  char v327 = v52 | v17;
  BOOL v70 = (_DWORD)v18 != 1684366192 && a10 == 1986291046;
  BOOL v319 = v70;
  uint64_t v317 = a2 + 96;
  v329 = a6 + 1;
  v318 = v53;
  do
  {
    std::string::size_type v320 = v53;
    int v71 = *(_DWORD *)v53;
    std::string::size_type v72 = operator new(0x30uLL);
    *std::string::size_type v72 = 0LL;
    v72[1] = 0LL;
    v72[2] = v72 + 2;
    v72[3] = v72 + 2;
    v339 = v72 + 2;
    v72[4] = 0LL;
    v337 = v72 + 4;
    uint64_t v323 = (int *)v72;
    v72[5] = 0LL;
    uint64_t v73 = *(void *)(v332 + 8);
    int v333 = v71;
    if (v73 == v332)
    {
LABEL_523:
      uint64_t v289 = sub_138E8(8);
      if ((*(_BYTE *)(v289 + 8) & 1) == 0) {
        goto LABEL_528;
      }
      v286 = *(os_log_s **)v289;
      if (!*(void *)v289 || !os_log_type_enabled(*(os_log_t *)v289, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_528;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 655;
      uint64_t v287 = "%25s:%-5d Attempt to build concrete route(s) failed: unable to locate any valid connections.";
      goto LABEL_527;
    }

    do
    {
      if (v71 == 2)
      {
        int v74 = *(_DWORD *)(v73 + 16);
      }

      else
      {
        int v74 = *(_DWORD *)(v73 + 16);
        if (*(_DWORD *)(v73 + 20) != 1885433888 || v71 != 0)
        {
          BOOL v76 = v74 == 1885433888 && v333 == 1;
          int v74 = 1885433888;
          if (!v76) {
            goto LABEL_384;
          }
        }
      }

      v328 = (unsigned int *)(v73 + 16);
      int v336 = *(unsigned __int8 *)(v73 + 24);
      sub_1248AC((uint64_t)&v368, *(void *)(v68 + 24), v74, v327, a10);
      sub_1248AC((uint64_t)&v367, *(void *)(v68 + 24), *(_DWORD *)(v73 + 20), v327, a10);
      sub_1248FC(&v361, v368.__r_.__value_.__l.__data_, &v368.__r_.__value_.__l.__size_);
      sub_1248FC(&__p, v367.__r_.__value_.__l.__data_, &v367.__r_.__value_.__l.__size_);
      uint64_t v77 = (uint64_t *)v361;
      if (v361 != v362)
      {
        __int16 v78 = (uint64_t *)__p;
        if (__p != v359)
        {
          uint64_t v79 = (char *)v362 - (_BYTE *)v361;
          uint64_t v338 = v73;
          if (v325 == 1668246894)
          {
            unint64_t v80 = v79 >> 4;
            uint64_t v81 = (char *)v359 - (_BYTE *)__p;
            unint64_t v82 = ((char *)v359 - (_BYTE *)__p) >> 4;
            if (v80 <= v82) {
              unint64_t v83 = v81 >> 4;
            }
            else {
              unint64_t v83 = v80;
            }
            if (v80 < v81 >> 4)
            {
              __int16 v84 = (std::__shared_weak_count *)*((void *)v361 + 1);
              if (v84)
              {
                unint64_t v85 = std::__shared_weak_count::lock(v84);
                if (v85)
                {
                  __int16 v86 = v85;
                  uint64_t v87 = *v77;
                  p_shared_weak_owners = (unint64_t *)&v85->__shared_weak_owners_;
                  do
                    unint64_t v89 = __ldxr(p_shared_weak_owners);
                  while (__stxr(v89 + 1, p_shared_weak_owners));
                  p_shared_owners = (unint64_t *)&v85->__shared_owners_;
                  do
                    unint64_t v91 = __ldaxr(p_shared_owners);
                  while (__stlxr(v91 - 1, p_shared_owners));
                  if (!v91)
                  {
                    ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                    std::__shared_weak_count::__release_weak(v86);
                  }

                  char v92 = std::__shared_weak_count::lock(v86);
                  if (!v92) {
                    goto LABEL_546;
                  }
                  int v93 = v92;
                  uint64_t v94 = (unint64_t *)&v92->__shared_owners_;
                  do
                    unint64_t v95 = __ldaxr(v94);
                  while (__stlxr(v95 - 1, v94));
                  if (!v95)
                  {
                    ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                    std::__shared_weak_count::__release_weak(v93);
                  }

                  if (v87)
                  {
                    sub_B8CBC((uint64_t *)buf, (uint64_t *)v361, "", 470);
                    BOOL v96 = *(std::__shared_weak_count **)&buf[8];
                    int v97 = *(_DWORD *)(*(void *)buf + 144LL);
                    if (*(void *)&buf[8])
                    {
                      unint64_t v98 = (unint64_t *)(*(void *)&buf[8] + 8LL);
                      do
                        unint64_t v99 = __ldaxr(v98);
                      while (__stlxr(v99 - 1, v98));
                      if (!v99)
                      {
                        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                        std::__shared_weak_count::__release_weak(v96);
                      }
                    }

                    std::__shared_weak_count::__release_weak(v86);
                    if (v97 == 1885433888)
                    {
                      sub_124A68((uint64_t *)&v361, v82, v361);
                      __int16 v78 = (uint64_t *)__p;
                      unint64_t v82 = ((char *)v359 - (_BYTE *)__p) >> 4;
                      goto LABEL_181;
                    }
                  }

                  else
                  {
LABEL_546:
                    std::__shared_weak_count::__release_weak(v86);
                  }
                }
              }

              std::string::size_type v297 = (os_log_t *)sub_138E8(13);
              v298 = *v297;
              if (*v297 && os_log_type_enabled(*v297, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 470;
                _os_log_impl( &dword_0,  v298,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
              }

LABEL_559:
              v303 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v303, "Precondition failure.");
            }

LABEL_284:
                  uint64_t v153 = *(void *)(v338 + 32);
                  sub_55C64(v153);
                  uint64_t v156 = *(void *)(v153 + 56);
                  uint64_t v155 = v153 + 56;
                  uint64_t v154 = v156;
                  if (!v156) {
                    goto LABEL_296;
                  }
                  uint64_t v157 = v155;
                  do
                  {
                    unsigned int v158 = *(_DWORD *)(v154 + 28);
                    BOOL v159 = v158 >= 0x696D6466;
                    if (v158 >= 0x696D6466) {
                      uint64_t v160 = (uint64_t *)v154;
                    }
                    else {
                      uint64_t v160 = (uint64_t *)(v154 + 8);
                    }
                    if (v159) {
                      uint64_t v157 = v154;
                    }
                    uint64_t v154 = *v160;
                  }

                  while (*v160);
                  if (v157 == v155
                    || *(_DWORD *)(v157 + 28) > 0x696D6466u
                    || (int v161 = *(_DWORD *)(v157 + 40), v161 == 1886287212))
                  {
LABEL_296:
                    uint64_t v349 = 0LL;
                    uint64_t v350 = 0LL;
                    v348 = &v349;
                    goto LABEL_297;
                  }

                  sub_1248AC((uint64_t)&v348, *(void *)(a15 + 24), v161, 1, a10);
                  if (v350)
                  {
                    unint64_t v205 = v348[5];
                    v346 = v348[4];
                    uint64_t v347 = v205;
                    if (v205)
                    {
                      BOOL v206 = (unint64_t *)&v205->__shared_weak_owners_;
                      do
                        unint64_t v207 = __ldxr(v206);
                      while (__stxr(v207 + 1, v206));
                    }
                  }

                  else
                  {
LABEL_297:
                    v346 = 0LL;
                    uint64_t v347 = 0LL;
                  }

                  if (v123)
                  {
                    uint64_t v162 = (unint64_t *)&v123->__shared_weak_owners_;
                    do
                      unint64_t v163 = __ldxr(v162);
                    while (__stxr(v163 + 1, v162));
                  }

                  uint64_t v341 = v127;
                  uint64_t v342 = v128;
                  v164 = (unint64_t *)&v128->__shared_weak_owners_;
                  do
                    unint64_t v165 = __ldxr(v164);
                  while (__stxr(v165 + 1, v164));
                  int v166 = *(unsigned __int8 *)(v338 + 24);
                  uint64_t v167 = *(void *)(v338 + 32);
                  uint64_t v343 = &v343;
                  uint64_t v344 = (uint64_t *)&v343;
                  uint64_t v345 = 0LL;
                  unsigned int v168 = (unsigned __int16)sub_55D7C(a3 + 40, a4[1]);
                  if (v168 <= 0x100) {
                    LOBYTE(v168) = 0;
                  }
                  if (!(_BYTE)v168)
                  {
                    sub_124F10((uint64_t)buf, v124, (uint64_t)v123, &v341, &v346, v166 != 0, v167);
                    uint64_t v172 = operator new(0x50uLL);
                    __int128 v173 = *(_OWORD *)buf;
                    __int128 v174 = *(_OWORD *)&buf[16];
                    *(void *)buf = 0LL;
                    *(void *)&buf[8] = 0LL;
                    v172[1] = v173;
                    v172[2] = v174;
                    memset(&buf[16], 0, 32);
                    __int128 v175 = *(_OWORD *)&buf[48];
                    v172[3] = *(_OWORD *)&buf[32];
                    v172[4] = v175;
                    uint64_t v176 = (uint64_t)v343;
                    *(void *)uint64_t v172 = v343;
                    *((void *)v172 + 1) = &v343;
                    *(void *)(v176 + 8) = v172;
                    uint64_t v343 = v172;
                    ++v345;
                    sub_116394(buf);
                    goto LABEL_324;
                  }

                  if (*a4 == 1668509810)
                  {
                    sub_B8CBC(&v365, &v341, "", 429);
                    (*(void (**)(_BYTE *__return_ptr))(*(void *)v365 + 272LL))(buf);
                    sub_124CAC((uint64_t *)&v374, buf);
                    sub_85B80((uint64_t *)buf);
                    char v169 = v366;
                    if (v366)
                    {
                      char v170 = (unint64_t *)&v366->__shared_owners_;
                      do
                        unint64_t v171 = __ldaxr(v170);
                      while (__stlxr(v171 - 1, v170));
LABEL_316:
                      if (!v171)
                      {
                        ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                        std::__shared_weak_count::__release_weak(v169);
                      }
                    }
                  }

                  else
                  {
                    sub_B8CBC((uint64_t *)buf, &v341, "", 430);
                    (*(void (**)(std::string *__return_ptr))(**(void **)buf + 272LL))(&v374);
                    char v169 = *(std::__shared_weak_count **)&buf[8];
                    if (*(void *)&buf[8])
                    {
                      BOOL v177 = (unint64_t *)(*(void *)&buf[8] + 8LL);
                      do
                        unint64_t v171 = __ldaxr(v177);
                      while (__stlxr(v171 - 1, v177));
                      goto LABEL_316;
                    }
                  }

                  if (v374.__r_.__value_.__l.__cap_)
                  {
                    for (uint64_t i = (std::string *)v374.__r_.__value_.__l.__size_;
                          i != &v374;
                          uint64_t i = (std::string *)i->__r_.__value_.__l.__size_)
                    {
                      sub_124F10( (uint64_t)buf,  v124,  (uint64_t)v123,  &i->__r_.__value_.__l.__cap_,  &v346,  v166 != 0,  v167);
                      std::string::size_type v179 = operator new(0x50uLL);
                      __int128 v180 = *(_OWORD *)buf;
                      __int128 v181 = *(_OWORD *)&buf[16];
                      *(void *)buf = 0LL;
                      *(void *)&buf[8] = 0LL;
                      v179[1] = v180;
                      v179[2] = v181;
                      memset(&buf[16], 0, 32);
                      __int128 v182 = *(_OWORD *)&buf[48];
                      v179[3] = *(_OWORD *)&buf[32];
                      v179[4] = v182;
                      uint64_t v183 = (uint64_t)v343;
                      *(void *)std::string::size_type v179 = v343;
                      *((void *)v179 + 1) = &v343;
                      *(void *)(v183 + 8) = v179;
                      uint64_t v343 = v179;
                      ++v345;
                      sub_116394(buf);
                    }
                  }

                  else
                  {
                    sub_124F10((uint64_t)buf, v124, (uint64_t)v123, &v341, &v346, v166 != 0, v167);
                    uint64_t v184 = operator new(0x50uLL);
                    __int128 v185 = *(_OWORD *)buf;
                    __int128 v186 = *(_OWORD *)&buf[16];
                    *(void *)buf = 0LL;
                    *(void *)&buf[8] = 0LL;
                    v184[1] = v185;
                    v184[2] = v186;
                    memset(&buf[16], 0, 32);
                    __int128 v187 = *(_OWORD *)&buf[48];
                    v184[3] = *(_OWORD *)&buf[32];
                    v184[4] = v187;
                    uint64_t v188 = (uint64_t)v343;
                    *(void *)uint64_t v184 = v343;
                    *((void *)v184 + 1) = &v343;
                    *(void *)(v188 + 8) = v184;
                    uint64_t v343 = v184;
                    ++v345;
                    sub_116394(buf);
                  }

                  sub_85B80((uint64_t *)&v374);
                  unint64_t v128 = v342;
                  if (v342) {
LABEL_324:
                  }
                    std::__shared_weak_count::__release_weak(v128);
                  if (v123) {
                    std::__shared_weak_count::__release_weak(v123);
                  }
                  unint64_t v189 = (__n128 *)v344;
                  if (v344 != (uint64_t *)&v343)
                  {
                    std::string v190 = (__n128 *)operator new(0x50uLL);
                    v190->n128_u64[0] = 0LL;
                    v190->n128_u64[1] = 0LL;
                    sub_125374(v190 + 1, v189 + 1);
                    char v191 = (__n128 *)v189->n128_u64[1];
                    if (v191 == (__n128 *)&v343)
                    {
                      unint64_t v194 = v190;
                      uint64_t v192 = 1LL;
                    }

                    else
                    {
                      uint64_t v192 = 1LL;
                      unint64_t v193 = v190;
                      do
                      {
                        unint64_t v194 = (__n128 *)operator new(0x50uLL);
                        v194->n128_u64[0] = (unint64_t)v193;
                        v194->n128_u64[1] = 0LL;
                        sub_125374(v194 + 1, v191 + 1);
                        v193->n128_u64[1] = (unint64_t)v194;
                        ++v192;
                        char v191 = (__n128 *)v191->n128_u64[1];
                        unint64_t v193 = v194;
                      }

                      while (v191 != (__n128 *)&v343);
                    }

                    uint64_t v195 = *v339;
                    *(void *)(v195 + 8) = v190;
                    v190->n128_u64[0] = v195;
                    uint64_t *v339 = (uint64_t)v194;
                    v194->n128_u64[1] = (unint64_t)v339;
                    *v337 += v192;
                  }

                  uint64_t v196 = sub_138E8(8);
                  uint64_t v73 = v338;
                  if ((*(_BYTE *)(v196 + 8) & 1) != 0)
                  {
                    unint64_t v197 = *(os_log_s **)v196;
                    if (*(void *)v196)
                    {
                      if (os_log_type_enabled(*(os_log_t *)v196, OS_LOG_TYPE_DEBUG))
                      {
                        sub_1250C8(&v374, (uint64_t)v344, (uint64_t)&v343);
                        uint64_t v198 = &v374;
                        if ((v374.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                          uint64_t v198 = (std::string *)v374.__r_.__value_.__r.__words[0];
                        }
                        *(_DWORD *)buf = 136315650;
                        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
                        *(_WORD *)&_BYTE buf[12] = 1024;
                        *(_DWORD *)&buf[14] = 645;
                        *(_WORD *)&buf[18] = 2080;
                        *(void *)&buf[20] = v198;
                        _os_log_impl( &dword_0,  v197,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Successfully Built concrete route %s",  buf,  0x1Cu);
                      }
                    }
                  }

                  sub_55F18((uint64_t *)&v343);
                  if (v347) {
                    std::__shared_weak_count::__release_weak(v347);
                  }
                  sub_FF3B8(v349);
                  unint64_t v128 = v354;
                }

                sub_FF3B8(v352[0]);
                if (v128)
                {
                  v199 = (unint64_t *)&v128->__shared_owners_;
                  do
                    unint64_t v200 = __ldaxr(v199);
                  while (__stlxr(v200 - 1, v199));
                  if (!v200)
                  {
                    ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                    std::__shared_weak_count::__release_weak(v128);
                  }
                }

                os_signpost_id_t v201 = v356;
                if (v356)
                {
                  uint64_t v202 = (unint64_t *)&v356->__shared_owners_;
                  do
                    unint64_t v203 = __ldaxr(v202);
                  while (__stlxr(v203 - 1, v202));
                  if (!v203)
                  {
                    ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
                    std::__shared_weak_count::__release_weak(v201);
                  }
                }

                v120 += 2;
                v121 += 2;
                if (v120 == (uint64_t *)v362 || v121 == (uint64_t *)v359)
                {
                  int v116 = 0;
                  goto LABEL_382;
                }

                continue;
              }
            }

            else
            {
              uint64_t v123 = 0LL;
            }

            break;
          }

          uint64_t v124 = 0LL;
          goto LABEL_223;
        }
      }

      if (v336)
      {
        int v116 = 15;
      }

      else
      {
        uint64_t v117 = sub_138E8(8);
        if ((*(_BYTE *)(v117 + 8) & 1) != 0)
        {
          std::string::size_type v118 = *(os_log_s **)v117;
          if (*(void *)v117)
          {
            if (os_log_type_enabled(*(os_log_t *)v117, OS_LOG_TYPE_DEBUG))
            {
              sub_2DAAA0(&v374, v328);
              unint64_t v119 = &v374;
              if ((v374.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                unint64_t v119 = (std::string *)v374.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)buf = 136316162;
              *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 589;
              *(_WORD *)&buf[18] = 2080;
              *(void *)&buf[20] = v119;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = v361 != v362;
              *(_WORD *)&buf[34] = 1024;
              *(_DWORD *)&_BYTE buf[36] = __p != v359;
              _os_log_impl( &dword_0,  v118,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempt to build concrete route(s) failed: Connection %s is required and cannot be used for a concrete route: source is connected: %u; destination is connected: %u;",
                buf,
                0x28u);
            }
          }
        }

        a1->i64[0] = 0LL;
        a1->i64[1] = 0LL;
        int v116 = 1;
        a1[1].i64[0] = 0LL;
      }

LABEL_382:
      *(void *)buf = &__p;
      sub_A0CF0((void ***)buf);
      *(void *)buf = &v361;
      sub_A0CF0((void ***)buf);
      sub_FF3B8((void *)v367.__r_.__value_.__l.__size_);
      sub_FF3B8((void *)v368.__r_.__value_.__l.__size_);
      uint64_t v68 = a15;
      if (v116 && v116 != 15) {
        goto LABEL_529;
      }
LABEL_384:
      uint64_t v73 = *(void *)(v73 + 8);
      int v71 = v333;
    }

    while (v73 != v332);
    if (!*v337) {
      goto LABEL_523;
    }
    BOOL v216 = v325 != 1667396196;
    if (!v319) {
      goto LABEL_399;
    }
    char v217 = *(_BYTE *)(a3 + 24);
    if ((v217 & 1) == 0) {
      goto LABEL_398;
    }
    v218 = (uint64_t *)*((void *)v323 + 3);
    while (2)
    {
      if (v218 == v339)
      {
        uint64_t v285 = sub_138E8(8);
        if ((*(_BYTE *)(v285 + 8) & 1) != 0)
        {
          v286 = *(os_log_s **)v285;
          if (*(void *)v285)
          {
            if (os_log_type_enabled(*(os_log_t *)v285, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 675;
              uint64_t v287 = "%25s:%-5d Attempt to build concrete route(s) failed: unable to locate a valid input connection for "
                     "a category specifying input connections.";
              goto LABEL_527;
            }
          }
        }

LABEL_528:
        a1->i64[0] = 0LL;
        a1->i64[1] = 0LL;
        a1[1].i64[0] = 0LL;
LABEL_529:
        sub_55F18(v339);
        operator delete(v323);
        goto LABEL_530;
      }

      sub_B8CBC((uint64_t *)buf, v218 + 2, "", 669);
      uint64_t v219 = *(std::__shared_weak_count **)&buf[8];
      int v220 = *(_DWORD *)(*(void *)buf + 144LL);
      if (*(void *)&buf[8])
      {
        BOOL v221 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v222 = __ldaxr(v221);
        while (__stlxr(v222 - 1, v221));
        if (!v222)
        {
          ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
          std::__shared_weak_count::__release_weak(v219);
        }
      }

      if (v220 == 1885433888)
      {
        v218 = (uint64_t *)v218[1];
        continue;
      }

      break;
    }

    char v217 = *(_BYTE *)(a3 + 24);
    int v71 = v333;
LABEL_398:
    if ((v217 & 2) != 0)
    {
      for (uint64_t j = (uint64_t *)*((void *)v323 + 3); j != v339; uint64_t j = (uint64_t *)j[1])
      {
        sub_B8CBC((uint64_t *)buf, j + 4, "", 681);
        uint64_t v269 = *(std::__shared_weak_count **)&buf[8];
        int v270 = *(_DWORD *)(*(void *)buf + 144LL);
        if (*(void *)&buf[8])
        {
          v271 = (unint64_t *)(*(void *)&buf[8] + 8LL);
          do
            unint64_t v272 = __ldaxr(v271);
          while (__stlxr(v272 - 1, v271));
          if (!v272)
          {
            ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
            std::__shared_weak_count::__release_weak(v269);
          }
        }

        int v71 = v333;
        if (v270 != 1885433888) {
          goto LABEL_399;
        }
      }

      uint64_t v288 = sub_138E8(8);
      if ((*(_BYTE *)(v288 + 8) & 1) == 0) {
        goto LABEL_528;
      }
      v286 = *(os_log_s **)v288;
      if (!*(void *)v288 || !os_log_type_enabled(*(os_log_t *)v288, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_528;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 687;
      uint64_t v287 = "%25s:%-5d Attempt to build concrete route(s) failed: unable to locate a valid output connection for a categ"
             "ory specifying output connections.";
LABEL_527:
      _os_log_impl(&dword_0, v286, OS_LOG_TYPE_DEBUG, v287, buf, 0x12u);
      goto LABEL_528;
    }

LABEL_399:
    unsigned int v223 = (uint64_t *)*((void *)v323 + 3);
    if (v223 != v339)
    {
      do
      {
        sub_B8CBC((uint64_t *)&v361, v223 + 2, "", 390);
        sub_B8CBC((uint64_t *)&__p, v223 + 4, "", 391);
        uint64_t v224 = (uint64_t *)v223[1];
        if (v224 == v339)
        {
          LOBYTE(v228) = 1;
        }

        else
        {
          do
          {
            sub_B8CBC(&v351, v224 + 2, "", 406);
            sub_B8CBC((uint64_t *)&v348, v224 + 4, "", 407);
            unsigned int v225 = v361;
            *(void *)buf = v351;
            *(void **)&buf[8] = v352[0];
            if (v352[0])
            {
              std::string::size_type v226 = v352[0] + 2;
              do
                unint64_t v227 = __ldxr(v226);
              while (__stxr(v227 + 1, v226));
            }

            int v228 = (*(uint64_t (**)(void *, _BYTE *))(*(void *)v225 + 296LL))(v225, buf);
            if (*(void *)&buf[8]) {
              std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
            }
            if (v228)
            {
              uint64_t v229 = v361;
              *(void *)buf = v348;
              *(void *)&buf[8] = v349;
              if (v349)
              {
                std::string v230 = (unint64_t *)&v349->__shared_weak_owners_;
                do
                  unint64_t v231 = __ldxr(v230);
                while (__stxr(v231 + 1, v230));
              }

              int v228 = (*(uint64_t (**)(void *, _BYTE *))(*(void *)v229 + 296LL))(v229, buf);
              if (*(void *)&buf[8]) {
                std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
              }
              if (v228)
              {
                uint64_t v232 = __p;
                *(void *)buf = v351;
                *(void **)&buf[8] = v352[0];
                if (v352[0])
                {
                  uint64_t v233 = v352[0] + 2;
                  do
                    unint64_t v234 = __ldxr(v233);
                  while (__stxr(v234 + 1, v233));
                }

                int v228 = (*(uint64_t (**)(void *, _BYTE *))(*(void *)v232 + 296LL))(v232, buf);
                if (*(void *)&buf[8]) {
                  std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
                }
                if (v228)
                {
                  v235 = __p;
                  *(void *)buf = v348;
                  *(void *)&buf[8] = v349;
                  if (v349)
                  {
                    uint64_t v236 = (unint64_t *)&v349->__shared_weak_owners_;
                    do
                      unint64_t v237 = __ldxr(v236);
                    while (__stxr(v237 + 1, v236));
                  }

                  int v228 = (*(uint64_t (**)(void *, _BYTE *))(*(void *)v235 + 296LL))(v235, buf);
                  if (*(void *)&buf[8]) {
                    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
                  }
                }
              }
            }

            if (((v216 | v228) & 1) == 0)
            {
              int64x2_t v238 = (os_log_t *)sub_138E8(20);
              uint64_t v239 = *v238;
              if (*v238 && os_log_type_enabled(*v238, OS_LOG_TYPE_DEBUG))
              {
                sub_2DA02C(&v374, v223 + 2);
                if ((v374.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                  uint64_t v240 = &v374;
                }
                else {
                  uint64_t v240 = (std::string *)v374.__r_.__value_.__r.__words[0];
                }
                sub_2DA02C(&v368, v224 + 2);
                int v241 = (char)v368.__r_.__value_.__s.__size_;
                std::string::size_type v242 = v368.__r_.__value_.__r.__words[0];
                sub_2DA02C(&v367, v224 + 2);
                unsigned int v243 = &v368;
                if (v241 < 0) {
                  unsigned int v243 = (std::string *)v242;
                }
                uint64_t v244 = &v367;
                if ((v367.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  uint64_t v244 = (std::string *)v367.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)buf = 136316162;
                *(void *)&uint8_t buf[4] = "RouteUtilities.h";
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&buf[14] = 431;
                *(_WORD *)&buf[18] = 2080;
                *(void *)&buf[20] = v240;
                *(_WORD *)&buf[28] = 2080;
                *(void *)&buf[30] = v243;
                *(_WORD *)&buf[38] = 2080;
                *(void *)&_BYTE buf[40] = v244;
                _os_log_impl( &dword_0,  v239,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Incompatible connections: %s and %s.  Removing connection %s",  buf,  0x30u);
                BOOL v216 = v325 != 1667396196;
              }

              uint64_t v245 = *v224;
              uint64_t v246 = (uint64_t *)v224[1];
              *(void *)(v245 + 8) = v246;
              *(void *)v224[1] = v245;
              --*v337;
              sub_116394(v224 + 2);
              operator delete(v224);
              LOBYTE(v228) = *v337 != 0LL;
              uint64_t v224 = v246;
            }

            uint64_t v247 = v349;
            if (v349)
            {
              std::string::size_type v248 = (unint64_t *)&v349->__shared_owners_;
              do
                unint64_t v249 = __ldaxr(v248);
              while (__stlxr(v249 - 1, v248));
              if (!v249)
              {
                ((void (*)(std::__shared_weak_count *))v247->__on_zero_shared)(v247);
                std::__shared_weak_count::__release_weak(v247);
              }
            }

            uint64_t v250 = (std::__shared_weak_count *)v352[0];
            if (v352[0])
            {
              unsigned int v251 = v352[0] + 1;
              do
                unint64_t v252 = __ldaxr(v251);
              while (__stlxr(v252 - 1, v251));
              if (!v252)
              {
                ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
                std::__shared_weak_count::__release_weak(v250);
              }
            }

            uint64_t v224 = (uint64_t *)v224[1];
            if (v224 == v339) {
              char v253 = 0;
            }
            else {
              char v253 = v228;
            }
          }

          while ((v253 & 1) != 0);
        }

        v254 = v359;
        if (v359)
        {
          uint64_t v255 = (unint64_t *)&v359->__shared_owners_;
          do
            unint64_t v256 = __ldaxr(v255);
          while (__stlxr(v256 - 1, v255));
          if (!v256)
          {
            ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
            std::__shared_weak_count::__release_weak(v254);
          }
        }

        char v257 = v362;
        if (v362)
        {
          std::string::size_type v258 = (unint64_t *)&v362->__shared_owners_;
          do
            unint64_t v259 = __ldaxr(v258);
          while (__stlxr(v259 - 1, v258));
          if (!v259)
          {
            ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
            std::__shared_weak_count::__release_weak(v257);
          }
        }

        unsigned int v223 = (uint64_t *)v223[1];
        if (v223 == v339) {
          char v260 = 0;
        }
        else {
          char v260 = v228;
        }
      }

      while ((v260 & 1) != 0);
      int v71 = v333;
      if ((v228 & 1) == 0)
      {
        uint64_t v291 = sub_138E8(8);
        if ((*(_BYTE *)(v291 + 8) & 1) == 0) {
          goto LABEL_528;
        }
        v286 = *(os_log_s **)v291;
        if (!*(void *)v291 || !os_log_type_enabled(*(os_log_t *)v291, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_528;
        }
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 698;
        uint64_t v287 = "%25s:%-5d Attempt to build concrete route(s) failed: the concrete connection list is not permitted.";
        goto LABEL_527;
      }
    }

    *((void *)v323 + 5) = v317;
    if (v71) {
      int v261 = a10;
    }
    else {
      int v261 = 1986291305;
    }
    *uint64_t v323 = v261;
    v323[1] = a11;
    v323[2] = a12;
    std::string::size_type v262 = v364.__r_.__value_.__l.__size_;
    uint64_t v68 = a15;
    if (v364.__r_.__value_.__l.__size_ >= v364.__r_.__value_.__l.__cap_)
    {
      uint64_t v264 = (uint64_t)(v364.__r_.__value_.__l.__size_ - v364.__r_.__value_.__r.__words[0]) >> 3;
      unint64_t v265 = (uint64_t)(v364.__r_.__value_.__l.__cap_ - v364.__r_.__value_.__r.__words[0]) >> 2;
      if (v265 <= v264 + 1) {
        unint64_t v265 = v264 + 1;
      }
      if (v364.__r_.__value_.__l.__cap_ - v364.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8LL) {
        unint64_t v266 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v266 = v265;
      }
      *(void *)&_BYTE buf[32] = &v364.__r_.__value_.__l.__cap_;
      if (v266) {
        unint64_t v266 = (unint64_t)sub_7DC90(v266);
      }
      else {
        uint64_t v267 = 0LL;
      }
      unint64_t v273 = (int **)(v266 + 8 * v264);
      std::string::size_type v274 = v266 + 8 * v267;
      *(void *)&buf[24] = v274;
      *unint64_t v273 = v323;
      std::string::size_type v263 = (std::string::size_type)(v273 + 1);
      *(void *)&_DWORD buf[16] = v273 + 1;
      v275 = (void *)v364.__r_.__value_.__l.__size_;
      std::string::size_type v276 = v364.__r_.__value_.__r.__words[0];
      if (v364.__r_.__value_.__l.__size_ == v364.__r_.__value_.__r.__words[0])
      {
        int64x2_t v278 = vdupq_n_s64(v364.__r_.__value_.__l.__size_);
      }

      else
      {
        do
        {
          std::string v277 = (int *)*--v275;
          void *v275 = 0LL;
          *--unint64_t v273 = v277;
        }

        while (v275 != (void *)v276);
        int64x2_t v278 = *(int64x2_t *)&v364.__r_.__value_.__l.__data_;
        std::string::size_type v263 = *(void *)&buf[16];
        std::string::size_type v274 = *(void *)&buf[24];
      }

      v364.__r_.__value_.__r.__words[0] = (std::string::size_type)v273;
      v364.__r_.__value_.__l.__size_ = v263;
      *(int64x2_t *)&buf[8] = v278;
      std::string::size_type cap = v364.__r_.__value_.__l.__cap_;
      v364.__r_.__value_.__l.__cap_ = v274;
      *(void *)&buf[24] = cap;
      *(void *)buf = v278.i64[0];
      sub_55F88((uint64_t)buf);
    }

    else
    {
      *(void *)v364.__r_.__value_.__l.__size_ = v323;
      std::string::size_type v263 = v262 + 8;
    }

    v364.__r_.__value_.__l.__size_ = v263;
    int v53 = (void *)((char *)v320 + 4);
  }

  while ((void *)((char *)v320 + 4) != v316);
  char v280 = (unsigned int **)v364.__r_.__value_.__r.__words[0];
  if (((_DWORD)v18 != 1684366192) == (v263 - v364.__r_.__value_.__r.__words[0] == 16))
  {
    v309 = (os_log_t *)sub_138E8(13);
    v310 = *v309;
    if (*v309 && os_log_type_enabled(*v309, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 713;
      _os_log_impl(&dword_0, v310, OS_LOG_TYPE_ERROR, "%25s:%-5d POSTCONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

      uint64_t v196 = sub_138E8(22);
      if ((*(_BYTE *)(v196 + 8) & 1) != 0)
      {
        unint64_t v197 = *(os_log_s **)v196;
        if (*(void *)v196)
        {
          if (os_log_type_enabled(*(os_log_t *)v196, OS_LOG_TYPE_DEBUG))
          {
            sub_2CC00((std::string *)v313, (uint64_t)v319);
            uint64_t v198 = SBYTE3(v317);
            v199 = *(_BYTE **)v313;
            sub_2CC00(&v311, (uint64_t)buf);
            unint64_t v200 = v313;
            if (v198 < 0) {
              unint64_t v200 = v199;
            }
            os_signpost_id_t v201 = &v311;
            if ((v311.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              os_signpost_id_t v201 = (std::string *)v311.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)std::string __p = 136315906;
            *(void *)&__p[4] = "VirtualStream.cpp";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 1365;
            *(_WORD *)&__p[18] = 2080;
            *(void *)&__p[20] = v200;
            *(_WORD *)&__p[28] = 2080;
            *(void *)&__p[30] = v201;
            _os_log_impl(&dword_0, v197, OS_LOG_TYPE_DEBUG, "%25s:%-5d Virtualized format %s to %s", __p, 0x26u);
            if (SBYTE3(v317) < 0) {
              operator delete(*(void **)v313);
            }
          }
        }
      }

      uint64_t v202 = *(void *)(a1 + 232);
      unint64_t v203 = *(void *)(a1 + 240) - v202;
      if (!v203) {
        goto LABEL_417;
      }
      uint64_t v204 = 0LL;
      unint64_t v205 = 0;
      BOOL v206 = 0x6DB6DB6DB6DB6DB7LL * (v203 >> 3);
      do
      {
        unint64_t v207 = sub_E1DB8((uint64_t)buf, v202 + 56 * v204);
        uint64_t v204 = v205 + (v207 ^ 1u);
        if ((v207 & 1) != 0) {
          break;
        }
        v205 += v207 ^ 1;
      }

      while (v206 > v204);
      if (v207)
      {
        uint64_t v208 = *(void *)(a1 + 208);
        __int128 v209 = operator new(0x38uLL);
        uint64_t v210 = (__int128 *)(v208 + 56LL * v204);
        unint64_t v211 = *v210;
        unint64_t v212 = v210[1];
        v213 = v210[2];
        v209[6] = *((void *)v210 + 6);
        *((_OWORD *)v209 + 1) = v212;
        *((_OWORD *)v209 + 2) = v213;
        *(_OWORD *)__int128 v209 = v211;
        v214 = (char *)sub_177AE0(2uLL);
        unint64_t v215 = *(_OWORD *)v175;
        BOOL v216 = *((_OWORD *)v175 + 1);
        char v217 = *((_OWORD *)v175 + 2);
        *((void *)v214 + 13) = *((void *)v175 + 6);
        *(_OWORD *)(v214 + 88) = v217;
        *(_OWORD *)(v214 + 72) = v216;
        *(_OWORD *)(v214 + 56) = v215;
        v218 = *(_OWORD *)v209;
        uint64_t v219 = *((_OWORD *)v209 + 1);
        int v220 = *((_OWORD *)v209 + 2);
        *((void *)v214 + 6) = v209[6];
        *((_OWORD *)v214 + 1) = v219;
        *((_OWORD *)v214 + 2) = v220;
        *(_OWORD *)v214 = v218;
        operator delete(v209);
        sub_280878((uint64_t)v319, (uint64_t)v214, (uint64_t)(v214 + 112), (uint64_t)buf);
        BOOL v221 = *(void *)(a1 + 208) + 56LL * v204;
        *(_OWORD *)BOOL v221 = *(_OWORD *)v319;
        *(_OWORD *)(v221 + 16) = *(_OWORD *)&v319[16];
        *(_OWORD *)(v221 + 32) = *(_OWORD *)&v319[32];
        *(void *)(v221 + 48) = v320;
        if (v214) {
          operator delete(v214);
        }
      }

      else
      {
LABEL_417:
        unint64_t v222 = *(void *)(a1 + 216);
        unsigned int v223 = *(void *)(a1 + 224);
        if (v222 >= v223)
        {
          int v228 = *(void *)(a1 + 208);
          uint64_t v229 = 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(v222 - v228) >> 3);
          std::string v230 = v229 + 1;
          unint64_t v231 = 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(v223 - v228) >> 3);
          if (2 * v231 > v230) {
            std::string v230 = 2 * v231;
          }
          if (v231 >= 0x249249249249249LL) {
            uint64_t v232 = 0x492492492492492LL;
          }
          else {
            uint64_t v232 = v230;
          }
          if (v232) {
            uint64_t v232 = (unint64_t)sub_177AE0(v232);
          }
          else {
            uint64_t v233 = 0LL;
          }
          unint64_t v234 = v232 + 56 * v229;
          v235 = *(_OWORD *)v175;
          uint64_t v236 = *((_OWORD *)v175 + 1);
          unint64_t v237 = *((_OWORD *)v175 + 2);
          *(void *)(v234 + 48) = *((void *)v175 + 6);
          *(_OWORD *)(v234 + 16) = v236;
          *(_OWORD *)(v234 + 32) = v237;
          *(_OWORD *)unint64_t v234 = v235;
          uint64_t v239 = *(char **)(a1 + 208);
          int64x2_t v238 = *(char **)(a1 + 216);
          uint64_t v240 = v234;
          if (v238 != v239)
          {
            do
            {
              int v241 = *(_OWORD *)(v238 - 56);
              std::string::size_type v242 = *(_OWORD *)(v238 - 40);
              unsigned int v243 = *(_OWORD *)(v238 - 24);
              *(void *)(v240 - 8) = *((void *)v238 - 1);
              *(_OWORD *)(v240 - 24) = v243;
              *(_OWORD *)(v240 - 40) = v242;
              *(_OWORD *)(v240 - 56) = v241;
              v240 -= 56LL;
              v238 -= 56;
            }

            while (v238 != v239);
            int64x2_t v238 = *(char **)(a1 + 208);
          }

          unint64_t v227 = v234 + 56;
          *(void *)(a1 + 208) = v240;
          *(void *)(a1 + 216) = v234 + 56;
          *(void *)(a1 + 224) = v232 + 56 * v233;
          if (v238) {
            operator delete(v238);
          }
        }

        else
        {
          uint64_t v224 = *(_OWORD *)v175;
          unsigned int v225 = *((_OWORD *)v175 + 1);
          std::string::size_type v226 = *((_OWORD *)v175 + 2);
          *(void *)(v222 + 48) = *((void *)v175 + 6);
          *(_OWORD *)(v222 + 16) = v225;
          *(_OWORD *)(v222 + 32) = v226;
          *(_OWORD *)unint64_t v222 = v224;
          unint64_t v227 = v222 + 56;
        }

        *(void *)(a1 + 216) = v227;
        uint64_t v244 = *(void *)(a1 + 240);
        uint64_t v245 = *(void *)(a1 + 248);
        if (v244 >= v245)
        {
          uint64_t v247 = *(void *)(a1 + 232);
          std::string::size_type v248 = 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(v244 - v247) >> 3);
          unint64_t v249 = v248 + 1;
          if ((unint64_t)(v248 + 1) > 0x492492492492492LL) {
LABEL_505:
          }
            sub_7A87C();
          uint64_t v250 = 0x6DB6DB6DB6DB6DB7LL * ((uint64_t)(v245 - v247) >> 3);
          if (2 * v250 > v249) {
            unint64_t v249 = 2 * v250;
          }
          if (v250 >= 0x249249249249249LL) {
            unsigned int v251 = 0x492492492492492LL;
          }
          else {
            unsigned int v251 = v249;
          }
          if (v251) {
            unsigned int v251 = (unint64_t)sub_177AE0(v251);
          }
          else {
            unint64_t v252 = 0LL;
          }
          char v253 = v251 + 56 * v248;
          *(_OWORD *)char v253 = *(_OWORD *)buf;
          *(_OWORD *)(v253 + 16) = *(_OWORD *)&buf[16];
          *(_OWORD *)(v253 + 32) = *(_OWORD *)&buf[32];
          *(double *)(v253 + 48) = v322;
          uint64_t v255 = *(char **)(a1 + 232);
          v254 = *(char **)(a1 + 240);
          unint64_t v256 = v253;
          if (v254 != v255)
          {
            do
            {
              char v257 = *(_OWORD *)(v254 - 56);
              std::string::size_type v258 = *(_OWORD *)(v254 - 40);
              unint64_t v259 = *(_OWORD *)(v254 - 24);
              *(void *)(v256 - 8) = *((void *)v254 - 1);
              *(_OWORD *)(v256 - 24) = v259;
              *(_OWORD *)(v256 - 40) = v258;
              *(_OWORD *)(v256 - 56) = v257;
              v256 -= 56LL;
              v254 -= 56;
            }

            while (v254 != v255);
            v254 = *(char **)(a1 + 232);
          }

          uint64_t v246 = v253 + 56;
          *(void *)(a1 + 232) = v256;
          *(void *)(a1 + 240) = v253 + 56;
          *(void *)(a1 + 248) = v251 + 56 * v252;
          if (v254) {
            operator delete(v254);
          }
        }

        else
        {
          *(_OWORD *)uint64_t v244 = *(_OWORD *)buf;
          *(_OWORD *)(v244 + 16) = *(_OWORD *)&buf[16];
          *(_OWORD *)(v244 + 32) = *(_OWORD *)&buf[32];
          *(double *)(v244 + 48) = v322;
          uint64_t v246 = v244 + 56;
        }

        *(void *)(a1 + 240) = v246;
      }

      unint64_t v171 = ++v172;
      if (v173 <= v172) {
        goto LABEL_451;
      }
    }

    data = *(_DWORD *)(a1 + 188);
    if (data)
    {
      BOOL v177 = 1;
    }

    else
    {
      data = *(_DWORD *)&buf[28];
      if (v307[0] == v307[1])
      {
LABEL_376:
        BOOL v177 = 0;
      }

      else
      {
        while (*((_DWORD *)v174 + 7) != *(_DWORD *)(a1 + 184) || *v174 != *(double *)buf)
        {
          v174 += 7;
          if (v174 == v307[1]) {
            goto LABEL_376;
          }
        }

        BOOL v177 = 1;
        data = *(_DWORD *)(a1 + 184);
      }
    }

    if (*(_BYTE *)(*(void *)(a1 + 136) + 448LL))
    {
      uint64_t v188 = BYTE12(xmmword_493168);
      if ((v177 & 1) != 0) {
        goto LABEL_396;
      }
      if ((sub_6ADEC(a1) & 1) == 0 && sub_2AB20(*(void *)(a1 + 136))) {
        data = sub_2B09C(*(void *)(a1 + 136));
      }
      if (sub_6ADEC(a1)
        && (*(unsigned int (**)(void))(**(void **)(a1 + 136) + 80LL))(*(void *)(a1 + 136))
        && sub_197B80(*(void *)(a1 + 136)))
      {
        unint64_t v189 = *(void *)(a1 + 136);
        if (!sub_197B80(v189))
        {
          v292 = sub_138E8(13);
          v293 = sub_8C7D4(1, *(void **)v292, *(void *)(v292 + 8));
          v294 = (os_log_s *)objc_claimAutoreleasedReturnValue(v293);
          v295 = v294;
          if (v294 && os_log_type_enabled(v294, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = "DSPChain.mm";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 1553;
            _os_log_impl( &dword_0,  v295,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  __p,  0x12u);
          }

          std::string v296 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v296, "Precondition failure.");
        }

        *(void *)v313 = v189 + 48;
        v313[8] = 1;
        sub_92F80(v189 + 48);
        LODWORD(v311.__r_.__value_.__l.__data_) = 0;
        char v191 = *(void *)(v189 + 24);
        std::string v190 = *(void *)(v189 + 32);
        if (v191 == v190) {
          goto LABEL_510;
        }
        while (1)
        {
          v312 = 0;
          uint64_t v192 = (*(uint64_t (**)(void, uint64_t, void, char *))(**(void **)(v191 + 8) + 248LL))( *(void *)(v191 + 8),  1LL,  0LL,  &v312);
          if (v192)
          {
            int64x2_t v284 = (os_log_s *)*(id *)sub_138E8(13);
            uint64_t v285 = v284;
            if (v284 && os_log_type_enabled(v284, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string __p = 136315394;
              *(void *)&__p[4] = "DSPChain.mm";
              *(_WORD *)&__p[12] = 1024;
              *(_DWORD *)&__p[14] = 1562;
              _os_log_impl( &dword_0,  v285,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (stat) [error stat is an error]: Unexpected error from HasStaticChannelCountForBus",  __p,  0x12u);
            }

            v286 = __cxa_allocate_exception(0x10uLL);
            *(void *)v286 = &off_4865A0;
            v286[2] = v192;
          }

          if (v312) {
            break;
          }
          v191 += 24LL;
          if (v191 == v190)
          {
            char v191 = v190;
            break;
          }
        }

        if (v191 == *(void *)(v189 + 32))
        {
LABEL_510:
          uint64_t v287 = sub_138E8(13);
          uint64_t v288 = sub_8C7D4(1, *(void **)v287, *(void *)(v287 + 8));
          uint64_t v289 = (os_log_s *)objc_claimAutoreleasedReturnValue(v288);
          __int128 v290 = v289;
          if (v289 && os_log_type_enabled(v289, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = "DSPChain.mm";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 1566;
            _os_log_impl( &dword_0,  v290,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  __p,  0x12u);
          }

          uint64_t v291 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v291, "Precondition failure.");
        }

        unint64_t v193 = (*(uint64_t (**)(void, uint64_t, void, std::string *))(**(void **)(v191 + 8) + 256LL))( *(void *)(v191 + 8),  1LL,  0LL,  &v311);
        if (v193)
        {
          std::string::size_type v297 = sub_138E8(13);
          v298 = sub_8C7D4(1, *(void **)v297, *(void *)(v297 + 8));
          __int16 v299 = (os_log_s *)objc_claimAutoreleasedReturnValue(v298);
          v300 = v299;
          if (v299 && os_log_type_enabled(v299, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = "DSPChain.mm";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 1568;
            _os_log_impl( &dword_0,  v300,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (stat) [error stat is an error]: Unexpected error from GetChannelCountForBus",  __p,  0x12u);
          }

          v301 = __cxa_allocate_exception(0x10uLL);
          *(void *)v301 = &off_4865A0;
          v301[2] = v193;
        }

        data = (int)v311.__r_.__value_.__l.__data_;
        sub_93128((uint64_t)v313);
        if ((v188 & 0x20) != 0) {
          goto LABEL_395;
        }
      }

      else
      {
LABEL_396:
        if ((v188 & 0x20) != 0)
        {
LABEL_395:
          unint64_t v194 = 4;
          uint64_t v195 = 41;
LABEL_398:
          *(_DWORD *)&buf[8] = 1819304813;
          *(_DWORD *)&_BYTE buf[12] = v195;
          *(_DWORD *)&_DWORD buf[16] = v194;
          *(_DWORD *)&buf[20] = 1;
          *(_DWORD *)&buf[24] = v194;
          *(_DWORD *)&buf[28] = data;
          *(void *)&_BYTE buf[32] = 32LL;
          goto LABEL_399;
        }
      }
    }

    unint64_t v194 = 4 * data;
    uint64_t v195 = 9;
    goto LABEL_398;
  }

LABEL_580:
    v313 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v313, "Postcondition failure.");
  }

  if (((_DWORD)v18 != 1668248944) == (v263 - v364.__r_.__value_.__r.__words[0] == 8))
  {
    v311 = (os_log_t *)sub_138E8(13);
    v312 = *v311;
    if (*v311 && os_log_type_enabled(*v311, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 714;
      _os_log_impl(&dword_0, v312, OS_LOG_TYPE_ERROR, "%25s:%-5d POSTCONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    goto LABEL_580;
  }

  if (v364.__r_.__value_.__r.__words[0] == v263)
  {
    int64x2_t v284 = vdupq_n_s64(v364.__r_.__value_.__r.__words[0]);
  }

  else
  {
    do
    {
      if ((_DWORD)v18 == 1668248944)
      {
        uint64_t v281 = sub_138E8(8);
        if ((*(_BYTE *)(v281 + 8) & 1) != 0)
        {
          uint64_t v282 = *(os_log_s **)v281;
          if (*(void *)v281)
          {
            if (os_log_type_enabled(*(os_log_t *)v281, OS_LOG_TYPE_DEBUG))
            {
              sub_2DA51C(&v374, *v280);
              if ((v374.__r_.__value_.__s.__size_ & 0x80u) == 0) {
                int64x2_t v283 = &v374;
              }
              else {
                int64x2_t v283 = (std::string *)v374.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)buf = 136315650;
              *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 719;
              *(_WORD *)&buf[18] = 2080;
              *(void *)&buf[20] = v283;
              _os_log_impl( &dword_0,  v282,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempt to build concrete route(s) succeeded: Built concrete route %s",  buf,  0x1Cu);
            }
          }
        }
      }

      ++v280;
    }

    while (v280 != (unsigned int **)v263);
    int64x2_t v284 = *(int64x2_t *)&v364.__r_.__value_.__l.__data_;
  }

  *a1 = v284;
  a1[1].i64[0] = v364.__r_.__value_.__l.__cap_;
  memset(&v364, 0, sizeof(v364));
LABEL_530:
  operator delete(v318);
  *(void *)buf = &v364;
  sub_11E38C((void ***)buf);
  return sub_1251DC(&v357);
}

void sub_124024( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  *(void *)(v73 - 248) = &STACK[0x230];
  sub_11E38C((void ***)(v73 - 248));
  sub_1251DC(&a72);
  _Unwind_Resume(a1);
}

void sub_124038( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *__p, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  *(void *)(v72 - 248) = &STACK[0x230];
  sub_11E38C((void ***)(v72 - 248));
  sub_1251DC(&a72);
  _Unwind_Resume(a1);
}

void sub_124228()
{
}

void sub_124234()
{
}

void sub_12423C()
{
}

void sub_124260()
{
}

void sub_124284( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  int v71 = *(std::__shared_weak_count **)(v70 - 120);
  if (v71) {
    std::__shared_weak_count::__release_weak(v71);
  }
  uint64_t v72 = *(std::__shared_weak_count **)(v70 - 216);
  if (v72) {
    std::__shared_weak_count::__release_weak(v72);
  }
  sub_FF3B8(a66);
  sub_7A768((uint64_t)&a68);
  sub_7A768((uint64_t)&a70);
  a65 = (void **)&STACK[0x200];
  sub_A0CF0(&a65);
  STACK[0x200] = (unint64_t)&STACK[0x218];
  sub_A0CF0((void ***)&STACK[0x200]);
  sub_FF3B8((void *)STACK[0x268]);
  sub_FF3B8(*(void **)(v70 - 240));
  sub_55F18(a53);
  operator delete(a26);
  JUMPOUT(0x1244F4LL);
}

void sub_124310()
{
}

void sub_124318()
{
}

void sub_124320()
{
}

void sub_124328()
{
}

void sub_124330()
{
}

void sub_12433C( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,std::__shared_weak_count *a61,uint64_t a62,void *a63)
{
  if (a61) {
    std::__shared_weak_count::__release_weak(a61);
  }
  sub_FF3B8(a63);
  JUMPOUT(0x12449CLL);
}

void sub_124350()
{
}

void sub_124384()
{
}

void sub_1243A8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *__p, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a65 = (uint64_t)&STACK[0x200];
  sub_A0CF0((void ***)&a65);
  STACK[0x200] = (unint64_t)&STACK[0x218];
  sub_A0CF0((void ***)&STACK[0x200]);
  sub_FF3B8((void *)STACK[0x268]);
  sub_FF3B8(*(void **)(v70 - 240));
  sub_55F18(a53);
  operator delete(__p);
  JUMPOUT(0x1244F4LL);
}

void sub_1243B4()
{
}

void sub_1243BC()
{
}

void sub_1243C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  uint64_t v66 = *(std::__shared_weak_count **)(v65 - 216);
  if (v66) {
    std::__shared_weak_count::__release_weak(v66);
  }
  sub_7A768((uint64_t)&a62);
  sub_7A768((uint64_t)&a65);
  sub_7A768((uint64_t)&STACK[0x200]);
  JUMPOUT(0x1243F4LL);
}

void sub_124444(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_116394(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }

    while (v3);
    __cxa_rethrow();
  }

  JUMPOUT(0x124514LL);
}

void sub_124478()
{
}

void sub_12451C(void *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  JUMPOUT(0x124514LL);
}

uint64_t sub_12452C(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 192);
  uint64_t v3 = *(void **)(a1 + 216);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  sub_FF3B8(*(void **)(a1 + 176));
  sub_51FA0(a1 + 128);
  sub_51FA0(a1 + 88);
  sub_51FA0(a1 + 48);
  uint64_t v6 = (void **)(a1 + 24);
  sub_8C8F0(&v6);
  uint64_t v6 = (void **)a1;
  sub_8C8F0(&v6);
  return a1;
}

void sub_1245C0(std::string *a1, uint64_t a2)
{
  uint64_t v4 = std::string::insert(&v14, 0LL, " { Global : ", 0xCuLL);
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  a1->__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  sub_125438(&v12, (os_unfair_lock_s ***)(a2 + 24));
  uint64_t v6 = std::string::insert(&v12, 0LL, " VAD Specific Ports :", 0x15uLL);
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  __int128 v8 = std::string::append(&v13, " }", 2uLL);
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__l.__cap_ = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  if ((v14.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    BOOL v10 = &v14;
  }
  else {
    BOOL v10 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  if ((v14.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v14.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v14.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v10, size);
}

void sub_1246F4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_12476C(std::string *a1, void *a2, void *a3)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      std::to_string(&v12, *((_DWORD *)a2 + 7));
      if ((v12.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v6 = &v12;
      }
      else {
        uint64_t v6 = (std::string *)v12.__r_.__value_.__r.__words[0];
      }
      if ((v12.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type size = v12.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type size = v12.__r_.__value_.__l.__size_;
      }
      std::string::append(a1, (const std::string::value_type *)v6, size);
      __int128 v8 = (void *)a2[1];
      if (v8)
      {
        do
        {
          __int128 v9 = v8;
          __int128 v8 = (void *)*v8;
        }

        while (v8);
      }

      else
      {
        do
        {
          __int128 v9 = (void *)a2[2];
          BOOL v10 = *v9 == (void)a2;
          a2 = v9;
        }

        while (!v10);
      }

      if (v9 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
      a2 = v9;
    }
  }

  return std::string::append(a1, " }", 2uLL);
}

void sub_124870( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t sub_1248AC(uint64_t a1, uint64_t a2, int a3, char a4, int a5)
{
  int v8 = a3;
  char v7 = a4;
  int v6 = a5;
  if (!a2) {
    sub_82CEC();
  }
  return (*(uint64_t (**)(uint64_t, int *, char *, int *))(*(void *)a2 + 48LL))(a2, &v8, &v7, &v6);
}

void *sub_1248FC(void *a1, void *a2, void *a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  if (a2 != a3)
  {
    __int128 v5 = a2;
    unint64_t v6 = 0LL;
    char v7 = a2;
    do
    {
      unint64_t v8 = v6;
      __int128 v9 = (void *)v7[1];
      if (v9)
      {
        do
        {
          BOOL v10 = v9;
          __int128 v9 = (void *)*v9;
        }

        while (v9);
      }

      else
      {
        do
        {
          BOOL v10 = (void *)v7[2];
          BOOL v11 = *v10 == (void)v7;
          char v7 = v10;
        }

        while (!v11);
      }

      ++v6;
      char v7 = v10;
    }

    while (v10 != a3);
    if (v8 >= 0xFFFFFFFFFFFFFFFLL) {
      sub_7A87C();
    }
    std::string v12 = sub_7BE90(v6);
    *a1 = v12;
    a1[1] = v12;
    a1[2] = &v12[2 * v13];
    uint64_t v23 = v12;
    uint64_t v22 = v12;
    v20[0] = a1 + 2;
    v20[1] = &v22;
    v20[2] = &v23;
    do
    {
      *std::string v12 = v5[4];
      uint64_t v14 = v5[5];
      v12[1] = v14;
      if (v14)
      {
        uint64_t v15 = (unint64_t *)(v14 + 16);
        do
          unint64_t v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }

      int v17 = (void *)v5[1];
      if (v17)
      {
        do
        {
          uint64_t v18 = v17;
          int v17 = (void *)*v17;
        }

        while (v17);
      }

      else
      {
        do
        {
          uint64_t v18 = (void *)v5[2];
          BOOL v11 = *v18 == (void)v5;
          __int128 v5 = v18;
        }

        while (!v11);
      }

      v12 += 2;
      uint64_t v23 = v12;
      __int128 v5 = v18;
    }

    while (v18 != a3);
    char v21 = 1;
    sub_1253E0((uint64_t)v20);
    a1[1] = v12;
  }

  return a1;
}

void sub_124A54( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_124A68(uint64_t *a1, unint64_t a2, void *a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = (void *)a1[1];
  unint64_t v7 = ((uint64_t)v6 - *a1) >> 4;
  if (a2 <= v7)
  {
    if (a2 < v7)
    {
      unsigned __int8 v19 = (void *)(v5 + 16 * a2);
      while (v6 != v19)
      {
        os_signpost_id_t v20 = (std::__shared_weak_count *)*(v6 - 1);
        if (v20) {
          std::__shared_weak_count::__release_weak(v20);
        }
        v6 -= 2;
      }

      a1[1] = (uint64_t)v19;
    }
  }

  else
  {
    uint64_t v9 = a1[2];
    if (a2 - v7 <= (v9 - (uint64_t)v6) >> 4)
    {
      char v21 = &v6[2 * (a2 - v7)];
      do
      {
        void *v6 = *a3;
        uint64_t v22 = a3[1];
        v6[1] = v22;
        if (v22)
        {
          uint64_t v23 = (unint64_t *)(v22 + 16);
          do
            unint64_t v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
        }

        v6 += 2;
      }

      while (v6 != v21);
      a1[1] = (uint64_t)v21;
    }

    else
    {
      if (a2 >> 60) {
        sub_7A87C();
      }
      v25[4] = a1 + 2;
      uint64_t v10 = v9 - v5;
      uint64_t v11 = v10 >> 3;
      if (v10 >> 3 <= a2) {
        uint64_t v11 = a2;
      }
      else {
        unint64_t v12 = v11;
      }
      uint64_t v13 = (char *)sub_7BE90(v12);
      uint64_t v14 = &v13[16 * v7];
      v25[0] = v13;
      v25[1] = v14;
      v25[3] = &v13[16 * v15];
      do
      {
        *(void *)uint64_t v14 = *a3;
        uint64_t v16 = a3[1];
        *((void *)v14 + 1) = v16;
        if (v16)
        {
          int v17 = (unint64_t *)(v16 + 16);
          do
            unint64_t v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
        }

        v14 += 16;
      }

      while (v14 != &v13[16 * a2]);
      v25[2] = &v13[16 * a2];
      sub_1213D4(a1, v25);
      sub_121448((uint64_t)v25);
    }
  }

void sub_124BD4(uint64_t *a1)
{
  uint64_t v2 = (void *)a1[1];
  if (v2 == (void *)*a1)
  {
    if (a1[2] == (void)v2)
    {
      v7[4] = a1 + 2;
      uint64_t v5 = sub_7BE90(1uLL);
      v7[0] = v5;
      v7[1] = v5;
      v7[3] = &v5[2 * v6];
      void *v5 = 0LL;
      v5[1] = 0LL;
      v7[2] = v5 + 2;
      sub_1213D4(a1, v7);
      sub_121448((uint64_t)v7);
    }

    else
    {
      *uint64_t v2 = 0LL;
      v2[1] = 0LL;
      a1[1] = (uint64_t)(v2 + 2);
    }
  }

  else if ((unint64_t)v2 - *a1 >= 0x11)
  {
    uint64_t v3 = *a1 + 16;
    while (v2 != (void *)v3)
    {
      uint64_t v4 = (std::__shared_weak_count *)*(v2 - 1);
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      v2 -= 2;
    }

    a1[1] = v3;
  }

void sub_124CAC(uint64_t *a1, void *a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  sub_EDD50(&v15, a2);
  for (uint64_t i = v16; i != &v15; uint64_t i = (uint64_t *)i[1])
  {
    uint64_t v4 = (void *)i[2];
    if (v4 && v4[24] && (*(unsigned int (**)(uint64_t))(*v4 + 152LL))(i[2]))
    {
      uint64_t v5 = v4[24];
      if (!v5)
      {
        unint64_t v12 = (os_log_t *)sub_138E8(13);
        uint64_t v13 = *v12;
        if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "PortUtilities.cpp";
          __int16 v20 = 1024;
          int v21 = 108;
          _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }

        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Precondition failure.");
      }

      strcpy(buf, "ngswbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      if (!(*(unsigned int (**)(uint64_t, _BYTE *))(*(void *)v5 + 16LL))(v5, buf)
        || (int v17 = 4,
            int v18 = 0,
            strcpy(buf, "ngswbolg"),
            buf[9] = 0,
            *(_WORD *)&buf[10] = 0,
            (*(void (**)(uint64_t, _BYTE *, void, void, int *, int *))(*(void *)v5 + 40LL))( v5,  buf,  0LL,  0LL,  &v17,  &v18),  !v18))
      {
        uint64_t v7 = i[2];
        uint64_t v6 = i[3];
        if (v6)
        {
          unint64_t v8 = (unint64_t *)(v6 + 16);
          do
            unint64_t v9 = __ldxr(v8);
          while (__stxr(v9 + 1, v8));
        }

        uint64_t v10 = operator new(0x20uLL);
        v10[2] = v7;
        v10[3] = v6;
        uint64_t v11 = *a1;
        *(void *)(v11 + 8) = v10;
        *a1 = (uint64_t)v10;
        void *v10 = v11;
        v10[1] = a1;
        ++a1[2];
      }
    }
  }

  sub_1BB88(&v15);
}

void sub_124EC0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_124F10(uint64_t result, uint64_t a2, uint64_t a3, void *a4, void *a5, char a6, uint64_t a7)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + 8) = a3;
  if (a3)
  {
    uint64_t v7 = (unint64_t *)(a3 + 16);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  *(void *)(result + 16) = *a4;
  uint64_t v9 = a4[1];
  *(void *)(result + 24) = v9;
  if (v9)
  {
    uint64_t v10 = (unint64_t *)(v9 + 16);
    do
      unint64_t v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }

  *(void *)(result + 32) = *a5;
  uint64_t v12 = a5[1];
  *(void *)(result + 40) = v12;
  if (v12)
  {
    uint64_t v13 = (unint64_t *)(v12 + 16);
    do
      unint64_t v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }

  *(_BYTE *)(result + 48) = a6;
  *(void *)(result + 56) = a7;
  if (!a7)
  {
    uint64_t v15 = (os_log_t *)sub_138E8(13);
    uint64_t v16 = *v15;
    if (*v15)
    {
      if (os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
      {
        int v18 = 136315394;
        unsigned __int8 v19 = "RoutingTypes.h";
        __int16 v20 = 1024;
        int v21 = 1869;
        _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v18,  0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  return result;
}

void sub_125084(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (std::__shared_weak_count *)v1[5];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)v1[1];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_1250C8(std::string *a1, uint64_t a2, uint64_t a3)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      sub_2DA02C(__p, (uint64_t *)(a2 + 16));
      uint64_t v6 = (v10 & 0x80u) == 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
      uint64_t v7 = (v10 & 0x80u) == 0 ? (void *)v10 : __p[1];
      std::string::append(a1, v6, (std::string::size_type)v7);
      a2 = *(void *)(a2 + 8);
      if (a2 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }

  return std::string::append(a1, " }", 2uLL);
}

void sub_1251A0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

os_signpost_id_t *sub_1251DC(os_signpost_id_t *a1)
{
  uint64_t v2 = sub_138E8(42);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    uint64_t v3 = *(os_log_s **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v8 = 136315650;
        uint64_t v9 = "SignpostUtilities.h";
        __int16 v10 = 1024;
        int v11 = 64;
        __int16 v12 = 2080;
        uint64_t v13 = "kBuildConcreteFromAbstract";
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Ending measurement for signpost %s",  (uint8_t *)&v8,  0x1Cu);
      }
    }
  }

  if (*a1)
  {
    unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_493908);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
    {
      qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_493908);
    }

    os_signpost_id_t v5 = *a1;
    if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v6 = (os_log_s *)qword_493900;
      if (os_signpost_enabled((os_log_t)qword_493900))
      {
        LOWORD(v8) = 0;
        _os_signpost_emit_with_name_impl( &dword_0,  v6,  OS_SIGNPOST_INTERVAL_END,  v5,  "VA_PV_BuildConcreteFromAbstract",  (const char *)&unk_420CC6,  (uint8_t *)&v8,  2u);
      }
    }
  }

  return a1;
}

void sub_125368(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

__n128 sub_125374(__n128 *a1, __n128 *a2)
{
  unint64_t v2 = a2->n128_u64[1];
  a1->n128_u64[0] = a2->n128_u64[0];
  a1->n128_u64[1] = v2;
  if (v2)
  {
    uint64_t v3 = (unint64_t *)(v2 + 16);
    do
      unint64_t v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }

  unint64_t v5 = a2[1].n128_u64[1];
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  a1[1].n128_u64[1] = v5;
  if (v5)
  {
    uint64_t v6 = (unint64_t *)(v5 + 16);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  unint64_t v8 = a2[2].n128_u64[1];
  a1[2].n128_u64[0] = a2[2].n128_u64[0];
  a1[2].n128_u64[1] = v8;
  if (v8)
  {
    uint64_t v9 = (unint64_t *)(v8 + 16);
    do
      unint64_t v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }

  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

uint64_t sub_1253E0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      unint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
      if (v5) {
        std::__shared_weak_count::__release_weak(v5);
      }
      v3 -= 16LL;
    }
  }

  return a1;
}

std::string *sub_125438(std::string *a1, os_unfair_lock_s ***a2)
{
  uint64_t v6 = *a2;
  uint64_t v4 = a2 + 1;
  unint64_t v5 = v6;
  if (v6 != (os_unfair_lock_s **)v4)
  {
    while (1)
    {
      sub_2CA1C(&v20, *((unsigned int *)v5 + 8));
      unint64_t v7 = std::string::append(&v20, " : ", 3uLL);
      __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v21.__r_.__value_.__l.__cap_ = v7->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0LL;
      v7->__r_.__value_.__l.__cap_ = 0LL;
      v7->__r_.__value_.__r.__words[0] = 0LL;
      sub_1214C4(&v19, (os_unfair_lock_s **)v5[5], v5 + 6);
      if ((v19.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v9 = &v19;
      }
      else {
        uint64_t v9 = (std::string *)v19.__r_.__value_.__r.__words[0];
      }
      if ((v19.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type size = v19.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type size = v19.__r_.__value_.__l.__size_;
      }
      int v11 = std::string::append(&v21, (const std::string::value_type *)v9, size);
      __int128 v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      int64_t cap = v11->__r_.__value_.__l.__cap_;
      *(_OWORD *)std::string __p = v12;
      v11->__r_.__value_.__l.__size_ = 0LL;
      v11->__r_.__value_.__l.__cap_ = 0LL;
      v11->__r_.__value_.__r.__words[0] = 0LL;
      if (cap >= 0) {
        uint64_t v13 = __p;
      }
      else {
        uint64_t v13 = (void **)__p[0];
      }
      if (cap >= 0) {
        std::string::size_type v14 = HIBYTE(cap);
      }
      else {
        std::string::size_type v14 = (std::string::size_type)__p[1];
      }
      std::string::append(a1, (const std::string::value_type *)v13, v14);
      if (SHIBYTE(cap) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v15 = v5[1];
      if (v15)
      {
        do
        {
          uint64_t v16 = (os_unfair_lock_s ***)v15;
          uint64_t v15 = *(os_unfair_lock_s **)&v15->_os_unfair_lock_opaque;
        }

        while (v15);
      }

      else
      {
        do
        {
          uint64_t v16 = (os_unfair_lock_s ***)v5[2];
          BOOL v17 = *v16 == v5;
          unint64_t v5 = (os_unfair_lock_s **)v16;
        }

        while (!v17);
      }

      if (v16 == v4) {
        break;
      }
      std::string::append(a1, "; ", 2uLL);
      unint64_t v5 = (os_unfair_lock_s **)v16;
    }
  }

  return std::string::append(a1, " ]", 2uLL);
}

void sub_1255E4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, uint64_t a27, void *__p, uint64_t a29, int a30, __int16 a31, char a32, char a33)
{
}

uint64_t sub_125668(uint64_t a1)
{
  *(void *)a1 = off_470AB0;
  unint64_t v2 = (void *)(a1 + 200);
  uint64_t v3 = *(void **)(a1 + 224);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  sub_FF3B8(*(void **)(a1 + 184));
  sub_51FA0(a1 + 136);
  sub_51FA0(a1 + 96);
  sub_51FA0(a1 + 56);
  uint64_t v6 = (void **)(a1 + 32);
  sub_8C8F0(&v6);
  uint64_t v6 = (void **)(a1 + 8);
  sub_8C8F0(&v6);
  return a1;
}

void sub_12570C(char *a1)
{
  *(void *)a1 = off_470AB0;
  unint64_t v2 = a1 + 200;
  uint64_t v3 = (void *)*((void *)a1 + 28);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  sub_FF3B8(*((void **)a1 + 23));
  sub_51FA0((uint64_t)(a1 + 136));
  sub_51FA0((uint64_t)(a1 + 96));
  sub_51FA0((uint64_t)(a1 + 56));
  unint64_t v5 = (void **)(a1 + 32);
  sub_8C8F0(&v5);
  unint64_t v5 = (void **)(a1 + 8);
  sub_8C8F0(&v5);
  operator delete(a1);
}

void *sub_1257B0(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0xF0uLL);
  *unint64_t v2 = off_470AB0;
  sub_12634C((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1257F0(_Unwind_Exception *a1)
{
}

uint64_t sub_125804(uint64_t a1, void *a2)
{
  *a2 = off_470AB0;
  return sub_12634C((uint64_t)(a2 + 1), a1 + 8);
}

void sub_125820(uint64_t a1)
{
}

void sub_125828(void *a1)
{
}

void *sub_125850@<X0>( uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned __int8 *a3@<X2>, int *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = *a2;
  int v8 = *a3;
  int v9 = *a4;
  unint64_t v10 = (const void ***)sub_5569C((void *)(a1 + 8), *a2);
  int v11 = *(_DWORD *)(a1 + 232);
  sub_82AF0((uint64_t)v29, a1 + 200);
  *(void *)(a5 + 8) = 0LL;
  *(void *)(a5 + 16) = 0LL;
  *(void *)a5 = a5 + 8;
  sub_55700(&v27, *v10, v10[1], v11);
  uint64_t v13 = v27;
  std::string::size_type v14 = v28;
  if (v27 != v28)
  {
    uint64_t v15 = a1 + 176;
    while (1)
    {
      CFTypeRef v16 = *v13;
      if (*v13) {
        CFRetain(*v13);
      }
      unint64_t v24 = v16;
      uint64_t v17 = (uint64_t)v30;
      if (!v30) {
        goto LABEL_8;
      }
      if (v30 != v29) {
        break;
      }
      int v32 = v31;
      (*(void (**)(void *, _BYTE *))(v29[0] + 24LL))(v29, v31);
LABEL_10:
      sub_125B30((uint64_t *)&v25, v7, &v24, v9, v8 != 0, v15, v11, (uint64_t)v31);
      int v18 = v32;
      if (v32 == v31)
      {
        int v18 = v31;
        uint64_t v19 = 4LL;
        goto LABEL_14;
      }

      if (v32)
      {
        uint64_t v19 = 5LL;
LABEL_14:
        (*(void (**)(void *, uint64_t))(*v18 + 8 * v19))(v18, v12);
      }

      if (v16) {
        CFRelease(v16);
      }
      std::string v20 = v26;
      if (v26)
      {
        if (v26->__shared_owners_ != -1) {
          sub_125FBC((uint64_t **)a5, (unint64_t *)&v25, (uint64_t *)&v25);
        }
        std::__shared_weak_count::__release_weak(v20);
      }

      if (++v13 == v14) {
        goto LABEL_22;
      }
    }

    uint64_t v17 = (*(uint64_t (**)(void *, uint64_t))(*v30 + 16LL))(v30, v12);
LABEL_8:
    int v32 = (_BYTE *)v17;
    goto LABEL_10;
  }

void sub_125A58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  std::string v20 = a19;
  if (a19 == &a16)
  {
    uint64_t v21 = 4LL;
    std::string v20 = &a16;
  }

  else
  {
    if (!a19) {
      goto LABEL_6;
    }
    uint64_t v21 = 5LL;
  }

  (*(void (**)(void))(*(void *)v20 + 8 * v21))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_125B30(uint64_t *a1, uint64_t a2, const void **a3, int a4, int a5, uint64_t a6, int a7, uint64_t a8)
{
  int v16 = 44739242;
  uint64_t v17 = operator new(4uLL);
  int v42 = v17;
  _DWORD *v17 = a2;
  std::string::size_type v43 = v17 + 1;
  int v44 = v17 + 1;
  strcpy((char *)v45, "cwdv");
  char v46 = 0;
  int v47 = 3;
  v49[0] = 0LL;
  v49[1] = 0LL;
  int v48 = v49;
  unsigned int v50 = 44739242;
  int v18 = *a3;
  CFTypeRef cf = v18;
  if (v18)
  {
    CFRetain(v18);
    int v16 = v50;
  }

  if (a5) {
    int v19 = 8;
  }
  else {
    int v19 = 0;
  }
  v45[0] = a4;
  unsigned int v50 = v16 & 0xFFFFFFF0 | v19;
  int v64 = a7;
  std::string v20 = v65;
  sub_82AF0((uint64_t)v65, a8);
  uint64_t v68 = 0LL;
  uint64_t v21 = operator new(0x30uLL);
  *(void *)uint64_t v21 = &off_470AF8;
  v21[2] = v64;
  sub_121654((uint64_t)(v21 + 4), (uint64_t)v65);
  uint64_t v68 = v21;
  if (v66 == v65)
  {
    uint64_t v22 = 4LL;
  }

  else
  {
    if (!v66) {
      goto LABEL_11;
    }
    uint64_t v22 = 5LL;
    std::string v20 = v66;
  }

  (*(void (**)(void *))(*v20 + 8 * v22))(v20);
LABEL_11:
  uint64_t v23 = (void *)sub_546E0();
  uint64_t v24 = (uint64_t)v68;
  if (!v68)
  {
LABEL_14:
    std::string::size_type v63 = (_BYTE *)v24;
    goto LABEL_16;
  }

  if (v68 != v67)
  {
    uint64_t v24 = (*(uint64_t (**)(void *))(*v68 + 16LL))(v68);
    goto LABEL_14;
  }

  std::string::size_type v63 = v62;
  (*(void (**)(void *, _BYTE *))(v67[0] + 24LL))(v67, v62);
LABEL_16:
  sub_1009FC(a1, v23, (uint64_t)&v42, a6, (uint64_t)v62);
  uint64_t v25 = v63;
  if (v63 == v62)
  {
    uint64_t v26 = 4LL;
    uint64_t v25 = v62;
    goto LABEL_20;
  }

  if (v63)
  {
    uint64_t v26 = 5LL;
LABEL_20:
    (*(void (**)(void))(*v25 + 8 * v26))();
  }

  if (*a3)
  {
    uint64_t v27 = sub_138E8(8);
    if ((*(_BYTE *)(v27 + 8) & 1) != 0)
    {
      BOOL v28 = *(os_log_s **)v27;
      if (*(void *)v27)
      {
        if (os_log_type_enabled(*(os_log_t *)v27, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(__p, a2);
          int v29 = v41;
          std::string::size_type v30 = (void **)__p[0];
          uint64_t v31 = *a3;
          sub_B8CBC(&v38, a1, "", 322);
          int v32 = __p;
          if (v29 < 0) {
            int v32 = v30;
          }
          *(_DWORD *)buf = 136316162;
          int v53 = "RoutingManager.cpp";
          __int16 v54 = 1024;
          int v55 = 322;
          __int16 v56 = 2080;
          int v57 = v32;
          __int16 v58 = 2112;
          char v59 = v31;
          __int16 v60 = 2048;
          uint64_t v61 = v38;
          _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d PV_GetHighestPriorityPort(portType = %s, UID = %@) port = %p",  buf,  0x30u);
          uint64_t v33 = v39;
          if (v39)
          {
            p_shared_owners = (unint64_t *)&v39->__shared_owners_;
            do
              unint64_t v35 = __ldaxr(p_shared_owners);
            while (__stlxr(v35 - 1, p_shared_owners));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }

          if (v41 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }

  unint64_t v36 = v68;
  if (v68 == v67)
  {
    uint64_t v37 = 4LL;
    unint64_t v36 = v67;
  }

  else
  {
    if (!v68) {
      goto LABEL_39;
    }
    uint64_t v37 = 5LL;
  }

  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_39:
  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(v49[0]);
  if (v42)
  {
    std::string::size_type v43 = v42;
    operator delete(v42);
  }

void sub_125EC8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34)
{
  if (v36 < 0) {
    operator delete(v35);
  }
  int v39 = *(std::__shared_weak_count **)(v34 + 8);
  if (v39) {
    std::__shared_weak_count::__release_weak(v39);
  }
  os_signpost_id_t v40 = *(void **)(v37 - 96);
  if (v40 == (void *)(v37 - 120))
  {
    uint64_t v41 = 4LL;
    os_signpost_id_t v40 = (void *)(v37 - 120);
  }

  else
  {
    if (!v40) {
      goto LABEL_10;
    }
    uint64_t v41 = 5LL;
  }

  (*(void (**)(void *))(*v40 + 8 * v41))(v40);
LABEL_10:
  sub_A0DB0((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t *sub_125FBC(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  __n128 result = sub_103C68((uint64_t)a1, &v11, a2);
  if (!*result)
  {
    uint64_t v6 = (uint64_t **)result;
    uint64_t v7 = (uint64_t *)operator new(0x30uLL);
    uint64_t v8 = a3[1];
    v7[4] = *a3;
    void v7[5] = v8;
    if (v8)
    {
      int v9 = (unint64_t *)(v8 + 16);
      do
        unint64_t v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }

    return sub_32C38(a1, v11, v6, v7);
  }

  return result;
}

void *sub_126050(void *a1)
{
  *a1 = &off_470AF8;
  unint64_t v2 = a1 + 2;
  uint64_t v3 = (void *)a1[5];
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_1260AC(char *__p)
{
  *(void *)std::string __p = &off_470AF8;
  unint64_t v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

_DWORD *sub_126108(uint64_t a1)
{
  unint64_t v2 = operator new(0x30uLL);
  *(void *)unint64_t v2 = &off_470AF8;
  v2[2] = *(_DWORD *)(a1 + 8);
  sub_82AF0((uint64_t)(v2 + 4), a1 + 16);
  return v2;
}

void sub_126154(_Unwind_Exception *a1)
{
}

uint64_t sub_126168(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_470AF8;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 8);
  return sub_82AF0(a2 + 16, a1 + 16);
}

void *sub_12618C(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 16);
  __n128 result = *(void **)(a1 + 40);
  if (result == v1)
  {
    uint64_t v3 = 4LL;
    __n128 result = v1;
  }

  else
  {
    if (!result) {
      return result;
    }
    uint64_t v3 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_1261C0(char *__p)
{
  unint64_t v2 = __p + 16;
  uint64_t v3 = (char *)*((void *)__p + 5);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

uint64_t sub_126210(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 40);
  if (!v5) {
    sub_82CEC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 48LL))(v5, a2);
}

void *sub_126284(void *a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  return a1;
}

void sub_1262BC(uint64_t a1)
{
  unint64_t v2 = (void *)(a1 + 192);
  uint64_t v3 = *(void **)(a1 + 216);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    uint64_t v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  sub_FF3B8(*(void **)(a1 + 176));
  sub_51FA0(a1 + 128);
  sub_51FA0(a1 + 88);
  sub_51FA0(a1 + 48);
  uint64_t v5 = (void **)(a1 + 24);
  sub_8C8F0(&v5);
  uint64_t v5 = (void **)a1;
  sub_8C8F0(&v5);
}

uint64_t sub_12634C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_54070((void *)a1, (const void ***)a2);
  sub_121604(v4 + 21, a2 + 168);
  sub_82AF0(a1 + 192, a2 + 192);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  return a1;
}

void sub_12639C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 24);
  sub_8C8F0(&a10);
  a10 = (void **)v10;
  sub_8C8F0(&a10);
  _Unwind_Resume(a1);
}

void sub_1263EC(void *a1, os_unfair_lock_s **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (!v3) {
    goto LABEL_13;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    goto LABEL_13;
  }
  uint64_t v6 = v5;
  uint64_t v7 = *a2;
  if (!v7)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      unint64_t v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11) {
      goto LABEL_13;
    }
    goto LABEL_11;
  }

  sub_23FE8((uint64_t)a1, v7 + 2);
  uint64_t v8 = (unint64_t *)&v6->__shared_owners_;
  do
    unint64_t v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
LABEL_11:
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (v7) {
      return;
    }
LABEL_13:
    sub_7D084(a1, "expired");
  }

void sub_1264BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 sub_1264D8(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v2 = &off_470B40;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_126518(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_470B40;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_126540(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1[1] + 128LL);
  if (!v3) {
    sub_82CEC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v3 + 48LL))( v3,  a2,  a1[2] + 152LL,  a1[3]);
}

uint64_t *sub_126574(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  for (uint64_t i = 440LL; ; i -= 440LL)
  {
    uint64_t v8 = v6 + i;
    if (v4 + i - 440 == v5) {
      break;
    }
    uint64_t v9 = v4 + i - 880;
    __n128 result = (uint64_t *)sub_71648(v8 - 880, v9);
  }

  uint64_t v10 = v8 - 440;
  a2[1] = v10;
  uint64_t v11 = *v3;
  uint64_t *v3 = v10;
  a2[1] = v11;
  uint64_t v12 = v3[1];
  v3[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = v3[2];
  v3[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t sub_126644(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 440;
    sub_8F164(i - 440);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_126690(uint64_t *a1)
{
  if ((*(_WORD *)(v28 + 184) & 8) != 0 || (*(_WORD *)(v26 + 184) & 8) != 0)
  {
    uint64_t v3 = sub_138E8(8);
    uint64_t v4 = sub_138E8(34);
    char v5 = 0;
    uint64_t v6 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v7 = *(void *)(v3 + 8);
    while (1)
    {
      uint64_t v8 = *(int *)&buf[4 * v6];
      char v9 = v5;
      if (((v7 & v8) != 0) != ((*(void *)(v4 + 8) & v8) != 0)) {
        break;
      }
      char v5 = 1;
      uint64_t v6 = 1LL;
      if ((v9 & 1) != 0) {
        goto LABEL_10;
      }
    }

    if ((v7 & v8) == 0) {
      uint64_t v3 = v4;
    }
LABEL_10:
    uint64_t v10 = *(os_log_s **)v3;
    if (v10 && os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      sub_2CA1C(v24, *(unsigned int *)(v28 + 144));
      int v11 = v25;
      uint64_t v12 = (void **)v24[0];
      sub_2CA1C(__p, *(unsigned int *)(v26 + 144));
      uint64_t v13 = v24;
      if (v11 < 0) {
        uint64_t v13 = v12;
      }
      if (v23 >= 0) {
        std::string::size_type v14 = __p;
      }
      else {
        std::string::size_type v14 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      __int16 v31 = 1024;
      int v32 = 1170;
      __int16 v33 = 2080;
      uint64_t v34 = v13;
      __int16 v35 = 2080;
      int v36 = v14;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Culling route connection because silent mode is enabled. Source port type = '%s', Destination port type = '%s'",  buf,  0x26u);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      if (v25 < 0) {
        operator delete(v24[0]);
      }
    }

    uint64_t v2 = 1LL;
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  uint64_t v15 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      unint64_t v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  int v18 = v29;
  if (v29)
  {
    int v19 = (unint64_t *)&v29->__shared_owners_;
    do
      unint64_t v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  return v2;
}

void sub_1268FC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  if (v18 < 0) {
    operator delete(v17);
  }
  sub_7A768((uint64_t)&a15);
  sub_7A768((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_126940(uint64_t a1, __int128 *a2)
{
  __int128 v4 = *a2;
  *(void *)a2 = 0LL;
  *((void *)a2 + 1) = 0LL;
  char v5 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v4;
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  __int128 v6 = a2[1];
  *((void *)a2 + 2) = 0LL;
  *((void *)a2 + 3) = 0LL;
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = v6;
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  __int128 v8 = a2[2];
  *((void *)a2 + 4) = 0LL;
  *((void *)a2 + 5) = 0LL;
  char v9 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v8;
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  *(_OWORD *)(a1 + sub_51FA0(v10 + 48) = a2[3];
  return a1;
}

void *sub_1269B4(uint64_t a1, void *a2, void *a3)
{
  if (a2 != a3)
  {
    __int128 v4 = a2;
    uint64_t v6 = *a3;
    uint64_t v7 = *a2;
    *(void *)(v7 + 8) = *(void *)(*a3 + 8LL);
    **(void **)(v6 + 8) = v7;
    do
    {
      __int128 v8 = (void *)v4[1];
      --*(void *)(a1 + 16);
      sub_116394(v4 + 2);
      operator delete(v4);
      __int128 v4 = v8;
    }

    while (v8 != a3);
  }

  return a3;
}

uint64_t sub_126A30(uint64_t *a1)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)v18 + 112LL))(v18) & 0xFF00000000LL) != 0
    && (*(unsigned int (**)(uint64_t))(*(void *)v18 + 112LL))(v18) == 1701869160)
  {
    uint64_t v2 = sub_138E8(8);
    uint64_t v3 = sub_138E8(34);
    char v4 = 0;
    uint64_t v5 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v6 = *(void *)(v2 + 8);
    while (1)
    {
      uint64_t v7 = *(int *)&buf[4 * v5];
      char v8 = v4;
      if (((v6 & v7) != 0) != ((*(void *)(v3 + 8) & v7) != 0)) {
        break;
      }
      char v4 = 1;
      uint64_t v5 = 1LL;
      if ((v8 & 1) != 0) {
        goto LABEL_10;
      }
    }

    if ((v6 & v7) == 0) {
      uint64_t v2 = v3;
    }
LABEL_10:
    uint64_t v10 = *(os_log_s **)v2;
    if (v10 && os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      __int16 v23 = 1024;
      int v24 = 1218;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Culling route connection because CarKit BT port is not allowed in emergency alert routes.",  buf,  0x12u);
    }

    uint64_t v9 = 1LL;
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  int v11 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  std::string::size_type v14 = v21;
  if (v21)
  {
    uint64_t v15 = (unint64_t *)&v21->__shared_owners_;
    do
      unint64_t v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }

  return v9;
}

void sub_126C38( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void *sub_126C6C(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 16);
  uint64_t v2 = *(void **)(a1 + 24);
  uint64_t v3 = (void *)(a1 + 16);
  if (v2 != (void *)(a1 + 16))
  {
    while ((sub_127330(v2 + 2) & 1) == 0)
    {
      uint64_t v2 = (void *)v2[1];
      if (v2 == v1)
      {
        uint64_t v3 = v1;
        return sub_1269B4((uint64_t)v1, v3, v1);
      }
    }

    uint64_t v3 = v1;
    if (v2 != v1)
    {
      uint64_t v4 = v2[1];
      uint64_t v3 = v2;
      while ((void *)v4 != v1)
      {
        if ((sub_127330((uint64_t *)(v4 + 16)) & 1) == 0)
        {
          sub_126940((uint64_t)(v3 + 2), (__int128 *)(v4 + 16));
          uint64_t v3 = (void *)v3[1];
        }

        uint64_t v4 = *(void *)(v4 + 8);
      }
    }
  }

  return sub_1269B4((uint64_t)v1, v3, v1);
}

void *sub_126D10(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 16);
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2 == (void *)(a1 + 16))
  {
    BOOL v9 = 0;
LABEL_9:
    uint64_t v6 = v1;
  }

  else
  {
    do
    {
      BOOL v4 = sub_1F6D68((uint64_t)(v2 + 2));
      if (v4) {
        break;
      }
      uint64_t v2 = (void *)v2[1];
    }

    while (v2 != v1);
    uint64_t v5 = *(void **)(a1 + 24);
    BOOL v9 = v4;
    uint64_t v6 = v1;
    if (v5 != v1)
    {
      while ((sub_127074(&v9, v5 + 2) & 1) == 0)
      {
        uint64_t v5 = (void *)v5[1];
        if (v5 == v1) {
          goto LABEL_9;
        }
      }

      uint64_t v6 = v1;
      if (v5 != v1)
      {
        uint64_t v8 = v5[1];
        uint64_t v6 = v5;
        while ((void *)v8 != v1)
        {
          if ((sub_127074(&v9, (uint64_t *)(v8 + 16)) & 1) == 0)
          {
            sub_126940((uint64_t)(v6 + 2), (__int128 *)(v8 + 16));
            uint64_t v6 = (void *)v6[1];
          }

          uint64_t v8 = *(void *)(v8 + 8);
        }
      }
    }
  }

  return sub_1269B4((uint64_t)v1, v6, v1);
}

uint64_t sub_126DF4(uint64_t a1)
{
  uint64_t v1 = v20[24];
  strcpy((char *)buf, "paaibolg");
  BYTE1(buf[2]) = 0;
  HIWORD(buf[2]) = 0;
  if (!(*(unsigned int (**)(uint64_t, _DWORD *))(*(void *)v1 + 16LL))(v1, buf)
    || *((_DWORD *)v20 + 36) == 1886152047
    || (int v7 = sub_1FF9AC(v20)) != 0 && (*(unsigned int (**)(void *))(*v20 + 112LL))(v20) == 1701865584)
  {
    uint64_t v2 = 0LL;
  }

  else
  {
    uint64_t v8 = sub_138E8(8);
    uint64_t v9 = sub_138E8(34);
    char v10 = 0;
    uint64_t v11 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v12 = *(void *)(v8 + 8);
    while (1)
    {
      uint64_t v13 = (int)buf[v11];
      char v14 = v10;
      if (((v12 & v13) != 0) != ((*(void *)(v9 + 8) & v13) != 0)) {
        break;
      }
      char v10 = 1;
      uint64_t v11 = 1LL;
      if ((v14 & 1) != 0) {
        goto LABEL_18;
      }
    }

    if ((v12 & v13) == 0) {
      uint64_t v8 = v9;
    }
LABEL_18:
    uint64_t v15 = *(os_log_s **)v8;
    if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      sub_2CA1C(__p, *((unsigned int *)v20 + 36));
      if (v19 >= 0) {
        unint64_t v16 = __p;
      }
      else {
        unint64_t v16 = (void **)__p[0];
      }
      unint64_t v17 = "false";
      *(void *)&buf[1] = "RoutingManager.cpp";
      buf[0] = 136315906;
      __int16 v23 = 1024;
      if (v7) {
        unint64_t v17 = "true";
      }
      int v24 = 1276;
      __int16 v25 = 2080;
      uint64_t v26 = v16;
      __int16 v27 = 2080;
      uint64_t v28 = v17;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Culling route connection because port is not allowed for kVirtualAudioPlugInRoutingCategoryAlarm, Dest ination port type = '%s', AppleAccessory = '%s'",  (uint8_t *)buf,  0x26u);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v2 = 1LL;
  }

  uint64_t v3 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

  return v2;
}

void sub_127048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_127074(_BYTE *a1, uint64_t *a2)
{
  if (*a1 && (*(unsigned int (**)(unsigned int *))(*(void *)v28 + 400LL))(v28) != 1)
  {
    uint64_t v5 = sub_138E8(8);
    uint64_t v6 = sub_138E8(34);
    char v7 = 0;
    uint64_t v8 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v9 = *(void *)(v5 + 8);
    while (1)
    {
      uint64_t v10 = *(int *)&buf[4 * v8];
      char v11 = v7;
      if (((v9 & v10) != 0) != ((*(void *)(v6 + 8) & v10) != 0)) {
        break;
      }
      char v7 = 1;
      uint64_t v8 = 1LL;
      if ((v11 & 1) != 0) {
        goto LABEL_10;
      }
    }

    if ((v9 & v10) == 0) {
      uint64_t v5 = v6;
    }
LABEL_10:
    uint64_t v12 = *(os_log_s **)v5;
    if (v12 && os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      sub_2CA1C(v26, *(unsigned int *)(v30 + 144));
      int v13 = v27;
      char v14 = (void **)v26[0];
      sub_2CA1C(__p, v28[36]);
      uint64_t v15 = v26;
      if (v13 < 0) {
        uint64_t v15 = v14;
      }
      if (v25 >= 0) {
        unint64_t v16 = __p;
      }
      else {
        unint64_t v16 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      __int16 v33 = 1024;
      int v34 = 1247;
      __int16 v35 = 2080;
      int v36 = v15;
      __int16 v37 = 2080;
      uint64_t v38 = v16;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Culling route connection because there already is an active port for given category. Source port type = '%s', Destination port type = '%s'",  buf,  0x26u);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
      if (v27 < 0) {
        operator delete(v26[0]);
      }
    }

    uint64_t v4 = 1LL;
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  unint64_t v17 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      unint64_t v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }

  uint64_t v20 = v31;
  if (v31)
  {
    uint64_t v21 = (unint64_t *)&v31->__shared_owners_;
    do
      unint64_t v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }

  return v4;
}

void sub_1272E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  if (v18 < 0) {
    operator delete(v17);
  }
  sub_7A768((uint64_t)&a15);
  sub_7A768((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_127330(uint64_t *a1)
{
  if ((((*(uint64_t (**)(uint64_t))(*(void *)v26 + 160LL))(v26) & 1) != 0
     || (*(_WORD *)(v26 + 184) & 0x400) != 0 && (*(unsigned int (**)(uint64_t))(*(void *)v26 + 408LL))(v26))
    && (*(unsigned int (**)(uint64_t))(*(void *)v26 + 400LL))(v26) != 2)
  {
    uint64_t v2 = 0LL;
  }

  else
  {
    uint64_t v3 = sub_138E8(8);
    uint64_t v4 = sub_138E8(34);
    char v5 = 0;
    uint64_t v6 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v7 = *(void *)(v3 + 8);
    while (1)
    {
      uint64_t v8 = *(int *)&buf[4 * v6];
      char v9 = v5;
      if (((v7 & v8) != 0) != ((*(void *)(v4 + 8) & v8) != 0)) {
        break;
      }
      char v5 = 1;
      uint64_t v6 = 1LL;
      if ((v9 & 1) != 0) {
        goto LABEL_12;
      }
    }

    if ((v7 & v8) == 0) {
      uint64_t v3 = v4;
    }
LABEL_12:
    uint64_t v10 = *(os_log_s **)v3;
    if (v10 && os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      sub_2CA1C(v24, *(unsigned int *)(v28 + 144));
      int v11 = v25;
      uint64_t v12 = (void **)v24[0];
      sub_2CA1C(__p, *(unsigned int *)(v26 + 144));
      int v13 = v24;
      if (v11 < 0) {
        int v13 = v12;
      }
      if (v23 >= 0) {
        char v14 = __p;
      }
      else {
        char v14 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      __int16 v31 = 1024;
      int v32 = 1196;
      __int16 v33 = 2080;
      int v34 = v13;
      __int16 v35 = 2080;
      int v36 = v14;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Culling route connection because port is not allowed for given category. Source port type = '%s', Dest ination port type = '%s'",  buf,  0x26u);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      if (v25 < 0) {
        operator delete(v24[0]);
      }
    }

    uint64_t v2 = 1LL;
  }

  uint64_t v15 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      unint64_t v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }

  int v18 = v29;
  if (v29)
  {
    unint64_t v19 = (unint64_t *)&v29->__shared_owners_;
    do
      unint64_t v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  return v2;
}

void sub_1275CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  if (v18 < 0) {
    operator delete(v17);
  }
  sub_7A768((uint64_t)&a15);
  sub_7A768((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void *sub_12761C()
{
  __n128 result = operator new(0x10uLL);
  void *result = &off_470B88;
  return result;
}

void sub_127640(uint64_t a1, void *a2)
{
  *a2 = &off_470B88;
}

uint64_t sub_127658()
{
  return 1LL;
}

uint64_t sub_127660(uint64_t a1, __int128 *a2)
{
  __int128 v3 = *a2;
  *(void *)a2 = 0LL;
  *((void *)a2 + 1) = 0LL;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return a1;
}

uint64_t sub_1276C4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 32)) {
    return *(void *)(a1 + 24);
  }
  uint64_t v2 = **(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 8LL) - v2;
  else {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  if (v4)
  {
    uint64_t v5 = 16 * v4;
    uint64_t v6 = v2 + 16 * v4;
    while ((sub_127F60((os_log_s *)(a1 + 16), v2) & 1) == 0)
    {
      v2 += 16LL;
      v5 -= 16LL;
      if (!v5)
      {
        uint64_t v2 = v6;
        break;
      }
    }
  }

  *(void *)(a1 + 24) = v2;
  *(_BYTE *)(a1 + 32) = 1;
  return v2;
}

uint64_t sub_12775C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  int v13 = v32;
  if (v32 == &v31)
  {
LABEL_22:
    uint64_t v24 = 0LL;
  }

  else
  {
    uint64_t v26 = a6;
    uint64_t v27 = a1;
    uint64_t v28 = a2;
    uint64_t v29 = a3;
    uint64_t v30 = a4;
    while (1)
    {
      char v14 = (std::__shared_weak_count *)v13[3];
      if (v14)
      {
        uint64_t v15 = std::__shared_weak_count::lock(v14);
        if (v15)
        {
          unint64_t v16 = v15;
          uint64_t v17 = v13[2];
          if (v17)
          {
            uint64_t v18 = *a5;
            uint64_t v19 = a5[1];
            if (*a5 == v19)
            {
              BOOL v6 = 0;
            }

            else
            {
              do
              {
                uint64_t v20 = *(void *)v18 + 16LL;
                uint64_t v21 = *(void *)(*(void *)v18 + 24LL);
                if (v20 == v21)
                {
                  BOOL v6 = 0;
                }

                else
                {
                  do
                  {
                    BOOL v6 = sub_1F6C84(v17, (void *)(v21 + 16));
                    if (v6) {
                      break;
                    }
                    uint64_t v21 = *(void *)(v21 + 8);
                  }

                  while (v20 != v21);
                }

                if (v6) {
                  break;
                }
                v18 += 8LL;
              }

              while (v18 != v19);
            }
          }

          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            unint64_t v23 = __ldaxr(p_shared_owners);
          while (__stlxr(v23 - 1, p_shared_owners));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }

          if (v17 != 0 && v6) {
            break;
          }
        }
      }

      int v13 = (uint64_t *)v13[1];
      if (v13 == &v31) {
        goto LABEL_22;
      }
    }

    uint64_t v24 = sub_79914(*(_DWORD *)(v26 + 144), v27, *(_DWORD *)(v27 + 32), v28, v29, v30);
  }

  sub_85B80(&v31);
  return v24;
}

void sub_1278D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

void *sub_1278E8(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v3 = sub_138E8(42);
  if ((*(_BYTE *)(v3 + 8) & 1) != 0)
  {
    uint64_t v4 = *(os_log_s **)v3;
    if (*(void *)v3)
    {
      if (os_log_type_enabled(*(os_log_t *)v3, OS_LOG_TYPE_DEBUG))
      {
        int v6 = 136315650;
        uint64_t v7 = "SignpostUtilities.h";
        __int16 v8 = 1024;
        int v9 = 67;
        __int16 v10 = 2080;
        int v11 = "kBuildAlternateRoutesAndActivateForLastInWins";
        _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Starting measurement for signpost %s",  (uint8_t *)&v6,  0x1Cu);
      }
    }
  }

  return a1;
}

os_signpost_id_t *sub_1279C8(os_signpost_id_t *a1)
{
  uint64_t v2 = sub_138E8(42);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    uint64_t v3 = *(os_log_s **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v8 = 136315650;
        int v9 = "SignpostUtilities.h";
        __int16 v10 = 1024;
        int v11 = 67;
        __int16 v12 = 2080;
        int v13 = "kBuildAlternateRoutesAndActivateForLastInWins";
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Ending measurement for signpost %s",  (uint8_t *)&v8,  0x1Cu);
      }
    }
  }

  if (*a1)
  {
    unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_493908);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
    {
      qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_493908);
    }

    os_signpost_id_t v5 = *a1;
    if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      int v6 = (os_log_s *)qword_493900;
      if (os_signpost_enabled((os_log_t)qword_493900))
      {
        LOWORD(v8) = 0;
        _os_signpost_emit_with_name_impl( &dword_0,  v6,  OS_SIGNPOST_INTERVAL_END,  v5,  "VA_BuildAlternateRoutesAndActivateForLastInWins",  (const char *)&unk_420CC6,  (uint8_t *)&v8,  2u);
      }
    }
  }

  return a1;
}

void sub_127B54(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

uint64_t sub_127B60(os_log_s *a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3)
  {
    os_signpost_id_t v5 = std::__shared_weak_count::lock(v3);
    uint64_t v31 = v5;
    if (v5)
    {
      int v6 = v5;
      uint64_t v7 = *(_DWORD **)a2;
      uint64_t v30 = v7;
      if (v7)
      {
        if ((*(unsigned int (**)(_DWORD *))(*(void *)v7 + 152LL))(v7)
          && ((*(uint64_t (**)(_DWORD *))(*(void *)v7 + 160LL))(v7) & 1) != 0)
        {
          uint64_t v8 = *(void *)(*(void *)a1 + 8LL);
          if (!v8) {
            goto LABEL_17;
          }
          unsigned int v9 = v7[36];
          uint64_t v10 = *(void *)a1 + 8LL;
          do
          {
            unsigned int v11 = *(_DWORD *)(v8 + 28);
            BOOL v12 = v11 >= v9;
            if (v11 >= v9) {
              int v13 = (uint64_t *)v8;
            }
            else {
              int v13 = (uint64_t *)(v8 + 8);
            }
            if (v12) {
              uint64_t v10 = v8;
            }
            uint64_t v8 = *v13;
          }

          while (*v13);
          if (v10 == *(void *)a1 + 8LL || v9 < *(_DWORD *)(v10 + 28))
          {
LABEL_17:
            LOBYTE(a1) = 1;
LABEL_28:
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              unint64_t v20 = __ldaxr(p_shared_owners);
            while (__stlxr(v20 - 1, p_shared_owners));
            if (v20) {
              return a1 & 1;
            }
            goto LABEL_35;
          }

          uint64_t v26 = sub_138E8(8);
          if ((*(_BYTE *)(v26 + 8) & 1) != 0)
          {
            a1 = *(os_log_s **)v26;
            if (!*(void *)v26) {
              goto LABEL_28;
            }
            if (os_log_type_enabled(*(os_log_t *)v26, OS_LOG_TYPE_DEBUG))
            {
              sub_2CA1C(__p, v7[36]);
              uint64_t v27 = v29 >= 0 ? __p : (void **)__p[0];
              *(_DWORD *)buf = 136315650;
              __int16 v33 = "RouteUtilities.h";
              __int16 v34 = 1024;
              int v35 = 621;
              __int16 v36 = 2080;
              __int16 v37 = v27;
              _os_log_impl( &dword_0,  a1,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Disallowed iterator position: port's type (%s) is disallowed.",  buf,  0x1Cu);
              if (v29 < 0) {
                operator delete(__p[0]);
              }
            }
          }
        }

        else
        {
          uint64_t v14 = sub_138E8(8);
          if ((*(_BYTE *)(v14 + 8) & 1) != 0)
          {
            a1 = *(os_log_s **)v14;
            if (!*(void *)v14) {
              goto LABEL_28;
            }
            if (os_log_type_enabled(*(os_log_t *)v14, OS_LOG_TYPE_DEBUG))
            {
              int v15 = (*(uint64_t (**)(_DWORD *))(*(void *)v7 + 152LL))(v7);
              int v16 = (*(uint64_t (**)(_DWORD *))(*(void *)v7 + 160LL))(v7);
              uint64_t v17 = "not connected";
              if (v15) {
                uint64_t v17 = "connected";
              }
              __int16 v33 = "RouteUtilities.h";
              __int16 v34 = 1024;
              int v35 = 613;
              *(_DWORD *)buf = 136315906;
              __int16 v36 = 2080;
              __int16 v37 = (void *)v17;
              if (v16) {
                uint64_t v18 = "routable";
              }
              else {
                uint64_t v18 = "not routable";
              }
              __int16 v38 = 2080;
              int v39 = v18;
              _os_log_impl( &dword_0,  a1,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Disallowed iterator position: port is %s and %s.",  buf,  0x26u);
            }
          }
        }

        LOBYTE(a1) = 0;
        goto LABEL_28;
      }

      uint64_t v21 = (unint64_t *)&v5->__shared_owners_;
      do
        unint64_t v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
LABEL_35:
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        if (v7) {
          return a1 & 1;
        }
      }
    }
  }

  uint64_t v23 = sub_138E8(8);
  if ((*(_BYTE *)(v23 + 8) & 1) != 0)
  {
    uint64_t v24 = *(os_log_s **)v23;
    if (*(void *)v23)
    {
      if (os_log_type_enabled(*(os_log_t *)v23, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        __int16 v33 = "RouteUtilities.h";
        __int16 v34 = 1024;
        int v35 = 629;
        _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Disallowed iterator position: port has expired.",  buf,  0x12u);
      }
    }
  }

  LOBYTE(a1) = 0;
  return a1 & 1;
}

void sub_127EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t *sub_127EE0(uint64_t *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = *a1 + 16;
  *a1 = v3;
  uint64_t v4 = **(void **)v2;
  else {
    uint64_t v5 = *(void *)(v2 + 8);
  }
  uint64_t v6 = v4 + 16 * v5;
  if (v3 != v6)
  {
    uint64_t v7 = (os_log_s *)(v2 + 16);
    while ((sub_127F60(v7, v3) & 1) == 0)
    {
      v3 += 16LL;
      if (v3 == v6)
      {
        uint64_t v3 = v6;
        break;
      }
    }
  }

  *a1 = v3;
  return a1;
}

uint64_t sub_127F60(os_log_s *a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    uint64_t v31 = v5;
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(_DWORD **)a2;
      uint64_t v30 = v7;
      if (v7)
      {
        if ((*(unsigned int (**)(_DWORD *))(*(void *)v7 + 152LL))(v7)
          && ((*(uint64_t (**)(_DWORD *))(*(void *)v7 + 160LL))(v7) & 1) != 0)
        {
          uint64_t v8 = *(void *)(*(void *)a1 + 8LL);
          if (!v8) {
            goto LABEL_17;
          }
          unsigned int v9 = v7[36];
          uint64_t v10 = *(void *)a1 + 8LL;
          do
          {
            unsigned int v11 = *(_DWORD *)(v8 + 28);
            BOOL v12 = v11 >= v9;
            if (v11 >= v9) {
              int v13 = (uint64_t *)v8;
            }
            else {
              int v13 = (uint64_t *)(v8 + 8);
            }
            if (v12) {
              uint64_t v10 = v8;
            }
            uint64_t v8 = *v13;
          }

          while (*v13);
          if (v10 == *(void *)a1 + 8LL || v9 < *(_DWORD *)(v10 + 28))
          {
LABEL_17:
            LOBYTE(a1) = 1;
LABEL_28:
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              unint64_t v20 = __ldaxr(p_shared_owners);
            while (__stlxr(v20 - 1, p_shared_owners));
            if (v20) {
              return a1 & 1;
            }
            goto LABEL_35;
          }

          uint64_t v26 = sub_138E8(8);
          if ((*(_BYTE *)(v26 + 8) & 1) != 0)
          {
            a1 = *(os_log_s **)v26;
            if (!*(void *)v26) {
              goto LABEL_28;
            }
            if (os_log_type_enabled(*(os_log_t *)v26, OS_LOG_TYPE_DEBUG))
            {
              sub_2CA1C(__p, v7[36]);
              uint64_t v27 = v29 >= 0 ? __p : (void **)__p[0];
              *(_DWORD *)buf = 136315650;
              __int16 v33 = "RouteUtilities.h";
              __int16 v34 = 1024;
              int v35 = 621;
              __int16 v36 = 2080;
              __int16 v37 = v27;
              _os_log_impl( &dword_0,  a1,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Disallowed iterator position: port's type (%s) is disallowed.",  buf,  0x1Cu);
              if (v29 < 0) {
                operator delete(__p[0]);
              }
            }
          }
        }

        else
        {
          uint64_t v14 = sub_138E8(8);
          if ((*(_BYTE *)(v14 + 8) & 1) != 0)
          {
            a1 = *(os_log_s **)v14;
            if (!*(void *)v14) {
              goto LABEL_28;
            }
            if (os_log_type_enabled(*(os_log_t *)v14, OS_LOG_TYPE_DEBUG))
            {
              int v15 = (*(uint64_t (**)(_DWORD *))(*(void *)v7 + 152LL))(v7);
              int v16 = (*(uint64_t (**)(_DWORD *))(*(void *)v7 + 160LL))(v7);
              uint64_t v17 = "not connected";
              if (v15) {
                uint64_t v17 = "connected";
              }
              __int16 v33 = "RouteUtilities.h";
              __int16 v34 = 1024;
              int v35 = 613;
              *(_DWORD *)buf = 136315906;
              __int16 v36 = 2080;
              __int16 v37 = (void *)v17;
              if (v16) {
                uint64_t v18 = "routable";
              }
              else {
                uint64_t v18 = "not routable";
              }
              __int16 v38 = 2080;
              int v39 = v18;
              _os_log_impl( &dword_0,  a1,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Disallowed iterator position: port is %s and %s.",  buf,  0x26u);
            }
          }
        }

        LOBYTE(a1) = 0;
        goto LABEL_28;
      }

      uint64_t v21 = (unint64_t *)&v5->__shared_owners_;
      do
        unint64_t v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
LABEL_35:
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        if (v7) {
          return a1 & 1;
        }
      }
    }
  }

  uint64_t v23 = sub_138E8(8);
  if ((*(_BYTE *)(v23 + 8) & 1) != 0)
  {
    uint64_t v24 = *(os_log_s **)v23;
    if (*(void *)v23)
    {
      if (os_log_type_enabled(*(os_log_t *)v23, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        __int16 v33 = "RouteUtilities.h";
        __int16 v34 = 1024;
        int v35 = 629;
        _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Disallowed iterator position: port has expired.",  buf,  0x12u);
      }
    }
  }

  LOBYTE(a1) = 0;
  return a1 & 1;
}

void sub_1282B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

uint64_t sub_1282E0( uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, void *a8, uint64_t a9, const void ***a10, char a11, uint64_t *a12)
{
  *(void *)a1 = off_4709F0;
  *(_OWORD *)(a1 + 8) = *a3;
  sub_86550((uint64_t *)(a1 + 24), a4);
  sub_121604((uint64_t *)(a1 + 48), a5);
  sub_128AF0(a1 + 72, (void *)(a5 + 24));
  sub_86550((uint64_t *)(a1 + 96), a6);
  *(_DWORD *)(a1 + 120) = a7;
  sub_128B98(a1 + 128, a8);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)a9;
  if (*(char *)(a9 + 31) < 0)
  {
    sub_24054((_BYTE *)(a1 + 160), *(void **)(a9 + 8), *(void *)(a9 + 16));
  }

  else
  {
    __int128 v19 = *(_OWORD *)(a9 + 8);
    *(void *)(a1 + 176) = *(void *)(a9 + 24);
    *(_OWORD *)(a1 + 160) = v19;
  }

  *(void *)(a1 + 184) = *(void *)(a9 + 32);
  sub_54070((void *)(a1 + 192), a10);
  *(_BYTE *)(a1 + 360) = a11;
  *(void *)(a1 + 376) = 0LL;
  *(void *)(a1 + 384) = 0LL;
  *(void *)(a1 + 368) = 0LL;
  sub_128C40((void *)(a1 + 368), *a12, a12[1], 0x6FB586FB586FB587LL * ((a12[1] - *a12) >> 3));
  *(void *)(a1 + 408) = 0LL;
  *(void *)(a1 + 416) = 0LL;
  *(void *)(a1 + 392) = a2;
  *(void *)(a1 + 400) = a1 + 408;
  __int128 v21 = *a3;
  char v22 = 0;
  char v23 = 0;
  sub_71B98((uint64_t **)(a1 + 400), (uint64_t)&v21);
  if (*(_DWORD *)(a1 + 120) == 1684366192)
  {
    __int128 v21 = *a3;
    char v22 = 0;
    char v23 = 0;
    sub_71C38((uint64_t **)(a1 + 400), 1986291305LL, (uint64_t)&v21);
  }

  return a1;
}

void sub_128490(_Unwind_Exception *a1)
{
}

void sub_12850C()
{
}

void sub_128514()
{
}

void sub_128524()
{
}

void sub_128538(uint64_t a1)
{
  uint64_t v1 = (void *)sub_72948(a1);
  operator delete(v1);
}

double sub_12854C@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a2[1];
  if (*a2 == v6)
  {
    uint64_t v7 = *a2;
  }

  else
  {
    uint64_t v7 = *a2;
    while (**(_DWORD **)v7 != 1986291046)
    {
      v7 += 8LL;
      if (v7 == v6) {
        goto LABEL_5;
      }
    }
  }

  if (v7 == v6)
  {
LABEL_5:
    uint64_t v8 = (os_log_t *)sub_138E8(13);
    unsigned int v9 = *v8;
    if (*v8)
    {
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int v44 = 136315394;
        *(void *)&v44[4] = "RoutingManager.cpp";
        *(_WORD *)&v44[12] = 1024;
        *(_DWORD *)&v44[14] = 1871;
        _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to locate a concrete route for device type kVirtualAudioDev iceTypeDefault.",  v44,  0x12u);
      }
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error( exception,  "Unable to locate a concrete route for device type kVirtualAudioDeviceTypeDefault.");
  }

  if ((unint64_t)(v6 - *a2) >= 9)
  {
    uint64_t v11 = sub_138E8(8);
    if ((*(_BYTE *)(v11 + 8) & 1) != 0)
    {
      BOOL v12 = *(os_log_s **)v11;
      if (*(void *)v11)
      {
        if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v13 = (a2[1] - *a2) >> 3;
          *(_DWORD *)int v44 = 136315650;
          *(void *)&v44[4] = "RoutingManager.cpp";
          *(_WORD *)&v44[12] = 1024;
          *(_DWORD *)&v44[14] = 1873;
          __int16 v45 = 2048;
          uint64_t v46 = v13;
          _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Located concrete route in a %lu item concrete route pointer list.",  v44,  0x1Cu);
        }
      }
    }
  }

  if (*(void *)(*(void *)v7 + 32LL) != 1LL)
  {
    int v35 = (os_log_t *)sub_138E8(13);
    __int16 v36 = *v35;
    if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int v44 = 136315394;
      *(void *)&v44[4] = "RoutingManager.cpp";
      *(_WORD *)&v44[12] = 1024;
      *(_DWORD *)&v44[14] = 1876;
      _os_log_impl(&dword_0, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v44, 0x12u);
    }

    __int16 v37 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v37, "Precondition failure.");
  }

  sub_B8CBC((uint64_t *)v44, (uint64_t *)(*(void *)(*(void *)v7 + 24LL) + 16LL), "", 1877);
  uint64_t v14 = *(std::__shared_weak_count **)&v44[8];
  int v15 = *(_DWORD *)(*(void *)v44 + 144LL);
  if (*(void *)&v44[8])
  {
    int v16 = (unint64_t *)(*(void *)&v44[8] + 8LL);
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }

  if (v15 != 1885433888)
  {
    __int16 v38 = (os_log_t *)sub_138E8(13);
    int v39 = *v38;
    if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int v44 = 136315394;
      *(void *)&v44[4] = "RoutingManager.cpp";
      *(_WORD *)&v44[12] = 1024;
      *(_DWORD *)&v44[14] = 1878;
      _os_log_impl(&dword_0, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v44, 0x12u);
    }

    os_signpost_id_t v40 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v40, "Precondition failure.");
  }

  sub_B8CBC((uint64_t *)v44, (uint64_t *)(*(void *)(*(void *)v7 + 24LL) + 32LL), "", 1879);
  uint64_t v18 = *(std::__shared_weak_count **)&v44[8];
  int v19 = *(_DWORD *)(*(void *)v44 + 144LL);
  if (*(void *)&v44[8])
  {
    unint64_t v20 = (unint64_t *)(*(void *)&v44[8] + 8LL);
    do
      unint64_t v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

  if (v19 == 1885433888)
  {
    uint64_t v41 = (os_log_t *)sub_138E8(13);
    int v42 = *v41;
    if (*v41 && os_log_type_enabled(*v41, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int v44 = 136315394;
      *(void *)&v44[4] = "RoutingManager.cpp";
      *(_WORD *)&v44[12] = 1024;
      *(_DWORD *)&v44[14] = 1880;
      _os_log_impl(&dword_0, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v44, 0x12u);
    }

    std::string::size_type v43 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v43, "Precondition failure.");
  }

  char v22 = *(uint64_t **)(a1 + 424);
  uint64_t v23 = *(void *)(*(void *)v7 + 24LL);
  uint64_t v24 = *(std::__shared_weak_count **)(v23 + 40);
  if (v24)
  {
    char v25 = std::__shared_weak_count::lock(v24);
    uint64_t v26 = v25;
    if (v25)
    {
      uint64_t v27 = *(void *)(v23 + 32);
      p_shared_weak_owners = (unint64_t *)&v25->__shared_weak_owners_;
      do
        unint64_t v29 = __ldxr(p_shared_weak_owners);
      while (__stxr(v29 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        unint64_t v31 = __ldaxr(p_shared_owners);
      while (__stlxr(v31 - 1, p_shared_owners));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v26);
      }
    }

    else
    {
      uint64_t v27 = 0LL;
    }
  }

  else
  {
    uint64_t v27 = 0LL;
    uint64_t v26 = 0LL;
  }

  int v32 = operator new(0x20uLL);
  v32[2] = v27;
  v32[3] = v26;
  v32[1] = v22;
  uint64_t v33 = *v22;
  *int v32 = *v22;
  *(void *)(v33 + 8) = v32;
  *char v22 = (uint64_t)v32;
  ++v22[2];
  *(void *)a3 = off_4709D0;
  *(void *)&double result = 3LL;
  *(void *)(a3 + 8) = 3LL;
  *(void *)(a3 + 16) = 0LL;
  *(_BYTE *)(a3 + 24) = 0;
  *(_BYTE *)(a3 + 32) = 0;
  return result;
}

void sub_128AB4(_Unwind_Exception *a1)
{
}

uint64_t sub_128AF0(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0LL;
  uint64_t v3 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      sub_128CC0((uint64_t **)a1, v3, *((_DWORD *)v5 + 8), (_DWORD *)v5 + 8);
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }

        while (!v8);
      }

      uint64_t v5 = v7;
    }

    while (v7 != v4);
  }

  return a1;
}

void sub_128B84(_Unwind_Exception *a1)
{
}

uint64_t sub_128B98(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0LL;
  uint64_t v3 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      sub_103AA0((uint64_t **)a1, v3, v5 + 4, v5 + 4);
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }

        while (!v8);
      }

      uint64_t v5 = v7;
    }

    while (v7 != v4);
  }

  return a1;
}

void sub_128C2C(_Unwind_Exception *a1)
{
}

void *sub_128C40(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_117434(result, a4);
    double result = (void *)sub_1173A4(a2, a3, v6[1]);
    v6[1] = result;
  }

  return result;
}

void sub_128CA0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_8F2D4(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_128CC0(uint64_t **a1, uint64_t *a2, unsigned int a3, _DWORD *a4)
{
  double result = sub_1181CC(a1, a2, &v10, &v9, a3);
  if (!*result)
  {
    uint64_t v7 = (uint64_t **)result;
    BOOL v8 = operator new(0x40uLL);
    *((_DWORD *)v8 + 8) = *a4;
    sub_121604((uint64_t *)v8 + 5, (uint64_t)(a4 + 2));
    return sub_32C38(a1, (uint64_t)v10, v7, (uint64_t *)v8);
  }

  return result;
}

void sub_128D40(_Unwind_Exception *a1)
{
}

uint64_t sub_128D54(uint64_t a1)
{
  *(void *)a1 = off_470A20;
  return sub_72948(a1);
}

uint64_t sub_128D9C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_4709D0;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)operator new(0x30uLL);
    *(_OWORD *)uint64_t v5 = *(_OWORD *)v4;
    sub_116648(v5 + 2, v4 + 16);
    *((_BYTE *)v5 + 40) = *(_BYTE *)(v4 + 40);
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  *(void *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

void sub_128E1C(_Unwind_Exception *a1)
{
}

uint64_t sub_128E30(uint64_t result)
{
  if (!result)
  {
    uint64_t v1 = (os_log_t *)sub_138E8(13);
    uint64_t v2 = *v1;
    if (*v1)
    {
      if (os_log_type_enabled(*v1, OS_LOG_TYPE_ERROR))
      {
        int v4 = 136315394;
        uint64_t v5 = "RoutingManager.cpp";
        __int16 v6 = 1024;
        int v7 = 1425;
        _os_log_impl( &dword_0,  v2,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v4,  0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  return result;
}

void sub_128F20(_Unwind_Exception *exception_object)
{
}

uint64_t sub_128F3C( uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, void *a8, uint64_t a9, const void ***a10, char a11, uint64_t *a12, int a13, __int128 *a14, void *a15)
{
  uint64_t v16 = sub_1282E0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  *(void *)uint64_t v16 = off_470A20;
  *(_DWORD *)(v16 + 424) = a13;
  sub_C590C((_BYTE *)(v16 + 432), a14);
  *(void *)(a1 + 464) = *a15;
  return a1;
}

void sub_128FB8(_Unwind_Exception *a1)
{
}

uint64_t **sub_128FCC(uint64_t **result, uint64_t a2)
{
  result[1] = 0LL;
  uint64_t v2 = result + 1;
  result[2] = 0LL;
  uint64_t *result = (uint64_t *)(result + 1);
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v3 = a2 + 8;
  uint64_t v4 = v5;
  if (v5)
  {
    __int16 v6 = result;
    uint64_t v7 = v3;
    do
    {
      unsigned int v8 = *(_DWORD *)(v4 + 32);
      BOOL v9 = v8 >= 0x63736176;
      if (v8 >= 0x63736176) {
        uint64_t v10 = (uint64_t *)v4;
      }
      else {
        uint64_t v10 = (uint64_t *)(v4 + 8);
      }
      if (v9) {
        uint64_t v7 = v4;
      }
      uint64_t v4 = *v10;
    }

    while (*v10);
    if (v7 != v3 && *(_DWORD *)(v7 + 32) < 0x63736177u)
    {
      uint64_t v11 = v7 + 40;
      uint64_t v12 = *(void *)(v7 + 48);
      if (v12 != v7 + 40)
      {
        uint64_t v13 = *(uint64_t **)(v7 + 56);
        do
        {
          double result = (uint64_t **)sub_54FA4(v12 + 16, 0x696D646663736176uLL);
          if ((result & 1) != 0)
          {
            for (uint64_t i = *(void *)(v12 + 24); i != v12 + 16; uint64_t i = *(void *)(i + 8))
            {
              unsigned int v15 = *(_DWORD *)(i + 20);
              unsigned int v24 = v15;
              uint64_t v16 = *v2;
              if (*v2)
              {
                unint64_t v17 = v2;
                do
                {
                  unsigned int v18 = *(_DWORD *)(v16 + 32);
                  BOOL v19 = v18 >= v15;
                  if (v18 >= v15) {
                    unint64_t v20 = (uint64_t *)v16;
                  }
                  else {
                    unint64_t v20 = (uint64_t *)(v16 + 8);
                  }
                  if (v19) {
                    unint64_t v17 = (void *)v16;
                  }
                  uint64_t v16 = *v20;
                }

                while (*v20);
                if (v17 != v2 && v15 >= *((_DWORD *)v17 + 8))
                {
                  unint64_t v21 = (os_log_t *)sub_138E8(13);
                  char v22 = *v21;
                  if (*v21)
                  {
                    if (os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 136315394;
                      uint64_t v26 = "RoutingManager.cpp";
                      __int16 v27 = 1024;
                      int v28 = 883;
                      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unexpected port type duplication in connection list",  buf,  0x12u);
                    }
                  }

                  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(exception, "Unexpected port type duplication in connection list");
                }
              }

              double result = sub_12A68C(v6, v15, &v24);
              result[5] = v13;
              uint64_t v13 = (uint64_t *)((char *)v13 - 1);
            }
          }

          uint64_t v12 = *(void *)(v12 + 8);
        }

        while (v12 != v11);
      }
    }
  }

  return result;
}

void sub_1291DC(_Unwind_Exception *a1)
{
}

uint64_t *sub_12920C(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v4 = (uint64_t **)a1;
  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      unsigned int v8 = (uint64_t *)*a2;
      BOOL v9 = *(std::__shared_weak_count **)(*a2 + 24);
      v71[0] = *(void *)(*a2 + 16);
      v71[1] = (uint64_t)v9;
      if (v9)
      {
        p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
        do
          unint64_t v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
      }

      uint64_t v12 = *(std::__shared_weak_count **)(a1 + 24);
      v70[0] = *(void *)(a1 + 16);
      v70[1] = (uint64_t)v12;
      if (v12)
      {
        uint64_t v13 = (unint64_t *)&v12->__shared_weak_owners_;
        do
          unint64_t v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }

      BOOL v15 = sub_12A370(a4, v71, v70);
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      if (v9) {
        std::__shared_weak_count::__release_weak(v9);
      }
      if (v15)
      {
        uint64_t v16 = *v8;
        *(void *)(v16 + 8) = v8[1];
        *(void *)v8[1] = v16;
        unint64_t v17 = *v4;
        v17[1] = (uint64_t)v8;
        uint64_t *v8 = (uint64_t)v17;
        void *v4 = v8;
        v8[1] = (uint64_t)v4;
        return v8;
      }
    }

    else
    {
      unint64_t v19 = a3 >> 1;
      unint64_t v20 = (a3 >> 1) + 1;
      uint64_t v21 = a1;
      do
      {
        uint64_t v21 = *(void *)(v21 + 8);
        --v20;
      }

      while (v20 > 1);
      char v22 = (uint64_t **)sub_12920C(a1, v21, a3 >> 1, a4);
      uint64_t v4 = (uint64_t **)sub_12920C(v21, a2, a3 - v19, a4);
      uint64_t v23 = (std::__shared_weak_count *)v4[3];
      v69[0] = (uint64_t)v4[2];
      v69[1] = (uint64_t)v23;
      if (v23)
      {
        unsigned int v24 = (unint64_t *)&v23->__shared_weak_owners_;
        do
          unint64_t v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }

      uint64_t v26 = (std::__shared_weak_count *)v22[3];
      v68[0] = (uint64_t)v22[2];
      v68[1] = (uint64_t)v26;
      if (v26)
      {
        __int16 v27 = (unint64_t *)&v26->__shared_weak_owners_;
        do
          unint64_t v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }

      BOOL v29 = sub_12A370(a4, v69, v68);
      if (v26) {
        std::__shared_weak_count::__release_weak(v26);
      }
      if (v23) {
        std::__shared_weak_count::__release_weak(v23);
      }
      if (v29)
      {
        for (uint64_t i = v4[1]; i != a2; uint64_t i = (uint64_t *)i[1])
        {
          unint64_t v31 = (std::__shared_weak_count *)i[3];
          v67[0] = i[2];
          v67[1] = (uint64_t)v31;
          if (v31)
          {
            int v32 = (unint64_t *)&v31->__shared_weak_owners_;
            do
              unint64_t v33 = __ldxr(v32);
            while (__stxr(v33 + 1, v32));
          }

          __int16 v34 = (std::__shared_weak_count *)v22[3];
          v66[0] = (uint64_t)v22[2];
          v66[1] = (uint64_t)v34;
          if (v34)
          {
            int v35 = (unint64_t *)&v34->__shared_weak_owners_;
            do
              unint64_t v36 = __ldxr(v35);
            while (__stxr(v36 + 1, v35));
          }

          BOOL v37 = sub_12A370(a4, v67, v66);
          if (v34) {
            std::__shared_weak_count::__release_weak(v34);
          }
          if (v31)
          {
            std::__shared_weak_count::__release_weak(v31);
            if (!v37) {
              goto LABEL_46;
            }
          }

          else if (!v37)
          {
            goto LABEL_46;
          }
        }

        uint64_t i = a2;
LABEL_46:
        uint64_t v39 = *i;
        os_signpost_id_t v40 = *v4;
        v40[1] = *(void *)(*i + 8);
        **(void **)(v39 + 8) = v40;
        uint64_t v41 = *v22;
        __int16 v38 = v22[1];
        v41[1] = (uint64_t)v4;
        void *v4 = v41;
        *char v22 = (uint64_t *)v39;
        *(void *)(v39 + 8) = v22;
      }

      else
      {
        __int16 v38 = v22[1];
        uint64_t i = (uint64_t *)v4;
        uint64_t v4 = v22;
      }

      if (v38 != i && i != a2)
      {
        int v42 = i;
        do
        {
          std::string::size_type v43 = (std::__shared_weak_count *)i[3];
          v65[0] = i[2];
          v65[1] = (uint64_t)v43;
          if (v43)
          {
            int v44 = (unint64_t *)&v43->__shared_weak_owners_;
            do
              unint64_t v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
          }

          uint64_t v46 = (std::__shared_weak_count *)v38[3];
          v64[0] = v38[2];
          v64[1] = (uint64_t)v46;
          if (v46)
          {
            int v47 = (unint64_t *)&v46->__shared_weak_owners_;
            do
              unint64_t v48 = __ldxr(v47);
            while (__stxr(v48 + 1, v47));
          }

          BOOL v49 = sub_12A370(a4, v65, v64);
          if (v46) {
            std::__shared_weak_count::__release_weak(v46);
          }
          if (v43) {
            std::__shared_weak_count::__release_weak(v43);
          }
          if (v49)
          {
            for (uint64_t j = (uint64_t *)i[1]; j != a2; uint64_t j = (uint64_t *)j[1])
            {
              char v51 = (std::__shared_weak_count *)j[3];
              v63[0] = j[2];
              v63[1] = (uint64_t)v51;
              if (v51)
              {
                BOOL v52 = (unint64_t *)&v51->__shared_weak_owners_;
                do
                  unint64_t v53 = __ldxr(v52);
                while (__stxr(v53 + 1, v52));
              }

              __int16 v54 = (std::__shared_weak_count *)v38[3];
              v62[0] = v38[2];
              v62[1] = (uint64_t)v54;
              if (v54)
              {
                int v55 = (unint64_t *)&v54->__shared_weak_owners_;
                do
                  unint64_t v56 = __ldxr(v55);
                while (__stxr(v56 + 1, v55));
              }

              BOOL v57 = sub_12A370(a4, v63, v62);
              if (v54) {
                std::__shared_weak_count::__release_weak(v54);
              }
              if (v51)
              {
                std::__shared_weak_count::__release_weak(v51);
                if (!v57) {
                  goto LABEL_78;
                }
              }

              else if (!v57)
              {
                goto LABEL_78;
              }
            }

            uint64_t j = a2;
LABEL_78:
            uint64_t v58 = *j;
            uint64_t v59 = *i;
            *(void *)(v59 + 8) = *(void *)(*j + 8);
            **(void **)(v58 + 8) = v59;
            if (v42 == i) {
              int v42 = j;
            }
            uint64_t v61 = *v38;
            __int16 v60 = (uint64_t *)v38[1];
            *(void *)(v61 + 8) = i;
            *uint64_t i = v61;
            *__int16 v38 = v58;
            *(void *)(v58 + 8) = v38;
            __int16 v38 = v60;
            uint64_t i = j;
          }

          else
          {
            __int16 v38 = (uint64_t *)v38[1];
          }
        }

        while (v38 != v42 && i != a2);
      }
    }
  }

  return (uint64_t *)v4;
}

void sub_129600(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_12964C(uint64_t *a1, uint64_t *a2, void *a3, uint64_t *a4)
{
  if (((*(uint64_t (**)(void))(qword_48F828 + 48))() & 1) == 0)
  {
    unint64_t v80 = (os_log_t *)sub_138E8(13);
    uint64_t v81 = *v80;
    if (*v80 && os_log_type_enabled(*v80, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5155;
      _os_log_impl(&dword_0, v81, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  unint64_t v83 = a1;
  a1[2] = 0LL;
  sub_EDD50(&v90, a3);
  __int16 v6 = v91;
  if (v91 == &v90) {
    goto LABEL_129;
  }
  unint64_t v85 = a2 + 63;
  do
  {
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6[2] + 152LL))(v6[2]);
    int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v6[2] + 160LL))(v6[2]);
    if (((v7 | v8 ^ 1) & 1) == 0)
    {
      BOOL v9 = (os_log_t *)sub_138E8(8);
      uint64_t v10 = *v9;
      if (*v9)
      {
        if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
        {
          sub_23FE8((uint64_t)&__p, (os_unfair_lock_t)(v6[2] + 8));
          p_p = &__p;
          if (v89 < 0) {
            p_p = __p;
          }
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5170;
          __int16 v93 = 2080;
          v94[0] = p_p;
          _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Inconsistent state - Port is routable but not connected : %s",  buf,  0x1Cu);
          if (v89 < 0) {
            operator delete(__p);
          }
        }
      }
    }

    uint64_t v12 = (os_log_t *)sub_138E8(8);
    uint64_t v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEBUG))
    {
      sub_23FE8((uint64_t)&__p, (os_unfair_lock_t)(v6[2] + 8));
      unint64_t v14 = &__p;
      if (v89 < 0) {
        unint64_t v14 = __p;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5172;
      __int16 v93 = 2080;
      v94[0] = v14;
      _os_log_impl(&dword_0, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d Port update: %s.", buf, 0x1Cu);
      if (v89 < 0) {
        operator delete(__p);
      }
    }

    int v15 = v7 & v8;
    if ((v7 & v8 & 1) == 0)
    {
      uint64_t v16 = v6[2];
      uint64_t v17 = v6[3];
      if (v17)
      {
        unsigned int v18 = (unint64_t *)(v17 + 16);
        do
          unint64_t v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }

      unint64_t v20 = operator new(0x20uLL);
      v20[2] = v16;
      void v20[3] = v17;
      uint64_t v21 = *a4;
      void *v20 = *a4;
      v20[1] = a4;
      *(void *)(v21 + 8) = v20;
      *a4 = (uint64_t)v20;
      ++a4[2];
    }

    if ((*(_WORD *)(v6[2] + 184) & 2) == 0) {
      goto LABEL_112;
    }
    uint64_t v23 = (void *)a2[63];
    char v22 = (void *)a2[64];
    if (v23 == v22)
    {
      int v44 = (void *)a2[63];
      goto LABEL_64;
    }

    do
    {
      unsigned int v24 = (std::__shared_weak_count *)v23[1];
      if (!v24)
      {
        uint64_t v26 = 0LL;
LABEL_33:
        uint64_t v27 = 0LL;
        goto LABEL_34;
      }

      unint64_t v25 = std::__shared_weak_count::lock(v24);
      uint64_t v26 = v25;
      if (!v25) {
        goto LABEL_33;
      }
      uint64_t v27 = *v23;
      p_shared_weak_owners = (unint64_t *)&v25->__shared_weak_owners_;
      do
        unint64_t v29 = __ldxr(p_shared_weak_owners);
      while (__stxr(v29 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        unint64_t v31 = __ldaxr(p_shared_owners);
      while (__stlxr(v31 - 1, p_shared_owners));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v26);
      }

void sub_129ED0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
}

void sub_129F68(uint64_t a1)
{
}

void sub_129F98(void *a1)
{
  if (a1)
  {
    sub_129F98(*a1);
    sub_129F98(a1[1]);
    sub_D62E0(a1 + 5);
    operator delete(a1);
  }

void sub_129FD8(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v8 = a2 - *a1;
  uint64_t v9 = v8 >> 4;
  unint64_t v11 = a1 + 2;
  unint64_t v10 = a1[2];
  if (v6 >= v10)
  {
    unint64_t v15 = ((uint64_t)(v6 - v7) >> 4) + 1;
    if (v15 >> 60) {
      sub_7A87C();
    }
    uint64_t v16 = v10 - v7;
    if (v16 >> 3 > v15) {
      unint64_t v15 = v16 >> 3;
    }
    else {
      unint64_t v17 = v15;
    }
    unint64_t v35 = v11;
    if (v17) {
      unint64_t v17 = (unint64_t)sub_7BE90(v17);
    }
    else {
      uint64_t v18 = 0LL;
    }
    unint64_t v19 = (_OWORD *)(v17 + 16 * v9);
    uint64_t v32 = (char *)v17;
    *(void *)&__int128 v33 = v19;
    *((void *)&v33 + 1) = v19;
    __int16 v34 = (char *)(v17 + 16 * v18);
    if (v9 == v18)
    {
      if (v8 < 1)
      {
        if (v7 == a2) {
          unint64_t v21 = 1LL;
        }
        else {
          unint64_t v21 = v8 >> 3;
        }
        BOOL v39 = v11;
        char v22 = (char *)sub_7BE90(v21);
        uint64_t v24 = v33;
        uint64_t v25 = *((void *)&v33 + 1) - v33;
        if (*((void *)&v33 + 1) == (void)v33)
        {
          int64x2_t v30 = vdupq_n_s64(v33);
          unint64_t v27 = (unint64_t)&v22[16 * (v21 >> 2)];
        }

        else
        {
          uint64_t v26 = v25 >> 4;
          unint64_t v27 = (unint64_t)&v22[16 * (v21 >> 2) + (v25 & 0xFFFFFFFFFFFFFFF0LL)];
          uint64_t v28 = 16 * v26;
          unint64_t v29 = &v22[16 * (v21 >> 2)];
          do
          {
            *(_OWORD *)unint64_t v29 = *(_OWORD *)v24;
            v29 += 16;
            *(void *)uint64_t v24 = 0LL;
            *(void *)(v24 + 8) = 0LL;
            v24 += 16LL;
            v28 -= 16LL;
          }

          while (v28);
          int64x2_t v30 = (int64x2_t)v33;
        }

        unint64_t v31 = v34;
        unint64_t v36 = v32;
        uint64_t v32 = v22;
        *(void *)&__int128 v33 = &v22[16 * (v21 >> 2)];
        int64x2_t v37 = v30;
        *((void *)&v33 + 1) = v27;
        __int16 v34 = &v22[16 * v23];
        __int16 v38 = v31;
        sub_121448((uint64_t)&v36);
        unint64_t v19 = (_OWORD *)*((void *)&v33 + 1);
      }

      else
      {
        unint64_t v20 = v9 + 2;
        if (v9 >= -1) {
          unint64_t v20 = v9 + 1;
        }
        v19 -= v20 >> 1;
        *(void *)&__int128 v33 = v19;
        *((void *)&v33 + 1) = v19;
      }
    }

    *unint64_t v19 = *a3;
    *(void *)a3 = 0LL;
    *((void *)a3 + 1) = 0LL;
    *((void *)&v33 + 1) += 16LL;
    sub_12A280(a1, &v32, (void *)a2);
    sub_121448((uint64_t)&v32);
  }

  else if (a2 == v6)
  {
    *(_OWORD *)a2 = *a3;
    *(void *)a3 = 0LL;
    *((void *)a3 + 1) = 0LL;
    a1[1] = a2 + 16;
  }

  else
  {
    sub_12A1F4((uint64_t)a1, a2, v6, (char *)(a2 + 16));
    uint64_t v12 = v7 + 16 * v9;
    __int128 v13 = *a3;
    *(void *)a3 = 0LL;
    *((void *)a3 + 1) = 0LL;
    unint64_t v14 = *(std::__shared_weak_count **)(v12 + 8);
    *(_OWORD *)uint64_t v12 = v13;
    if (v14) {
      std::__shared_weak_count::__release_weak(v14);
    }
  }

void sub_12A1E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_12A1F4(uint64_t a1, uint64_t a2, unint64_t a3, char *a4)
{
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = (char *)(a2 + v4 - a4);
  unint64_t v6 = v4;
  while ((unint64_t)v5 < a3)
  {
    *(_OWORD *)unint64_t v6 = *(_OWORD *)v5;
    v6 += 16;
    *(void *)uint64_t v5 = 0LL;
    *((void *)v5 + 1) = 0LL;
    v5 += 16;
  }

  *(void *)(a1 + 8) = v6;
  if (v4 != a4)
  {
    uint64_t v7 = (std::__shared_weak_count **)(v4 - 8);
    uint64_t v8 = 16 * ((v4 - a4) >> 4);
    uint64_t v9 = a2 - 16;
    do
    {
      unint64_t v10 = (void *)(v9 + v8);
      __int128 v11 = *(_OWORD *)(v9 + v8);
      void *v10 = 0LL;
      v10[1] = 0LL;
      uint64_t v12 = *v7;
      *(_OWORD *)(v7 - 1) = v11;
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      v7 -= 2;
      v8 -= 16LL;
    }

    while (v8);
  }

uint64_t sub_12A280(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1 + 2;
  a2[1] = sub_1214A4((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  uint64_t v8 = a1[1];
  uint64_t v9 = (_OWORD *)a2[2];
  uint64_t v16 = v9;
  unint64_t v17 = v9;
  v14[0] = v7;
  v14[1] = &v16;
  v14[2] = &v17;
  if ((void *)v8 != v3)
  {
    do
    {
      *v9++ = *(_OWORD *)v3;
      void *v3 = 0LL;
      v3[1] = 0LL;
      v3 += 2;
    }

    while (v3 != (void *)v8);
    unint64_t v17 = v9;
  }

  char v15 = 1;
  sub_1253E0((uint64_t)v14);
  a2[2] = v9;
  uint64_t v10 = *a1;
  *a1 = a2[1];
  a2[1] = v10;
  uint64_t v11 = a1[1];
  a1[1] = a2[2];
  a2[2] = v11;
  uint64_t v12 = a1[2];
  a1[2] = a2[3];
  a2[3] = v12;
  *a2 = a2[1];
  return v6;
}

BOOL sub_12A370(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = *a1;
  uint64_t v29 = 0LL;
  int64x2_t v30 = 0LL;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v6);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *a2;
      p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
      do
        unint64_t v12 = __ldxr(p_shared_weak_owners);
      while (__stxr(v12 + 1, p_shared_weak_owners));
      uint64_t v29 = v10;
      int64x2_t v30 = v8;
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        unint64_t v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
      }
    }

    else
    {
      uint64_t v29 = 0LL;
      int64x2_t v30 = 0LL;
    }
  }

  unint64_t v15 = sub_12A4F8(v5, &v29);
  uint64_t v16 = *a1;
  uint64_t v27 = 0LL;
  uint64_t v28 = 0LL;
  unint64_t v17 = (std::__shared_weak_count *)a3[1];
  if (v17)
  {
    uint64_t v18 = std::__shared_weak_count::lock(v17);
    if (v18)
    {
      unint64_t v19 = v18;
      uint64_t v20 = *a3;
      unint64_t v21 = (unint64_t *)&v18->__shared_weak_owners_;
      do
        unint64_t v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      uint64_t v27 = v20;
      uint64_t v28 = v18;
      uint64_t v23 = (unint64_t *)&v18->__shared_owners_;
      do
        unint64_t v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v19);
      }
    }

    else
    {
      uint64_t v27 = 0LL;
      uint64_t v28 = 0LL;
    }
  }

  unint64_t v25 = sub_12A4F8(v16, &v27);
  if (v28) {
    std::__shared_weak_count::__release_weak(v28);
  }
  if (v30) {
    std::__shared_weak_count::__release_weak(v30);
  }
  return v15 < v25;
}

void sub_12A4CC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_weak(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_12A4F8(uint64_t a1, uint64_t *a2)
{
  if ((*(_WORD *)(v29 + 184) & 1) != 0)
  {
    sub_FA368(v26, v29);
    sub_9DCB8(&v27, v26);
    sub_85B80(v26);
    unint64_t v12 = v28;
    if (v28 == &v27) {
      goto LABEL_29;
    }
    while (1)
    {
      uint64_t v13 = v12[2];
      if ((*(_WORD *)(v13 + 184) & 1) == 0) {
        break;
      }
      unint64_t v12 = (uint64_t *)v12[1];
      if (v12 == &v27) {
        goto LABEL_29;
      }
    }

    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v15 = a1 + 8;
    uint64_t v14 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    unsigned int v17 = *(_DWORD *)(v13 + 144);
    uint64_t v18 = v15;
    do
    {
      unsigned int v19 = *(_DWORD *)(v14 + 32);
      BOOL v20 = v19 >= v17;
      if (v19 >= v17) {
        unint64_t v21 = (uint64_t *)v14;
      }
      else {
        unint64_t v21 = (uint64_t *)(v14 + 8);
      }
      if (v20) {
        uint64_t v18 = v14;
      }
      uint64_t v14 = *v21;
    }

    while (*v21);
    if (v18 == v15 || v17 < *(_DWORD *)(v18 + 32)) {
LABEL_29:
    }
      uint64_t v11 = 0LL;
    else {
      uint64_t v11 = *(void *)(v18 + 40);
    }
    sub_1BB88(&v27);
  }

  else
  {
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v4 = a1 + 8;
    uint64_t v3 = v5;
    if (!v5) {
      goto LABEL_13;
    }
    unsigned int v6 = *(_DWORD *)(v29 + 144);
    uint64_t v7 = v4;
    do
    {
      unsigned int v8 = *(_DWORD *)(v3 + 32);
      BOOL v9 = v8 >= v6;
      if (v8 >= v6) {
        uint64_t v10 = (uint64_t *)v3;
      }
      else {
        uint64_t v10 = (uint64_t *)(v3 + 8);
      }
      if (v9) {
        uint64_t v7 = v3;
      }
      uint64_t v3 = *v10;
    }

    while (*v10);
    if (v7 != v4 && v6 >= *(_DWORD *)(v7 + 32)) {
      uint64_t v11 = *(void *)(v7 + 40);
    }
    else {
LABEL_13:
    }
      uint64_t v11 = 0LL;
  }

  unint64_t v22 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      unint64_t v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }

  return v11;
}

void sub_12A668( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t **sub_12A68C(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  unsigned int v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        unsigned int v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        unsigned int v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }

  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = operator new(0x30uLL);
    v9[8] = *a3;
    *((void *)v9 + 5) = 0LL;
    sub_32C38(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }

  return v7;
}

uint64_t sub_12A734(uint64_t *a1, void **a2)
{
  int v4 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  sub_6DD4();
  uint64_t result = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 48))(&qword_48F828);
  if ((result & 1) == 0)
  {
    uint64_t v15 = (os_log_t *)sub_138E8(13);
    uint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315394;
      unsigned int v19 = "RoutingManager.cpp";
      __int16 v20 = 1024;
      int v21 = 1939;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to acquire routing mutex.",  (uint8_t *)&v18,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to acquire routing mutex.");
  }

  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  unsigned int v6 = *a2;
  uint64_t v9 = (void *)*v6;
  uint64_t v7 = v6 + 1;
  unsigned int v8 = v9;
  if (v9 != v7)
  {
    uint64_t v10 = 0LL;
    uint64_t v11 = a1;
    do
    {
      if (!*((_BYTE *)v8 + 128))
      {
        uint64_t result = (uint64_t)operator new(0x18uLL);
        *(_DWORD *)(result + 16) = *((_DWORD *)v8 + 8);
        *(void *)uint64_t result = v11;
        *(void *)(result + 8) = a1;
        v11[1] = result;
        *a1 = result;
        a1[2] = ++v10;
        uint64_t v11 = (uint64_t *)result;
      }

      unint64_t v12 = (void *)v8[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          unint64_t v12 = (void *)*v12;
        }

        while (v12);
      }

      else
      {
        do
        {
          uint64_t v13 = (void *)v8[2];
          BOOL v14 = *v13 == (void)v8;
          unsigned int v8 = v13;
        }

        while (!v14);
      }

      unsigned int v8 = v13;
    }

    while (v13 != v7);
  }

  if (v4) {
    return (*(uint64_t (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  }
  return result;
}

void sub_12A914(_Unwind_Exception *a1)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
  }
  _Unwind_Resume(a1);
}

void sub_12A970(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v341 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  sub_6DD4();
  if (((*(uint64_t (**)(uint64_t *))(qword_48F828 + 48))(&qword_48F828) & 1) == 0)
  {
    int v325 = (os_log_t *)sub_138E8(13);
    v326 = *v325;
    if (*v325 && os_log_type_enabled(*v325, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3442;
      _os_log_impl( &dword_0,  v326,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to acquire routing mutex.",  buf,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to acquire routing mutex.");
    v328 = (void (*)(void *))&std::runtime_error::~runtime_error;
LABEL_655:
    __cxa_throw(exception, v329, v328);
  }

  if (!a3[2])
  {
    uint64_t v330 = (os_log_t *)sub_138E8(13);
    uint64_t v331 = *v330;
    if (*v330 && os_log_type_enabled(*v330, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3444;
      _os_log_impl(&dword_0, v331, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error((std::logic_error *)exception, "Precondition failure.");
    v328 = (void (*)(void *))&std::logic_error::~logic_error;
    goto LABEL_655;
  }

  uint64_t v6 = sub_138E8(8);
  uint64_t v7 = sub_138E8(34);
  char v8 = 0;
  uint64_t v9 = 0LL;
  *(void *)buf = 0x100000002LL;
  uint64_t v10 = *(void *)(v6 + 8);
  while (1)
  {
    uint64_t v11 = *(int *)&buf[4 * v9];
    char v12 = v8;
    if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
      break;
    }
    char v8 = 1;
    uint64_t v9 = 1LL;
    if ((v12 & 1) != 0) {
      goto LABEL_9;
    }
  }

  if ((v10 & v11) == 0) {
    uint64_t v6 = v7;
  }
LABEL_9:
  uint64_t v13 = *(os_log_s **)v6;
  if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    sub_FD164((std::string *)__p, a3);
    BOOL v14 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3446;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&buf[20] = v14;
    _os_log_impl(&dword_0, v13, OS_LOG_TYPE_INFO, "%25s:%-5d Port update with port map %s.", buf, 0x1Cu);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }

  uint64_t v16 = a3 + 1;
  uint64_t v15 = a3[1];
  uint64_t v357 = a1;
  v348 = a3 + 1;
  if (v15)
  {
    unsigned int v17 = a3 + 1;
    uint64_t v18 = a3[1];
    do
    {
      unsigned int v19 = *(_DWORD *)(v18 + 32);
      BOOL v20 = v19 >= 0x64637275;
      if (v19 >= 0x64637275) {
        int v21 = (uint64_t *)v18;
      }
      else {
        int v21 = (uint64_t *)(v18 + 8);
      }
      if (v20) {
        unsigned int v17 = (void *)v18;
      }
      uint64_t v18 = *v21;
    }

    while (*v21);
    if (v17 == v16 || *((_DWORD *)v17 + 8) >= 0x64637276u) {
      goto LABEL_96;
    }
    unint64_t v22 = a3 + 1;
    uint64_t v23 = a3[1];
    do
    {
      unsigned int v24 = *(_DWORD *)(v23 + 32);
      BOOL v25 = v24 >= 0x64637275;
      if (v24 >= 0x64637275) {
        uint64_t v26 = (uint64_t *)v23;
      }
      else {
        uint64_t v26 = (uint64_t *)(v23 + 8);
      }
      if (v25) {
        unint64_t v22 = (void *)v23;
      }
      uint64_t v23 = *v26;
    }

    while (*v26);
    if (v22 == v16 || *((_DWORD *)v22 + 8) >= 0x64637276u)
    {
LABEL_96:
      *(void *)buf = buf;
      *(void *)&buf[8] = buf;
      *(void *)&_DWORD buf[16] = 0LL;
      if (v15)
      {
        BOOL v52 = v16;
        uint64_t v53 = v15;
        do
        {
          unsigned int v54 = *(_DWORD *)(v53 + 32);
          BOOL v55 = v54 >= 0x66637275;
          if (v54 >= 0x66637275) {
            unsigned int v56 = (uint64_t *)v53;
          }
          else {
            unsigned int v56 = (uint64_t *)(v53 + 8);
          }
          if (v55) {
            BOOL v52 = (void *)v53;
          }
          uint64_t v53 = *v56;
        }

        while (*v56);
        if (v52 != v16 && *((_DWORD *)v52 + 8) < 0x66637276u)
        {
          sub_1357F0(buf, (uint64_t *)buf, v52[6], (uint64_t)(v52 + 5));
          uint64_t v15 = *v16;
        }

        if (v15)
        {
          BOOL v57 = v16;
          do
          {
            unsigned int v58 = *(_DWORD *)(v15 + 32);
            BOOL v59 = v58 >= 0x6E637275;
            if (v58 >= 0x6E637275) {
              __int16 v60 = (uint64_t *)v15;
            }
            else {
              __int16 v60 = (uint64_t *)(v15 + 8);
            }
            if (v59) {
              BOOL v57 = (void *)v15;
            }
            uint64_t v15 = *v60;
          }

          while (*v60);
          if (v57 != v16 && *((_DWORD *)v57 + 8) < 0x6E637276u) {
            sub_1357F0(buf, (uint64_t *)buf, v57[6], (uint64_t)(v57 + 5));
          }
        }
      }

      goto LABEL_120;
    }

    sub_EE1E8((uint64_t *)__p, v22 + 5);
    int v27 = sub_133C98(a2);
    int v28 = sub_133B00(a2);
    BOOL v29 = 1LL;
    if (v28 > 1668313714)
    {
      if (v28 > 1668576376)
      {
        if (v28 != 1668576377 && v28 != 1668703084) {
          goto LABEL_70;
        }
        goto LABEL_66;
      }

      if (v28 != 1668313715)
      {
        if (v28 != 1668505974) {
          goto LABEL_70;
        }
        goto LABEL_45;
      }
    }

    else
    {
      if (v28 <= 1668309361)
      {
        if (v28 != 1668182896)
        {
          unsigned __int16 v30 = 17011;
          goto LABEL_49;
        }

LABEL_189:
  memset(__p, 0, 24);
  uint64_t v71 = a2;
  int v97 = *(uint64_t **)(a2 + 504);
  unint64_t v98 = *(uint64_t **)(a2 + 512);
  if (v97 == v98) {
    goto LABEL_232;
  }
  do
  {
    sub_B8CBC((uint64_t *)buf, v97, "", 1317);
    BOOL v99 = (*(unsigned int (**)(void))(**(void **)buf + 152LL))(*(void *)buf)
    unint64_t v100 = *(std::__shared_weak_count **)&buf[8];
    if (!*(void *)&buf[8]) {
      goto LABEL_198;
    }
    BOOL v101 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
      if (!v99) {
        goto LABEL_215;
      }
    }

    else
    {
LABEL_198:
      if (!v99) {
        goto LABEL_215;
      }
    }

    uint64_t v103 = *(void *)&__p[8];
    if (*(void *)&__p[8] >= *(void *)&__p[16])
    {
      uint64_t v108 = (uint64_t)(*(void *)&__p[8] - *(void *)__p) >> 4;
      unint64_t v109 = v108 + 1;
      uint64_t v110 = *(void *)&__p[16] - *(void *)__p;
      else {
        unint64_t v111 = v109;
      }
      *(void *)&_BYTE buf[32] = &__p[16];
      BOOL v112 = (char *)sub_7BE90(v111);
      int v113 = &v112[16 * v108];
      *(void *)buf = v112;
      *(void *)&buf[8] = v113;
      *(void *)&buf[24] = &v112[16 * v114];
      __int128 v115 = *(_OWORD *)v97;
      *(_OWORD *)int v113 = *(_OWORD *)v97;
      if (*((void *)&v115 + 1))
      {
        int v116 = (unint64_t *)(*((void *)&v115 + 1) + 16LL);
        do
          unint64_t v117 = __ldxr(v116);
        while (__stxr(v117 + 1, v116));
      }

      *(void *)&_DWORD buf[16] = v113 + 16;
      sub_1213D4((uint64_t *)__p, buf);
      uint64_t v107 = *(void *)&__p[8];
      sub_121448((uint64_t)buf);
    }

    else
    {
      **(void **)&__p[8] = *v97;
      uint64_t v104 = v97[1];
      *(void *)(v103 + 8) = v104;
      if (v104)
      {
        unint64_t v105 = (unint64_t *)(v104 + 16);
        do
          unint64_t v106 = __ldxr(v105);
        while (__stxr(v106 + 1, v105));
      }

      uint64_t v107 = v103 + 16;
    }

    *(void *)&__p[8] = v107;
LABEL_215:
    v97 += 2;
  }

  while (v97 != v98);
  std::string::size_type v118 = *(uint64_t **)__p;
  unint64_t v119 = *(uint64_t **)&__p[8];
  uint64_t v71 = a2;
  if (*(void *)__p != *(void *)&__p[8])
  {
    *(void *)buf = buf;
    *(void *)&buf[8] = buf;
    *(void *)&_DWORD buf[16] = 0LL;
    v358 = (uint64_t **)&v358;
    v359 = &v358;
    uint64_t v360 = 0LL;
    do
    {
      sub_85C34((uint64_t *)buf, *v118, v118[1]);
      v118 += 2;
    }

    while (v118 != v119);
    uint64_t v120 = sub_138E8(8);
    uint64_t v121 = sub_138E8(34);
    char v122 = 0;
    uint64_t v123 = 0LL;
    v409[0].__r_.__value_.__r.__words[0] = 0x100000002LL;
    uint64_t v124 = *(void *)(v120 + 8);
    while (1)
    {
      uint64_t v125 = *((int *)&v409[0].__r_.__value_.__l.__data_ + v123);
      char v126 = v122;
      if (((v124 & v125) != 0) != ((*(void *)(v121 + 8) & v125) != 0)) {
        break;
      }
      char v122 = 1;
      uint64_t v123 = 1LL;
      if ((v126 & 1) != 0) {
        goto LABEL_228;
      }
    }

    if ((v124 & v125) == 0) {
      uint64_t v120 = v121;
    }
LABEL_228:
    uint64_t v127 = *(os_log_s **)v120;
    if (v127 && os_log_type_enabled(v127, OS_LOG_TYPE_INFO))
    {
      LODWORD(v409[0].__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v409[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"RoutingManager.cpp";
      WORD2(v409[0].__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&v409[0].__r_.__value_.__r.__words[1] + 6) = 3796;
      _os_log_impl( &dword_0,  v127,  OS_LOG_TYPE_INFO,  "%25s:%-5d Updating cached port stack for in-ear airpods",  (uint8_t *)v409,  0x12u);
    }

    sub_12964C((uint64_t *)v409, (uint64_t *)a2, buf, (uint64_t *)&v358);
    sub_85B80((uint64_t *)v409);
    sub_85B80((uint64_t *)&v358);
    sub_85B80((uint64_t *)buf);
  }

  *a1 = LODWORD(v87) | ((unint64_t)v88 << 32);
  a1[1] = LODWORD(v108) | ((unint64_t)v109 << 32);
  a1[2] = v73;
  a1[3] = v83;
  a1[4] = v85;
  a1[5] = 0LL;
}

        BOOL v135 = atomic_load((unsigned __int8 *)&qword_48FA98);
        if ((v135 & 1) == 0 && __cxa_guard_acquire(&qword_48FA98))
        {
          LODWORD(v283[0]) = 20;
          LODWORD(v282.__vftable) = 40;
          char v312 = 41;
          *(_DWORD *)buf = 19;
          uint64_t v310 = 43;
          uint64_t v311 = 42;
          uint64_t v309 = 29;
          char v308 = 30;
          uint64_t v307 = 45;
          byte_48FA94 = sub_1BE2B8(buf, v283, &v282, &v312, &v311, &v310, &v309, &v308, &v307);
          __cxa_guard_release(&qword_48FA98);
        }

        if ((_DWORD)v14 == 1886613611
          && byte_48FA94
          && sub_1D72C0((_DWORD *)(a2 + 120))
          && !*(_BYTE *)(a2 + 156))
        {
          uint64_t v136 = operator new(0x38uLL);
          uint64_t v137 = v136;
          int v138 = v293;
          unsigned int v139 = v304;
          if (*((void *)&v304 + 1))
          {
            BOOL v140 = (unint64_t *)(*((void *)&v304 + 1) + 16LL);
            do
              std::string::size_type v141 = __ldxr(v140);
            while (__stxr(v141 + 1, v140));
            *uint64_t v136 = &off_4703D8;
            v136[1] = v138;
            *((_DWORD *)v136 + 4) = 1685287015;
            *(void *)((char *)v136 + 20) = 0x3F80000000000000LL;
            *((_OWORD *)v136 + 2) = v139;
            int v142 = (unint64_t *)(*((void *)&v139 + 1) + 16LL);
            do
              uint64_t v143 = __ldxr(v142);
            while (__stxr(v143 + 1, v142));
          }

          else
          {
            *uint64_t v136 = &off_4703D8;
            v136[1] = v138;
            *((_DWORD *)v136 + 4) = 1685287015;
            *(void *)((char *)v136 + 20) = 0x3F80000000000000LL;
            v136[4] = v139;
            v136[5] = 0LL;
          }

          *((_DWORD *)v136 + 12) = 1986358383;
          int v144 = operator new(0x18uLL);
          int v145 = *(void **)(a3 + 8);
          *int v144 = a3;
          v144[1] = v145;
          v144[2] = v137;
          *int v145 = v144;
          unint64_t v146 = *(void *)(a3 + 16) + 1LL;
          *(void *)(a3 + 8) = v144;
          *(void *)(a3 + 16) = v146;
          (*(void (**)(void *))(*v137 + 16LL))(v137);
          if (*((void *)&v139 + 1)) {
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v139 + 1));
          }
        }

        if (sub_105B8C(*(uint64_t **)(a5 + 8), 3))
        {
          int v147 = sub_105C24(a5, 3);
          (*(void (**)(_BYTE *__return_ptr, os_unfair_lock_s *, uint64_t, uint64_t))(*(void *)&v30->_os_unfair_lock_opaque
                                                                                            + 256LL))( buf,  v30,  1LL,  1885888867LL);
          v283[0] = 0LL;
          v283[1] = 0LL;
          if (!*(void *)&buf[8]) {
            goto LABEL_365;
          }
          v283[1] = std::__shared_weak_count::lock(*(std::__shared_weak_count **)&buf[8]);
          if (v283[1])
          {
            unint64_t v148 = *(void *)buf;
            v283[0] = *(std::__shared_weak_count **)buf;
          }

          else
          {
            unint64_t v148 = 0LL;
          }

          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
          }
          if (!v148)
          {
LABEL_365:
            int v241 = (os_log_t *)sub_138E8(13);
            std::string::size_type v242 = *v241;
            if (*v241 && os_log_type_enabled(*v241, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "RoutingHandler_PlaybackAndRecord_GenericConfig1.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 419;
              _os_log_impl( &dword_0,  v242,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to locate HAC volume control",  buf,  0x12u);
            }

            unsigned int v243 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v243, "Unable to locate HAC volume control");
          }

          BOOL v149 = v87;
          unsigned __int8 v150 = v293;
          sub_B8F68((uint64_t *)buf, (uint64_t *)&v295, "", 421);
          unint64_t v151 = *(void *)(v147 + 56);
          LOBYTE(v280[0]) = 0;
          uint64_t v281 = 0;
          sub_1B1E64(v148, (uint64_t)v150, *(unsigned int **)buf, v151, a2, 0LL, (uint64_t)v280);
          uint64_t v87 = v149;
          if (v281 && v280[0])
          {
            v280[1] = v280[0];
            operator delete(v280[0]);
          }

          int v152 = *(std::__shared_weak_count **)&buf[8];
          if (*(void *)&buf[8])
          {
            uint64_t v153 = (unint64_t *)(*(void *)&buf[8] + 8LL);
            do
              uint64_t v154 = __ldaxr(v153);
            while (__stlxr(v154 - 1, v153));
            if (!v154)
            {
              ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
              std::__shared_weak_count::__release_weak(v152);
            }
          }

          uint64_t v155 = v283[1];
          sub_216D88(&v282, (uint64_t)v283[0], v283[1]);
          BOOL v156 = v287[1];
          if (v287[1] >= v288)
          {
            unsigned int v158 = ((char *)v287[1] - (char *)v287[0]) >> 4;
            BOOL v159 = ((char *)v288 - (char *)v287[0]) >> 3;
            if (v159 <= v158 + 1) {
              BOOL v159 = v158 + 1;
            }
            else {
              uint64_t v160 = v159;
            }
            *(void *)&_BYTE buf[32] = &v288;
            int v161 = (char *)sub_7BE90(v160);
            uint64_t v163 = &v161[16 * v158];
            *(std::__shared_count *)uint64_t v163 = v282;
            uint64_t v282 = (std::__shared_count)0LL;
            unint64_t v165 = v287[0];
            v164 = v287[1];
            if (v287[1] == v287[0])
            {
              unsigned int v168 = vdupq_n_s64((unint64_t)v287[1]);
              int v166 = (std::__shared_weak_count *)&v161[16 * v158];
            }

            else
            {
              int v166 = (std::__shared_weak_count *)&v161[16 * v158];
              do
              {
                unint64_t v167 = *(_OWORD *)&v164[-1].__shared_owners_;
                v164 = (std::__shared_weak_count *)((char *)v164 - 16);
                *(_OWORD *)&v166[-1].__shared_owners_ = v167;
                int v166 = (std::__shared_weak_count *)((char *)v166 - 16);
                v164->__vftable = 0LL;
                v164->__shared_owners_ = 0LL;
              }

              while (v164 != v165);
              unsigned int v168 = *(int64x2_t *)v287;
            }

            uint64_t v157 = (std::__shared_weak_count *)(v163 + 16);
            v287[0] = v166;
            v287[1] = (std::__shared_weak_count *)(v163 + 16);
            *(int64x2_t *)&buf[8] = v168;
            char v169 = v288;
            uint64_t v288 = (std::__shared_weak_count *)&v161[16 * v162];
            *(void *)&buf[24] = v169;
            *(void *)buf = v168.i64[0];
            sub_A0D64((uint64_t)buf);
          }

          else
          {
            v287[1]->std::__shared_count = v282;
            uint64_t v157 = (std::__shared_weak_count *)&v156->__shared_weak_owners_;
          }

          v287[1] = v157;
          if (v155)
          {
            BOOL v170 = (unint64_t *)&v155->__shared_owners_;
            do
              unint64_t v171 = __ldaxr(v170);
            while (__stlxr(v171 - 1, v170));
            if (!v171)
            {
              ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
              std::__shared_weak_count::__release_weak(v155);
            }
          }
        }

        uint64_t v172 = sub_1B5BF0(*(unsigned int *)(a2 + 12));
        sub_CBF5C((uint64_t *)buf, &v289, "", 430);
        sub_1B4C60( *(uint64_t *)buf,  (uint64_t)v293,  (uint64_t)v305,  *(unsigned int *)(v304 + 144),  (uint64_t)&v299,  v269[7],  *(unsigned int *)(a2 + 12),  *(void *)(a2 + 104));
        if (v172) {
          sub_1B5828(*(uint64_t *)buf, *(unsigned int *)(a2 + 12), *(void *)(a2 + 112), v266);
        }
        unint64_t v173 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8])
        {
          uint64_t v174 = (unint64_t *)(*(void *)&buf[8] + 8LL);
          do
            __int128 v175 = __ldaxr(v174);
          while (__stlxr(v175 - 1, v174));
          if (!v175)
          {
            ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
            std::__shared_weak_count::__release_weak(v173);
          }
        }

        uint64_t v176 = v293;
        sub_32CC4((uint64_t)v293);
        sub_1BDB94((uint64_t)v176);
        sub_1BCF60((uint64_t)v176, a3, a5, v268);
        v293 = 0LL;
        v266[2] = v176;
        v266[3] = v16;
        if (v87)
        {
          int v177 = operator new(0x68uLL);
          unint64_t v178 = v177;
          std::string::size_type v179 = (std::__shared_weak_count *)*((void *)&v286 + 1);
          unsigned int v279 = v286;
          if (*((void *)&v286 + 1))
          {
            uint64_t v180 = (unint64_t *)(*((void *)&v286 + 1) + 8LL);
            do
              __int128 v181 = __ldxr(v180);
            while (__stxr(v181 + 1, v180));
          }

          sub_CAF18((uint64_t)v177, &v279);
          v266[4] = v178;
          if (v179)
          {
            __int128 v182 = (unint64_t *)&v179->__shared_owners_;
            do
              unsigned int v183 = __ldaxr(v182);
            while (__stlxr(v183 - 1, v182));
            if (!v183)
            {
              ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
              std::__shared_weak_count::__release_weak(v179);
            }
          }

          BOOL v184 = operator new(0x68uLL);
          __int128 v185 = v184;
          __int128 v186 = (std::__shared_weak_count *)*((void *)&v286 + 1);
          uint64_t v278 = v286;
          if (*((void *)&v286 + 1))
          {
            __int128 v187 = (unint64_t *)(*((void *)&v286 + 1) + 8LL);
            do
              uint64_t v188 = __ldxr(v187);
            while (__stxr(v188 + 1, v187));
          }

          sub_CAF18((uint64_t)v184, &v278);
          v266[5] = v185;
          if (!v186) {
            goto LABEL_270;
          }
          int v189 = (unint64_t *)&v186->__shared_owners_;
          do
            std::string v190 = __ldaxr(v189);
          while (__stlxr(v190 - 1, v189));
        }

        else
        {
          BOOL v191 = operator new(0x68uLL);
          sub_20D0B4((uint64_t)v191, (char **)v287);
          v266[4] = v191;
          uint64_t v192 = operator new(0x68uLL);
          sub_150BF4(buf, v291, v292);
          int v270 = *(std::__shared_weak_count **)&buf[8];
          std::string v277 = *(_OWORD *)buf;
          *(void *)buf = 0LL;
          *(void *)&buf[8] = 0LL;
          sub_CAF18((uint64_t)v192, &v277);
          v266[5] = v192;
          if (v270)
          {
            unint64_t v193 = (unint64_t *)&v270->__shared_owners_;
            do
              unint64_t v194 = __ldaxr(v193);
            while (__stlxr(v194 - 1, v193));
            if (!v194)
            {
              ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
              std::__shared_weak_count::__release_weak(v270);
            }
          }

          __int128 v186 = *(std::__shared_weak_count **)&buf[8];
          if (!*(void *)&buf[8]) {
            goto LABEL_270;
          }
          uint64_t v195 = (unint64_t *)(*(void *)&buf[8] + 8LL);
          do
            std::string v190 = __ldaxr(v195);
          while (__stlxr(v190 - 1, v195));
        }

        if (!v190)
        {
          ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
          std::__shared_weak_count::__release_weak(v186);
          if (v172)
          {
LABEL_271:
            char v196 = operator new(0x68uLL);
            sub_CB19C(buf, v289, v290);
            v271 = *(std::__shared_weak_count **)&buf[8];
            char v276 = *(_OWORD *)buf;
            *(void *)buf = 0LL;
            *(void *)&buf[8] = 0LL;
            sub_CAF18((uint64_t)v196, &v276);
            v266[6] = v196;
            if (v271)
            {
              char v197 = (unint64_t *)&v271->__shared_owners_;
              do
                uint64_t v198 = __ldaxr(v197);
              while (__stlxr(v198 - 1, v197));
              if (!v198)
              {
                ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
                std::__shared_weak_count::__release_weak(v271);
              }
            }

            v199 = *(std::__shared_weak_count **)&buf[8];
            if (!*(void *)&buf[8]) {
              goto LABEL_291;
            }
            unint64_t v200 = (unint64_t *)(*(void *)&buf[8] + 8LL);
            do
              os_signpost_id_t v201 = __ldaxr(v200);
            while (__stlxr(v201 - 1, v200));
LABEL_289:
            if (!v201)
            {
              ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
              std::__shared_weak_count::__release_weak(v199);
            }

LABEL_232:
  *(void *)buf = __p;
  sub_A0CF0((void ***)buf);
LABEL_233:
  int v75 = v365;
  if (*(_BYTE *)(v71 + 384))
  {
    sub_134CF0((uint64_t *)&v358, (uint64_t)v364, (uint64_t)&v363);
    sub_EDD50((uint64_t *)buf, &v363);
    for (uint64_t i = *(void *)&buf[8]; (_BYTE *)i != buf; uint64_t i = *(void *)(i + 8))
    {
      sub_FAA90((uint64_t *)__p, *(void *)(i + 16));
      sub_134D88(&v358, (uint64_t *)&v358, *(void **)&__p[8], __p);
      sub_85B80((uint64_t *)__p);
    }

    sub_1BB88((uint64_t *)buf);
    sub_133270((uint64_t)v409, (uint64_t)&v358);
    if (v409[0].__r_.__value_.__l.__cap_)
    {
      BOOL v129 = (os_log_t *)sub_138E8(8);
      uint64_t v130 = *v129;
      if (*v129)
      {
        if (os_log_type_enabled(*v129, OS_LOG_TYPE_DEFAULT))
        {
          sub_1214C4( (std::string *)__p,  (os_unfair_lock_s **)v409[0].__r_.__value_.__l.__data_,  (os_unfair_lock_s **)&v409[0].__r_.__value_.__l.__size_);
          unsigned int v131 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3481;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v131;
          _os_log_impl(&dword_0, v130, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Disallowing ports %s ", buf, 0x1Cu);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }
      }
    }

    *(void *)&_DWORD buf[16] = 0LL;
    *(void *)&buf[8] = 0LL;
    *(void *)buf = &buf[8];
    int64x2_t v132 = (std::string::__raw *)v409[0].__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v409[0].__r_.__value_.__l.__data_ == &v409[0].__r_.__value_.__r.__words[1])
    {
      int v152 = 0LL;
      *(void *)&__p[16] = 0LL;
      *(void *)&__p[8] = 0LL;
    }

    else
    {
      do
      {
        int v373 = 0LL;
        uint64_t v133 = (std::__shared_weak_count *)v132[1].__words[2];
        if (v133)
        {
          unsigned int v134 = std::__shared_weak_count::lock(v133);
          std::string v374 = v134;
          if (v134)
          {
            BOOL v135 = v134;
            uint64_t v136 = (void *)v132[1].__words[1];
            int v373 = v136;
            if (!v136) {
              goto LABEL_267;
            }
            uint64_t v137 = *(void *)&buf[8];
            int v138 = &buf[8];
            if (*(_BYTE **)buf == &buf[8]) {
              goto LABEL_254;
            }
            unsigned int v139 = *(void **)&buf[8];
            BOOL v140 = &buf[8];
            if (*(void *)&buf[8])
            {
              do
              {
                int v138 = v139;
                unsigned int v139 = (void *)v139[1];
              }

              while (v139);
            }

            else
            {
              do
              {
                int v138 = (void *)*((void *)v140 + 2);
                BOOL v156 = *v138 == (void)v140;
                BOOL v140 = v138;
              }

              while (v156);
            }

            if (v138[4] < (unint64_t)v136)
            {
LABEL_254:
              std::string::size_type v141 = *(void *)&buf[8] ? v138 : &buf[8];
              int v142 = *(void *)&buf[8] ? v138 + 1 : &buf[8];
            }

            else
            {
              std::string::size_type v141 = &buf[8];
              int v142 = &buf[8];
              if (*(void *)&buf[8])
              {
                int v142 = &buf[8];
                while (1)
                {
                  while (1)
                  {
                    std::string::size_type v141 = (_BYTE *)v137;
                    unint64_t v151 = *(void *)(v137 + 32);
                    uint64_t v137 = *(void *)v141;
                    int v142 = v141;
                    if (!*(void *)v141) {
                      goto LABEL_261;
                    }
                  }

                  int v142 = v141 + 8;
                  uint64_t v137 = *((void *)v141 + 1);
                  if (!v137) {
                    goto LABEL_261;
                  }
                }
              }
            }

            if (!*(void *)v142)
            {
LABEL_261:
              uint64_t v143 = (uint64_t *)operator new(0x30uLL);
              int v144 = v143;
              v143[4] = (uint64_t)v136;
              v143[5] = (uint64_t)v135;
              int v145 = (unint64_t *)&v135->__shared_owners_;
              do
                unint64_t v146 = __ldxr(v145);
              while (__stxr(v146 + 1, v145));
              *uint64_t v143 = 0LL;
              v143[1] = 0LL;
              v143[2] = (uint64_t)v141;
              *(void *)int v142 = v143;
              if (**(void **)buf)
              {
                *(void *)buf = **(void **)buf;
                int v144 = *(uint64_t **)v142;
              }

              sub_7A420(*(uint64_t **)&buf[8], v144);
              ++*(void *)&buf[16];
              BOOL v135 = v374;
            }

            if (v135)
            {
LABEL_267:
              int v147 = (unint64_t *)&v135->__shared_owners_;
              do
                unint64_t v148 = __ldaxr(v147);
              while (__stlxr(v148 - 1, v147));
              if (!v148)
              {
                ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                std::__shared_weak_count::__release_weak(v135);
              }
            }
          }
        }

        BOOL v149 = (std::string *)v132->__words[1];
        if (v149)
        {
          do
          {
            unsigned __int8 v150 = v149;
            BOOL v149 = (std::string *)v149->__r_.__value_.__r.__words[0];
          }

          while (v149);
        }

        else
        {
          do
          {
            unsigned __int8 v150 = (std::string *)v132->__words[2];
            BOOL v156 = v150->__r_.__value_.__r.__words[0] == (void)v132;
            int64x2_t v132 = (std::string::__raw *)v150;
          }

          while (!v156);
        }

        int64x2_t v132 = (std::string::__raw *)v150;
      }

      while (v150 != (std::string *)&v409[0].__r_.__value_.__r.__words[1]);
      int v152 = *(void **)&buf[8];
      *(void *)std::string __p = *(void *)buf;
      *(void *)&__p[8] = *(void *)&buf[8];
      *(void *)&__p[16] = *(void *)&buf[16];
      if (*(void *)&buf[16])
      {
        *(void *)(*(void *)&buf[8] + 16LL) = &__p[8];
        *(void *)buf = &buf[8];
        *(void *)&buf[8] = 0LL;
        *(void *)&_DWORD buf[16] = 0LL;
        int v152 = 0LL;
        goto LABEL_290;
      }
    }

    *(void *)std::string __p = &__p[8];
LABEL_290:
    sub_132DF8(v152);
    uint64_t v153 = *(void **)__p;
    if (*(_BYTE **)__p != &__p[8])
    {
      do
      {
        uint64_t v154 = v153[4];
        uint64_t v155 = *(const void **)(v154 + 248);
        *(void *)buf = v155;
        LODWORD(v154) = *(unsigned __int8 *)(v154 + 256);
        buf[8] = v154;
        if ((_DWORD)v154) {
          BOOL v156 = v155 == 0LL;
        }
        else {
          BOOL v156 = 1;
        }
        if (!v156) {
          CFRetain(v155);
        }
        sub_118354((uint64_t **)(a2 + 72), (CFStringRef *)buf, (uint64_t)buf);
        sub_19DFC((uint64_t)buf);
        uint64_t v157 = (void *)v153[1];
        if (v157)
        {
          do
          {
            unsigned int v158 = v157;
            uint64_t v157 = (void *)*v157;
          }

          while (v157);
        }

        else
        {
          do
          {
            unsigned int v158 = (_BYTE *)v153[2];
            BOOL v156 = *(void *)v158 == (void)v153;
            uint64_t v153 = v158;
          }

          while (!v156);
        }

        uint64_t v153 = v158;
      }

      while (v158 != &__p[8]);
    }

    sub_132DF8(*(void **)&__p[8]);
    uint64_t v375 = 0LL;
    int v373 = &v374;
    std::string v374 = 0LL;
    for (uint64_t j = v364; j != &v363; uint64_t j = (uint64_t *)j[1])
    {
      if (&v409[0].__r_.__value_.__r.__words[1] == sub_134EC0( v409[0].__r_.__value_.__l.__data_,  &v409[0].__r_.__value_.__l.__size_,  j + 2))
      {
        *(void *)&buf[8] = 0LL;
        *(void *)buf = 0LL;
        uint64_t v160 = (std::__shared_weak_count *)j[3];
        if (v160)
        {
          int v161 = std::__shared_weak_count::lock(v160);
          if (v161)
          {
            uint64_t v162 = v161;
            uint64_t v163 = j[2];
            p_shared_weak_owners = (unint64_t *)&v161->__shared_weak_owners_;
            do
              unint64_t v165 = __ldxr(p_shared_weak_owners);
            while (__stxr(v165 + 1, p_shared_weak_owners));
            *(void *)buf = v163;
            *(void *)&buf[8] = v161;
            int v166 = (unint64_t *)&v161->__shared_owners_;
            do
              unint64_t v167 = __ldaxr(v166);
            while (__stlxr(v167 - 1, v166));
            if (!v167)
            {
              ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
              std::__shared_weak_count::__release_weak(v162);
            }
          }

          else
          {
            *(void *)&buf[8] = 0LL;
            *(void *)buf = 0LL;
          }
        }

        sub_1331F0((uint64_t **)&v373, (unint64_t *)buf, (uint64_t)buf);
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
        }
      }
    }

    sub_11801C((uint64_t)&v362, &v373);
    unsigned int v168 = *(CFStringRef **)(a2 + 72);
    *(void *)&__p[16] = 0LL;
    *(void *)&__p[8] = 0LL;
    *(void *)std::string __p = &__p[8];
    v371 = (CFStringRef *)(a2 + 80);
    __int16 v372 = v168;
    p_uint64_t size = &v362.__r_.__value_.__l.__size_;
    std::string::size_type v370 = v362.__r_.__value_.__r.__words[0];
    v376.n128_u64[0] = (unint64_t)__p;
    v376.n128_u64[1] = (unint64_t)&__p[8];
    sub_135088((uint64_t)buf, &v372, &v371, (uint64_t)&v370, &p_size, &v376);
    if (__p != (_BYTE *)(a2 + 72)) {
      sub_1352A4(a2 + 72, *(void **)__p, &__p[8]);
    }
    sub_1112B0(*(void **)&__p[8]);
    sub_1112B0((void *)v362.__r_.__value_.__l.__size_);
    sub_FF3B8(v374);
    sub_FF3B8((void *)v409[0].__r_.__value_.__l.__size_);
    sub_85B80((uint64_t *)&v358);
LABEL_320:
    uint64_t v71 = a2;
  }
  }

LABEL_321:
  *(void *)uint64_t v357 = off_4709D0;
  *(void *)(v357 + 8) = 1LL;
  *(void *)(v357 + 16) = 0LL;
  *(_BYTE *)(v357 + 24) = 0;
  *(_BYTE *)(v357 + sub_7A768(v9 - 32) = 0;
  sub_132308(&v358, (void *)(v71 + 72));
  char v169 = v364;
  if (v364 != &v363)
  {
    while (1)
    {
      sub_B8CBC((uint64_t *)buf, v169 + 2, "", 3510);
      BOOL v170 = sub_203D48(*(_DWORD *)(*(void *)buf + 144LL));
      unint64_t v171 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        uint64_t v172 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v173 = __ldaxr(v172);
        while (__stlxr(v173 - 1, v172));
        if (!v173)
        {
          ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
          std::__shared_weak_count::__release_weak(v171);
        }
      }

      if (!v170) {
        break;
      }
      char v169 = (uint64_t *)v169[1];
      if (v169 == &v363) {
        goto LABEL_342;
      }
    }

    if (v75)
    {
      uint64_t v174 = sub_138E8(8);
      if ((*(_BYTE *)(v174 + 8) & 1) != 0)
      {
        __int128 v175 = *(os_log_s **)v174;
        if (*(void *)v174)
        {
          if (os_log_type_enabled(*(os_log_t *)v174, OS_LOG_TYPE_DEBUG))
          {
            sub_2CA1C(__p, *(unsigned int *)(a2 + 176));
            uint64_t v176 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3514;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&buf[20] = v176;
            _os_log_impl(&dword_0, v175, OS_LOG_TYPE_DEBUG, "%25s:%-5d Using RouteInitiationInfo %s.", buf, 0x1Cu);
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
          }
        }
      }

      int v177 = *(_DWORD *)(a2 + 144);
      *(void *)&__p[16] = 0LL;
      *(void *)&__p[8] = 0LL;
      *(void *)std::string __p = &__p[8];
      sub_128F3C( (uint64_t)buf,  a2,  (_OWORD *)(a2 + 32),  a2 + 48,  (uint64_t)&v358,  a2 + 120,  v177,  __p,  a2 + 176,  v350,  *(_BYTE *)(a2 + 384),  (uint64_t *)(a2 + 392),  1919842148,  (__int128 *)(a2 + 416),  (void *)(a2 + 448));
      sub_FF3B8(*(void **)&__p[8]);
      sub_12FFA0((uint64_t)__p, (std::__shared_weak_count *)a2, (uint64_t)buf, v75);
      sub_725DC(v357, (uint64_t)__p);
      *(void *)std::string __p = off_4709D0;
      unint64_t v178 = *(void **)&__p[16];
      if (*(void *)&__p[16])
      {
        sub_10AF78((uint64_t *)(*(void *)&__p[16] + 16LL));
        operator delete(v178);
      }

      sub_128D54((uint64_t)buf);
    }
  }

    BOOL v221 = __cxa_allocate_exception(0x10uLL);
    *(void *)BOOL v221 = &off_4865A0;
    v221[2] = 1852797029;
  }

  uint64_t v26 = sub_2F0064(*v13);
  *((void *)v12 + 7) = v26;
  if (v26)
  {
    int v27 = (os_log_t *)sub_138E8(5);
    int v28 = *v27;
    if (*v27)
    {
      if (os_log_type_enabled(*v27, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v29 = *((void *)v12 + 3);
        sub_151A78((std::string *)__p, *((const __CFArray **)v12 + 7));
        unsigned __int16 v30 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "HP_PreferredChannels.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 176;
        *(_WORD *)&_BYTE buf[18] = 2112;
        *(void *)&buf[20] = v29;
        *(_WORD *)&buf[28] = 2080;
        *(void *)&buf[30] = v30;
        _os_log_impl(&dword_0, v28, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Default %@: %s.", buf, 0x26u);
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  uint64_t v31 = sub_2F0064(*((const __CFString **)v12 + 4));
  *((void *)v12 + 8) = v31;
  if (v31)
  {
    int v32 = (os_log_t *)sub_138E8(5);
    int v33 = *v32;
    if (*v32)
    {
      if (os_log_type_enabled(*v32, OS_LOG_TYPE_DEFAULT))
      {
        unsigned __int16 v34 = *((void *)v12 + 4);
        sub_151A78((std::string *)__p, *((const __CFArray **)v12 + 8));
        uint64_t v35 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "HP_PreferredChannels.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 178;
        *(_WORD *)&_BYTE buf[18] = 2112;
        *(void *)&buf[20] = v34;
        *(_WORD *)&buf[28] = 2080;
        *(void *)&buf[30] = v35;
        _os_log_impl(&dword_0, v33, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Default %@: %s.", buf, 0x26u);
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  unint64_t v36 = sub_2F0148(*((const __CFString **)v12 + 5));
  *((void *)v12 + 10) = v36;
  if (v36)
  {
    int64x2_t v37 = (os_log_t *)sub_138E8(5);
    __int16 v38 = *v37;
    if (*v37)
    {
      if (os_log_type_enabled(*v37, OS_LOG_TYPE_DEFAULT))
      {
        std::string::size_type v39 = *((void *)v12 + 5);
        sub_151D60((std::string *)__p, *((const __CFDictionary **)v12 + 10));
        os_signpost_id_t v40 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "HP_PreferredChannels.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 180;
        *(_WORD *)&_BYTE buf[18] = 2112;
        *(void *)&buf[20] = v39;
        *(_WORD *)&buf[28] = 2080;
        *(void *)&buf[30] = v40;
        _os_log_impl(&dword_0, v38, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Default %@: %s.", buf, 0x26u);
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  unint64_t v41 = sub_2F0148(*((const __CFString **)v12 + 6));
  *((void *)v12 + 11) = v41;
  if (v41)
  {
    uint64_t v42 = (os_log_t *)sub_138E8(5);
    uint64_t v43 = *v42;
    if (*v42)
    {
      if (os_log_type_enabled(*v42, OS_LOG_TYPE_DEFAULT))
      {
        char v44 = *((void *)v12 + 6);
        sub_151D60((std::string *)__p, *((const __CFDictionary **)v12 + 11));
        uint64_t v45 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "HP_PreferredChannels.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 182;
        *(_WORD *)&_BYTE buf[18] = 2112;
        *(void *)&buf[20] = v44;
        *(_WORD *)&buf[28] = 2080;
        *(void *)&buf[30] = v45;
        _os_log_impl(&dword_0, v43, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Default %@: %s.", buf, 0x26u);
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  *(void *)buf = *((void *)v12 + 8);
  *(_WORD *)&buf[8] = 0;
  if (*(void *)buf)
  {
    uint64_t v46 = (char **)(v10 + 53);
    sub_1A0E0C((CFArrayRef *)buf, 0, v14);
    uint64_t v47 = v237;
    char v48 = v236;
    sub_1A0E0C((CFArrayRef *)buf, 1u, v12 + 76);
  }

  else
  {
    _BYTE *v14 = 0x200000001LL;
    uint64_t v46 = (char **)(v10 + 53);
    uint64_t v47 = v237;
    char v48 = v236;
  }

  sub_13818((uint64_t)buf);
  sub_19DFC((uint64_t)v247);
  BOOL v49 = *v46;
  *uint64_t v46 = v12;
  if (v49)
  {
    (*(void (**)(char *))(*(void *)v49 + 8LL))(v49);
    char v12 = *v46;
  }

  sub_2F505C(v10, (uint64_t)v12);
  __int128 v50 = operator new(0x18uLL);
  *__int128 v50 = &off_474550;
  v50[1] = v10;
  *((_BYTE *)v50 + 16) = 0;
  unint64_t v51 = v10[54];
  v10[54] = v50;
  if (v51)
  {
    (*(void (**)(uint64_t))(*(void *)v51 + 8LL))(v51);
    __int128 v50 = (void *)v10[54];
  }

  sub_2F505C(v10, (uint64_t)v50);
  BOOL v52 = (const __CFString *)(*(uint64_t (**)(void *))(*v10 + 120LL))(v10);
  *(void *)buf = v52;
  buf[8] = 1;
  if (v52)
  {
    LODWORD(__p[0]) = 255;
    sub_48FA0(v52, (UInt8 *)v10 + 80, __p);
  }

  else
  {
    strlcpy((char *)v10 + 80, "Unknown", 0x100uLL);
  }

  sub_19DFC((uint64_t)buf);
  uint64_t *v10 = off_46E530;
  v10[71] = v47;
  v10[72] = v234;
  *((_DWORD *)v10 + 146) = v48;
  sub_72A50((CFStringRef *)v10 + 74, (int *)&v241);
  *((_WORD *)v10 + 300) = 257;
  *(_OWORD *)(v10 + 77) = 0u;
  v10[76] = v10 + 77;
  *(_OWORD *)(v10 + 79) = 0u;
  sub_B1F7C((uint64_t)(v10 + 81), (uint64_t)"IOMonitor");
  sub_B1F7C((uint64_t)(v10 + 92), (uint64_t)"IO Proc Thread Mutex");
  sub_B1F7C((uint64_t)(v10 + 103), (uint64_t)"IO Thread Calling Normal Mutex");
  *((_DWORD *)v10 + 228) = 0;
  *((_OWORD *)v10 + 64) = 0u;
  *(_OWORD *)(v10 + 115) = 0u;
  *(_OWORD *)(v10 + 117) = 0u;
  *(_OWORD *)(v10 + 119) = 0u;
  *(_OWORD *)(v10 + 121) = 0u;
  *(_OWORD *)(v10 + 123) = 0u;
  *(_OWORD *)(v10 + 125) = 0u;
  v10[127] = v10 + 128;
  v10[131] = 0LL;
  *((_OWORD *)v10 + 66) = 0u;
  v10[130] = v10 + 131;
  *((_WORD *)v10 + 536) = 0;
  *((_BYTE *)v10 + 1074) = a4 == 1;
  *((_DWORD *)v10 + 273) = 0;
  *(_OWORD *)((char *)v10 + 1076) = 0u;
  if (!v233)
  {
    unint64_t v222 = (os_log_t *)sub_138E8(13);
    uint64_t v223 = *v222;
    if (*v222 && os_log_type_enabled(*v222, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 493;
      _os_log_impl(&dword_0, v223, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    goto LABEL_325;
  }

  if (!v47)
  {
    unsigned int v225 = (os_log_t *)sub_138E8(13);
    std::string::size_type v226 = *v225;
    if (*v225 && os_log_type_enabled(*v225, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 494;
      _os_log_impl(&dword_0, v226, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    if ((void)xmmword_49F988 == *((void *)&xmmword_49F988 + 1))
    {
      uint64_t v462 = (os_log_t *)sub_138E8(13);
      v463 = *v462;
      if (*v462 && os_log_type_enabled(*v462, OS_LOG_TYPE_ERROR))
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RoutingSettings_B238.cpp";
        WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = 231;
        _os_log_impl( &dword_0,  v463,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Speaker Playback DSPChainConfig didn't load properly",  (uint8_t *)&__p,  0x12u);
      }

      int v464 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v464, "Speaker Playback DSPChainConfig didn't load properly");
    }

    unint64_t v95 = (char *)operator new(0x48uLL);
    *((void *)v95 + 1) = 0LL;
    *((void *)v95 + 2) = 0LL;
    *(void *)unint64_t v95 = off_4817C8;
    strcpy(v95 + 32, "gpsdulovetum");
    *(void *)(v95 + 60) = 0x100000001LL;
    v500[0] = xmmword_402D48;
    v95[45] = 0;
    *((_WORD *)v95 + 23) = 0;
    *((_DWORD *)v95 + 12) = 0;
    *(void *)(v95 + 52) = 0LL;
    *((void *)v95 + 3) = off_481800;
    *(void *)&uint64_t v548 = v95 + 24;
    *((void *)&v548 + 1) = v95;
    else {
      __dst = v562;
    }
    int v541 = 1;
    if (SHIBYTE(v561) < 0)
    {
      sub_24054(v530, (void *)v560, *((unint64_t *)&v560 + 1));
    }

    else
    {
      *(_OWORD *)v530 = v560;
      *(void *)&v530[16] = v561;
    }

    v530[24] = 1;
    *(void *)&v593 = 0LL;
    memset(v592, 0, sizeof(v592));
    *(_OWORD *)&v597.__r_.__value_.__l.__data_ = v506;
    v597.__r_.__value_.__l.__cap_ = 2LL;
    sub_83660((uint64_t)v592, (int *)&v597, 3LL);
    sub_302438( &__p.__r_.__value_.__l.__data_,  (char *)&v562,  &v563,  &__dst,  (std::string *)v530,  (uint64_t)&v508,  0x100000002LL,  0x100000002LL,  0.0,  0LL,  0,  (uint64_t)v592);
    unint64_t v96 = v503;
    sub_178254((uint64_t)&xmmword_49FFA8, (uint64_t)&__p);
    v597.__r_.__value_.__r.__words[0] = (std::string::size_type)v623;
    sub_178454((void ***)&v597);
    v597.__r_.__value_.__r.__words[0] = (std::string::size_type)v622;
    sub_178454((void ***)&v597);
    if (v621 < 0) {
      operator delete(v618);
    }
    sub_830DC((uint64_t)v608);
    if (v606 < 0) {
      operator delete(v603);
    }
    v597.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    sub_1784C4((void ***)&v597);
    sub_83284((uint64_t)v592);
    if (v530[24] && (v530[23] & 0x80000000) != 0) {
      operator delete(*(void **)v530);
    }
    int v97 = v548;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v548;
    if (*((void *)&v548 + 1))
    {
      unint64_t v98 = (unint64_t *)(*((void *)&v548 + 1) + 8LL);
      do
        BOOL v99 = __ldxr(v98);
      while (__stxr(v99 + 1, v98));
      unint64_t v100 = __p.__r_.__value_.__l.__size_;
    }

    else
    {
      unint64_t v100 = 0LL;
    }

    sub_143208(&xmmword_49FFA8, v97, v100);
    BOOL v101 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      unint64_t v102 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        uint64_t v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
    }

    if ((void)xmmword_49FFA8 == *((void *)&xmmword_49FFA8 + 1))
    {
      v465 = (os_log_t *)sub_138E8(13);
      v466 = *v465;
      if (*v465 && os_log_type_enabled(*v465, OS_LOG_TYPE_ERROR))
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RoutingSettings_B238.cpp";
        WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = 236;
        _os_log_impl( &dword_0,  v466,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Speaker Siri DSPChainConfig didn't load properly",  (uint8_t *)&__p,  0x12u);
      }

      unsigned int v467 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v467, "Speaker Siri DSPChainConfig didn't load properly");
    }

    uint64_t v104 = (char *)operator new(0x48uLL);
    *((void *)v104 + 1) = 0LL;
    *((void *)v104 + 2) = 0LL;
    *(void *)uint64_t v104 = off_4817C8;
    qmemcpy(v104 + 32, "gpsdulovetum", 12);
    *(void *)(v104 + 60) = 0x100000001LL;
    *(_OWORD *)(v104 + 44) = v500[0];
    *((void *)v104 + 3) = off_481800;
    *(void *)&v547 = v104 + 24;
    *((void *)&v547 + 1) = v104;
    else {
      __dst = __src;
    }
    int v541 = 1;
    else {
      *(std::string *)v530 = v564;
    }
    v530[24] = 1;
    *(void *)&v593 = 0LL;
    memset(v592, 0, sizeof(v592));
    *(_OWORD *)&v597.__r_.__value_.__l.__data_ = v506;
    v597.__r_.__value_.__l.__cap_ = 2LL;
    sub_83660((uint64_t)v592, (int *)&v597, 3LL);
    sub_302438( &__p.__r_.__value_.__l.__data_,  (char *)&__src,  &v566,  &__dst,  (std::string *)v530,  (uint64_t)&v508,  v82,  v96,  0.0,  0LL,  0,  (uint64_t)v592);
    sub_178254((uint64_t)&xmmword_4A0088, (uint64_t)&__p);
    v597.__r_.__value_.__r.__words[0] = (std::string::size_type)v623;
    sub_178454((void ***)&v597);
    v597.__r_.__value_.__r.__words[0] = (std::string::size_type)v622;
    sub_178454((void ***)&v597);
    if (v621 < 0) {
      operator delete(v618);
    }
    sub_830DC((uint64_t)v608);
    if (v606 < 0) {
      operator delete(v603);
    }
    v597.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    sub_1784C4((void ***)&v597);
    sub_83284((uint64_t)v592);
    if (v530[24] && (v530[23] & 0x80000000) != 0) {
      operator delete(*(void **)v530);
    }
    unint64_t v105 = v547;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v547;
    if (*((void *)&v547 + 1))
    {
      unint64_t v106 = (unint64_t *)(*((void *)&v547 + 1) + 8LL);
      do
        uint64_t v107 = __ldxr(v106);
      while (__stxr(v107 + 1, v106));
      uint64_t v108 = __p.__r_.__value_.__l.__size_;
    }

    else
    {
      uint64_t v108 = 0LL;
    }

    sub_143208(&xmmword_4A0088, v105, v108);
    unint64_t v109 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      uint64_t v110 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        unint64_t v111 = __ldaxr(v110);
      while (__stlxr(v111 - 1, v110));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v109);
      }
    }

    if ((void)xmmword_4A0088 == *((void *)&xmmword_4A0088 + 1))
    {
      unsigned int v468 = (os_log_t *)sub_138E8(13);
      unsigned int v469 = *v468;
      if (*v468 && os_log_type_enabled(*v468, OS_LOG_TYPE_ERROR))
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"RoutingSettings_B238.cpp";
        WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = 241;
        _os_log_impl( &dword_0,  v469,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Speaker Local System Sound DSPChainConfig didn't load properly",  (uint8_t *)&__p,  0x12u);
      }

      unsigned int v470 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v470, "Speaker Local System Sound DSPChainConfig didn't load properly");
      goto LABEL_1246;
    }

    __dst.__r_.__value_.__s.__data_[0] = 0;
    int v541 = 0;
    v530[0] = 0;
    v530[24] = 0;
    *(void *)&v593 = 0LL;
    memset(v592, 0, sizeof(v592));
    *(_OWORD *)&v597.__r_.__value_.__l.__data_ = v506;
    v597.__r_.__value_.__l.__cap_ = 2LL;
    sub_83660((uint64_t)v592, (int *)&v597, 3LL);
    sub_302438( &__p.__r_.__value_.__l.__data_,  (char *)v557,  &v559,  &__dst,  (std::string *)v530,  (uint64_t)&v508,  *(void *)&v500[1] | 0x100000000LL,  *(void *)&v500[1] | 0x100000000LL,  0.0,  0LL,  0,  (uint64_t)v592);
    sub_178254((uint64_t)&xmmword_4A0168, (uint64_t)&__p);
    v597.__r_.__value_.__r.__words[0] = (std::string::size_type)v623;
    sub_178454((void ***)&v597);
    v597.__r_.__value_.__r.__words[0] = (std::string::size_type)v622;
    sub_178454((void ***)&v597);
    if (v621 < 0) {
      operator delete(v618);
    }
    sub_830DC((uint64_t)v608);
    if (v606 < 0) {
      operator delete(v603);
    }
    v597.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    sub_1784C4((void ***)&v597);
    sub_83284((uint64_t)v592);
    if (v530[24] && (v530[23] & 0x80000000) != 0) {
      operator delete(*(void **)v530);
    }
    if ((v79 & 1) != 0)
    {
      BOOL v112 = v550;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v550;
      if (*((void *)&v550 + 1))
      {
        int v113 = (unint64_t *)(*((void *)&v550 + 1) + 8LL);
        do
          uint64_t v114 = __ldxr(v113);
        while (__stxr(v114 + 1, v113));
        __int128 v115 = __p.__r_.__value_.__l.__size_;
      }

      else
      {
        __int128 v115 = 0LL;
      }

      sub_143208(&xmmword_4A0168, v112, v115);
      uint64_t v120 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        uint64_t v121 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          char v122 = __ldaxr(v121);
        while (__stlxr(v122 - 1, v121));
        goto LABEL_404;
      }
    }

    else
    {
      int v116 = v549;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v549;
      if (*((void *)&v549 + 1))
      {
        unint64_t v117 = (unint64_t *)(*((void *)&v549 + 1) + 8LL);
        do
          std::string::size_type v118 = __ldxr(v117);
        while (__stxr(v118 + 1, v117));
        unint64_t v119 = __p.__r_.__value_.__l.__size_;
      }

      else
      {
        unint64_t v119 = 0LL;
      }

      sub_143208(&xmmword_4A0168, v116, v119);
      uint64_t v120 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        uint64_t v123 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          char v122 = __ldaxr(v123);
        while (__stlxr(v122 - 1, v123));
LABEL_404:
        if (!v122)
        {
          ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
          std::__shared_weak_count::__release_weak(v120);
        }
      }
    }

    if ((void)xmmword_4A0168 != *((void *)&xmmword_4A0168 + 1))
    {
      sub_7D084(v530, off_48C220);
      uint64_t v124 = std::string::append((std::string *)v530, "/", 1uLL);
      uint64_t v125 = *(_OWORD *)&v124->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__l.__cap_ = v124->__r_.__value_.__l.__cap_;
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v125;
      v124->__r_.__value_.__l.__size_ = 0LL;
      v124->__r_.__value_.__l.__cap_ = 0LL;
      v124->__r_.__value_.__r.__words[0] = 0LL;
      sub_48E98(&v597, theString);
      if ((v597.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        char v126 = &v597;
      }
      else {
        char v126 = (std::string *)v597.__r_.__value_.__r.__words[0];
      }
      if ((v597.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v127 = v597.__r_.__value_.__s.__size_;
      }
      else {
        uint64_t v127 = v597.__r_.__value_.__l.__size_;
      }
      unint64_t v128 = std::string::append(&__dst, (const std::string::value_type *)v126, v127);
      BOOL v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
      *(void *)&v592[16] = v128->__r_.__value_.__l.__cap_;
      *(_OWORD *)v592 = v129;
      v128->__r_.__value_.__l.__size_ = 0LL;
      v128->__r_.__value_.__l.__cap_ = 0LL;
      v128->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v130 = std::string::append((std::string *)v592, "/", 1uLL);
      unsigned int v131 = *(_OWORD *)&v130->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__l.__cap_ = v130->__r_.__value_.__l.__cap_;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v131;
      v130->__r_.__value_.__l.__size_ = 0LL;
      v130->__r_.__value_.__l.__cap_ = 0LL;
      v130->__r_.__value_.__r.__words[0] = 0LL;
      int64x2_t v132 = std::string::append(&__p, "VAD", 3uLL);
      uint64_t v546 = *v132;
      v132->__r_.__value_.__l.__size_ = 0LL;
      v132->__r_.__value_.__l.__cap_ = 0LL;
      v132->__r_.__value_.__r.__words[0] = 0LL;
      if ((v592[23] & 0x80000000) != 0) {
        operator delete(*(void **)v592);
      }
      if ((v530[23] & 0x80000000) != 0) {
        operator delete(*(void **)v530);
      }
      uint64_t v133 = (char)v546.__r_.__value_.__s.__size_;
      if ((v546.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        unsigned int v134 = v546.__r_.__value_.__s.__size_;
      }
      else {
        unsigned int v134 = v546.__r_.__value_.__l.__size_;
      }
      BOOL v135 = v592;
      sub_D0924((uint64_t)v592, v134 + 1);
      if (v592[23] < 0) {
        BOOL v135 = *(_BYTE **)v592;
      }
      if (v134)
      {
        if (v133 >= 0) {
          uint64_t v136 = &v546;
        }
        else {
          uint64_t v136 = (std::string *)v546.__r_.__value_.__r.__words[0];
        }
        memmove(v135, v136, v134);
      }

      *(_WORD *)&v135[v134] = 47;
      if ((v571 & 0x80u) == 0) {
        uint64_t v137 = (const std::string::value_type *)&v569;
      }
      else {
        uint64_t v137 = (const std::string::value_type *)v569;
      }
      if ((v571 & 0x80u) == 0) {
        int v138 = v571;
      }
      else {
        int v138 = v570;
      }
      unsigned int v139 = std::string::append((std::string *)v592, v137, v138);
      BOOL v140 = *(_OWORD *)&v139->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__l.__cap_ = v139->__r_.__value_.__l.__cap_;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v140;
      v139->__r_.__value_.__l.__size_ = 0LL;
      v139->__r_.__value_.__l.__cap_ = 0LL;
      v139->__r_.__value_.__r.__words[0] = 0LL;
      std::string::size_type v141 = std::string::append(&__p, "_speaker_movie.dspg", 0x13uLL);
      int v142 = *(_OWORD *)&v141->__r_.__value_.__l.__data_;
      v545.__r_.__value_.__l.__cap_ = v141->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v545.__r_.__value_.__l.__data_ = v142;
      v141->__r_.__value_.__l.__size_ = 0LL;
      v141->__r_.__value_.__l.__cap_ = 0LL;
      v141->__r_.__value_.__r.__words[0] = 0LL;
      if ((v592[23] & 0x80000000) != 0) {
        operator delete(*(void **)v592);
      }
      if ((v571 & 0x80u) == 0) {
        uint64_t v143 = v571;
      }
      else {
        uint64_t v143 = v570;
      }
      int v144 = &v543;
      sub_D0924((uint64_t)&v543, v143 + 14);
      if (v544 < 0) {
        int v144 = (__int128 *)v543;
      }
      if (v143)
      {
        if ((v571 & 0x80u) == 0) {
          int v145 = &v569;
        }
        else {
          int v145 = v569;
        }
        memmove(v144, v145, v143);
      }

      strcpy((char *)v144 + v143, "_speaker_movie");
      if ((v571 & 0x80u) == 0) {
        unint64_t v146 = v571;
      }
      else {
        unint64_t v146 = v570;
      }
      int v147 = &v542;
      sub_D0924((uint64_t)&v542, v146 + 14);
      if ((v542.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        int v147 = (std::string *)v542.__r_.__value_.__r.__words[0];
      }
      if (v146)
      {
        if ((v571 & 0x80u) == 0) {
          unint64_t v148 = &v569;
        }
        else {
          unint64_t v148 = v569;
        }
        memmove(v147, v148, v146);
      }

      strcpy((char *)v147 + v146, "_speaker_movie");
      sub_D1274((uint64_t)&__dst, (uint64_t)&v522);
      if ((v571 & 0x80u) == 0) {
        BOOL v149 = v571;
      }
      else {
        BOOL v149 = v570;
      }
      unsigned __int8 v150 = &__p;
      sub_D0924((uint64_t)&__p, v149 + 28);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        unsigned __int8 v150 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v149)
      {
        if ((v571 & 0x80u) == 0) {
          unint64_t v151 = &v569;
        }
        else {
          unint64_t v151 = v569;
        }
        memmove(v150, v151, v149);
      }

      strcpy((char *)v150 + v149, "_speaker_movie_latenightmode");
      sub_7D084(v592, ".austrip");
      sub_307CA0(&v568, (const void **)&__p.__r_.__value_.__l.__data_, 1818326117, (uint64_t)&__dst, (uint64_t)v592);
      if ((v592[23] & 0x80000000) != 0) {
        operator delete(*(void **)v592);
      }
      if ((v571 & 0x80u) == 0) {
        int v152 = v571;
      }
      else {
        int v152 = v570;
      }
      uint64_t v153 = &__p;
      sub_D0924((uint64_t)&__p, v152 + 28);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
        uint64_t v153 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v152)
      {
        if ((v571 & 0x80u) == 0) {
          uint64_t v154 = &v569;
        }
        else {
          uint64_t v154 = v569;
        }
        memmove(v153, v154, v152);
      }

      strcpy((char *)v153 + v152, "_speaker_movie_enhancedialog");
      sub_7D084(v592, ".austrip");
      sub_307CA0(&v568, (const void **)&__p.__r_.__value_.__l.__data_, 1701080167, (uint64_t)&__dst, (uint64_t)v592);
      if ((v592[23] & 0x80000000) != 0) {
        operator delete(*(void **)v592);
      }
      if (SHIBYTE(v544) < 0)
      {
        sub_24054(v530, (void *)v543, *((unint64_t *)&v543 + 1));
      }

      else
      {
        *(_OWORD *)v530 = v543;
        *(void *)&v530[16] = v544;
      }

      v530[24] = 1;
      else {
        v597 = v542;
      }
      v598 = 1;
      *(void *)&v593 = 0LL;
      memset(v592, 0, sizeof(v592));
      *(_OWORD *)&v595.__r_.__value_.__l.__data_ = v506;
      v595.__r_.__value_.__l.__cap_ = 2LL;
      sub_83660((uint64_t)v592, (int *)&v595, 3LL);
      sub_302438( &__p.__r_.__value_.__l.__data_,  (char *)&v543,  &v545,  (std::string *)v530,  &v597,  (uint64_t)&v508,  v82,  v96,  0.0,  (uint64_t)&__dst,  1,  (uint64_t)v592);
      sub_178254((uint64_t)&xmmword_49FA68, (uint64_t)&__p);
      v595.__r_.__value_.__r.__words[0] = (std::string::size_type)v623;
      sub_178454((void ***)&v595);
      v595.__r_.__value_.__r.__words[0] = (std::string::size_type)v622;
      sub_178454((void ***)&v595);
      if (v621 < 0) {
        operator delete(v618);
      }
      sub_830DC((uint64_t)v608);
      if (v606 < 0) {
        operator delete(v603);
      }
      v595.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      sub_1784C4((void ***)&v595);
      sub_83284((uint64_t)v592);
      if (v530[24] && (v530[23] & 0x80000000) != 0) {
        operator delete(*(void **)v530);
      }
      if ((v79 & 1) != 0)
      {
        uint64_t v155 = v550;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v550;
        if (*((void *)&v550 + 1))
        {
          BOOL v156 = (unint64_t *)(*((void *)&v550 + 1) + 8LL);
          do
            uint64_t v157 = __ldxr(v156);
          while (__stxr(v157 + 1, v156));
          unsigned int v158 = __p.__r_.__value_.__l.__size_;
        }

        else
        {
          unsigned int v158 = 0LL;
        }

        sub_143208(&xmmword_49FA68, v155, v158);
        uint64_t v163 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (!__p.__r_.__value_.__l.__size_) {
          goto LABEL_527;
        }
        v164 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          unint64_t v165 = __ldaxr(v164);
        while (__stlxr(v165 - 1, v164));
      }

      else
      {
        BOOL v159 = v549;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v549;
        if (*((void *)&v549 + 1))
        {
          uint64_t v160 = (unint64_t *)(*((void *)&v549 + 1) + 8LL);
          do
            int v161 = __ldxr(v160);
          while (__stxr(v161 + 1, v160));
          uint64_t v162 = __p.__r_.__value_.__l.__size_;
        }

        else
        {
          uint64_t v162 = 0LL;
        }

        sub_143208(&xmmword_49FA68, v159, v162);
        uint64_t v163 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (!__p.__r_.__value_.__l.__size_) {
          goto LABEL_527;
        }
        int v166 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          unint64_t v165 = __ldaxr(v166);
        while (__stlxr(v165 - 1, v166));
      }

      if (!v165)
      {
        ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
        std::__shared_weak_count::__release_weak(v163);
      }

LABEL_342:
  std::string::size_type v179 = v348;
  uint64_t v180 = *v348;
  __int128 v181 = (void *)a2;
  if (!*v348) {
    goto LABEL_353;
  }
  __int128 v182 = v348;
  do
  {
    unsigned int v183 = *(_DWORD *)(v180 + 32);
    BOOL v184 = v183 >= 0x6E637275;
    if (v183 >= 0x6E637275) {
      __int128 v185 = (uint64_t *)v180;
    }
    else {
      __int128 v185 = (uint64_t *)(v180 + 8);
    }
    if (v184) {
      __int128 v182 = (void *)v180;
    }
    uint64_t v180 = *v185;
  }

  while (*v185);
  std::string::size_type v179 = v348;
  if (v182 == v348 || *((_DWORD *)v182 + 8) > 0x6E637275u) {
LABEL_353:
  }
    __int128 v182 = v179;
  if (*(_DWORD *)(v357 + 8))
  {
    if (v182 == v348) {
      goto LABEL_393;
    }
    __int128 v186 = (os_log_t *)sub_138E8(8);
    __int128 v187 = v182 + 5;
    uint64_t v188 = *v186;
    if (*v186 && os_log_type_enabled(*v186, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3545;
      _os_log_impl( &dword_0,  v188,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to find a valid replacement route.",  buf,  0x12u);
    }

    int v189 = 1919904885;
    std::string v190 = (void *)v182[6];
    if (v190 != v187)
    {
      while (1)
      {
        sub_B8CBC((uint64_t *)buf, v190 + 2, "", 3555);
        BOOL v191 = *(void *)buf
            && (*(unsigned int (**)(void))(**(void **)buf + 152LL))(*(void *)buf)
        uint64_t v192 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8])
        {
          unint64_t v193 = (unint64_t *)(*(void *)&buf[8] + 8LL);
          do
            unint64_t v194 = __ldaxr(v193);
          while (__stlxr(v194 - 1, v193));
          if (!v194)
          {
            ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
            std::__shared_weak_count::__release_weak(v192);
          }
        }

        if (v191) {
          break;
        }
        std::string v190 = (void *)v190[1];
        if (v190 == v187) {
          goto LABEL_374;
        }
      }

      int v189 = 1919842148;
LABEL_374:
      uint64_t v195 = (void *)v182[6];
      if (v195 != v187)
      {
        while (2)
        {
          sub_B8CBC((uint64_t *)buf, v195 + 2, "", 3564);
          char v196 = (*(uint64_t (**)(void))(**(void **)buf + 152LL))(*(void *)buf);
          char v197 = v196;
          uint64_t v198 = *(std::__shared_weak_count **)&buf[8];
          if (!*(void *)&buf[8]) {
            goto LABEL_379;
          }
          v199 = (unint64_t *)(*(void *)&buf[8] + 8LL);
          do
            unint64_t v200 = __ldaxr(v199);
          while (__stlxr(v200 - 1, v199));
          if (!v200)
          {
            ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
            std::__shared_weak_count::__release_weak(v198);
            if ((v197 & 1) == 0) {
LABEL_380:
            }
              sub_85C34(&v366, v195[2], v195[3]);
          }

          else
          {
LABEL_379:
            if ((v196 & 1) == 0) {
              goto LABEL_380;
            }
          }

          uint64_t v195 = (void *)v195[1];
          if (v195 == v187) {
            break;
          }
          continue;
        }
      }
    }

    int v335 = v189;
    __int128 v181 = (void *)a2;
    sub_128F3C( (uint64_t)buf,  a2,  (_OWORD *)(a2 + 32),  a2 + 48,  (uint64_t)&v358,  a2 + 120,  *(_DWORD *)(a2 + 144),  a4,  a2 + 176,  v350,  *(_BYTE *)(a2 + 384),  (uint64_t *)(a2 + 392),  v335,  (__int128 *)(a2 + 416),  (void *)(a2 + 448));
    sub_12FFA0((uint64_t)__p, (std::__shared_weak_count *)a2, (uint64_t)buf, 0);
    sub_725DC(v357, (uint64_t)__p);
    *(void *)std::string __p = off_4709D0;
    os_signpost_id_t v201 = *(void **)&__p[16];
    if (*(void *)&__p[16])
    {
      sub_10AF78((uint64_t *)(*(void *)&__p[16] + 16LL));
      operator delete(v201);
    }

    uint64_t v202 = v357;
    if (!*(_DWORD *)(v357 + 8))
    {
      uint64_t v202 = v357;
      if (!sub_72348(*(unsigned int *)(v357 + 12)))
      {
        unint64_t v203 = (os_log_t *)sub_138E8(8);
        uint64_t v204 = *v203;
        uint64_t v202 = v357;
        if (*v203)
        {
          if (os_log_type_enabled(*v203, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = "RoutingManager.cpp";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 3567;
            _os_log_impl(&dword_0, v204, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found a valid replacement route.", __p, 0x12u);
          }
        }
      }
    }

    sub_128D54((uint64_t)buf);
    if (*(_DWORD *)(v202 + 8))
    {
LABEL_393:
      if (v368)
      {
        unint64_t v205 = v367;
        if (&v366 != v367)
        {
          uint64_t v353 = v181 + 4;
          uint64_t v356 = (uint64_t)(v181 + 57);
          uint64_t v346 = (uint64_t)(v181 + 15);
          uint64_t v347 = v181 + 6;
          uint64_t v351 = v181 + 49;
          uint64_t v344 = (__int128 *)(v181 + 52);
          uint64_t v345 = (uint64_t)(v181 + 22);
          uint64_t v343 = v181 + 56;
          BOOL v206 = v181 + 61;
          while (2)
          {
            unint64_t v207 = (std::__shared_weak_count *)v205[3];
            uint64_t v352 = v205[2];
            if (v207)
            {
              uint64_t v208 = (unint64_t *)&v207->__shared_weak_owners_;
              do
                unint64_t v209 = __ldxr(v208);
              while (__stxr(v209 + 1, v208));
            }

            int v210 = *(_DWORD *)v353;
            if (*(int *)v353 > 1668443750)
            {
              BOOL v211 = v210 == 1668443760;
              int v212 = 1668443751;
            }

            else
            {
              BOOL v211 = v210 == 1667591521;
              int v212 = 1667591533;
            }

            if (v211 || v210 == v212)
            {
              *(void *)&__p[8] = 0LL;
              *(void *)std::string __p = 0LL;
              if (v207)
              {
                v214 = std::__shared_weak_count::lock(v207);
                if (v214)
                {
                  unint64_t v215 = v214;
                  BOOL v216 = (unint64_t *)&v214->__shared_weak_owners_;
                  do
                    unint64_t v217 = __ldxr(v216);
                  while (__stxr(v217 + 1, v216));
                  *(void *)std::string __p = v352;
                  *(void *)&__p[8] = v214;
                  v218 = (unint64_t *)&v214->__shared_owners_;
                  do
                    unint64_t v219 = __ldaxr(v218);
                  while (__stlxr(v219 - 1, v218));
                  if (!v219)
                  {
                    ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
                    std::__shared_weak_count::__release_weak(v215);
                  }
                }

                else
                {
                  *(void *)&__p[8] = 0LL;
                  *(void *)std::string __p = 0LL;
                }
              }

              sub_B8F68((uint64_t *)buf, (uint64_t *)__p, "", 1153);
              if ((*(unsigned int (**)(void))(**(void **)buf + 152LL))(*(void *)buf)
                && (*(unsigned int (**)(void))(**(void **)buf + 408LL))(*(void *)buf)
                && (*(unsigned int (**)(void))(**(void **)buf + 400LL))(*(void *)buf) == 2)
              {
                sub_57ADC(v347, 0x7073706Bu, 1886613611);
              }

              int v220 = *(std::__shared_weak_count **)&buf[8];
              if (*(void *)&buf[8])
              {
                BOOL v221 = (unint64_t *)(*(void *)&buf[8] + 8LL);
                do
                  unint64_t v222 = __ldaxr(v221);
                while (__stlxr(v222 - 1, v221));
                if (!v222)
                {
                  ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
                  std::__shared_weak_count::__release_weak(v220);
                }
              }

              if (*(void *)&__p[8]) {
                std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__p[8]);
              }
            }

            if (v181[59])
            {
              uint64_t v223 = v181[58];
LABEL_429:
              if (v223 == v356) {
                goto LABEL_450;
              }
              for (uint64_t k = *(void *)(v223 + 32); ; uint64_t k = *(void *)(k + 8))
              {
                if (k == v223 + 24)
                {
                  uint64_t v223 = *(void *)(v223 + 8);
                  goto LABEL_429;
                }

                if (*(void *)(k + 40)) {
                  break;
                }
              }

              if (v207)
              {
                unsigned int v225 = std::__shared_weak_count::lock(v207);
                std::string::size_type v226 = v225;
                if (v225)
                {
                  unint64_t v227 = (unint64_t *)&v225->__shared_weak_owners_;
                  do
                    unint64_t v228 = __ldxr(v227);
                  while (__stxr(v228 + 1, v227));
                  uint64_t v229 = (unint64_t *)&v225->__shared_owners_;
                  do
                    unint64_t v230 = __ldaxr(v229);
                  while (__stlxr(v230 - 1, v229));
                  if (!v230)
                  {
                    ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
                    std::__shared_weak_count::__release_weak(v226);
                  }

                  uint64_t v231 = v352;
                }

                else
                {
                  uint64_t v231 = 0LL;
                }
              }

              else
              {
                uint64_t v231 = 0LL;
                std::string::size_type v226 = 0LL;
              }

              BOOL v232 = sub_DE274(v356, v231, v226);
              if (v226) {
                std::__shared_weak_count::__release_weak(v226);
              }
              if (!v232)
              {
                char v248 = 0;
                if (!v207) {
                  goto LABEL_556;
                }
                goto LABEL_555;
              }

              if (v181[59])
              {
LABEL_450:
                uint64_t v233 = *(os_log_s **)sub_138E8(8);
                if (v233)
                {
                  log = v233;
                  if (os_log_type_enabled(v233, OS_LOG_TYPE_DEBUG))
                  {
                    memset(&v362, 0, sizeof(v362));
                    std::string::append(&v362, "[ ", 2uLL);
                    sub_DE128((std::string *)buf, v356);
                    if (buf[23] >= 0) {
                      unint64_t v234 = buf;
                    }
                    else {
                      unint64_t v234 = *(const std::string::value_type **)buf;
                    }
                    if (buf[23] >= 0) {
                      std::string::size_type v235 = buf[23];
                    }
                    else {
                      std::string::size_type v235 = *(void *)&buf[8];
                    }
                    std::string::append(&v362, v234, v235);
                    if ((buf[23] & 0x80000000) != 0) {
                      operator delete(*(void **)buf);
                    }
                    std::string::append(&v362, "; ", 2uLL);
                    sub_7D084(v409, "{ ");
                    sub_1005DC((uint64_t)buf, (__int128 *)v409);
                    uint64_t v236 = (void *)v181[60];
                    while (v236 != v206)
                    {
                      unint64_t v237 = v236;
                      int64x2_t v238 = (void *)v236[1];
                      uint64_t v239 = v236;
                      if (v238)
                      {
                        do
                        {
                          uint64_t v236 = v238;
                          int64x2_t v238 = (void *)*v238;
                        }

                        while (v238);
                      }

                      else
                      {
                        do
                        {
                          uint64_t v236 = (void *)v239[2];
                          BOOL v156 = *v236 == (void)v239;
                          uint64_t v239 = v236;
                        }

                        while (!v156);
                      }

                      sub_826EC(&buf[16], (uint64_t)"[ ", 2LL);
                      sub_B8CBC((uint64_t *)&v376, v237 + 4, "", 31);
                      uint64_t v240 = (void *)std::ostream::operator<<(&buf[16], v376.n128_u64[0]);
                      sub_826EC(v240, (uint64_t)": ", 2LL);
                      sub_238850(v409, (unsigned int **)v237 + 6);
                      if ((v409[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
                        int v241 = v409;
                      }
                      else {
                        int v241 = (std::string *)v409[0].__r_.__value_.__r.__words[0];
                      }
                      if ((v409[0].__r_.__value_.__s.__size_ & 0x80u) == 0) {
                        uint64_t size = v409[0].__r_.__value_.__s.__size_;
                      }
                      else {
                        uint64_t size = v409[0].__r_.__value_.__l.__size_;
                      }
                      sub_826EC(v240, (uint64_t)v241, size);
                      if (v236 == v206) {
                        unsigned int v243 = " ]";
                      }
                      else {
                        unsigned int v243 = " ],";
                      }
                      if (v236 == v206) {
                        uint64_t v244 = 2LL;
                      }
                      else {
                        uint64_t v244 = 3LL;
                      }
                      sub_826EC(v240, (uint64_t)v243, v244);
                      uint64_t v245 = (std::__shared_weak_count *)v376.n128_u64[1];
                      if (v376.n128_u64[1])
                      {
                        uint64_t v246 = (unint64_t *)(v376.n128_u64[1] + 8);
                        do
                          unint64_t v247 = __ldaxr(v246);
                        while (__stlxr(v247 - 1, v246));
                        if (!v247)
                        {
                          ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
                          std::__shared_weak_count::__release_weak(v245);
                        }
                      }
                    }

                    sub_826EC(&buf[16], (uint64_t)" }", 2LL);
                    sub_82924(&v373, (uint64_t)&buf[24]);
                    *(void *)buf = v339;
                    *(void *)&buf[*(void *)(v339 - 24)] = v338;
                    *(void *)&_DWORD buf[16] = v337;
                    __int128 v181 = (void *)a2;
                    if (v412 < 0) {
                      operator delete(v411);
                    }
                    std::streambuf::~streambuf(&buf[24]);
                    std::ios::~ios(&v413);
                    if (v375 >= 0) {
                      unint64_t v249 = (const std::string::value_type *)&v373;
                    }
                    else {
                      unint64_t v249 = (const std::string::value_type *)v373;
                    }
                    if (v375 >= 0) {
                      std::string::size_type v250 = HIBYTE(v375);
                    }
                    else {
                      std::string::size_type v250 = (std::string::size_type)v374;
                    }
                    std::string::append(&v362, v249, v250);
                    if (SHIBYTE(v375) < 0) {
                      operator delete(v373);
                    }
                    unsigned int v251 = &v362;
                    if ((v362.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                      unsigned int v251 = (std::string *)v362.__r_.__value_.__r.__words[0];
                    }
                    *(_DWORD *)std::string __p = 136315650;
                    *(void *)&__p[4] = "RoutingManager.cpp";
                    *(_WORD *)&__p[12] = 1024;
                    *(_DWORD *)&__p[14] = 3594;
                    *(_WORD *)&__p[18] = 2080;
                    *(void *)&__p[20] = v251;
                    _os_log_impl( &dword_0,  log,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Port update has invalidated the route cache: %s.",  __p,  0x1Cu);
                  }
                }

                if (v181[59])
                {
                  unint64_t v252 = (os_log_t *)sub_138E8(8);
                  char v253 = *v252;
                  if (*v252)
                  {
                    if (os_log_type_enabled(*v252, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 136315394;
                      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
                      *(_WORD *)&_BYTE buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 3595;
                      _os_log_impl( &dword_0,  v253,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d There are no cached concrete routes.",  buf,  0x12u);
                    }
                  }
                }
              }
            }

            v254 = (os_log_t *)sub_138E8(8);
            uint64_t v255 = *v254;
            if (*v254 && os_log_type_enabled(*v254, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3596;
              _os_log_impl( &dword_0,  v255,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to find a valid replacement route.",  buf,  0x12u);
            }

            *(void *)&__p[8] = 0LL;
            *(void *)std::string __p = 0LL;
            if (v207)
            {
              unint64_t v256 = std::__shared_weak_count::lock(v207);
              if (v256)
              {
                char v257 = v256;
                std::string::size_type v258 = (unint64_t *)&v256->__shared_weak_owners_;
                do
                  unint64_t v259 = __ldxr(v258);
                while (__stxr(v259 + 1, v258));
                *(void *)std::string __p = v352;
                *(void *)&__p[8] = v256;
                char v260 = (unint64_t *)&v256->__shared_owners_;
                do
                  unint64_t v261 = __ldaxr(v260);
                while (__stlxr(v261 - 1, v260));
                if (!v261)
                {
                  ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
                  std::__shared_weak_count::__release_weak(v257);
                }
              }

              else
              {
                *(void *)&__p[8] = 0LL;
                *(void *)std::string __p = 0LL;
              }
            }

            sub_B8F68((uint64_t *)buf, (uint64_t *)__p, "", 1079);
            if (*(void *)buf)
            {
              char v262 = (*(uint64_t (**)(void))(**(void **)buf + 152LL))(*(void *)buf);
              uint64_t v263 = **(void **)buf;
              if ((v262 & 1) != 0)
              {
                if ((*(unsigned int (**)(void))(v263 + 408))())
                {
                  int v264 = 1919904885;
                }

                else
                {
                  int v264 = 1919184754;
                }
              }

              else if ((*(unsigned int (**)(void))(v263 + 288))())
              {
                int v264 = 1920168053;
              }

              else
              {
                int v264 = 1919904885;
              }
            }

            else
            {
LABEL_524:
              int v264 = 1919971701;
            }

            unint64_t v265 = *(std::__shared_weak_count **)&buf[8];
            if (*(void *)&buf[8])
            {
              unint64_t v266 = (unint64_t *)(*(void *)&buf[8] + 8LL);
              do
                unint64_t v267 = __ldaxr(v266);
              while (__stlxr(v267 - 1, v266));
              if (!v267)
              {
                ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
                std::__shared_weak_count::__release_weak(v265);
              }
            }

            if (*(void *)&__p[8]) {
              std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&__p[8]);
            }
            int v336 = v264;
            __int128 v181 = (void *)a2;
            sub_128F3C( (uint64_t)buf,  a2,  v353,  (uint64_t)v347,  (uint64_t)&v358,  v346,  *(_DWORD *)(a2 + 144),  a4,  v345,  v350,  *(_BYTE *)(a2 + 384),  v351,  v336,  v344,  v343);
            sub_12FFA0((uint64_t)__p, (std::__shared_weak_count *)a2, (uint64_t)buf, 0);
            sub_725DC(v357, (uint64_t)__p);
            *(void *)std::string __p = off_4709D0;
            uint64_t v268 = *(void **)&__p[16];
            if (*(void *)&__p[16])
            {
              sub_10AF78((uint64_t *)(*(void *)&__p[16] + 16LL));
              operator delete(v268);
            }

            if (*(_DWORD *)(v357 + 8))
            {
              uint64_t v269 = (os_log_t *)sub_138E8(8);
              int v270 = *v269;
              if (*v269 && os_log_type_enabled(*v269, OS_LOG_TYPE_DEBUG))
              {
                sub_2CA1C(v409, 1668505974LL);
                v271 = v409;
                if ((v409[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  v271 = (std::string *)v409[0].__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)std::string __p = 136315650;
                *(void *)&__p[4] = "RoutingManager.cpp";
                *(_WORD *)&__p[12] = 1024;
                *(_DWORD *)&__p[14] = 3606;
                *(_WORD *)&__p[18] = 2080;
                *(void *)&__p[20] = v271;
                _os_log_impl( &dword_0,  v270,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d The current category is no longer able to establish a route. Reasserting the default category, '%s'.",  __p,  0x1Cu);
              }

              strcpy(__p, "vascfdmi");
              __p[12] = 0;
              *(void *)&__p[24] = 0LL;
              uint64_t v378 = 0LL;
              v380[0] = 0LL;
              v380[1] = 0LL;
              *(void *)&__p[16] = &__p[24];
              uint64_t v379 = v380;
              v381[0] = 0LL;
              v381[1] = 0LL;
              v382[0] = 0LL;
              v382[1] = 0LL;
              v380[2] = v381;
              v381[2] = v382;
              v383[0] = 0LL;
              v383[1] = 0LL;
              v382[2] = v383;
              char v384 = 0;
              char v385 = 0;
              int v386 = 1668248944;
              int v387 = 1852796517;
              uint64_t v388 = 0LL;
              uint64_t v389 = 0LL;
              uint64_t v390 = 0LL;
              uint64_t v391 = 0x756E64656175746FLL;
              int v403 = 0;
              *(_OWORD *)&v399[8] = 0u;
              __int128 v392 = 0u;
              __int128 v393 = 0u;
              __int128 v394 = 0u;
              __int128 v395 = 0u;
              __int128 v396 = 0u;
              uint64_t v397 = 1065353216LL;
              __int128 v398 = 0u;
              *(_OWORD *)uint64_t v399 = 0u;
              *(_DWORD *)&v399[16] = 1065353216;
              __int128 v400 = 0u;
              __int128 v401 = 0u;
              int v402 = 1065353216;
              char v404 = 0;
              char v405 = 0;
              char v407 = 0;
              char v408 = 0;
              int v406 = 0;
              sub_12DC98((uint64_t)v409, a2, (uint64_t)__p, v351, 1919118966);
              sub_725DC(v357, (uint64_t)v409);
              v409[0].__r_.__value_.__r.__words[0] = (std::string::size_type)off_4709D0;
              int64_t cap = (void *)v409[0].__r_.__value_.__l.__cap_;
              if (v409[0].__r_.__value_.__l.__cap_)
              {
                sub_10AF78((uint64_t *)(v409[0].__r_.__value_.__l.__cap_ + 16));
                operator delete(cap);
              }

              sub_53068((uint64_t)__p);
              if (*(_DWORD *)(v357 + 8))
              {
                unint64_t v273 = (os_log_t *)sub_138E8(8);
                std::string::size_type v274 = *v273;
                if (*v273)
                {
                  if (os_log_type_enabled(*v273, OS_LOG_TYPE_ERROR))
                  {
                    sub_2CA1C(v409, 1668505974LL);
                    v275 = v409;
                    if ((v409[0].__r_.__value_.__s.__size_ & 0x80u) != 0) {
                      v275 = (std::string *)v409[0].__r_.__value_.__r.__words[0];
                    }
                    *(_DWORD *)std::string __p = 136315650;
                    *(void *)&__p[4] = "RoutingManager.cpp";
                    *(_WORD *)&__p[12] = 1024;
                    *(_DWORD *)&__p[14] = 3608;
                    *(_WORD *)&__p[18] = 2080;
                    *(void *)&__p[20] = v275;
                    _os_log_impl( &dword_0,  v274,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Failed to reassert the default category, '%s'. Major error, though recoverable if we lea ve this category or (potentially) if new ports are connected.",  __p,  0x1Cu);
                  }
                }
              }
            }

            sub_128D54((uint64_t)buf);
            char v248 = 1;
            if (!v207) {
              goto LABEL_556;
            }
LABEL_555:
            std::__shared_weak_count::__release_weak(v207);
LABEL_556:
            unint64_t v205 = (uint64_t *)v205[1];
            if (&v366 == v205) {
              char v276 = 1;
            }
            else {
              char v276 = v248;
            }
            if ((v276 & 1) != 0) {
              break;
            }
            continue;
          }
        }
      }
    }
  }

  std::string v277 = v348;
  uint64_t v278 = *v348;
  if (*v348)
  {
    do
    {
      unsigned int v279 = *(_DWORD *)(v278 + 32);
      BOOL v280 = v279 >= 0x70707570;
      if (v279 >= 0x70707570) {
        uint64_t v281 = (uint64_t *)v278;
      }
      else {
        uint64_t v281 = (uint64_t *)(v278 + 8);
      }
      if (v280) {
        std::string v277 = (void *)v278;
      }
      uint64_t v278 = *v281;
    }

    while (*v281);
    if (v277 == v348)
    {
      uint64_t v354 = v348;
    }

    else
    {
      uint64_t v354 = v348;
      if (*((_DWORD *)v277 + 8) <= 0x70707570u)
      {
        if (*(_DWORD *)(v357 + 8))
        {
          uint64_t v282 = (os_log_t *)sub_138E8(8);
          int64x2_t v283 = v277 + 5;
          int64x2_t v284 = *v282;
          if (*v282 && os_log_type_enabled(*v282, OS_LOG_TYPE_DEBUG))
          {
            sub_2D9BB0((std::string *)__p, (uint64_t)(v277 + 5), 1);
            uint64_t v285 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3632;
            *(_WORD *)&_BYTE buf[18] = 2080;
            *(void *)&buf[20] = v285;
            _os_log_impl(&dword_0, v284, OS_LOG_TYPE_DEBUG, "%25s:%-5d port properties updated: %s", buf, 0x1Cu);
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
          }

          v286 = (void *)v277[6];
          if (v286 != v283)
          {
            while (1)
            {
              uint64_t v287 = (std::__shared_weak_count *)v286[3];
              if (v287)
              {
                uint64_t v288 = std::__shared_weak_count::lock(v287);
                uint64_t v289 = v288;
                if (v288)
                {
                  uint64_t v290 = v286[2];
                  uint64_t v291 = (unint64_t *)&v288->__shared_weak_owners_;
                  do
                    unint64_t v292 = __ldxr(v291);
                  while (__stxr(v292 + 1, v291));
                  v293 = (unint64_t *)&v288->__shared_owners_;
                  do
                    unint64_t v294 = __ldaxr(v293);
                  while (__stlxr(v294 - 1, v293));
                  if (!v294)
                  {
                    ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
                    std::__shared_weak_count::__release_weak(v289);
                  }
                }

                else
                {
                  uint64_t v290 = 0LL;
                }
              }

              else
              {
                uint64_t v290 = 0LL;
                uint64_t v289 = 0LL;
              }

              BOOL v295 = sub_DE274(a2 + 456, v290, v289);
              if (v289) {
                std::__shared_weak_count::__release_weak(v289);
              }
              if (v295) {
                break;
              }
              v286 = (void *)v286[1];
              if (v286 == v283) {
                goto LABEL_598;
              }
            }

            sub_128F3C( (uint64_t)buf,  a2,  (_OWORD *)(a2 + 32),  a2 + 48,  (uint64_t)&v358,  a2 + 120,  *(_DWORD *)(a2 + 144),  a4,  a2 + 176,  v350,  *(_BYTE *)(a2 + 384),  (uint64_t *)(a2 + 392),  1919971427,  (__int128 *)(a2 + 416),  (void *)(a2 + 448));
            sub_12FFA0((uint64_t)__p, (std::__shared_weak_count *)a2, (uint64_t)buf, 0);
            sub_725DC(v357, (uint64_t)__p);
            *(void *)std::string __p = off_4709D0;
            std::string v296 = *(void **)&__p[16];
            if (*(void *)&__p[16])
            {
              sub_10AF78((uint64_t *)(*(void *)&__p[16] + 16LL));
              operator delete(v296);
            }

            sub_128D54((uint64_t)buf);
          }
        }

        goto LABEL_598;
      }
    }
  }

  else
  {
LABEL_598:
    uint64_t v354 = v277;
  }

  uint64_t v297 = sub_138E8(8);
  if ((*(_BYTE *)(v297 + 8) & 1) != 0)
  {
    v298 = *(os_log_s **)v297;
    if (*(void *)v297)
    {
      if (os_log_type_enabled(*(os_log_t *)v297, OS_LOG_TYPE_DEBUG))
      {
        __int16 v299 = "";
        if (*(void *)(a2 + 504) == *(void *)(a2 + 512)) {
          __int16 v299 = "(empty)";
        }
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3644;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = v299;
        _os_log_impl(&dword_0, v298, OS_LOG_TYPE_DEBUG, "%25s:%-5d Final state of mCachedPortStack: %s", buf, 0x1Cu);
      }
    }
  }

  v300 = *(os_unfair_lock_s ***)(a2 + 504);
  for (m = *(os_unfair_lock_s ***)(a2 + 512); v300 != m; v300 += 2)
  {
    uint64_t v302 = sub_138E8(8);
    if ((*(_BYTE *)(v302 + 8) & 1) != 0)
    {
      v303 = *(os_log_s **)v302;
      if (*(void *)v302)
      {
        if (os_log_type_enabled(*(os_log_t *)v302, OS_LOG_TYPE_DEBUG))
        {
          sub_D3ECC(__p, v300);
          uint64_t v304 = __p;
          if (__p[23] < 0) {
            uint64_t v304 = *(_BYTE **)__p;
          }
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3646;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v304;
          _os_log_impl(&dword_0, v303, OS_LOG_TYPE_DEBUG, "%25s:%-5d port: %s", buf, 0x1Cu);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }
      }
    }
  }

  if (v16 == v348 && v182 == v348 && v354 == v348)
  {
    uint64_t v332 = (os_log_t *)sub_138E8(13);
    int v333 = *v332;
    if (*v332 && os_log_type_enabled(*v332, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3651;
      _os_log_impl( &dword_0,  v333,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): inPortUpdateMap contains no supported keys.",  buf,  0x12u);
    }

    v334 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v334, "inPortUpdateMap contains no supported keys.");
  }

  int v305 = *(_DWORD *)(v357 + 8);
  if (v305 == 1)
  {
    uint64_t v306 = sub_138E8(8);
    uint64_t v307 = sub_138E8(34);
    char v308 = 0;
    uint64_t v309 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v310 = *(void *)(v306 + 8);
    while (1)
    {
      uint64_t v311 = *(int *)&buf[4 * v309];
      char v312 = v308;
      if (((v310 & v311) != 0) != ((*(void *)(v307 + 8) & v311) != 0)) {
        break;
      }
      char v308 = 1;
      uint64_t v309 = 1LL;
      if ((v312 & 1) != 0) {
        goto LABEL_624;
      }
    }

    if ((v310 & v311) == 0) {
      uint64_t v306 = v307;
    }
LABEL_624:
    v313 = *(os_log_s **)v306;
    if (v313 && os_log_type_enabled(v313, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3655;
      _os_log_impl( &dword_0,  v313,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Port update completed without a route change (there is no supported route in the current category for the updated port(s).)",  buf,  0x12u);
    }

    sub_72210((uint64_t)buf, 1920099684LL);
    sub_725DC(v357, (uint64_t)buf);
    *(void *)buf = off_4709D0;
    CFTypeRef v314 = *(void **)&buf[16];
    if (*(void *)&buf[16])
    {
      sub_10AF78((uint64_t *)(*(void *)&buf[16] + 16LL));
      operator delete(v314);
    }

    int v305 = *(_DWORD *)(v357 + 8);
  }

  if (v305)
  {
    uint64_t v315 = sub_138E8(8);
    uint64_t v316 = sub_138E8(34);
    char v317 = 0;
    uint64_t v318 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v319 = *(void *)(v315 + 8);
    while (1)
    {
      uint64_t v320 = *(int *)&buf[4 * v318];
      char v321 = v317;
      if (((v319 & v320) != 0) != ((*(void *)(v316 + 8) & v320) != 0)) {
        break;
      }
      char v317 = 1;
      uint64_t v318 = 1LL;
      if ((v321 & 1) != 0) {
        goto LABEL_637;
      }
    }

    if ((v319 & v320) == 0) {
      uint64_t v315 = v316;
    }
LABEL_637:
    uint64_t v322 = *(os_log_s **)v315;
    if (v322 && os_log_type_enabled(v322, OS_LOG_TYPE_ERROR))
    {
      sub_FD164((std::string *)__p, v340);
      uint64_t v323 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
      int v324 = *(_DWORD *)(v357 + 8);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3659;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v323;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = v324;
      _os_log_impl( &dword_0,  v322,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Port update with port map '%s' failed with result %d.",  buf,  0x22u);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
  }

  sub_11AD14(v361);
  sub_FF3B8(v359);
  sub_85B80(&v363);
  sub_85B80(&v366);
  if (v341) {
    (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  }
}

void sub_12D74C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, int a23, int a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,uint64_t a62,uint64_t a63)
{
  STACK[0x3F0] = (unint64_t)&STACK[0x220];
  sub_A0CF0((void ***)&STACK[0x3F0]);
  sub_85B80(&a63);
  sub_85B80(&a66);
  if (a24) {
    (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_12DC98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5)
{
  if (((*(uint64_t (**)(void))(qword_48F828 + 48))() & 1) == 0)
  {
    unint64_t v259 = (os_log_t *)sub_138E8(13);
    char v260 = *v259;
    if (*v259 && os_log_type_enabled(*v259, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 4336;
      _os_log_impl( &dword_0,  v260,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  int64x2_t v283 = a4;
  int v282 = a5;
  if ((a5 != 1919907442) != (*(void *)(a3 + 32) == 0LL))
  {
    char v262 = (os_log_t *)sub_138E8(13);
    uint64_t v263 = *v262;
    if (*v262 && os_log_type_enabled(*v262, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 4338;
      _os_log_impl( &dword_0,  v263,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)buf,  0x12u);
    }

    int v264 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v264, "Precondition failure.");
  }

  uint64_t v10 = sub_138E8(8);
  uint64_t v11 = sub_138E8(34);
  char v12 = 0;
  uint64_t v13 = 0LL;
  *(void *)buf = 0x100000002LL;
  uint64_t v14 = *(void *)(v10 + 8);
  while (1)
  {
    uint64_t v15 = (int)buf[v13];
    char v16 = v12;
    if (((v14 & v15) != 0) != ((*(void *)(v11 + 8) & v15) != 0)) {
      break;
    }
    char v12 = 1;
    uint64_t v13 = 1LL;
    if ((v16 & 1) != 0) {
      goto LABEL_9;
    }
  }

  if ((v14 & v15) == 0) {
    uint64_t v10 = v11;
  }
LABEL_9:
  unsigned int v17 = *(os_log_s **)v10;
  if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
  {
    sub_2DBA00(&__p, a3);
    uint64_t v18 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
    buf[0] = 136315650;
    *(void *)&buf[1] = "RoutingManager.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 4340;
    HIWORD(buf[4]) = 2080;
    *(void *)&buf[5] = v18;
    _os_log_impl(&dword_0, v17, OS_LOG_TYPE_INFO, "%25s:%-5d Set route configuration %s.", (uint8_t *)buf, 0x1Cu);
  }

  if (*(_BYTE *)(a3 + 364)) {
    *(_DWORD *)(a2 + 552) = *(_DWORD *)(a3 + 360) == 1;
  }
  sub_53118((uint64_t)&__p, (uint64_t *)a2, a3);
  sub_6DD4();
  if (((*(uint64_t (**)(void))(qword_48F828 + 48))() & 1) == 0)
  {
    unint64_t v265 = (os_log_t *)sub_138E8(13);
    unint64_t v266 = *v265;
    if (*v265 && os_log_type_enabled(*v265, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 4933;
      _os_log_impl( &dword_0,  v266,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)buf,  0x12u);
    }

    unint64_t v267 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v267, "Precondition failure.");
  }

  v287[0] = (uint64_t)v287;
  v287[1] = (uint64_t)v287;
  uint64_t v288 = 0LL;
  int v19 = v293;
  if (v293 == 1986357346)
  {
    if ((sub_E450C(1986357346) & 1) != 0)
    {
      int v19 = v293;
      goto LABEL_27;
    }

    memset(buf, 0, 24);
    strcpy((char *)&buf[6], "cwdv");
    LOBYTE(buf[8]) = 0;
    int v310 = 3;
    uint64_t v313 = 0LL;
    char v312 = 0LL;
    uint64_t v311 = &v312;
    int v314 = 44739242;
    CFTypeRef cf = 0LL;
    uint64_t v35 = operator new(4uLL);
    _DWORD *v35 = 1886614633;
    *(void *)buf = v35;
    *(void *)&buf[2] = v35 + 1;
    *(void *)&uint8_t buf[4] = v35 + 1;
    int64x2_t v37 = sub_7A890(2uLL);
    __int16 v38 = *(char **)&buf[2];
    std::string::size_type v39 = *(char **)buf;
    v37[1] = 1886609775;
    os_signpost_id_t v40 = (char *)(v37 + 1);
    unint64_t v41 = (char *)(v37 + 2);
    while (v38 != v39)
    {
      int v42 = *((_DWORD *)v38 - 1);
      v38 -= 4;
      *((_DWORD *)v40 - 1) = v42;
      v40 -= 4;
    }

    *(void *)buf = v40;
    *(void *)&buf[2] = v37 + 2;
    *(void *)&uint8_t buf[4] = &v37[v36];
    if (v39) {
      operator delete(v39);
    }
    *(void *)&buf[2] = v41;
    if ((sub_14C300() & 1) == 0)
    {
      uint64_t v43 = *(_DWORD **)&buf[2];
      unint64_t v44 = *(void *)&buf[4];
      if (*(void *)&buf[2] >= *(void *)&buf[4])
      {
        BOOL v57 = *(_DWORD **)buf;
        uint64_t v58 = (uint64_t)(*(void *)&buf[2] - *(void *)buf) >> 2;
        unint64_t v59 = v58 + 1;
        uint64_t v60 = *(void *)&buf[4] - *(void *)buf;
        BOOL v215 = (unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL;
        unint64_t v61 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v215) {
          unint64_t v61 = v59;
        }
        if (v61)
        {
          unint64_t v61 = (unint64_t)sub_7A890(v61);
          uint64_t v43 = *(_DWORD **)&buf[2];
          BOOL v57 = *(_DWORD **)buf;
        }

        else
        {
          uint64_t v62 = 0LL;
        }

        char v63 = (_DWORD *)(v61 + 4 * v58);
        unint64_t v44 = v61 + 4 * v62;
        *char v63 = 1886614639;
        uint64_t v45 = v63 + 1;
        while (v43 != v57)
        {
          int v64 = *--v43;
          *--char v63 = v64;
        }

        *(void *)buf = v63;
        *(void *)&buf[2] = v45;
        *(void *)&uint8_t buf[4] = v44;
        if (v57)
        {
          operator delete(v57);
          unint64_t v44 = *(void *)&buf[4];
        }
      }

      else
      {
        **(_DWORD **)&buf[2] = 1886614639;
        uint64_t v45 = v43 + 1;
      }

      *(void *)&buf[2] = v45;
      if ((unint64_t)v45 >= v44)
      {
        uint64_t v66 = *(_DWORD **)buf;
        uint64_t v67 = ((uint64_t)v45 - *(void *)buf) >> 2;
        unint64_t v68 = v67 + 1;
        uint64_t v69 = v44 - *(void *)buf;
        if (v69 >> 1 > v68) {
          unint64_t v68 = v69 >> 1;
        }
        BOOL v215 = (unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL;
        unint64_t v70 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v215) {
          unint64_t v70 = v68;
        }
        if (v70)
        {
          unint64_t v70 = (unint64_t)sub_7A890(v70);
          uint64_t v45 = *(_DWORD **)&buf[2];
          uint64_t v66 = *(_DWORD **)buf;
        }

        else
        {
          uint64_t v71 = 0LL;
        }

        unsigned int v72 = (_DWORD *)(v70 + 4 * v67);
        unint64_t v73 = v70 + 4 * v71;
        *unsigned int v72 = 1886614625;
        uint64_t v65 = v72 + 1;
        while (v45 != v66)
        {
          int v74 = *--v45;
          *--unsigned int v72 = v74;
        }

        *(void *)buf = v72;
        *(void *)&buf[2] = v65;
        *(void *)&uint8_t buf[4] = v73;
        if (v66) {
          operator delete(v66);
        }
      }

      else
      {
        *uint64_t v45 = 1886614625;
        uint64_t v65 = v45 + 1;
      }

      *(void *)&buf[2] = v65;
    }

    uint64_t v75 = sub_546E0();
    *(void *)uint64_t v316 = &off_470B88;
    *(void *)&v316[24] = v316;
    sub_FF3FC(&v302, v75, (unsigned int **)buf, (uint64_t)v316);
    sub_85B80(v287);
    uint64_t v76 = v304;
    if (v304)
    {
      __int16 v77 = v303;
      uint64_t v78 = v302;
      uint64_t v79 = *v303;
      *(void *)(v79 + 8) = *(void *)(v302 + 8);
      **(void **)(v78 + 8) = v79;
      uint64_t v80 = v287[0];
      *(void *)(v287[0] + 8) = v77;
      *__int16 v77 = v80;
      *(void *)(v78 + 8) = v287;
      v287[0] = v78;
      uint64_t v288 = (uint64_t *)((char *)v288 + v76);
      uint64_t v304 = 0LL;
    }

    sub_85B80(&v302);
    uint64_t v81 = *(void **)&v316[24];
    if (*(_BYTE **)&v316[24] == v316)
    {
      uint64_t v82 = 4LL;
      uint64_t v81 = v316;
    }

    else
    {
      if (!*(void *)&v316[24]) {
        goto LABEL_109;
      }
      uint64_t v82 = 5LL;
    }

    (*(void (**)(void))(*v81 + 8 * v82))();
LABEL_109:
    if (!v288)
    {
      unint64_t v272 = (os_log_t *)sub_138E8(13);
      unint64_t v273 = *v272;
      if (*v272 && os_log_type_enabled(*v272, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v316 = 136315394;
        *(void *)&v316[4] = "RoutingManager.cpp";
        *(_WORD *)&v316[12] = 1024;
        *(_DWORD *)&v316[14] = 4965;
        _os_log_impl( &dword_0,  v273,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Could not find CarPlay device for activation",  v316,  0x12u);
      }

      std::string::size_type v274 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v274, "Could not find CarPlay device for activation");
    }

    CFTypeRef v56 = cf;
    if (!cf) {
      goto LABEL_112;
    }
LABEL_111:
    CFRelease(v56);
LABEL_112:
    sub_32C8C(v312);
    if (*(void *)buf)
    {
      *(void *)&buf[2] = *(void *)buf;
      operator delete(*(void **)buf);
    }

    goto LABEL_114;
  }

  if (v293 == 1651794544)
  {
    memset(buf, 0, 24);
    strcpy((char *)&buf[6], "cwdv");
    LOBYTE(buf[8]) = 0;
    int v310 = 3;
    uint64_t v313 = 0LL;
    char v312 = 0LL;
    uint64_t v311 = &v312;
    int v314 = 44739242;
    CFTypeRef cf = 0LL;
    BOOL v20 = operator new(4uLL);
    _DWORD *v20 = 1886216820;
    *(void *)buf = v20;
    *(void *)&buf[2] = v20 + 1;
    *(void *)&uint8_t buf[4] = v20 + 1;
    unint64_t v22 = sub_7A890(2uLL);
    uint64_t v23 = *(char **)&buf[2];
    unsigned int v24 = *(char **)buf;
    v22[1] = 1885892706;
    BOOL v25 = (char *)(v22 + 1);
    uint64_t v26 = (char *)(v22 + 2);
    while (v23 != v24)
    {
      int v27 = *((_DWORD *)v23 - 1);
      v23 -= 4;
      *((_DWORD *)v25 - 1) = v27;
      v25 -= 4;
    }

    *(void *)buf = v25;
    *(void *)&buf[2] = v22 + 2;
    *(void *)&uint8_t buf[4] = &v22[v21];
    if (v24) {
      operator delete(v24);
    }
    *(void *)&buf[2] = v26;
    if ((v296 & 0x80u) == 0) {
      p_s1 = (const UInt8 *)&__s1;
    }
    else {
      p_s1 = (const UInt8 *)__s1;
    }
    if (p_s1)
    {
      if ((v296 & 0x80u) == 0) {
        size_t v32 = v296;
      }
      else {
        size_t v32 = __n;
      }
      CFStringRef v33 = CFStringCreateWithBytes(0LL, p_s1, v32, 0x8000100u, 0);
      if (!v33)
      {
        unsigned __int16 v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v34, "Could not construct");
      }
    }

    else
    {
      CFStringRef v33 = 0LL;
    }

    CFTypeRef v46 = cf;
    CFTypeRef cf = v33;
    if (v46) {
      CFRelease(v46);
    }
    uint64_t v47 = sub_546E0();
    *(void *)uint64_t v316 = &off_470B88;
    *(void *)&v316[24] = v316;
    sub_FF3FC(&v302, v47, (unsigned int **)buf, (uint64_t)v316);
    sub_85B80(v287);
    uint64_t v48 = v304;
    if (v304)
    {
      BOOL v49 = v303;
      uint64_t v50 = v302;
      uint64_t v51 = *v303;
      *(void *)(v51 + 8) = *(void *)(v302 + 8);
      **(void **)(v50 + 8) = v51;
      uint64_t v52 = v287[0];
      *(void *)(v287[0] + 8) = v49;
      *BOOL v49 = v52;
      *(void *)(v50 + 8) = v287;
      v287[0] = v50;
      uint64_t v288 = (uint64_t *)((char *)v288 + v48);
      uint64_t v304 = 0LL;
    }

    sub_85B80(&v302);
    uint64_t v53 = *(void **)&v316[24];
    if (*(_BYTE **)&v316[24] == v316)
    {
      uint64_t v54 = 4LL;
      uint64_t v53 = v316;
    }

    else
    {
      if (!*(void *)&v316[24]) {
        goto LABEL_65;
      }
      uint64_t v54 = 5LL;
    }

    (*(void (**)(void))(*v53 + 8 * v54))();
LABEL_65:
    if (!v288)
    {
      uint64_t v268 = (os_log_t *)sub_138E8(13);
      uint64_t v269 = *v268;
      if (*v268 && os_log_type_enabled(*v268, OS_LOG_TYPE_ERROR))
      {
        if ((v296 & 0x80u) == 0) {
          int v270 = &__s1;
        }
        else {
          int v270 = __s1;
        }
        *(_DWORD *)uint64_t v316 = 136315650;
        *(void *)&v316[4] = "RoutingManager.cpp";
        *(_WORD *)&v316[12] = 1024;
        *(_DWORD *)&v316[14] = 4944;
        *(_WORD *)&v316[18] = 2080;
        *(void *)&v316[20] = v270;
        _os_log_impl( &dword_0,  v269,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Could not find Bluetooth device with matching device ID: %s for activation",  v316,  0x1Cu);
      }

      v271 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error( v271,  "Could not find Bluetooth device with matching device ID: %s for activation");
    }

    uint64_t v55 = sub_546E0();
    sub_103CF8(v55, (uint64_t)v287, 1LL, 1);
    CFTypeRef v56 = cf;
    if (!cf) {
      goto LABEL_112;
    }
    goto LABEL_111;
  }

LABEL_175:
        operator delete(*(void **)buf);
        goto LABEL_161;
      }

      BOOL v117 = 0;
      if (SHIBYTE(buf[5]) < 0) {
        goto LABEL_175;
      }
LABEL_161:
      sub_19DFC((uint64_t)&theString);
LABEL_163:
      std::string::size_type v118 = *(std::__shared_weak_count **)&v316[8];
      if (*(void *)&v316[8])
      {
        unint64_t v119 = (unint64_t *)(*(void *)&v316[8] + 8LL);
        do
          unint64_t v120 = __ldaxr(v119);
        while (__stlxr(v120 - 1, v119));
        if (!v120)
        {
          ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
          std::__shared_weak_count::__release_weak(v118);
        }
      }

      if (v102 == (_DWORD)v94 && v117) {
        goto LABEL_180;
      }
      v101 += 2;
    }

    while (v101 != v100);
    BOOL v101 = v100;
LABEL_180:
    if (v101 != *(uint64_t **)(a2 + 512))
    {
      sub_B8CBC((uint64_t *)buf, v101, "", 5044);
      int v122 = sub_F9AF4(*(uint64_t *)buf, v95);
      int v123 = v122;
      uint64_t v124 = *(std::__shared_weak_count **)&buf[2];
      if (!*(void *)&buf[2]) {
        goto LABEL_185;
      }
      uint64_t v125 = (unint64_t *)(*(void *)&buf[2] + 8LL);
      do
        unint64_t v126 = __ldaxr(v125);
      while (__stlxr(v126 - 1, v125));
      if (!v126)
      {
        ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
        std::__shared_weak_count::__release_weak(v124);
        if (v123) {
          goto LABEL_186;
        }
      }

      else
      {
LABEL_185:
        if (v122)
        {
LABEL_186:
          sub_B8CBC((uint64_t *)&theString, v101, "", 5046);
          unint64_t v128 = *(uint64_t **)(a2 + 504);
          uint64_t v127 = *(uint64_t **)(a2 + 512);
          if (v128 == v127) {
            goto LABEL_443;
          }
          while (1)
          {
            sub_B8CBC((uint64_t *)buf, v128, "", 5050);
            char v129 = sub_F9AF4(*(uint64_t *)buf, v95);
            uint64_t v130 = *(std::__shared_weak_count **)&buf[2];
            if (*(void *)&buf[2])
            {
              unsigned int v131 = (unint64_t *)(*(void *)&buf[2] + 8LL);
              do
                unint64_t v132 = __ldaxr(v131);
              while (__stlxr(v132 - 1, v131));
              if (!v132)
              {
                ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
                std::__shared_weak_count::__release_weak(v130);
              }
            }

            if ((v129 & 1) != 0) {
              break;
            }
            v128 += 2;
            if (v128 == v127)
            {
              unint64_t v128 = v127;
              break;
            }
          }

          if (v128 == *(uint64_t **)(a2 + 512))
          {
LABEL_443:
            v254 = (os_log_t *)sub_138E8(13);
            uint64_t v255 = *v254;
            if (*v254 && os_log_type_enabled(*v254, OS_LOG_TYPE_ERROR))
            {
              buf[0] = 136315394;
              *(void *)&buf[1] = "RoutingManager.cpp";
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 5053;
              _os_log_impl( &dword_0,  v255,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): No capable port found",  (uint8_t *)buf,  0x12u);
            }

            unint64_t v256 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v256, "No capable port found");
LABEL_451:
          }

          if (v101 < v128)
          {
            char v257 = (os_log_t *)sub_138E8(13);
            std::string::size_type v258 = *v257;
            if (*v257 && os_log_type_enabled(*v257, OS_LOG_TYPE_ERROR))
            {
              buf[0] = 136315394;
              *(void *)&buf[1] = "RoutingManager.cpp";
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 5054;
              _os_log_impl( &dword_0,  v258,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Invalid iterator for top mode-capable port",  (uint8_t *)buf,  0x12u);
            }

            unint64_t v256 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v256, "Invalid iterator for top mode-capable port");
            goto LABEL_451;
          }

          sub_B8CBC(&v305, v128, "", 5056);
          size_t v133 = v296;
          if ((v296 & 0x80u) != 0) {
            size_t v133 = __n;
          }
          if (v133)
          {
            unsigned int v134 = *(const __CFString **)(v305 + 248);
            *(void *)uint64_t v316 = v134;
            v316[8] = *(_BYTE *)(v305 + 256);
            if (v316[8] && v134)
            {
              CFRetain(v134);
              unsigned int v134 = *(const __CFString **)v316;
            }

            sub_48E98(buf, v134);
            if ((v296 & 0x80u) == 0) {
              size_t v135 = v296;
            }
            else {
              size_t v135 = __n;
            }
            uint64_t v136 = HIBYTE(buf[5]);
            int v137 = SHIBYTE(buf[5]);
            if (buf[5] < 0) {
              uint64_t v136 = *(void *)&buf[2];
            }
            if (v135 == v136)
            {
              if (buf[5] >= 0) {
                int v138 = buf;
              }
              else {
                int v138 = *(_DWORD **)buf;
              }
              if ((v296 & 0x80) != 0)
              {
                BOOL v146 = memcmp(__s1, v138, __n) == 0;
                if ((v137 & 0x80000000) == 0) {
                  goto LABEL_221;
                }
              }

              else if (v296)
              {
                uint64_t v139 = v296 - 1LL;
                BOOL v140 = &__s1;
                do
                {
                  int v142 = *(unsigned __int8 *)v140;
                  BOOL v140 = (void **)((char *)v140 + 1);
                  int v141 = v142;
                  int v144 = *(unsigned __int8 *)v138;
                  int v138 = (_DWORD *)((char *)v138 + 1);
                  int v143 = v144;
                  BOOL v215 = v139-- != 0;
                  char v145 = v215;
                  BOOL v146 = v141 == v143;
                }

                while (v141 == v143 && (v145 & 1) != 0);
                if ((SHIBYTE(buf[5]) & 0x80000000) == 0)
                {
LABEL_221:
                  sub_19DFC((uint64_t)v316);
                  goto LABEL_225;
                }
              }

              else
              {
                BOOL v146 = 1;
                if ((SHIBYTE(buf[5]) & 0x80000000) == 0) {
                  goto LABEL_221;
                }
              }
            }

            else
            {
              BOOL v146 = 0;
              if ((SHIBYTE(buf[5]) & 0x80000000) == 0) {
                goto LABEL_221;
              }
            }

            operator delete(*(void **)buf);
            goto LABEL_221;
          }

          BOOL v146 = 1;
LABEL_225:
          BOOL v147 = *(_DWORD *)(v305 + 144) == (_DWORD)v94 && v146;
          if (!v147 && theString)
          {
            uint64_t v148 = sub_138E8(8);
            if ((*(_BYTE *)(v148 + 8) & 1) != 0)
            {
              BOOL v149 = *(os_log_s **)v148;
              if (*(void *)v148)
              {
                if (os_log_type_enabled(*(os_log_t *)v148, OS_LOG_TYPE_DEBUG))
                {
                  sub_23FE8((uint64_t)v316, (os_unfair_lock_t)&theString->info);
                  unsigned __int8 v150 = v316;
                  if (v316[23] < 0) {
                    unsigned __int8 v150 = *(_BYTE **)v316;
                  }
                  buf[0] = 136315650;
                  *(void *)&buf[1] = "RoutingManager.cpp";
                  LOWORD(buf[3]) = 1024;
                  *(_DWORD *)((char *)&buf[3] + 2) = 5065;
                  HIWORD(buf[4]) = 2080;
                  *(void *)&buf[5] = v150;
                  _os_log_impl( &dword_0,  v149,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Found and removed port from mCachedPortStack: %s",  (uint8_t *)buf,  0x1Cu);
                  if ((v316[23] & 0x80000000) != 0) {
                    operator delete(*(void **)v316);
                  }
                }
              }
            }

            unint64_t v151 = *(void **)(a2 + 504);
            int v152 = *(void **)(a2 + 512);
            if (v151 != v152)
            {
              while (1)
              {
                uint64_t v153 = (std::__shared_weak_count *)v151[1];
                if (!v153) {
                  break;
                }
                uint64_t v154 = std::__shared_weak_count::lock(v153);
                uint64_t v155 = v154;
                if (!v154) {
                  goto LABEL_247;
                }
                CFStringRef v156 = (CFStringRef)*v151;
                p_shared_weak_owners = (unint64_t *)&v154->__shared_weak_owners_;
                do
                  unint64_t v158 = __ldxr(p_shared_weak_owners);
                while (__stxr(v158 + 1, p_shared_weak_owners));
                p_shared_owners = (unint64_t *)&v154->__shared_owners_;
                do
                  unint64_t v160 = __ldaxr(p_shared_owners);
                while (__stlxr(v160 - 1, p_shared_owners));
                if (!v160)
                {
                  ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                  std::__shared_weak_count::__release_weak(v155);
                }

    _os_log_impl(&dword_0, v95, OS_LOG_TYPE_ERROR, v96, buf, 0x12u);
    goto LABEL_176;
  }

  if (v12 != 2021027692)
  {
    uint64_t v13 = 1987013741;
LABEL_42:
    if (v12 == v13)
    {
      *(_DWORD *)buf = sub_63910(a5, (uint64_t)a6);
      LODWORD(__p) = 0;
      LODWORD(theDict[0]) = 1065353216;
      *(float *)(a1 + 296) = *sub_63A98((float *)&__p, (float *)buf, (float *)theDict);
      sub_1C5544(a1, 2);
      return;
    }

                        if (v118.__owns_) {
                          std::mutex::unlock(v118.__m_);
                        }
                        sub_7D790((uint64_t)&buf);
                        v75 += (std::chrono::system_clock::now().__d_.__rep_ - v76.__d_.__rep_) / -1000;
                        a1 = v105;
                      }

                      __int16 v86 = sub_138E8(13);
                      if ((*(_BYTE *)(v86 + 8) & 1) != 0)
                      {
                        uint64_t v87 = *(os_log_s **)v86;
                        if (*(void *)v86)
                        {
                          if (os_log_type_enabled(*(os_log_t *)v86, OS_LOG_TYPE_DEBUG))
                          {
                            v118.__m_ = *(std::unique_lock<std::mutex>::mutex_type **)&v114.mSelector;
                            *(_DWORD *)&v118.__owns_ = v114.mElement;
                            sub_613AC((uint64_t)&v130, (unsigned int *)&v118);
                            uint64_t v88 = (SBYTE7(v131) & 0x80u) == 0 ? &v130 : (std::unique_lock<std::mutex> *)v130.__m_;
                            buf.mSelector = 136315906;
                            *(void *)&buf.mScope = "HALPropertySynchronizer.h";
                            int v152 = 1024;
                            uint64_t v153 = 288;
                            uint64_t v154 = 2080;
                            *(void *)uint64_t v155 = v88;
                            *(_WORD *)&v155[8] = 1024;
                            *(_DWORD *)&v155[10] = v104;
                            _os_log_impl( &dword_0,  v87,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Successfully synchronized the property %s on id %u.",  (uint8_t *)&buf,  0x22u);
                            if (SBYTE7(v131) < 0)
                            {
                              char v89 = v130.__m_;
                              goto LABEL_221;
                            }
                          }
                        }
                      }

LABEL_248:
                CFStringRef v161 = theString;
                uint64_t v162 = v308;
                if (v308)
                {
                  uint64_t v163 = (unint64_t *)&v308->__shared_weak_owners_;
                  do
                    unint64_t v164 = __ldxr(v163);
                  while (__stxr(v164 + 1, v163));
                }

                if (v155)
                {
                  unint64_t v165 = std::__shared_weak_count::lock(v155);
                  if (!v165) {
                    CFStringRef v156 = 0LL;
                  }
                  if (!v162) {
                    goto LABEL_264;
                  }
                }

                else
                {
                  CFStringRef v156 = 0LL;
                  unint64_t v165 = 0LL;
                  if (!v162) {
                    goto LABEL_264;
                  }
                }

                int v166 = std::__shared_weak_count::lock(v162);
                if (v166)
                {
                  unint64_t v167 = v166;
                  BOOL v168 = v156 == v161;
                  char v169 = (unint64_t *)&v166->__shared_owners_;
                  do
                    unint64_t v170 = __ldaxr(v169);
                  while (__stlxr(v170 - 1, v169));
                  a2 = v286;
                  if (!v170)
                  {
                    ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
                    std::__shared_weak_count::__release_weak(v167);
                  }

                  if (!v165) {
                    goto LABEL_268;
                  }
                  goto LABEL_265;
                }

LABEL_264:
                BOOL v168 = v156 == 0LL;
                a2 = v286;
                if (!v165) {
                  goto LABEL_268;
                }
LABEL_265:
                unint64_t v171 = (unint64_t *)&v165->__shared_owners_;
                do
                  unint64_t v172 = __ldaxr(v171);
                while (__stlxr(v172 - 1, v171));
                if (!v172)
                {
                  ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                  std::__shared_weak_count::__release_weak(v165);
                  if (!v162) {
                    goto LABEL_270;
                  }
LABEL_269:
                  std::__shared_weak_count::__release_weak(v162);
                  goto LABEL_270;
                }

LABEL_268:
                if (v162) {
                  goto LABEL_269;
                }
LABEL_270:
                if (v155) {
                  std::__shared_weak_count::__release_weak(v155);
                }
                if (v168) {
                  goto LABEL_279;
                }
                v151 += 2;
                if (v151 == v152)
                {
                  unint64_t v151 = v152;
                  goto LABEL_279;
                }
              }

              uint64_t v155 = 0LL;
LABEL_247:
              CFStringRef v156 = 0LL;
              goto LABEL_248;
            }

  sub_52EF0((uint64_t)v207);
  sub_32C8C(v198[0]);
  return v24;
}

LABEL_279:
            unint64_t v173 = v152;
            if (v151 != v152)
            {
              uint64_t v174 = v151 + 2;
              if (v151 + 2 != v152)
              {
                unint64_t v173 = v151;
                uint64_t v285 = v93;
                while (1)
                {
                  __int128 v175 = (std::__shared_weak_count *)v151[3];
                  unint64_t v151 = v174;
                  if (v175)
                  {
                    uint64_t v176 = std::__shared_weak_count::lock(v175);
                    int v177 = v176;
                    if (v176)
                    {
                      unint64_t v178 = (const __CFString *)*v151;
                      std::string::size_type v179 = (unint64_t *)&v176->__shared_weak_owners_;
                      do
                        unint64_t v180 = __ldxr(v179);
                      while (__stxr(v180 + 1, v179));
                      __int128 v181 = (unint64_t *)&v176->__shared_owners_;
                      do
                        unint64_t v182 = __ldaxr(v181);
                      while (__stlxr(v182 - 1, v181));
                      if (!v182)
                      {
                        ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
                        std::__shared_weak_count::__release_weak(v177);
                      }
                    }

                    else
                    {
                      unint64_t v178 = 0LL;
                    }
                  }

                  else
                  {
                    unint64_t v178 = 0LL;
                    int v177 = 0LL;
                  }

                  CFStringRef v183 = theString;
                  BOOL v184 = v308;
                  if (v308)
                  {
                    __int128 v185 = (unint64_t *)&v308->__shared_weak_owners_;
                    do
                      unint64_t v186 = __ldxr(v185);
                    while (__stxr(v186 + 1, v185));
                  }

                  __int128 v187 = v152;
                  if (v177)
                  {
                    uint64_t v188 = std::__shared_weak_count::lock(v177);
                    if (v188) {
                      CFStringRef v189 = v178;
                    }
                    else {
                      CFStringRef v189 = 0LL;
                    }
                    if (!v184)
                    {
LABEL_307:
                      BOOL v192 = v189 == 0LL;
                      int v152 = v187;
                      goto LABEL_308;
                    }
                  }

                  else
                  {
                    CFStringRef v189 = 0LL;
                    uint64_t v188 = 0LL;
                    if (!v184) {
                      goto LABEL_307;
                    }
                  }

                  std::string v190 = std::__shared_weak_count::lock(v184);
                  if (!v190) {
                    goto LABEL_307;
                  }
                  BOOL v191 = v190;
                  BOOL v192 = v189 == v183;
                  unint64_t v193 = (unint64_t *)&v190->__shared_owners_;
                  do
                    unint64_t v194 = __ldaxr(v193);
                  while (__stlxr(v194 - 1, v193));
                  int v152 = v187;
                  if (!v194)
                  {
                    ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
                    std::__shared_weak_count::__release_weak(v191);
                  }

LABEL_308:
                  BOOL v93 = v285;
                  if (v188)
                  {
                    uint64_t v195 = (unint64_t *)&v188->__shared_owners_;
                    do
                      unint64_t v196 = __ldaxr(v195);
                    while (__stlxr(v196 - 1, v195));
                    if (!v196)
                    {
                      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
                      std::__shared_weak_count::__release_weak(v188);
                      if (!v184) {
                        goto LABEL_314;
                      }
LABEL_313:
                      std::__shared_weak_count::__release_weak(v184);
                      goto LABEL_314;
                    }
                  }

                  if (v184) {
                    goto LABEL_313;
                  }
LABEL_314:
                  if (v177) {
                    std::__shared_weak_count::__release_weak(v177);
                  }
                  if (!v192)
                  {
                    __int128 v197 = *(_OWORD *)v151;
                    *unint64_t v151 = 0LL;
                    v151[1] = 0LL;
                    uint64_t v198 = (std::__shared_weak_count *)v173[1];
                    *(_OWORD *)unint64_t v173 = v197;
                    if (v198) {
                      std::__shared_weak_count::__release_weak(v198);
                    }
                    v173 += 2;
                  }

                  a2 = v286;
                  uint64_t v174 = v151 + 2;
                  if (v151 + 2 == v152) {
                    goto LABEL_327;
                  }
                }
              }

              unint64_t v173 = v151;
            }

    *(void *)unint64_t v219 = &off_4865A0;
    v219[2] = v85;
  }

  if (v255)
  {
    unint64_t v239 = sub_138E8(13);
    unint64_t v240 = sub_8C7D4(1, *(void **)v239, *(void *)(v239 + 8));
    uint64_t v241 = (void *)objc_claimAutoreleasedReturnValue(v240);
    uint64_t v242 = v241;
    if (v241)
    {
      unsigned int v243 = v241;
      if (os_log_type_enabled(v243, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v282, v255);
        uint64_t v244 = v282[23] >= 0 ? v282 : *(_BYTE **)v282;
        *(_DWORD *)outData = 136315650;
        *(void *)&outData[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&outData[12] = 1024;
        *(_DWORD *)&outData[14] = 1812;
        *(_WORD *)&outData[18] = 2080;
        *(void *)&outData[20] = v244;
        _os_log_impl( &dword_0,  v243,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (routeUpdateInfo.first): Initial route change failed: %s.",  outData,  0x1Cu);
        if ((v282[23] & 0x80000000) != 0) {
          operator delete(*(void **)v282);
        }
      }
    }

    unint64_t v219 = __cxa_allocate_exception(0x10uLL);
    int v85 = v255;
    goto LABEL_308;
  }

  sub_6DD4();
  if ((*(unsigned int (**)(uint64_t *))(qword_48F828 + 48))(&qword_48F828))
  {
    unint64_t v172 = *(id *)sub_138E8(13);
    unint64_t v173 = v172;
    if (v172)
    {
      uint64_t v174 = (os_log_s *)v172;
      if (os_log_type_enabled(v174, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)outData = 136315394;
        *(void *)&outData[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&outData[12] = 1024;
        *(_DWORD *)&outData[14] = 1813;
        _os_log_impl( &dword_0,  v174,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: The state mutex is held by this thread.",  outData,  0x12u);
      }
    }
  }

  __int128 v175 = v256;
  sub_7D084(v253, "  ");
  sub_1533B4((uint64_t *)v282, v175, 2, (const void **)v253);
  if (v254 < 0) {
    operator delete(v253[0]);
  }
  uint64_t v176 = *(id *)sub_138E8(2);
  int v177 = v176;
  if (v176)
  {
    unint64_t v178 = (os_log_s *)v176;
    if (os_log_type_enabled(v178, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)outData = 136315650;
      *(void *)&outData[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&outData[12] = 1024;
      *(_DWORD *)&outData[14] = 1814;
      *(_WORD *)&outData[18] = 2080;
      *(void *)&outData[20] = "internal update";
      _os_log_impl( &dword_0,  v178,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Route configuration change completed [ %s ]. Route description:",  outData,  0x1Cu);
    }
  }

  for (uint64_t j = *(void *)&v282[8]; (_BYTE *)j != v282; uint64_t j = *(void *)(j + 8))
  {
    unint64_t v180 = *(id *)sub_138E8(2);
    __int128 v181 = v180;
    if (v180)
    {
      unint64_t v182 = (os_log_s *)v180;
      if (os_log_type_enabled(v182, OS_LOG_TYPE_DEFAULT))
      {
        CFStringRef v183 = (void *)(j + 16);
        *(_DWORD *)outData = 136315650;
        *(void *)&outData[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&outData[12] = 1024;
        *(_DWORD *)&outData[14] = 1814;
        *(_WORD *)&outData[18] = 2080;
        *(void *)&outData[20] = v183;
        _os_log_impl(&dword_0, v182, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", outData, 0x1Cu);
      }
    }
  }

  sub_1532B4(v282);
  sub_2590B8(v252);
  if (qword_48E8E8 != -1) {
    dispatch_once(&qword_48E8E8, &stru_471118);
  }
  if (byte_48E8E0)
  {
    BOOL v184 = *(id *)sub_138E8(2);
    __int128 v185 = v184;
    if (v184)
    {
      unint64_t v186 = (os_log_s *)v184;
      if (os_log_type_enabled(v186, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)outData = 136315394;
        *(void *)&outData[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&outData[12] = 1024;
        *(_DWORD *)&outData[14] = 1820;
        _os_log_impl( &dword_0,  v186,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Tethered demo (Stevenote) mode is enabled.",  outData,  0x12u);
      }
    }
  }

  *(void *)&inAddress.mSelector = 0x676C6F6270696269LL;
  inAddress.mElement = 0;
  unint64_t v261 = @"com.apple.audio.CoreAudio.VirtualAudio";
  *(void *)outData = &v261;
  *(_DWORD *)&outData[8] = 8;
  *(void *)&outData[16] = &v260;
  *(_DWORD *)&outData[24] = 4;
  ioDataSize = 32;
  char v260 = 0;
  PropertyData = AudioObjectGetPropertyData(1u, &inAddress, 0, 0LL, &ioDataSize, outData);
  if ((_DWORD)PropertyData)
  {
    uint64_t v245 = sub_138E8(13);
    unint64_t v246 = sub_8C7D4(1, *(void **)v245, *(void *)(v245 + 8));
    unint64_t v247 = (void *)objc_claimAutoreleasedReturnValue(v246);
    char v248 = v247;
    if (v247)
    {
      unint64_t v249 = v247;
      if (os_log_type_enabled(v249, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v283, PropertyData);
        unsigned int v250 = v286 >= 0 ? v283 : *(_BYTE **)v283;
        *(_DWORD *)int v282 = 136315650;
        *(void *)&v282[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&v282[12] = 1024;
        *(_DWORD *)&v282[14] = 1090;
        *(_WORD *)&v282[18] = 2080;
        *(void *)&v282[20] = v250;
        _os_log_impl( &dword_0,  v249,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): AudioObjectGetPropertyData(kVirtualAudioPlugInBundleID) returned %s.",  v282,  0x1Cu);
        if (v286 < 0) {
          operator delete(*(void **)v283);
        }
      }
    }

    unsigned int v251 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v251, "AudioObjectGetPropertyData(kVirtualAudioPlugInBundleID) returned %s.");
  }

  dword_493068 = v260;
  off_493060 = (uint64_t (*)(void))signal(1, (void (__cdecl *)(int))sub_259304);
  if (off_493060 == (uint64_t (*)(void))-1LL)
  {
    uint64_t v188 = *(id *)sub_138E8(2);
    CFStringRef v189 = v188;
    if (v188)
    {
      std::string v190 = (os_log_s *)v188;
      if (os_log_type_enabled(v190, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)outData = 136315394;
        *(void *)&outData[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&outData[12] = 1024;
        *(_DWORD *)&outData[14] = 1828;
        _os_log_impl( &dword_0,  v190,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error installing SIGHUP handler. Pls file a radar",  outData,  0x12u);
      }
    }

    off_493060 = 0LL;
  }

  BOOL v191 = sub_5954C();
  (*(void (**)(uint64_t, uint64_t (*)(uint64_t), std::string::size_type))(*(void *)v191 + 280LL))( v191,  sub_259674,  v252);
  sub_259794(v252);
  sub_2213CC();
  *(void *)outData = &off_46F380;
  *(void *)&outData[24] = outData;
  sub_E4C70(outData);
  BOOL v192 = *(void **)&outData[24];
  if (*(_BYTE **)&outData[24] == outData)
  {
    unint64_t v193 = 4LL;
    BOOL v192 = outData;
    goto LABEL_239;
  }

  if (*(void *)&outData[24])
  {
    unint64_t v193 = 5LL;
LABEL_239:
    (*(void (**)(void))(*v192 + 8 * v193))();
  }

  unsigned __int8 v150 = *(void *)(a1 + 104);
  if (v150)
  {
    unint64_t v151 = (*(uint64_t (**)(uint64_t))(*(void *)v150 + 208LL))(v150);
    if ((v151 & 0xFF00000000LL) != 0)
    {
      int v152 = (os_log_t *)sub_138E8(22);
      uint64_t v153 = *v152;
      if (*v152)
      {
        if (os_log_type_enabled(*v152, OS_LOG_TYPE_DEFAULT))
        {
          sub_23FE8((uint64_t)v319, (os_unfair_lock_t)(*(void *)(a1 + 104) + 8LL));
          uint64_t v154 = v319[23] >= 0 ? v319 : *(_BYTE **)v319;
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1174;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v154;
          _os_log_impl( &dword_0,  v153,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Applying sample rate culling policy to device %s",  buf,  0x1Cu);
          if ((v319[23] & 0x80000000) != 0) {
            operator delete(*(void **)v319);
          }
        }
      }
    }

    sub_27DC38((uint64_t *)v307, v151, *(void *)(a1 + 96));
  }

  uint64_t v155 = (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 536LL))(*(void *)(a1 + 96));
  if ((v155 & 0xFF00000000LL) != 0
    && (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 136LL))(*(void *)(a1 + 96)) == *(void *)(a1 + 104))
  {
    CFStringRef v156 = (os_log_t *)sub_138E8(22);
    uint64_t v157 = *v156;
    if (*v156 && os_log_type_enabled(*v156, OS_LOG_TYPE_DEFAULT))
    {
      sub_23FE8((uint64_t)v319, (os_unfair_lock_t)(*(void *)(a1 + 96) + 8LL));
      unint64_t v158 = v319[23];
      BOOL v159 = *(_BYTE **)v319;
      sub_23FE8((uint64_t)__p, (os_unfair_lock_t)(*(void *)(a1 + 104) + 8LL));
      unint64_t v160 = v319;
      if (v158 < 0) {
        unint64_t v160 = v159;
      }
      if (__p[23] >= 0) {
        CFStringRef v161 = __p;
      }
      else {
        CFStringRef v161 = *(_BYTE **)__p;
      }
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1183;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v160;
      *(_WORD *)&buf[28] = 2080;
      *(void *)&buf[30] = v161;
      _os_log_impl( &dword_0,  v157,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Applying aggregate device %s sample rate culling policy to device %s",  buf,  0x26u);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if ((v319[23] & 0x80000000) != 0) {
        operator delete(*(void **)v319);
      }
    }

    sub_27DC38((uint64_t *)v307, v155, *(void *)(a1 + 96));
  }

  if ((*(unsigned int (**)(void))(**(void **)(a1 + 96) + 152LL))(*(void *)(a1 + 96))
    && sub_6ADEC(a1)
    && *(_BYTE *)(a1 + 416))
  {
    if (*(_DWORD *)(a1 + 412) != 1)
    {
      uint64_t v302 = (os_log_t *)sub_138E8(13);
      v303 = *v302;
      if (*v302 && os_log_type_enabled(*v302, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1043;
        _os_log_impl( &dword_0,  v303,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }

    uint64_t v162 = (double *)v307[0];
    if (v307[0] != v307[1])
    {
      while (1)
      {
        uint64_t v163 = fabs(*v162);
        if (v163 < 48000.0) {
          uint64_t v163 = 48000.0;
        }
        unint64_t v164 = v163 >= 1.0 ? v163 * 2.22044605e-16 : 2.22044605e-16;
        if (fabs(*v162 + -48000.0) <= v164) {
          break;
        }
        v162 += 7;
        if (v162 == v307[1]) {
          goto LABEL_350;
        }
      }
    }

    if (v162 == v307[1])
    {
LABEL_350:
      BOOL v168 = (os_log_t *)sub_138E8(22);
      char v169 = *v168;
      if (*v168 && os_log_type_enabled(*v168, OS_LOG_TYPE_ERROR))
      {
        unint64_t v170 = *(void *)(a1 + 96);
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1058;
        *(_WORD *)&_BYTE buf[18] = 2048;
        *(void *)&buf[20] = v170;
        _os_log_impl( &dword_0,  v169,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Expanse preferred sample rate of 48KHz is unavailable for device %p - we may have errors!!",  buf,  0x1Cu);
      }
    }

    else
    {
      unint64_t v165 = (os_log_t *)sub_138E8(22);
      int v166 = *v165;
      if (*v165 && os_log_type_enabled(*v165, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v167 = *(void *)(a1 + 96);
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1052;
        *(_WORD *)&_BYTE buf[18] = 2048;
        *(void *)&buf[20] = v167;
        _os_log_impl( &dword_0,  v166,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Applying sample rate culling policy to device %p for expanse",  buf,  0x1Cu);
      }

      sub_27DC38((uint64_t *)v307, *(void *)(a1 + 412), *(void *)(a1 + 96));
    }
  }

  *(void *)(a1 + 216) = *(void *)(a1 + 208);
  *(void *)(a1 + 240) = *(void *)(a1 + 232);
  if (v307[1] != v307[0])
  {
    unint64_t v171 = 0LL;
    unint64_t v172 = 0;
    unint64_t v173 = 0x6DB6DB6DB6DB6DB7LL * (((char *)v307[1] - (char *)v307[0]) >> 3);
    while (1)
    {
      uint64_t v174 = (double *)v307[0];
      __int128 v175 = (char *)v307[0] + 56 * v171;
      *(_OWORD *)buf = *(_OWORD *)v175;
      *(_OWORD *)&_DWORD buf[16] = *((_OWORD *)v175 + 1);
      *(_OWORD *)&_BYTE buf[32] = *((_OWORD *)v175 + 2);
      uint64_t v322 = *((double *)v175 + 6);
      *(_OWORD *)uint64_t v319 = *(_OWORD *)v175;
      *(_OWORD *)&v319[16] = *((_OWORD *)v175 + 1);
      *(void *)&v319[32] = *((void *)v175 + 4);
      if (*(_DWORD *)&buf[8] == 1819304813) {
        break;
      }
      if (*(int *)&buf[8] > 1836343850)
      {
        if (*(_DWORD *)&buf[8] == 1836344107) {
          goto LABEL_364;
        }
        unint64_t v178 = 1836343851;
      }

      else
      {
        if (*(_DWORD *)&buf[8] == 1667443507) {
          goto LABEL_364;
        }
        unint64_t v178 = 1667509043;
      }

      if (*(_DWORD *)&buf[8] == v178)
      {
LABEL_364:
        std::string::size_type v179 = *(void *)(a1 + 104);
        strcpy(__p, "rrapbolg");
        __p[9] = 0;
        *(_WORD *)&__p[10] = 0;
        unint64_t v180 = sub_5C2F8(v179);
        *((void *)&v183 + 1) = v181;
        *(void *)&CFStringRef v183 = v180;
        unint64_t v182 = v183 >> 32;
        if ((v182 & 0xFF00000000LL) == 0
          || !(_DWORD)v182
          || (_os_feature_enabled_impl("VirtualAudio", "mat_format_in_parrot") & 1) == 0)
        {
          BOOL v184 = *(double *)buf;
          __int128 v185 = fabs(*(double *)buf);
          unint64_t v186 = 2.22044605e-16;
          if (v185 >= 1.0) {
            unint64_t v186 = v185 * 2.22044605e-16;
          }
          if (v185 <= v186) {
            BOOL v184 = v322;
          }
          *(double *)buf = v184 * 0.0625;
          *(_DWORD *)&buf[28] *= 16;
          LODWORD(v187) = vshr_n_u32(*(uint32x2_t *)&buf[20], 4uLL).u32[0];
          HIDWORD(v187) = vshl_n_s32(*(int32x2_t *)(buf + 20), 4uLL).i32[1];
          *(void *)&buf[20] = v187;
          *(double *)&_BYTE buf[40] = v184 * 0.0625;
          uint64_t v322 = v184 * 0.0625;
        }
      }

LABEL_327:
            v199 = *(void **)(a2 + 512);
            if (v173 != v199)
            {
              while (v199 != v173)
              {
                unint64_t v200 = (std::__shared_weak_count *)*(v199 - 1);
                if (v200) {
                  std::__shared_weak_count::__release_weak(v200);
                }
                v199 -= 2;
              }

              *(void *)(a2 + 512) = v173;
            }

            if (theString)
            {
              uint64_t v201 = sub_138E8(8);
              if ((*(_BYTE *)(v201 + 8) & 1) != 0)
              {
                uint64_t v202 = *(os_log_s **)v201;
                if (*(void *)v201)
                {
                  if (os_log_type_enabled(*(os_log_t *)v201, OS_LOG_TYPE_DEBUG))
                  {
                    sub_23FE8((uint64_t)v316, (os_unfair_lock_t)&theString->info);
                    unint64_t v203 = v316;
                    if (v316[23] < 0) {
                      unint64_t v203 = *(_BYTE **)v316;
                    }
                    buf[0] = 136315650;
                    *(void *)&buf[1] = "RoutingManager.cpp";
                    LOWORD(buf[3]) = 1024;
                    *(_DWORD *)((char *)&buf[3] + 2) = 5073;
                    HIWORD(buf[4]) = 2080;
                    *(void *)&buf[5] = v203;
                    _os_log_impl( &dword_0,  v202,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Elevated port on mCachedPortStack: %s",  (uint8_t *)buf,  0x1Cu);
                    if ((v316[23] & 0x80000000) != 0) {
                      operator delete(*(void **)v316);
                    }
                  }
                }
              }

              *(void *)buf = theString;
              *(void *)&buf[2] = v308;
              if (v308)
              {
                uint64_t v204 = (unint64_t *)&v308->__shared_weak_owners_;
                do
                  unint64_t v205 = __ldxr(v204);
                while (__stxr(v205 + 1, v204));
              }

              sub_129FD8(v281, (uint64_t)v128, (__int128 *)buf);
              if (*(void *)&buf[2]) {
                std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[2]);
              }
            }
          }

          BOOL v206 = v306;
          if (v306)
          {
            unint64_t v207 = (unint64_t *)&v306->__shared_owners_;
            do
              unint64_t v208 = __ldaxr(v207);
            while (__stlxr(v208 - 1, v207));
            if (!v208)
            {
              ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
              std::__shared_weak_count::__release_weak(v206);
            }
          }

          unint64_t v209 = v308;
          if (v308)
          {
            int v210 = (unint64_t *)&v308->__shared_owners_;
            do
              unint64_t v211 = __ldaxr(v210);
            while (__stlxr(v211 - 1, v210));
            if (!v211)
            {
              ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
              std::__shared_weak_count::__release_weak(v209);
            }
          }
        }
      }
    }

LABEL_357:
    ++v93;
  }

  while (v93 != v284);
  a3 = v278;
  a1 = v279;
  unint64_t v91 = v280;
  if (v280) {
    goto LABEL_362;
  }
LABEL_363:
  sub_85B80(&v302);
  sub_85B80(v287);
LABEL_364:
  *(void *)a1 = off_4709D0;
  *(void *)(a1 + 8) = 2LL;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + sub_7A768(v9 - 32) = 0;
  uint64_t v212 = *(void *)(*(void *)a2 + 8LL);
  if (!v212) {
    goto LABEL_396;
  }
  uint64_t v213 = *(void *)a2 + 8LL;
  do
  {
    unsigned int v214 = *(_DWORD *)(v212 + 32);
    BOOL v215 = v214 >= LODWORD(__p.__r_.__value_.__l.__data_);
    if (v214 >= LODWORD(__p.__r_.__value_.__l.__data_)) {
      BOOL v216 = (uint64_t *)v212;
    }
    else {
      BOOL v216 = (uint64_t *)(v212 + 8);
    }
    if (v215) {
      uint64_t v213 = v212;
    }
    uint64_t v212 = *v216;
  }

  while (*v216);
  if (v213 == *(void *)a2 + 8LL || LODWORD(__p.__r_.__value_.__l.__data_) < *(_DWORD *)(v213 + 32)) {
    goto LABEL_396;
  }
  *(void *)buf = off_4709D0;
  *(void *)&buf[2] = 1LL;
  *(void *)&uint8_t buf[4] = 0LL;
  LOBYTE(buf[6]) = 0;
  LOBYTE(buf[8]) = 0;
  sub_725DC(a1, (uint64_t)buf);
  *(void *)buf = off_4709D0;
  unint64_t v217 = *(void **)&buf[4];
  if (*(void *)&buf[4])
  {
    sub_10AF78((uint64_t *)(*(void *)&buf[4] + 16LL));
    operator delete(v217);
  }

  int v218 = v293;
  unint64_t v219 = (int *)(a2 + 176);
  if (v293 != 1635087471) {
    unint64_t v219 = &v293;
  }
  *(_DWORD *)uint64_t v316 = *v219;
  int v220 = &__s1;
  if (v293 == 1635087471) {
    int v220 = (void **)(a2 + 184);
  }
  BOOL v221 = (char *)&v296;
  if (v293 == 1635087471) {
    BOOL v221 = (char *)(a2 + 207);
  }
  if (*v221 < 0)
  {
    if (v293 == 1635087471) {
      p_n = (unint64_t *)(a2 + 192);
    }
    else {
      p_n = &__n;
    }
    sub_24054(&v316[8], *v220, *p_n);
  }

  else
  {
    *(_OWORD *)&v316[8] = *(_OWORD *)v220;
    *(void *)&v316[24] = v220[2];
  }

  uint64_t v223 = &v297;
  if (v218 == 1635087471) {
    uint64_t v223 = (uint64_t *)(a2 + 208);
  }
  uint64_t v317 = *v223;
  sub_128F3C( (uint64_t)buf,  a2,  &__p,  (uint64_t)&v291,  (uint64_t)&v290,  (uint64_t)v292,  v292[8],  &__p.__r_.__value_.__l.__cap_,  (uint64_t)v316,  &v298,  v299,  v283,  v282,  &v300,  (void *)(a2 + 448));
  sub_12FFA0((uint64_t)v287, (std::__shared_weak_count *)a2, (uint64_t)buf, 0);
  sub_725DC(a1, (uint64_t)v287);
  v287[0] = (uint64_t)off_4709D0;
  uint64_t v224 = v288;
  if (v288)
  {
    sub_10AF78(v288 + 2);
    operator delete(v224);
  }

  sub_128D54((uint64_t)buf);
  if ((v316[31] & 0x80000000) != 0) {
    operator delete(*(void **)&v316[8]);
  }
  if (*(_DWORD *)(a1 + 8))
  {
LABEL_396:
    uint64_t v225 = sub_138E8(8);
    uint64_t v226 = sub_138E8(34);
    char v227 = 0;
    uint64_t v228 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v229 = *(void *)(v225 + 8);
    while (1)
    {
      uint64_t v230 = (int)buf[v228];
      char v231 = v227;
      if (((v229 & v230) != 0) != ((*(void *)(v226 + 8) & v230) != 0)) {
        break;
      }
      char v227 = 1;
      uint64_t v228 = 1LL;
      if ((v231 & 1) != 0) {
        goto LABEL_402;
      }
    }

    if ((v229 & v230) == 0) {
      uint64_t v225 = v226;
    }
LABEL_402:
    BOOL v232 = *(os_log_s **)v225;
    if (v232 && os_log_type_enabled(v232, OS_LOG_TYPE_INFO))
    {
      sub_2DBA00((std::string *)v316, a3);
      if (v316[23] >= 0) {
        uint64_t v233 = v316;
      }
      else {
        uint64_t v233 = *(_BYTE **)v316;
      }
      int v234 = *(_DWORD *)(a1 + 8);
      buf[0] = 136315906;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 4372;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v233;
      LOWORD(buf[7]) = 1024;
      *(_DWORD *)((char *)&buf[7] + 2) = v234;
      _os_log_impl( &dword_0,  v232,  OS_LOG_TYPE_INFO,  "%25s:%-5d Set route configuration %s failed with result %d.",  (uint8_t *)buf,  0x22u);
      if ((v316[23] & 0x80000000) != 0) {
        operator delete(*(void **)v316);
      }
    }
  }

  kdebug_trace(553912322LL, 0LL, 0LL, 0LL, 0LL);
  return sub_53068((uint64_t)&__p);
}

void sub_12FC88( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36)
{
}

void sub_12FFA0(uint64_t a1, std::__shared_weak_count *a2, uint64_t a3, int a4)
{
  uint64_t v4 = a1;
  *(void *)a1 = off_4709D0;
  *(void *)(a1 + 8) = 1LL;
  *(void *)(a1 + 16) = 0LL;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + sub_7A768(v9 - 32) = 0;
  uint64_t v5 = (unsigned int *)(a3 + 8);
  uint64_t v6 = (uint64_t)a2->~__shared_weak_count_0;
  if (!v6) {
    goto LABEL_12;
  }
  char v8 = (std::__shared_weak_count *)a3;
  uint64_t v9 = a2;
  unsigned int v10 = *v5;
  uint64_t v11 = (uint64_t)&a2->~__shared_weak_count_0;
  do
  {
    unsigned int v12 = *(_DWORD *)(v6 + 32);
    BOOL v13 = v12 >= v10;
    if (v12 >= v10) {
      uint64_t v14 = (uint64_t *)v6;
    }
    else {
      uint64_t v14 = (uint64_t *)(v6 + 8);
    }
    if (v13) {
      uint64_t v11 = v6;
    }
    uint64_t v6 = *v14;
  }

  while (*v14);
  if ((void (__cdecl **)(std::__shared_weak_count *__hidden))v11 == &a2->~__shared_weak_count_0
    || v10 < *(_DWORD *)(v11 + 32))
  {
LABEL_12:
    uint64_t v15 = sub_138E8(8);
    uint64_t v16 = sub_138E8(34);
    char v17 = 0;
    uint64_t v18 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v19 = *(void *)(v15 + 8);
    while (1)
    {
      uint64_t v20 = *(int *)&buf[4 * v18];
      char v21 = v17;
      if (((v19 & v20) != 0) != ((*(void *)(v16 + 8) & v20) != 0)) {
        break;
      }
      char v17 = 1;
      uint64_t v18 = 1LL;
      if ((v21 & 1) != 0) {
        goto LABEL_18;
      }
    }

    if ((v19 & v20) == 0) {
      uint64_t v15 = v16;
    }
LABEL_18:
    unint64_t v22 = *(os_log_s **)v15;
    if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      sub_2CA1C(&__p, *v5);
      if (SHIBYTE(v333) >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2192;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = p_p;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Calling find(%s) in the routing database returned an invalid iterator.",  buf,  0x1Cu);
      if (SHIBYTE(v333) < 0) {
        operator delete(__p);
      }
    }

    return;
  }

  sub_132308(v323, &a2[3].__vftable);
  uint64_t v310 = v11 + 40;
  int v24 = *(_DWORD *)(v11 + 72);
  uint64_t v315 = (uint64_t)v8;
  uint64_t v316 = v9;
  int v306 = a4;
  if (!v8[11].__vftable && !v8[12].__shared_weak_owners_ && !v8[14].__shared_owners_) {
    goto LABEL_86;
  }
  uint64_t v304 = v4;
  sub_6DD4();
  if (((*(uint64_t (**)(void))(qword_48F828 + 48))() & 1) == 0)
  {
    uint64_t v287 = (os_log_t *)sub_138E8(13);
    uint64_t v288 = *v287;
    if (*v287 && os_log_type_enabled(*v287, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2650;
      _os_log_impl(&dword_0, v288, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

LABEL_490:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (!*(void *)(v11 + 56))
  {
    uint64_t v289 = (os_log_t *)sub_138E8(13);
    uint64_t v290 = *v289;
    if (*v289 && os_log_type_enabled(*v289, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2651;
      _os_log_impl(&dword_0, v290, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    goto LABEL_490;
  }

  uint64_t v318 = off_4709D0;
  uint64_t v319 = 1LL;
  uint64_t v320 = 0LL;
  char v321 = 0;
  char v322 = 0;
  uint64_t v332 = 0LL;
  int v333 = 0LL;
  std::string __p = &v332;
  for (uint64_t i = v8[10].__shared_weak_owners_; i; uint64_t i = *(void *)i)
  {
    if (*(void *)(i + 24) != *(void *)(i + 32)) {
      sub_32A38((uint64_t **)&__p, (uint64_t *)&v332, *(_DWORD *)(i + 16), (_DWORD *)(i + 16));
    }
  }

  int v335 = 0LL;
  uint64_t v336 = 0LL;
  v334 = (uint64_t *)&v335;
  for (uint64_t j = v8[12].__shared_owners_; j; uint64_t j = *(void *)j)
  {
    if (*(void *)(j + 24) != *(void *)(j + 32)) {
      sub_32A38(&v334, (uint64_t *)&v335, *(_DWORD *)(j + 16), (_DWORD *)(j + 16));
    }
  }

  p_shared_owners = 0LL;
  uint64_t v329 = 0LL;
  uint64_t v330 = 0LL;
  BOOL v27 = *(_DWORD *)(v11 + 72) == 1668510820;
  *(_OWORD *)&v325[3] = *(_OWORD *)v5;
  _DWORD buf[16] = v27;
  *(_OWORD *)&buf[17] = *(_OWORD *)v325;
  *(_DWORD *)&_BYTE buf[32] = *(_DWORD *)&v325[15];
  *(void *)buf = v11 + 40;
  *(void *)&buf[8] = v8 + 1;
  uint64_t v342 = 0LL;
  uint64_t v343 = 0LL;
  uint64_t v28 = sub_11DDE4((uint64_t *)buf);
  uint64_t v313 = v29;
  uint64_t v30 = v28;
  uint64_t v311 = *(void *)buf;
  if (*(void *)buf != v28)
  {
    uint64_t v307 = (const void ***)&v8[8];
    uint64_t v31 = (uint64_t)(v29 + 1);
    do
    {
      *(void *)&v325[8] = 0LL;
      *(void *)&v325[16] = 0LL;
      v327[0] = 0LL;
      v327[1] = 0LL;
      *(void *)int v325 = &v325[8];
      v326 = v327;
      for (uint64_t k = *(void *)(v30 + 24); k != v30 + 16; uint64_t k = *(void *)(k + 8))
      {
        BOOL v33 = sub_20492C(*(_DWORD *)(k + 16));
        unsigned int v34 = *(_DWORD *)(k + 16);
        int v35 = v34 == 1886284905 || v33;
        if (v35 == 1) {
          sub_57ADC((uint64_t *)v325, v34, *(_DWORD *)(k + 16));
        }
        BOOL v36 = sub_20492C(*(_DWORD *)(k + 20));
        unsigned int v37 = *(_DWORD *)(k + 20);
        int v38 = v37 == 1886287212 || v36;
        if (v38 == 1) {
          sub_57ADC((uint64_t *)&v326, v37, *(_DWORD *)(k + 20));
        }
      }

      unsigned int v39 = *(unsigned __int8 *)(v11 + 64);
      BOOL v40 = v336 != 0;
      BOOL v41 = 1;
      if ((v39 & 1) != 0 && v333) {
        BOOL v41 = sub_174C00(*(void **)v325, &v325[8], __p, &v332);
      }
      BOOL v42 = (v40 & (v39 >> 1)) == 0 || sub_174C00(v326, v327, v334, &v335);
      int v43 = v41 && v42;
      char v8 = (std::__shared_weak_count *)v315;
      uint64_t v9 = v316;
      if (v43 == 1)
      {
        sub_70D3C(&v324, v316, v30 + 16, v310, v307, v315);
        if (v324.i64[0] != v324.i64[1])
        {
          sub_11DE5C( (uint64_t)v340,  (uint64_t *)v316,  (std::string::size_type)&v324,  *(uint64_t **)(v30 + 104),  v315,  (uint64_t *)&p_shared_owners);
          sub_725DC((uint64_t)&v318, (uint64_t)v340);
          *(void *)uint64_t v340 = off_4709D0;
          unint64_t v44 = *(void **)&v340[16];
          if (*(void *)&v340[16])
          {
            sub_10AF78((uint64_t *)(*(void *)&v340[16] + 16LL));
            operator delete(v44);
          }

          if (!(_DWORD)v319)
          {
            *(void *)uint64_t v340 = &v324;
            sub_11E38C((void ***)v340);
            sub_32C8C(v327[0]);
            sub_32C8C(*(void **)&v325[8]);
            break;
          }
        }

        *(void *)uint64_t v340 = &v324;
        sub_11E38C((void ***)v340);
      }

      sub_32C8C(v327[0]);
      sub_32C8C(*(void **)&v325[8]);
      uint64_t v30 = *(void *)(v30 + 8);
      uint64_t v45 = *v313;
      if (v30 != *v313)
      {
        while (!sub_11E3FC(v31, v30 + 16))
        {
          uint64_t v30 = *(void *)(v30 + 8);
          if (v30 == v45)
          {
            uint64_t v30 = v45;
            break;
          }
        }
      }
    }

    while (v30 != v311);
  }

  sub_11E670(&p_shared_owners, (uint64_t)&v9[21]);
  *(void *)buf = &p_shared_owners;
  sub_A0CF0((void ***)buf);
  sub_32C8C(v335);
  sub_32C8C(v332);
  uint64_t v4 = v304;
  sub_725DC(v304, (uint64_t)&v318);
  uint64_t v318 = off_4709D0;
  CFTypeRef v46 = v320;
  if (v320)
  {
    sub_10AF78(v320 + 2);
    operator delete(v46);
  }

  if (!*(_DWORD *)(v304 + 8)) {
    goto LABEL_178;
  }
  uint64_t v47 = sub_138E8(8);
  uint64_t v48 = sub_138E8(34);
  char v49 = 0;
  uint64_t v50 = 0LL;
  *(void *)buf = 0x100000002LL;
  uint64_t v51 = *(void *)(v47 + 8);
  while (1)
  {
    uint64_t v52 = *(int *)&buf[4 * v50];
    char v53 = v49;
    if (((v51 & v52) != 0) != ((*(void *)(v48 + 8) & v52) != 0)) {
      break;
    }
    char v49 = 1;
    uint64_t v50 = 1LL;
    if ((v53 & 1) != 0) {
      goto LABEL_82;
    }
  }

  if ((v51 & v52) == 0) {
    uint64_t v47 = v48;
  }
  uint64_t v51 = *(void *)(v47 + 8);
LABEL_82:
  if ((v51 & 1) != 0)
  {
    uint64_t v54 = *(os_log_s **)v47;
    if (v54)
    {
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
      {
        int v55 = *(_DWORD *)(v304 + 8);
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2204;
        *(_WORD *)&_BYTE buf[18] = 1024;
        *(_DWORD *)&buf[20] = v55;
        _os_log_impl( &dword_0,  v54,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d ActivateForPreferredPersistentRoute failed with result %d.",  buf,  0x18u);
      }
    }
  }

    uint64_t v286 = *(_DWORD *)(a2 + 8);
    strcpy(v539, "dpuibolg");
    v539[9] = 0;
    *(_WORD *)&v539[10] = 0;
    uint64_t v287 = (unint64_t *)sub_E2D90((uint64_t *)&buf[8], v286);
    sub_87EB4(v287, (int *)v539);
    goto LABEL_492;
  }

  if (v283 == 1919184754) {
    goto LABEL_490;
  }
  uint64_t v285 = 1919842148;
LABEL_489:
  if (v283 == v285) {
    goto LABEL_490;
  }
LABEL_492:
  sub_261ED4(a2, *(unsigned __int8 *)(a2 + 168));
  sub_262608(a2);
  *(_OWORD *)&v552.__r_.__value_.__r.__words[1] = 0uLL;
  v552.__r_.__value_.__r.__words[0] = (std::string::size_type)&v552.__r_.__value_.__l.__size_;
  unint64_t v294 = a3;
  if (*(_BYTE *)(a3 + 784))
  {
    sub_2626F4((uint64_t)v539, (uint64_t **)v494, *(unsigned int **)(a3 + 600), *(unsigned int **)(a3 + 608));
    sub_32C8C((void *)v552.__r_.__value_.__l.__size_);
    BOOL v295 = *(void **)&v539[8];
    char v552 = *(std::string *)v539;
    if (*(void *)&v539[16])
    {
      *(void *)(*(void *)&v539[8] + 16LL) = &v552.__r_.__value_.__l.__size_;
      *(void *)v539 = &v539[8];
      *(void *)&v539[8] = 0LL;
      *(void *)&v539[16] = 0LL;
      BOOL v295 = 0LL;
    }

    else
    {
      v552.__r_.__value_.__r.__words[0] = (std::string::size_type)&v552.__r_.__value_.__l.__size_;
    }

    sub_32C8C(v295);
    unint64_t v294 = a3;
  }

  sub_13408((uint64_t)&theDict, @"route change reason", *(_DWORD *)(v294 + 12));
  unsigned __int8 v296 = *(void *)(v294 + 16);
  sub_128E30(v296);
  if (*(_DWORD *)v296 == 1668509810) {
    uint64_t v297 = 1668309362;
  }
  else {
    uint64_t v297 = *(_DWORD *)v296;
  }
  sub_13408((uint64_t)&theDict, @"category", v297);
  sub_13408((uint64_t)&theDict, @"mode", *(_DWORD *)(v296 + 4));
  if (*(_BYTE *)(v296 + 12)) {
    sub_13408((uint64_t)&theDict, @"optional output mode", *(_DWORD *)(v296 + 8));
  }
  if (*(_BYTE *)(sub_128E30(*(void *)(a3 + 16)) + 40))
  {
    v298 = sub_128E30(*(void *)(a3 + 16));
    sub_13408((uint64_t)&theDict, @"expanse session", *(unsigned __int8 *)(v298 + 40));
  }

  if (*(_BYTE *)(a3 + 784) && *(_BYTE *)(a3 + 592))
  {
    uint64_t v299 = *(const void **)(a3 + 576);
    *(void *)v539 = v299;
    v539[8] = *(_BYTE *)(a3 + 584);
    v539[9] = *(_BYTE *)(a3 + 585);
    if (v539[8] && v299)
    {
      CFRetain(v299);
      uint64_t v299 = *(const void **)v539;
    }

    if (v299
      && CFDictionaryGetCount((CFDictionaryRef)v299)
      && **(_BYTE **)(a2 + 216)
      && HIBYTE(v510)
      && *(void *)v539
      && theDict)
    {
      CFDictionarySetValue(theDict, @"voice processing configuration", *(const void **)v539);
    }

    sub_13850((uint64_t)v539);
  }

  theArray = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
  v527[0] = 257;
  v301 = *(void *)(a2 + 376);
  uint64_t v300 = *(void *)(a2 + 384);
  if (v300 != v301)
  {
    do
    {
      uint64_t v302 = v300 - 32;
      sub_85B80((uint64_t *)(v300 - 24));
      uint64_t v300 = v302;
    }

    while (v302 != v301);
  }

  *(void *)(a2 + 384) = v301;
  sub_8DCFC((uint64_t)&v535, *(void **)(a2 + 120));
  if (v489 == v284) {
    goto LABEL_589;
  }
  v303 = v489;
  do
  {
    v501 = (void *)v303[1];
    sub_262EC0(&v519, (uint64_t)&v535, *(_DWORD *)(*v303 + 580));
    uint64_t v304 = (int *)v519;
    exception_objecta = *(_Unwind_Exception **)&v520;
    if (v519 == *(void *)&v520) {
      goto LABEL_586;
    }
    do
    {
      uint64_t v305 = v303;
      int v306 = *v303;
      uint64_t v307 = *(void *)(*v303 + 576);
      v508 = v307;
      if ((*(unsigned int (**)(uint64_t))(*(void *)v306 + 112LL))(v306))
      {
        char v308 = *(id *)sub_138E8(13);
        int v309 = v308;
        if (v308)
        {
          uint64_t v310 = (os_log_s *)v308;
          if (os_log_type_enabled(v310, OS_LOG_TYPE_ERROR))
          {
            v522[0] = *(CFMutableDictionaryRef *)(*v305 + 576);
            sub_33464(&value, (unsigned int *)v522);
            p_value = &value;
            if ((value.__r_.__value_.__s.__size_ & 0x80u) != 0) {
              p_value = (std::string *)value.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)v539 = 136315650;
            *(void *)&v539[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&v539[12] = 1024;
            *(_DWORD *)&v539[14] = 4345;
            *(_WORD *)&v539[18] = 2080;
            *(void *)&v539[20] = p_value;
            _os_log_impl( &dword_0,  v310,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Hidden Device [%s] within the Route Configuration Info.",  v539,  0x1Cu);
          }
        }
      }

      *(void *)v539 = *(void *)(*v305 + 576);
      sub_85A90((uint64_t *)&v539[8], v501);
      sub_135DF4((void **)(a2 + 376), (uint64_t *)v539);
      sub_85B80((uint64_t *)&v539[8]);
      v522[0] = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      LOWORD(v522[1]) = 257;
      sub_13408((uint64_t)v522, @"device ID", *(_DWORD *)(*v305 + 8));
      if (BYTE1(v522[1]))
      {
        int v312 = *(const void **)(*v305 + 592);
        if (v312 && v522[0])
        {
          CFDictionarySetValue(v522[0], @"device UID", v312);
          if (!BYTE1(v522[1])) {
            goto LABEL_539;
          }
          int v312 = *(const void **)(*v305 + 592);
        }

        if (v312 && v522[0]) {
          CFDictionarySetValue(v522[0], @"device name", v312);
        }
      }

LABEL_86:
  if (*(_DWORD *)(v4 + 8))
  {
    if (v24 == 1667396196) {
      goto LABEL_88;
    }
    if (!v8[6].__vftable)
    {
      if (v24 == 1668510820)
      {
        uint64_t v77 = sub_138E8(8);
        uint64_t v78 = sub_138E8(34);
        char v79 = 0;
        uint64_t v80 = 0LL;
        *(void *)buf = 0x100000002LL;
        uint64_t v81 = *(void *)(v77 + 8);
        while (1)
        {
          uint64_t v82 = *(int *)&buf[4 * v80];
          char v83 = v79;
          if (((v81 & v82) != 0) != ((*(void *)(v78 + 8) & v82) != 0)) {
            break;
          }
          char v79 = 1;
          uint64_t v80 = 1LL;
          if ((v83 & 1) != 0) {
            goto LABEL_141;
          }
        }

        if ((v81 & v82) == 0) {
          uint64_t v77 = v78;
        }
LABEL_141:
        uint64_t v96 = *(os_log_s **)v77;
        if (v96 && os_log_type_enabled(v96, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2217;
          _os_log_impl(&dword_0, v96, OS_LOG_TYPE_INFO, "%25s:%-5d Attempt ActivateForLastInWins", buf, 0x12u);
        }

        char v97 = *(_BYTE *)(v11 + 64);
        LODWORD(__p) = a4;
        BYTE4(__p) = BYTE4(__p) & 0xFC | v97 & 3;
        sub_11AD54((uint64_t)buf, (uint64_t *)v9, &v9[21].__vftable, v310, (uint64_t)v8, (unsigned int *)&__p);
        sub_725DC(v4, (uint64_t)buf);
        goto LABEL_114;
      }

      int v64 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v64, "Precondition failure.");
    }

    do
    {
      if ((sub_1576EC(*v19) & 1) == 0)
      {
        char v62 = (os_log_t *)sub_138E8(13);
        int v63 = *v62;
        if (*v62 && os_log_type_enabled(*v62, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "DSPGraphConfig_Actions.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 232;
          _os_log_impl( &dword_0,  v63,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
        }

        goto LABEL_86;
      }

      ++v19;
    }

    while (v19 != (int *)v18.i64[1]);
    sub_36030(buf, v17, 1uLL);
    unint64_t v74 = v16;
    sub_158474((uint64_t)&__p, (CFTypeRef *)buf);
    if (*(void *)buf) {
      CFRelease(*(CFTypeRef *)buf);
    }
    uint64_t v20 = v83;
    uint64_t v75 = __p;
    if (__p != v83)
    {
      char v21 = (int *)__p;
      do
      {
        unint64_t v22 = *v21;
        *(void *)buf = buf;
        *(void *)&buf[8] = buf;
        uint64_t v23 = (unsigned int *)v18.i64[0];
        *(void *)&_DWORD buf[16] = 0LL;
        do
        {
          int v24 = *v23;
          LODWORD(v90) = 7;
          unint64_t v91 = v24;
          BOOL v25 = sub_149ED8((uint64_t)&v90);
          uint64_t v26 = *(void *)buf;
          *BOOL v25 = *(void *)buf;
          v25[1] = buf;
          *(void *)(v26 + 8) = v25;
          *(void *)buf = v25;
          ++*(void *)&buf[16];
          sub_2DBF5C((uint64_t)&v90);
          ++v23;
        }

        while (v23 != (unsigned int *)v18.i64[1]);
        sub_2DC204((uint64_t)v86, (uint64_t)buf);
        sub_149990((uint64_t *)buf);
        *(_DWORD *)buf = 7;
        *(_DWORD *)&_BYTE buf[12] = 0;
        *(_DWORD *)&buf[8] = v22;
        sub_149788((uint64_t)v87, (uint64_t)v86, (uint64_t)buf);
        BOOL v27 = sub_149ED8((uint64_t)v87);
        uint64_t v28 = v76;
        *BOOL v27 = v76;
        v27[1] = &v76;
        *(void *)(v28 + 8) = v27;
        *(void *)&uint64_t v76 = v27;
        uint64_t v77 = (void *)((char *)v77 + 1);
        sub_2DBF5C((uint64_t)v87);
        sub_2DBF5C((uint64_t)buf);
        sub_2DBF5C((uint64_t)v86);
        ++v21;
      }

      while (v21 != v20);
    }

    if (v75) {
      operator delete(v75);
    }
    if (v18.i64[0]) {
      operator delete((void *)v18.i64[0]);
    }
    if (cf) {
      CFRelease(cf);
    }
    CFRelease(v17);
    uint64_t v16 = v74 + 1;
  }

  while (v74 + 1 != v73);
  BOOL v29 = sub_149814(*(void *)a3, *(void *)(a3 + 8), 1684303986);
  if (v29)
  {
    uint64_t v30 = (uint64_t *)sub_2DD25C((int *)v29 + 6);
    uint64_t v31 = (uint64_t)v77;
    if (v77)
    {
      size_t v32 = v76;
      BOOL v33 = **((void **)&v76 + 1);
      *(void *)(v33 + 8) = *(void *)(v76 + 8);
      **(void **)(v32 + 8) = v33;
      unsigned int v34 = *v30;
      *(void *)(v34 + 8) = *((void *)&v32 + 1);
      **((void **)&v32 + 1) = v34;
      *uint64_t v30 = v32;
      *(void *)(v32 + 8) = v30;
      v30[2] += v31;
      uint64_t v77 = 0LL;
    }
  }

  else
  {
    sub_2DC204((uint64_t)&v88, (uint64_t)&v76);
    *(_DWORD *)buf = 1684303986;
    sub_2DC450((uint64_t)&buf[8], (uint64_t)&v88);
    sub_148DB8(a3, *(int *)buf, buf);
    sub_2DBF5C((uint64_t)&buf[8]);
    sub_2DBF5C((uint64_t)&v88);
  }

  sub_149990((uint64_t *)&v76);
  int v35 = 0LL;
LABEL_47:
  *(void *)buf = &v79;
  sub_14A284((void ***)buf);
  return v35;
}

          uint64_t v45 = 1000 * v44.__d_.__rep_;
LABEL_87:
          if (v45 > (v43.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v46.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_90:
            std::condition_variable::__do_timed_wait(&v105, &__lk, v46);
            std::chrono::steady_clock::now();
            goto LABEL_91;
          }
        }

        v46.__d_.__rep_ = v45 + v43.__d_.__rep_;
        goto LABEL_90;
      }

          unint64_t v74 = 1;
          if (!v55)
          {
LABEL_105:
            if (((v53 | v74) & 1) == 0)
            {
              uint64_t v81 = *(void *)(a1 + 280);
              uint64_t v80 = *(std::__shared_weak_count **)(a1 + 288);
              if (v80)
              {
                p_shared_weak_owners = (unint64_t *)&v80->__shared_weak_owners_;
                do
                  char v83 = __ldxr(p_shared_weak_owners);
                while (__stxr(v83 + 1, p_shared_weak_owners));
                do
                  char v84 = __ldxr(p_shared_weak_owners);
                while (__stxr(v84 + 1, p_shared_weak_owners));
              }

              *(void *)buf = *(void *)v87;
              *(_DWORD *)&buf[8] = *(_DWORD *)&v87[8];
              int v85 = (dispatch_queue_s *)sub_869B4();
              __int16 v86 = operator new(0x20uLL);
              *__int16 v86 = v81;
              v86[1] = v80;
              v86[2] = *(void *)buf;
              *((_DWORD *)v86 + 6) = *(_DWORD *)&buf[8];
              std::string __p = 0LL;
              dispatch_async_f(v85, v86, (dispatch_function_t)sub_235E60);
              sub_ADC0C((void **)&__p);
              if (v80) {
                std::__shared_weak_count::__release_weak(v80);
              }
            }

            return;
          }

          char *v40 = v41;
          BOOL v42 = 2;
          goto LABEL_90;
        }

        int v85 = 0LL;
        __int16 v86 = 0;
      }

LABEL_214:
                      BOOL v133 = v124 == 0;
                      if (v124 || (v63 & 2) == 0)
                      {
LABEL_231:
                        if (v65)
                        {
                          std::__shared_weak_count::__release_weak(v65);
                          if (v133) {
                            goto LABEL_494;
                          }
                          goto LABEL_235;
                        }

LABEL_234:
                        if (v133)
                        {
LABEL_494:
                          unint64_t v292 = (os_log_t *)sub_138E8(13);
                          int v293 = *v292;
                          if (*v292 && os_log_type_enabled(*v292, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)buf = 136315394;
                            *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
                            *(_WORD *)&_BYTE buf[12] = 1024;
                            *(_DWORD *)&buf[14] = 2734;
                            _os_log_impl( &dword_0,  v293,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
                          }

                          goto LABEL_505;
                        }

LABEL_378:
                                  uint64_t v241 = std::__shared_weak_count::lock(v8);
                                  if (v241) {
                                    uint64_t v242 = v230;
                                  }
                                  else {
                                    uint64_t v242 = 0LL;
                                  }
                                  if (!v9)
                                  {
LABEL_390:
                                    BOOL v245 = v242 == 0;
                                    a4 = v306;
                                    goto LABEL_391;
                                  }

LABEL_423:
                                  uint64_t v268 = std::__shared_weak_count::lock(v255);
                                  if (v268) {
                                    uint64_t v269 = v256;
                                  }
                                  else {
                                    uint64_t v269 = 0LL;
                                  }
                                  if (!v262)
                                  {
LABEL_435:
                                    BOOL v272 = v269 == 0LL;
                                    a4 = v306;
                                    goto LABEL_436;
                                  }

LABEL_430:
                                  int v270 = std::__shared_weak_count::lock(v262);
                                  if (!v270) {
                                    goto LABEL_435;
                                  }
                                  v271 = v270;
                                  BOOL v272 = v269 == v263;
                                  unint64_t v273 = (unint64_t *)&v270->__shared_owners_;
                                  do
                                    unint64_t v274 = __ldaxr(v273);
                                  while (__stlxr(v274 - 1, v273));
                                  a4 = v306;
                                  if (!v274)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
                                    std::__shared_weak_count::__release_weak(v271);
                                  }

                                  if (!v268) {
                                    goto LABEL_440;
                                  }
LABEL_436:
                                  v275 = (unint64_t *)&v268->__shared_owners_;
                                  do
                                    unint64_t v276 = __ldaxr(v275);
                                  while (__stlxr(v276 - 1, v275));
                                  if (!v276)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
                                    std::__shared_weak_count::__release_weak(v268);
                                    if (v272)
                                    {
LABEL_441:
                                      LOBYTE(v251) = 0;
                                      if (!v262) {
                                        goto LABEL_443;
                                      }
LABEL_442:
                                      std::__shared_weak_count::__release_weak(v262);
                                      goto LABEL_443;
                                    }
                                  }

                                  else
                                  {
LABEL_440:
                                    if (v272) {
                                      goto LABEL_441;
                                    }
                                  }

                                  sub_B8CBC((uint64_t *)v340, v227 + 4, "", 2781);
                                  BOOL v280 = *(std::__shared_weak_count **)&v340[8];
                                  unsigned int v281 = *(unsigned __int16 *)(*(void *)v340 + 184LL);
                                  if (*(void *)&v340[8])
                                  {
                                    int v282 = (unint64_t *)(*(void *)&v340[8] + 8LL);
                                    do
                                      unint64_t v283 = __ldaxr(v282);
                                    while (__stlxr(v283 - 1, v282));
                                    if (!v283)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v280->__on_zero_shared)(v280);
                                      std::__shared_weak_count::__release_weak(v280);
                                    }
                                  }

                                  int v251 = (v281 >> 2) & 1;
                                  if (v262) {
                                    goto LABEL_442;
                                  }
LABEL_443:
                                  if (v255)
                                  {
                                    std::__shared_weak_count::__release_weak(v255);
                                    uint64_t v4 = v305;
                                    if ((v312 & 1) == 0) {
                                      goto LABEL_452;
                                    }
                                  }

                                  else
                                  {
                                    uint64_t v4 = v305;
                                    if (!v312) {
                                      goto LABEL_452;
                                    }
                                  }

LABEL_447:
                                  std::string v277 = (std::__shared_weak_count *)v319;
                                  if (v319)
                                  {
                                    uint64_t v278 = (unint64_t *)(v319 + 8);
                                    do
                                      unint64_t v279 = __ldaxr(v278);
                                    while (__stlxr(v279 - 1, v278));
                                    if (!v279)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v277->__on_zero_shared)(v277);
                                      std::__shared_weak_count::__release_weak(v277);
                                    }
                                  }

LABEL_452:
                                  if (v317)
                                  {
                                    if (v9) {
                                      std::__shared_weak_count::__release_weak(v9);
                                    }
                                    if (v8) {
                                      std::__shared_weak_count::__release_weak(v8);
                                    }
                                  }

                                  if ((v251 & 1) != 0) {
                                    goto LABEL_470;
                                  }
                                  char v227 = (void *)v227[1];
                                  if (v227 == v314) {
                                    goto LABEL_468;
                                  }
                                }

                                uint64_t v236 = 0LL;
                                uint64_t v9 = 0LL;
LABEL_377:
                                if (!v8) {
                                  goto LABEL_384;
                                }
                                goto LABEL_378;
                              }
                            }

                            else
                            {
LABEL_283:
                              std::__shared_weak_count::__release_weak(v159);
                            }
                          }
                        }

                        if (!v338) {
                          goto LABEL_312;
                        }
                        unint64_t v180 = std::__shared_weak_count::lock(v338);
                        if (!v180) {
                          goto LABEL_312;
                        }
                        __int128 v181 = v180;
                        unint64_t v182 = v337;
                        CFStringRef v183 = (unint64_t *)&v180->__shared_weak_owners_;
                        do
                          unint64_t v184 = __ldxr(v183);
                        while (__stxr(v184 + 1, v183));
                        __int128 v185 = (unint64_t *)&v180->__shared_owners_;
                        do
                          unint64_t v186 = __ldaxr(v185);
                        while (__stlxr(v186 - 1, v185));
                        if (!v186)
                        {
                          ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                          std::__shared_weak_count::__release_weak(v181);
                        }

                        __int128 v187 = std::__shared_weak_count::lock(v181);
                        if (v187)
                        {
                          uint64_t v188 = v187;
                          CFStringRef v189 = (unint64_t *)&v187->__shared_owners_;
                          do
                            unint64_t v190 = __ldaxr(v189);
                          while (__stlxr(v190 - 1, v189));
                          if (!v190)
                          {
                            ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
                            std::__shared_weak_count::__release_weak(v188);
                          }
                        }

                        else
                        {
                          unint64_t v182 = 0LL;
                        }

                        std::__shared_weak_count::__release_weak(v181);
                        if (v182)
                        {
                          int v198 = 0;
                          v199 = v338;
                          *(void *)uint64_t v340 = v337;
                        }

                        else
                        {
LABEL_312:
                          *(void *)uint64_t v340 = v324.i64[0];
                          int v198 = 1;
                          v199 = (std::__shared_weak_count *)v324.i64[1];
                        }

                        *(void *)&v340[8] = v199;
                        if (v199)
                        {
                          unint64_t v200 = (unint64_t *)&v199->__shared_weak_owners_;
                          do
                            unint64_t v201 = __ldxr(v200);
                          while (__stxr(v201 + 1, v200));
                        }

                        memset(v325, 0, sizeof(v325));
                        *(void *)buf = v325;
                        buf[8] = 0;
                        *(void *)int v325 = operator new(0x10uLL);
                        *(void *)&v325[8] = *(void *)v325;
                        *(void *)&v325[16] = *(void *)v325 + 16LL;
                        uint64_t v202 = sub_132AFC((uint64_t)&v325[16], v340, &v340[16], *(void **)v325);
                        *(void *)&v325[8] = v202;
                        if (*(void *)&v340[8])
                        {
                          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v340[8]);
                          uint64_t v202 = *(void **)&v325[8];
                        }

                        uint64_t v204 = v9[21].__vftable;
                        shared_owners = (char *)v9[21].__shared_owners_;
                        if (shared_owners - (char *)v204 >= 1)
                        {
                          uint64_t v205 = (shared_owners - (char *)v204) >> 4;
                          if (v205 <= (uint64_t)(*(void *)&v325[16] - (void)v202) >> 4)
                          {
                            if (v205 <= 0)
                            {
                              int v210 = (std::__shared_weak_count_vtbl *)((char *)v204 + 16 * v205);
                              uint64_t v9 = v316;
                              sub_12A1F4((uint64_t)v325, (uint64_t)v202, (unint64_t)v202, (char *)&v202[2 * v205]);
                              while (v204 != v210)
                              {
                                uint64_t v212 = v204->~__shared_weak_count;
                                unint64_t v211 = v204->~__shared_weak_count_0;
                                if (v211)
                                {
                                  uint64_t v213 = (unint64_t *)((char *)v211 + 16);
                                  do
                                    unint64_t v214 = __ldxr(v213);
                                  while (__stxr(v214 + 1, v213));
                                }

                                BOOL v215 = (std::__shared_weak_count *)v202[1];
                                void *v202 = v212;
                                v202[1] = v211;
                                if (v215) {
                                  std::__shared_weak_count::__release_weak(v215);
                                }
                                uint64_t v204 = (std::__shared_weak_count_vtbl *)((char *)v204 + 16);
                                v202 += 2;
                              }
                            }

                            else
                            {
                              *(void *)&v325[8] = sub_132AFC((uint64_t)&v325[16], v204, shared_owners, v202);
                              uint64_t v9 = v316;
                            }
                          }

                          else
                          {
                            uint64_t v206 = ((uint64_t)v202 - *(void *)v325) >> 4;
                            unint64_t v207 = (uint64_t)(*(void *)&v325[16] - *(void *)v325) >> 3;
                            if (v207 <= v206 + v205) {
                              unint64_t v207 = v206 + v205;
                            }
                            if (*(void *)&v325[16] - *(void *)v325 >= 0x7FFFFFFFFFFFFFF0uLL) {
                              unint64_t v208 = 0xFFFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v208 = v207;
                            }
                            *(void *)&_BYTE buf[32] = &v325[16];
                            if (v208) {
                              unint64_t v208 = (unint64_t)sub_7BE90(v208);
                            }
                            else {
                              uint64_t v209 = 0LL;
                            }
                            BOOL v216 = (void (__cdecl **)(std::__shared_weak_count *__hidden))(v208 + 16 * v206);
                            *(void *)buf = v208;
                            *(void *)&buf[8] = v216;
                            *(void *)&buf[24] = v208 + 16 * v209;
                            unint64_t v217 = &v216[2 * v205];
                            do
                            {
                              *BOOL v216 = v204->~__shared_weak_count;
                              int v218 = v204->~__shared_weak_count_0;
                              v216[1] = v218;
                              if (v218)
                              {
                                unint64_t v219 = (unint64_t *)((char *)v218 + 16);
                                do
                                  unint64_t v220 = __ldxr(v219);
                                while (__stxr(v220 + 1, v219));
                              }

                              v216 += 2;
                              uint64_t v204 = (std::__shared_weak_count_vtbl *)((char *)v204 + 16);
                            }

                            while (v216 != v217);
                            *(void *)&_DWORD buf[16] = v217;
                            sub_12A280((uint64_t *)v325, buf, v202);
                            sub_121448((uint64_t)buf);
                          }
                        }

                        *(_DWORD *)buf = 1;
                        if (v198) {
                          char v221 = 0;
                        }
                        else {
                          char v221 = 2;
                        }
                        uint8_t buf[4] = v221 | v198 | buf[4] & 0xFC;
                        sub_11AD54((uint64_t)&__p, (uint64_t *)v9, v325, v310, (uint64_t)v8, (unsigned int *)buf);
                        *(void *)buf = v325;
                        sub_A0CF0((void ***)buf);
                        goto LABEL_160;
                      }

LABEL_505:
            v298 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v298, "Precondition failure.");
          }
        }

        else if ((v84 & 1) == 0)
        {
          std::__shared_weak_count::__release_weak(v65);
        }

        uint64_t v99 = sub_138E8(8);
        uint64_t v9 = v316;
        if ((*(_BYTE *)(v99 + 8) & 1) != 0)
        {
          unint64_t v100 = *(os_log_s **)v99;
          if (*(void *)v99)
          {
            if (os_log_type_enabled(*(os_log_t *)v99, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136315394;
              *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2726;
              _os_log_impl( &dword_0,  v100,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Didn't find any valid ports to override, ignorning specified override ports.",  buf,  0x12u);
            }
          }
        }

        sub_72210((uint64_t)&__p, 1920099684LL);
        goto LABEL_160;
      }
    }

    else
    {
      uint64_t v65 = 0LL;
    }

    char v84 = 1;
    goto LABEL_124;
  }

LABEL_178:
  int v111 = *(_DWORD *)(v4 + 8);
  if (!a4 && v111)
  {
    uint64_t v112 = sub_138E8(8);
    uint64_t v113 = sub_138E8(34);
    char v114 = 0;
    uint64_t v115 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v116 = *(void *)(v112 + 8);
    while (1)
    {
      uint64_t v117 = *(int *)&buf[4 * v115];
      char v118 = v114;
      if (((v116 & v117) != 0) != ((*(void *)(v113 + 8) & v117) != 0)) {
        break;
      }
      char v114 = 1;
      uint64_t v115 = 1LL;
      if ((v118 & 1) != 0) {
        goto LABEL_186;
      }
    }

    if ((v116 & v117) == 0) {
      uint64_t v112 = v113;
    }
LABEL_186:
    unint64_t v119 = *(os_log_s **)v112;
    if (v119 && os_log_type_enabled(v119, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2234;
      _os_log_impl( &dword_0,  v119,  OS_LOG_TYPE_INFO,  "%25s:%-5d Attempt ActivateForNormal - Non cacheable ports",  buf,  0x12u);
    }

    sub_705D0((uint64_t)buf, (uint64_t *)v9, v310, (uint64_t)v8);
    sub_725DC(v4, (uint64_t)buf);
    *(void *)buf = off_4709D0;
    unint64_t v120 = *(void **)&buf[16];
    if (*(void *)&buf[16])
    {
      sub_10AF78((uint64_t *)(*(void *)&buf[16] + 16LL));
      operator delete(v120);
    }

    int v111 = *(_DWORD *)(v4 + 8);
  }

  if (!v111 && !sub_72348(*(unsigned int *)(v4 + 12)))
  {
    uint64_t v121 = (os_log_t *)sub_138E8(8);
    int v122 = *v121;
    if (*v121)
    {
      if (os_log_type_enabled(*v121, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2239;
        _os_log_impl(&dword_0, v122, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found a valid replacement route.", buf, 0x12u);
      }
    }
  }

  sub_11AD14(v323[4]);
  sub_FF3B8(v323[1]);
}

  if (v82 == v83)
  {
    unint64_t v100 = (os_log_t *)sub_138E8(13);
    BOOL v101 = *v100;
    if (*v100)
    {
      if (os_log_type_enabled(*v100, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v319 = 136315394;
        *(void *)&v319[4] = "VirtualStream.cpp";
        *(_WORD *)&v319[12] = 1024;
        *(_DWORD *)&v319[14] = 1744;
        _os_log_impl( &dword_0,  v101,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: No remaining stream formats after applying multi-channel culling policy",  v319,  0x12u);
      }
    }
  }

  uint64_t v94 = buf[2];
  if (buf[2])
  {
    if ((void)v306 == *((void *)&v306 + 1))
    {
LABEL_190:
      int v98 = sub_138E8(22);
      if ((*(_BYTE *)(v98 + 8) & 1) != 0)
      {
        uint64_t v99 = *(os_log_s **)v98;
        if (*(void *)v98)
        {
          if (os_log_type_enabled(*(os_log_t *)v98, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)uint64_t v319 = 136315394;
            *(void *)&v319[4] = "VirtualStream.cpp";
            *(_WORD *)&v319[12] = 1024;
            *(_DWORD *)&v319[14] = 1762;
            _os_log_impl( &dword_0,  v99,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Skipped culling of stereo and mono LPCM stream formats",  v319,  0x12u);
          }
        }
      }
    }

    else
    {
      unint64_t v95 = (_DWORD *)v306;
      while (1)
      {
        uint64_t v96 = v95[2] == 1819304813 && (v95[3] & 1) == 0;
        if (!v96 || v95[7] >= 3u) {
          break;
        }
        v95 += 14;
        if (v95 == *((_DWORD **)&v306 + 1)) {
          goto LABEL_190;
        }
      }

      uint64_t v102 = v306;
      while ((sub_27EF8C(v94, v102) & 1) == 0)
      {
        v102 += 56LL;
        if (v102 == *((void *)&v306 + 1)) {
          goto LABEL_213;
        }
      }

      if (v102 != *((void *)&v306 + 1))
      {
        for (uint64_t j = v102 + 56; j != *((void *)&v306 + 1); j += 56LL)
        {
          if ((sub_27EF8C(buf[2], j) & 1) == 0)
          {
            uint64_t v106 = *(_OWORD *)j;
            uint64_t v107 = *(_OWORD *)(j + 16);
            char v108 = *(_OWORD *)(j + 32);
            *(void *)(v102 + sub_51FA0(v10 + 48) = *(void *)(j + 48);
            *(_OWORD *)(v102 + 16) = v107;
            *(_OWORD *)(v102 + sub_7A768(v9 - 32) = v108;
            *(_OWORD *)uint64_t v102 = v106;
            v102 += 56LL;
          }
        }
      }

      if (v102 != *((void *)&v306 + 1))
      {
        *(void *)&unint64_t v109 = v306;
        *((void *)&v109 + 1) = v102;
        int v306 = v109;
      }
    }
  }

void sub_132074( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20, uint64_t a21, uint64_t a22, uint64_t a23, int a24, int a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, void *a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, char a37, std::__shared_weak_count *a38, uint64_t a39, char a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, char a46, uint64_t a47, uint64_t a48, char a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53)
{
  uint64_t v56 = *(std::__shared_weak_count **)(v54 - 240);
  if (v56) {
    std::__shared_weak_count::__release_weak(v56);
  }
  if (a38) {
    std::__shared_weak_count::__release_weak(a38);
  }
  sub_11AD14(a35);
  sub_FF3B8(a32);
  sub_7058C(a14);
  _Unwind_Resume(a1);
}

void sub_132308(uint64_t ***a1, void *a2)
{
  a1[1] = 0LL;
  uint64_t v4 = (uint64_t **)(a1 + 1);
  a1[2] = 0LL;
  *a1 = (uint64_t **)(a1 + 1);
  a1[4] = 0LL;
  a1[3] = (uint64_t **)(a1 + 4);
  uint64_t v5 = (uint64_t **)(a1 + 3);
  a1[5] = 0LL;
  sub_132E38((uint64_t)&v28, a2);
  sub_FF3B8(a1[1]);
  uint64_t v6 = v29;
  *a1 = v28;
  a1[1] = (uint64_t **)v6;
  uint64_t v7 = v30;
  a1[2] = (uint64_t **)v30;
  if (v7)
  {
    v6[2] = (uint64_t)v4;
    uint64_t v28 = &v29;
    BOOL v29 = 0LL;
    uint64_t v30 = 0LL;
    uint64_t v6 = 0LL;
  }

  else
  {
    *a1 = v4;
  }

  sub_FF3B8(v6);
  char v8 = (void *)a2[3];
  uint64_t v23 = a2 + 4;
  if (v8 != a2 + 4)
  {
    uint64_t v9 = *v5;
    do
    {
      sub_132E38((uint64_t)&v32, v8 + 5);
      unsigned int v24 = *((_DWORD *)v8 + 8);
      unsigned int v10 = v33;
      BOOL v25 = v32;
      uint64_t v26 = v33;
      uint64_t v27 = v34;
      if (v34)
      {
        v33[2] = &v26;
        size_t v32 = (uint64_t *)&v33;
        BOOL v33 = 0LL;
        uint64_t v34 = 0LL;
        unsigned int v10 = 0LL;
      }

      else
      {
        BOOL v25 = (uint64_t *)&v26;
      }

      sub_FF3B8(v10);
      LODWORD(v28) = v24;
      uint64_t v11 = v25;
      BOOL v29 = v25;
      uint64_t v30 = v26;
      uint64_t v31 = v27;
      if (v27)
      {
        v26[2] = &v30;
        uint64_t v26 = 0LL;
        uint64_t v27 = 0LL;
      }

      else
      {
        BOOL v29 = (uint64_t *)&v30;
        uint64_t v11 = (uint64_t *)&v30;
      }

      unsigned int v12 = sub_1181CC(v5, v9, &v32, &v35, v24);
      BOOL v13 = (void *)*v12;
      if (!*v12)
      {
        uint64_t v14 = (uint64_t **)v12;
        uint64_t v15 = operator new(0x40uLL);
        BOOL v13 = v15;
        uint64_t v16 = v30;
        uint64_t v17 = v31;
        v15[6] = v30;
        uint64_t v18 = (char *)(v15 + 6);
        *((_DWORD *)v15 + 8) = v24;
        v15[5] = v11;
        v15[7] = v17;
        if (v17)
        {
          v16[2] = v18;
          BOOL v29 = (uint64_t *)&v30;
          uint64_t v30 = 0LL;
          uint64_t v31 = 0LL;
        }

        else
        {
          v15[5] = v18;
        }

        sub_32C38(v5, (uint64_t)v32, v14, v15);
      }

      uint64_t v19 = (uint64_t *)v13[1];
      if (v19)
      {
        do
        {
          uint64_t v9 = v19;
          uint64_t v19 = (uint64_t *)*v19;
        }

        while (v19);
      }

      else
      {
        do
        {
          uint64_t v9 = (uint64_t *)v13[2];
          BOOL v20 = *v9 == (void)v13;
          BOOL v13 = v9;
        }

        while (!v20);
      }

      sub_FF3B8(v30);
      sub_FF3B8(v26);
      char v21 = (void *)v8[1];
      if (v21)
      {
        do
        {
          unint64_t v22 = v21;
          char v21 = (void *)*v21;
        }

        while (v21);
      }

      else
      {
        do
        {
          unint64_t v22 = (void *)v8[2];
          BOOL v20 = *v22 == (void)v8;
          char v8 = v22;
        }

        while (!v20);
      }

      char v8 = v22;
    }

    while (v22 != v23);
  }

void sub_132554( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_132584(uint64_t **a1, uint64_t a2, int a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  sub_132B90(&v48, *(void **)a2);
  uint64_t v6 = v48;
  if (v48 != v49)
  {
    uint64_t v7 = 0LL;
    do
    {
      if (((*(uint64_t (**)(uint64_t *))(*v6[4] + 152))(v6[4]) & 1) == 0)
      {
        BOOL v42 = (os_log_t *)sub_138E8(13);
        int v43 = *v42;
        if (*v42 && os_log_type_enabled(*v42, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          uint64_t v51 = "RoutingManager.cpp";
          __int16 v52 = 1024;
          int v53 = 2703;
          _os_log_impl( &dword_0,  v43,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): one of the specified ports is not connected.",  buf,  0x12u);
        }

        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "one of the specified ports is not connected.");
LABEL_67:
      }

      if (((*(uint64_t (**)(uint64_t *))(*v6[4] + 160))(v6[4]) & 1) == 0)
      {
        unsigned int v39 = (os_log_t *)sub_138E8(13);
        BOOL v40 = *v39;
        if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          uint64_t v51 = "RoutingManager.cpp";
          __int16 v52 = 1024;
          int v53 = 2704;
          _os_log_impl( &dword_0,  v40,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): one of the specified ports is not routable.",  buf,  0x12u);
        }

        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "one of the specified ports is not routable.");
        goto LABEL_67;
      }

      if (a3 || !*(_BYTE *)(a2 + 8))
      {
        if (a3 == 1 && *(_BYTE *)(a2 + 9) && (v6[4][23] & 1) == 0)
        {
          if (v7)
          {
            uint64_t v19 = std::__shared_weak_count::lock(v7);
            if (v19)
            {
              BOOL v20 = v19;
              char v21 = *a1;
              p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
              do
                unint64_t v23 = __ldxr(p_shared_weak_owners);
              while (__stxr(v23 + 1, p_shared_weak_owners));
              p_shared_owners = (unint64_t *)&v19->__shared_owners_;
              do
                unint64_t v25 = __ldaxr(p_shared_owners);
              while (__stlxr(v25 - 1, p_shared_owners));
              if (!v25)
              {
                ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
                std::__shared_weak_count::__release_weak(v20);
              }

              uint64_t v26 = std::__shared_weak_count::lock(v20);
              if (v26)
              {
                uint64_t v27 = v26;
                uint64_t v28 = (unint64_t *)&v26->__shared_owners_;
                do
                  unint64_t v29 = __ldaxr(v28);
                while (__stlxr(v29 - 1, v28));
                if (!v29)
                {
                  ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                  std::__shared_weak_count::__release_weak(v27);
                }

                std::__shared_weak_count::__release_weak(v20);
                if (v21)
                {
                  CFTypeRef v46 = (os_log_t *)sub_138E8(13);
                  uint64_t v47 = *v46;
                  if (*v46 && os_log_type_enabled(*v46, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136315394;
                    uint64_t v51 = "RoutingManager.cpp";
                    __int16 v52 = 1024;
                    int v53 = 2713;
                    _os_log_impl( &dword_0,  v47,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): more than one output specified in inPortsForOverride.",  buf,  0x12u);
                  }

                  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  std::logic_error::logic_error(exception, "more than one output specified in inPortsForOverride.");
                  goto LABEL_67;
                }
              }

              else
              {
                std::__shared_weak_count::__release_weak(v20);
              }
            }
          }

          uint64_t v30 = v6[4];
          uint64_t v7 = (std::__shared_weak_count *)v6[5];
          if (v7)
          {
            BOOL v33 = (unint64_t *)&v7->__shared_weak_owners_;
            do
              unint64_t v34 = __ldxr(v33);
            while (__stxr(v34 + 1, v33));
          }

          goto LABEL_50;
        }
      }

      else if ((v6[4][23] & 1) != 0)
      {
        if (v7)
        {
          char v8 = std::__shared_weak_count::lock(v7);
          if (v8)
          {
            uint64_t v9 = v8;
            unsigned int v10 = *a1;
            uint64_t v11 = (unint64_t *)&v8->__shared_weak_owners_;
            do
              unint64_t v12 = __ldxr(v11);
            while (__stxr(v12 + 1, v11));
            BOOL v13 = (unint64_t *)&v8->__shared_owners_;
            do
              unint64_t v14 = __ldaxr(v13);
            while (__stlxr(v14 - 1, v13));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v9);
            }

            uint64_t v15 = std::__shared_weak_count::lock(v9);
            if (v15)
            {
              uint64_t v16 = v15;
              uint64_t v17 = (unint64_t *)&v15->__shared_owners_;
              do
                unint64_t v18 = __ldaxr(v17);
              while (__stlxr(v18 - 1, v17));
              if (!v18)
              {
                ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                std::__shared_weak_count::__release_weak(v16);
              }

              std::__shared_weak_count::__release_weak(v9);
              if (v10)
              {
                unint64_t v44 = (os_log_t *)sub_138E8(13);
                uint64_t v45 = *v44;
                if (*v44)
                {
                  if (os_log_type_enabled(*v44, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136315394;
                    uint64_t v51 = "RoutingManager.cpp";
                    __int16 v52 = 1024;
                    int v53 = 2708;
                    _os_log_impl( &dword_0,  v45,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): more than one input specified in inPortsForOverride.",  buf,  0x12u);
                  }
                }

                exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(exception, "more than one input specified in inPortsForOverride.");
                goto LABEL_67;
              }
            }

            else
            {
              std::__shared_weak_count::__release_weak(v9);
            }
          }
        }

        uint64_t v30 = v6[4];
        uint64_t v7 = (std::__shared_weak_count *)v6[5];
        if (v7)
        {
          uint64_t v31 = (unint64_t *)&v7->__shared_weak_owners_;
          do
            unint64_t v32 = __ldxr(v31);
          while (__stxr(v32 + 1, v31));
        }

void sub_132AA4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  unint64_t v14 = *(std::__shared_weak_count **)(v11 + 8);
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(a1);
}

void *sub_132AFC(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  unint64_t v12 = a4;
  uint64_t v11 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  if (a2 != a3)
  {
    do
    {
      void *v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5)
      {
        uint64_t v6 = (unint64_t *)(v5 + 16);
        do
          unint64_t v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }

      a2 += 2;
      v4 += 2;
    }

    while (a2 != a3);
    unint64_t v12 = v4;
  }

  char v10 = 1;
  sub_1253E0((uint64_t)v9);
  return v4;
}

void sub_132B90(uint64_t ***a1, void *a2)
{
  uint64_t v30 = 0LL;
  uint64_t v31 = 0LL;
  unint64_t v29 = &v30;
  uint64_t v3 = a2 + 1;
  uint64_t v4 = (void *)*a2;
  if ((void *)*a2 == a2 + 1)
  {
    unint64_t v25 = 0LL;
    *a1 = &v30;
    a1[1] = 0LL;
    uint64_t v27 = (uint64_t **)(a1 + 1);
    a1[2] = 0LL;
LABEL_46:
    *a1 = v27;
    goto LABEL_47;
  }

  do
  {
    uint64_t v5 = (std::__shared_weak_count *)v4[5];
    if (v5)
    {
      uint64_t v6 = std::__shared_weak_count::lock(v5);
      uint64_t v28 = v6;
      if (v6)
      {
        unint64_t v7 = v6;
        unint64_t v8 = v4[4];
        if (!v8) {
          goto LABEL_24;
        }
        uint64_t v9 = v30;
        char v10 = &v30;
        if (v29 == &v30) {
          goto LABEL_11;
        }
        uint64_t v11 = v30;
        unint64_t v12 = &v30;
        if (v30)
        {
          do
          {
            char v10 = (uint64_t **)v11;
            uint64_t v11 = (uint64_t *)v11[1];
          }

          while (v11);
        }

        else
        {
          do
          {
            char v10 = (uint64_t **)v12[2];
            BOOL v13 = *v10 == (uint64_t *)v12;
            unint64_t v12 = v10;
          }

          while (v13);
        }

        if ((unint64_t)v10[4] < v8)
        {
LABEL_11:
          unint64_t v14 = v30 ? v10 : &v30;
          uint64_t v15 = v30 ? v10 + 1 : &v30;
        }

        else
        {
          unint64_t v14 = &v30;
          uint64_t v15 = &v30;
          if (v30)
          {
            uint64_t v15 = &v30;
            while (1)
            {
              while (1)
              {
                unint64_t v14 = (uint64_t **)v9;
                unint64_t v24 = v9[4];
                if (v8 >= v24) {
                  break;
                }
                uint64_t v9 = *v14;
                uint64_t v15 = v14;
                if (!*v14) {
                  goto LABEL_18;
                }
              }

              if (v24 >= v8) {
                break;
              }
              uint64_t v15 = v14 + 1;
              uint64_t v9 = v14[1];
              if (!v9) {
                goto LABEL_18;
              }
            }
          }
        }

        if (!*v15)
        {
LABEL_18:
          uint64_t v16 = (uint64_t *)operator new(0x30uLL);
          uint64_t v17 = v16;
          v16[4] = v8;
          v16[5] = (uint64_t)v7;
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            unint64_t v19 = __ldxr(p_shared_owners);
          while (__stxr(v19 + 1, p_shared_owners));
          *uint64_t v16 = 0LL;
          v16[1] = 0LL;
          v16[2] = (uint64_t)v14;
          *uint64_t v15 = v16;
          if (*v29)
          {
            unint64_t v29 = (uint64_t **)*v29;
            uint64_t v17 = *v15;
          }

          sub_7A420(v30, v17);
          uint64_t v31 = (uint64_t **)((char *)v31 + 1);
          unint64_t v7 = v28;
        }

        if (v7)
        {
LABEL_24:
          BOOL v20 = (unint64_t *)&v7->__shared_owners_;
          do
            unint64_t v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
      }
    }

    unint64_t v22 = (void *)v4[1];
    if (v22)
    {
      do
      {
        unint64_t v23 = v22;
        unint64_t v22 = (void *)*v22;
      }

      while (v22);
    }

    else
    {
      do
      {
        unint64_t v23 = (void *)v4[2];
        BOOL v13 = *v23 == (void)v4;
        uint64_t v4 = v23;
      }

      while (!v13);
    }

    uint64_t v4 = v23;
  }

  while (v23 != v3);
  unint64_t v25 = v30;
  uint64_t v26 = v31;
  *a1 = v29;
  a1[1] = (uint64_t **)v25;
  uint64_t v27 = (uint64_t **)(a1 + 1);
  a1[2] = v26;
  if (!v26) {
    goto LABEL_46;
  }
  v25[2] = (uint64_t)v27;
  uint64_t v30 = 0LL;
  uint64_t v31 = 0LL;
  unint64_t v25 = 0LL;
LABEL_47:
  sub_132DF8(v25);
}

void sub_132DDC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13)
{
}

void sub_132DF8(void *a1)
{
  if (a1)
  {
    sub_132DF8(*a1);
    sub_132DF8(a1[1]);
    sub_7A768((uint64_t)(a1 + 4));
    operator delete(a1);
  }

void sub_132E38(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = sub_546E0();
  std::string __p = 0LL;
  BOOL v20 = 0LL;
  uint64_t v21 = 0LL;
  strcpy(v22, "cwdv");
  v22[8] = 0;
  int v23 = 3;
  v25[0] = 0LL;
  v25[1] = 0LL;
  unint64_t v24 = v25;
  int v26 = 44739242;
  CFTypeRef cf = 0LL;
  unint64_t v29 = &off_470B88;
  uint64_t v31 = (uint64_t *)&v29;
  sub_FFB0C(v28, v4, &__p, (uint64_t)&v29);
  uint64_t v5 = (uint64_t (***)())v31;
  if (v31 == (uint64_t *)&v29)
  {
    uint64_t v6 = 4LL;
    uint64_t v5 = &v29;
  }

  else
  {
    if (!v31) {
      goto LABEL_6;
    }
    uint64_t v6 = 5LL;
  }

  (*v5)[v6]();
LABEL_6:
  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(v25[0]);
  if (__p)
  {
    BOOL v20 = __p;
    operator delete(__p);
  }

  uint64_t v9 = (void *)*a2;
  unint64_t v7 = a2 + 1;
  unint64_t v8 = v9;
  if (v9 != v7)
  {
    do
    {
      for (uint64_t i = (uint64_t *)v28[1]; i != v28; uint64_t i = (uint64_t *)i[1])
      {
        sub_B8F68((uint64_t *)&v29, i + 2, "", 135);
        uint64_t v11 = (__CFString *)v29[31];
        std::string __p = v11;
        LOBYTE(v20) = *((_BYTE *)v29 + 256);
        if ((_BYTE)v20) {
          BOOL v12 = v11 == 0LL;
        }
        else {
          BOOL v12 = 1;
        }
        if (!v12) {
          CFRetain(v11);
        }
        CFComparisonResult v13 = CFStringCompare(v11, (CFStringRef)v8[4], 0LL);
        sub_19DFC((uint64_t)&__p);
        unint64_t v14 = v30;
        if (v30)
        {
          p_shared_owners = (unint64_t *)&v30->__shared_owners_;
          do
            unint64_t v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }

        if (v13 == kCFCompareEqualTo)
        {
          if (i != v28) {
            sub_13315C((uint64_t **)a1, (unint64_t *)i + 2, i + 2);
          }
          break;
        }
      }

      uint64_t v17 = (void *)v8[1];
      if (v17)
      {
        do
        {
          unint64_t v18 = v17;
          uint64_t v17 = (void *)*v17;
        }

        while (v17);
      }

      else
      {
        do
        {
          unint64_t v18 = (void *)v8[2];
          BOOL v12 = *v18 == (void)v8;
          unint64_t v8 = v18;
        }

        while (!v12);
      }

      unint64_t v8 = v18;
    }

    while (v18 != v7);
  }

  sub_85B80(v28);
}

void sub_133098( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_13315C(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t result = sub_D744C((uint64_t)a1, &v11, a2);
  if (!*result)
  {
    uint64_t v6 = (uint64_t **)result;
    unint64_t v7 = (uint64_t *)operator new(0x30uLL);
    uint64_t v8 = a3[1];
    v7[4] = *a3;
    void v7[5] = v8;
    if (v8)
    {
      uint64_t v9 = (unint64_t *)(v8 + 16);
      do
        unint64_t v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }

    return sub_32C38(a1, v11, v6, v7);
  }

  return result;
}

uint64_t *sub_1331F0(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = sub_D744C((uint64_t)a1, &v8, a2);
  if (!*result)
  {
    uint64_t v6 = (uint64_t **)result;
    unint64_t v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *(_OWORD *)a3;
    *(void *)a3 = 0LL;
    *(void *)(a3 + 8) = 0LL;
    return sub_32C38(a1, v8, v6, v7);
  }

  return result;
}

void sub_133270(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 != a2)
  {
    while (1)
    {
      unint64_t v18 = 0LL;
      unint64_t v19 = 0LL;
      v28[0] = &off_470C60;
      v28[1] = &v18;
      unint64_t v29 = v28;
      char v5 = sub_1334F4((uint64_t *)(v2 + 16), (uint64_t)v28);
      uint64_t v6 = v29;
      if (v29 == v28) {
        break;
      }
      if (v29)
      {
        uint64_t v7 = 5LL;
LABEL_6:
        (*(void (**)(void))(*v6 + 8 * v7))();
      }

      if ((v5 & 1) == 0)
      {
        uint64_t v8 = (os_log_t *)sub_138E8(8);
        uint64_t v9 = *v8;
        if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_DEBUG))
        {
          sub_1263EC(v16, (os_unfair_lock_s **)(v2 + 16));
          int v10 = v17;
          uint64_t v11 = (void **)v16[0];
          sub_1263EC(__p, &v18);
          BOOL v12 = v16;
          if (v10 < 0) {
            BOOL v12 = v11;
          }
          CFComparisonResult v13 = __p;
          if (v15 < 0) {
            CFComparisonResult v13 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136315906;
          uint64_t v21 = "RoutingManager.cpp";
          __int16 v22 = 1024;
          int v23 = 284;
          __int16 v24 = 2080;
          unint64_t v25 = v12;
          __int16 v26 = 2080;
          uint64_t v27 = v13;
          _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Disallowing port %s for colistening, partner port is %s",  buf,  0x26u);
          if (v15 < 0) {
            operator delete(__p[0]);
          }
          if (v17 < 0) {
            operator delete(v16[0]);
          }
        }

        sub_13315C((uint64_t **)a1, (unint64_t *)(v2 + 16), (uint64_t *)(v2 + 16));
      }

      if (v19) {
        std::__shared_weak_count::__release_weak(v19);
      }
      uint64_t v2 = *(void *)(v2 + 8);
      if (v2 == a2) {
        return;
      }
    }

    uint64_t v6 = v28;
    uint64_t v7 = 4LL;
    goto LABEL_6;
  }

void sub_133478( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, std::__shared_weak_count *a23)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a23) {
    std::__shared_weak_count::__release_weak(a23);
  }
  sub_FF3B8(*a10);
  _Unwind_Resume(a1);
}

uint64_t sub_1334F4(uint64_t *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(v34 + 144);
  uint64_t v5 = 1LL;
  if (v4 > 1886152040)
  {
    if (v4 != 1886152041)
    {
      int v6 = 1886216820;
      goto LABEL_6;
    }

void sub_133834( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  sub_7A768((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_1338A0(uint64_t *a1, uint64_t *a2, int a3)
{
  uint64_t v5 = v23;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      unint64_t v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }

  for (uint64_t i = (uint64_t *)v25[1]; ; uint64_t i = (uint64_t *)i[1])
  {
    if (i == v25) {
      goto LABEL_28;
    }
    uint64_t v9 = i[2];
    int v10 = (std::__shared_weak_count *)i[3];
    if (v10) {
      break;
    }
    if (*(_DWORD *)(v9 + 144) == a3) {
      goto LABEL_19;
    }
LABEL_18:
    ;
  }

  uint64_t v11 = (unint64_t *)&v10->__shared_owners_;
  do
    unint64_t v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  int v13 = *(_DWORD *)(v9 + 144);
  do
    unint64_t v14 = __ldaxr(v11);
  while (__stlxr(v14 - 1, v11));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }

  if (v13 != a3) {
    goto LABEL_18;
  }
LABEL_19:
  if (i == v25)
  {
LABEL_28:
    uint64_t v15 = 0LL;
    goto LABEL_29;
  }

  uint64_t v15 = i[2];
  uint64_t v16 = (std::__shared_weak_count *)i[3];
  if (!v16)
  {
LABEL_29:
    *a1 = v15;
    a1[1] = 0LL;
    goto LABEL_30;
  }

  char v17 = (unint64_t *)&v16->__shared_owners_;
  do
    unint64_t v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  *a1 = v15;
  a1[1] = (uint64_t)v16;
  p_shared_weak_owners = (unint64_t *)&v16->__shared_weak_owners_;
  do
    unint64_t v20 = __ldxr(p_shared_weak_owners);
  while (__stxr(v20 + 1, p_shared_weak_owners));
  do
    unint64_t v21 = __ldaxr(v17);
  while (__stlxr(v21 - 1, v17));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }

void sub_133A40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

void *sub_133A6C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_470C60;
  result[1] = v3;
  return result;
}

uint64_t sub_133AA0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_470C60;
  a2[1] = v2;
  return result;
}

uint64_t sub_133ABC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3)
  {
    uint64_t v5 = (unint64_t *)(v3 + 16);
    do
      unint64_t v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }

  unint64_t v7 = (std::__shared_weak_count *)v2[1];
  *uint64_t v2 = v4;
  v2[1] = v3;
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  return 0LL;
}

uint64_t sub_133B00(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  sub_6DD4();
  if (((*(uint64_t (**)(uint64_t *))(qword_48F828 + 48))(&qword_48F828) & 1) == 0)
  {
    uint64_t v5 = (os_log_t *)sub_138E8(13);
    unint64_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      uint64_t v9 = "RoutingManager.cpp";
      __int16 v10 = 1024;
      int v11 = 2024;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to acquire routing mutex.",  (uint8_t *)&v8,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to acquire routing mutex.");
  }

  uint64_t v3 = *(unsigned int *)(a1 + 32);
  if (v2) {
    (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  }
  return v3;
}

void sub_133C4C(_Unwind_Exception *a1)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_133C98(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  sub_6DD4();
  if (((*(uint64_t (**)(uint64_t *))(qword_48F828 + 48))(&qword_48F828) & 1) == 0)
  {
    uint64_t v5 = (os_log_t *)sub_138E8(13);
    unint64_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      uint64_t v9 = "RoutingManager.cpp";
      __int16 v10 = 1024;
      int v11 = 2033;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to acquire routing mutex.",  (uint8_t *)&v8,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to acquire routing mutex.");
  }

  uint64_t v3 = *(unsigned int *)(a1 + 36);
  if (v2) {
    (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  }
  return v3;
}

void sub_133DE4(_Unwind_Exception *a1)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
  }
  _Unwind_Resume(a1);
}

void sub_133E30(uint64_t *a1, int a2)
{
  v84[8] = 0;
  int v85 = 3;
  v87[0] = 0LL;
  v87[1] = 0LL;
  __int16 v86 = v87;
  int v88 = 44739242;
  CFTypeRef cf = 0LL;
  uint64_t v4 = (char *)operator new(4uLL);
  *(_DWORD *)uint64_t v4 = 1886152041;
  std::string __p = v4;
  uint64_t v82 = v4 + 4;
  char v83 = v4 + 4;
  unint64_t v6 = sub_7A890(2uLL);
  unint64_t v7 = (char *)__p;
  int v8 = v82;
  v6[1] = 1886152047;
  uint64_t v9 = (char *)(v6 + 1);
  __int16 v10 = (char *)(v6 + 2);
  while (v8 != v7)
  {
    int v11 = *((_DWORD *)v8 - 1);
    v8 -= 4;
    *((_DWORD *)v9 - 1) = v11;
    v9 -= 4;
  }

  std::string __p = v9;
  uint64_t v82 = (char *)(v6 + 2);
  char v83 = &v6[v5];
  if (v7) {
    operator delete(v7);
  }
  uint64_t v82 = v10;
  uint64_t v12 = sub_546E0();
  *(void *)buf = &off_470B88;
  unint64_t v95 = buf;
  sub_FF3FC(v80, v12, (unsigned int **)&__p, (uint64_t)buf);
  int v13 = v95;
  if (v95 == buf)
  {
    uint64_t v14 = 4LL;
    int v13 = buf;
  }

  else
  {
    if (!v95) {
      goto LABEL_11;
    }
    uint64_t v14 = 5LL;
  }

  (*(void (**)(void))(*(void *)v13 + 8 * v14))();
LABEL_11:
  if (!v80[2]) {
    goto LABEL_102;
  }
  if (!a2)
  {
    uint64_t v18 = sub_138E8(8);
    uint64_t v19 = sub_138E8(34);
    char v20 = 0;
    uint64_t v21 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v22 = *(void *)(v18 + 8);
    while (1)
    {
      uint64_t v23 = (int)buf[v21];
      char v24 = v20;
      if (((v22 & v23) != 0) != ((*(void *)(v19 + 8) & v23) != 0)) {
        break;
      }
      char v20 = 1;
      uint64_t v21 = 1LL;
      if ((v24 & 1) != 0) {
        goto LABEL_28;
      }
    }

    if ((v22 & v23) == 0) {
      uint64_t v18 = v19;
    }
LABEL_28:
    uint64_t v32 = *(os_log_s **)v18;
    if (v32 && os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 3914;
      _os_log_impl( &dword_0,  v32,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Making BTLE Ports routable (Setting:Always)",  (uint8_t *)buf,  0x12u);
    }

    uint64_t v33 = sub_546E0();
    uint64_t v34 = 1LL;
    goto LABEL_38;
  }

  if (a2 == 1)
  {
    uint64_t v25 = sub_138E8(8);
    uint64_t v26 = sub_138E8(34);
    char v27 = 0;
    uint64_t v28 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v29 = *(void *)(v25 + 8);
    while (1)
    {
      uint64_t v30 = (int)buf[v28];
      char v31 = v27;
      if (((v29 & v30) != 0) != ((*(void *)(v26 + 8) & v30) != 0)) {
        break;
      }
      char v27 = 1;
      uint64_t v28 = 1LL;
      if ((v31 & 1) != 0) {
        goto LABEL_34;
      }
    }

    if ((v29 & v30) == 0) {
      uint64_t v25 = v26;
    }
LABEL_34:
    uint64_t v35 = *(os_log_s **)v25;
    if (v35 && os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 3875;
      _os_log_impl( &dword_0,  v35,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Making BTLE Ports unroutable (Setting:Never)",  (uint8_t *)buf,  0x12u);
    }

    uint64_t v33 = sub_546E0();
    uint64_t v34 = 0LL;
LABEL_38:
    sub_103CF8(v33, (uint64_t)v80, v34, 0);
    goto LABEL_102;
  }

  if (a2 != 2) {
    goto LABEL_102;
  }
  sub_128FCC(v79, *a1);
  memset(buf, 0, sizeof(buf));
  strcpy((char *)&v95, "cwdv");
  char v96 = 0;
  int v97 = 3;
  v99[0] = 0LL;
  v99[1] = 0LL;
  int v98 = v99;
  CFTypeRef v101 = 0LL;
  int v100 = 44739104;
  uint64_t v15 = sub_546E0();
  *(void *)unint64_t v92 = &off_470B88;
  BOOL v93 = v92;
  sub_FF3FC(v77, v15, (unsigned int **)buf, (uint64_t)v92);
  uint64_t v16 = v93;
  if (v93 == v92)
  {
    uint64_t v17 = 4LL;
    uint64_t v16 = v92;
    goto LABEL_40;
  }

  if (v93)
  {
    uint64_t v17 = 5LL;
LABEL_40:
    (*(void (**)(void))(*v16 + 8 * v17))();
  }

  *(void *)unint64_t v92 = v79;
  sub_134728(v77[1], v77, v78, (uint64_t *)v92);
  if (v78)
  {
    uint64_t v37 = *(void *)(v77[0] + 16);
    uint64_t v36 = *(std::__shared_weak_count **)(v77[0] + 24);
    if (v36)
    {
      p_shared_weak_owners = (unint64_t *)&v36->__shared_weak_owners_;
      do
        unint64_t v39 = __ldxr(p_shared_weak_owners);
      while (__stxr(v39 + 1, p_shared_weak_owners));
    }

    for (uint64_t i = (uint64_t *)v80[1]; i != v80; uint64_t i = (uint64_t *)i[1])
    {
      BOOL v41 = (std::__shared_weak_count *)i[3];
      if (!v41) {
        goto LABEL_57;
      }
      uint64_t v42 = i[2];
      int v43 = (unint64_t *)&v41->__shared_weak_owners_;
      do
        unint64_t v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
      uint64_t v45 = std::__shared_weak_count::lock(v41);
      if (v45)
      {
        CFTypeRef v46 = v45;
        uint64_t v47 = (unint64_t *)&v45->__shared_weak_owners_;
        do
          unint64_t v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
        *(void *)unint64_t v92 = v42;
        *(void *)&v92[2] = v45;
        p_shared_owners = (unint64_t *)&v45->__shared_owners_;
        do
          unint64_t v50 = __ldaxr(p_shared_owners);
        while (__stlxr(v50 - 1, p_shared_owners));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v46);
        }
      }

      else
      {
LABEL_57:
        *(void *)unint64_t v92 = 0LL;
        *(void *)&v92[2] = 0LL;
      }

      unint64_t v51 = sub_12A4F8((uint64_t)v79, (uint64_t *)v92);
      uint64_t v90 = 0LL;
      unint64_t v91 = 0LL;
      if (v36)
      {
        __int16 v52 = std::__shared_weak_count::lock(v36);
        if (v52)
        {
          int v53 = v52;
          uint64_t v54 = (unint64_t *)&v52->__shared_weak_owners_;
          do
            unint64_t v55 = __ldxr(v54);
          while (__stxr(v55 + 1, v54));
          uint64_t v90 = v37;
          unint64_t v91 = v52;
          uint64_t v56 = (unint64_t *)&v52->__shared_owners_;
          do
            unint64_t v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v53);
          }
        }

        else
        {
          uint64_t v90 = 0LL;
          unint64_t v91 = 0LL;
        }
      }

      unint64_t v58 = sub_12A4F8((uint64_t)v79, &v90);
      if (v91) {
        std::__shared_weak_count::__release_weak(v91);
      }
      if (*(void *)&v92[2]) {
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v92[2]);
      }
      if (v41) {
        std::__shared_weak_count::__release_weak(v41);
      }
      if (v51 > v58)
      {
        uint64_t v66 = sub_138E8(8);
        uint64_t v67 = sub_138E8(34);
        char v68 = 0;
        uint64_t v69 = 0LL;
        *(void *)unint64_t v92 = 0x100000002LL;
        uint64_t v70 = *(void *)(v66 + 8);
        while (1)
        {
          uint64_t v71 = (int)v92[v69];
          char v72 = v68;
          if (((v70 & v71) != 0) != ((*(void *)(v67 + 8) & v71) != 0)) {
            break;
          }
          char v68 = 1;
          uint64_t v69 = 1LL;
          if ((v72 & 1) != 0) {
            goto LABEL_91;
          }
        }

        if ((v70 & v71) == 0) {
          uint64_t v66 = v67;
        }
LABEL_91:
        uint64_t v75 = *(os_log_s **)v66;
        if (v75 && os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
        {
          v92[0] = 136315394;
          *(void *)&v92[1] = "RoutingManager.cpp";
          LOWORD(v92[3]) = 1024;
          *(_DWORD *)((char *)&v92[3] + 2) = 3901;
          _os_log_impl( &dword_0,  v75,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Making BTLE Ports routable (Setting:Automatic)",  (uint8_t *)v92,  0x12u);
        }

        uint64_t v76 = sub_546E0();
        sub_103CF8(v76, (uint64_t)v80, 1LL, 0);
        break;
      }
    }

    if (v36) {
      std::__shared_weak_count::__release_weak(v36);
    }
  }

  else
  {
    uint64_t v59 = sub_138E8(8);
    uint64_t v60 = sub_138E8(34);
    char v61 = 0;
    uint64_t v62 = 0LL;
    *(void *)unint64_t v92 = 0x100000002LL;
    uint64_t v63 = *(void *)(v59 + 8);
    while (1)
    {
      uint64_t v64 = (int)v92[v62];
      char v65 = v61;
      if (((v63 & v64) != 0) != ((*(void *)(v60 + 8) & v64) != 0)) {
        break;
      }
      char v61 = 1;
      uint64_t v62 = 1LL;
      if ((v65 & 1) != 0) {
        goto LABEL_85;
      }
    }

    if ((v63 & v64) == 0) {
      uint64_t v59 = v60;
    }
LABEL_85:
    unint64_t v73 = *(os_log_s **)v59;
    if (v73 && os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
    {
      v92[0] = 136315394;
      *(void *)&v92[1] = "RoutingManager.cpp";
      LOWORD(v92[3]) = 1024;
      *(_DWORD *)((char *)&v92[3] + 2) = 3907;
      _os_log_impl( &dword_0,  v73,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Making BTLE Ports routable (Setting:Automatic)",  (uint8_t *)v92,  0x12u);
    }

    uint64_t v74 = sub_546E0();
    sub_103CF8(v74, (uint64_t)v80, 1LL, 0);
  }

  sub_85B80(v77);
  if (v101) {
    CFRelease(v101);
  }
  sub_32C8C(v99[0]);
  if (*(void *)buf)
  {
    *(void *)&buf[2] = *(void *)buf;
    operator delete(*(void **)buf);
  }

  sub_32C8C(v79[1]);
LABEL_102:
  sub_85B80(v80);
  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(v87[0]);
  if (__p)
  {
    uint64_t v82 = (char *)__p;
    operator delete(__p);
  }

void sub_1345EC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, std::__shared_weak_count *a30, char a31, std::__shared_weak_count *a32, uint64_t a33, uint64_t a34)
{
  if (v34) {
    std::__shared_weak_count::__release_weak(v34);
  }
  sub_85B80(&a9);
  sub_A0DB0(v35 - 176);
  sub_32C8C(a13);
  sub_85B80(&a15);
  sub_A0DB0((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t *sub_134728(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v4 = (uint64_t **)a1;
  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      int v8 = (uint64_t *)*a2;
      uint64_t v9 = *(std::__shared_weak_count **)(*a2 + 24);
      v71[0] = *(void *)(*a2 + 16);
      v71[1] = (uint64_t)v9;
      if (v9)
      {
        p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
        do
          unint64_t v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
      }

      uint64_t v12 = *(std::__shared_weak_count **)(a1 + 24);
      v70[0] = *(void *)(a1 + 16);
      v70[1] = (uint64_t)v12;
      if (v12)
      {
        int v13 = (unint64_t *)&v12->__shared_weak_owners_;
        do
          unint64_t v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }

      BOOL v15 = sub_134B68(a4, v71, v70);
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      if (v9) {
        std::__shared_weak_count::__release_weak(v9);
      }
      if (v15)
      {
        uint64_t v16 = *v8;
        *(void *)(v16 + 8) = v8[1];
        *(void *)v8[1] = v16;
        uint64_t v17 = *v4;
        v17[1] = (uint64_t)v8;
        uint64_t *v8 = (uint64_t)v17;
        char *v4 = v8;
        v8[1] = (uint64_t)v4;
        return v8;
      }
    }

    else
    {
      unint64_t v19 = a3 >> 1;
      unint64_t v20 = (a3 >> 1) + 1;
      uint64_t v21 = a1;
      do
      {
        uint64_t v21 = *(void *)(v21 + 8);
        --v20;
      }

      while (v20 > 1);
      uint64_t v22 = (uint64_t **)sub_134728(a1, v21, a3 >> 1, a4);
      uint64_t v4 = (uint64_t **)sub_134728(v21, a2, a3 - v19, a4);
      uint64_t v23 = (std::__shared_weak_count *)v4[3];
      v69[0] = (uint64_t)v4[2];
      v69[1] = (uint64_t)v23;
      if (v23)
      {
        char v24 = (unint64_t *)&v23->__shared_weak_owners_;
        do
          unint64_t v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }

      uint64_t v26 = (std::__shared_weak_count *)v22[3];
      v68[0] = (uint64_t)v22[2];
      v68[1] = (uint64_t)v26;
      if (v26)
      {
        char v27 = (unint64_t *)&v26->__shared_weak_owners_;
        do
          unint64_t v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }

      BOOL v29 = sub_134B68(a4, v69, v68);
      if (v26) {
        std::__shared_weak_count::__release_weak(v26);
      }
      if (v23) {
        std::__shared_weak_count::__release_weak(v23);
      }
      if (v29)
      {
        for (uint64_t i = v4[1]; i != a2; uint64_t i = (uint64_t *)i[1])
        {
          char v31 = (std::__shared_weak_count *)i[3];
          v67[0] = i[2];
          v67[1] = (uint64_t)v31;
          if (v31)
          {
            uint64_t v32 = (unint64_t *)&v31->__shared_weak_owners_;
            do
              unint64_t v33 = __ldxr(v32);
            while (__stxr(v33 + 1, v32));
          }

          uint64_t v34 = (std::__shared_weak_count *)v22[3];
          v66[0] = (uint64_t)v22[2];
          v66[1] = (uint64_t)v34;
          if (v34)
          {
            uint64_t v35 = (unint64_t *)&v34->__shared_weak_owners_;
            do
              unint64_t v36 = __ldxr(v35);
            while (__stxr(v36 + 1, v35));
          }

          BOOL v37 = sub_134B68(a4, v67, v66);
          if (v34) {
            std::__shared_weak_count::__release_weak(v34);
          }
          if (v31)
          {
            std::__shared_weak_count::__release_weak(v31);
            if (!v37) {
              goto LABEL_46;
            }
          }

          else if (!v37)
          {
            goto LABEL_46;
          }
        }

        uint64_t i = a2;
LABEL_46:
        uint64_t v39 = *i;
        BOOL v40 = *v4;
        v40[1] = *(void *)(*i + 8);
        **(void **)(v39 + 8) = v40;
        BOOL v41 = *v22;
        uint64_t v38 = v22[1];
        v41[1] = (uint64_t)v4;
        char *v4 = v41;
        *uint64_t v22 = (uint64_t *)v39;
        *(void *)(v39 + 8) = v22;
      }

      else
      {
        uint64_t v38 = v22[1];
        uint64_t i = (uint64_t *)v4;
        uint64_t v4 = v22;
      }

      if (v38 != i && i != a2)
      {
        uint64_t v42 = i;
        do
        {
          int v43 = (std::__shared_weak_count *)i[3];
          v65[0] = i[2];
          v65[1] = (uint64_t)v43;
          if (v43)
          {
            unint64_t v44 = (unint64_t *)&v43->__shared_weak_owners_;
            do
              unint64_t v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
          }

          CFTypeRef v46 = (std::__shared_weak_count *)v38[3];
          v64[0] = v38[2];
          v64[1] = (uint64_t)v46;
          if (v46)
          {
            uint64_t v47 = (unint64_t *)&v46->__shared_weak_owners_;
            do
              unint64_t v48 = __ldxr(v47);
            while (__stxr(v48 + 1, v47));
          }

          BOOL v49 = sub_134B68(a4, v65, v64);
          if (v46) {
            std::__shared_weak_count::__release_weak(v46);
          }
          if (v43) {
            std::__shared_weak_count::__release_weak(v43);
          }
          if (v49)
          {
            for (uint64_t j = (uint64_t *)i[1]; j != a2; uint64_t j = (uint64_t *)j[1])
            {
              unint64_t v51 = (std::__shared_weak_count *)j[3];
              v63[0] = j[2];
              v63[1] = (uint64_t)v51;
              if (v51)
              {
                __int16 v52 = (unint64_t *)&v51->__shared_weak_owners_;
                do
                  unint64_t v53 = __ldxr(v52);
                while (__stxr(v53 + 1, v52));
              }

              uint64_t v54 = (std::__shared_weak_count *)v38[3];
              v62[0] = v38[2];
              v62[1] = (uint64_t)v54;
              if (v54)
              {
                unint64_t v55 = (unint64_t *)&v54->__shared_weak_owners_;
                do
                  unint64_t v56 = __ldxr(v55);
                while (__stxr(v56 + 1, v55));
              }

              BOOL v57 = sub_134B68(a4, v63, v62);
              if (v54) {
                std::__shared_weak_count::__release_weak(v54);
              }
              if (v51)
              {
                std::__shared_weak_count::__release_weak(v51);
                if (!v57) {
                  goto LABEL_78;
                }
              }

              else if (!v57)
              {
                goto LABEL_78;
              }
            }

            uint64_t j = a2;
LABEL_78:
            uint64_t v58 = *j;
            uint64_t v59 = *i;
            *(void *)(v59 + 8) = *(void *)(*j + 8);
            **(void **)(v58 + 8) = v59;
            if (v42 == i) {
              uint64_t v42 = j;
            }
            uint64_t v61 = *v38;
            uint64_t v60 = (uint64_t *)v38[1];
            *(void *)(v61 + 8) = i;
            *uint64_t i = v61;
            *uint64_t v38 = v58;
            *(void *)(v58 + 8) = v38;
            uint64_t v38 = v60;
            uint64_t i = j;
          }

          else
          {
            uint64_t v38 = (uint64_t *)v38[1];
          }
        }

        while (v38 != v42 && i != a2);
      }
    }
  }

  return (uint64_t *)v4;
}

void sub_134B1C(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_134B68(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = *a1;
  uint64_t v29 = 0LL;
  uint64_t v30 = 0LL;
  unint64_t v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    int v8 = std::__shared_weak_count::lock(v6);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *a2;
      p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
      do
        unint64_t v12 = __ldxr(p_shared_weak_owners);
      while (__stxr(v12 + 1, p_shared_weak_owners));
      uint64_t v29 = v10;
      uint64_t v30 = v8;
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        unint64_t v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v9);
      }
    }

    else
    {
      uint64_t v29 = 0LL;
      uint64_t v30 = 0LL;
    }
  }

  unint64_t v15 = sub_12A4F8(v5, &v29);
  uint64_t v16 = *a1;
  uint64_t v27 = 0LL;
  unint64_t v28 = 0LL;
  uint64_t v17 = (std::__shared_weak_count *)a3[1];
  if (v17)
  {
    uint64_t v18 = std::__shared_weak_count::lock(v17);
    if (v18)
    {
      unint64_t v19 = v18;
      uint64_t v20 = *a3;
      uint64_t v21 = (unint64_t *)&v18->__shared_weak_owners_;
      do
        unint64_t v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      uint64_t v27 = v20;
      unint64_t v28 = v18;
      uint64_t v23 = (unint64_t *)&v18->__shared_owners_;
      do
        unint64_t v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v19);
      }
    }

    else
    {
      uint64_t v27 = 0LL;
      unint64_t v28 = 0LL;
    }
  }

  unint64_t v25 = sub_12A4F8(v16, &v27);
  if (v28) {
    std::__shared_weak_count::__release_weak(v28);
  }
  if (v30) {
    std::__shared_weak_count::__release_weak(v30);
  }
  return v15 < v25;
}

void sub_134CC4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_weak(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_134CF0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      unint64_t v6 = operator new(0x20uLL);
      void *v6 = 0LL;
      v6[1] = 0LL;
      sub_FA4C0(v6 + 2, (uint64_t *)(v5 + 16));
      uint64_t v7 = *a1;
      void *v6 = *a1;
      v6[1] = a1;
      *(void *)(v7 + 8) = v6;
      *a1 = (uint64_t)v6;
      ++a1[2];
      uint64_t v5 = *(void *)(v5 + 8);
    }

    while (v5 != a3);
  }

  return a1;
}

void sub_134D74(_Unwind_Exception *a1)
{
}

void *sub_134D88(void *result, uint64_t *a2, void *a3, void *a4)
{
  if (a3 != a4)
  {
    uint64_t v7 = result;
    uint64_t result = operator new(0x20uLL);
    int v8 = result;
    void *result = 0LL;
    result[1] = 0LL;
    uint64_t v9 = a3[3];
    result[2] = a3[2];
    result[3] = v9;
    if (v9)
    {
      uint64_t v10 = (unint64_t *)(v9 + 16);
      do
        unint64_t v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }

    unint64_t v12 = (void *)a3[1];
    uint64_t v13 = 1LL;
    if (v12 != a4)
    {
      unint64_t v14 = result;
      do
      {
        uint64_t result = operator new(0x20uLL);
        void *result = v14;
        result[1] = 0LL;
        uint64_t v15 = v12[3];
        result[2] = v12[2];
        result[3] = v15;
        if (v15)
        {
          uint64_t v16 = (unint64_t *)(v15 + 16);
          do
            unint64_t v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
        }

        v14[1] = result;
        ++v13;
        unint64_t v12 = (void *)v12[1];
        unint64_t v14 = result;
      }

      while (v12 != a4);
    }

    uint64_t v18 = *a2;
    *(void *)(v18 + 8) = v8;
    void *v8 = v18;
    *a2 = (uint64_t)result;
    result[1] = a2;
    v7[2] += v13;
  }

  return result;
}

void sub_134E80(void *a1)
{
  while (1)
  {
    int v2 = (void *)*v1;
    uint64_t v3 = (std::__shared_weak_count *)v1[3];
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    operator delete(v1);
    uint64_t v1 = v2;
    if (!v2) {
      __cxa_rethrow();
    }
  }

void sub_134EAC(_Unwind_Exception *a1)
{
}

void *sub_134EC0(void *a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    while (1)
    {
      unint64_t v6 = (std::__shared_weak_count *)a3[1];
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        int v8 = v7;
        if (v7)
        {
          uint64_t v9 = *a3;
          p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
          do
            unint64_t v11 = __ldxr(p_shared_weak_owners);
          while (__stxr(v11 + 1, p_shared_weak_owners));
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            unint64_t v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v8);
          }
        }

        else
        {
          uint64_t v9 = 0LL;
        }
      }

      else
      {
        uint64_t v9 = 0LL;
        int v8 = 0LL;
      }

      unint64_t v14 = (std::__shared_weak_count *)v3[5];
      if (v14)
      {
        uint64_t v15 = std::__shared_weak_count::lock(v14);
        if (v15) {
          uint64_t v16 = v3[4];
        }
        else {
          uint64_t v16 = 0LL;
        }
        if (!v8)
        {
LABEL_24:
          BOOL v19 = v16 == 0;
          goto LABEL_25;
        }
      }

      else
      {
        uint64_t v16 = 0LL;
        uint64_t v15 = 0LL;
        if (!v8) {
          goto LABEL_24;
        }
      }

      unint64_t v17 = std::__shared_weak_count::lock(v8);
      if (!v17) {
        goto LABEL_24;
      }
      uint64_t v18 = v17;
      BOOL v19 = v16 == v9;
      uint64_t v20 = (unint64_t *)&v17->__shared_owners_;
      do
        unint64_t v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v18);
      }

__n128 sub_135088(uint64_t a1, CFStringRef **a2, CFStringRef **a3, uint64_t a4, void *a5, __n128 *a6)
{
  int v8 = *a2;
  uint64_t v9 = *a3;
  if (*a2 == *a3)
  {
LABEL_38:
    __n128 v30 = *a6;
    goto LABEL_39;
  }

  for (uint64_t i = *(void **)a4; *(void *)a4 != *a5; uint64_t i = *(void **)a4)
  {
    if (CFStringCompare(v8[4], (CFStringRef)i[4], 0LL) == kCFCompareLessThan)
    {
      sub_1355B8((uint64_t)a6, *a2 + 4);
      unint64_t v22 = *a2;
      unint64_t v23 = (CFStringRef *)(*a2)[1];
      if (v23)
      {
        do
        {
          unint64_t v24 = (CFStringRef **)v23;
          unint64_t v23 = (CFStringRef *)*v23;
        }

        while (v23);
      }

      else
      {
        do
        {
          unint64_t v24 = (CFStringRef **)v22[2];
          BOOL v18 = *v24 == v22;
          unint64_t v22 = (CFStringRef *)v24;
        }

        while (!v18);
      }

      *a2 = (CFStringRef *)v24;
    }

    else
    {
      if (CFStringCompare(*(CFStringRef *)(*(void *)a4 + 32LL), (*a2)[4], 0LL) == kCFCompareLessThan)
      {
        unint64_t v25 = *(void **)a4;
        BOOL v26 = *(void **)(*(void *)a4 + 8LL);
        if (v26)
        {
          do
          {
            unint64_t v21 = v26;
            BOOL v26 = (void *)*v26;
          }

          while (v26);
        }

        else
        {
          do
          {
            unint64_t v21 = (void *)v25[2];
            BOOL v18 = *v21 == (void)v25;
            unint64_t v25 = v21;
          }

          while (!v18);
        }
      }

      else
      {
        uint64_t v15 = *a2;
        uint64_t v16 = (CFStringRef *)(*a2)[1];
        if (v16)
        {
          do
          {
            unint64_t v17 = (CFStringRef **)v16;
            uint64_t v16 = (CFStringRef *)*v16;
          }

          while (v16);
        }

        else
        {
          do
          {
            unint64_t v17 = (CFStringRef **)v15[2];
            BOOL v18 = *v17 == v15;
            uint64_t v15 = (CFStringRef *)v17;
          }

          while (!v18);
        }

        *a2 = (CFStringRef *)v17;
        BOOL v19 = *(void **)a4;
        uint64_t v20 = *(void **)(*(void *)a4 + 8LL);
        if (v20)
        {
          do
          {
            unint64_t v21 = v20;
            uint64_t v20 = (void *)*v20;
          }

          while (v20);
        }

        else
        {
          do
          {
            unint64_t v21 = (void *)v19[2];
            BOOL v18 = *v21 == (void)v19;
            BOOL v19 = v21;
          }

          while (!v18);
        }
      }

      *(void *)a4 = v21;
    }

    int v8 = *a2;
    uint64_t v9 = *a3;
    if (*a2 == *a3) {
      goto LABEL_38;
    }
  }

  __n128 v30 = *a6;
  if (v8 != v9)
  {
    do
    {
      sub_1355B8((uint64_t)&v30, v8 + 4);
      uint64_t v27 = (__CFString *)v8[1];
      if (v27)
      {
        do
        {
          unint64_t v28 = (CFStringRef *)v27;
          uint64_t v27 = (__CFString *)v27->isa;
        }

        while (v27);
      }

      else
      {
        do
        {
          unint64_t v28 = (CFStringRef *)v8[2];
          BOOL v18 = *v28 == (CFStringRef)v8;
          int v8 = v28;
        }

        while (!v18);
      }

      int v8 = v28;
    }

    while (v28 != v9);
    int v8 = v9;
  }

void sub_1352A4(uint64_t a1, void *a2, void *a3)
{
  if (*(void *)(a1 + 16))
  {
    unint64_t v6 = *(uint64_t **)a1;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)a1 = a1 + 8;
    *(void *)(v7 + 16) = 0LL;
    *(void *)(a1 + 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    if (v6[1]) {
      int v8 = (uint64_t *)v6[1];
    }
    else {
      int v8 = v6;
    }
    uint64_t v19 = a1;
    uint64_t v20 = v8;
    unint64_t v21 = v8;
    if (v8)
    {
      uint64_t v20 = sub_68080((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          sub_6A8C0((uint64_t)(v8 + 4), (uint64_t)(v9 + 4));
          uint64_t v10 = v21;
          unint64_t v11 = (uint64_t **)sub_135470(a1, &v18, (CFStringRef *)v21 + 4);
          sub_32C38((uint64_t **)a1, v18, v11, v10);
          int v8 = v20;
          unint64_t v21 = v20;
          if (v20) {
            uint64_t v20 = sub_68080((uint64_t)v20);
          }
          unint64_t v12 = (void *)v9[1];
          if (v12)
          {
            do
            {
              a2 = v12;
              unint64_t v12 = (void *)*v12;
            }

            while (v12);
          }

          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v13 = *a2 == (void)v9;
              uint64_t v9 = a2;
            }

            while (!v13);
          }

          if (!v8) {
            break;
          }
          uint64_t v9 = a2;
        }

        while (a2 != a3);
      }
    }

    sub_1354EC((uint64_t)&v19);
  }

  if (a2 != a3)
  {
    do
    {
      sub_135538((uint64_t)&v19, a1, (const void *)a2[4], *((_BYTE *)a2 + 40));
      unint64_t v14 = (uint64_t *)v19;
      uint64_t v15 = (uint64_t **)sub_135470(a1, &v18, (CFStringRef *)(v19 + 32));
      sub_32C38((uint64_t **)a1, v18, v15, v14);
      uint64_t v19 = 0LL;
      sub_1184AC((uint64_t)&v19);
      uint64_t v16 = (void *)a2[1];
      if (v16)
      {
        do
        {
          unint64_t v17 = v16;
          uint64_t v16 = (void *)*v16;
        }

        while (v16);
      }

      else
      {
        do
        {
          unint64_t v17 = (void *)a2[2];
          BOOL v13 = *v17 == (void)a2;
          a2 = v17;
        }

        while (!v13);
      }

      a2 = v17;
    }

    while (v17 != a3);
  }

void sub_13544C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_135470(uint64_t a1, void *a2, CFStringRef *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = (void *)v4;
        if (CFStringCompare(*a3, *(CFStringRef *)(v4 + 32), 0LL) != kCFCompareLessThan) {
          break;
        }
        uint64_t v4 = *v5;
        __n128 result = v5;
        if (!*v5) {
          goto LABEL_8;
        }
      }

      uint64_t v4 = v5[1];
    }

    while (v4);
    __n128 result = v5 + 1;
  }

  else
  {
    __n128 result = (void *)(a1 + 8);
  }

uint64_t sub_1354EC(uint64_t a1)
{
  int v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        int v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }

      while (v3);
      *(void *)(a1 + 8) = v2;
    }

    sub_1112B0(v2);
  }

  return a1;
}

void *sub_135538(uint64_t a1, uint64_t a2, const void *a3, unsigned __int8 a4)
{
  int v7 = a4;
  uint64_t v8 = a2 + 8;
  __n128 result = operator new(0x30uLL);
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v8;
  *(_BYTE *)(a1 + 16) = 0;
  result[4] = a3;
  *((_BYTE *)result + 40) = a4;
  if (v7 && a3) {
    __n128 result = CFRetain(a3);
  }
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_1355A4(_Unwind_Exception *a1)
{
}

uint64_t sub_1355B8(uint64_t a1, CFStringRef *a2)
{
  uint64_t v3 = sub_135620(*(uint64_t ***)a1, *(void *)(a1 + 8), a2, (uint64_t)a2);
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      uint64_t v5 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }

    while (v4);
  }

  else
  {
    do
    {
      uint64_t v5 = (uint64_t *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      uint64_t v3 = v5;
    }

    while (!v6);
  }

  *(void *)(a1 + 8) = v5;
  return a1;
}

uint64_t *sub_135620(uint64_t **a1, uint64_t a2, CFStringRef *a3, uint64_t a4)
{
  BOOL v6 = (uint64_t *)a2;
  uint64_t v8 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2 || CFStringCompare(*a3, *(CFStringRef *)(a2 + 32), 0LL) == kCFCompareLessThan)
  {
    if (*a1 == v6)
    {
      unint64_t v14 = v6;
    }

    else
    {
      uint64_t v13 = *v6;
      if (*v6)
      {
        do
        {
          unint64_t v14 = (uint64_t *)v13;
          uint64_t v13 = *(void *)(v13 + 8);
        }

        while (v13);
      }

      else
      {
        uint64_t v15 = v6;
        do
        {
          unint64_t v14 = (uint64_t *)v15[2];
          BOOL v16 = *v14 == (void)v15;
          uint64_t v15 = v14;
        }

        while (v16);
      }

      if (CFStringCompare((CFStringRef)v14[4], *a3, 0LL) != kCFCompareLessThan) {
        goto LABEL_16;
      }
    }

    if (!*v6)
    {
      uint64_t v17 = (uint64_t)v6;
      uint64_t v10 = (uint64_t **)v6;
      goto LABEL_22;
    }

    unint64_t v21 = v14;
    uint64_t v10 = (uint64_t **)(v14 + 1);
    goto LABEL_19;
  }

  if (CFStringCompare((CFStringRef)v6[4], *a3, 0LL) != kCFCompareLessThan) {
    return v6;
  }
  uint64_t v10 = (uint64_t **)(v6 + 1);
  uint64_t v9 = (uint64_t *)v6[1];
  if (v9)
  {
    unint64_t v11 = (uint64_t *)v6[1];
    do
    {
      unint64_t v12 = v11;
      unint64_t v11 = (uint64_t *)*v11;
    }

    while (v11);
  }

  else
  {
    uint64_t v19 = v6;
    do
    {
      unint64_t v12 = (uint64_t *)v19[2];
      BOOL v16 = *v12 == (void)v19;
      uint64_t v19 = v12;
    }

    while (!v16);
  }

  if (CFStringCompare(*a3, (CFStringRef)v12[4], 0LL) != kCFCompareLessThan)
  {
LABEL_16:
    uint64_t v10 = (uint64_t **)sub_118418((uint64_t)a1, &v21, a3);
    goto LABEL_19;
  }

  uint64_t v9 = *v10;
LABEL_30:
  if (v9)
  {
    unint64_t v21 = v12;
    uint64_t v10 = (uint64_t **)v12;
  }

  else
  {
    unint64_t v21 = v6;
  }

void *sub_1357F0(void *result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    int v7 = result;
    uint64_t v8 = (uint64_t *)(a3 + 16);
    uint64_t v9 = operator new(0x20uLL);
    *uint64_t v9 = 0LL;
    v9[1] = 0LL;
    __n128 result = sub_FA4C0(v9 + 2, v8);
    uint64_t v10 = *(void *)(a3 + 8);
    uint64_t v11 = 1LL;
    if (v10 == a4)
    {
      uint64_t v13 = v9;
    }

    else
    {
      unint64_t v12 = v9;
      do
      {
        uint64_t v13 = operator new(0x20uLL);
        *uint64_t v13 = v12;
        v13[1] = 0LL;
        __n128 result = sub_FA4C0(v13 + 2, (uint64_t *)(v10 + 16));
        v12[1] = v13;
        ++v11;
        uint64_t v10 = *(void *)(v10 + 8);
        unint64_t v12 = v13;
      }

      while (v10 != a4);
    }

    uint64_t v14 = *a2;
    *(void *)(v14 + 8) = v9;
    *uint64_t v9 = v14;
    *a2 = (uint64_t)v13;
    v13[1] = a2;
    v7[2] += v11;
  }

  return result;
}

void sub_1358C4(void *a1)
{
  while (1)
  {
    int v2 = (void *)*v1;
    uint64_t v3 = (std::__shared_weak_count *)v1[3];
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    operator delete(v1);
    uint64_t v1 = v2;
    if (!v2) {
      __cxa_rethrow();
    }
  }

void sub_1358F0(_Unwind_Exception *a1)
{
}

std::string *sub_135904(std::string *a1, unsigned int *a2, unsigned int *a3)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      sub_E2164(&__p, a2 + 8);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type size = __p.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(a1, (const std::string::value_type *)p_p, size);
      uint64_t v8 = (unsigned int *)*((void *)a2 + 1);
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = *(unsigned int **)v8;
        }

        while (v8);
      }

      else
      {
        do
        {
          uint64_t v9 = (unsigned int *)*((void *)a2 + 2);
          BOOL v10 = *(void *)v9 == (void)a2;
          a2 = v9;
        }

        while (!v10);
      }

      if (v9 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
      a2 = v9;
    }
  }

  return std::string::append(a1, " }", 2uLL);
}

void sub_135A08( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t sub_135A44(void *a1, unsigned int a2, uint64_t *a3)
{
  int v6 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  sub_6DD4();
  if (((*(uint64_t (**)(uint64_t *))(qword_48F828 + 48))(&qword_48F828) & 1) == 0)
  {
    uint64_t v15 = (os_log_t *)sub_138E8(13);
    BOOL v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      int v22 = 136315394;
      unint64_t v23 = "RoutingManager.cpp";
      __int16 v24 = 1024;
      int v25 = 2042;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to acquire routing mutex.",  (uint8_t *)&v22,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to acquire routing mutex.");
    uint64_t v18 = (void (*)(void *))&std::runtime_error::~runtime_error;
LABEL_27:
    __cxa_throw(exception, v19, v18);
  }

  if (a3[2])
  {
    uint64_t v20 = (os_log_t *)sub_138E8(13);
    unint64_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      int v22 = 136315394;
      unint64_t v23 = "RoutingManager.cpp";
      __int16 v24 = 1024;
      int v25 = 2044;
      _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v22,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error((std::logic_error *)exception, "Precondition failure.");
    uint64_t v18 = (void (*)(void *))&std::logic_error::~logic_error;
    goto LABEL_27;
  }

  int v7 = (uint64_t *)(*a1 + 8LL);
  uint64_t v8 = *v7;
  if (*v7)
  {
    uint64_t v9 = *a1 + 8LL;
    do
    {
      unsigned int v10 = *(_DWORD *)(v8 + 32);
      BOOL v11 = v10 >= a2;
      if (v10 >= a2) {
        unint64_t v12 = (uint64_t *)v8;
      }
      else {
        unint64_t v12 = (uint64_t *)(v8 + 8);
      }
      if (v11) {
        uint64_t v9 = v8;
      }
      uint64_t v8 = *v12;
    }

    while (*v12);
    if ((uint64_t *)v9 != v7 && *(_DWORD *)(v9 + 32) <= a2)
    {
      sub_135D30(a3, 1667850851, 1667850851, *(_DWORD *)(v9 + 72) == 1667396196);
      sub_135D30(a3, 1667854445, 1667854445, *(_BYTE *)(v9 + 77));
      uint64_t v13 = 0LL;
      if (!v6) {
        return v13;
      }
      goto LABEL_15;
    }
  }

  uint64_t v13 = 2LL;
  if (v6) {
LABEL_15:
  }
    (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  return v13;
}

void sub_135CD4(_Unwind_Exception *exception_object)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_135D30(uint64_t *result, int a2, int a3, char a4)
{
  int v6 = result;
  uint64_t v8 = (uint64_t **)(result + 1);
  uint64_t v7 = result[1];
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (void *)v7;
        int v10 = *(_DWORD *)(v7 + 28);
        if (v10 <= a2) {
          break;
        }
        uint64_t v7 = *v9;
        uint64_t v8 = (uint64_t **)v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }

      if (v10 >= a2) {
        break;
      }
      uint64_t v7 = v9[1];
      if (!v7)
      {
        uint64_t v8 = (uint64_t **)(v9 + 1);
        goto LABEL_9;
      }
    }
  }

  else
  {
    uint64_t v9 = result + 1;
LABEL_9:
    BOOL v11 = operator new(0x28uLL);
    v11[7] = a3;
    *((_BYTE *)v11 + sub_7A768(v9 - 32) = a4;
    *(void *)BOOL v11 = 0LL;
    *((void *)v11 + 1) = 0LL;
    *((void *)v11 + 2) = v9;
    unsigned int *v8 = (uint64_t *)v11;
    uint64_t v12 = *(void *)*v6;
    if (v12)
    {
      uint64_t *v6 = v12;
      uint64_t v13 = *v8;
    }

    else
    {
      uint64_t v13 = (uint64_t *)v11;
    }

    __n128 result = sub_7A420((uint64_t *)v6[1], v13);
    ++v6[2];
  }

  return result;
}

void sub_135DF4(void **a1, uint64_t *a2)
{
  uint64_t v5 = (uint64_t *)a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    uint64_t *v5 = *a2;
    v5[1] = (uint64_t)(v5 + 1);
    v5[2] = (uint64_t)(v5 + 1);
    v5[3] = 0LL;
    sub_CCA0C((uint64_t)(v5 + 1), v5 + 1, a2 + 1);
    int v6 = v5 + 4;
    goto LABEL_17;
  }

  uint64_t v7 = ((char *)v5 - (_BYTE *)*a1) >> 5;
  uint64_t v8 = v4 - (void)*a1;
  uint64_t v9 = v8 >> 4;
  else {
    unint64_t v10 = v9;
  }
  if (v10 >> 59) {
    sub_7A8C4();
  }
  BOOL v11 = (char *)operator new(32 * v10);
  uint64_t v12 = (uint64_t *)&v11[32 * v7];
  *uint64_t v12 = *a2;
  uint64_t v13 = &v11[32 * v10];
  *(int64x2_t *)(v12 + 1) = vdupq_n_s64((unint64_t)(v12 + 1));
  v12[3] = 0LL;
  sub_CCA0C((uint64_t)(v12 + 1), v12 + 1, a2 + 1);
  int v6 = v12 + 4;
  uint64_t v15 = (char *)*a1;
  uint64_t v14 = (char *)a1[1];
  if (v14 == *a1)
  {
    *a1 = v12;
    a1[1] = v6;
    a1[2] = v13;
    if (!v14) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }

  uint64_t v16 = 0LL;
  do
  {
    uint64_t v17 = &v12[v16];
    uint64_t v18 = (uint64_t)&v12[v16 - 3];
    *(v17 - 4) = *(void *)&v14[v16 * 8 - 32];
    *(v17 - 3) = v18;
    *(v17 - 2) = v18;
    *(v17 - 1) = 0LL;
    sub_CCA0C(v18, &v12[v16 - 3], &v14[v16 * 8 - 24]);
    v16 -= 4LL;
  }

  while (&v14[v16 * 8] != v15);
  uint64_t v14 = (char *)*a1;
  uint64_t v19 = (uint64_t *)a1[1];
  *a1 = &v12[v16];
  a1[1] = v6;
  a1[2] = v13;
  if (v19 != (uint64_t *)v14)
  {
    do
    {
      uint64_t v20 = v19 - 4;
      sub_85B80(v19 - 3);
      uint64_t v19 = v20;
    }

    while (v20 != (uint64_t *)v14);
  }

  if (v14) {
LABEL_16:
  }
    operator delete(v14);
LABEL_17:
  a1[1] = v6;
}

void sub_135F74(void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (uint64_t *)**a1;
  if (v2)
  {
    unint64_t v4 = (uint64_t *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        int v6 = v4 - 4;
        sub_85B80(v4 - 3);
        unint64_t v4 = v6;
      }

      while (v6 != v2);
      uint64_t v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_135FE8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v137 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  sub_6DD4();
  if (((*(uint64_t (**)(uint64_t *))(qword_48F828 + 48))(&qword_48F828) & 1) == 0)
  {
    char v118 = (os_log_t *)sub_138E8(13);
    unint64_t v119 = *v118;
    if (*v118 && os_log_type_enabled(*v118, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CFStringRef v156 = 136315394;
      *(void *)&v156[4] = "RoutingManager.cpp";
      *(_WORD *)&v156[12] = 1024;
      *(_DWORD *)&v156[14] = 2137;
      _os_log_impl( &dword_0,  v119,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to acquire routing mutex.",  v156,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to acquire routing mutex.");
    uint64_t v121 = (void (*)(void *))&std::runtime_error::~runtime_error;
LABEL_289:
    __cxa_throw(exception, v122, v121);
  }

  if (*(void *)(a3 + 32))
  {
    int v123 = (os_log_t *)sub_138E8(13);
    uint64_t v124 = *v123;
    if (*v123 && os_log_type_enabled(*v123, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CFStringRef v156 = 136315394;
      *(void *)&v156[4] = "RoutingManager.cpp";
      *(_WORD *)&v156[12] = 1024;
      *(_DWORD *)&v156[14] = 2140;
      _os_log_impl(&dword_0, v124, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v156, 0x12u);
    }

    goto LABEL_288;
  }

  if (*(_DWORD *)(a3 + 152) != 1852796517)
  {
    uint64_t v125 = (os_log_t *)sub_138E8(13);
    unint64_t v126 = *v125;
    if (*v125 && os_log_type_enabled(*v125, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CFStringRef v156 = 136315394;
      *(void *)&v156[4] = "RoutingManager.cpp";
      *(_WORD *)&v156[12] = 1024;
      *(_DWORD *)&v156[14] = 2141;
      _os_log_impl(&dword_0, v126, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v156, 0x12u);
    }

    goto LABEL_288;
  }

  uint64_t v8 = *(unsigned __int8 *)(a3 + 183);
  if ((v8 & 0x80u) != 0LL) {
    uint64_t v8 = *(void *)(a3 + 168);
  }
  if (v8)
  {
    uint64_t v127 = (os_log_t *)sub_138E8(13);
    unint64_t v128 = *v127;
    if (*v127 && os_log_type_enabled(*v127, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CFStringRef v156 = 136315394;
      *(void *)&v156[4] = "RoutingManager.cpp";
      *(_WORD *)&v156[12] = 1024;
      *(_DWORD *)&v156[14] = 2142;
      _os_log_impl(&dword_0, v128, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v156, 0x12u);
    }

LABEL_198:
                                  if (v32) {
                                    unint64_t v33 = "not high quality";
                                  }
                                  else {
                                    unint64_t v33 = "high quality";
                                  }
                                  if (v32) {
                                    std::string::size_type v34 = 16LL;
                                  }
                                  else {
                                    std::string::size_type v34 = 12LL;
                                  }
                                  goto LABEL_204;
                                }

                                goto LABEL_189;
                              }

                              goto LABEL_180;
                            }

                            goto LABEL_171;
                          }

                          goto LABEL_162;
                        }

                        goto LABEL_153;
                      }

                      goto LABEL_144;
                    }

                    goto LABEL_135;
                  }

                  goto LABEL_126;
                }

                goto LABEL_117;
              }

              goto LABEL_108;
            }

            goto LABEL_99;
          }

          goto LABEL_85;
        }

        goto LABEL_71;
      }

      goto LABEL_57;
    }

    goto LABEL_43;
  }

  sub_8F640((std::string *)v149, *(unsigned int **)a4, v12);
  uint64_t v13 = std::string::insert((std::string *)v149, 0LL, "Port types: ", 0xCuLL);
  __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  int64_t cap = (void *)v13->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v14;
  v13->__r_.__value_.__l.__size_ = 0LL;
  v13->__r_.__value_.__l.__cap_ = 0LL;
  v13->__r_.__value_.__r.__words[0] = 0LL;
  if (SHIBYTE(cap) >= 0) {
    uint64_t v15 = __p;
  }
  else {
    uint64_t v15 = (void **)__p[0];
  }
  if (SHIBYTE(cap) >= 0) {
    std::string::size_type v16 = HIBYTE(cap);
  }
  else {
    std::string::size_type v16 = (std::string::size_type)__p[1];
  }
  std::string::append(&v146, (const std::string::value_type *)v15, v16);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  if ((v149[23] & 0x80000000) != 0) {
    operator delete(*(void **)v149);
  }
  if (*(_DWORD *)(a4 + 24) != 1986295651)
  {
    std::string::append(&v146, "; ", 2uLL);
    uint64_t v17 = *(unsigned int *)(a4 + 24);
LABEL_43:
    sub_2CA1C(&v148, v17);
    uint64_t v35 = std::string::insert(&v148, 0LL, "Allowed VAD type: ", 0x12uLL);
    __int128 v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    *(void *)&v149[16] = v35->__r_.__value_.__l.__cap_;
    *(_OWORD *)unint64_t v149 = v36;
    v35->__r_.__value_.__l.__size_ = 0LL;
    v35->__r_.__value_.__l.__cap_ = 0LL;
    v35->__r_.__value_.__r.__words[0] = 0LL;
    BOOL v37 = std::string::append((std::string *)v149, "; ", 2uLL);
    __int128 v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    int64_t cap = (void *)v37->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v38;
    v37->__r_.__value_.__l.__size_ = 0LL;
    v37->__r_.__value_.__l.__cap_ = 0LL;
    v37->__r_.__value_.__r.__words[0] = 0LL;
    if (SHIBYTE(cap) >= 0) {
      uint64_t v39 = __p;
    }
    else {
      uint64_t v39 = (void **)__p[0];
    }
    if (SHIBYTE(cap) >= 0) {
      std::string::size_type v40 = HIBYTE(cap);
    }
    else {
      std::string::size_type v40 = (std::string::size_type)__p[1];
    }
    std::string::append(&v146, (const std::string::value_type *)v39, v40);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    if ((v149[23] & 0x80000000) != 0) {
      operator delete(*(void **)v149);
    }
  }

  if (*(_BYTE *)(a4 + 32))
  {
    std::string::append(&v146, "; ", 2uLL);
LABEL_57:
    sub_2CA1C(&v148, *(unsigned int *)(a4 + 28));
    BOOL v41 = std::string::insert(&v148, 0LL, "Supported mode: ", 0x10uLL);
    __int128 v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    *(void *)&v149[16] = v41->__r_.__value_.__l.__cap_;
    *(_OWORD *)unint64_t v149 = v42;
    v41->__r_.__value_.__l.__size_ = 0LL;
    v41->__r_.__value_.__l.__cap_ = 0LL;
    v41->__r_.__value_.__r.__words[0] = 0LL;
    int v43 = std::string::append((std::string *)v149, "; ", 2uLL);
    __int128 v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    int64_t cap = (void *)v43->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v44;
    v43->__r_.__value_.__l.__size_ = 0LL;
    v43->__r_.__value_.__l.__cap_ = 0LL;
    v43->__r_.__value_.__r.__words[0] = 0LL;
    if (SHIBYTE(cap) >= 0) {
      unint64_t v45 = __p;
    }
    else {
      unint64_t v45 = (void **)__p[0];
    }
    if (SHIBYTE(cap) >= 0) {
      std::string::size_type v46 = HIBYTE(cap);
    }
    else {
      std::string::size_type v46 = (std::string::size_type)__p[1];
    }
    std::string::append(&v146, (const std::string::value_type *)v45, v46);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    if ((v149[23] & 0x80000000) != 0) {
      operator delete(*(void **)v149);
    }
  }

  if (!*(void *)(a4 + 64)) {
    goto LABEL_83;
  }
  std::string::append(&v146, "; ", 2uLL);
LABEL_71:
  sub_24A9B8(&v148, a4 + 40);
  uint64_t v47 = std::string::insert(&v148, 0LL, "Connection Type Inclusion: ", 0x1BuLL);
  __int128 v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
  *(void *)&v149[16] = v47->__r_.__value_.__l.__cap_;
  *(_OWORD *)unint64_t v149 = v48;
  v47->__r_.__value_.__l.__size_ = 0LL;
  v47->__r_.__value_.__l.__cap_ = 0LL;
  v47->__r_.__value_.__r.__words[0] = 0LL;
  BOOL v49 = std::string::append((std::string *)v149, "; ", 2uLL);
  __int128 v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  int64_t cap = (void *)v49->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v50;
  v49->__r_.__value_.__l.__size_ = 0LL;
  v49->__r_.__value_.__l.__cap_ = 0LL;
  v49->__r_.__value_.__r.__words[0] = 0LL;
  if (SHIBYTE(cap) >= 0) {
    unint64_t v51 = __p;
  }
  else {
    unint64_t v51 = (void **)__p[0];
  }
  if (SHIBYTE(cap) >= 0) {
    std::string::size_type v52 = HIBYTE(cap);
  }
  else {
    std::string::size_type v52 = (std::string::size_type)__p[1];
  }
  std::string::append(&v146, (const std::string::value_type *)v51, v52);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  if ((v149[23] & 0x80000000) != 0) {
    operator delete(*(void **)v149);
  }
LABEL_83:
  if (*(void *)(a4 + 80))
  {
    std::string::append(&v146, "; ", 2uLL);
    uint64_t v18 = *(const __CFString **)(a4 + 80);
LABEL_85:
    sub_48E98(&v148, v18);
    unint64_t v53 = std::string::insert(&v148, 0LL, "UID: ", 5uLL);
    __int128 v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    *(void *)&v149[16] = v53->__r_.__value_.__l.__cap_;
    *(_OWORD *)unint64_t v149 = v54;
    v53->__r_.__value_.__l.__size_ = 0LL;
    v53->__r_.__value_.__l.__cap_ = 0LL;
    v53->__r_.__value_.__r.__words[0] = 0LL;
    unint64_t v55 = std::string::append((std::string *)v149, "; ", 2uLL);
    __int128 v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    int64_t cap = (void *)v55->__r_.__value_.__l.__cap_;
    *(_OWORD *)std::string __p = v56;
    v55->__r_.__value_.__l.__size_ = 0LL;
    v55->__r_.__value_.__l.__cap_ = 0LL;
    v55->__r_.__value_.__r.__words[0] = 0LL;
    if (SHIBYTE(cap) >= 0) {
      BOOL v57 = __p;
    }
    else {
      BOOL v57 = (void **)__p[0];
    }
    if (SHIBYTE(cap) >= 0) {
      std::string::size_type v58 = HIBYTE(cap);
    }
    else {
      std::string::size_type v58 = (std::string::size_type)__p[1];
    }
    std::string::append(&v146, (const std::string::value_type *)v57, v58);
    if (SHIBYTE(cap) < 0) {
      operator delete(__p[0]);
    }
    if ((v149[23] & 0x80000000) != 0) {
      operator delete(*(void **)v149);
    }
  }

  uint64_t v20 = (int *)(a4 + 72);
  int v59 = *(_DWORD *)(a4 + 72);
  if ((v59 & 3) == 2) {
    goto LABEL_106;
  }
  std::string::append(&v146, "; ", 2uLL);
  int v21 = *v20 & 3;
LABEL_99:
  if (v21) {
    uint64_t v60 = "not connected";
  }
  else {
    uint64_t v60 = "connected";
  }
  if (v21) {
    std::string::size_type v61 = 13LL;
  }
  else {
    std::string::size_type v61 = 9LL;
  }
  std::string::append(&v146, v60, v61);
  int v59 = *v20;
LABEL_106:
  if ((v59 & 0xC) != 8)
  {
    std::string::append(&v146, "; ", 2uLL);
    int v22 = *v20 & 0xC;
LABEL_108:
    if (v22) {
      uint64_t v62 = "not routable";
    }
    else {
      uint64_t v62 = "routable";
    }
    if (v22) {
      std::string::size_type v63 = 12LL;
    }
    else {
      std::string::size_type v63 = 8LL;
    }
    std::string::append(&v146, v62, v63);
    int v59 = *v20;
  }

  if ((v59 & 0x30) == 0x20) {
    goto LABEL_124;
  }
  std::string::append(&v146, "; ", 2uLL);
  int v23 = *v20 & 0x30;
LABEL_117:
  if (v23) {
    uint64_t v64 = "output";
  }
  else {
    uint64_t v64 = "input";
  }
  if (v23) {
    std::string::size_type v65 = 6LL;
  }
  else {
    std::string::size_type v65 = 5LL;
  }
  std::string::append(&v146, v64, v65);
  int v59 = *v20;
LABEL_124:
  if ((v59 & 0xC0) != 0x80)
  {
    std::string::append(&v146, "; ", 2uLL);
    int v24 = *v20 & 0xC0;
LABEL_126:
    if (v24) {
      uint64_t v66 = "not last-in cachable";
    }
    else {
      uint64_t v66 = "last-in cachable";
    }
    if (v24) {
      std::string::size_type v67 = 20LL;
    }
    else {
      std::string::size_type v67 = 16LL;
    }
    std::string::append(&v146, v66, v67);
    int v59 = *v20;
  }

  if ((v59 & 0x300) == 0x200) {
    goto LABEL_142;
  }
  std::string::append(&v146, "; ", 2uLL);
  int v25 = *v20 & 0x300;
LABEL_135:
  if (v25) {
    char v68 = "not overridable";
  }
  else {
    char v68 = "overridable";
  }
  if (v25) {
    std::string::size_type v69 = 15LL;
  }
  else {
    std::string::size_type v69 = 11LL;
  }
  std::string::append(&v146, v68, v69);
  int v59 = *v20;
LABEL_142:
  if ((v59 & 0xC00) != 0x800)
  {
    std::string::append(&v146, "; ", 2uLL);
    int v26 = *v20 & 0xC00;
LABEL_144:
    if (v26) {
      uint64_t v70 = "ignores silent mode";
    }
    else {
      uint64_t v70 = "obeys silent mode";
    }
    if (v26) {
      std::string::size_type v71 = 19LL;
    }
    else {
      std::string::size_type v71 = 17LL;
    }
    std::string::append(&v146, v70, v71);
    int v59 = *v20;
  }

  if ((v59 & 0x3000) == 0x2000) {
    goto LABEL_160;
  }
  std::string::append(&v146, "; ", 2uLL);
  int v27 = *v20 & 0x3000;
LABEL_153:
  if (v27) {
    char v72 = "not client visible";
  }
  else {
    char v72 = "client visible";
  }
  if (v27) {
    std::string::size_type v73 = 18LL;
  }
  else {
    std::string::size_type v73 = 14LL;
  }
  std::string::append(&v146, v72, v73);
  int v59 = *v20;
LABEL_160:
  if ((v59 & 0xC000) != 0x8000)
  {
    std::string::append(&v146, "; ", 2uLL);
    int v28 = *v20 & 0xC000;
LABEL_162:
    if (v28) {
      uint64_t v74 = "not built-in";
    }
    else {
      uint64_t v74 = "built-in";
    }
    if (v28) {
      std::string::size_type v75 = 12LL;
    }
    else {
      std::string::size_type v75 = 8LL;
    }
    std::string::append(&v146, v74, v75);
    int v59 = *v20;
  }

  if ((v59 & 0x30000) == 0x20000) {
    goto LABEL_178;
  }
  std::string::append(&v146, "; ", 2uLL);
  int v29 = *v20 & 0x30000;
LABEL_171:
  if (v29) {
    uint64_t v76 = "cannot set routable";
  }
  else {
    uint64_t v76 = "can set routable";
  }
  if (v29) {
    std::string::size_type v77 = 19LL;
  }
  else {
    std::string::size_type v77 = 16LL;
  }
  std::string::append(&v146, v76, v77);
  int v59 = *v20;
LABEL_178:
  if ((v59 & 0xC0000) != 0x80000)
  {
    std::string::append(&v146, "; ", 2uLL);
    int v30 = *v20 & 0xC0000;
LABEL_180:
    if (v30) {
      unint64_t v78 = "not auto";
    }
    else {
      unint64_t v78 = "auto";
    }
    if (v30) {
      std::string::size_type v79 = 8LL;
    }
    else {
      std::string::size_type v79 = 4LL;
    }
    std::string::append(&v146, v78, v79);
    std::string::append(&v146, " set sibling routability", 0x18uLL);
    int v59 = *v20;
  }

  if ((v59 & 0x300000) == 0x200000) {
    goto LABEL_196;
  }
  std::string::append(&v146, "; ", 2uLL);
  int v31 = *v20 & 0x300000;
LABEL_189:
  if (v31) {
    uint64_t v80 = "not auto";
  }
  else {
    uint64_t v80 = "auto";
  }
  if (v31) {
    std::string::size_type v81 = 8LL;
  }
  else {
    std::string::size_type v81 = 4LL;
  }
  std::string::append(&v146, v80, v81);
  std::string::append(&v146, " set partner routability", 0x18uLL);
  int v59 = *v20;
LABEL_196:
  if ((v59 & 0xC00000) != 0x800000)
  {
    std::string::append(&v146, "; ", 2uLL);
    int v32 = *v20 & 0xC00000;
    goto LABEL_198;
  }

LABEL_205:
  std::string::append(&v146, " ]", 2uLL);
  uint64_t v82 = &v147;
  if (size < 0) {
    uint64_t v82 = (std::string *)v11;
  }
  if ((v146.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    char v83 = &v146;
  }
  else {
    char v83 = (std::string *)v146.__r_.__value_.__r.__words[0];
  }
  *(_DWORD *)buf = 136315906;
  *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
  *(_WORD *)&_BYTE buf[12] = 1024;
  *(_DWORD *)&buf[14] = 4560;
  *(_WORD *)&_BYTE buf[18] = 2080;
  *(void *)&buf[20] = v82;
  *(_WORD *)&buf[28] = 2080;
  *(void *)&buf[30] = v83;
  _os_log_impl(&dword_0, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d For %s and filter %s", buf, 0x26u);
LABEL_214:
  uint64_t v84 = sub_546E0();
  *(void *)buf = &off_470B88;
  *(void *)&buf[24] = buf;
  sub_FF3FC((uint64_t *)&v148, v84, (unsigned int **)a4, (uint64_t)buf);
  int v85 = *(uint8_t **)&buf[24];
  if (*(uint8_t **)&buf[24] == buf)
  {
    uint64_t v86 = 4LL;
    int v85 = buf;
  }

  else
  {
    if (!*(void *)&buf[24]) {
      goto LABEL_219;
    }
    uint64_t v86 = 5LL;
  }

  (*(void (**)(void))(*(void *)v85 + 8 * v86))();
LABEL_219:
  uint64_t v87 = *(void *)v156;
  uint64_t v88 = *(void *)&v156[8];
  sub_EE1E8((uint64_t *)&v147, &v148);
  char v89 = *(_BYTE *)(a3 + 370);
  memset(buf, 0, 24);
  strcpy((char *)&buf[24], "cwdv");
  _BYTE buf[32] = 0;
  int v151 = 3;
  v153[0] = 0LL;
  v153[1] = 0LL;
  int v152 = v153;
  int v154 = 44739242;
  CFTypeRef cf = 0LL;
  sub_1379FC( (uint64_t)__p,  (uint64_t)a2,  v87,  v88,  (uint64_t)&v147,  (uint64_t)&v157,  &v158,  (uint64_t)&v159,  v89,  1,  (uint64_t)buf,  a3 + 192);
  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C(v153[0]);
  if (*(void *)buf)
  {
    *(void *)&buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }

  sub_85B80((uint64_t *)&v147);
  int v90 = (int)__p[0];
  sub_121604((uint64_t *)&v146, (uint64_t)&__p[1]);
  int v141 = &v141;
  int v142 = (uint64_t *)&v141;
  uint64_t v143 = 0LL;
  if (!v90)
  {
    int v98 = (std::string *)v148.__r_.__value_.__l.__size_;
    if ((std::string *)v148.__r_.__value_.__l.__size_ != &v148)
    {
      do
      {
        if (&v146.__r_.__value_.__r.__words[1] != sub_134EC0( v146.__r_.__value_.__l.__data_,  &v146.__r_.__value_.__l.__size_,  (uint64_t *)&v98->__r_.__value_.__l.__cap_))
        {
          data = (std::__shared_weak_count *)v98[1].__r_.__value_.__l.__data_;
          if (data)
          {
            int v100 = std::__shared_weak_count::lock(data);
            CFTypeRef v101 = v100;
            if (v100)
            {
              std::string::size_type v102 = v98->__r_.__value_.__l.__cap_;
              p_shared_weak_owners = (unint64_t *)&v100->__shared_weak_owners_;
              do
                unint64_t v104 = __ldxr(p_shared_weak_owners);
              while (__stxr(v104 + 1, p_shared_weak_owners));
              p_shared_owners = (unint64_t *)&v100->__shared_owners_;
              do
                unint64_t v106 = __ldaxr(p_shared_owners);
              while (__stlxr(v106 - 1, p_shared_owners));
              if (!v106)
              {
                ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                std::__shared_weak_count::__release_weak(v101);
              }
            }

            else
            {
              std::string::size_type v102 = 0LL;
            }
          }

          else
          {
            std::string::size_type v102 = 0LL;
            CFTypeRef v101 = 0LL;
          }

          uint64_t v107 = operator new(0x20uLL);
          v107[2] = v102;
          v107[3] = v101;
          uint64_t v108 = (uint64_t)v141;
          *uint64_t v107 = v141;
          v107[1] = &v141;
          *(void *)(v108 + 8) = v107;
          int v141 = v107;
          ++v143;
        }

        int v98 = (std::string *)v98->__r_.__value_.__l.__size_;
      }

      while (v98 != &v148);
      unint64_t v109 = v142;
      if (v142 != (uint64_t *)&v141)
      {
        while (1)
        {
          sub_B8F68((uint64_t *)v149, v109 + 2, "", 4588);
          int v110 = *(std::__shared_weak_count **)&v149[8];
          int v111 = *(_DWORD *)(*(void *)v149 + 144LL);
          if (*(void *)&v149[8])
          {
            uint64_t v112 = (unint64_t *)(*(void *)&v149[8] + 8LL);
            do
              unint64_t v113 = __ldaxr(v112);
            while (__stlxr(v113 - 1, v112));
            if (!v113)
            {
              ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
              std::__shared_weak_count::__release_weak(v110);
            }
          }

          if (v111 == 1886545251) {
            break;
          }
          unint64_t v109 = (uint64_t *)v109[1];
        }

        if (v109 != (uint64_t *)&v141)
        {
          char v114 = v142;
          if (v142 != v109)
          {
            uint64_t v115 = (uint64_t *)v109[1];
            if (v115 != v142)
            {
              uint64_t v116 = *v109;
              *(void *)(v116 + 8) = v115;
              *(void *)v109[1] = v116;
              uint64_t v117 = *v114;
              *(void *)(v117 + 8) = v109;
              *unint64_t v109 = v117;
              uint64_t *v114 = (uint64_t)v109;
              v109[1] = (uint64_t)v114;
            }
          }
        }
      }
    }
  }

                                  uint64_t v107 = 1000 * v106.__d_.__rep_;
LABEL_206:
                                  if (v107 > (v105.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
                                  {
                                    v108.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
                                    goto LABEL_209;
                                  }
                                }

                                v108.__d_.__rep_ = v107 + v105.__d_.__rep_;
LABEL_209:
                                std::condition_variable::__do_timed_wait(&v217, &__lk, v108);
                                std::chrono::steady_clock::now();
                              }

                              if (std::chrono::steady_clock::now().__d_.__rep_ >= v104 || v187) {
                                goto LABEL_184;
                              }
                              continue;
                            }
                          }

                          int v98 = (os_log_t *)sub_138E8(13);
                          uint64_t v99 = *v98;
                          if (*v98 && os_log_type_enabled(*v98, OS_LOG_TYPE_ERROR))
                          {
                            unint64_t v172 = inAddress;
                            sub_613AC((uint64_t)&__lk, &v172.mSelector);
                            if (v174 >= 0) {
                              p_luint64_t k = &__lk;
                            }
                            else {
                              p_luint64_t k = __lk.__m_;
                            }
                            unint64_t v170 = 0LL;
                            unint64_t v171 = 0LL;
                            char v169 = 0LL;
                            sub_7A5B8(&v169, v87, v89, v90);
                            int v166 = 0LL;
                            unint64_t v167 = 0LL;
                            unint64_t v168 = 0LL;
                            sub_7A5B8(&v166, v163, (uint64_t)v164, ((char *)v164 - (_BYTE *)v163) >> 2);
                            CFTypeRef v101 = v169;
                            std::string::size_type v102 = v166;
                            uint64_t v103 = v170 - v169 == v167 - v166 && memcmp(v169, v166, v170 - v169) == 0;
                            buf.mSelector = 136316930;
                            *(void *)&buf.mScope = "HALPropertySynchronizer.h";
                            unint64_t v208 = 1024;
                            uint64_t v209 = 248;
                            int v210 = 2080;
                            *(void *)unint64_t v211 = "set";
                            *(_WORD *)&v211[8] = 2080;
                            *(void *)&v211[10] = p_lk;
                            *(_WORD *)&v211[18] = 2080;
                            *(void *)&v211[20] = "set";
                            *(_WORD *)&v211[28] = 1024;
                            uint64_t v212 = v103;
                            uint64_t v213 = 1024;
                            unint64_t v214 = 0;
                            BOOL v215 = 1024;
                            BOOL v216 = v63;
                            _os_log_impl( &dword_0,  v99,  OS_LOG_TYPE_ERROR,  "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.",  (uint8_t *)&buf,  0x42u);
                            if (v102)
                            {
                              unint64_t v167 = v102;
                              operator delete(v102);
                            }

                            if (v101)
                            {
                              unint64_t v170 = v101;
                              operator delete(v101);
                            }

                            if (v174 < 0) {
                              operator delete(__lk.__m_);
                            }
                          }

LABEL_224:
  uint64_t v91 = sub_138E8(8);
  if ((*(_BYTE *)(v91 + 8) & 1) != 0)
  {
    unint64_t v92 = *(os_log_s **)v91;
    if (*(void *)v91)
    {
      if (os_log_type_enabled(*(os_log_t *)v91, OS_LOG_TYPE_DEBUG))
      {
        sub_2D9BB0(&v140, (uint64_t)&v141, 1);
        BOOL v93 = (v140.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v140 : (std::string *)v140.__r_.__value_.__r.__words[0];
        *(_DWORD *)unint64_t v149 = 136315650;
        *(void *)&v149[4] = "RoutingManager.cpp";
        *(_WORD *)&v149[12] = 1024;
        *(_DWORD *)&v149[14] = 4598;
        *(_WORD *)&v149[18] = 2080;
        *(void *)&v149[20] = v93;
        _os_log_impl( &dword_0,  v92,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Ordered ports based off connected port list: %s",  v149,  0x1Cu);
      }
    }
  }

  sub_85A90(&v138, &v141);
  sub_85B80((uint64_t *)&v141);
  sub_FF3B8((void *)v146.__r_.__value_.__l.__size_);
  sub_FF3B8(cap);
  sub_85B80((uint64_t *)&v148);
  sub_53068((uint64_t)v156);
  int v94 = v90;
  if (!v90)
  {
    *(void *)CFStringRef v156 = v156;
    *(void *)&v156[8] = v156;
    *(void *)&v156[16] = 0LL;
    unint64_t v95 = v139;
    if (v139 != &v138)
    {
      while (1)
      {
        int v96 = sub_137634(*(_BYTE *)(a3 + 370), (uint64_t)&v138, v95 + 2);
        int v97 = (uint64_t *)v95[1];
        if (v96) {
          break;
        }
LABEL_239:
        unint64_t v95 = v97;
        if (v97 == &v138) {
          goto LABEL_265;
        }
      }

      while (v97 != &v138)
      {
        if (!sub_137634(*(_BYTE *)(a3 + 370), (uint64_t)&v138, v97 + 2))
        {
          sub_1176BC((uint64_t)v156, (uint64_t *)v156, (uint64_t)&v138, v95, v97);
          int v97 = (uint64_t *)v97[1];
          goto LABEL_239;
        }

        int v97 = (uint64_t *)v97[1];
      }

      sub_1176BC((uint64_t)v156, (uint64_t *)v156, (uint64_t)&v138, v95, &v138);
    }

void sub_1373FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *__p, uint64_t a25, int a26, __int16 a27, char a28, char a29, uint64_t a30, uint64_t a31, void *a32, uint64_t a33, int a34, __int16 a35, char a36, char a37, void *a38, uint64_t a39, int a40, __int16 a41, char a42, char a43, void *a44, uint64_t a45, int a46, __int16 a47, char a48, char a49, void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a55 < 0) {
    operator delete(a50);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  sub_53068((uint64_t)&a69);
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)v69 + 24LL))(v69);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_137634(char a1, uint64_t a2, uint64_t *a3)
{
  if (a1)
  {
    v20[0] = &off_470BD0;
    v20[1] = a2;
    int v21 = v20;
    int v5 = sub_1334F4(a3, (uint64_t)v20) ^ 1;
    int v6 = v21;
    if (v21 == v20)
    {
      uint64_t v7 = 4LL;
      int v6 = v20;
    }

    else
    {
      if (!v21) {
        goto LABEL_8;
      }
      uint64_t v7 = 5LL;
    }

    (*(void (**)(void))(*v6 + 8 * v7))();
  }

  else
  {
    int v5 = 0;
  }

void sub_1377F0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  unint64_t v17 = a15;
  if (a15 == v15)
  {
    uint64_t v18 = 4LL;
    unint64_t v17 = &a12;
  }

  else
  {
    if (!a15) {
      goto LABEL_6;
    }
    uint64_t v18 = 5LL;
  }

  (*(void (**)(void))(*(void *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void *sub_137838(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_470BD0;
  result[1] = v3;
  return result;
}

uint64_t sub_13786C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_470BD0;
  a2[1] = v2;
  return result;
}

uint64_t sub_137888(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  if (v2)
  {
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      unint64_t v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
  }

  int v6 = *(void **)(a1 + 8);
  uint64_t v7 = (void *)v6[1];
  if (v7 != v6)
  {
    while (1)
    {
      uint64_t v8 = (std::__shared_weak_count *)v7[3];
      if (v8)
      {
        uint64_t v9 = v7[2];
        int v10 = (unint64_t *)&v8->__shared_weak_owners_;
        do
          unint64_t v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        unint64_t v12 = std::__shared_weak_count::lock(v8);
        if (v12) {
          uint64_t v13 = v9;
        }
        else {
          uint64_t v13 = 0LL;
        }
        if (!v2)
        {
LABEL_19:
          BOOL v16 = v13 == 0;
          goto LABEL_20;
        }
      }

      else
      {
        uint64_t v13 = 0LL;
        unint64_t v12 = 0LL;
        if (!v2) {
          goto LABEL_19;
        }
      }

      __int128 v14 = std::__shared_weak_count::lock(v2);
      if (!v14) {
        goto LABEL_19;
      }
      uint64_t v15 = v14;
      BOOL v16 = v13 == v3;
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v15);
      }

os_signpost_id_t *sub_1379FC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, char a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)&__int128 v146 = a3;
  *((void *)&v146 + 1) = a4;
  sub_6DD4();
  if (((*(uint64_t (**)(void))(qword_48F828 + 48))() & 1) == 0)
  {
    uint64_t v99 = (os_log_t *)sub_138E8(13);
    int v100 = *v99;
    if (*v99 && os_log_type_enabled(*v99, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4395;
      _os_log_impl(&dword_0, v100, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if ((sub_14F834() & 1) == 0 && sub_EAA74("VA_GetPorts", 0xBuLL) == &qword_4938E0)
  {
    os_signpost_id_t v16 = 0LL;
  }

  else
  {
    unsigned __int8 v15 = atomic_load((unsigned __int8 *)&qword_493908);
    if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
    {
      qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_493908);
    }

    os_signpost_id_t v16 = os_signpost_id_generate((os_log_t)qword_493900);
    unsigned __int8 v17 = atomic_load((unsigned __int8 *)&qword_493908);
    if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
    {
      qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_493908);
    }

    if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v18 = (os_log_s *)qword_493900;
      if (os_signpost_enabled((os_log_t)qword_493900))
      {
        else {
          int v19 = off_471298[v146];
        }
        unint64_t v20 = v140;
        sub_7D084(v140, v19);
        if (v142[6] < 0) {
          unint64_t v20 = (void **)v140[0];
        }
        sub_2D9F18(&v148, a5);
        int size = (char)v148.__r_.__value_.__s.__size_;
        std::string::size_type v22 = v148.__r_.__value_.__r.__words[0];
        sub_1245C0(&__p, a6);
        int v23 = &v148;
        if (size < 0) {
          int v23 = (std::string *)v22;
        }
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = v20;
        *(_WORD *)&_BYTE buf[12] = 2080;
        *(void *)&buf[14] = v23;
        *(_WORD *)&buf[22] = 2080;
        *(void *)&buf[24] = p_p;
        _os_signpost_emit_with_name_impl( &dword_0,  v18,  OS_SIGNPOST_INTERVAL_BEGIN,  v16,  "VA_GetPorts",  "GetPorts for category = %s, candidate ports = %s, disallowed ports = %s",  buf,  0x20u);
        if ((v142[6] & 0x80000000) != 0) {
          operator delete(v140[0]);
        }
      }
    }
  }

  os_signpost_id_t v145 = v16;
  uint64_t v25 = sub_138E8(42);
  if ((*(_BYTE *)(v25 + 8) & 1) != 0)
  {
    int v26 = *(os_log_s **)v25;
    if (*(void *)v25)
    {
      if (os_log_type_enabled(*(os_log_t *)v25, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "SignpostUtilities.h";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 73;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = "kGetPorts";
        _os_log_impl(&dword_0, v26, OS_LOG_TYPE_DEBUG, "%25s:%-5d Starting measurement for signpost %s", buf, 0x1Cu);
      }
    }
  }

  *(_OWORD *)&v148.__r_.__value_.__r.__words[1] = 0uLL;
  v148.__r_.__value_.__r.__words[0] = (std::string::size_type)&v148.__r_.__value_.__l.__size_;
  if (!*(void *)(a5 + 16))
  {
    *(_DWORD *)a1 = 0;
    sub_121604((uint64_t *)(a1 + 8), (uint64_t)&v148);
    goto LABEL_165;
  }

  uint64_t v27 = *(void *)(*(void *)a2 + 8LL);
  if (!v27) {
    goto LABEL_41;
  }
  uint64_t v28 = a11;
  int v29 = (_DWORD *)(*(void *)a2 + 8LL);
  do
  {
    unsigned int v30 = *(_DWORD *)(v27 + 32);
    BOOL v31 = v30 >= v146;
    else {
      int v32 = (uint64_t *)(v27 + 8);
    }
    if (v31) {
      int v29 = (_DWORD *)v27;
    }
    uint64_t v27 = *v32;
  }

  while (*v32);
  if (v29 == (_DWORD *)(*(void *)a2 + 8LL) || v146 < v29[8])
  {
LABEL_41:
    uint64_t v33 = sub_138E8(8);
    if ((*(_BYTE *)(v33 + 8) & 1) != 0)
    {
      std::string::size_type v34 = *(os_log_s **)v33;
      if (*(void *)v33)
      {
        if (os_log_type_enabled(*(os_log_t *)v33, OS_LOG_TYPE_DEBUG))
        {
          else {
            uint64_t v35 = off_471298[v146];
          }
          sub_7D084(v140, v35);
          if (v142[6] >= 0) {
            int v94 = v140;
          }
          else {
            int v94 = (void **)v140[0];
          }
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4415;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v94;
          _os_log_impl(&dword_0, v34, OS_LOG_TYPE_DEBUG, "%25s:%-5d Unable to find a category entry for %s", buf, 0x1Cu);
          if ((v142[6] & 0x80000000) != 0) {
            operator delete(v140[0]);
          }
        }
      }
    }

    *(_DWORD *)a1 = 2;
    sub_121604((uint64_t *)(a1 + 8), (uint64_t)&v148);
    goto LABEL_165;
  }

  uint64_t v36 = sub_138E8(8);
  if ((*(_BYTE *)(v36 + 8) & 1) != 0)
  {
    BOOL v37 = *(os_log_s **)v36;
    if (*(void *)v36)
    {
      if (os_log_type_enabled(*(os_log_t *)v36, OS_LOG_TYPE_DEBUG))
      {
        sub_2DB6FC((std::string *)v140, (unsigned int *)&v146);
        __int128 v38 = v142[6] >= 0 ? v140 : (void **)v140[0];
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4423;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = v38;
        _os_log_impl(&dword_0, v37, OS_LOG_TYPE_DEBUG, "%25s:%-5d Scanning abstract routes for %s.", buf, 0x1Cu);
        if ((v142[6] & 0x80000000) != 0) {
          operator delete(v140[0]);
        }
      }
    }
  }

  BOOL v39 = v29[18] == 1668510820;
  *(_OWORD *)&_DWORD buf[3] = v146;
  BOOL v141 = v39;
  *(_OWORD *)int v142 = *(_OWORD *)buf;
  *(_DWORD *)&v142[15] = HIDWORD(v146);
  v140[1] = a7;
  int v110 = v29 + 10;
  v140[0] = v29 + 10;
  uint64_t v144 = 0LL;
  uint64_t v143 = 0LL;
  std::string::size_type v40 = (void *)sub_11DDE4((uint64_t *)v140);
  uint64_t v107 = v41;
  __int128 v42 = v40;
  uint64_t v105 = v140[0];
  if (v140[0] == v40)
  {
    int v108 = 0;
    goto LABEL_167;
  }

  int v108 = 0;
  uint64_t v111 = a11 + 48;
  uint64_t v112 = (uint64_t *)(a11 + 24);
  uint64_t v106 = a1;
  uint64_t v103 = a2;
  uint64_t v104 = (uint64_t)(v41 + 1);
  while (1)
  {
    uint64_t v43 = sub_138E8(8);
    unint64_t v109 = v42;
    uint64_t v44 = (uint64_t)(v42 + 2);
    if ((*(_BYTE *)(v43 + 8) & 1) != 0)
    {
      unint64_t v45 = *(os_log_s **)v43;
      if (*(void *)v43)
      {
        if (os_log_type_enabled(*(os_log_t *)v43, OS_LOG_TYPE_DEBUG))
        {
          sub_2DABA8(&__p, v44);
          std::string::size_type v46 = &__p;
          if ((__p.__r_.__value_.__s.__size_ & 0x80u) != 0) {
            std::string::size_type v46 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4430;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v46;
          _os_log_impl(&dword_0, v45, OS_LOG_TYPE_DEBUG, "%25s:%-5d Scanning abstract route %s.", buf, 0x1Cu);
        }
      }
    }

    uint64_t v47 = v109[3];
    if (v47 == v44)
    {
      char v48 = 0;
    }

    else
    {
      char v48 = 0;
      do
      {
        *(void *)buf = v44;
        *(void *)&buf[8] = v110;
        *(void *)&_DWORD buf[16] = a6;
        *(void *)&buf[24] = a7;
        *(void *)&__int128 v150 = a8;
        *((void *)&v150 + 1) = v47 + 16;
        *(void *)int v151 = a12;
        *(_OWORD *)&v151[8] = v146;
        v151[24] = a9;
        uint64_t v153 = 0LL;
        uint64_t v154 = 0LL;
        BOOL v49 = *(const void **)v28;
        uint64_t v50 = *(void *)(v28 + 8);
        unint64_t v51 = (v50 - *(void *)v28) >> 2;
        int v152 = 0LL;
        sub_7A5B8(&v152, v49, v50, v51);
        uint64_t v155 = *v112;
        char v156 = *(_BYTE *)(a11 + 32);
        int v157 = *(_DWORD *)(v28 + 40);
        sub_86550(v158, v111);
        int v159 = *(_DWORD *)(v28 + 72);
        std::string::size_type v52 = *(const void **)(v28 + 80);
        if (v52) {
          CFRetain(*(CFTypeRef *)(v28 + 80));
        }
        CFTypeRef cf = v52;
        unint64_t v53 = *(void **)(a5 + 8);
        v129[2] = v150;
        v130[0] = *(_OWORD *)v151;
        *(_OWORD *)((char *)v130 + 9) = *(_OWORD *)&v151[9];
        v129[0] = *(_OWORD *)buf;
        v129[1] = *(_OWORD *)&buf[16];
        unint64_t v132 = 0LL;
        uint64_t v133 = 0LL;
        unsigned int v131 = 0LL;
        sub_7A5B8(&v131, v152, (uint64_t)v153, (v153 - (_BYTE *)v152) >> 2);
        uint64_t v134 = v155;
        char v135 = v156;
        int v136 = v157;
        sub_86550(v137, (uint64_t)v158);
        int v138 = v159;
        CFTypeRef v54 = cf;
        if (cf) {
          CFRetain(cf);
        }
        CFTypeRef v139 = v54;
        unint64_t v55 = (void *)a5;
        if (v53 != (void *)a5)
        {
          unint64_t v55 = v53;
          while ((sub_138AB0((uint64_t)v129, v55 + 2) & 1) != 0)
          {
            unint64_t v55 = (void *)v55[1];
            if (v55 == (void *)a5)
            {
              unint64_t v55 = (void *)a5;
              goto LABEL_90;
            }
          }

          __int128 v56 = (void *)a5;
          while (1)
          {
            __int128 v56 = (void *)*v56;
            if (v55 == v56) {
              break;
            }
            if (sub_138AB0((uint64_t)v129, v56 + 2))
            {
              unint64_t v57 = -1LL;
              std::string::size_type v58 = v55;
              do
              {
                std::string::size_type v58 = (void *)v58[1];
                ++v57;
              }

              while (v58 != v56);
              uint64_t v59 = v57 + 2;
              if (v57 < 2)
              {
LABEL_86:
                std::string::size_type v63 = 0LL;
                unint64_t v60 = 0LL;
              }

              else
              {
                if (v59 >= 0x7FFFFFFFFFFFFFFLL) {
                  unint64_t v60 = 0x7FFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v60 = v57 + 2;
                }
                while (1)
                {
                  std::string::size_type v61 = (__int128 *)operator new(16 * v60, &std::nothrow);
                  if (v61) {
                    break;
                  }
                  BOOL v62 = v60 > 1;
                  v60 >>= 1;
                  if (!v62) {
                    goto LABEL_86;
                  }
                }

                std::string::size_type v63 = v61;
              }

              unint64_t v55 = sub_138F10(v55, v56, (uint64_t)v129, v59, v63, v60);
              if (v63) {
                operator delete(v63);
              }
              break;
            }
          }

void sub_13891C(_Unwind_Exception *a1)
{
}

uint64_t sub_138AB0(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = *(int **)(a1 + 40);
  if ((*(_WORD *)(v37 + 184) & 1) != 0) {
    int v5 = *v4;
  }
  else {
    int v5 = v4[1];
  }
  if (*(_DWORD *)(v37 + 144) != v5)
  {
LABEL_32:
    uint64_t v22 = 0LL;
    goto LABEL_33;
  }

  uint64_t v7 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void ***)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  int v11 = *(unsigned __int8 *)(a1 + 72);
  int v29 = 0LL;
  uint64_t v30 = 0LL;
  std::string __p = 0LL;
  sub_7A5B8( &__p,  *(const void **)(a1 + 80),  *(void *)(a1 + 88),  (uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 2);
  int v27 = v11;
  uint64_t v31 = *(void *)(a1 + 104);
  uint8_t v32 = *(_BYTE *)(a1 + 112);
  int v33 = *(_DWORD *)(a1 + 120);
  sub_86550(v34, a1 + 128);
  int v35 = *(_DWORD *)(a1 + 152);
  unint64_t v12 = *(const void **)(a1 + 160);
  if (v12) {
    CFRetain(*(CFTypeRef *)(a1 + 160));
  }
  CFTypeRef cf = v12;
  uint64_t v13 = *(void **)(a1 + 48);
  memset(buf, 0, 24);
  sub_7A5B8(buf, __p, (uint64_t)v29, (v29 - (_BYTE *)__p) >> 2);
  *(void *)&buf[24] = v31;
  _BYTE buf[32] = v32;
  int v45 = v33;
  sub_86550(v46, (uint64_t)v34);
  int v47 = v35;
  CFTypeRef v14 = cf;
  if (cf) {
    CFRetain(cf);
  }
  CFTypeRef v48 = v14;
  uint64_t v43 = 0LL;
  unsigned __int8 v15 = (void **)operator new(0x20uLL);
  *unsigned __int8 v15 = &off_470CF0;
  v15[1] = v13;
  v15[2] = a2;
  v15[3] = (void *)v6;
  uint64_t v43 = v15;
  sub_1216B8( &v39,  v7,  v6,  (_DWORD *)(a1 + 56),  v8,  v9,  v10,  v27 != 0,  0x636F7570u,  0x76646566u,  0,  1,  1u,  (uint64_t)buf,  (uint64_t)v41);
  os_signpost_id_t v16 = v43;
  if (v43 == v41)
  {
    uint64_t v17 = 4LL;
    os_signpost_id_t v16 = v41;
  }

  else
  {
    if (!v43) {
      goto LABEL_14;
    }
    uint64_t v17 = 5LL;
  }

  (*((void (**)(void))*v16 + v17))();
LABEL_14:
  if (v48) {
    CFRelease(v48);
  }
  sub_32C8C((void *)v46[1]);
  if (*(void *)buf)
  {
    *(void *)&buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }

  int64x2_t v18 = v39;
  std::string::size_type v40 = &v39;
  sub_11E38C((void ***)&v40);
  if (cf) {
    CFRelease(cf);
  }
  sub_32C8C((void *)v34[1]);
  if (__p)
  {
    int v29 = __p;
    operator delete(__p);
  }

  if (v18.i64[0] == v18.i64[1]) {
    goto LABEL_32;
  }
  uint64_t v19 = sub_138E8(8);
  if ((*(_BYTE *)(v19 + 8) & 1) != 0)
  {
    unint64_t v20 = *(os_log_s **)v19;
    if (*(void *)v19)
    {
      if (os_log_type_enabled(*(os_log_t *)v19, OS_LOG_TYPE_DEBUG))
      {
        sub_23FE8((uint64_t)v41, (os_unfair_lock_t)(v37 + 8));
        uint64_t v21 = v42 >= 0 ? v41 : (void **)v41[0];
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4456;
        *(_WORD *)&_BYTE buf[18] = 2080;
        *(void *)&buf[20] = v21;
        _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Found eligible port (%s) in the prioritized route list that matches the port filter.",  buf,  0x1Cu);
        if (v42 < 0) {
          operator delete(v41[0]);
        }
      }
    }
  }

  uint64_t v22 = 1LL;
LABEL_33:
  int v23 = v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      unint64_t v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }

  return v22;
}

void sub_138E4C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33, uint64_t a34, uint64_t a35, uint64_t a36)
{
}

void *sub_138F10(void *a1, void *a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6)
{
  uint64_t v8 = a1;
  if (a4 == 3)
  {
    uint64_t v12 = a1[1];
    if (!sub_138AB0(a3, (uint64_t *)(v12 + 16)))
    {
      uint64_t v23 = *(void *)(v12 + 16);
      *(void *)(v12 + 16) = a2[2];
      a2[2] = v23;
      uint64_t v24 = *(void *)(v12 + 24);
      *(void *)(v12 + 24) = a2[3];
      a2[3] = v24;
      uint64_t v25 = v8[2];
      v8[2] = *(void *)(v12 + 16);
      *(void *)(v12 + 16) = v25;
      uint64_t v26 = v8[3];
      v8[3] = *(void *)(v12 + 24);
      *(void *)(v12 + 24) = v26;
      return (void *)v12;
    }

    uint64_t v13 = v8[2];
    v8[2] = *(void *)(v12 + 16);
    *(void *)(v12 + 16) = v13;
    uint64_t v14 = v8[3];
    v8[3] = *(void *)(v12 + 24);
    *(void *)(v12 + 24) = v14;
    uint64_t v15 = *(void *)(v12 + 16);
    *(void *)(v12 + 16) = a2[2];
    a2[2] = v15;
    uint64_t v11 = *(void *)(v12 + 24);
    *(void *)(v12 + 24) = a2[3];
    goto LABEL_6;
  }

  if (a4 == 2)
  {
    uint64_t v10 = a1[2];
    a1[2] = a2[2];
    a2[2] = v10;
    uint64_t v11 = a1[3];
    a1[3] = a2[3];
LABEL_6:
    a2[3] = v11;
    return a2;
  }

  uint64_t v17 = a5;
  if (a6 >= a4)
  {
    v53[0] = (uint64_t)a5;
    v53[1] = (uint64_t)&v54;
    *a5 = *((_OWORD *)a1 + 1);
    int v27 = a5 + 1;
    a1[2] = 0LL;
    a1[3] = 0LL;
    uint64_t v54 = 1LL;
    for (uint64_t i = (void *)a1[1]; i != a2; uint64_t i = (void *)i[1])
    {
      int v29 = (__int128 *)(i + 2);
      if (sub_138AB0(a3, i + 2))
      {
        __int128 v30 = *v29;
        *(void *)int v29 = 0LL;
        i[3] = 0LL;
        uint64_t v31 = (std::__shared_weak_count *)v8[3];
        *((_OWORD *)v8 + 1) = v30;
        if (v31) {
          std::__shared_weak_count::__release_weak(v31);
        }
        uint64_t v8 = (void *)v8[1];
      }

      else
      {
        *v27++ = *v29;
        *(void *)int v29 = 0LL;
        i[3] = 0LL;
        ++v54;
      }
    }

    __int128 v32 = *((_OWORD *)a2 + 1);
    a2[2] = 0LL;
    a2[3] = 0LL;
    int v33 = (std::__shared_weak_count *)v8[3];
    *((_OWORD *)v8 + 1) = v32;
    if (v33) {
      std::__shared_weak_count::__release_weak(v33);
    }
    uint64_t v12 = v8[1];
    if (v27 > v17)
    {
      uint64_t v34 = v8[1];
      do
      {
        __int128 v35 = *v17;
        *(void *)uint64_t v17 = 0LL;
        *((void *)v17 + 1) = 0LL;
        uint64_t v36 = *(std::__shared_weak_count **)(v34 + 24);
        *(_OWORD *)(v34 + 16) = v35;
        if (v36) {
          std::__shared_weak_count::__release_weak(v36);
        }
        ++v17;
        uint64_t v34 = *(void *)(v34 + 8);
      }

      while (v17 < v27);
    }

    sub_1394E8(v53);
  }

  else
  {
    if (a4 >= 0) {
      uint64_t v18 = a4;
    }
    else {
      uint64_t v18 = a4 + 1;
    }
    uint64_t v19 = v18 >> 1;
    uint64_t v20 = v18 >> 1;
    if (a4 <= -2)
    {
      uint64_t v37 = v18 >> 1;
      uint64_t v21 = a1;
      do
        uint64_t v21 = (void *)*v21;
      while (!__CFADD__(v37++, 1LL));
    }

    else
    {
      uint64_t v21 = a1;
      if ((unint64_t)(a4 + 1) >= 3)
      {
        unint64_t v22 = v19 + 1;
        uint64_t v21 = a1;
        do
        {
          uint64_t v21 = (void *)v21[1];
          --v22;
        }

        while (v22 > 1);
      }
    }

    int64x2_t v39 = v21;
    while (1)
    {
      int64x2_t v39 = (void *)*v39;
      if ((sub_138AB0(a3, v39 + 2) & 1) != 0) {
        break;
      }
      if (v39 == v8) {
        goto LABEL_41;
      }
      --v20;
    }

    uint64_t v8 = (void *)sub_138F10(v8, v39, a3, v20, v17, a6);
LABEL_41:
    uint64_t v12 = a2[1];
    uint64_t v40 = a4 - v19;
    BOOL v41 = v21;
    while (sub_138AB0(a3, v41 + 2))
    {
      BOOL v41 = (void *)v41[1];
      if (v41 == a2) {
        goto LABEL_46;
      }
      --v40;
    }

    uint64_t v12 = sub_138F10(v41, a2, a3, v40, v17, a6);
LABEL_46:
    if (v8 != v21)
    {
      if (v21 == (void *)v12)
      {
        return v8;
      }

      else
      {
        uint64_t v42 = v8[2];
        v8[2] = v21[2];
        v21[2] = v42;
        uint64_t v43 = v8[3];
        v8[3] = v21[3];
        v21[3] = v43;
        uint64_t v44 = (void *)v8[1];
        for (uint64_t j = (void *)v21[1]; j != (void *)v12; uint64_t j = (void *)j[1])
        {
          if (v44 == v21) {
            uint64_t v21 = j;
          }
          uint64_t v46 = v44[2];
          v44[2] = j[2];
          j[2] = v46;
          uint64_t v47 = v44[3];
          v44[3] = j[3];
          j[3] = v47;
          uint64_t v44 = (void *)v44[1];
        }

        if (v44 == v21)
        {
          return v21;
        }

        else
        {
          CFTypeRef v48 = v44;
          BOOL v49 = v21;
          do
          {
            while (1)
            {
              uint64_t v50 = v48[2];
              v48[2] = v49[2];
              v49[2] = v50;
              uint64_t v51 = v48[3];
              v48[3] = v49[3];
              v49[3] = v51;
              CFTypeRef v48 = (void *)v48[1];
              BOOL v49 = (void *)v49[1];
              if (v49 == (void *)v12) {
                break;
              }
              if (v48 == v21) {
                uint64_t v21 = v49;
              }
            }

            BOOL v49 = v21;
          }

          while (v48 != v21);
          return v44;
        }
      }
    }
  }

  return (void *)v12;
}

void sub_1392F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_139308(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 160);
  if (v2) {
    CFRelease(v2);
  }
  sub_32C8C(*(void **)(a1 + 136));
  uint64_t v3 = *(void **)(a1 + 80);
  if (v3)
  {
    *(void *)(a1 + sub_51FA0(v10 + 88) = v3;
    operator delete(v3);
  }

  return a1;
}

os_signpost_id_t *sub_139350(os_signpost_id_t *a1)
{
  uint64_t v2 = sub_138E8(42);
  if ((*(_BYTE *)(v2 + 8) & 1) != 0)
  {
    uint64_t v3 = *(os_log_s **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v8 = 136315650;
        uint64_t v9 = "SignpostUtilities.h";
        __int16 v10 = 1024;
        int v11 = 73;
        __int16 v12 = 2080;
        uint64_t v13 = "kGetPorts";
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Ending measurement for signpost %s",  (uint8_t *)&v8,  0x1Cu);
      }
    }
  }

  if (*a1)
  {
    unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_493908);
    if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_493908))
    {
      qword_493900 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_493908);
    }

    os_signpost_id_t v5 = *a1;
    if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v6 = (os_log_s *)qword_493900;
      if (os_signpost_enabled((os_log_t)qword_493900))
      {
        LOWORD(v8) = 0;
        _os_signpost_emit_with_name_impl( &dword_0,  v6,  OS_SIGNPOST_INTERVAL_END,  v5,  "VA_GetPorts",  (const char *)&unk_420CC6,  (uint8_t *)&v8,  2u);
      }
    }
  }

  return a1;
}

void sub_1394DC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

void sub_1394E8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0LL;
  if (v1)
  {
    uint64_t v2 = (unint64_t *)a1[1];
    unint64_t v3 = *v2;
    if (*v2)
    {
      unint64_t v4 = 0LL;
      os_signpost_id_t v5 = (std::__shared_weak_count **)(v1 + 8);
      do
      {
        if (*v5)
        {
          std::__shared_weak_count::__release_weak(*v5);
          unint64_t v3 = *v2;
        }

        ++v4;
        v5 += 2;
      }

      while (v4 < v3);
    }
  }

__n128 sub_139550(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &off_470CF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_139590(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &off_470CF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *sub_1395B8@<X0>( uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned __int8 *a3@<X2>, int *a4@<X3>, uint64_t **a5@<X8>)
{
  uint64_t v7 = *a2;
  int v35 = *a3;
  int v8 = *a4;
  uint64_t v9 = (const void ***)sub_5569C(*(void **)(a1 + 8), *a2);
  uint64_t v37 = *(uint64_t **)(a1 + 16);
  int v10 = *(_DWORD *)(*(void *)(a1 + 24) + 32LL);
  v47[0] = &off_470B88;
  CFTypeRef v48 = v47;
  a5[1] = 0LL;
  a5[2] = 0LL;
  int v33 = a5;
  *a5 = (uint64_t *)(a5 + 1);
  int v34 = v10;
  sub_55700(&v40, *v9, v9[1], v10);
  int v11 = v40;
  uint64_t v36 = v41;
  if (v40 != v41)
  {
    while (1)
    {
      CFTypeRef v12 = *v11;
      if (*v11) {
        CFRetain(*v11);
      }
      uint64_t v13 = (uint64_t)v48;
      if (!v48) {
        goto LABEL_7;
      }
      if (v48 != v47) {
        break;
      }
      uint64_t v50 = v49;
      (*(void (**)(uint64_t, void *))(v47[0] + 24LL))((uint64_t)v47, v49);
LABEL_9:
      sub_B8CBC(&v45, v37, "", 339);
      uint64_t v14 = (void *)sub_546E0();
      unint64_t v15 = v45;
      int v16 = (*(uint64_t (**)(void *))(*v14 + 16LL))(v14);
      uint64_t v17 = sub_FC6AC(v14 + 14, v15);
      if (v16) {
        (*(void (**)(void *))(*v14 + 24LL))(v14);
      }
      if (v17)
      {
        uint64_t v18 = (void **)operator new(4uLL);
        *(_DWORD *)uint64_t v18 = v7;
        uint64_t v51 = v18;
        std::string::size_type v52 = (void **)((char *)v18 + 4);
        unint64_t v53 = (char *)v18 + 4;
        strcpy((char *)&v54, "cwdv");
        char v55 = 0;
        int v56 = 3;
        v58[0] = 0LL;
        v58[1] = 0LL;
        unint64_t v57 = v58;
        int v19 = 44739242;
        unsigned int v59 = 44739242;
        CFTypeRef v60 = v12;
        if (v12)
        {
          CFRetain(v12);
          int v19 = v59;
        }

        LODWORD(v54) = v8;
        unsigned int v59 = v19 & 0xFFFFFFF0 | (8 * (v35 != 0));
        if (sub_54ADC(v45, (uint64_t)&v51))
        {
          uint64_t v38 = v45;
          int64x2_t v39 = v46;
          if (v46)
          {
            p_shared_weak_owners = (unint64_t *)&v46->__shared_weak_owners_;
            do
              unint64_t v21 = __ldxr(p_shared_weak_owners);
            while (__stxr(v21 + 1, p_shared_weak_owners));
          }

          if (v60) {
            CFRelease(v60);
          }
          sub_32C8C(v58[0]);
          if (v51)
          {
            std::string::size_type v52 = v51;
            operator delete(v51);
          }

          goto LABEL_40;
        }

        if (v60) {
          CFRelease(v60);
        }
        sub_32C8C(v58[0]);
        if (v51)
        {
          std::string::size_type v52 = v51;
          operator delete(v51);
        }
      }

      if (v12) {
        CFRetain(v12);
      }
      uint64_t v44 = v12;
      v43[0] = 0LL;
      v43[1] = 0LL;
      uint64_t v42 = v43;
      uint64_t v22 = (uint64_t)v50;
      if (!v50) {
        goto LABEL_31;
      }
      if (v50 != v49)
      {
        uint64_t v22 = (*(uint64_t (**)(void *))(*v50 + 16LL))(v50);
LABEL_31:
        uint64_t v54 = (void ***)v22;
        goto LABEL_33;
      }

      uint64_t v54 = &v51;
      (*(void (**)(void *, void ***))(v49[0] + 24LL))(v49, &v51);
LABEL_33:
      sub_125B30(&v38, v7, &v44, v8, v35 != 0, (uint64_t)&v42, v34, (uint64_t)&v51);
      uint64_t v23 = v54;
      if (v54 == &v51)
      {
        uint64_t v23 = &v51;
        uint64_t v24 = 4LL;
      }

      else
      {
        if (!v54) {
          goto LABEL_38;
        }
        uint64_t v24 = 5LL;
      }

      ((void (*)(void ***))(*v23)[v24])(v23);
LABEL_38:
      sub_FF3B8(v43[0]);
      if (v12) {
        CFRelease(v12);
      }
LABEL_40:
      uint64_t v25 = v46;
      if (v46)
      {
        p_shared_owners = (unint64_t *)&v46->__shared_owners_;
        do
          unint64_t v27 = __ldaxr(p_shared_owners);
        while (__stlxr(v27 - 1, p_shared_owners));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }

      uint64_t v28 = v50;
      if (v50 == v49)
      {
        uint64_t v28 = v49;
        uint64_t v29 = 4LL;
        goto LABEL_49;
      }

      if (v50)
      {
        uint64_t v29 = 5LL;
LABEL_49:
        (*(void (**)(void *))(*v28 + 8 * v29))(v28);
      }

      if (v12) {
        CFRelease(v12);
      }
      __int128 v30 = v39;
      if (v39)
      {
        if (v39->__shared_owners_ != -1) {
          sub_125FBC(v33, (unint64_t *)&v38, &v38);
        }
        std::__shared_weak_count::__release_weak(v30);
      }

      if (++v11 == v36) {
        goto LABEL_57;
      }
    }

    uint64_t v13 = (*(uint64_t (**)(void *))(*v48 + 16LL))(v48);
LABEL_7:
    uint64_t v50 = (void *)v13;
    goto LABEL_9;
  }

void sub_139A20( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26, uint64_t a27, uint64_t a28, char *a29)
{
  __int128 v30 = a29;
  if (a29 == &a26)
  {
    uint64_t v31 = 4LL;
    __int128 v30 = &a26;
  }

  else
  {
    if (!a29) {
      goto LABEL_6;
    }
    uint64_t v31 = 5LL;
  }

  (*(void (**)(void))(*(void *)v30 + 8 * v31))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_139BE4(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_139CA0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

void *sub_139CD4()
{
  __n128 result = operator new(0x10uLL);
  void *result = &off_470CA8;
  return result;
}

void sub_139CF8(uint64_t a1, void *a2)
{
  *a2 = &off_470CA8;
}

uint64_t sub_139D10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = v13;
  if (v13 == &v12)
  {
LABEL_14:
    uint64_t v10 = 0LL;
  }

  else
  {
    while (1)
    {
      unint64_t v3 = (std::__shared_weak_count *)v2[3];
      if (v3)
      {
        unint64_t v4 = std::__shared_weak_count::lock(v3);
        if (v4)
        {
          os_signpost_id_t v5 = v4;
          uint64_t v6 = v2[2];
          BOOL v7 = v6 && *(_DWORD *)(v6 + 144) == 1885892706 && sub_2043D4(v6);
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            unint64_t v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }

          if (v7) {
            break;
          }
        }
      }

      uint64_t v2 = (uint64_t *)v2[1];
      if (v2 == &v12) {
        goto LABEL_14;
      }
    }

    uint64_t v10 = 1LL;
  }

  sub_85B80(&v12);
  return v10;
}

void sub_139DF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    unint64_t v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }

  sub_85B80((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_139E34(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  int v51 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  sub_6DD4();
  if (((*(uint64_t (**)(uint64_t *))(qword_48F828 + 48))(&qword_48F828) & 1) == 0)
  {
    CFTypeRef v48 = (os_log_t *)sub_138E8(13);
    BOOL v49 = *v48;
    if (*v48 && os_log_type_enabled(*v48, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3997;
      _os_log_impl( &dword_0,  v49,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to acquire routing mutex.",  buf,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to acquire routing mutex.");
  }

  sub_72210(a1, 1920099684LL);
  *(void *)&v55[8] = 0LL;
  *(void *)&v55[16] = 0LL;
  *(void *)char v55 = &v55[8];
  unint64_t v9 = a4 + 1;
  uint64_t v8 = (void *)*a4;
  uint64_t v10 = *(void **)(a2 + 528);
  int v11 = (_OWORD *)(a2 + 536);
  if (a3)
  {
    *(void *)buf = v55;
    *(void *)&buf[8] = &v55[8];
    if (v8 != v9 && v10 != (void *)v11)
    {
      do
      {
        int v12 = *((_DWORD *)v8 + 7);
        int v13 = *((_DWORD *)v10 + 7);
        if (v12 >= v13)
        {
          if (v13 >= v12)
          {
            sub_13A930((uint64_t)buf, v12);
            uint64_t v17 = (void *)v8[1];
            if (v17)
            {
              do
              {
                int v16 = v17;
                uint64_t v17 = (void *)*v17;
              }

              while (v17);
            }

            else
            {
              do
              {
                int v16 = (void *)v8[2];
                BOOL v18 = *v16 == (void)v8;
                uint64_t v8 = v16;
              }

              while (!v18);
            }
          }

          else
          {
            int v16 = v8;
          }

          int v19 = (void *)v10[1];
          if (v19)
          {
            do
            {
              uint64_t v10 = v19;
              int v19 = (void *)*v19;
            }

            while (v19);
          }

          else
          {
            do
            {
              uint64_t v20 = v10;
              uint64_t v10 = (void *)v10[2];
            }

            while ((void *)*v10 != v20);
          }

          uint64_t v8 = v16;
        }

        else
        {
          uint64_t v14 = (void *)v8[1];
          if (v14)
          {
            do
            {
              uint64_t v8 = v14;
              uint64_t v14 = (void *)*v14;
            }

            while (v14);
          }

          else
          {
            do
            {
              unint64_t v15 = v8;
              uint64_t v8 = (void *)v8[2];
            }

            while ((void *)*v8 != v15);
          }
        }
      }

      while (v8 != v9 && v10 != (void *)v11);
      if (*(void *)&v55[16])
      {
        sub_32C8C(*(void **)&v55[8]);
        *(void *)&v55[16] = 0LL;
        *(_OWORD *)char v55 = (unint64_t)&v55[8];
        unint64_t v21 = (void *)*a4;
        v53[0] = *(void *)(a2 + 528);
        v52.__r_.__value_.__r.__words[0] = a2 + 536;
        int v56 = a4 + 1;
        unint64_t v57 = v21;
        v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
        v58.__r_.__value_.__l.__size_ = (std::string::size_type)&v55[8];
        sub_13A4FC((uint64_t)buf, (uint64_t)v53, &v52, (uint64_t)&v57, &v56, (__n128 *)&v58);
        uint64_t v22 = *(void *)(a2 + 544);
        __int128 v23 = *(_OWORD *)&v55[8];
        __int128 v24 = *(_OWORD *)(a2 + 528);
        *(void *)(a2 + 528) = *(void *)v55;
        *int v11 = v23;
        *(_OWORD *)char v55 = v24;
        *(void *)&v55[16] = v22;
        if (*((void *)&v23 + 1)) {
          uint64_t v25 = (void *)(v23 + 16);
        }
        else {
          uint64_t v25 = (void *)(a2 + 528);
        }
        *uint64_t v25 = v11;
        uint64_t v26 = (void *)(*(void *)&v55[8] + 16LL);
        if (!v22) {
          uint64_t v26 = v55;
        }
        *uint64_t v26 = &v55[8];
LABEL_34:
        sub_139BE4((uint64_t)buf, a2, 1919185776);
        sub_725DC(a1, (uint64_t)buf);
        *(void *)buf = off_4709D0;
        unint64_t v27 = *(void **)&buf[16];
        if (*(void *)&buf[16])
        {
          sub_10AF78((uint64_t *)(*(void *)&buf[16] + 16LL));
          uint64_t v28 = v27;
LABEL_36:
          operator delete(v28);
        }

        goto LABEL_76;
      }
    }
  }

  else
  {
    v53[0] = *a4;
    v52.__r_.__value_.__r.__words[0] = (std::string::size_type)(a4 + 1);
    int v56 = (void *)(a2 + 536);
    unint64_t v57 = v10;
    v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
    v58.__r_.__value_.__l.__size_ = (std::string::size_type)&v55[8];
    sub_13A4FC((uint64_t)buf, (uint64_t)v53, &v52, (uint64_t)&v57, &v56, (__n128 *)&v58);
    if (*(void *)&v55[16])
    {
      sub_13A6E8((uint64_t *)(a2 + 528), *(void **)v55, &v55[8]);
      goto LABEL_34;
    }
  }

  uint64_t v29 = sub_138E8(8);
  uint64_t v30 = sub_138E8(34);
  char v31 = 0;
  uint64_t v32 = 0LL;
  *(void *)buf = 0x100000002LL;
  uint64_t v33 = *(void *)(v29 + 8);
  while (1)
  {
    uint64_t v34 = *(int *)&buf[4 * v32];
    char v35 = v31;
    if (((v33 & v34) != 0) != ((*(void *)(v30 + 8) & v34) != 0)) {
      break;
    }
    char v31 = 1;
    uint64_t v32 = 1LL;
    if ((v35 & 1) != 0)
    {
      if ((v33 & 1) == 0) {
        goto LABEL_76;
      }
      goto LABEL_45;
    }
  }

  if ((v33 & v34) == 0) {
    uint64_t v29 = v30;
  }
  if ((*(void *)(v29 + 8) & 1) == 0) {
    goto LABEL_76;
  }
LABEL_45:
  uint64_t v36 = *(os_log_s **)v29;
  if (v36 && os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v37 = "????";
    if (a3 == 1) {
      uint64_t v37 = "Remove";
    }
    if (a3) {
      uint64_t v38 = (char *)v37;
    }
    else {
      uint64_t v38 = "Add";
    }
    sub_7D084(v53, v38);
    int v39 = v54;
    uint64_t v40 = (void *)v53[0];
    BOOL v41 = (void *)*a4;
    memset(&v52, 0, sizeof(v52));
    std::string::append(&v52, "{ ", 2uLL);
    if (v41 != v9)
    {
      while (1)
      {
        std::to_string(&v58, *((_DWORD *)v41 + 7));
        if ((v58.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v42 = &v58;
        }
        else {
          uint64_t v42 = (std::string *)v58.__r_.__value_.__r.__words[0];
        }
        if ((v58.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type size = v58.__r_.__value_.__s.__size_;
        }
        else {
          std::string::size_type size = v58.__r_.__value_.__l.__size_;
        }
        std::string::append(&v52, (const std::string::value_type *)v42, size);
        uint64_t v44 = (void *)v41[1];
        if (v44)
        {
          do
          {
            uint64_t v45 = v44;
            uint64_t v44 = (void *)*v44;
          }

          while (v44);
        }

        else
        {
          do
          {
            uint64_t v45 = (void *)v41[2];
            BOOL v18 = *v45 == (void)v41;
            BOOL v41 = v45;
          }

          while (!v18);
        }

        if (v45 == v9) {
          break;
        }
        std::string::append(&v52, ", ", 2uLL);
        BOOL v41 = v45;
      }
    }

    std::string::append(&v52, " }", 2uLL);
    uint64_t v46 = v53;
    if (v39 < 0) {
      uint64_t v46 = v40;
    }
    if ((v52.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v47 = &v52;
    }
    else {
      uint64_t v47 = (std::string *)v52.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 4012;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&buf[20] = v46;
    __int16 v60 = 2080;
    std::string::size_type v61 = v47;
    _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Redundant modification (%s) of alt vad disable policy for type %s",  buf,  0x26u);
    if (v54 < 0)
    {
      uint64_t v28 = (void *)v53[0];
      goto LABEL_36;
    }
  }

LABEL_76:
  sub_32C8C(*(void **)&v55[8]);
  if (v51) {
    (*(void (**)(void))(qword_48F828 + 24))();
  }
}

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (!a3[2])
  {
    uint64_t v40 = (os_log_t *)sub_138E8(13);
    BOOL v41 = *v40;
    if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v46 = "SubPortPolicy.cpp";
      uint64_t v47 = 1024;
      CFTypeRef v48 = 119;
      _os_log_impl(&dword_0, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    goto LABEL_76;
  }

  if (!a3[5])
  {
    uint64_t v42 = (os_log_t *)sub_138E8(13);
    uint64_t v43 = *v42;
    if (*v42 && os_log_type_enabled(*v42, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v46 = "SubPortPolicy.cpp";
      uint64_t v47 = 1024;
      CFTypeRef v48 = 120;
      _os_log_impl(&dword_0, v43, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    goto LABEL_76;
  }

  sub_2DE074(*(unsigned int *)(a1 + 56));
  return a1;
}

void sub_13A424( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, void *a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, int a31, __int16 a32, char a33, char a34, char a35)
{
  if (a11) {
    (*(void (**)(void))(qword_48F828 + 24))();
  }
  _Unwind_Resume(a1);
}

__n128 sub_13A4FC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, __n128 *a6)
{
  uint64_t v8 = *(void **)a2;
  unint64_t v9 = (void *)*a3;
  if (*(void *)a2 == *a3)
  {
LABEL_38:
    __n128 v30 = *a6;
    goto LABEL_39;
  }

  for (uint64_t i = *(void **)a4; *(void *)a4 != *a5; uint64_t i = *(void **)a4)
  {
    int v15 = *((_DWORD *)v8 + 7);
    int v16 = *((_DWORD *)i + 7);
    if (v15 >= v16)
    {
      if (v16 >= v15)
      {
        __int128 v23 = (void *)v8[1];
        if (v23)
        {
          do
          {
            __int128 v24 = v23;
            __int128 v23 = (void *)*v23;
          }

          while (v23);
        }

        else
        {
          do
          {
            __int128 v24 = (void *)v8[2];
            BOOL v20 = *v24 == (void)v8;
            uint64_t v8 = v24;
          }

          while (!v20);
        }

        *(void *)a2 = v24;
        uint64_t v25 = *(void **)a4;
        uint64_t v26 = *(void **)(*(void *)a4 + 8LL);
        if (v26)
        {
          do
          {
            uint64_t v22 = v26;
            uint64_t v26 = (void *)*v26;
          }

          while (v26);
        }

        else
        {
          do
          {
            uint64_t v22 = (void *)v25[2];
            BOOL v20 = *v22 == (void)v25;
            uint64_t v25 = v22;
          }

          while (!v20);
        }
      }

      else
      {
        unint64_t v21 = (void *)i[1];
        if (v21)
        {
          do
          {
            uint64_t v22 = v21;
            unint64_t v21 = (void *)*v21;
          }

          while (v21);
        }

        else
        {
          do
          {
            uint64_t v22 = (void *)i[2];
            BOOL v20 = *v22 == (void)i;
            uint64_t i = v22;
          }

          while (!v20);
        }
      }

      *(void *)a4 = v22;
    }

    else
    {
      sub_13A930((uint64_t)a6, v15);
      uint64_t v17 = *(void **)a2;
      BOOL v18 = *(void **)(*(void *)a2 + 8LL);
      if (v18)
      {
        do
        {
          int v19 = v18;
          BOOL v18 = (void *)*v18;
        }

        while (v18);
      }

      else
      {
        do
        {
          int v19 = (void *)v17[2];
          BOOL v20 = *v19 == (void)v17;
          uint64_t v17 = v19;
        }

        while (!v20);
      }

      *(void *)a2 = v19;
    }

    uint64_t v8 = *(void **)a2;
    unint64_t v9 = (void *)*a3;
    if (*(void *)a2 == *a3) {
      goto LABEL_38;
    }
  }

  __n128 v30 = *a6;
  if (v8 != v9)
  {
    do
    {
      sub_13A930((uint64_t)&v30, *((_DWORD *)v8 + 7));
      unint64_t v27 = (void *)v8[1];
      if (v27)
      {
        do
        {
          uint64_t v28 = v27;
          unint64_t v27 = (void *)*v27;
        }

        while (v27);
      }

      else
      {
        do
        {
          uint64_t v28 = (void *)v8[2];
          BOOL v20 = *v28 == (void)v8;
          uint64_t v8 = v28;
        }

        while (!v20);
      }

      uint64_t v8 = v28;
    }

    while (v28 != v9);
    uint64_t v8 = v9;
  }

uint64_t *sub_13A6E8(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    unint64_t v4 = a2;
    unint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      __n128 result = sub_13A76C(v5, v6, *((_DWORD *)v4 + 7), *((_DWORD *)v4 + 7));
      BOOL v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          BOOL v7 = (void *)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          unint64_t v4 = v8;
        }

        while (!v9);
      }

      unint64_t v4 = v8;
    }

    while (v8 != a3);
  }

  return result;
}

uint64_t *sub_13A76C(uint64_t **a1, uint64_t *a2, int a3, int a4)
{
  unint64_t v5 = a2;
  BOOL v7 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2 || (int v8 = *((_DWORD *)a2 + 7), v8 > a3))
  {
    uint64_t v9 = *a2;
    if (*a1 == a2)
    {
      int v11 = a2;
LABEL_16:
      if (v9) {
        uint64_t v14 = (uint64_t **)v11;
      }
      else {
        uint64_t v14 = (uint64_t **)a2;
      }
      if (v9) {
        int v12 = (void **)(v11 + 1);
      }
      else {
        int v12 = (void **)a2;
      }
      goto LABEL_22;
    }

    if (v9)
    {
      uint64_t v10 = (uint64_t *)*a2;
      do
      {
        int v11 = v10;
        uint64_t v10 = (uint64_t *)v10[1];
      }

      while (v10);
    }

    else
    {
      int v16 = a2;
      do
      {
        int v11 = (uint64_t *)v16[2];
        BOOL v17 = *v11 == (void)v16;
        int v16 = v11;
      }

      while (v17);
    }

    if (*((_DWORD *)v11 + 7) < a3) {
      goto LABEL_16;
    }
    BOOL v18 = *v7;
    if (*v7)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v14 = (uint64_t **)v18;
          int v19 = *((_DWORD *)v18 + 7);
          if (v19 <= a3) {
            break;
          }
          BOOL v18 = *v14;
          BOOL v7 = v14;
          if (!*v14) {
            goto LABEL_44;
          }
        }

        if (v19 >= a3) {
          break;
        }
        BOOL v7 = v14 + 1;
        BOOL v18 = v14[1];
        if (!v18) {
          goto LABEL_44;
        }
      }

uint64_t sub_13A930(uint64_t a1, int a2)
{
  unint64_t v3 = sub_13A76C(*(uint64_t ***)a1, *(uint64_t **)(a1 + 8), a2, a2);
  *(void *)(a1 + 8) = v3;
  unint64_t v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      unint64_t v5 = v4;
      unint64_t v4 = (uint64_t *)*v4;
    }

    while (v4);
  }

  else
  {
    do
    {
      unint64_t v5 = (uint64_t *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      unint64_t v3 = v5;
    }

    while (!v6);
  }

  *(void *)(a1 + 8) = v5;
  return a1;
}

uint64_t sub_13A998(uint64_t a1, int a2)
{
  int v4 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  sub_6DD4();
  uint64_t result = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 48))(&qword_48F828);
  if ((result & 1) == 0)
  {
    int v16 = (os_log_t *)sub_138E8(13);
    BOOL v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v19 = 136315394;
      BOOL v20 = "RoutingManager.cpp";
      __int16 v21 = 1024;
      int v22 = 4036;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to acquire routing mutex.",  (uint8_t *)&v19,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to acquire routing mutex.");
  }

  BOOL v6 = (uint64_t **)(a1 + 536);
  BOOL v7 = *(uint64_t **)(a1 + 536);
  if (v7)
  {
    uint64_t v8 = a1 + 536;
    uint64_t v9 = *(void *)(a1 + 536);
    do
    {
      int v10 = *(_DWORD *)(v9 + 28);
      BOOL v11 = v10 < a2;
      if (v10 >= a2) {
        int v12 = (uint64_t *)v9;
      }
      else {
        int v12 = (uint64_t *)(v9 + 8);
      }
      if (!v11) {
        uint64_t v8 = v9;
      }
      uint64_t v9 = *v12;
    }

    while (*v12);
    if ((uint64_t **)v8 == v6 || *(_DWORD *)(v8 + 28) > a2)
    {
      while (1)
      {
        while (1)
        {
          int v13 = (uint64_t **)v7;
          int v14 = *((_DWORD *)v7 + 7);
          if (v14 <= a2) {
            break;
          }
          BOOL v7 = *v13;
          BOOL v6 = v13;
          if (!*v13) {
            goto LABEL_19;
          }
        }

        if (v14 >= a2) {
          break;
        }
        BOOL v7 = v13[1];
        if (!v7)
        {
          BOOL v6 = v13 + 1;
          goto LABEL_19;
        }
      }
    }
  }

  else
  {
    int v13 = (uint64_t **)(a1 + 536);
LABEL_19:
    int v15 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v15 + 7) = a2;
    uint64_t result = (uint64_t)sub_32C38((uint64_t **)(a1 + 528), (uint64_t)v13, v6, v15);
  }

  if (v4) {
    return (*(uint64_t (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  }
  return result;
}

void sub_13AB8C(_Unwind_Exception *a1)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
  }
  _Unwind_Resume(a1);
}

void sub_13ABDC(void *a1, int a2)
{
  int v4 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  sub_6DD4();
  if (((*(uint64_t (**)(uint64_t *))(qword_48F828 + 48))(&qword_48F828) & 1) == 0)
  {
    int v15 = (os_log_t *)sub_138E8(13);
    int v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315394;
      int v19 = "RoutingManager.cpp";
      __int16 v20 = 1024;
      int v21 = 4051;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to acquire routing mutex.",  (uint8_t *)&v18,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to acquire routing mutex.");
  }

  unint64_t v5 = (uint64_t *)a1[67];
  if (v5)
  {
    BOOL v6 = a1 + 67;
    uint64_t v7 = a1[67];
    do
    {
      int v8 = *(_DWORD *)(v7 + 28);
      BOOL v9 = v8 < a2;
      if (v8 >= a2) {
        int v10 = (uint64_t *)v7;
      }
      else {
        int v10 = (uint64_t *)(v7 + 8);
      }
      if (!v9) {
        BOOL v6 = (void *)v7;
      }
      uint64_t v7 = *v10;
    }

    while (*v10);
    if (v6 != a1 + 67 && *((_DWORD *)v6 + 7) <= a2)
    {
      BOOL v11 = (void *)v6[1];
      if (v11)
      {
        do
        {
          int v12 = v11;
          BOOL v11 = (void *)*v11;
        }

        while (v11);
      }

      else
      {
        int v13 = v6;
        do
        {
          int v12 = (void *)v13[2];
          BOOL v14 = *v12 == (void)v13;
          int v13 = v12;
        }

        while (!v14);
      }

      if ((void *)a1[66] == v6) {
        a1[66] = v12;
      }
      --a1[68];
      sub_911E8(v5, v6);
      operator delete(v6);
    }
  }

  if (v4) {
    (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  }
}

void sub_13ADCC(_Unwind_Exception *a1)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_13AE18(uint64_t *a1, uint64_t a2)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  sub_13A6E8(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_13AE54(_Unwind_Exception *a1)
{
}

void sub_13AE68(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_13AEB8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

uint64_t *sub_13AECC(uint64_t *a1, CFStringRef **a2)
{
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  sub_13AF1C(a1, *a2, a2 + 1);
  return a1;
}

void sub_13AF08(_Unwind_Exception *a1)
{
}

uint64_t *sub_13AF1C(uint64_t *result, CFStringRef *a2, CFStringRef **a3)
{
  if (a2 != (CFStringRef *)a3)
  {
    int v4 = a2;
    unint64_t v5 = (uint64_t **)result;
    uint64_t v6 = (uint64_t)(result + 1);
    do
    {
      uint64_t result = sub_135620(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      uint64_t v7 = (CFStringRef *)v4[1];
      if (v7)
      {
        do
        {
          int v8 = (CFStringRef **)v7;
          uint64_t v7 = (CFStringRef *)*v7;
        }

        while (v7);
      }

      else
      {
        do
        {
          int v8 = (CFStringRef **)v4[2];
          BOOL v9 = *v8 == v4;
          int v4 = (CFStringRef *)v8;
        }

        while (!v9);
      }

      int v4 = (CFStringRef *)v8;
    }

    while (v8 != a3);
  }

  return result;
}

BOOL sub_13AFA0(uint64_t a1, int a2)
{
  int v4 = (*(uint64_t (**)(uint64_t *))(qword_48F828 + 16))(&qword_48F828);
  sub_6DD4();
  if (((*(uint64_t (**)(uint64_t *))(qword_48F828 + 48))(&qword_48F828) & 1) == 0)
  {
    int v12 = (os_log_t *)sub_138E8(13);
    int v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315394;
      int v16 = "RoutingManager.cpp";
      __int16 v17 = 1024;
      int v18 = 4106;
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to acquire routing mutex.",  (uint8_t *)&v15,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to acquire routing mutex.");
  }

  uint64_t v5 = a1 + 536;
  uint64_t v6 = *(void *)(a1 + 536);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = a1 + 536;
  do
  {
    int v8 = *(_DWORD *)(v6 + 28);
    BOOL v9 = v8 < a2;
    if (v8 >= a2) {
      int v10 = (uint64_t *)v6;
    }
    else {
      int v10 = (uint64_t *)(v6 + 8);
    }
    if (!v9) {
      uint64_t v7 = v6;
    }
    uint64_t v6 = *v10;
  }

  while (*v10);
  if (v7 == v5 || *(_DWORD *)(v7 + 28) > a2) {
LABEL_12:
  }
    uint64_t v7 = v5;
  if (v4) {
    (*(void (**)(uint64_t *))(qword_48F828 + 24))(&qword_48F828);
  }
  return v7 != v5;
}

void sub_13B13C(_Unwind_Exception *a1)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_13B188(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v2 = a1 + 8;
  uint64_t v3 = v4;
  if (!v4) {
    return 0LL;
  }
  unsigned int v6 = *(_DWORD *)(a2 + 64);
  uint64_t v7 = v2;
  do
  {
    unsigned int v8 = *(_DWORD *)(v3 + 32);
    BOOL v9 = v8 >= v6;
    if (v8 >= v6) {
      int v10 = (uint64_t *)v3;
    }
    else {
      int v10 = (uint64_t *)(v3 + 8);
    }
    if (v9) {
      uint64_t v7 = v3;
    }
    uint64_t v3 = *v10;
  }

  while (*v10);
  if (v7 == v2 || v6 < *(_DWORD *)(v7 + 32)) {
    return 0LL;
  }
  uint64_t v13 = v7 + 40;
  uint64_t v14 = *(void *)(v7 + 48);
  if (v14 == v7 + 40)
  {
    uint64_t v11 = 0LL;
  }

  else
  {
    do
    {
      uint64_t v11 = sub_71CD0((void *)a2, v14 + 16);
      if ((v11 & 1) != 0) {
        break;
      }
      uint64_t v14 = *(void *)(v14 + 8);
    }

    while (v14 != v13);
  }

  uint64_t v15 = sub_138E8(8);
  if ((*(_BYTE *)(v15 + 8) & 1) != 0)
  {
    int v16 = *(os_log_s **)v15;
    if (*(void *)v15)
    {
      if (os_log_type_enabled(*(os_log_t *)v15, OS_LOG_TYPE_DEBUG))
      {
        sub_2CA1C(v28, *(unsigned int *)(a2 + 64));
        if (v29 >= 0) {
          __int16 v17 = v28;
        }
        else {
          __int16 v17 = (void **)v28[0];
        }
        sub_2CA1C(v26, *(unsigned int *)(*(void *)(a2 + 80) + 16LL));
        int v18 = v27;
        int v19 = (void **)v26[0];
        unsigned int v20 = *(_DWORD *)a2;
        v24[0] = 1987011684;
        v24[1] = v20;
        sub_33464(&__p, v24);
        int v21 = v26;
        char v31 = "RoutingManager.cpp";
        if (v18 < 0) {
          int v21 = v19;
        }
        int v22 = "does not";
        if ((_DWORD)v11) {
          int v22 = "does";
        }
        __int16 v32 = 1024;
        int v33 = 4125;
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136316418;
        __int16 v34 = 2080;
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_p = &__p;
        }
        char v35 = v17;
        __int16 v36 = 2080;
        uint64_t v37 = v21;
        __int16 v38 = 2080;
        int v39 = v22;
        __int16 v40 = 2080;
        BOOL v41 = p_p;
        _os_log_impl(&dword_0, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Category %s and mode %s %s support %s", buf, 0x3Au);
        if (v27 < 0) {
          operator delete(v26[0]);
        }
        if (v29 < 0) {
          operator delete(v28[0]);
        }
      }
    }
  }

  return v11;
}

void sub_13B3C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (v22 < 0) {
    operator delete(v21);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_13B3F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = *(void **)(a2 + 152);
  uint64_t v5 = (void *)(a2 + 160);
  v26[0] = (uint64_t **)a1;
  v26[1] = (uint64_t **)(a1 + 8);
  if (v4 != (void *)(a2 + 160))
  {
    do
    {
      uint64_t v7 = (std::__shared_weak_count *)v4[5];
      if (!v7 || (unsigned int v8 = std::__shared_weak_count::lock(v7)) == 0LL)
      {
LABEL_18:
        uint64_t v15 = sub_138E8(23);
        uint64_t v16 = sub_138E8(8);
        char v17 = 0;
        uint64_t v18 = 0LL;
        *(void *)buf = 0x100000002LL;
        uint64_t v19 = *(void *)(v15 + 8);
        while (1)
        {
          uint64_t v20 = *(int *)&buf[4 * v18];
          char v21 = v17;
          if (((v19 & v20) != 0) != ((*(void *)(v16 + 8) & v20) != 0)) {
            break;
          }
          char v17 = 1;
          uint64_t v18 = 1LL;
          if ((v21 & 1) != 0) {
            goto LABEL_24;
          }
        }

        if ((v19 & v20) == 0) {
          uint64_t v15 = v16;
        }
LABEL_24:
        int v22 = *(os_log_s **)v15;
        if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
          __int16 v28 = 1024;
          int v29 = 4218;
          _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Previously specified port for override in cache has expired.",  buf,  0x12u);
        }

        goto LABEL_27;
      }

      BOOL v9 = v8;
      uint64_t v10 = v4[4];
      if (v10)
      {
        if (sub_FA870(*(void **)(a3 + 8), (void *)a3, v4 + 4) == (void *)a3) {
          char v3 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 152LL))(v10);
        }
        else {
          char v3 = 0;
        }
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          unint64_t v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (v14) {
          goto LABEL_16;
        }
      }

      else
      {
        uint64_t v11 = (unint64_t *)&v8->__shared_owners_;
        do
          unint64_t v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (v12) {
          goto LABEL_18;
        }
      }

      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (!v10) {
        goto LABEL_18;
      }
LABEL_16:
      if ((v3 & 1) != 0) {
        sub_103A38(v26, v4 + 4);
      }
LABEL_27:
      __int128 v23 = (void *)v4[1];
      if (v23)
      {
        do
        {
          __int128 v24 = v23;
          __int128 v23 = (void *)*v23;
        }

        while (v23);
      }

      else
      {
        do
        {
          __int128 v24 = (void *)v4[2];
          BOOL v25 = *v24 == (void)v4;
          uint64_t v4 = v24;
        }

        while (!v25);
      }

      uint64_t v4 = v24;
    }

    while (v24 != v5);
  }

void sub_13B660(_Unwind_Exception *a1)
{
  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    unint64_t v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }

  sub_FF3B8(*v2);
  _Unwind_Resume(a1);
}

void sub_13B6B0(uint64_t **a1, unsigned int a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 1);
  char v3 = a1[1];
  if (v3)
  {
    unint64_t v5 = v4;
    unsigned int v6 = v3;
    do
    {
      unsigned int v7 = *((_DWORD *)v6 + 7);
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        BOOL v9 = (uint64_t **)v6;
      }
      else {
        BOOL v9 = (uint64_t **)(v6 + 1);
      }
      if (v8) {
        unint64_t v5 = v6;
      }
      unsigned int v6 = *v9;
    }

    while (*v9);
    if (v5 != v4 && *((_DWORD *)v5 + 7) <= a2)
    {
      uint64_t v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = (uint64_t *)*v10;
        }

        while (v10);
      }

      else
      {
        unint64_t v12 = v5;
        do
        {
          uint64_t v11 = (uint64_t *)v12[2];
          BOOL v13 = *v11 == (void)v12;
          unint64_t v12 = v11;
        }

        while (!v13);
      }

      if (*a1 == v5) {
        *a1 = v11;
      }
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      sub_911E8(v3, v5);
      operator delete(v5);
    }
  }

uint64_t sub_13B774(uint64_t a1, CFStringRef *a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    CFComparisonResult v6 = CFStringCompare(*(CFStringRef *)(v3 + 32), *a2, 0LL);
    unsigned int v7 = (uint64_t *)(v3 + 8);
    if (v6 != kCFCompareLessThan)
    {
      unsigned int v7 = (uint64_t *)v3;
      uint64_t v5 = v3;
    }

    uint64_t v3 = *v7;
  }

  while (*v7);
  if (v5 == v2 || CFStringCompare(*a2, *(CFStringRef *)(v5 + 32), 0LL) == kCFCompareLessThan) {
    return v2;
  }
  return v5;
}

uint64_t sub_13B7F8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = sub_9EB48();
  sub_1A06BC((uint64_t)&v15, v4, 0);
  uint64_t v5 = v15;
  int v20 = 1885500772;
  CFDictionaryRef v18 = 0LL;
  *(void *)bytes = v15;
  sub_149D44((uint64_t)&v21, &v20);
  CFDataRef v6 = CFDataCreate(0LL, bytes, 8LL);
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  sub_14591C(&cf, v6);
  sub_149E14((uint64_t)v23, &cf);
  v17[0] = &v21;
  v17[1] = 2LL;
  CFDictionaryRef v7 = sub_5A950((uint64_t)v17);
  uint64_t v8 = 0LL;
  CFDictionaryRef v18 = v7;
  do
  {
    BOOL v9 = *(const void **)&v23[v8 + 8];
    if (v9) {
      CFRelease(v9);
    }
    uint64_t v10 = *(const void **)&v23[v8];
    if (v10) {
      CFRelease(v10);
    }
    v8 -= 16LL;
  }

  while (v8 != -32);
  if (cf) {
    CFRelease(cf);
  }
  sub_2DC034((uint64_t)v17, v7);
  int v21 = 1735553138;
  sub_2DC450((uint64_t)&v22, (uint64_t)v17);
  sub_149710((uint64_t)__p, &v21, 1LL);
  sub_2DBF5C((uint64_t)&v22);
  sub_2DBF5C((uint64_t)v17);
  CFRelease(v7);
  sub_392DEC(a3, (uint64_t)__p);
  sub_D0C4C((void *)__p[2]);
  uint64_t v11 = __p[0];
  __p[0] = 0LL;
  if (v11) {
    operator delete(v11);
  }
  if (v5) {
    CFRelease(v5);
  }
  return 0LL;
}

void sub_13B9CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, const void *a22)
{
}

uint64_t sub_13BA90(CFTypeRef *a1, const void **a2, uint64_t *a3)
{
  CFDataRef v6 = (const __CFDictionary *)*a1;
  if (*a1) {
    CFRetain(*a1);
  }
  uint64_t v47 = v6;
  sub_7D084(&v46, "ConfigName");
  sub_7D084(&__p, "-aufx-firf-appl");
  if (v6)
  {
    CFDictionaryRef v7 = (const __CFString *)sub_1477B0(v6, (const UInt8 *)&v46);
    if (v7)
    {
      sub_7D2D4((CFTypeID)&v43, v7);
      if (v44)
      {
        if (((char)v43.__pn_.__r_.__value_.__s.__size_ & 0x80000000) == 0)
        {
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&v43.__pn_.__r_.__value_.__l.__data_;
          std::string::size_type cap = v43.__pn_.__r_.__value_.__l.__cap_;
LABEL_10:
          __dst.__r_.__value_.__l.__cap_ = cap;
          goto LABEL_16;
        }

        BOOL v9 = (void *)v43.__pn_.__r_.__value_.__r.__words[0];
        sub_24054(&__dst, v43.__pn_.__r_.__value_.__l.__data_, v43.__pn_.__r_.__value_.__l.__size_);
        if (v44) {
          operator delete(v9);
        }
        goto LABEL_16;
      }
    }

    else
    {
      v43.__pn_.__r_.__value_.__s.__data_[0] = 0;
      char v44 = 0;
    }

    std::string __dst = __p;
    memset(&__p, 0, sizeof(__p));
    goto LABEL_16;
  }

  if (((char)__p.__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    std::string::size_type cap = __p.__r_.__value_.__l.__cap_;
    goto LABEL_10;
  }

  sub_24054(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
LABEL_16:
  if (((char)v46.__pn_.__r_.__value_.__s.__size_ & 0x80000000) == 0)
  {
    if (!v6) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }

  operator delete(v46.__pn_.__r_.__value_.__l.__data_);
  if (v6) {
LABEL_22:
  }
    CFRelease(v6);
LABEL_23:
  sub_14A9A0((uint64_t)&__p, a2, (const void **)&__dst.__r_.__value_.__l.__data_);
  uint64_t v10 = std::string::append(&__p, ".plist", 6uLL);
  std::string::size_type v11 = v10->__r_.__value_.__r.__words[0];
  *(void *)&__int128 valuePtr = v10->__r_.__value_.__l.__size_;
  *(void *)((char *)&valuePtr + 7) = *(std::string::size_type *)((char *)&v10->__r_.__value_.__r.__words[1] + 7);
  unsigned __int8 size = v10->__r_.__value_.__s.__size_;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  *(std::string::size_type *)((char *)&v46.__pn_.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)&valuePtr + 7);
  v46.__pn_.__r_.__value_.__r.__words[0] = v11;
  v46.__pn_.__r_.__value_.__l.__size_ = valuePtr;
  v46.__pn_.__r_.__value_.__s.__size_ = size;
  sub_83AA0(&v43, (uint64_t)(a2 + 6), &v46);
  if ((char)v43.__pn_.__r_.__value_.__s.__size_ < 0)
  {
    sub_24054(&v45, v43.__pn_.__r_.__value_.__l.__data_, v43.__pn_.__r_.__value_.__l.__size_);
  }

  else
  {
    std::__fs::filesystem::path v45 = v43;
  }

  if ((v45.__pn_.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    BOOL v13 = &v45;
  }
  else {
    BOOL v13 = (std::__fs::filesystem::path *)v45.__pn_.__r_.__value_.__r.__words[0];
  }
  if (v13)
  {
    if ((v45.__pn_.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      CFIndex v14 = v45.__pn_.__r_.__value_.__s.__size_;
    }
    else {
      CFIndex v14 = v45.__pn_.__r_.__value_.__l.__size_;
    }
    CFStringRef v15 = CFStringCreateWithBytes(0LL, (const UInt8 *)v13, v14, 0x8000100u, 0);
    if (!v15)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }

  else
  {
    CFStringRef v15 = 0LL;
  }

  LODWORD(valuePtr) = 1718186608;
  __p.__r_.__value_.__r.__words[0] = 0LL;
  sub_149D44((uint64_t)&__dst, (int *)&valuePtr);
  sub_59370((CFStringRef *)&__dst.__r_.__value_.__l.__cap_, "cfobject");
  if (v15) {
    CFRetain(v15);
  }
  v51[0] = v15;
  v46.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
  v46.__pn_.__r_.__value_.__l.__size_ = 2LL;
  CFDictionaryRef v17 = sub_5A950((uint64_t)&v46);
  uint64_t v18 = 0LL;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
  do
  {
    uint64_t v19 = (const void *)v51[v18];
    if (v19) {
      CFRelease(v19);
    }
    int v20 = *(const void **)((char *)&__dst.__r_.__value_.__l.__cap_ + v18 * 8);
    if (v20) {
      CFRelease(v20);
    }
    v18 -= 2LL;
  }

  while (v18 != -4);
  sub_2DC034((uint64_t)&v46, v17);
  LODWORD(__dst.__r_.__value_.__l.__data_) = 1735553138;
  sub_2DC450((uint64_t)&__dst.__r_.__value_.__l.__size_, (uint64_t)&v46);
  sub_149710((uint64_t)&v43, (int *)&__dst, 1LL);
  sub_2DBF5C((uint64_t)&__dst.__r_.__value_.__l.__size_);
  sub_2DBF5C((uint64_t)&v46);
  CFRelease(v17);
  sub_392DEC(a3, (uint64_t)&v43);
  sub_D0C4C((void *)v43.__pn_.__r_.__value_.__l.__cap_);
  int v21 = (void *)v43.__pn_.__r_.__value_.__r.__words[0];
  v43.__pn_.__r_.__value_.__r.__words[0] = 0LL;
  if (v21) {
    operator delete(v21);
  }
  if (v15) {
    CFRelease(v15);
  }
  CFTypeRef v22 = *a1;
  if (v22) {
    CFRetain(v22);
  }
  CFTypeRef v41 = v22;
  sub_7D084(&__p, "VPMicIndex");
  memset(&v46, 0, sizeof(v46));
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
  __dst.__r_.__value_.__s.__data_[8] = 0;
  v46.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v46.__pn_.__r_.__value_.__l.__size_ = v46.__pn_.__r_.__value_.__r.__words[0];
  v46.__pn_.__r_.__value_.__l.__cap_ = v46.__pn_.__r_.__value_.__r.__words[0] + 24;
  v46.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)sub_14AA58( (uint64_t)&v46.__pn_.__r_.__value_.__l.__cap_,  (__int128 *)&__p,  (__int128 *)&__dst,  v46.__pn_.__r_.__value_.__l.__data_);
  LODWORD(valuePtr) = 0;
  CFNumberRef v23 = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
  CFNumberRef v40 = v23;
  if (!v23)
  {
    int v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v39, "Could not construct");
  }

  if (!v22) {
    goto LABEL_73;
  }
  CFRetain(v22);
  CFRetain(v22);
  std::string::size_type v25 = v46.__pn_.__r_.__value_.__l.__size_;
  __int128 v24 = (const UInt8 *)v46.__pn_.__r_.__value_.__r.__words[0];
  uint64_t v26 = v22;
  if (v46.__pn_.__r_.__value_.__r.__words[0] != v46.__pn_.__r_.__value_.__l.__size_)
  {
    uint64_t v26 = v22;
    if (v46.__pn_.__r_.__value_.__r.__words[0] != v46.__pn_.__r_.__value_.__l.__size_ - 24)
    {
      char v27 = (const __CFDictionary *)v22;
      while (1)
      {
        __int16 v28 = sub_1477B0(v27, v24);
        if (!v28) {
          break;
        }
        uint64_t v26 = v28;
        CFRetain(v28);
        CFTypeID v29 = CFGetTypeID(v26);
        if (v29 != CFDictionaryGetTypeID())
        {
          CFRelease(v26);
          break;
        }

        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
        __dst.__r_.__value_.__s.__data_[8] = 1;
        CFRetain(v26);
        CFRelease(v27);
        sub_8D530((uint64_t)&__dst);
        v24 += 24;
        if (v24 != (const UInt8 *)v25)
        {
          char v27 = (const __CFDictionary *)v26;
          if (v24 != (const UInt8 *)(v46.__pn_.__r_.__value_.__l.__size_ - 24)) {
            continue;
          }
        }

        goto LABEL_69;
      }

      __dst.__r_.__value_.__s.__data_[0] = 0;
      __dst.__r_.__value_.__s.__data_[8] = 0;
      sub_8D530((uint64_t)&__dst);
      CFRelease(v27);
      uint64_t v26 = 0LL;
    }
  }

void sub_13C218( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20, char a21, char a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, uint64_t a30, void *__p, uint64_t a32, int a33, __int16 a34, char a35, char a36, uint64_t a37, void *a38, uint64_t a39, int a40, __int16 a41, char a42, char a43, char a44, uint64_t a45, void *a46, uint64_t a47, int a48, __int16 a49, char a50,char a51)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

uint64_t sub_13C4A8(CFTypeRef *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = (const __CFDictionary *)*a1;
  if (*a1) {
    CFRetain(*a1);
  }
  __n128 v30 = v5;
  sub_7D084(__p, "BeamIndex");
  unint64_t v6 = sub_146960(&v30, (const UInt8 *)__p);
  if (SHIBYTE(v34) < 0)
  {
    operator delete(__p[0]);
    if (!v5) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  if (v5) {
LABEL_7:
  }
    CFRelease(v5);
LABEL_8:
  if (HIDWORD(v6)) {
    float v7 = (float)v6;
  }
  else {
    float v7 = 1.0;
  }
  if (!sub_D01B4(a3, 1685086576))
  {
    int v31 = 9;
    uint64_t v32 = LODWORD(v7);
    int v38 = 1651074168;
    sub_2DC450((uint64_t)v39, (uint64_t)&v31);
    sub_149710((uint64_t)__p, &v38, 1LL);
    sub_2DC194((uint64_t)v35, (uint64_t)__p);
    LODWORD(v36) = 1685086576;
    sub_2DC450((uint64_t)v37, (uint64_t)v35);
    sub_148DB8((uint64_t)a3, (int)v36, &v36);
    sub_2DBF5C((uint64_t)v37);
    sub_2DBF5C((uint64_t)v35);
    sub_D0C4C(v34);
    BOOL v13 = __p[0];
    __p[0] = 0LL;
    if (v13) {
      operator delete(v13);
    }
    sub_2DBF5C((uint64_t)v39);
    CFIndex v14 = &v31;
    goto LABEL_55;
  }

  uint64_t v8 = sub_149814(*a3, a3[1], 1685086576);
  BOOL v9 = (void *)sub_2DD160((int *)v8 + 6);
  uint64_t v10 = (uint64_t)v9;
  LODWORD(v36) = 9;
  v37[0] = LODWORD(v7);
  unint64_t v11 = v9[1];
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      uint64_t v3 = 1651074168LL;
      if (v11 <= 0x62696478) {
        uint64_t v3 = 0x62696478 % v11;
      }
    }

    else
    {
      uint64_t v3 = ((_DWORD)v11 - 1) & 0x62696478;
    }

    CFStringRef v15 = *(CFTypeRef ***)(*v9 + 8 * v3);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = (CFTypeRef *)*i)
      {
        unint64_t v17 = (unint64_t)i[1];
        if (v17 == 1651074168)
        {
          if (*((_DWORD *)i + 4) == 1651074168)
          {
            sub_2DC544(i + 3, &v36);
            goto LABEL_54;
          }
        }

        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
          }

          else
          {
            v17 &= v11 - 1;
          }

          if (v17 != v3) {
            break;
          }
        }
      }
    }
  }

  uint64_t v18 = operator new(0x28uLL);
  uint64_t v19 = (void *)(v10 + 16);
  __p[0] = v18;
  __p[1] = (void *)(v10 + 16);
  LOBYTE(v34) = 0;
  *(void *)uint64_t v18 = 0LL;
  *((void *)v18 + 1) = 1651074168LL;
  *((_DWORD *)v18 + 4) = 1651074168;
  sub_2DC450((uint64_t)v18 + 24, (uint64_t)&v36);
  LOBYTE(v34) = 1;
  float v20 = (float)(unint64_t)(*(void *)(v10 + 24) + 1LL);
  float v21 = *(float *)(v10 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1LL;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    sub_52168(v10, v25);
    unint64_t v11 = *(void *)(v10 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v11 <= 0x62696478) {
        uint64_t v3 = 0x62696478 % v11;
      }
      else {
        uint64_t v3 = 1651074168LL;
      }
    }

    else
    {
      uint64_t v3 = ((_DWORD)v11 - 1) & 0x62696478;
    }
  }

  uint64_t v26 = *(void *)v10;
  char v27 = *(void **)(*(void *)v10 + 8 * v3);
  if (v27)
  {
    *(void *)uint64_t v18 = *v27;
  }

  else
  {
    *(void *)uint64_t v18 = *v19;
    *uint64_t v19 = v18;
    *(void *)(v26 + 8 * v3) = v19;
    if (!*(void *)v18) {
      goto LABEL_53;
    }
    unint64_t v28 = *(void *)(*(void *)v18 + 8LL);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }

    else
    {
      v28 &= v11 - 1;
    }

    char v27 = (void *)(*(void *)v10 + 8 * v28);
  }

  *char v27 = v18;
LABEL_53:
  __p[0] = 0LL;
  ++*(void *)(v10 + 24);
  sub_D171C((uint64_t)__p);
LABEL_54:
  CFIndex v14 = (int *)&v36;
LABEL_55:
  sub_2DBF5C((uint64_t)v14);
  return 0LL;
}

void sub_13C880( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2)
  {
    sub_D171C((uint64_t)&__p);
    sub_7A0E8(exception_object);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_13C8E0(CFTypeRef *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = (const __CFDictionary *)*a1;
  if (*a1) {
    CFRetain(*a1);
  }
  CFNumberRef v40 = v5;
  sub_7D084(&__p, "FixedGains");
  if (!v5) {
    goto LABEL_31;
  }
  unint64_t v6 = sub_1477B0(v5, (const UInt8 *)&__p);
  if (!v6) {
    goto LABEL_31;
  }
  float v7 = v6;
  CFTypeID TypeID = CFArrayGetTypeID();
  if (TypeID != CFGetTypeID(v7)) {
    goto LABEL_31;
  }
  int Count = CFArrayGetCount((CFArrayRef)v7);
  memset(buf, 0, 24);
  sub_1475A4((void **)buf, Count);
  if (Count <= 0)
  {
    int v24 = 1;
    BOOL v13 = *(char **)buf;
    uint64_t v3 = *(void *)&buf[8];
    goto LABEL_32;
  }

  CFIndex v10 = 0LL;
  uint64_t v11 = Count;
  unint64_t v12 = *(void *)&buf[16];
  BOOL v13 = *(char **)buf;
  CFTypeRef v36 = a3;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v7, v10);
    unint64_t v15 = sub_A15C8((uint64_t)ValueAtIndex);
    if (!HIDWORD(v15)) {
      break;
    }
    int v16 = v15;
    unint64_t v17 = *(char **)&buf[8];
    if (*(void *)&buf[8] >= v12)
    {
      uint64_t v18 = (uint64_t)(*(void *)&buf[8] - (void)v13) >> 2;
      unint64_t v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 62)
      {
        *(void *)&_DWORD buf[16] = v12;
        *(void *)buf = v13;
        sub_7A87C();
      }

      else {
        unint64_t v20 = v19;
      }
      if (v20) {
        unint64_t v20 = (unint64_t)sub_7A890(v20);
      }
      else {
        uint64_t v21 = 0LL;
      }
      BOOL v22 = (char *)(v20 + 4 * v18);
      *(_DWORD *)BOOL v22 = v16;
      uint64_t v3 = (uint64_t)(v22 + 4);
      while (v17 != v13)
      {
        int v23 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *((_DWORD *)v22 - 1) = v23;
        v22 -= 4;
      }

      unint64_t v12 = v20 + 4 * v21;
      *(void *)&buf[8] = v3;
      if (v13) {
        operator delete(v13);
      }
      BOOL v13 = v22;
      a3 = v36;
    }

    else
    {
      **(_DWORD **)&buf[8] = v15;
      uint64_t v3 = (uint64_t)(v17 + 4);
    }

    *(void *)&buf[8] = v3;
    if (++v10 == v11)
    {
      int v24 = 1;
      goto LABEL_32;
    }
  }

  *(void *)&_DWORD buf[16] = v12;
  *(void *)buf = v13;
  if (v13)
  {
    *(void *)&buf[8] = v13;
    operator delete(v13);
LABEL_31:
    int v24 = 0;
    BOOL v13 = 0LL;
    goto LABEL_32;
  }

  int v24 = 0;
LABEL_32:
  if ((v48[7] & 0x80000000) != 0)
  {
    operator delete(__p);
    if (!v5) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }

  if (v5) {
LABEL_36:
  }
    CFRelease(v5);
LABEL_37:
  if (!v24)
  {
    uint64_t v32 = (os_log_t *)sub_138E8(13);
    CFDictionaryRef v33 = *v32;
    if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "DSPGraphConfig_Actions.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 144;
      _os_log_impl(&dword_0, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  int v38 = 0LL;
  uint64_t v39 = 0LL;
  *(void *)bytes = 0LL;
  sub_14A928(bytes, v13, v3, (v3 - (uint64_t)v13) >> 2);
  int v44 = 1735287906;
  CFDictionaryRef v43 = 0LL;
  sub_149D44((uint64_t)&__p, &v44);
  CFDataRef v25 = CFDataCreate(0LL, bytes, 24LL);
  if (!v25)
  {
    char v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v35, "Could not construct");
  }

  sub_14591C(&cf, v25);
  sub_149E14((uint64_t)v48, &cf);
  v42[0] = &__p;
  v42[1] = 2LL;
  CFDictionaryRef v26 = sub_5A950((uint64_t)v42);
  uint64_t v27 = 0LL;
  CFDictionaryRef v43 = v26;
  do
  {
    unint64_t v28 = *(const void **)&v48[v27 + 8];
    if (v28) {
      CFRelease(v28);
    }
    CFTypeID v29 = *(const void **)&v48[v27];
    if (v29) {
      CFRelease(v29);
    }
    v27 -= 16LL;
  }

  while (v27 != -32);
  if (cf) {
    CFRelease(cf);
  }
  sub_2DC034((uint64_t)v42, v26);
  LODWORD(__p) = 1735553138;
  sub_2DC450((uint64_t)&v47, (uint64_t)v42);
  sub_149710((uint64_t)buf, (int *)&__p, 1LL);
  sub_2DBF5C((uint64_t)&v47);
  sub_2DBF5C((uint64_t)v42);
  CFRelease(v26);
  if (*(void *)bytes)
  {
    int v38 = *(void **)bytes;
    operator delete(*(void **)bytes);
  }

  sub_392DEC(a3, (uint64_t)buf);
  sub_D0C4C(*(void **)&buf[16]);
  __n128 v30 = *(void **)buf;
  *(void *)buf = 0LL;
  if (v30) {
    operator delete(v30);
  }
  if (v13) {
    operator delete(v13);
  }
  return 0LL;
}

void sub_13CD44( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

uint64_t sub_13CE68(CFTypeRef *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = (const __CFDictionary *)*a1;
  if (*a1) {
    CFRetain(*a1);
  }
  BOOL v22 = v5;
  sub_7D084(buf, "AUsToBypass");
  __n128 v20 = 0uLL;
  uint64_t v21 = 0LL;
  if (v5)
  {
    sub_14A358((uint64_t)&v23, v5, buf, &v20);
  }

  else
  {
    uint64_t v23 = 0LL;
    uint64_t v24 = 0LL;
    uint64_t v25 = 0LL;
  }

  v17.n128_u64[0] = (unint64_t)&v20;
  sub_8CD60((void ***)&v17);
  if ((v29[9] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v5) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }

  if (v5) {
LABEL_10:
  }
    CFRelease(v5);
LABEL_11:
  CFTypeRef v6 = *a1;
  if (v6) {
    CFRetain(v6);
  }
  CFTypeRef v19 = v6;
  sub_7D084(buf, "AUsToUnbypass");
  __n128 v17 = 0uLL;
  uint64_t v18 = 0LL;
  if (v6)
  {
    sub_14A358((uint64_t)&v20, (const __CFDictionary *)v6, buf, &v17);
  }

  else
  {
    __n128 v20 = 0uLL;
    uint64_t v21 = 0LL;
  }

  CFDictionaryRef v26 = &v17;
  sub_8CD60((void ***)&v26);
  if ((v29[9] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v6) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }

  if (v6) {
LABEL_20:
  }
    CFRelease(v6);
LABEL_21:
  uint64_t v7 = v23;
  uint64_t v8 = v24;
  if (v23 == v24)
  {
    unint64_t v11 = v20.n128_u64[1];
    uint64_t v10 = v20.n128_u64[0];
    if (v20.n128_u64[0] == v20.n128_u64[1])
    {
      unint64_t v12 = (os_log_t *)sub_138E8(13);
      BOOL v13 = *v12;
      if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "DSPGraphConfig_Actions.cpp";
        __int16 v28 = 1024;
        *(_DWORD *)CFTypeID v29 = 157;
        _os_log_impl(&dword_0, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }
  }

  else
  {
    do
    {
      sub_14A40C((uint64_t)buf, 1, v7);
      sub_392DEC(a3, (uint64_t)buf);
      sub_D0C4C(*(void **)&v29[2]);
      BOOL v9 = *(void **)buf;
      *(void *)buf = 0LL;
      if (v9) {
        operator delete(v9);
      }
      v7 += 24LL;
    }

    while (v7 != v8);
    unint64_t v11 = v20.n128_u64[1];
    uint64_t v10 = v20.n128_u64[0];
  }

  while (v10 != v11)
  {
    sub_14A40C((uint64_t)buf, 0, v10);
    sub_392DEC(a3, (uint64_t)buf);
    sub_D0C4C(*(void **)&v29[2]);
    unint64_t v15 = *(void **)buf;
    *(void *)buf = 0LL;
    if (v15) {
      operator delete(v15);
    }
    v10 += 24LL;
  }

  *(void *)buf = &v20;
  sub_8CD60((void ***)buf);
  *(void *)buf = &v23;
  sub_8CD60((void ***)buf);
  return 0LL;
}

void sub_13D130( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  *(void *)(v17 - 80) = &a13;
  sub_8CD60((void ***)(v17 - 80));
  *(void *)(v17 - 80) = &a17;
  sub_8CD60((void ***)(v17 - 80));
  _Unwind_Resume(a1);
}

uint64_t sub_13D1B4(CFTypeRef *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = (const __CFDictionary *)*a1;
  if (*a1) {
    CFRetain(*a1);
  }
  unint64_t v15 = v4;
  sub_7D084(__p, "DataSourceOrder");
  unint64_t v5 = sub_146960(&v15, (const UInt8 *)__p);
  if (SHIBYTE(v21[0]) < 0)
  {
    operator delete(__p[0]);
    if (!v4) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  if (v4) {
LABEL_7:
  }
    CFRelease(v4);
LABEL_8:
  int v6 = 0;
  if (v5 > 0x100000000LL) {
    int v6 = v5;
  }
  *(_DWORD *)bytes = v6;
  int v19 = 1920365171;
  CFDictionaryRef v17 = 0LL;
  sub_149D44((uint64_t)__p, &v19);
  CFDataRef v7 = CFDataCreate(0LL, bytes, 4LL);
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  sub_14591C(cf, v7);
  sub_149E14((uint64_t)v21, cf);
  BOOL v22 = __p;
  v23[0] = 2LL;
  CFDictionaryRef v8 = sub_5A950((uint64_t)&v22);
  uint64_t v9 = 0LL;
  CFDictionaryRef v17 = v8;
  do
  {
    uint64_t v10 = v21[v9 + 1];
    if (v10) {
      CFRelease(v10);
    }
    unint64_t v11 = __p[v9 + 2];
    if (v11) {
      CFRelease(v11);
    }
    v9 -= 2LL;
  }

  while (v9 != -4);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  sub_2DC034((uint64_t)cf, v8);
  LODWORD(sub_FAA90(v24, v22) = 1735553138;
  sub_2DC450((uint64_t)v23, (uint64_t)cf);
  sub_149710((uint64_t)__p, (int *)&v22, 1LL);
  sub_2DBF5C((uint64_t)v23);
  sub_2DBF5C((uint64_t)cf);
  CFRelease(v8);
  sub_392DEC(a3, (uint64_t)__p);
  sub_D0C4C(v21[0]);
  unint64_t v12 = __p[0];
  __p[0] = 0LL;
  if (v12) {
    operator delete(v12);
  }
  return 0LL;
}

void sub_13D3C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, const void *a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
}

uint64_t sub_13D4A4(CFTypeRef *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (const __CFDictionary *)*a1;
  if (*a1) {
    CFRetain(*a1);
  }
  unint64_t v78 = v3;
  sub_7D084(&__p, "DeviceSpecificProperties");
  __int128 v76 = 0uLL;
  std::string::size_type v77 = 0LL;
  if (!v3)
  {
    __int128 v79 = 0uLL;
    uint64_t v80 = 0LL;
    goto LABEL_15;
  }

  uint64_t v4 = sub_1477B0(v3, (const UInt8 *)&__p);
  if (!v4 || (unint64_t v5 = v4, TypeID = CFArrayGetTypeID(), TypeID != CFGetTypeID(v5)))
  {
    buf[0] = 0;
    LOBYTE(v93) = 0;
LABEL_13:
    __int128 v79 = v76;
    uint64_t v80 = v77;
    std::string::size_type v77 = 0LL;
    __int128 v76 = 0uLL;
    goto LABEL_15;
  }

  CFIndex Count = CFArrayGetCount((CFArrayRef)v5);
  int v8 = Count;
  int64x2_t v88 = 0uLL;
  v89[0] = 0LL;
  if (Count << 32)
  {
    if (Count << 32 < 0) {
LABEL_97:
    }
      sub_7A87C();
    int v94 = v89;
    uint64_t v9 = (char *)sub_7DC90((int)Count);
    unint64_t v11 = (void *)v88.i64[1];
    unint64_t v12 = (void *)v88.i64[0];
    if (v88.i64[1] == v88.i64[0])
    {
      int64x2_t v15 = vdupq_n_s64(v88.u64[1]);
      BOOL v13 = v9;
    }

    else
    {
      BOOL v13 = v9;
      do
      {
        uint64_t v14 = *--v11;
        *((void *)v13 - 1) = v14;
        v13 -= 8;
        *unint64_t v11 = 0LL;
      }

      while (v11 != v12);
      int64x2_t v15 = v88;
    }

    v88.i64[0] = (uint64_t)v13;
    v88.i64[1] = (uint64_t)v9;
    *(int64x2_t *)&buf[8] = v15;
    unint64_t v37 = v89[0];
    v89[0] = &v9[8 * v10];
    unint64_t v93 = v37;
    *(void *)buf = v15.i64[0];
    sub_14A30C((uint64_t)buf);
  }

  if (v8 < 1)
  {
LABEL_70:
    *(int64x2_t *)buf = v88;
    *(void *)&_DWORD buf[16] = v89[0];
    v89[0] = 0LL;
    int64x2_t v88 = 0uLL;
    LOBYTE(v93) = 1;
  }

  else
  {
    CFIndex v38 = 0LL;
    uint64_t v39 = v8;
    while (1)
    {
      ValueAtIndex = (void **)CFArrayGetValueAtIndex((CFArrayRef)v5, v38);
      CFTypeRef v41 = ValueAtIndex;
      if (!ValueAtIndex) {
        break;
      }
      CFRetain(ValueAtIndex);
      CFTypeID v42 = CFGetTypeID(v41);
      if (v42 != CFArrayGetTypeID())
      {
        CFRelease(v41);
        break;
      }

      uint64_t v90 = v41;
      LOBYTE(v91) = 1;
      CFDictionaryRef v43 = (void *)v88.i64[1];
      if (v88.i64[1] >= v89[0])
      {
        int v44 = (void *)v88.i64[0];
        uint64_t v45 = (v88.i64[1] - v88.i64[0]) >> 3;
        unint64_t v46 = v45 + 1;
        uint64_t v47 = v89[0] - v88.i64[0];
        if ((v89[0] - v88.i64[0]) >> 2 > v46) {
          unint64_t v46 = v47 >> 2;
        }
        else {
          unint64_t v48 = v46;
        }
        int v94 = v89;
        if (v48)
        {
          unint64_t v48 = (unint64_t)sub_7DC90(v48);
          CFDictionaryRef v43 = (void *)v88.i64[1];
          int v44 = (void *)v88.i64[0];
          CFTypeRef v41 = v90;
        }

        else
        {
          uint64_t v49 = 0LL;
        }

        uint64_t v50 = (void ***)(v48 + 8 * v45);
        unint64_t v51 = v48 + 8 * v49;
        unint64_t v93 = v51;
        *uint64_t v50 = v41;
        std::string v52 = v50 + 1;
        uint64_t v90 = 0LL;
        *(void *)&_DWORD buf[16] = v50 + 1;
        if (v43 != v44)
        {
          do
          {
            unint64_t v53 = (void **)*--v43;
            *--uint64_t v50 = v53;
            *CFDictionaryRef v43 = 0LL;
          }

          while (v43 != v44);
          std::string v52 = *(void **)&buf[16];
          unint64_t v51 = v93;
        }

        int64x2_t v54 = v88;
        v88.i64[0] = (uint64_t)v50;
        v88.i64[1] = (uint64_t)v52;
        *(int64x2_t *)&buf[8] = v54;
        unint64_t v55 = v89[0];
        v89[0] = v51;
        unint64_t v93 = v55;
        *(void *)buf = v54.i64[0];
        sub_14A30C((uint64_t)buf);
        v88.i64[1] = (uint64_t)v52;
      }

      else
      {
        *(void *)v88.i64[1] = v41;
        uint64_t v90 = 0LL;
        v88.i64[1] = (uint64_t)(v43 + 1);
      }

      sub_8D840((uint64_t)&v90);
      if (++v38 == v39) {
        goto LABEL_70;
      }
    }

    LOBYTE(v90) = 0;
    LOBYTE(v91) = 0;
    buf[0] = 0;
    LOBYTE(v93) = 0;
    sub_8D840((uint64_t)&v90);
  }

  uint64_t v90 = (void **)&v88;
  sub_14A284(&v90);
  if (!(_BYTE)v93) {
    goto LABEL_13;
  }
  __int128 v79 = 0uLL;
  uint64_t v80 = 0LL;
  int v56 = *(CFTypeRef **)buf;
  unint64_t v57 = *(CFTypeRef **)&buf[8];
  v88.i64[0] = (uint64_t)&v79;
  v88.i8[8] = 0;
  uint64_t v58 = *(void *)&buf[8] - *(void *)buf;
  if (*(void *)&buf[8] != *(void *)buf)
  {
    if (v58 < 0) {
      sub_7A87C();
    }
    unsigned int v59 = sub_7DC90(v58 >> 3);
    *(void *)&__int128 v79 = v59;
    *((void *)&v79 + 1) = v59;
    uint64_t v80 = &v59[v60];
    do
    {
      CFTypeRef v61 = *v56;
      if (*v56) {
        CFRetain(*v56);
      }
      *v59++ = v61;
      ++v56;
    }

    while (v56 != v57);
    *((void *)&v79 + 1) = v59;
  }

  if ((_BYTE)v93)
  {
    v88.i64[0] = (uint64_t)buf;
    sub_14A284((void ***)&v88);
  }

void sub_13DD40( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, char a13, uint64_t a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27, int a28, __int16 a29, char a30, char a31, uint64_t a32, char a33, uint64_t a34, char a35)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_13DEAC(CFTypeRef *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = (const __CFDictionary *)*a1;
  if (*a1) {
    CFRetain(*a1);
  }
  uint64_t v28 = v4;
  sub_7D084(&__p, "ChannelSelectorMap");
  if (v4)
  {
    unint64_t v5 = (const __CFArray *)sub_1477B0(v4, (const UInt8 *)&__p);
    if (v5)
    {
      sub_149FD4((uint64_t)buf, v5);
      __n128 v30 = 0LL;
      uint64_t v31 = 0LL;
      CFTypeID v29 = 0LL;
      if (v33)
      {
        int v6 = *(void **)buf;
        sub_7A5B8(&v29, *(const void **)buf, *(uint64_t *)&buf[8], (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 2);
        if (v33)
        {
          if (v6) {
            operator delete(v6);
          }
        }
      }
    }

    else
    {
      buf[0] = 0;
      char v33 = 0;
      __n128 v30 = 0LL;
      uint64_t v31 = 0LL;
      CFTypeID v29 = 0LL;
    }
  }

  else
  {
    CFTypeID v29 = 0LL;
    __n128 v30 = 0LL;
    uint64_t v31 = 0LL;
  }

  if (SHIBYTE(v27) < 0)
  {
    operator delete(__p);
    if (!v4) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }

  if (v4) {
LABEL_15:
  }
    CFRelease(v4);
LABEL_16:
  CFDataRef v7 = (int *)v29;
  int v8 = v30;
  if (v29 == v30)
  {
    int v22 = (os_log_t *)sub_138E8(13);
    uint64_t v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "DSPGraphConfig_Actions.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 196;
      _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Requires the channel selector map to be populated.",  buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Requires the channel selector map to be populated.");
  }

  uint64_t v9 = 0LL;
  unint64_t v10 = 0LL;
  unint64_t v11 = 0LL;
  std::string __p = 0LL;
  uint64_t v26 = 0LL;
  unint64_t v27 = 0LL;
  do
  {
    int v12 = *v7 - 1;
    int *v7 = v12;
    if ((unint64_t)v11 >= v10)
    {
      uint64_t v14 = v11 - v9;
      unint64_t v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 62)
      {
        unint64_t v27 = v10;
        std::string __p = v9;
        sub_7A87C();
      }

      else {
        unint64_t v16 = v15;
      }
      if (v16)
      {
        unint64_t v16 = (unint64_t)sub_7A890(v16);
        int v12 = *v7;
      }

      else
      {
        uint64_t v17 = 0LL;
      }

      int64x2_t v18 = (int *)(v16 + 4 * v14);
      int *v18 = v12;
      BOOL v13 = v18 + 1;
      while (v11 != v9)
      {
        int v19 = *--v11;
        *--int64x2_t v18 = v19;
      }

      unint64_t v10 = v16 + 4 * v17;
      uint64_t v26 = v13;
      if (v9) {
        operator delete(v9);
      }
      uint64_t v9 = v18;
    }

    else
    {
      *unint64_t v11 = v12;
      BOOL v13 = v11 + 1;
    }

    uint64_t v26 = v13;
    ++v7;
    unint64_t v11 = v13;
  }

  while (v7 != v8);
  unint64_t v27 = v10;
  std::string __p = v9;
  sub_149A50((uint64_t)buf, 1667789676, (uint64_t)&__p);
  sub_392DEC(a3, (uint64_t)buf);
  sub_D0C4C(*(void **)&buf[16]);
  __n128 v20 = *(void **)buf;
  *(void *)buf = 0LL;
  if (v20) {
    operator delete(v20);
  }
  if (v9)
  {
    uint64_t v26 = v9;
    operator delete(v9);
  }

  if (v29) {
    operator delete(v29);
  }
  return 0LL;
}

void sub_13E1C4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_13E248(CFTypeRef *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (const __CFDictionary *)*a1;
  if (*a1) {
    CFRetain(*a1);
  }
  CFDictionaryRef v43 = v3;
  sub_7D084(__p, "IODelegates");
  __int128 v39 = 0uLL;
  uint64_t v40 = 0LL;
  if (!v3)
  {
    __int128 v44 = 0uLL;
    uint64_t v45 = 0LL;
    goto LABEL_26;
  }

  uint64_t v4 = sub_1477B0(v3, (const UInt8 *)__p);
  if (!v4 || (unint64_t v5 = v4, TypeID = CFArrayGetTypeID(), TypeID != CFGetTypeID(v5)))
  {
    LOBYTE(v46) = 0;
    char v48 = 0;
LABEL_24:
    __int128 v44 = v39;
    uint64_t v45 = v40;
    uint64_t v40 = 0LL;
    __int128 v39 = 0uLL;
    goto LABEL_26;
  }

  CFIndex Count = CFArrayGetCount((CFArrayRef)v5);
  int v8 = Count;
  __int128 v52 = 0uLL;
  unint64_t v53 = 0LL;
  if (Count << 32)
  {
    if (Count << 32 < 0) {
      sub_7A87C();
    }
    unint64_t v57 = &v53;
    *(void *)buf = sub_8D44C((int)Count);
    *(void *)&buf[8] = *(void *)buf;
    *(void *)&_DWORD buf[16] = *(void *)buf;
    uint64_t v56 = *(void *)buf + 24 * v9;
    sub_14A180(&v52, buf);
    sub_5A738((uint64_t)buf);
  }

  if (v8 < 1)
  {
LABEL_22:
    __int128 v46 = v52;
    unint64_t v47 = v53;
    unint64_t v53 = 0LL;
    __int128 v52 = 0uLL;
    char v48 = 1;
  }

  else
  {
    CFIndex v10 = 0LL;
    while (1)
    {
      ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex((CFArrayRef)v5, v10);
      sub_149FD4((uint64_t)&v49, ValueAtIndex);
      if (!v51) {
        break;
      }
      uint64_t v12 = *((void *)&v52 + 1);
      if (*((void *)&v52 + 1) >= v53)
      {
        unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v52 + 1) - v52) >> 3);
        unint64_t v15 = v14 + 1;
        if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_7A87C();
        }
        else {
          unint64_t v16 = v15;
        }
        unint64_t v57 = &v53;
        uint64_t v17 = (char *)sub_8D44C(v16);
        int64x2_t v18 = &v17[24 * v14];
        *(void *)buf = v17;
        *(void *)&buf[8] = v18;
        uint64_t v56 = (uint64_t)&v17[24 * v19];
        *(_OWORD *)int64x2_t v18 = v49;
        *((void *)v18 + 2) = v50;
        *(void *)&_DWORD buf[16] = v18 + 24;
        sub_14A180(&v52, buf);
        uint64_t v13 = *((void *)&v52 + 1);
        sub_5A738((uint64_t)buf);
      }

      else
      {
        **((_OWORD **)&v52 + 1) = v49;
        *(void *)(v12 + 16) = v50;
        uint64_t v13 = v12 + 24;
      }

      *((void *)&v52 + 1) = v13;
      if (v8 == ++v10) {
        goto LABEL_22;
      }
    }

    LOBYTE(v46) = 0;
    char v48 = 0;
  }

  *(void *)buf = &v52;
  sub_149E5C((void ***)buf);
  if (!v48) {
    goto LABEL_24;
  }
  __int128 v44 = 0uLL;
  uint64_t v45 = 0LL;
  uint64_t v34 = *((void *)&v46 + 1);
  uint64_t v33 = v46;
  *(void *)&__int128 v49 = &v44;
  BYTE8(v49) = 0;
  if (*((void *)&v46 + 1) != (void)v46)
  {
    unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v46 + 1) - v46) >> 3);
    if (v35 > 0xAAAAAAAAAAAAAAALL) {
      sub_7A87C();
    }
    *(void *)&__int128 v44 = sub_8D44C(v35);
    *((void *)&v44 + 1) = v44;
    uint64_t v45 = v44 + 24 * v36;
    *(void *)&__int128 v52 = v44;
    uint64_t v54 = v44;
    *(void *)buf = &v45;
    *(void *)&buf[8] = &v54;
    *(void *)&_DWORD buf[16] = &v52;
    LOBYTE(v56) = 0;
    unint64_t v37 = (void *)v44;
    do
    {
      *unint64_t v37 = 0LL;
      v37[1] = 0LL;
      void v37[2] = 0LL;
      sub_7A5B8(v37, *(const void **)v33, *(void *)(v33 + 8), (uint64_t)(*(void *)(v33 + 8) - *(void *)v33) >> 2);
      unint64_t v37 = (void *)(v52 + 24);
      *(void *)&__int128 v52 = v52 + 24;
      v33 += 24LL;
    }

    while (v33 != v34);
    LOBYTE(v56) = 1;
    sub_149F70((uint64_t)buf);
    *((void *)&v44 + 1) = v37;
  }

  if (v48)
  {
    *(void *)buf = &v46;
    sub_149E5C((void ***)buf);
  }

void sub_13E828( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, int a19, __int16 a20, char a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, void **a30, uint64_t a31, uint64_t a32, uint64_t a33, char a34)
{
  if (a2)
  {
    sub_149E5C(&a30);
    sub_7A0E8(exception_object);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_13E92C(CFTypeRef *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (const __CFDictionary *)*a1;
  if (*a1) {
    CFRetain(*a1);
  }
  uint64_t v45 = v5;
  sub_7D084(__p, "DeferUntilRouteCreation");
  if (v5)
  {
    unsigned int v6 = (unsigned __int16)sub_1468B4(v5, __p);
    if (v6 <= 0x100) {
      LOBYTE(v6) = 0;
    }
    int v7 = v6;
  }

  else
  {
    int v7 = 0;
  }

  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (!v5) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }

  if (v5) {
LABEL_12:
  }
    CFRelease(v5);
LABEL_13:
  if (v7)
  {
    *(void *)std::string __p = __p;
    *(void *)&__p[8] = __p;
    *(void *)&__p[16] = 0LL;
    LODWORD(v49) = 7;
    uint64_t v50 = 1886613611LL;
    LODWORD(v42.__r_.__value_.__l.__data_) = 7;
    v42.__r_.__value_.__l.__size_ = 1936749683LL;
    sub_149788((uint64_t)bytes, (uint64_t)&v49, (uint64_t)&v42);
    sub_2DBF5C((uint64_t)&v42);
    sub_2DBF5C((uint64_t)&v49);
    int v8 = sub_149814(*(void *)a3, *(void *)(a3 + 8), 1684303986);
    if (v8)
    {
      uint64_t v9 = (uint64_t *)sub_2DD25C((int *)v8 + 6);
      CFIndex v10 = sub_1498C0((uint64_t)bytes);
      v10[1] = v9;
      uint64_t v11 = *v9;
      void *v10 = *v9;
      *(void *)(v11 + 8) = v10;
      *uint64_t v9 = (uint64_t)v10;
      ++v9[2];
    }

    else
    {
      sub_2DC450((uint64_t)v48, (uint64_t)bytes);
      sub_149910((uint64_t *)&v42, (uint64_t)v48, 1LL);
      sub_2DC204((uint64_t)v43, (uint64_t)&v42);
      LODWORD(v49) = 1684303986;
      sub_2DC450((uint64_t)&v50, (uint64_t)v43);
      sub_148DB8(a3, (int)v49, &v49);
      sub_2DBF5C((uint64_t)&v50);
      sub_2DBF5C((uint64_t)v43);
      sub_149990((uint64_t *)&v42);
      sub_2DBF5C((uint64_t)v48);
    }

    sub_2DBF5C((uint64_t)bytes);
    sub_149990((uint64_t *)__p);
    return 0LL;
  }

  uint64_t v12 = (os_log_t *)sub_138E8(20);
  uint64_t v13 = *v12;
  if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string __p = 136315394;
    *(void *)&__p[4] = "DSPGraphConfig_Actions.cpp";
    *(_WORD *)&__p[12] = 1024;
    *(_DWORD *)&__p[14] = 310;
    _os_log_impl(&dword_0, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Getting Speaker Thiele-Small data From FDR", __p, 0x12u);
  }

  sub_380024((uint64_t *)&v41);
  unint64_t v14 = v41;
  if (v41)
  {
    unint64_t v15 = (os_log_t *)sub_138E8(20);
    unint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = CFCopyDescription(v14);
      sub_48188((uint64_t)&v49, v17);
      if (v17) {
        CFRelease(v17);
      }
      int64x2_t v18 = (void **)&v49;
      if (v51[0] < 0) {
        int64x2_t v18 = v49;
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = "DSPGraphConfig_Actions.cpp";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 313;
      *(_WORD *)&__p[18] = 2080;
      *(void *)&__p[20] = v18;
      _os_log_impl(&dword_0, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d FDR Speaker Thiele-Small data: %s", __p, 0x1Cu);
      if (SHIBYTE(v51[0]) < 0) {
        operator delete(v49);
      }
    }

    CFTypeRef v41 = 0LL;
    int v46 = 1936749683;
    *(void *)bytes = v14;
    v43[0] = 0LL;
    sub_149D44((uint64_t)&v49, &v46);
    CFDataRef v19 = CFDataCreate(0LL, bytes, 8LL);
    if (!v19)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }

    sub_14591C(v48, v19);
    sub_149E14((uint64_t)v51, v48);
    v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v49;
    v42.__r_.__value_.__l.__size_ = 2LL;
    CFDictionaryRef v20 = sub_5A950((uint64_t)&v42);
    uint64_t v21 = 0LL;
    v43[0] = v20;
    do
    {
      int v22 = (const void *)v51[v21 + 1];
      if (v22) {
        CFRelease(v22);
      }
      unsigned int v23 = (const void *)v51[v21];
      if (v23) {
        CFRelease(v23);
      }
      v21 -= 2LL;
    }

    while (v21 != -4);
    if (v48[0]) {
      CFRelease(v48[0]);
    }
    sub_2DC034((uint64_t)&v42, v20);
    LODWORD(v49) = 1735553138;
    sub_2DC450((uint64_t)&v50, (uint64_t)&v42);
    sub_149710((uint64_t)__p, (int *)&v49, 1LL);
    sub_2DBF5C((uint64_t)&v50);
    sub_2DBF5C((uint64_t)&v42);
    CFRelease(v20);
    sub_392DEC((uint64_t *)a3, (uint64_t)__p);
    sub_D0C4C(*(void **)&__p[16]);
    unsigned int v24 = *(void **)__p;
    *(void *)std::string __p = 0LL;
    if (v24) {
      operator delete(v24);
    }
    if (v14)
    {
      CFTypeRef v25 = *a1;
      if (v25) {
        CFRetain(v25);
      }
      sub_7D084(__p, "SetTelemetryDataSources");
      if (v25 && (unsigned __int16 v26 = sub_1468B4((const __CFDictionary *)v25, __p), v26 > 0xFFu)) {
        int v27 = v26;
      }
      else {
        int v27 = 0;
      }
      if ((__p[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)__p);
        if (!v25) {
          goto LABEL_58;
        }
      }

      else if (!v25)
      {
LABEL_58:
        if (v27)
        {
          sub_31821C();
          uint64_t v31 = sub_149A00(1);
          __int128 v49 = 0LL;
          uint64_t v50 = 0LL;
          v51[0] = 0LL;
          sub_7A5B8( &v49,  *(const void **)v31,  *(void *)(v31 + 8),  (uint64_t)(*(void *)(v31 + 8) - *(void *)v31) >> 2);
          __int128 v32 = (unsigned int *)v49;
          uint64_t v33 = (unsigned int *)v50;
          if (v49 == (void **)v50)
          {
            CFIndex v38 = (os_log_t *)sub_138E8(20);
            __int128 v39 = *v38;
            if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)std::string __p = 136315394;
              *(void *)&__p[4] = "DSPGraphConfig_Actions.cpp";
              *(_WORD *)&__p[12] = 1024;
              *(_DWORD *)&__p[14] = 337;
              _os_log_impl( &dword_0,  v39,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Telemetry Data Sources from SpeakerPolicyDatabase are empty",  __p,  0x12u);
            }
          }

          else
          {
            uint64_t v34 = (os_log_t *)sub_138E8(20);
            unint64_t v35 = *v34;
            if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_DEFAULT))
            {
              sub_8F640(&v42, v32, v33);
              uint64_t v36 = (v42.__r_.__value_.__s.__size_ & 0x80u) == 0
                  ? &v42
                  : (std::string *)v42.__r_.__value_.__r.__words[0];
              *(_DWORD *)std::string __p = 136315650;
              *(void *)&__p[4] = "DSPGraphConfig_Actions.cpp";
              *(_WORD *)&__p[12] = 1024;
              *(_DWORD *)&__p[14] = 332;
              *(_WORD *)&__p[18] = 2080;
              *(void *)&__p[20] = v36;
              _os_log_impl(&dword_0, v35, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Telemetry Data Sources: [ %s ]", __p, 0x1Cu);
            }

            sub_149A50((uint64_t)__p, 1936286831, (uint64_t)&v49);
            sub_392DEC((uint64_t *)a3, (uint64_t)__p);
            sub_D0C4C(*(void **)&__p[16]);
            unint64_t v37 = *(void **)__p;
            *(void *)std::string __p = 0LL;
            if (v37) {
              operator delete(v37);
            }
          }

          if (v32) {
            operator delete(v32);
          }
        }

        return 0LL;
      }

      CFRelease(v25);
      goto LABEL_58;
    }
  }

  else
  {
    CFTypeID v29 = (os_log_t *)sub_138E8(20);
    __n128 v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = "DSPGraphConfig_Actions.cpp";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 319;
      _os_log_impl( &dword_0,  v30,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d FDR doesn't have Speaker Thiele-Small data",  __p,  0x12u);
    }
  }

  return 560227702LL;
}

void sub_13F050( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, char a23, uint64_t a24, char a25, uint64_t a26, char a27)
{
  if (v27) {
    operator delete(v27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_13F1F8(CFTypeRef *a1, uint64_t a2, uint64_t *a3)
{
  CFTypeRef v5 = *a1;
  if (*a1) {
    CFRetain(*a1);
  }
  v21[6] = (void *)v5;
  sub_7D084(__p, "UseFixedBlockSize");
  if (v5 && (unsigned __int16 v6 = sub_1468B4((const __CFDictionary *)v5, __p), v6 > 0xFFu)) {
    int v7 = v6;
  }
  else {
    int v7 = 0;
  }
  if (v25 < 0)
  {
    operator delete(*(void **)__p);
    if (!v5) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }

  if (v5) {
LABEL_11:
  }
    CFRelease(v5);
LABEL_12:
  CFTypeRef v8 = *a1;
  if (v8) {
    CFRetain(v8);
  }
  v21[5] = (void *)v8;
  sub_7D084(__p, "MaximumFramesPerSlice");
  if (v8 && (uint64_t v9 = (const __CFNumber *)sub_1477B0((const __CFDictionary *)v8, __p)) != 0LL) {
    CFIndex v10 = sub_36328(v9);
  }
  else {
    CFIndex v10 = 0LL;
  }
  if (v25 < 0)
  {
    operator delete(*(void **)__p);
    if (!v8) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }

  if (v8) {
LABEL_22:
  }
    CFRelease(v8);
LABEL_23:
  if (!((unint64_t)v10 >> 32))
  {
    unint64_t v14 = (os_log_t *)sub_138E8(13);
    unint64_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = "DSPGraphConfig_Actions.cpp";
      __int16 v23 = 1024;
      int v24 = 351;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Could not find valid maximum block size",  __p,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Could not find valid maximum block size");
  }

  int v19 = 7;
  BOOL v20 = v7 != 0;
  *(_DWORD *)std::string __p = 3700;
  sub_2DC450((uint64_t)&__p[8], (uint64_t)&v19);
  int v17 = 7;
  uint64_t v18 = v10;
  int v26 = 14;
  sub_2DC450((uint64_t)&v27, (uint64_t)&v17);
  sub_149710((uint64_t)v21, (int *)__p, 2LL);
  for (uint64_t i = 32LL; i != -16; i -= 24LL)
    sub_2DBF5C((uint64_t)&__p[i]);
  sub_2DBF5C((uint64_t)&v17);
  sub_2DBF5C((uint64_t)&v19);
  sub_392DEC(a3, (uint64_t)v21);
  sub_D0C4C((void *)v21[2]);
  uint64_t v12 = v21[0];
  v21[0] = 0LL;
  if (v12) {
    operator delete(v12);
  }
  return 0LL;
}

void sub_13F498( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, int a20, __int16 a21, char a22, char a23)
{
}

uint64_t sub_13F544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = 0;
  uint64_t v6 = 1LL;
  int v7 = 1936746861;
  sub_2DC450((uint64_t)v8, (uint64_t)&v5);
  sub_148DB8(a3, v7, &v7);
  sub_2DBF5C((uint64_t)v8);
  sub_2DBF5C((uint64_t)&v5);
  return 0LL;
}

void sub_13F5B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_13F5DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = 0;
  uint64_t v6 = 1LL;
  int v7 = 1835235437;
  sub_2DC450((uint64_t)v8, (uint64_t)&v5);
  sub_148DB8(a3, v7, &v7);
  sub_2DBF5C((uint64_t)v8);
  sub_2DBF5C((uint64_t)&v5);
  return 0LL;
}

void sub_13F650(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_13F674()
{
  uint64_t v0 = sub_138E8(24);
  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
  {
    uint64_t v1 = *(os_log_s **)v0;
    if (*(void *)v0)
    {
      if (os_log_type_enabled(*(os_log_t *)v0, OS_LOG_TYPE_DEBUG))
      {
        int v3 = 136315394;
        uint64_t v4 = "DSPGraphConfig_Actions.cpp";
        __int16 v5 = 1024;
        int v6 = 400;
        _os_log_impl( &dword_0,  v1,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Configuring silence reset prevention is deprecated. This is now done by default for graphs",  (uint8_t *)&v3,  0x12u);
      }
    }
  }

  return 0LL;
}

uint64_t sub_13F738(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = 0;
  uint64_t v6 = 1LL;
  int v7 = 1886610801;
  sub_2DC450((uint64_t)v8, (uint64_t)&v5);
  sub_148DB8(a3, v7, &v7);
  sub_2DBF5C((uint64_t)v8);
  sub_2DBF5C((uint64_t)&v5);
  return 0LL;
}

void sub_13F7AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_13F7D0(CFTypeRef *a1, uint64_t a2, uint64_t a3)
{
  int v6 = 1886352244;
  sub_2DC450((uint64_t)v7, (uint64_t)v5);
  sub_148DB8(a3, v6, &v6);
  sub_2DBF5C((uint64_t)v7);
  sub_2DBF5C((uint64_t)v5);
  return 0LL;
}

void sub_13F844(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_13F868(CFDictionaryRef *a1, uint64_t a2, uint64_t a3)
{
  int v8 = 1701737068;
  sub_2DC450((uint64_t)v9, (uint64_t)v7);
  sub_148DB8(a3, v8, &v8);
  sub_2DBF5C((uint64_t)v9);
  sub_2DBF5C((uint64_t)v7);
  sub_D0C4C((void *)__p[2]);
  uint64_t v4 = __p[0];
  __p[0] = 0LL;
  if (v4) {
    operator delete(v4);
  }
  return 0LL;
}

void sub_13F904( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

uint64_t sub_13F938(CFDictionaryRef *a1, uint64_t a2, uint64_t a3)
{
  int v8 = 1818326117;
  sub_2DC450((uint64_t)v9, (uint64_t)v7);
  sub_148DB8(a3, v8, &v8);
  sub_2DBF5C((uint64_t)v9);
  sub_2DBF5C((uint64_t)v7);
  sub_D0C4C((void *)__p[2]);
  uint64_t v4 = __p[0];
  __p[0] = 0LL;
  if (v4) {
    operator delete(v4);
  }
  return 0LL;
}

void sub_13F9D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

uint64_t sub_13FA08(CFDictionaryRef *a1, uint64_t a2, uint64_t a3)
{
  int v8 = 1701080167;
  sub_2DC450((uint64_t)v9, (uint64_t)v7);
  sub_148DB8(a3, v8, &v8);
  sub_2DBF5C((uint64_t)v9);
  sub_2DBF5C((uint64_t)v7);
  sub_D0C4C((void *)__p[2]);
  uint64_t v4 = __p[0];
  __p[0] = 0LL;
  if (v4) {
    operator delete(v4);
  }
  return 0LL;
}

void sub_13FAA4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

uint64_t sub_13FAD8(CFDictionaryRef *a1, uint64_t a2, uint64_t a3)
{
  int v8 = 1633972835;
  sub_2DC450((uint64_t)v9, (uint64_t)v7);
  sub_148DB8(a3, v8, &v8);
  sub_2DBF5C((uint64_t)v9);
  sub_2DBF5C((uint64_t)v7);
  sub_D0C4C((void *)__p[2]);
  uint64_t v4 = __p[0];
  __p[0] = 0LL;
  if (v4) {
    operator delete(v4);
  }
  return 0LL;
}

void sub_13FB74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

uint64_t sub_13FBA8(CFTypeRef *a1, uint64_t a2, uint64_t a3)
{
  int v6 = 1668248691;
  sub_2DC450((uint64_t)v7, (uint64_t)v5);
  sub_148DB8(a3, v6, &v6);
  sub_2DBF5C((uint64_t)v7);
  sub_2DBF5C((uint64_t)v5);
  return 0LL;
}

void sub_13FC1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_13FC40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = 0;
  uint64_t v6 = 1LL;
  int v7 = 1634625388;
  sub_2DC450((uint64_t)v8, (uint64_t)&v5);
  sub_148DB8(a3, v7, &v7);
  sub_2DBF5C((uint64_t)v8);
  sub_2DBF5C((uint64_t)&v5);
  return 0LL;
}

void sub_13FCB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_13FCD8(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_DWORD *)a1 + 8) = 1065353216;
  if (a3)
  {
    int v5 = a2;
    uint64_t v6 = &a2[10 * a3];
    int v7 = a1 + 2;
    do
    {
      unint64_t v8 = *v5;
      unint64_t v9 = a1[1];
      if (v9)
      {
        uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        if (v10.u32[0] > 1uLL)
        {
          unint64_t v3 = *v5;
          if (v9 <= v8) {
            unint64_t v3 = v8 % v9;
          }
        }

        else
        {
          unint64_t v3 = ((_DWORD)v9 - 1) & v8;
        }

        uint64_t v11 = *(uint64_t ***)(*a1 + 8 * v3);
        if (v11)
        {
          for (uint64_t i = *v11; i; uint64_t i = (uint64_t *)*i)
          {
            unint64_t v13 = i[1];
            if (v13 == v8)
            {
              if (*((_DWORD *)i + 4) == (_DWORD)v8) {
                goto LABEL_80;
              }
            }

            else
            {
              if (v10.u32[0] > 1uLL)
              {
                if (v13 >= v9) {
                  v13 %= v9;
                }
              }

              else
              {
                v13 &= v9 - 1;
              }

              if (v13 != v3) {
                break;
              }
            }
          }
        }
      }

      uint64_t v14 = operator new(0x38uLL);
      void *v14 = 0LL;
      v14[1] = v8;
      *((_DWORD *)v14 + 4) = v8;
      uint64_t v15 = *((void *)v5 + 4);
      if (v15)
      {
        if ((unsigned int *)v15 == v5 + 2)
        {
          v14[6] = v14 + 3;
          (*(void (**)(uint64_t))(*(void *)v15 + 24LL))(v15);
          goto LABEL_24;
        }

        uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 16LL))(v15);
      }

      v14[6] = v15;
LABEL_24:
      float v16 = (float)(unint64_t)(a1[3] + 1);
      float v17 = *((float *)a1 + 8);
      if (!v9 || (float)(v17 * (float)v9) < v16)
      {
        BOOL v18 = (v9 & (v9 - 1)) != 0;
        if (v9 < 3) {
          BOOL v18 = 1LL;
        }
        unint64_t v19 = v18 | (2 * v9);
        unint64_t v20 = vcvtps_u32_f32(v16 / v17);
        if (v19 <= v20) {
          int8x8_t prime = (int8x8_t)v20;
        }
        else {
          int8x8_t prime = (int8x8_t)v19;
        }
        if (*(void *)&prime == 1LL)
        {
          int8x8_t prime = (int8x8_t)2LL;
        }

        else if ((*(void *)&prime & (*(void *)&prime - 1LL)) != 0)
        {
          int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
        }

        unint64_t v9 = a1[1];
        if (*(void *)&prime <= v9)
        {
          if (*(void *)&prime < v9)
          {
            unint64_t v28 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
            if (v9 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
            {
              unint64_t v28 = std::__next_prime(v28);
            }

            else
            {
              uint64_t v30 = 1LL << -(char)__clz(v28 - 1);
              if (v28 >= 2) {
                unint64_t v28 = v30;
              }
            }

            if (*(void *)&prime <= v28) {
              int8x8_t prime = (int8x8_t)v28;
            }
            if (*(void *)&prime >= v9)
            {
              unint64_t v9 = a1[1];
            }

            else
            {
              if (prime) {
                goto LABEL_36;
              }
              uint64_t v36 = (void *)*a1;
              *a1 = 0LL;
              if (v36) {
                operator delete(v36);
              }
              unint64_t v9 = 0LL;
              a1[1] = 0LL;
            }
          }
        }

        else
        {
LABEL_36:
          if (*(void *)&prime >> 61) {
            sub_7A8C4();
          }
          int v22 = operator new(8LL * *(void *)&prime);
          __int16 v23 = (void *)*a1;
          *a1 = (uint64_t)v22;
          if (v23) {
            operator delete(v23);
          }
          uint64_t v24 = 0LL;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v24++) = 0LL;
          while (*(void *)&prime != v24);
          char v25 = (void *)*v7;
          if (*v7)
          {
            unint64_t v26 = v25[1];
            uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(void *)&prime) {
                v26 %= *(void *)&prime;
              }
            }

            else
            {
              v26 &= *(void *)&prime - 1LL;
            }

            *(void *)(*a1 + 8 * v26) = v7;
            uint64_t v31 = (void *)*v25;
            if (*v25)
            {
              do
              {
                unint64_t v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(void *)&prime) {
                    v32 %= *(void *)&prime;
                  }
                }

                else
                {
                  v32 &= *(void *)&prime - 1LL;
                }

                if (v32 != v26)
                {
                  if (!*(void *)(*a1 + 8 * v32))
                  {
                    *(void *)(*a1 + 8 * vsub_7A768(v9 - 32) = v25;
                    goto LABEL_61;
                  }

                  *char v25 = *v31;
                  void *v31 = **(void **)(*a1 + 8 * v32);
                  **(void **)(*a1 + 8 * vsub_7A768(v9 - 32) = v31;
                  uint64_t v31 = v25;
                }

                unint64_t v32 = v26;
LABEL_61:
                char v25 = v31;
                uint64_t v31 = (void *)*v31;
                unint64_t v26 = v32;
              }

              while (v31);
            }
          }

          unint64_t v9 = (unint64_t)prime;
        }

        if ((v9 & (v9 - 1)) != 0)
        {
          if (v9 <= v8) {
            unint64_t v3 = v8 % v9;
          }
          else {
            unint64_t v3 = v8;
          }
        }

        else
        {
          unint64_t v3 = ((_DWORD)v9 - 1) & v8;
        }
      }

      uint64_t v33 = *a1;
      uint64_t v34 = *(void **)(*a1 + 8 * v3);
      if (v34)
      {
        void *v14 = *v34;
      }

      else
      {
        void *v14 = *v7;
        void *v7 = v14;
        *(void *)(v33 + 8 * v3) = v7;
        if (!*v14) {
          goto LABEL_79;
        }
        unint64_t v35 = *(void *)(*v14 + 8LL);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v35 >= v9) {
            v35 %= v9;
          }
        }

        else
        {
          v35 &= v9 - 1;
        }

        uint64_t v34 = (void *)(*a1 + 8 * v35);
      }

      void *v34 = v14;
LABEL_79:
      ++a1[3];
LABEL_80:
      v5 += 10;
    }

    while (v5 != v6);
  }

  return a1;
}

void sub_140118(_Unwind_Exception *a1)
{
}

uint64_t sub_140150(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_48E410);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_48E410))
  {
    uint64_t v12 = (char *)operator new(0x48uLL);
    *((void *)v12 + 1) = 0LL;
    *((void *)v12 + 2) = 0LL;
    *(void *)uint64_t v12 = off_4817C8;
    *((void *)v12 + 4) = 0x7675676464737067LL;
    *((_DWORD *)v12 + 10) = 0;
    *(void *)(v12 + 60) = 0x100000001LL;
    *(_OWORD *)(v12 + 44) = xmmword_402D48;
    *((void *)v12 + 3) = off_481800;
    qword_48E400 = (uint64_t)(v12 + 24);
    *(void *)algn_48E408 = v12;
    __cxa_guard_release(&qword_48E410);
  }

  uint64_t v5 = qword_48E400;
  uint64_t v6 = *(std::__shared_weak_count **)algn_48E408;
  if (*(void *)algn_48E408)
  {
    int v7 = (unint64_t *)(*(void *)algn_48E408 + 8LL);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  sub_143208(a3, v5, (uint64_t)v6);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  return 0LL;
}

void sub_140264(_Unwind_Exception *a1)
{
}

uint64_t sub_14028C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(const void **)(a1 + 152);
  if (!v5) {
    goto LABEL_14;
  }
  if (!sub_D12E8((const __CFDictionary *)v5, (const UInt8 *)"DuckParameters"))
  {
    uint64_t v6 = *(const __CFDictionary **)(a1 + 152);
    if (!v6)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_7E414(exception);
    }

    if (!sub_D12E8(v6, (const UInt8 *)"dBGainBoxUsedWithVolu"))
    {
      uint64_t v5 = *(const void **)(a1 + 152);
LABEL_14:
      sub_146B1C(v5, (void *)a3);
      return 0LL;
    }
  }

  int v7 = (os_log_t *)sub_138E8(24);
  unint64_t v8 = *v7;
  if (!*v7 || !os_log_type_enabled(*v7, OS_LOG_TYPE_INFO)) {
    goto LABEL_21;
  }
  else {
    uint64_t v9 = *(void *)(a3 + 24);
  }
  unint64_t v10 = *(const __CFDictionary **)(a1 + 152);
  *(void *)&_BYTE buf[24] = 0LL;
  sub_145DB4(&v85, v10, 0LL, (uint64_t)buf);
  uint64_t v11 = *(void **)&buf[24];
  if (*(_BYTE **)&buf[24] == buf)
  {
    uint64_t v12 = 4LL;
    uint64_t v11 = buf;
    goto LABEL_16;
  }

  if (*(void *)&buf[24])
  {
    uint64_t v12 = 5LL;
LABEL_16:
    (*(void (**)(void))(*v11 + 8 * v12))();
  }

  unint64_t v13 = &v85;
  if ((v85.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    unint64_t v13 = (std::string *)v85.__r_.__value_.__r.__words[0];
  }
  *(_DWORD *)buf = 136315906;
  *(void *)&uint8_t buf[4] = "DSPGraphConfig_Actions.cpp";
  *(_WORD *)&_BYTE buf[12] = 1024;
  *(_DWORD *)&buf[14] = 656;
  *(_WORD *)&_BYTE buf[18] = 2080;
  *(void *)&buf[20] = v9;
  *(_WORD *)&_BYTE buf[28] = 2080;
  *(void *)&buf[30] = v13;
  _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_INFO,  "%25s:%-5d Creating custom volume command property for config %s. Volume info: %s",  buf,  0x26u);
LABEL_21:
  uint64_t v14 = *(const __CFDictionary **)(a1 + 152);
  if (v14) {
    CFRetain(*(CFTypeRef *)(a1 + 152));
  }
  sub_7D084(buf, "MuteParameter");
  LODWORD(v85.__r_.__value_.__l.__data_) = 0;
  if (v14) {
    int v15 = sub_146874(v14, buf, (unsigned int *)&v85);
  }
  else {
    int v15 = 0;
  }
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v14) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }

  if (v14) {
LABEL_30:
  }
    CFRelease(v14);
LABEL_31:
  float v16 = *(const __CFDictionary **)(a1 + 152);
  if (v16) {
    CFRetain(*(CFTypeRef *)(a1 + 152));
  }
  sub_7D084(buf, "dBGainBoxUsedWithVolu");
  if (v16)
  {
    unsigned int v17 = (unsigned __int16)sub_1468B4(v16, buf);
    if (v17 <= 0x100) {
      LOBYTE(v17) = 0;
    }
    int v18 = v17;
  }

  else
  {
    int v18 = 0;
  }

  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v16) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }

  if (v16) {
LABEL_42:
  }
    CFRelease(v16);
LABEL_43:
  unint64_t v19 = *(const __CFDictionary **)(a1 + 152);
  if (!v19)
  {
    uint64_t v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v60, "Could not construct");
  }

  if (!sub_D12E8(v19, (const UInt8 *)"DuckParameters"))
  {
    if (!v18)
    {
      sub_146B1C(*(CFTypeRef *)(a1 + 152), (void *)a3);
      return 0LL;
    }

    __int16 v23 = (std::__shared_weak_count *)operator new(0x48uLL);
    v23->__shared_owners_ = 0LL;
    v23->__shared_weak_owners_ = 0LL;
    v23->__vftable = (std::__shared_weak_count_vtbl *)off_4817C8;
    v23[1].__vftable = (std::__shared_weak_count_vtbl *)off_481800;
    uint64_t v24 = (uint64_t)&v23[1];
    *(uint64_t *)((char *)&v23[2].__shared_owners_ + 4) = 0x100000001LL;
    *(_OWORD *)((char *)&v23[1].__shared_weak_owners_ + 4) = xmmword_402D48;
    v23[1].__shared_owners_ = 0x766F6C7564737067LL;
    goto LABEL_108;
  }

  unint64_t v20 = *(const __CFDictionary **)(a1 + 152);
  if (!v20)
  {
    uint64_t v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v64, "Could not construct");
  }

  sub_1468E4(&cf, v20, (const UInt8 *)"DuckParameters");
  CFTypeRef v21 = cf;
  if (cf) {
    CFRetain(cf);
  }
  v85.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
  sub_7D084(buf, "ID");
  LODWORD(v78[0]) = 0;
  unsigned int v22 = sub_1585CC((const __CFDictionary **)&v85, buf, (unsigned int *)v78);
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v21) {
      goto LABEL_56;
    }
    goto LABEL_55;
  }

  if (v21) {
LABEL_55:
  }
    CFRelease(v21);
LABEL_56:
  char v25 = (const __CFDictionary *)cf;
  if (cf) {
    CFRetain(cf);
  }
  sub_7D084(buf, "EnableKey");
  LODWORD(v78[0]) = 0;
  if (v25) {
    int v76 = sub_146874(v25, buf, (unsigned int *)v78);
  }
  else {
    int v76 = 0;
  }
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v25) {
      goto LABEL_66;
    }
    goto LABEL_65;
  }

  if (v25) {
LABEL_65:
  }
    CFRelease(v25);
LABEL_66:
  unint64_t v26 = (const __CFDictionary *)cf;
  if (cf) {
    CFRetain(cf);
  }
  sub_7D084(buf, "GainKey");
  LODWORD(v78[0]) = 0;
  if (v26) {
    int v75 = sub_146874(v26, buf, (unsigned int *)v78);
  }
  else {
    int v75 = 0;
  }
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v26) {
      goto LABEL_76;
    }
    goto LABEL_75;
  }

  if (v26) {
LABEL_75:
  }
    CFRelease(v26);
LABEL_76:
  uint8x8_t v27 = (const __CFDictionary *)cf;
  if (cf) {
    CFRetain(cf);
  }
  sub_7D084(buf, "TimeKey");
  LODWORD(v78[0]) = 0;
  if (v27) {
    int v74 = sub_146874(v27, buf, (unsigned int *)v78);
  }
  else {
    int v74 = 0;
  }
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v27) {
      goto LABEL_86;
    }
    goto LABEL_85;
  }

  if (v27) {
LABEL_85:
  }
    CFRelease(v27);
LABEL_86:
  unint64_t v28 = (const __CFDictionary *)cf;
  if (cf) {
    CFRetain(cf);
  }
  v78[0] = v28;
  sub_7D084(buf, "GainUnitType");
  unint64_t v29 = sub_146960(v78, buf);
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v28) {
      goto LABEL_93;
    }
    goto LABEL_92;
  }

  if (v28) {
LABEL_92:
  }
    CFRelease(v28);
LABEL_93:
  CFTypeRef v30 = cf;
  if (cf) {
    CFRetain(cf);
  }
  *(void *)uint64_t v82 = v30;
  sub_7D084(buf, "TimeUnitType");
  unint64_t v31 = sub_146960((const __CFDictionary **)v82, buf);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  unsigned int v73 = v22;
  if (v30) {
    CFRelease(v30);
  }
  int v32 = 0;
  if (v31 > 0x100000000LL) {
    int v32 = v31;
  }
  int v72 = v32;
  if (HIDWORD(v29)) {
    int v33 = v29;
  }
  else {
    int v33 = 1;
  }
  if (cf) {
    CFRelease(cf);
  }
  if (!v18)
  {
    uint64_t v34 = *(const __CFDictionary **)(a1 + 152);
    if (!v34)
    {
      std::string::size_type v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v65, "Could not construct");
    }

    if (!sub_D12E8(v34, (const UInt8 *)"VolumeCurve"))
    {
      *(_DWORD *)buf = dword_48E398;
      sub_142EF4((uint64_t)&buf[8], qword_48E3A0);
      *(_OWORD *)&_BYTE buf[32] = xmmword_48E3B8;
LABEL_139:
      if (*(void *)&buf[24]) {
        double v52 = *(float *)(*(void *)&buf[8] + 36LL);
      }
      else {
        double v52 = 0.0;
      }
      float v53 = sub_6461C((uint64_t)buf);
      __int16 v23 = (std::__shared_weak_count *)operator new(0x98uLL);
      v23->__shared_owners_ = 0LL;
      v23->__shared_weak_owners_ = 0LL;
      v23->__vftable = (std::__shared_weak_count_vtbl *)off_481840;
      v23[1].__vftable = (std::__shared_weak_count_vtbl *)&off_4818B8;
      uint64_t v24 = (uint64_t)&v23[1];
      LODWORD(v23[2].__vftable) = v76;
      HIDWORD(v23[2].__vftable) = v75;
      LODWORD(v23[2].__shared_owners_) = v74;
      HIDWORD(v23[2].__shared_owners_) = v33;
      LODWORD(v23[2].__shared_weak_owners_) = v72;
      v23[1].__shared_owners_ = -2609680281LL;
      LODWORD(v23[1].__shared_weak_owners_) = 0;
      HIDWORD(v23[1].__shared_weak_owners_) = v73;
      *(double *)&v23[3].__vftable = v52;
      *(double *)&v23[3].__shared_owners_ = v53;
      LODWORD(v23[3].__shared_weak_owners_) = *(_DWORD *)buf;
      sub_142EF4((uint64_t)&v23[4], &buf[8]);
      v23[5].std::__shared_count = *(std::__shared_count *)&buf[32];
      LOBYTE(v23[5].__shared_weak_owners_) = 1;
      v23[6].__vftable = (std::__shared_weak_count_vtbl *)0x76657167766F6C75LL;
      v23[1].__vftable = (std::__shared_weak_count_vtbl *)off_481878;
      sub_32C8C(*(void **)&buf[16]);
      goto LABEL_143;
    }

    unint64_t v35 = *(const __CFDictionary **)(a1 + 152);
    if (!v35)
    {
      BOOL v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v66, "Could not construct");
    }

    sub_1468E4(&v77, v35, (const UInt8 *)"VolumeCurve");
    *(_DWORD *)buf = 0;
    *(void *)&_DWORD buf[16] = 0LL;
    *(void *)&_BYTE buf[24] = 0LL;
    *(void *)&buf[8] = &buf[16];
    _BYTE buf[32] = 1;
    *(_DWORD *)&_BYTE buf[36] = 5;
    *(void *)&uint8_t buf[40] = 0x3F80000040000000LL;
    if (!v77)
    {
      uint64_t v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v67, "Could not construct");
    }

    uint64_t v36 = (const __CFNumber *)sub_D13C4((const __CFDictionary *)v77, (const UInt8 *)"TransferFunction");
    if (v36)
    {
      unint64_t v37 = sub_36328(v36);
      unsigned int v38 = 0;
      *(_DWORD *)&_BYTE buf[36] = v38;
      if (v38 > 0xF)
      {
        float v39 = 1.0;
        float v40 = 2.0;
        char v41 = 1;
        goto LABEL_121;
      }
    }

    else
    {
      unsigned int v38 = 0;
      *(_DWORD *)&_BYTE buf[36] = 0;
    }

    char v41 = byte_4034F0[v38];
    float v40 = *(float *)&aKcajmlovdlovBd[4 * v38 + 152];
    float v39 = flt_4016F0[v38];
LABEL_121:
    _BYTE buf[32] = v41;
    *(float *)&uint8_t buf[40] = v40;
    *(float *)&buf[44] = v39;
    if (!v77)
    {
      char v68 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v68, "Could not construct");
    }

    std::string v42 = sub_D13C4((const __CFDictionary *)v77, (const UInt8 *)"VolumeCurvePoints");
    if (v42)
    {
      CFDictionaryRef v43 = v42;
      CFRetain(v42);
      CFTypeID v44 = CFGetTypeID(v43);
      if (v44 == CFArrayGetTypeID())
      {
        v85.__r_.__value_.__r.__words[0] = (std::string::size_type)v43;
        v85.__r_.__value_.__s.__data_[8] = 1;
        CFRetain(v43);
        sub_8D840((uint64_t)&v85);
        if (CFArrayGetCount((CFArrayRef)v43))
        {
          CFIndex Count = CFArrayGetCount((CFArrayRef)v43);
          CFIndex v46 = CFArrayGetCount((CFArrayRef)v43);
          if (Count)
          {
            CFIndex v47 = v46;
            unint64_t v48 = 0LL;
            do
            {
              if (v47 == v48) {
                break;
              }
              sub_36030(&cf, (CFArrayRef)v43, v48);
              sub_360D4(&v79, &cf);
              if (!v79)
              {
                CFTypeRef v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v61, "Could not construct");
              }

              sub_146AAC((uint64_t)&v85, (const __CFDictionary *)v79, (const UInt8 *)"scalar");
              if (!v79)
              {
                BOOL v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v62, "Could not construct");
              }

              sub_146AAC((uint64_t)v78, (const __CFDictionary *)v79, (const UInt8 *)"dB");
              uint64_t v50 = (void *)v85.__r_.__value_.__r.__words[0];
              if (v85.__r_.__value_.__l.__size_ - v85.__r_.__value_.__r.__words[0] == 8)
              {
                char v51 = v78[0];
                if (v78[1] - v78[0] == (const __CFDictionary *)&dword_8) {
                  continue;
                }
              }

              unint64_t v57 = (os_log_t *)sub_138E8(13);
              uint64_t v58 = *v57;
              if (*v57 && os_log_type_enabled(*v57, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)uint64_t v82 = 136315394;
                *(void *)&v82[4] = "DSPGraphConfig_Actions.cpp";
                __int16 v83 = 1024;
                int v84 = 536;
                _os_log_impl( &dword_0,  v58,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  v82,  0x12u);
              }

              unsigned int v59 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v59, "Precondition failure.");
              LODWORD(v49) = *(_DWORD *)v78[0];
              sub_886F8( (uint64_t)buf,  vcvts_n_s32_f32(*(float *)v85.__r_.__value_.__l.__data_, 0x1FuLL),  vcvts_n_s32_f32(*(float *)(v85.__r_.__value_.__r.__words[0] + 4), 0x1FuLL),  v49,  *((float *)v78[0] + 1));
              operator delete(v51);
              operator delete(v50);
              if (v79) {
                CFRelease(v79);
              }
              if (cf) {
                CFRelease(cf);
              }
              ++v48;
            }

            while (Count != v48);
          }

          CFRelease(v43);
          if (v77) {
            CFRelease(v77);
          }
          goto LABEL_139;
        }

LABEL_163:
        uint64_t v69 = (os_log_t *)sub_138E8(13);
        uint64_t v70 = *v69;
        if (*v69 && os_log_type_enabled(*v69, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v85.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)v85.__r_.__value_.__r.__words + 4) = (std::string::size_type)"DSPGraphConfig_Actions.cpp";
          WORD2(v85.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&v85.__r_.__value_.__r.__words[1] + 6) = 521;
          _os_log_impl( &dword_0,  v70,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v85,  0x12u);
        }

        uint64_t v71 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v71, "Precondition failure.");
      }

      CFRelease(v43);
    }

    v85.__r_.__value_.__s.__data_[0] = 0;
    v85.__r_.__value_.__s.__data_[8] = 0;
    sub_8D840((uint64_t)&v85);
    goto LABEL_163;
  }

  __int16 v23 = (std::__shared_weak_count *)operator new(0x48uLL);
  v23->__shared_owners_ = 0LL;
  v23->__shared_weak_owners_ = 0LL;
  v23->__vftable = (std::__shared_weak_count_vtbl *)off_4817C8;
  v23[1].__vftable = (std::__shared_weak_count_vtbl *)off_481800;
  uint64_t v24 = (uint64_t)&v23[1];
  LODWORD(v23[2].__vftable) = v76;
  HIDWORD(v23[2].__vftable) = v75;
  LODWORD(v23[2].__shared_owners_) = v74;
  HIDWORD(v23[2].__shared_owners_) = v33;
  LODWORD(v23[2].__shared_weak_owners_) = v72;
  v23[1].__shared_owners_ = 0x766F6C7564737067LL;
  HIDWORD(v23[1].__shared_weak_owners_) = v73;
LABEL_108:
  LODWORD(v23[1].__shared_weak_owners_) = v15;
LABEL_143:
  sub_143208((void *)a3, v24, (uint64_t)v23);
  p_shared_owners = (unint64_t *)&v23->__shared_owners_;
  do
    unint64_t v55 = __ldaxr(p_shared_owners);
  while (__stlxr(v55 - 1, p_shared_owners));
  if (!v55)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }

  return 0LL;
}

  sub_CAE54((uint64_t *)v194, (uint64_t *)&v183, 1LL);
  if (v184) {
    std::__shared_weak_count::__release_weak(v184);
  }
  else {
    int v97 = (uint64_t *)v194;
  }
  sub_1FE510(&v163, (void *)v97[1], v97);
  sub_85B80((uint64_t *)v194);
  uint64_t v80 = v175[0];
  if (v175[0]) {
LABEL_170:
  }
    std::__shared_weak_count::__release_weak(v80);
LABEL_171:
  int v98 = operator new(8uLL);
  *int v98 = 0x706D627470687062LL;
  *(void *)unint64_t v194 = v98;
  *(void *)&v194[2] = v98 + 1;
  *(void *)&v194[4] = v98 + 1;
  strcpy(v195, "cwdv");
  unint64_t v196 = 0;
  unint64_t v197 = 3;
  v199 = 0LL;
  unint64_t v200 = 0LL;
  int v198 = &v199;
  unint64_t v201 = 44739242;
  uint64_t v202 = 0LL;
  uint64_t v99 = sub_546E0();
  __src = &off_479168;
  uint64_t v176 = &__src;
  sub_FFB0C((uint64_t *)&v183, v99, v194, (uint64_t)&__src);
  int v100 = v176;
  if (v176 == &__src)
  {
    CFTypeRef v101 = 4LL;
    int v100 = &__src;
  }

  else
  {
    if (!v176) {
      goto LABEL_176;
    }
    CFTypeRef v101 = 5LL;
  }

  (*((void (**)(void))*v100 + v101))();
LABEL_176:
  sub_B8E40((uint64_t *)&__src, (uint64_t)&v183, "", 3253);
  for (n = v175[0]; n != (std::__shared_weak_count *)&__src; n = (std::__shared_weak_count *)n->__shared_owners_)
  {
    if (sub_2034B8(n->__shared_weak_owners_) == 2)
    {
      uint64_t v103 = sub_578E8(*(void *)(a1 + 128), n->__shared_weak_owners_, (uint64_t)v194);
      sub_2679FC(*(void *)(a1 + 128), v103, a2);
    }
  }

  sub_1BB88((uint64_t *)&__src);
  sub_85B80((uint64_t *)&v183);
  if (v202) {
    CFRelease(v202);
  }
  sub_32C8C(v199);
  if (*(void *)v194)
  {
    *(void *)&v194[2] = *(void *)v194;
    operator delete(*(void **)v194);
  }

  uint64_t v104 = v173;
  if (v173 == &__p)
  {
    uint64_t v105 = 4LL;
    uint64_t v104 = &__p;
  }

  else
  {
    if (!v173) {
      goto LABEL_189;
    }
    uint64_t v105 = 5LL;
  }

  (*(void (**)(void))(v104->__r_.__value_.__r.__words[0] + 8 * v105))();
LABEL_189:
  if (v193) {
    CFRelease(v193);
  }
  sub_32C8C(v190);
  uint64_t v96 = *(void **)buf;
  if (*(void *)buf)
  {
    *(void *)&buf[2] = *(void *)buf;
LABEL_193:
    operator delete(v96);
  }

void sub_140F3C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf, void *__p, uint64_t a15, uint64_t a16, CFTypeRef a17, CFTypeRef a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

uint64_t sub_141220(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_48E440);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_48E440))
  {
    uint64_t v12 = (char *)operator new(0x48uLL);
    *((void *)v12 + 1) = 0LL;
    *((void *)v12 + 2) = 0LL;
    *(void *)uint64_t v12 = off_470FD0;
    *((void *)v12 + 4) = 0x263706D31LL;
    *((_DWORD *)v12 + 10) = 0;
    *(void *)(v12 + 60) = 0x100000001LL;
    *(_OWORD *)(v12 + 44) = xmmword_402D48;
    *((void *)v12 + 3) = off_47DDC0;
    qword_48E430 = (uint64_t)(v12 + 24);
    *(void *)algn_48E438 = v12;
    __cxa_guard_release(&qword_48E440);
  }

  uint64_t v5 = qword_48E430;
  uint64_t v6 = *(std::__shared_weak_count **)algn_48E438;
  if (*(void *)algn_48E438)
  {
    int v7 = (unint64_t *)(*(void *)algn_48E438 + 8LL);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  sub_143208(a3, v5, (uint64_t)v6);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  return 0LL;
}

void sub_141334(_Unwind_Exception *a1)
{
}

uint64_t sub_14135C(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_48E458);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_48E458))
  {
    sub_145C54(1819701100);
    __cxa_guard_release(&qword_48E458);
  }

  uint64_t v5 = qword_48E448;
  uint64_t v6 = (std::__shared_weak_count *)unk_48E450;
  if (unk_48E450)
  {
    int v7 = (unint64_t *)(unk_48E450 + 8LL);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  sub_143208(a3, v5, (uint64_t)v6);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  return 0LL;
}

void sub_141428(_Unwind_Exception *a1)
{
}

uint64_t sub_141450(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_48E470);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_48E470))
  {
    uint64_t v12 = operator new(0x28uLL);
    v12[1] = 0LL;
    v12[2] = 0LL;
    *uint64_t v12 = off_47E3A8;
    v12[3] = off_47E3E0;
    *((_DWORD *)v12 + 8) = 1953918828;
    qword_48E460 = (uint64_t)(v12 + 3);
    *(void *)algn_48E468 = v12;
    __cxa_guard_release(&qword_48E470);
  }

  uint64_t v5 = qword_48E460;
  uint64_t v6 = *(std::__shared_weak_count **)algn_48E468;
  if (*(void *)algn_48E468)
  {
    int v7 = (unint64_t *)(*(void *)algn_48E468 + 8LL);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  sub_145A88(a3, v5, (uint64_t)v6, 0);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  return 0LL;
}

void sub_14154C(_Unwind_Exception *a1)
{
}

uint64_t sub_141574(void *a1, uint64_t a2, void *a3)
{
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)&qword_48E488);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_48E488))
  {
    uint64_t v24 = (char *)operator new(0x48uLL);
    *((void *)v24 + 1) = 0LL;
    *((void *)v24 + 2) = 0LL;
    *(void *)uint64_t v24 = off_47E290;
    *((void *)v24 + 4) = 0x6877766F64737067LL;
    *((_DWORD *)v24 + 10) = 0;
    *(void *)(v24 + 60) = 0x100000001LL;
    *(_OWORD *)(v24 + 44) = xmmword_402D48;
    *((void *)v24 + 3) = off_47E740;
    v24[68] = 1;
    qword_48E478 = (uint64_t)(v24 + 24);
    unk_48E480 = v24;
    __cxa_guard_release(&qword_48E488);
  }

  unsigned __int8 v6 = atomic_load((unsigned __int8 *)qword_48E4A0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(qword_48E4A0))
  {
    char v25 = (char *)operator new(0x48uLL);
    *((void *)v25 + 1) = 0LL;
    *((void *)v25 + 2) = 0LL;
    *(void *)char v25 = off_47E290;
    *((void *)v25 + 4) = 0x6877766F64737067LL;
    *((_DWORD *)v25 + 10) = 0;
    *(void *)(v25 + 60) = 0x100000001LL;
    *((void *)v25 + 3) = off_47E740;
    *(_OWORD *)(v25 + 44) = xmmword_402D48;
    v25[68] = 0;
    qword_48E490 = (uint64_t)(v25 + 24);
    *(void *)algn_48E498 = v25;
    __cxa_guard_release(qword_48E4A0);
  }

  uint64_t v7 = *((unsigned __int8 *)a1 + 23);
  BOOL v8 = (v7 & 0x80u) != 0LL;
  if ((v7 & 0x80u) != 0LL) {
    uint64_t v7 = a1[1];
  }
  if (v8) {
    a1 = (void *)*a1;
  }
  if (v7 >= 11)
  {
    uint64_t v9 = (char *)a1 + v7;
    unint64_t v10 = a1;
    do
    {
      uint64_t v11 = (char *)memchr(v10, 118, v7 - 10);
      if (!v11) {
        break;
      }
      if (*(void *)v11 == 0x696C656D756C6F76LL && *(void *)(v11 + 3) == 0x74696D696C656D75LL)
      {
        uint64_t v13 = qword_48E478;
        uint64_t v14 = (std::__shared_weak_count *)unk_48E480;
        if (unk_48E480)
        {
          int v15 = (unint64_t *)(unk_48E480 + 8LL);
          do
            unint64_t v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
        }

        sub_143208(a3, v13, (uint64_t)v14);
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            unint64_t v18 = __ldaxr(p_shared_owners);
          while (__stlxr(v18 - 1, p_shared_owners));
          goto LABEL_31;
        }

        return 0LL;
      }

      unint64_t v10 = v11 + 1;
      uint64_t v7 = v9 - (_BYTE *)v10;
    }

    while (v9 - (_BYTE *)v10 >= 11);
  }

  uint64_t v19 = qword_48E490;
  uint64_t v14 = *(std::__shared_weak_count **)algn_48E498;
  if (*(void *)algn_48E498)
  {
    unint64_t v20 = (unint64_t *)(*(void *)algn_48E498 + 8LL);
    do
      unint64_t v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }

  sub_143208(a3, v19, (uint64_t)v14);
  if (v14)
  {
    unsigned int v22 = (unint64_t *)&v14->__shared_owners_;
    do
      unint64_t v18 = __ldaxr(v22);
    while (__stlxr(v18 - 1, v22));
LABEL_31:
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }

  return 0LL;
}

void sub_141820(_Unwind_Exception *a1)
{
}

uint64_t sub_14185C(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned __int8 v4 = *(const __CFDictionary **)(a1 + 152);
  if (v4) {
    CFRetain(*(CFTypeRef *)(a1 + 152));
  }
  unint64_t v29 = v4;
  sub_7D084(__p, "PortType");
  LODWORD(v27[0]) = 1886613611;
  unsigned __int8 v5 = sub_1585CC(&v29, __p, (unsigned int *)v27);
  if (SBYTE3(v34) < 0)
  {
    operator delete(*(void **)__p);
    if (!v4) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  if (v4) {
LABEL_7:
  }
    CFRelease(v4);
LABEL_8:
  if ((sub_1576EC((int)v5) & 1) == 0)
  {
    unsigned int v22 = (os_log_t *)sub_138E8(13);
    __int16 v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = "DSPGraphConfig_Actions.cpp";
      __int16 v31 = 1024;
      int v32 = 622;
      _os_log_impl(&dword_0, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if ((_DWORD)v5 == 1886613611)
  {
    unsigned __int8 v6 = atomic_load((unsigned __int8 *)&qword_48E528);
    if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_48E528))
    {
      char v25 = (char *)operator new(0x48uLL);
      *((void *)v25 + 1) = 0LL;
      *((void *)v25 + 2) = 0LL;
      *(void *)char v25 = off_470DA8;
      *((void *)v25 + 4) = -2609680281LL;
      *((_DWORD *)v25 + 10) = 0;
      *(void *)(v25 + 60) = 0x100000001LL;
      *(_OWORD *)(v25 + 44) = xmmword_402D48;
      *((void *)v25 + 3) = off_470DE0;
      qword_48E518 = (uint64_t)(v25 + 24);
      unk_48E520 = v25;
      __cxa_guard_release(&qword_48E528);
    }

    uint64_t v7 = qword_48E518;
    BOOL v8 = (std::__shared_weak_count *)unk_48E520;
    if (unk_48E520)
    {
      uint64_t v9 = (unint64_t *)(unk_48E520 + 8LL);
      do
        unint64_t v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }

    sub_143208(a3, v7, (uint64_t)v8);
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        unint64_t v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      goto LABEL_32;
    }
  }

  else
  {
    uint64_t v13 = (os_log_t *)sub_138E8(24);
    uint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_INFO))
    {
      sub_2CA1C(v27, (uint64_t)v5);
      int v15 = v28 >= 0 ? v27 : (void **)v27[0];
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = "DSPGraphConfig_Actions.cpp";
      __int16 v31 = 1024;
      int v32 = 638;
      __int16 v33 = 2080;
      uint64_t v34 = v15;
      _os_log_impl(&dword_0, v14, OS_LOG_TYPE_INFO, "%25s:%-5d Default Volume taper command for port %s.", __p, 0x1Cu);
      if (v28 < 0) {
        operator delete(v27[0]);
      }
    }

    unsigned __int8 v16 = atomic_load((unsigned __int8 *)&qword_48E540);
    if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_48E540))
    {
      unint64_t v26 = (char *)operator new(0x48uLL);
      *((void *)v26 + 1) = 0LL;
      *((void *)v26 + 2) = 0LL;
      *(void *)unint64_t v26 = off_470DA8;
      *((void *)v26 + 4) = -2609680281LL;
      *((_DWORD *)v26 + 10) = 0;
      *(void *)(v26 + 60) = 0x100000001LL;
      *(_OWORD *)(v26 + 44) = xmmword_402D48;
      *((void *)v26 + 3) = off_470DE0;
      qword_48E530 = (uint64_t)(v26 + 24);
      *(void *)algn_48E538 = v26;
      __cxa_guard_release(&qword_48E540);
    }

    uint64_t v17 = qword_48E530;
    BOOL v8 = *(std::__shared_weak_count **)algn_48E538;
    if (*(void *)algn_48E538)
    {
      unint64_t v18 = (unint64_t *)(*(void *)algn_48E538 + 8LL);
      do
        unint64_t v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }

    sub_143208(a3, v17, (uint64_t)v8);
    if (v8)
    {
      unint64_t v20 = (unint64_t *)&v8->__shared_owners_;
      do
        unint64_t v12 = __ldaxr(v20);
      while (__stlxr(v12 - 1, v20));
LABEL_32:
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }

  return 0LL;
}

void sub_141C34(_Unwind_Exception *a1)
{
}

uint64_t sub_141CFC(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)&qword_48E428);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_48E428))
  {
    sub_14319C();
    __cxa_guard_release(&qword_48E428);
  }

  uint64_t v5 = qword_48E418;
  unsigned __int8 v6 = (std::__shared_weak_count *)qword_48E420;
  if (qword_48E420)
  {
    uint64_t v7 = (unint64_t *)(qword_48E420 + 8);
    do
      unint64_t v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }

  sub_143208(a3, v5, (uint64_t)v6);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }

  return 0LL;
}

void sub_141DC0(_Unwind_Exception *a1)
{
}

uint64_t *sub_141DE8(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_DWORD *)a1 + 8) = 1065353216;
  if (a3)
  {
    uint64_t v5 = a2;
    unsigned __int8 v6 = &a2[10 * a3];
    uint64_t v7 = a1 + 2;
    do
    {
      unint64_t v8 = *v5;
      unint64_t v9 = a1[1];
      if (v9)
      {
        uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        if (v10.u32[0] > 1uLL)
        {
          unint64_t v3 = *v5;
          if (v9 <= v8) {
            unint64_t v3 = v8 % v9;
          }
        }

        else
        {
          unint64_t v3 = ((_DWORD)v9 - 1) & v8;
        }

        uint64_t v11 = *(uint64_t ***)(*a1 + 8 * v3);
        if (v11)
        {
          for (uint64_t i = *v11; i; uint64_t i = (uint64_t *)*i)
          {
            unint64_t v13 = i[1];
            if (v13 == v8)
            {
              if (*((_DWORD *)i + 4) == (_DWORD)v8) {
                goto LABEL_80;
              }
            }

            else
            {
              if (v10.u32[0] > 1uLL)
              {
                if (v13 >= v9) {
                  v13 %= v9;
                }
              }

              else
              {
                v13 &= v9 - 1;
              }

              if (v13 != v3) {
                break;
              }
            }
          }
        }
      }

      uint64_t v14 = operator new(0x38uLL);
      void *v14 = 0LL;
      v14[1] = v8;
      *((_DWORD *)v14 + 4) = v8;
      uint64_t v15 = *((void *)v5 + 4);
      if (v15)
      {
        if ((unsigned int *)v15 == v5 + 2)
        {
          v14[6] = v14 + 3;
          (*(void (**)(uint64_t))(*(void *)v15 + 24LL))(v15);
          goto LABEL_24;
        }

        uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 16LL))(v15);
      }

      v14[6] = v15;
LABEL_24:
      float v16 = (float)(unint64_t)(a1[3] + 1);
      float v17 = *((float *)a1 + 8);
      if (!v9 || (float)(v17 * (float)v9) < v16)
      {
        BOOL v18 = (v9 & (v9 - 1)) != 0;
        if (v9 < 3) {
          BOOL v18 = 1LL;
        }
        unint64_t v19 = v18 | (2 * v9);
        unint64_t v20 = vcvtps_u32_f32(v16 / v17);
        if (v19 <= v20) {
          int8x8_t prime = (int8x8_t)v20;
        }
        else {
          int8x8_t prime = (int8x8_t)v19;
        }
        if (*(void *)&prime == 1LL)
        {
          int8x8_t prime = (int8x8_t)2LL;
        }

        else if ((*(void *)&prime & (*(void *)&prime - 1LL)) != 0)
        {
          int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
        }

        unint64_t v9 = a1[1];
        if (*(void *)&prime <= v9)
        {
          if (*(void *)&prime < v9)
          {
            unint64_t v28 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
            if (v9 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
            {
              unint64_t v28 = std::__next_prime(v28);
            }

            else
            {
              uint64_t v30 = 1LL << -(char)__clz(v28 - 1);
              if (v28 >= 2) {
                unint64_t v28 = v30;
              }
            }

            if (*(void *)&prime <= v28) {
              int8x8_t prime = (int8x8_t)v28;
            }
            if (*(void *)&prime >= v9)
            {
              unint64_t v9 = a1[1];
            }

            else
            {
              if (prime) {
                goto LABEL_36;
              }
              uint64_t v36 = (void *)*a1;
              *a1 = 0LL;
              if (v36) {
                operator delete(v36);
              }
              unint64_t v9 = 0LL;
              a1[1] = 0LL;
            }
          }
        }

        else
        {
LABEL_36:
          if (*(void *)&prime >> 61) {
            sub_7A8C4();
          }
          unsigned int v22 = operator new(8LL * *(void *)&prime);
          __int16 v23 = (void *)*a1;
          *a1 = (uint64_t)v22;
          if (v23) {
            operator delete(v23);
          }
          uint64_t v24 = 0LL;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v24++) = 0LL;
          while (*(void *)&prime != v24);
          char v25 = (void *)*v7;
          if (*v7)
          {
            unint64_t v26 = v25[1];
            uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(void *)&prime) {
                v26 %= *(void *)&prime;
              }
            }

            else
            {
              v26 &= *(void *)&prime - 1LL;
            }

            *(void *)(*a1 + 8 * v26) = v7;
            __int16 v31 = (void *)*v25;
            if (*v25)
            {
              do
              {
                unint64_t v32 = v31[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(void *)&prime) {
                    v32 %= *(void *)&prime;
                  }
                }

                else
                {
                  v32 &= *(void *)&prime - 1LL;
                }

                if (v32 != v26)
                {
                  if (!*(void *)(*a1 + 8 * v32))
                  {
                    *(void *)(*a1 + 8 * vsub_7A768(v9 - 32) = v25;
                    goto LABEL_61;
                  }

                  *char v25 = *v31;
                  void *v31 = **(void **)(*a1 + 8 * v32);
                  **(void **)(*a1 + 8 * vsub_7A768(v9 - 32) = v31;
                  __int16 v31 = v25;
                }

                unint64_t v32 = v26;
LABEL_61:
                char v25 = v31;
                __int16 v31 = (void *)*v31;
                unint64_t v26 = v32;
              }

              while (v31);
            }
          }

          unint64_t v9 = (unint64_t)prime;
        }

        if ((v9 & (v9 - 1)) != 0)
        {
          if (v9 <= v8) {
            unint64_t v3 = v8 % v9;
          }
          else {
            unint64_t v3 = v8;
          }
        }

        else
        {
          unint64_t v3 = ((_DWORD)v9 - 1) & v8;
        }
      }

      uint64_t v33 = *a1;
      uint64_t v34 = *(void **)(*a1 + 8 * v3);
      if (v34)
      {
        void *v14 = *v34;
      }

      else
      {
        void *v14 = *v7;
        void *v7 = v14;
        *(void *)(v33 + 8 * v3) = v7;
        if (!*v14) {
          goto LABEL_79;
        }
        unint64_t v35 = *(void *)(*v14 + 8LL);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v35 >= v9) {
            v35 %= v9;
          }
        }

        else
        {
          v35 &= v9 - 1;
        }

        uint64_t v34 = (void *)(*a1 + 8 * v35);
      }

      void *v34 = v14;
LABEL_79:
      ++a1[3];
LABEL_80:
      v5 += 10;
    }

    while (v5 != v6);
  }

  return a1;
}

void sub_142228(_Unwind_Exception *a1)
{
}

void sub_142260(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = (_OWORD *)(a1 + 48);
  unsigned __int8 v6 = operator new(0xB8uLL);
  uint64_t v7 = v6;
  uint64_t v8 = *a2;
  unint64_t v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      unint64_t v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
  }

  sub_142498((uint64_t)v6, v5, v8, v9);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  *a3 = v7;
}

void sub_1422D4(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1422F4(uint64_t *a1@<X1>, void *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  *(double *)&__int128 v12 = a3;
  *((double *)&v12 + 1) = a4;
  unsigned __int8 v6 = operator new(0xB8uLL);
  uint64_t v7 = v6;
  uint64_t v8 = *a1;
  unint64_t v9 = (std::__shared_weak_count *)a1[1];
  if (v9)
  {
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      unint64_t v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
  }

  sub_142498((uint64_t)v6, &v12, v8, v9);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  *a2 = v7;
}

void sub_142370(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_142390()
{
  return 1685287015LL;
}

uint64_t sub_14239C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_1423A4(uint64_t a1)
{
  *(void *)a1 = &off_47DE78;
  if (*(_BYTE *)(a1 + 112)) {
    sub_32C8C(*(void **)(a1 + 80));
  }
  return a1;
}

void sub_1423E0(void **__p)
{
  *std::string __p = &off_47DE78;
  if (*((_BYTE *)__p + 112)) {
    sub_32C8C(__p[10]);
  }
  operator delete(__p);
}

void sub_14241C(void (***a1)(void, uint64_t *), uint64_t *a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  uint64_t v5 = *a2;
  unsigned __int8 v6 = v2;
  if (v2)
  {
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      unint64_t v4 = __ldxr(p_shared_weak_owners);
    while (__stxr(v4 + 1, p_shared_weak_owners));
  }

  (**a1)(a1, &v5);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_142478( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_142498(uint64_t a1, _OWORD *a2, uint64_t a3, std::__shared_weak_count *a4)
{
  if (a4)
  {
    p_shared_weak_owners = (unint64_t *)&a4->__shared_weak_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
  }

  v9[0] = 0;
  char v11 = 0;
  sub_142544(a1, a2, a3, a4, (uint64_t)v9);
  if (v11) {
    sub_32C8C(v10);
  }
  if (a4) {
    std::__shared_weak_count::__release_weak(a4);
  }
  *(void *)(a1 + 152) = 0x76657167766F6C75LL;
  return a1;
}

void sub_14251C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a16) {
    sub_32C8C(a12);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_142544(uint64_t a1, _OWORD *a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5)
{
  int v9 = *(unsigned __int8 *)(a5 + 48);
  if (a4)
  {
    p_shared_weak_owners = (unint64_t *)&a4->__shared_weak_owners_;
    do
      unint64_t v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
  }

  sub_14285C((uint64_t)v25, a5);
  if (v9) {
    int v12 = 1935895666;
  }
  else {
    int v12 = 1684234860;
  }
  sub_1428CC((void *)a1, v12, a3, a4, (uint64_t)v25);
  if (v27) {
    sub_32C8C(v26);
  }
  if (a4) {
    std::__shared_weak_count::__release_weak(a4);
  }
  *(void *)a1 = off_47FA00;
  *(_OWORD *)(a1 + sub_51FA0(v10 + 128) = *a2;
  *(float *)(a1 + 144) = sub_142998((double *)a1);
  *(void *)(a1 + 1sub_51FA0(v10 + 48) = 0x700000001LL;
  *(_DWORD *)(a1 + 156) = 5;
  *(void *)(a1 + 176) = 0x100000001LL;
  *(_OWORD *)(a1 + 160) = xmmword_402D48;
  if (*(double *)(a1 + 136) < *(double *)(a1 + 128))
  {
    unint64_t v13 = (os_log_t *)sub_138E8(13);
    uint64_t v14 = *v13;
    if (*v13)
    {
      if (os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
      {
        double v15 = *(double *)(a1 + 128);
        double v16 = *(double *)(a1 + 136);
        *(_DWORD *)buf = 136315906;
        uint8x8_t v29 = "VolumeControl.h";
        __int16 v30 = 1024;
        int v31 = 1336;
        __int16 v32 = 2048;
        double v33 = v15;
        __int16 v34 = 2048;
        double v35 = v16;
        _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Encountered an invalid range for the variable EQ's current gain parameter: [%f, %f]",  buf,  0x26u);
      }
    }
  }

  if (*(_BYTE *)(a1 + 88))
  {
    double v17 = *(void *)(a1 + 64) ? *(float *)(*(void *)(a1 + 48) + 36LL) : 0.0;
    if (*(double *)(a1 + 128) != v17 || *(double *)(a1 + 136) != sub_6461C(a1 + 40))
    {
      BOOL v18 = (os_log_t *)sub_138E8(13);
      unint64_t v19 = *v18;
      if (*v18)
      {
        if (os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
        {
          if (*(void *)(a1 + 64)) {
            double v20 = *(float *)(*(void *)(a1 + 48) + 36LL);
          }
          else {
            double v20 = 0.0;
          }
          float v21 = sub_6461C(a1 + 40);
          uint64_t v22 = *(void *)(a1 + 128);
          uint64_t v23 = *(void *)(a1 + 136);
          *(_DWORD *)buf = 136316418;
          uint8x8_t v29 = "VolumeControl.h";
          __int16 v30 = 1024;
          int v31 = 1341;
          __int16 v32 = 2048;
          double v33 = v20;
          __int16 v34 = 2048;
          double v35 = v21;
          __int16 v36 = 2048;
          uint64_t v37 = v22;
          __int16 v38 = 2048;
          uint64_t v39 = v23;
          _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: VolumeCurve's range [%f, %f] doesn't match volume range of command [%f, %f]",  buf,  0x3Au);
        }
      }
    }
  }

  return a1;
}

void sub_142814(_Unwind_Exception *a1)
{
}

uint64_t sub_14285C(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + sub_51FA0(v10 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    sub_142EF4(a1 + 8, (void *)(a2 + 8));
    *(_OWORD *)(a1 + sub_7A768(v9 - 32) = *(_OWORD *)(a2 + 32);
    *(_BYTE *)(a1 + sub_51FA0(v10 + 48) = 1;
  }

  return a1;
}

void sub_1428B0(_Unwind_Exception *exception_object)
{
  if (*(_BYTE *)(v1 + 48)) {
    sub_32C8C(*(void **)(v1 + 16));
  }
  _Unwind_Resume(exception_object);
}

void *sub_1428CC(void *a1, int a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5)
{
  v14[0] = a3;
  v14[1] = a4;
  if (a4)
  {
    p_shared_weak_owners = (unint64_t *)&a4->__shared_weak_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }

  sub_14285C((uint64_t)v11, a5);
  sub_2BCDE4((uint64_t)a1, a2, v14, (uint64_t)v11);
  if (v13) {
    sub_32C8C(v12);
  }
  if (a4) {
    std::__shared_weak_count::__release_weak(a4);
  }
  *a1 = off_47ED98;
  return a1;
}

void sub_142968( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a16) {
    sub_32C8C(a12);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  _Unwind_Resume(exception_object);
}

float sub_142998(double *a1)
{
  int v2 = (*(uint64_t (**)(double *))(*(void *)a1 + 136LL))(a1);
  float result = 0.0;
  if (v2 != 1935895666)
  {
    if (v2 != 1684234860)
    {
      int v4 = v2;
      uint64_t v5 = (os_log_t *)sub_138E8(13);
      unsigned __int8 v6 = *v5;
      if (*v5)
      {
        if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
        {
          int v8 = 136315650;
          unint64_t v9 = "VolumeControl.h";
          __int16 v10 = 1024;
          int v11 = 1397;
          __int16 v12 = 1024;
          int v13 = v4;
          _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Encountered an invalid volume unit type: %d",  (uint8_t *)&v8,  0x18u);
        }
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Encountered an invalid volume unit type: %d");
    }

    return a1[16];
  }

  return result;
}

void sub_142ACC(_Unwind_Exception *exception_object)
{
}

void sub_142AEC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2BC604(a1);
  operator delete(v1);
}

uint64_t sub_142B08()
{
  return 0LL;
}

float sub_142B10()
{
  return 0.0;
}

float sub_142B18()
{
  return 0.0;
}

uint64_t sub_142B20()
{
  return 0LL;
}

uint64_t sub_142B30()
{
  return 0LL;
}

uint64_t sub_142B3C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 88)) {
    return a1 + 40;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_142B50()
{
  return 0LL;
}

uint64_t sub_142B68()
{
  return 0LL;
}

uint64_t sub_142B70()
{
  return 0LL;
}

void sub_142B78()
{
  uint64_t v0 = (os_log_t *)sub_138E8(13);
  uint64_t v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      int v4 = "VolumeControl.h";
      __int16 v5 = 1024;
      int v6 = 410;
      _os_log_impl( &dword_0,  v1,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): SoftwareVolumeCommand does not supports dB to Scalar convertion",  (uint8_t *)&v3,  0x12u);
    }
  }

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "SoftwareVolumeCommand does not supports dB to Scalar convertion");
}

void sub_142C38(_Unwind_Exception *exception_object)
{
}

void sub_142C54()
{
  uint64_t v0 = (os_log_t *)sub_138E8(13);
  uint64_t v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      int v4 = "VolumeControl.h";
      __int16 v5 = 1024;
      int v6 = 416;
      _os_log_impl( &dword_0,  v1,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): SoftwareVolumeCommand does not supports dB to Scalar convertion",  (uint8_t *)&v3,  0x12u);
    }
  }

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "SoftwareVolumeCommand does not supports dB to Scalar convertion");
}

void sub_142D14(_Unwind_Exception *exception_object)
{
}

void sub_142D38(uint64_t a1, uint64_t a2, int a3, float a4, float a5)
{
  __int16 v10 = (os_log_t *)sub_138E8(38);
  int v11 = *v10;
  if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
  {
    sub_2CA1C(v19, a2);
    int v12 = v20;
    int v13 = (void **)v19[0];
    sub_665BC((uint64_t)__p, a1);
    uint64_t v22 = "VolumeControl.h";
    uint64_t v14 = v19;
    if (v12 < 0) {
      uint64_t v14 = v13;
    }
    __int16 v23 = 1024;
    int v24 = 313;
    unint64_t v26 = v14;
    double v15 = "disabled";
    *(_DWORD *)buf = 136316674;
    if (a3) {
      double v15 = "enabled";
    }
    __int16 v25 = 2080;
    if (v18 >= 0) {
      double v16 = __p;
    }
    else {
      double v16 = (void **)__p[0];
    }
    __int16 v27 = 2080;
    unint64_t v28 = v15;
    __int16 v29 = 2048;
    double v30 = a4;
    __int16 v31 = 2048;
    double v32 = a5;
    __int16 v33 = 2080;
    __int16 v34 = v16;
    _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Volume ducking is not supported for this volume command, %s type: %s, gain: %f, time: %f, chain: '%s'.",  buf,  0x44u);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    if (v20 < 0) {
      operator delete(v19[0]);
    }
  }

void sub_142ECC(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_142EEC()
{
  return 0LL;
}

uint64_t sub_142EF4(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0LL;
  int v3 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  int v4 = a2 + 1;
  __int16 v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      int v6 = *(uint64_t **)(a1 + 8);
      unint64_t v7 = v3;
      uint64_t v8 = *(void *)(a1 + 8);
      unint64_t v9 = v3;
      if (v6)
      {
        do
        {
          unint64_t v7 = (uint64_t **)v8;
          uint64_t v8 = *(void *)(v8 + 8);
        }

        while (v8);
      }

      else
      {
        do
        {
          unint64_t v7 = (uint64_t **)v9[2];
          BOOL v10 = *v7 == (uint64_t *)v9;
          unint64_t v9 = v7;
        }

        while (v10);
      }

      int v11 = *((_DWORD *)v5 + 7);
      if (*((_DWORD *)v7 + 7) < v11)
      {
LABEL_8:
        if (v6) {
          int v12 = v7;
        }
        else {
          int v12 = v3;
        }
        if (v6) {
          int v13 = v7 + 1;
        }
        else {
          int v13 = v3;
        }
      }

      else
      {
        int v12 = v3;
        int v13 = v3;
        if (v6)
        {
          int v13 = v3;
          while (1)
          {
            while (1)
            {
              int v12 = (uint64_t **)v6;
              int v17 = *((_DWORD *)v6 + 7);
              if (v11 >= v17) {
                break;
              }
              int v6 = *v12;
              int v13 = v12;
              if (!*v12) {
                goto LABEL_15;
              }
            }

            if (v17 >= v11) {
              break;
            }
            int v13 = v12 + 1;
            int v6 = v12[1];
            if (!v6) {
              goto LABEL_15;
            }
          }
        }
      }

      if (!*v13)
      {
LABEL_15:
        uint64_t v14 = (uint64_t *)operator new(0x30uLL);
        *(uint64_t *)((char *)v14 + 28) = *(void *)((char *)v5 + 28);
        *(uint64_t *)((char *)v14 + 36) = *(void *)((char *)v5 + 36);
        sub_32C38((uint64_t **)a1, (uint64_t)v12, v13, v14);
      }

      double v15 = (void *)v5[1];
      if (v15)
      {
        do
        {
          double v16 = v15;
          double v15 = (void *)*v15;
        }

        while (v15);
      }

      else
      {
        do
        {
          double v16 = (void *)v5[2];
          BOOL v10 = *v16 == (void)v5;
          __int16 v5 = v16;
        }

        while (!v10);
      }

      __int16 v5 = v16;
    }

    while (v16 != v4);
  }

  return a1;
}

void sub_14305C(_Unwind_Exception *a1)
{
}

void sub_143070(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_47DE00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_143080(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_47DE00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1430A0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 32LL))(a1 + 24);
}

uint64_t sub_1430B0(uint64_t a1)
{
  int v2 = *(void **)(a1 + 16);
  if (v2)
  {
    while (1)
    {
      int v3 = (void *)*v2;
      int v4 = (void *)v2[6];
      if (v4 == v2 + 3) {
        break;
      }
      if (v4)
      {
        uint64_t v5 = 5LL;
LABEL_6:
        (*(void (**)(void))(*v4 + 8 * v5))();
      }

      operator delete(v2);
      int v2 = v3;
      if (!v3) {
        goto LABEL_8;
      }
    }

    int v4 = v2 + 3;
    uint64_t v5 = 4LL;
    goto LABEL_6;
  }

void sub_143134(char a1, void *__p)
{
  if (a1)
  {
    int v3 = (void *)__p[6];
    if (v3 == __p + 3)
    {
      uint64_t v4 = 4LL;
      int v3 = __p + 3;
      goto LABEL_8;
    }

    if (v3)
    {
      uint64_t v4 = 5LL;
LABEL_8:
      (*(void (**)(void))(*v3 + 8 * v4))();
    }

uint64_t sub_14319C()
{
  uint64_t v0 = (char *)operator new(0x48uLL);
  *((void *)v0 + 1) = 0LL;
  *((void *)v0 + 2) = 0LL;
  *(void *)uint64_t v0 = off_470E20;
  *((void *)v0 + 4) = -2609680281LL;
  *((_DWORD *)v0 + 10) = 0;
  *(void *)(v0 + 60) = 0x100000001LL;
  *(_OWORD *)(v0 + 44) = *(_OWORD *)"rulb";
  qword_48E420 = (uint64_t)v0;
  *((void *)v0 + 3) = off_470E58;
  uint64_t result = (uint64_t)(v0 + 24);
  qword_48E418 = result;
  return result;
}

void sub_143208(void *a1, uint64_t a2, uint64_t a3)
{
  *(void *)&__int128 v22 = a2;
  *((void *)&v22 + 1) = a3;
  if (a3)
  {
    uint64_t v4 = (unint64_t *)(a3 + 8);
    do
      unint64_t v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }

  unint64_t v6 = a1[22];
  unint64_t v7 = a1[23];
  if (v6 < v7)
  {
    *(_OWORD *)unint64_t v6 = v22;
    *(_DWORD *)(v6 + 16) = 0;
    uint64_t v8 = (char *)(v6 + 24);
    a1[22] = v6 + 24;
    goto LABEL_19;
  }

  uint64_t v9 = a1[21];
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v9) >> 3);
  unint64_t v11 = v10 + 1;
  if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_7A87C();
  }
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v9) >> 3);
  if (2 * v12 > v11) {
    unint64_t v11 = 2 * v12;
  }
  if (v12 >= 0x555555555555555LL) {
    unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v13 = v11;
  }
  uint64_t v14 = (char *)sub_8D44C(v13);
  double v15 = &v14[24 * v10];
  int v17 = &v14[24 * v16];
  *(_OWORD *)double v15 = v22;
  *((_DWORD *)v15 + 4) = 0;
  uint64_t v8 = v15 + 24;
  unint64_t v19 = (char *)a1[21];
  char v18 = (char *)a1[22];
  if (v18 == v19)
  {
    a1[21] = v15;
    a1[22] = v8;
    a1[23] = v17;
    if (!v18) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }

  do
  {
    __int128 v20 = *(_OWORD *)(v18 - 24);
    v18 -= 24;
    *(_OWORD *)(v15 - 24) = v20;
    v15 -= 24;
    *(void *)char v18 = 0LL;
    *((void *)v18 + 1) = 0LL;
    *((_DWORD *)v15 + 4) = *((_DWORD *)v18 + 4);
  }

  while (v18 != v19);
  float v21 = (char *)a1[21];
  char v18 = (char *)a1[22];
  a1[21] = v15;
  a1[22] = v8;
  a1[23] = v17;
  if (v18 != v21)
  {
    do
      char v18 = (char *)sub_7A768((uint64_t)(v18 - 24));
    while (v18 != v21);
    char v18 = v21;
  }

  if (v18) {
LABEL_18:
  }
    operator delete(v18);
LABEL_19:
  a1[22] = v8;
}

void sub_143368( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_14337C(uint64_t *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = operator new(0xA8uLL);
  uint64_t v5 = (uint64_t)v4;
  uint64_t v6 = *a1;
  unint64_t v7 = (std::__shared_weak_count *)a1[1];
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
    do
      unint64_t v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
  }

  sub_143570((uint64_t)v4, 1935895666, -1, -1, (__int128 *)"rulb", v6, v7);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  *(void *)uint64_t v5 = &off_470E98;
  *(_DWORD *)(v5 + 160) = 1;
  unint64_t v11 = (os_log_t *)sub_138E8(41);
  unint64_t v12 = *v11;
  if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEBUG))
  {
    sub_665BC((uint64_t)__p, v5);
    unint64_t v13 = v15 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315650;
    int v17 = "VolumeControl.h";
    __int16 v18 = 1024;
    int v19 = 861;
    __int16 v20 = 2080;
    float v21 = v13;
    _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d SoftwareVolumeCommand_AudioBlur_Graph::SoftwareVolumeCommand_AudioBlur_Graph() - creating audio blur com mand for chain '%s'.",  buf,  0x1Cu);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
  }

  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  *a2 = v5;
}

void sub_143514(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_143554()
{
  return 1685287015LL;
}

uint64_t sub_143560(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_143570( uint64_t a1, int a2, int a3, int a4, __int128 *a5, uint64_t a6, std::__shared_weak_count *a7)
{
  if (a7)
  {
    p_shared_weak_owners = (unint64_t *)&a7->__shared_weak_owners_;
    do
      unint64_t v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
  }

  sub_143C1C((void *)a1, a2, a6, a7);
  if (a7) {
    std::__shared_weak_count::__release_weak(a7);
  }
  *(void *)a1 = &off_47EC60;
  *(_DWORD *)(a1 + sub_51FA0(v10 + 128) = a3;
  *(_DWORD *)(a1 + 1sub_7A768(v9 - 32) = a4;
  __int128 v14 = *a5;
  *(void *)(a1 + 152) = *((void *)a5 + 2);
  *(_OWORD *)(a1 + 136) = v14;
  return a1;
}

void sub_143604(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_143620(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2BC604(a1);
  operator delete(v1);
}

void sub_143638(unsigned int *a1, uint64_t a2, int a3, float a4, float a5)
{
  int v42 = a3;
  if (a1[34])
  {
    unint64_t v10 = (os_log_t *)sub_138E8(38);
    unint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
    {
      if (a3) {
        unint64_t v12 = "enabled";
      }
      else {
        unint64_t v12 = "disabled";
      }
      unint64_t v13 = v40;
      sub_2CA1C(v40, a1[34]);
      if (v41 < 0) {
        unint64_t v13 = (void **)v40[0];
      }
      sub_2CA1C(v38, a2);
      int v14 = v39;
      char v15 = (void **)v38[0];
      sub_665BC((uint64_t)__p, (uint64_t)a1);
      *(void *)&uint8_t buf[4] = "VolumeControl.h";
      uint64_t v16 = v38;
      if (v14 < 0) {
        uint64_t v16 = v15;
      }
      *(_DWORD *)buf = 136316930;
      __int16 v44 = 1024;
      if (v37 >= 0) {
        int v17 = __p;
      }
      else {
        int v17 = (void **)__p[0];
      }
      int v45 = 576;
      __int16 v46 = 2080;
      CFIndex v47 = (void *)v12;
      __int16 v48 = 2080;
      double v49 = v13;
      __int16 v50 = 2080;
      char v51 = v16;
      __int16 v52 = 2048;
      double v53 = a4;
      __int16 v54 = 2048;
      double v55 = a5;
      __int16 v56 = 2080;
      unint64_t v57 = v17;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Set Duck command  %s, mParameterID: '%s', type: '%s', gain: %f, time: %f, chain: '%s'.",  buf,  0x4Eu);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
      if (v39 < 0) {
        operator delete(v38[0]);
      }
      if (v41 < 0) {
        operator delete(v40[0]);
      }
    }

    if ((_DWORD)a2 != 1)
    {
      __int16 v18 = (os_log_t *)sub_138E8(13);
      int v19 = *v18;
      if (*v18)
      {
        if (os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(v40, a2);
          __int16 v20 = v41 >= 0 ? v40 : (void **)v40[0];
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "VolumeControl.h";
          __int16 v44 = 1024;
          int v45 = 578;
          __int16 v46 = 2080;
          CFIndex v47 = v20;
          _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: duck type: '%s' not supported!",  buf,  0x1Cu);
          if (v41 < 0) {
            operator delete(v40[0]);
          }
        }
      }
    }

    *(_DWORD *)buf = a1[35];
    CFNumberRef v21 = CFNumberCreate(0LL, kCFNumberIntType, buf);
    v38[0] = v21;
    if (!v21)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }

    *(_DWORD *)buf = a1[36];
    CFNumberRef v22 = CFNumberCreate(0LL, kCFNumberIntType, buf);
    __p[0] = v22;
    if (!v22)
    {
      __int16 v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v31, "Could not construct");
    }

    *(_DWORD *)buf = a1[37];
    CFNumberRef v23 = CFNumberCreate(0LL, kCFNumberIntType, buf);
    CFNumberRef v35 = v23;
    if (!v23)
    {
      double v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v32, "Could not construct");
    }

    float v24 = a5 * 1000.0;
    unsigned int v25 = a1[38];
    if (a1[39] != 1) {
      float v24 = a5;
    }
    float v34 = v24;
    if (v25 == 1) {
      a4 = log10f(a4) * 20.0;
    }
    float v33 = a4;
    sub_78C54(buf, v21, &v42);
    sub_78D30((int *)((char *)&v45 + 2), v22, (int *)&v33);
    sub_78D30((void ***)((char *)&v49 + 2), v23, (int *)&v34);
    v40[0] = buf;
    v40[1] = &dword_0 + 3;
    CFDictionaryRef v26 = sub_5A950((uint64_t)v40);
    for (uint64_t i = 0LL; i != -6; i -= 2LL)
    {
      unint64_t v28 = (&v51)[i];
      if (v28) {
        CFRelease(v28);
      }
      __int16 v29 = *(void ***)((char *)&(&v49)[i] + 2);
      if (v29) {
        CFRelease(v29);
      }
    }

    *(void *)buf = v26;
    sub_78E0C((uint64_t)a1, 1685287015LL, a1[34]);
    CFRelease(v26);
    CFRelease(v23);
    CFRelease(v22);
    CFRelease(v21);
  }

void sub_143ADC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24, void *a25, uint64_t a26, int a27, __int16 a28, char a29, char a30, uint64_t a31, char a32)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_143BFC(uint64_t a1)
{
  return *(_DWORD *)(a1 + 136) != 0;
}

uint64_t sub_143C0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 160) = a2;
  return result;
}

uint64_t sub_143C14(uint64_t a1)
{
  return *(unsigned int *)(a1 + 160);
}

void *sub_143C1C(void *a1, int a2, uint64_t a3, std::__shared_weak_count *a4)
{
  if (a4)
  {
    p_shared_weak_owners = (unint64_t *)&a4->__shared_weak_owners_;
    do
      unint64_t v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
  }

  sub_2BCE7C((uint64_t)a1, a2, a3, a4);
  if (a4) {
    std::__shared_weak_count::__release_weak(a4);
  }
  *a1 = off_47ED98;
  return a1;
}

void sub_143C7C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_143C98(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2BC604(a1);
  operator delete(v1);
}

void sub_143CAC(uint64_t a1, float a2)
{
  uint64_t v4 = sub_138E8(18);
  uint64_t v5 = sub_138E8(38);
  char v6 = 0;
  uint64_t v7 = 0LL;
  *(void *)buf = 0x100000002LL;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = *(int *)&buf[4 * v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1LL;
    if ((v10 & 1) != 0) {
      goto LABEL_7;
    }
  }

  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
LABEL_7:
  unint64_t v11 = *(os_log_s **)v4;
  if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    sub_665BC((uint64_t)__p, a1);
    if (v14 >= 0) {
      unint64_t v12 = __p;
    }
    else {
      unint64_t v12 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "VolumeControl.h";
    __int16 v16 = 1024;
    int v17 = 541;
    __int16 v18 = 2048;
    double v19 = a2;
    __int16 v20 = 2080;
    CFNumberRef v21 = v12;
    _os_log_impl(&dword_0, v11, OS_LOG_TYPE_INFO, "%25s:%-5d Setting volume %.2f for chain '%s'.", buf, 0x26u);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }

  sub_666C4(a1, 1685287015LL, *(unsigned int *)(a1 + 128), a2);
}

BOOL sub_143E48(uint64_t a1)
{
  float v2 = 0.0;
  sub_64DF8(a1, 1685287015LL, *(unsigned int *)(a1 + 132), &v2);
  return v2 == 0.0;
}

void sub_143E84(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_470E20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_143E94(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_470E20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_143EB4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 32LL))(a1 + 24);
}

void sub_143EC4(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xF8uLL);
  uint64_t v5 = v4;
  uint64_t v6 = *a1;
  uint64_t v7 = (std::__shared_weak_count *)a1[1];
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      unint64_t v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }

  sub_143F60((uint64_t)v4, v6, v7, 1, 0);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  *a2 = v5;
}

void sub_143F38(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_143F60(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, int a4, int a5)
{
  if (a3)
  {
    p_shared_weak_owners = (unint64_t *)&a3->__shared_weak_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
  }

  sub_143C1C((void *)a1, 1935895666, a2, a3);
  if (a3) {
    std::__shared_weak_count::__release_weak(a3);
  }
  *(void *)a1 = off_47DFA8;
  *(void *)(a1 + 152) = 0LL;
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 164) = 0;
  *(_DWORD *)(a1 + 168) = a4;
  *(_DWORD *)(a1 + 172) = a5;
  std::recursive_mutex::recursive_mutex((std::recursive_mutex *)(a1 + 176));
  *(_DWORD *)(a1 + 240) = 1987341684;
  unint64_t v11 = (os_log_t *)sub_138E8(41);
  unint64_t v12 = *v11;
  if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEBUG))
  {
    sub_665BC((uint64_t)__p, a1);
    unint64_t v13 = (void **)__p[0];
    char v14 = " does not ";
    if (v18 >= 0) {
      unint64_t v13 = __p;
    }
    if (*(_DWORD *)(a1 + 168)) {
      char v15 = " does not ";
    }
    else {
      char v15 = " ";
    }
    if (!*(_DWORD *)(a1 + 172)) {
      char v14 = " ";
    }
    *(_DWORD *)buf = 136316162;
    __int16 v20 = "VolumeControl.h";
    __int16 v21 = 1024;
    int v22 = 1614;
    __int16 v23 = 2080;
    float v24 = v13;
    __int16 v25 = 2080;
    CFDictionaryRef v26 = v15;
    __int16 v27 = 2080;
    unint64_t v28 = v14;
    _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d SoftwareVolumeCommand_VolumeTaper_Graph::SoftwareVolumeCommand_VolumeTaper_Graph() - creating volume tap er command for chain '%s'. Volume command%ssupports volume ramping. Volume command%ssupports unit convertion",  buf,  0x30u);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
  }

  return a1;
}

void sub_144114(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v1 + 152);
  if (v4 == (void *)(v1 + 128))
  {
    uint64_t v5 = 4LL;
    uint64_t v4 = (void *)(v1 + 128);
  }

  else
  {
    if (!v4) {
      goto LABEL_6;
    }
    uint64_t v5 = 5LL;
  }

  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  sub_2BC604(v1);
  _Unwind_Resume(a1);
}

void sub_14416C()
{
  if (v0) {
    std::__shared_weak_count::__release_weak(v0);
  }
  JUMPOUT(0x144164LL);
}

uint64_t sub_144180(uint64_t a1)
{
  *(void *)a1 = off_47DFA8;
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 176));
  float v2 = *(void **)(a1 + 152);
  if (v2 == (void *)(a1 + 128))
  {
    uint64_t v3 = 4LL;
    float v2 = (void *)(a1 + 128);
    goto LABEL_5;
  }

  if (v2)
  {
    uint64_t v3 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  return sub_2BC604(a1);
}

void sub_1441E0(uint64_t a1)
{
  *(void *)a1 = off_47DFA8;
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 176));
  float v2 = *(void **)(a1 + 152);
  if (v2 == (void *)(a1 + 128))
  {
    uint64_t v3 = 4LL;
    float v2 = (void *)(a1 + 128);
    goto LABEL_5;
  }

  if (v2)
  {
    uint64_t v3 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }

  uint64_t v4 = (void *)sub_2BC604(a1);
  operator delete(v4);
}

void sub_144244(uint64_t a1, float a2)
{
  uint64_t v4 = (os_log_t *)sub_138E8(41);
  uint64_t v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    int v6 = 136315650;
    uint64_t v7 = "VolumeControl.h";
    __int16 v8 = 1024;
    int v9 = 1627;
    __int16 v10 = 2048;
    double v11 = a2;
    _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d SoftwareVolumeCommand_VolumeTaper_Graph::SetVolume() - setting volume to %.2f.",  (uint8_t *)&v6,  0x1Cu);
  }

  if (!*(_DWORD *)(a1 + 168))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 240LL))(a1);
    sub_666C4(a1, 1685287015LL, 1987343221LL, 0.0);
    sub_666C4(a1, 1685287015LL, 1987343204LL, 0.0);
  }

  sub_666C4(a1, 1685287015LL, 1987343987LL, a2);
  *(float *)(a1 + 160) = a2;
  *(_BYTE *)(a1 + 164) = 1;
}

void sub_144394(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 240) && sub_2BCFA0((void *)a1))
  {
    uint64_t v4 = (os_log_t *)sub_138E8(41);
    uint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
    {
      int v6 = "unmute";
      int v9 = "VolumeControl.h";
      int v8 = 136315650;
      if (!a2) {
        int v6 = "mute";
      }
      __int16 v10 = 1024;
      int v11 = 1648;
      __int16 v12 = 2080;
      unint64_t v13 = v6;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d SoftwareVolumeCommand_VolumeTaper_Graph::SetMute() - %s.",  (uint8_t *)&v8,  0x1Cu);
    }

    float v7 = 0.0;
    if (!a2) {
      float v7 = 1.0;
    }
    sub_666C4(a1, 1685287015LL, *(unsigned int *)(a1 + 240), v7);
  }

BOOL sub_1444B4(uint64_t a1)
{
  float v6 = 0.0;
  if (*(_DWORD *)(a1 + 240))
  {
    if (sub_2BCFA0((void *)a1))
    {
      sub_64DF8(a1, 1685287015LL, *(unsigned int *)(a1 + 240), &v6);
      float v2 = (os_log_t *)sub_138E8(41);
      uint64_t v3 = *v2;
      if (*v2)
      {
        if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315650;
          uint64_t v4 = "unmute";
          int v8 = "VolumeControl.h";
          if (v6 > 0.0) {
            uint64_t v4 = "mute";
          }
          __int16 v9 = 1024;
          int v10 = 1660;
          __int16 v11 = 2080;
          __int16 v12 = v4;
          _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d SoftwareVolumeCommand_VolumeTaper_Graph::GetMute() - %s.",  buf,  0x1Cu);
        }
      }
    }
  }

  return v6 <= 0.0;
}

void sub_1445D0(uint64_t a1, int a2)
{
  uint64_t v4 = (os_log_t *)sub_138E8(41);
  uint64_t v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    float v6 = "disabled";
    *(void *)&uint8_t buf[4] = "VolumeControl.h";
    *(_DWORD *)buf = 136315650;
    if (a2) {
      float v6 = "enabled";
    }
    __int16 v38 = 1024;
    int v39 = 1719;
    __int16 v40 = 2080;
    char v41 = v6;
    _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d SoftwareVolumeCommand_VolumeTaper_Graph::EnableWritableSoftwareVolumeProcessors() - %s.",  buf,  0x1Cu);
  }

  if (a2 && *(_BYTE *)(a1 + 164)) {
    (*(void (**)(uint64_t, float))(*(void *)a1 + 16LL))(a1, *(float *)(a1 + 160));
  }
  float v7 = *(std::__shared_weak_count **)(a1 + 32);
  if (v7)
  {
    int v8 = std::__shared_weak_count::lock(v7);
    __int16 v36 = v8;
    if (v8)
    {
      __int16 v9 = v8;
      uint64_t v10 = *(void *)(a1 + 24);
      uint64_t v35 = v10;
      if (!v10)
      {
LABEL_45:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          unint64_t v30 = __ldaxr(p_shared_owners);
        while (__stlxr(v30 - 1, p_shared_owners));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }

        return;
      }

      sub_7D084(buf, "AUVolumeTaper");
      v34[0] = v10;
      v34[1] = v9;
      __int16 v11 = (unint64_t *)&v9->__shared_owners_;
      do
        unint64_t v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      sub_1454D0(buf, a2, v34);
      do
        unint64_t v13 = __ldaxr(v11);
      while (__stlxr(v13 - 1, v11));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }

      if (SBYTE3(v41) < 0) {
        operator delete(*(void **)buf);
      }
      uint64_t v14 = v35;
      char v15 = *(std::__shared_weak_count **)(v35 + 816);
      if (!v15)
      {
        uint64_t v32 = 0LL;
        float v33 = 0LL;
        goto LABEL_44;
      }

      uint64_t v16 = *(void *)(v35 + 808);
      p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
      do
        unint64_t v18 = __ldxr(p_shared_weak_owners);
      while (__stxr(v18 + 1, p_shared_weak_owners));
      uint64_t v32 = 0LL;
      double v19 = std::__shared_weak_count::lock(v15);
      float v33 = v19;
      if (v19)
      {
        __int16 v20 = v19;
        uint64_t v32 = v16;
        std::__shared_weak_count::__release_weak(v15);
        if (v16 && sub_2043D4(v16))
        {
          sub_7D084(buf, "AUControlFreak");
          __int16 v21 = v36;
          v31[0] = v14;
          v31[1] = v36;
          if (v36)
          {
            int v22 = (unint64_t *)&v36->__shared_owners_;
            do
              unint64_t v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }

          sub_1454D0(buf, a2, v31);
          if (v21)
          {
            float v24 = (unint64_t *)&v21->__shared_owners_;
            do
              unint64_t v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }

          if (SBYTE3(v41) < 0) {
            operator delete(*(void **)buf);
          }
          __int16 v20 = v33;
          if (!v33) {
            goto LABEL_44;
          }
        }

        CFDictionaryRef v26 = (unint64_t *)&v20->__shared_owners_;
        do
          unint64_t v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (v27)
        {
LABEL_44:
          __int16 v9 = v36;
          if (!v36) {
            return;
          }
          goto LABEL_45;
        }

        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        unint64_t v28 = v20;
      }

      else
      {
        unint64_t v28 = v15;
      }

      std::__shared_weak_count::__release_weak(v28);
      goto LABEL_44;
    }
  }

void sub_1448D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_7A768((uint64_t)&a11);
  sub_7A768((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL sub_144948(uint64_t a1)
{
  return *(_DWORD *)(a1 + 168) == 0;
}

void sub_144958(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_log_t *)sub_138E8(41);
  uint64_t v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    float v6 = *(float *)a2;
    float v7 = *(float *)(a2 + 4);
    float v8 = *(float *)(a2 + 8);
    sub_48E98(v14, *(CFStringRef *)(a2 + 16));
    double v9 = v7;
    unint64_t v10 = v15;
    if ((v15 & 0x80u) != 0) {
      unint64_t v10 = (unint64_t)v14[1];
    }
    if (v10)
    {
      sub_48E98(__p, *(CFStringRef *)(a2 + 16));
      if (v13 >= 0) {
        __int16 v11 = __p;
      }
      else {
        __int16 v11 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136316418;
      int v17 = "VolumeControl.h";
      __int16 v18 = 1024;
      int v19 = 1671;
      __int16 v20 = 2048;
      double v21 = v6;
      __int16 v22 = 2048;
      double v23 = v9;
      __int16 v24 = 2048;
      double v25 = v8;
      __int16 v26 = 2080;
      unint64_t v27 = (const char *)v11;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d SoftwareVolumeCommand_VolumeTaper_Graph::StartVolumeRamp() - target: %.2f upward rate: %.2fms downward rate: %.2fms category: '%s'.",  buf,  0x3Au);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }

    else
    {
      *(_DWORD *)buf = 136316418;
      int v17 = "VolumeControl.h";
      __int16 v18 = 1024;
      int v19 = 1671;
      __int16 v20 = 2048;
      double v21 = v6;
      __int16 v22 = 2048;
      double v23 = v9;
      __int16 v24 = 2048;
      double v25 = v8;
      __int16 v26 = 2080;
      unint64_t v27 = "unknown";
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d SoftwareVolumeCommand_VolumeTaper_Graph::StartVolumeRamp() - target: %.2f upward rate: %.2fms downward rate: %.2fms category: '%s'.",  buf,  0x3Au);
    }
  }

  sub_666C4(a1, 1685287015LL, 1987342957LL, 1.0);
  sub_666C4(a1, 1685287015LL, 1987342965LL, 1.0);
  sub_666C4(a1, 1685287015LL, 1987343221LL, *(float *)(a2 + 4));
  sub_666C4(a1, 1685287015LL, 1987343204LL, *(float *)(a2 + 8));
  sub_666C4(a1, 1685287015LL, 1987343987LL, *(float *)a2);
}

void sub_144BD4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_144BF8(uint64_t a1)
{
  float v2 = (os_log_t *)sub_138E8(41);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEBUG))
  {
    int v4 = 136315394;
    uint64_t v5 = "VolumeControl.h";
    __int16 v6 = 1024;
    int v7 = 1685;
    _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d SoftwareVolumeCommand_VolumeTaper_Graph::CancelVolumeRamp().",  (uint8_t *)&v4,  0x12u);
  }

  sub_666C4(a1, 1685287015LL, 1987342957LL, 0.0);
}

void *sub_144CD0(uint64_t a1, void *a2)
{
  int v4 = (os_log_t *)sub_138E8(41);
  uint64_t v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    __int16 v6 = "active";
    uint64_t v7 = a2[3];
    *(void *)&v14[4] = "VolumeControl.h";
    *(_DWORD *)uint64_t v14 = 136315650;
    if (!v7) {
      __int16 v6 = "nullptr";
    }
    __int16 v15 = 1024;
    int v16 = 1694;
    __int16 v17 = 2080;
    *(void *)__int16 v18 = v6;
    _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d SoftwareVolumeCommand_VolumeTaper_Graph::SetVolumeRampListener() - callback is %s.",  v14,  0x1Cu);
  }

  float v8 = (void *)a2[3];
  if (v8)
  {
    if (v8 == a2)
    {
      *(void *)&v18[4] = v14;
      (*(void (**)(void *, _BYTE *))(*a2 + 24LL))(a2, v14);
    }

    else
    {
      *(void *)&v18[4] = (*(uint64_t (**)(void *))(*v8 + 16LL))(v8);
    }
  }

  else
  {
    *(void *)&v18[4] = 0LL;
  }

  uint64_t v9 = a1 + 128;
  if ((_BYTE *)(a1 + 128) != v14)
  {
    uint64_t v10 = *(void *)&v18[4];
    uint64_t v11 = *(void *)(a1 + 152);
    if (*(_BYTE **)&v18[4] == v14)
    {
      if (v11 == v9)
      {
        (*(void (**)(_BYTE *, void *))(*(void *)v14 + 24LL))(v14, v19);
        (*(void (**)(void))(**(void **)&v18[4] + 32LL))(*(void *)&v18[4]);
        *(void *)&v18[4] = 0LL;
        (*(void (**)(void, _BYTE *))(**(void **)(a1 + 152) + 24LL))(*(void *)(a1 + 152), v14);
        (*(void (**)(void))(**(void **)(a1 + 152) + 32LL))(*(void *)(a1 + 152));
        *(void *)(a1 + 152) = 0LL;
        *(void *)&v18[4] = v14;
        (*(void (**)(void *, uint64_t))(v19[0] + 24LL))(v19, a1 + 128);
        (*(void (**)(void *))(v19[0] + 32LL))(v19);
      }

      else
      {
        (*(void (**)(_BYTE *, uint64_t))(*(void *)v14 + 24LL))(v14, a1 + 128);
        (*(void (**)(void))(**(void **)&v18[4] + 32LL))(*(void *)&v18[4]);
        *(void *)&v18[4] = *(void *)(a1 + 152);
      }

      *(void *)(a1 + 152) = v9;
    }

    else if (v11 == v9)
    {
      (*(void (**)(uint64_t, _BYTE *))(*(void *)v9 + 24LL))(a1 + 128, v14);
      (*(void (**)(void))(**(void **)(a1 + 152) + 32LL))(*(void *)(a1 + 152));
      *(void *)(a1 + 152) = *(void *)&v18[4];
      *(void *)&v18[4] = v14;
    }

    else
    {
      *(void *)&v18[4] = *(void *)(a1 + 152);
      *(void *)(a1 + 152) = v10;
    }
  }

  uint64_t result = *(void **)&v18[4];
  if (*(_BYTE **)&v18[4] == v14)
  {
    uint64_t v13 = 4LL;
    uint64_t result = v14;
  }

  else
  {
    if (!*(void *)&v18[4]) {
      return result;
    }
    uint64_t v13 = 5LL;
  }

  return (void *)(*(uint64_t (**)(void))(*result + 8 * v13))();
}

void sub_144F58(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_144F64(uint64_t a1, int a2, float a3)
{
  __int16 v6 = (os_log_t *)sub_138E8(41);
  uint64_t v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEBUG))
  {
    float v8 = "not ramping";
    uint64_t v9 = *(void *)(a1 + 152);
    *(_DWORD *)buf = 136316162;
    uint64_t v14 = "VolumeControl.h";
    if (a2) {
      float v8 = "ramping";
    }
    __int16 v15 = 1024;
    int v16 = 1703;
    __int16 v18 = v8;
    __int16 v17 = 2080;
    __int16 v19 = 2048;
    double v20 = a3;
    if (v9) {
      uint64_t v10 = "active";
    }
    else {
      uint64_t v10 = "nullptr";
    }
    __int16 v21 = 2080;
    __int16 v22 = v10;
    _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d SoftwareVolumeCommand_VolumeTaper_Graph::VolumeRampUpdated() - ramp state %s slider position %.2f callback is %s.",  buf,  0x30u);
  }

  uint64_t result = *(void *)(a1 + 152);
  if (result)
  {
    char v12 = a2;
    *(float *)buf = a3;
    uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint8_t *))(*(void *)result + 48LL))(result, &v12, buf);
  }

  *(float *)(a1 + 160) = a3;
  *(_BYTE *)(a1 + 164) = 1;
  return result;
}

BOOL sub_1450C0(uint64_t a1)
{
  return *(void *)(a1 + 152) != 0LL;
}

BOOL sub_1450D0(uint64_t a1)
{
  return *(_DWORD *)(a1 + 172) == 0;
}

float sub_1450E0(uint64_t a1, float a2)
{
  int v4 = (std::recursive_mutex *)(a1 + 176);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 176));
  int v16 = 0;
  float v15 = a2;
  sub_78E0C(a1, 1685287015LL, 1987342435LL);
  sub_2BD3EC(a1, 1987342435LL, (uint64_t)v14, 8);
  if (LODWORD(v14[1]))
  {
    uint64_t v5 = (os_log_t *)sub_138E8(41);
    os_log_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315906;
      __int16 v18 = "VolumeControl.h";
      __int16 v19 = 1024;
      int v20 = 1781;
      __int16 v21 = 2048;
      double v22 = v15;
      __int16 v23 = 2048;
      double v24 = v14[0];
      uint64_t v7 = "%25s:%-5d SoftwareVolumeCommand_VolumeTaper_Graph::convertdBToScalar() Successfully converted %f dB to %f scalar.";
      float v8 = v6;
      os_log_type_t v9 = OS_LOG_TYPE_INFO;
LABEL_8:
      _os_log_impl(&dword_0, v8, v9, v7, buf, 0x26u);
    }
  }

  else
  {
    uint64_t v10 = (os_log_t *)sub_138E8(41);
    os_log_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      __int16 v18 = "VolumeControl.h";
      __int16 v19 = 1024;
      int v20 = 1775;
      __int16 v21 = 2048;
      double v22 = a2;
      __int16 v23 = 2048;
      double v24 = v14[0];
      uint64_t v7 = "%25s:%-5d SoftwareVolumeCommand_VolumeTaper_Graph::convertdBToScalar() Failed to convert %f dB to scalar. Out"
           "put value: %f dB";
      float v8 = v11;
      os_log_type_t v9 = OS_LOG_TYPE_ERROR;
      goto LABEL_8;
    }
  }

  float v12 = v14[0];
  std::recursive_mutex::unlock(v4);
  return v12;
}

void sub_1452B8(_Unwind_Exception *a1)
{
}

float sub_1452D4(uint64_t a1, float a2)
{
  int v4 = (std::recursive_mutex *)(a1 + 176);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 176));
  int v16 = 1;
  float v15 = a2;
  sub_78E0C(a1, 1685287015LL, 1987342435LL);
  sub_2BD3EC(a1, 1987342435LL, (uint64_t)v14, 8);
  if (LODWORD(v14[1]) == 1)
  {
    uint64_t v5 = (os_log_t *)sub_138E8(41);
    os_log_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      __int16 v18 = "VolumeControl.h";
      __int16 v19 = 1024;
      int v20 = 1802;
      __int16 v21 = 2048;
      double v22 = a2;
      __int16 v23 = 2048;
      double v24 = v14[0];
      uint64_t v7 = "%25s:%-5d SoftwareVolumeCommand_VolumeTaper_Graph::convertScalarTodB() Failed to convert %f Scalar to dB. Out"
           "put value: %f Scalar";
      float v8 = v6;
      os_log_type_t v9 = OS_LOG_TYPE_ERROR;
LABEL_8:
      _os_log_impl(&dword_0, v8, v9, v7, buf, 0x26u);
    }
  }

  else
  {
    uint64_t v10 = (os_log_t *)sub_138E8(41);
    os_log_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315906;
      __int16 v18 = "VolumeControl.h";
      __int16 v19 = 1024;
      int v20 = 1808;
      __int16 v21 = 2048;
      double v22 = v15;
      __int16 v23 = 2048;
      double v24 = v14[0];
      uint64_t v7 = "%25s:%-5d SoftwareVolumeCommand_VolumeTaper_Graph::convertScalarTodB() Successfully converted %f scalar to %f dB";
      float v8 = v11;
      os_log_type_t v9 = OS_LOG_TYPE_INFO;
      goto LABEL_8;
    }
  }

  float v12 = v14[0];
  std::recursive_mutex::unlock(v4);
  return v12;
}

void sub_1454B4(_Unwind_Exception *a1)
{
}

void sub_1454D0(const UInt8 *a1, int a2, void *a3)
{
  *(_DWORD *)bytes = a2 ^ 1;
  sub_59370((CFStringRef *)buf, "AUName");
  int v5 = *((char *)a1 + 23);
  if (v5 >= 0) {
    os_log_t v6 = a1;
  }
  else {
    os_log_t v6 = *(const UInt8 **)a1;
  }
  if (v5 >= 0) {
    CFIndex v7 = a1[23];
  }
  else {
    CFIndex v7 = *((void *)a1 + 1);
  }
  *(void *)&v24[4] = CFStringCreateWithBytes(0LL, v6, v7, 0x8000100u, 0);
  if (!*(void *)&v24[4])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  int v20 = 21;
  sub_145854((uint64_t)&v24[12], "ID", &v20);
  CFDataRef v8 = CFDataCreate(0LL, bytes, 4LL);
  if (!v8)
  {
    __int16 v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v18, "Could not construct");
  }

  sub_14591C(&cf, v8);
  sub_1459C8((uint64_t)&v28 + 2, "data", &cf);
  v21[0] = buf;
  v21[1] = 3LL;
  CFDictionaryRef v9 = sub_5A950((uint64_t)v21);
  uint64_t v10 = 0LL;
  v21[2] = v9;
  do
  {
    os_log_t v11 = *(const void **)&v31[v10];
    if (v11) {
      CFRelease(v11);
    }
    float v12 = *(const void **)((char *)&v28 + v10 + 2);
    if (v12) {
      CFRelease(v12);
    }
    v10 -= 16LL;
  }

  while (v10 != -48);
  if (cf) {
    CFRelease(cf);
  }
  v21[0] = v9;
  int v13 = (*(uint64_t (**)(void, uint64_t, uint64_t, void *, uint64_t, void))(*(void *)*a3 + 112LL))( *a3,  1685287015LL,  1652060274LL,  v21,  8LL,  0LL);
  uint64_t v14 = (os_log_t *)sub_138E8(38);
  float v15 = *v14;
  if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_DEFAULT))
  {
    else {
      int v16 = *(const UInt8 **)a1;
    }
    *(_DWORD *)buf = 136316162;
    *(void *)double v24 = "VolumeControl.h";
    *(_WORD *)&v24[8] = 1024;
    *(_DWORD *)&v24[10] = 1738;
    __int16 v25 = 2080;
    __int16 v26 = v16;
    __int16 v27 = 1024;
    int v28 = *(_DWORD *)bytes;
    __int16 v29 = 1024;
    int v30 = v13;
    _os_log_impl(&dword_0, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Result of setting bypass of %s to %u: %u", buf, 0x28u);
  }

  CFRelease(v9);
}

void sub_145770( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, CFTypeRef cf)
{
  do
  {
    v17 -= 16;
    sub_7BFE0((uint64_t)v17);
  }

  while (v17 != &a15);
  _Unwind_Resume(a1);
}

uint64_t sub_145854(uint64_t a1, char *a2, int *a3)
{
  int valuePtr = *a3;
  CFNumberRef v5 = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
  *(void *)(a1 + 8) = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  return a1;
}

void sub_1458E0(_Unwind_Exception *a1)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_7DCC4((const void **)v1);
  _Unwind_Resume(a1);
}

void *sub_14591C(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFDataGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }

  return a1;
}

void sub_145998(_Unwind_Exception *a1)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1459C8(uint64_t a1, char *a2, const void **a3)
{
  CFNumberRef v5 = *a3;
  if (v5) {
    CFRetain(v5);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

void sub_145A08(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_470DA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_145A18(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_470DA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_145A38(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 32LL))(a1 + 24);
}

void sub_145A48(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_47E290;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_145A58(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_47E290;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_145A78(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 32LL))(a1 + 24);
}

void sub_145A88(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)&__int128 v24 = a2;
  *((void *)&v24 + 1) = a3;
  if (a3)
  {
    os_log_t v6 = (unint64_t *)(a3 + 8);
    do
      unint64_t v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }

  unint64_t v8 = a1[25];
  unint64_t v9 = a1[26];
  if (v8 < v9)
  {
    *(_OWORD *)unint64_t v8 = v24;
    *(_DWORD *)(v8 + 16) = a4;
    uint64_t v10 = (char *)(v8 + 24);
    a1[25] = v8 + 24;
    goto LABEL_19;
  }

  uint64_t v11 = a1[24];
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v11) >> 3);
  unint64_t v13 = v12 + 1;
  if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_7A87C();
  }
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v11) >> 3);
  if (2 * v14 > v13) {
    unint64_t v13 = 2 * v14;
  }
  if (v14 >= 0x555555555555555LL) {
    unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v15 = v13;
  }
  int v16 = (char *)sub_8D44C(v15);
  __int16 v17 = &v16[24 * v12];
  __int16 v19 = &v16[24 * v18];
  *(_OWORD *)__int16 v17 = v24;
  *((_DWORD *)v17 + 4) = a4;
  uint64_t v10 = v17 + 24;
  __int16 v21 = (char *)a1[24];
  int v20 = (char *)a1[25];
  if (v20 == v21)
  {
    a1[24] = v17;
    a1[25] = v10;
    a1[26] = v19;
    if (!v20) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }

  do
  {
    __int128 v22 = *(_OWORD *)(v20 - 24);
    v20 -= 24;
    *(_OWORD *)(v17 - 24) = v22;
    v17 -= 24;
    *(void *)int v20 = 0LL;
    *((void *)v20 + 1) = 0LL;
    *((_DWORD *)v17 + 4) = *((_DWORD *)v20 + 4);
  }

  while (v20 != v21);
  __int16 v23 = (char *)a1[24];
  int v20 = (char *)a1[25];
  a1[24] = v17;
  a1[25] = v10;
  a1[26] = v19;
  if (v20 != v23)
  {
    do
      int v20 = (char *)sub_7A768((uint64_t)(v20 - 24));
    while (v20 != v23);
    int v20 = v23;
  }

  if (v20) {
LABEL_18:
  }
    operator delete(v20);
LABEL_19:
  a1[25] = v10;
}

void sub_145BEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_145C08()
{
  return 1685287015LL;
}

void sub_145C14(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_47E3A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_145C24(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_47E3A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_145C44(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 8LL))(a1 + 24);
}

double sub_145C54(int a1)
{
  float v2 = (char *)operator new(0x78uLL);
  *((void *)v2 + 1) = 0LL;
  *((void *)v2 + 2) = 0LL;
  *(void *)float v2 = off_47E370;
  *((void *)v2 + 3) = off_47E680;
  *((_DWORD *)v2 + 8) = 1685287015;
  *((_DWORD *)v2 + 9) = a1;
  *((_DWORD *)v2 + 10) = 0;
  *(void *)(v2 + 60) = 0x100000001LL;
  *(_OWORD *)(v2 + 44) = xmmword_402D48;
  *((_DWORD *)v2 + 18) = dword_48E398;
  sub_142EF4((uint64_t)(v2 + 80), qword_48E3A0);
  double result = *(double *)&xmmword_48E3B8;
  *(_OWORD *)(v2 + 104) = xmmword_48E3B8;
  qword_48E448 = (uint64_t)(v2 + 24);
  unk_48E450 = v2;
  return result;
}

void sub_145D00(_Unwind_Exception *a1)
{
}

void sub_145D18(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_47E370;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_145D28(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_47E370;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_145D48(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 32LL))(a1 + 24);
}

uint64_t sub_145D58()
{
  return 1668312369LL;
}

uint64_t sub_145D64(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

void sub_145D74(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_470FD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_145D84(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_470FD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_145DA4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 32LL))(a1 + 24);
}

void sub_145DB4(std::string *a1, const __CFDictionary *a2, size_t a3, uint64_t a4)
{
  char v7 = 1;
  a1->__r_.__value_.__s.__size_ = 1;
  LOWORD(a1->__r_.__value_.__l.__data_) = 123;
  size_t v8 = a3 + 2;
  sub_1478DC((uint64_t)&v79, a2);
  sub_1478DC((uint64_t)&v73, a2);
  uint64_t v74 = (v76 - (_BYTE *)v75) >> 3;
  while (1)
  {
    if (v79 && v80 != (v82 - v81) >> 3)
    {
      uint64_t v9 = v73;
      goto LABEL_8;
    }

    uint64_t v9 = v73;
    if (!v73 || v74 == (v76 - (_BYTE *)v75) >> 3) {
      break;
    }
LABEL_8:
    if (v79 == v9 && v80 == v74) {
      break;
    }
    if ((v7 & 1) == 0) {
      std::string::append(a1, ",", 1uLL);
    }
    sub_7D130(&__b, v8, 32);
    uint64_t v10 = std::string::insert(&__b, 0LL, "\n", 1uLL);
    __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0LL;
    v10->__r_.__value_.__l.__cap_ = 0LL;
    v10->__r_.__value_.__r.__words[0] = 0LL;
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = __p.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)p_p, size);
    sub_14795C(&__p, &v79);
    unint64_t v14 = (const void *)__p.__r_.__value_.__r.__words[0];
    BOOL v16 = 0;
    if (__p.__r_.__value_.__r.__words[0])
    {
      CFTypeID v15 = CFGetTypeID(__p.__r_.__value_.__l.__data_);
      if (v15 == CFStringGetTypeID()) {
        BOOL v16 = 1;
      }
    }

    if (__p.__r_.__value_.__l.__size_) {
      CFRelease((CFTypeRef)__p.__r_.__value_.__l.__size_);
    }
    if (v14) {
      CFRelease(v14);
    }
    if (v16)
    {
      sub_14795C(&cf, &v79);
      __int16 v17 = (const void *)cf.__r_.__value_.__r.__words[0];
      if (!cf.__r_.__value_.__r.__words[0])
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }

      sub_48100((uint64_t)&v70, (const __CFString *)cf.__r_.__value_.__l.__data_);
      if ((v70.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v18 = &v70;
      }
      else {
        uint64_t v18 = (std::string *)v70.__r_.__value_.__r.__words[0];
      }
      if ((v70.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v19 = v70.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v19 = v70.__r_.__value_.__l.__size_;
      }
      memset(&v71, 0, sizeof(v71));
      for (; v19; --v19)
      {
        int v20 = v18->__r_.__value_.__s.__data_[0];
        if (v20 == 92 || v20 == 34)
        {
          std::string::push_back(&v71, 92);
          LOBYTE(v20) = v18->__r_.__value_.__s.__data_[0];
        }

        std::string::push_back(&v71, v20);
        uint64_t v18 = (std::string *)((char *)v18 + 1);
      }

      __int16 v21 = std::string::insert(&v71, 0LL, "", 1uLL);
      __int128 v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      __b.__r_.__value_.__l.__cap_ = v21->__r_.__value_.__l.__cap_;
      *(_OWORD *)&__b.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0LL;
      v21->__r_.__value_.__l.__cap_ = 0LL;
      v21->__r_.__value_.__r.__words[0] = 0LL;
      __int16 v23 = std::string::append(&__b, " : ", 4uLL);
      __int128 v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__l.__cap_ = v23->__r_.__value_.__l.__cap_;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0LL;
      v23->__r_.__value_.__l.__cap_ = 0LL;
      v23->__r_.__value_.__r.__words[0] = 0LL;
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int16 v25 = &__p;
      }
      else {
        __int16 v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v26 = __p.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v26 = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(a1, (const std::string::value_type *)v25, v26);
      if (cf.__r_.__value_.__l.__size_) {
        CFRelease((CFTypeRef)cf.__r_.__value_.__l.__size_);
      }
      CFRelease(v17);
      sub_14795C(&__b, &v79);
      sub_82AF0((uint64_t)v85, a4);
      sub_1479E8(&__p, (CFTypeRef *)&__b.__r_.__value_.__l.__size_, v8, (uint64_t)v85);
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int16 v27 = &__p;
      }
      else {
        __int16 v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v28 = __p.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v28 = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(a1, (const std::string::value_type *)v27, v28);
      __int16 v29 = v86;
      if (v86 == v85)
      {
        __int16 v29 = v85;
        uint64_t v30 = 4LL;
LABEL_105:
        (*(void (**)(void))(*v29 + 8 * v30))();
      }

      else if (v86)
      {
        uint64_t v30 = 5LL;
        goto LABEL_105;
      }

      if (__b.__r_.__value_.__l.__size_) {
        CFRelease((CFTypeRef)__b.__r_.__value_.__l.__size_);
      }
      if (__b.__r_.__value_.__r.__words[0]) {
        CFRelease(__b.__r_.__value_.__l.__data_);
      }
      goto LABEL_139;
    }

    if (!*(void *)(a4 + 24))
    {
      uint64_t v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v58, "Error, not a json style CFDictionary");
    }

    sub_14795C(&__b, &v79);
    __int16 v31 = (const void *)__b.__r_.__value_.__r.__words[0];
    if (__b.__r_.__value_.__r.__words[0]) {
      CFRetain(__b.__r_.__value_.__l.__data_);
    }
    CFTypeRef v65 = 0LL;
    CFTypeRef v66 = v31;
    uint64_t v32 = *(void *)(a4 + 24);
    if (!v32) {
      sub_82CEC();
    }
    (*(void (**)(std::string *__return_ptr, uint64_t, CFTypeRef *, CFTypeRef *))(*(void *)v32 + 48LL))( &__p,  v32,  &v66,  &v65);
    if (v65) {
      CFRelease(v65);
    }
    if (v66) {
      CFRelease(v66);
    }
    if (__b.__r_.__value_.__l.__size_) {
      CFRelease((CFTypeRef)__b.__r_.__value_.__l.__size_);
    }
    if (v31) {
      CFRelease(v31);
    }
    if ((char)__p.__r_.__value_.__s.__size_ < 0)
    {
      std::string::size_type v33 = __p.__r_.__value_.__l.__size_;
      if (!__p.__r_.__value_.__l.__size_)
      {
LABEL_161:
        uint64_t v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v60, "Error, not a json style CFDictionary");
      }

      float v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }

    else
    {
      std::string::size_type v33 = __p.__r_.__value_.__s.__size_;
      if (!__p.__r_.__value_.__s.__size_) {
        goto LABEL_161;
      }
      float v34 = &__p;
    }

    memset(&v63, 0, sizeof(v63));
    do
    {
      int v35 = v34->__r_.__value_.__s.__data_[0];
      if (v35 == 92 || v35 == 34)
      {
        std::string::push_back(&v63, 92);
        LOBYTE(v35) = v34->__r_.__value_.__s.__data_[0];
      }

      std::string::push_back(&v63, v35);
      float v34 = (std::string *)((char *)v34 + 1);
      --v33;
    }

    while (v33);
    __int16 v36 = std::string::insert(&v63, 0LL, "", 1uLL);
    __int128 v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    cf.__r_.__value_.__l.__cap_ = v36->__r_.__value_.__l.__cap_;
    *(_OWORD *)&cf.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0LL;
    v36->__r_.__value_.__l.__cap_ = 0LL;
    v36->__r_.__value_.__r.__words[0] = 0LL;
    __int16 v38 = std::string::append(&cf, " : ", 5uLL);
    __int128 v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v70.__r_.__value_.__l.__cap_ = v38->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0LL;
    v38->__r_.__value_.__l.__cap_ = 0LL;
    v38->__r_.__value_.__r.__words[0] = 0LL;
    if ((v69 & 0x80u) == 0) {
      __int16 v40 = v68;
    }
    else {
      __int16 v40 = (void **)v68[0];
    }
    if ((v69 & 0x80u) == 0) {
      unint64_t v41 = v69;
    }
    else {
      unint64_t v41 = (unint64_t)v68[1];
    }
    memset(&v62, 0, sizeof(v62));
    if (v41)
    {
      do
      {
        int v42 = *(unsigned __int8 *)v40;
        if (v42 == 92 || v42 == 34)
        {
          std::string::push_back(&v62, 92);
          LOBYTE(v42) = *(_BYTE *)v40;
        }

        std::string::push_back(&v62, v42);
        __int16 v40 = (void **)((char *)v40 + 1);
        --v41;
      }

      while (v41);
      std::string::size_type v43 = v62.__r_.__value_.__s.__size_;
      std::string::size_type v44 = v62.__r_.__value_.__l.__size_;
      std::string::size_type v45 = v62.__r_.__value_.__r.__words[0];
    }

    else
    {
      std::string::size_type v44 = 0LL;
      std::string::size_type v45 = 0LL;
      std::string::size_type v43 = 0LL;
    }

    if ((v43 & 0x80u) == 0LL) {
      __int16 v46 = &v62;
    }
    else {
      __int16 v46 = (std::string *)v45;
    }
    if ((v43 & 0x80u) == 0LL) {
      std::string::size_type v47 = v43;
    }
    else {
      std::string::size_type v47 = v44;
    }
    __int16 v48 = std::string::append(&v70, (const std::string::value_type *)v46, v47);
    __int128 v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v71.__r_.__value_.__l.__cap_ = v48->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v49;
    v48->__r_.__value_.__l.__size_ = 0LL;
    v48->__r_.__value_.__l.__cap_ = 0LL;
    v48->__r_.__value_.__r.__words[0] = 0LL;
    __int16 v50 = std::string::append(&v71, "", 1uLL);
    __int128 v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    __b.__r_.__value_.__l.__cap_ = v50->__r_.__value_.__l.__cap_;
    *(_OWORD *)&__b.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0LL;
    v50->__r_.__value_.__l.__cap_ = 0LL;
    v50->__r_.__value_.__r.__words[0] = 0LL;
    if ((__b.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_b = &__b;
    }
    else {
      p_b = (std::string *)__b.__r_.__value_.__r.__words[0];
    }
    if ((__b.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v53 = __b.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v53 = __b.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)p_b, v53);
LABEL_139:
    char v7 = 0;
    ++v80;
  }

  sub_7D130(&__b, a3, 32);
  __int16 v54 = std::string::insert(&__b, 0LL, "\n", 1uLL);
  __int128 v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__l.__cap_ = v54->__r_.__value_.__l.__cap_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v55;
  v54->__r_.__value_.__l.__size_ = 0LL;
  v54->__r_.__value_.__l.__cap_ = 0LL;
  v54->__r_.__value_.__r.__words[0] = 0LL;
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    __int16 v56 = &__p;
  }
  else {
    __int16 v56 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v57 = __p.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v57 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v56, v57);
  std::string::append(a1, "}", 1uLL);
  if (v77)
  {
    unint64_t v78 = v77;
    operator delete(v77);
  }

  if (v75)
  {
    int v76 = v75;
    operator delete(v75);
  }

  if (v83)
  {
    int v84 = v83;
    operator delete(v83);
  }

  if (v81)
  {
    uint64_t v82 = v81;
    operator delete(v81);
  }

void sub_1465FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *__p, uint64_t a24, int a25, __int16 a26, char a27, char a28, uint64_t a29, uint64_t a30, uint64_t a31, void *a32, uint64_t a33, uint64_t a34, uint64_t a35, void *a36, uint64_t a37, uint64_t a38, uint64_t a39, void *a40, uint64_t a41, int a42, __int16 a43, char a44, char a45, uint64_t a46, uint64_t a47)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  sub_14870C(&a47);
  sub_14870C((void *)(v48 - 192));
  _Unwind_Resume(a1);
}

unint64_t sub_146874(const __CFDictionary *a1, const UInt8 *a2, unsigned int *a3)
{
  int v4 = (const __CFNumber *)sub_1477B0(a1, a2);
  if (!v4) {
    return *a3;
  }
  unint64_t result = (unint64_t)sub_36328(v4);
  if (HIDWORD(result)) {
    return result;
  }
  else {
    return *a3;
  }
}

uint64_t sub_1468B4(const __CFDictionary *a1, const UInt8 *a2)
{
  float v2 = (const __CFBoolean *)sub_1477B0(a1, a2);
  if (v2)
  {
    LOWORD(sub_143134(1, v2) = sub_476EC(v2);
    int v3 = BYTE1(v2);
  }

  else
  {
    int v3 = 0;
  }

  return v2 | (v3 << 8);
}

void *sub_1468E4(void *a1, const __CFDictionary *a2, const UInt8 *__s)
{
  int v4 = sub_D13C4(a2, __s);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_81384(exception);
  }

  CFNumberRef v5 = v4;
  CFRetain(v4);
  return sub_3617C(a1, v5);
}

void sub_146948(_Unwind_Exception *a1)
{
}

uint64_t sub_146960(const __CFDictionary **a1, const UInt8 *a2)
{
  int v4 = *a1;
  if (!v4 || !sub_51DF4(v4, a2)) {
    goto LABEL_7;
  }
  if (!*a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_7E414(exception);
  }

  sub_147680(&cf, *a1, a2);
  os_log_t v6 = (const __CFNumber *)cf;
  if (!cf) {
    goto LABEL_7;
  }
  CFTypeID v7 = CFGetTypeID(cf);
  if (v7 == CFNumberGetTypeID())
  {
    unsigned int v8 = sub_8D7E0(v6);
    BOOL v9 = v8;
    char v10 = 0;
    unsigned int v2 = v8 >> 8;
  }

  else
  {
    CFTypeID v13 = CFGetTypeID(v6);
    if (v13 == CFBooleanGetTypeID())
    {
      BOOL v9 = sub_1476F8(v6);
      unsigned int v2 = 0;
      char v10 = 0;
    }

    else
    {
      BOOL v9 = 0;
      char v10 = 1;
    }
  }

  CFRelease(v6);
  if ((v10 & 1) == 0)
  {
    uint64_t v11 = 0x100000000LL;
  }

  else
  {
LABEL_7:
    uint64_t v11 = 0LL;
    BOOL v9 = 0;
  }

  return v11 | v9 | (v2 << 8);
}

void sub_146A70(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_146AAC(uint64_t a1, const __CFDictionary *a2, const UInt8 *__s)
{
  int v4 = sub_D13C4(a2, __s);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_81384(exception);
  }

  sub_1473F4(a1, v4);
}

void sub_146B08(_Unwind_Exception *a1)
{
}

void sub_146B1C(CFTypeRef cf, void *a2)
{
  if (cf) {
    CFRetain(cf);
  }
  std::string::size_type v28 = (const __CFDictionary *)cf;
  sub_7D084(__p, "PortType");
  LODWORD(v27) = 1886613611;
  int v4 = sub_1585CC(&v28, __p, (unsigned int *)&v27);
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (!cf) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }

  if (cf) {
LABEL_7:
  }
    CFRelease(cf);
LABEL_8:
  if ((sub_1576EC(v4) & 1) == 0)
  {
    __int128 v24 = (os_log_t *)sub_138E8(13);
    __int16 v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = "DSPGraphConfig_Actions.cpp";
      *(_WORD *)&_BYTE __p[12] = 1024;
      *(_DWORD *)&__p[14] = 562;
      _os_log_impl(&dword_0, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if ((v4 - 1885892674) <= 0x35 && ((1LL << (v4 - 66)) & 0x20000100000001LL) != 0)
  {
    unsigned __int8 v5 = atomic_load((unsigned __int8 *)&qword_48E4E8);
    if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_48E4E8))
    {
      sub_14707C();
      __cxa_guard_release(&qword_48E4E8);
    }

    uint64_t v6 = qword_48E4D8;
    CFTypeID v7 = (std::__shared_weak_count *)qword_48E4E0;
    *(void *)std::string __p = qword_48E4D8;
    *(void *)&__p[8] = qword_48E4E0;
    if (qword_48E4E0)
    {
      unsigned int v8 = (unint64_t *)(qword_48E4E0 + 8);
      do
        unint64_t v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }

    sub_143208(a2, v6, (uint64_t)v7);
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        unint64_t v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
LABEL_38:
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }

  else if (v4 == 1886613611)
  {
    unsigned __int8 v19 = atomic_load((unsigned __int8 *)&qword_48E500);
    if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_48E500))
    {
      sub_14710C(1987013749, 1986359655);
      __cxa_guard_release(&qword_48E500);
    }

    uint64_t v20 = qword_48E4F0;
    CFTypeID v7 = *(std::__shared_weak_count **)algn_48E4F8;
    *(void *)std::string __p = qword_48E4F0;
    *(void *)&__p[8] = *(void *)algn_48E4F8;
    if (*(void *)algn_48E4F8)
    {
      __int16 v21 = (unint64_t *)(*(void *)algn_48E4F8 + 8LL);
      do
        unint64_t v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }

    sub_143208(a2, v20, (uint64_t)v7);
    if (v7)
    {
      __int16 v23 = (unint64_t *)&v7->__shared_owners_;
      do
        unint64_t v11 = __ldaxr(v23);
      while (__stlxr(v11 - 1, v23));
      goto LABEL_38;
    }
  }

  else if (v4 == 1886216809)
  {
    __int128 v27 = xmmword_403190;
    sub_157A88((uint64_t)__p, 0, -32.0, 32.0);
    unsigned __int8 v12 = atomic_load((unsigned __int8 *)&qword_48E4D0);
    if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_48E4D0))
    {
      sub_146F90(&v27, (__n128 *)__p, 1987013749, 1986359655);
      __cxa_guard_release(&qword_48E4D0);
    }

    uint64_t v13 = qword_48E4C0;
    unint64_t v14 = *(std::__shared_weak_count **)algn_48E4C8;
    if (*(void *)algn_48E4C8)
    {
      CFTypeID v15 = (unint64_t *)(*(void *)algn_48E4C8 + 8LL);
      do
        unint64_t v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }

    sub_143208(a2, v13, (uint64_t)v14);
    if (v14)
    {
      __int16 v17 = (unint64_t *)&v14->__shared_owners_;
      do
        unint64_t v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }

    sub_32C8C(*(void **)&__p[16]);
  }

void sub_146EEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
}

__n128 sub_146F90(_OWORD *a1, __n128 *a2, int a3, int a4)
{
  unsigned int v8 = (char *)operator new(0x98uLL);
  *((void *)v8 + 1) = 0LL;
  *((void *)v8 + 2) = 0LL;
  *((void *)v8 + 3) = &off_4818B8;
  *(void *)unsigned int v8 = off_470D38;
  *((void *)v8 + 4) = -2609680281LL;
  *((_DWORD *)v8 + 10) = 0;
  *(void *)(v8 + 60) = 0x100000001LL;
  *(_OWORD *)(v8 + 44) = xmmword_402D48;
  *(_OWORD *)(v8 + 72) = *a1;
  *((_DWORD *)v8 + 22) = a2->n128_u32[0];
  sub_142EF4((uint64_t)(v8 + 96), &a2->n128_u64[1]);
  __n128 result = a2[2];
  *(__n128 *)(v8 + 120) = result;
  v8[136] = 1;
  *((_DWORD *)v8 + 36) = a3;
  *((_DWORD *)v8 + 37) = a4;
  *((void *)v8 + 3) = off_47DD80;
  qword_48E4C0 = (uint64_t)(v8 + 24);
  *(void *)algn_48E4C8 = v8;
  return result;
}

void sub_147064(_Unwind_Exception *a1)
{
}

uint64_t sub_14707C()
{
  uint64_t v0 = (char *)operator new(0x98uLL);
  *((void *)v0 + 1) = 0LL;
  *((void *)v0 + 2) = 0LL;
  *(void *)uint64_t v0 = off_470D70;
  *((void *)v0 + 4) = -2609680281LL;
  *((_DWORD *)v0 + 10) = 0;
  *(void *)(v0 + 60) = 0x100000001LL;
  *(_OWORD *)(v0 + 44) = xmmword_402D48;
  *(_OWORD *)(v0 + 72) = xmmword_48E3F0;
  v0[88] = 0;
  v0[136] = 0;
  *((void *)v0 + 18) = 0x76657167766F6C75LL;
  qword_48E4E0 = (uint64_t)v0;
  *((void *)v0 + 3) = off_47DE38;
  uint64_t result = (uint64_t)(v0 + 24);
  qword_48E4D8 = result;
  return result;
}

double sub_14710C(int a1, int a2)
{
  int v4 = (char *)operator new(0x98uLL);
  *((void *)v4 + 1) = 0LL;
  *((void *)v4 + 2) = 0LL;
  *(void *)int v4 = off_47DD48;
  *((void *)v4 + 3) = &off_4818B8;
  *((void *)v4 + 4) = -2609680281LL;
  *((_DWORD *)v4 + 10) = 0;
  *(void *)(v4 + 60) = 0x100000001LL;
  *(_OWORD *)(v4 + 44) = xmmword_402D48;
  *(_OWORD *)(v4 + 72) = xmmword_48E508;
  *((_DWORD *)v4 + 22) = dword_48E398;
  sub_142EF4((uint64_t)(v4 + 96), qword_48E3A0);
  double result = *(double *)&xmmword_48E3B8;
  *(_OWORD *)(v4 + 120) = xmmword_48E3B8;
  v4[136] = 1;
  *((_DWORD *)v4 + 36) = a1;
  *((_DWORD *)v4 + 37) = a2;
  *((void *)v4 + 3) = off_47DD80;
  qword_48E4F0 = (uint64_t)(v4 + 24);
  *(void *)algn_48E4F8 = v4;
  return result;
}

void sub_1471E4(_Unwind_Exception *a1)
{
}

uint64_t sub_1471FC(uint64_t a1)
{
  *(void *)a1 = &off_4818B8;
  if (*(_BYTE *)(a1 + 112)) {
    sub_32C8C(*(void **)(a1 + 80));
  }
  return a1;
}

void sub_147238(void **__p)
{
  *std::string __p = &off_4818B8;
  if (*((_BYTE *)__p + 112)) {
    sub_32C8C(__p[10]);
  }
  operator delete(__p);
}

void sub_147274(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_47DD48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_147284(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_47DD48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1472A4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 32LL))(a1 + 24);
}

void sub_1472B4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_470D70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1472C4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_470D70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1472E4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 32LL))(a1 + 24);
}

void sub_1472F4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_470D38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_147304(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_470D38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_147324(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 32LL))(a1 + 24);
}

uint64_t sub_147334(uint64_t a1)
{
  *(void *)a1 = &off_4818B8;
  if (*(_BYTE *)(a1 + 112)) {
    sub_32C8C(*(void **)(a1 + 80));
  }
  return a1;
}

void sub_147370(void **__p)
{
  *std::string __p = &off_4818B8;
  if (*((_BYTE *)__p + 112)) {
    sub_32C8C(__p[10]);
  }
  operator delete(__p);
}

void sub_1473B4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_481840;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1473C4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_481840;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1473E4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 32LL))(a1 + 24);
}

void sub_1473F4(uint64_t a1, const void *a2)
{
  CFTypeID TypeID = CFArrayGetTypeID();
  if (TypeID != CFGetTypeID(a2))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_7D078(exception);
  }

  int Count = CFArrayGetCount((CFArrayRef)a2);
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = 0LL;
  sub_1475A4((void **)a1, Count);
  if (Count >= 1)
  {
    CFIndex v6 = 0LL;
    uint64_t v7 = Count;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, v6);
      float v9 = sub_AD7D0((uint64_t)ValueAtIndex);
      float v10 = v9;
      unsigned __int8 v12 = *(float **)(a1 + 8);
      unint64_t v11 = *(void *)(a1 + 16);
      if ((unint64_t)v12 >= v11)
      {
        unint64_t v14 = *(float **)a1;
        uint64_t v15 = ((uint64_t)v12 - *(void *)a1) >> 2;
        unint64_t v16 = v15 + 1;
        uint64_t v17 = v11 - (void)v14;
        if (v17 >> 1 > v16) {
          unint64_t v16 = v17 >> 1;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18) {
          unint64_t v18 = (unint64_t)sub_7A890(v18);
        }
        else {
          uint64_t v19 = 0LL;
        }
        uint64_t v20 = (float *)(v18 + 4 * v15);
        float *v20 = v10;
        uint64_t v13 = v20 + 1;
        while (v12 != v14)
        {
          int v21 = *((_DWORD *)v12-- - 1);
          *((_DWORD *)v20-- - 1) = v21;
        }

        *(void *)a1 = v20;
        *(void *)(a1 + 8) = v13;
        *(void *)(a1 + 16) = v18 + 4 * v19;
        if (v14) {
          operator delete(v14);
        }
      }

      else
      {
        *unsigned __int8 v12 = v9;
        uint64_t v13 = v12 + 1;
      }

      *(void *)(a1 + 8) = v13;
      ++v6;
    }

    while (v6 != v7);
  }

void sub_147570(_Unwind_Exception *a1)
{
}

void sub_1475A4(void **a1, unint64_t a2)
{
  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62) {
      sub_7A87C();
    }
    int64_t v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    int v4 = (char *)sub_7A890(a2);
    unsigned __int8 v5 = &v4[v3 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v7 = &v4[4 * v6];
    unsigned int v8 = (char *)*a1;
    float v9 = (char *)a1[1];
    float v10 = v5;
    if (v9 != *a1)
    {
      float v10 = v5;
      do
      {
        int v11 = *((_DWORD *)v9 - 1);
        v9 -= 4;
        *((_DWORD *)v10 - 1) = v11;
        v10 -= 4;
      }

      while (v9 != v8);
    }

    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8) {
      operator delete(v8);
    }
  }

void sub_147640(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_4817C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_147650(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_4817C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_147670(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 32LL))(a1 + 24);
}

CFTypeRef sub_147680(void *a1, const __CFDictionary *a2, const UInt8 *a3)
{
  int v4 = sub_1477B0(a2, a3);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_81384(exception);
  }

  unsigned __int8 v5 = v4;
  CFTypeRef result = CFRetain(v4);
  *a1 = v5;
  return result;
}

void sub_1476E0(_Unwind_Exception *a1)
{
}

BOOL sub_1476F8(const __CFNumber *a1)
{
  if (!a1) {
    goto LABEL_8;
  }
  CFTypeID TypeID = CFBooleanGetTypeID();
  if (TypeID != CFGetTypeID(a1))
  {
    CFTypeID v4 = CFNumberGetTypeID();
    if (v4 == CFGetTypeID(a1))
    {
      LOWORD(Value) = sub_83428(a1);
      if ((unsigned __int16)Value > 0xFFu)
      {
        int Value = Value;
        return Value != 0;
      }
    }

void sub_14779C(_Unwind_Exception *a1)
{
}

const void *sub_1477B0(const __CFDictionary *a1, const UInt8 *a2)
{
  int64_t v3 = a2;
  CFIndex v5 = a2[23];
  if ((v5 & 0x80u) != 0LL) {
    a2 = *(const UInt8 **)a2;
  }
  if (!a2)
  {
    CFStringRef v8 = 0LL;
    if (a1) {
      goto LABEL_9;
    }
LABEL_12:
    if (!v8) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }

  CFIndex v6 = *((void *)v3 + 1);
  if ((v5 & 0x80u) == 0LL) {
    CFIndex v7 = v5;
  }
  else {
    CFIndex v7 = v6;
  }
  CFStringRef v8 = CFStringCreateWithBytes(0LL, a2, v7, 0x8000100u, 0);
  if (!v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  if (!a1) {
    goto LABEL_12;
  }
LABEL_9:
  int Value = CFDictionaryGetValue(a1, v8);
  if (v8) {
LABEL_13:
  }
    CFRelease(v8);
LABEL_14:
  if (!a1) {
    return 0LL;
  }
  return Value;
}

void sub_14789C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_1478DC(uint64_t a1, CFDictionaryRef theDict)
{
  *(void *)a1 = theDict;
  *(_OWORD *)(a1 + 40) = 0u;
  int64_t v3 = (char **)(a1 + 40);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 56) = 0LL;
  if (theDict)
  {
    CFIndex Count = CFDictionaryGetCount(theDict);
    sub_148C54((char **)(a1 + 16), Count);
    sub_148C54(v3, Count);
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)a1, *(const void ***)(a1 + 16), *(const void ***)(a1 + 40));
  }

  return a1;
}

void sub_14795C(void *a1, void *a2)
{
  CFTypeRef v3 = cf;
  if (cf) {
    CFRetain(cf);
  }
  *a1 = v3;
  CFTypeRef v4 = v6;
  if (!v6)
  {
    a1[1] = 0LL;
    if (!v3) {
      return;
    }
    goto LABEL_7;
  }

  CFRetain(v6);
  a1[1] = v4;
  CFRelease(v4);
  if (v3) {
LABEL_7:
  }
    CFRelease(v3);
}

void sub_1479E8(std::string *a1, CFTypeRef *a2, size_t a3, uint64_t a4)
{
  if (!*a2) {
    goto LABEL_32;
  }
  CFTypeID v8 = CFGetTypeID(*a2);
  CFTypeID TypeID = CFBooleanGetTypeID();
  float v10 = (const __CFNumber *)*a2;
  if (v8 == TypeID)
  {
    if (v10)
    {
      if (!sub_1476F8(v10))
      {
        a1->__r_.__value_.__s.__size_ = 5;
        strcpy((char *)a1, "false");
        return;
      }

      a1->__r_.__value_.__s.__size_ = 4;
      int v11 = 1702195828;
      goto LABEL_45;
    }

    goto LABEL_182;
  }

  if (!v10) {
    goto LABEL_32;
  }
  CFTypeID v12 = CFGetTypeID(v10);
  CFTypeID v13 = CFNumberGetTypeID();
  CFTypeRef v14 = *a2;
  if (v12 != v13)
  {
    if (v14)
    {
      CFTypeID v19 = CFGetTypeID(v14);
      if (v19 == CFStringGetTypeID())
      {
        v104.__r_.__value_.__s.__size_ = 1;
        LOWORD(v104.__r_.__value_.__l.__data_) = 34;
        if (!*a2)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
        }

        uint64_t v20 = &v102;
        sub_48100((uint64_t)&v102, (const __CFString *)*a2);
        if ((v102.__r_.__value_.__s.__size_ & 0x80u) == 0)
        {
          std::string::size_type size = v102.__r_.__value_.__s.__size_;
        }

        else
        {
          std::string::size_type size = v102.__r_.__value_.__l.__size_;
          uint64_t v20 = (std::string *)v102.__r_.__value_.__r.__words[0];
        }

        memset(&v103, 0, sizeof(v103));
        if (size)
        {
          do
          {
            int v22 = v20->__r_.__value_.__s.__data_[0];
            if (v22 == 92 || v22 == 34)
            {
              std::string::push_back(&v103, 92);
              LOBYTE(sub_FAA90(v24, v22) = v20->__r_.__value_.__s.__data_[0];
            }

            std::string::push_back(&v103, v22);
            uint64_t v20 = (std::string *)((char *)v20 + 1);
            --size;
          }

          while (size);
          unsigned int v23 = v103.__r_.__value_.__s.__size_;
          std::string::size_type v24 = v103.__r_.__value_.__l.__size_;
          std::string::size_type v25 = v103.__r_.__value_.__r.__words[0];
        }

        else
        {
          std::string::size_type v24 = 0LL;
          std::string::size_type v25 = 0LL;
          unsigned int v23 = 0;
        }

        if ((v23 & 0x80u) == 0) {
          unsigned __int8 v69 = &v103;
        }
        else {
          unsigned __int8 v69 = (std::string *)v25;
        }
        if ((v23 & 0x80u) == 0) {
          std::string::size_type v70 = v23;
        }
        else {
          std::string::size_type v70 = v24;
        }
        std::string v71 = std::string::append(&v104, (const std::string::value_type *)v69, v70);
        __int128 v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
        valuePtr.__r_.__value_.__l.__cap_ = v71->__r_.__value_.__l.__cap_;
        *(_OWORD *)&valuePtr.__r_.__value_.__l.__data_ = v72;
        v71->__r_.__value_.__l.__size_ = 0LL;
        v71->__r_.__value_.__l.__cap_ = 0LL;
        v71->__r_.__value_.__r.__words[0] = 0LL;
        uint64_t v73 = std::string::append(&valuePtr, "", 1uLL);
        __int128 v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
        a1->__r_.__value_.__l.__cap_ = v73->__r_.__value_.__l.__cap_;
        *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v74;
        v73->__r_.__value_.__l.__size_ = 0LL;
        v73->__r_.__value_.__l.__cap_ = 0LL;
        v73->__r_.__value_.__r.__words[0] = 0LL;
        char v68 = (void *)v104.__r_.__value_.__r.__words[0];
        goto LABEL_115;
      }

      if (*a2)
      {
        CFTypeID v26 = CFGetTypeID(*a2);
        CFTypeID v27 = CFArrayGetTypeID();
        std::string::size_type v28 = (const __CFArray *)*a2;
        if (v26 == v27)
        {
          sub_82AF0((uint64_t)v107, a4);
          sub_14874C(a1, v28, a3, (uint64_t)v107);
          __int16 v29 = v108;
          if (v108 == v107)
          {
            uint64_t v30 = 4LL;
            __int16 v29 = v107;
            goto LABEL_136;
          }

void sub_148484( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20, char a21, int a22, __int16 a23, char a24, char a25, void *__p, uint64_t a27, int a28, __int16 a29, char a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40, uint64_t a41, void *a42, uint64_t a43, int a44, __int16 a45, char a46, char a47)
{
  unsigned int v50 = *(void **)(v48 - 112);
  if (v50 == v47)
  {
    uint64_t v51 = 4LL;
    unsigned int v50 = (void *)(v48 - 136);
  }

  else
  {
    if (!v50) {
      goto LABEL_6;
    }
    uint64_t v51 = 5LL;
  }

  (*(void (**)(void))(*v50 + 8 * v51))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_14868C(uint64_t a1)
{
  unsigned int v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  return a1;
}

uint64_t sub_1486CC(uint64_t a1)
{
  return a1;
}

void *sub_14870C(void *a1)
{
  unsigned int v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }

  CFTypeRef v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }

  return a1;
}

std::string *sub_14874C(std::string *a1, CFArrayRef theArray, size_t a3, uint64_t a4)
{
  a1->__r_.__value_.__s.__size_ = 1;
  LOWORD(a1->__r_.__value_.__l.__data_) = 91;
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    CFIndex v8 = CFArrayGetCount(theArray);
    if (Count)
    {
      if (v8)
      {
        unint64_t v9 = 0LL;
        size_t v10 = a3 + 2;
        CFIndex v11 = v8 - 1;
        char v12 = 1;
        while (1)
        {
          if ((v12 & 1) == 0) {
            std::string::append(a1, ",", 1uLL);
          }
          sub_7D130(&__b, v10, 32);
          CFTypeID v13 = std::string::insert(&__b, 0LL, "\n", 1uLL);
          __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
          int64_t cap = v13->__r_.__value_.__l.__cap_;
          *(_OWORD *)std::string __p = v14;
          v13->__r_.__value_.__l.__size_ = 0LL;
          v13->__r_.__value_.__l.__cap_ = 0LL;
          v13->__r_.__value_.__r.__words[0] = 0LL;
          if (cap >= 0) {
            float v15 = __p;
          }
          else {
            float v15 = (void **)__p[0];
          }
          if (cap >= 0) {
            std::string::size_type v16 = HIBYTE(cap);
          }
          else {
            std::string::size_type v16 = (std::string::size_type)__p[1];
          }
          std::string::append(a1, (const std::string::value_type *)v15, v16);
          if (SHIBYTE(cap) < 0) {
            operator delete(__p[0]);
          }
          sub_36030(&__b, theArray, v9);
          sub_82AF0((uint64_t)v31, a4);
          sub_1479E8(__p, &__b, v10, v31);
          if (cap >= 0) {
            CFTypeID v17 = __p;
          }
          else {
            CFTypeID v17 = (void **)__p[0];
          }
          if (cap >= 0) {
            std::string::size_type v18 = HIBYTE(cap);
          }
          else {
            std::string::size_type v18 = (std::string::size_type)__p[1];
          }
          std::string::append(a1, (const std::string::value_type *)v17, v18);
          if (SHIBYTE(cap) < 0) {
            operator delete(__p[0]);
          }
          CFTypeID v19 = v32;
          if (v32 == v31) {
            break;
          }
          if (v32)
          {
            uint64_t v20 = 5LL;
LABEL_29:
            (*(void (**)(void))(*v19 + 8 * v20))();
          }

          if (__b.__r_.__value_.__r.__words[0]) {
            CFRelease(__b.__r_.__value_.__l.__data_);
          }
          if (Count - 1 != v9)
          {
            char v12 = 0;
            if (v11 != v9++) {
              continue;
            }
          }

          goto LABEL_35;
        }

        CFTypeID v19 = v31;
        uint64_t v20 = 4LL;
        goto LABEL_29;
      }
    }
  }

void sub_148A04( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_148AE0(std::string *a1, std::string *a2, char *__s)
{
  size_t v6 = strlen(__s);
  CFIndex v7 = (__n128 *)std::string::append(a2, __s, v6);
  __n128 result = *v7;
  *a1 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0LL;
  v7->n128_u64[1] = 0LL;
  v7[1].n128_u64[0] = 0LL;
  return result;
}

__n128 sub_148B3C(std::string *a1, char *__s, std::string *a3)
{
  size_t v6 = strlen(__s);
  CFIndex v7 = (__n128 *)std::string::insert(a3, 0LL, __s, v6);
  __n128 result = *v7;
  *a1 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0LL;
  v7->n128_u64[1] = 0LL;
  v7[1].n128_u64[0] = 0LL;
  return result;
}

void *sub_148B9C(void *result, void *a2)
{
  unint64_t v2 = a2[1];
  if ((v2 & 0x8000000000000000LL) != 0 || (uint64_t v4 = a2[2], v2 >= (a2[3] - v4) >> 3))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_8F9F4(exception, "DictionaryRef_iterator iterator out of range.");
  }

  CFIndex v5 = result;
  uint64_t v6 = *(void *)(v4 + 8 * v2);
  if (v6)
  {
    __n128 result = CFRetain(*(CFTypeRef *)(v4 + 8 * v2));
    unint64_t v2 = a2[1];
  }

  uint64_t v7 = a2[5];
  uint64_t v8 = *(void *)(v7 + 8 * v2);
  if (v8) {
    __n128 result = CFRetain(*(CFTypeRef *)(v7 + 8 * v2));
  }
  void *v5 = v6;
  v5[1] = v8;
  return result;
}

void sub_148C40(_Unwind_Exception *a1)
{
}

void sub_148C54(char **a1, unint64_t a2)
{
  CFTypeRef v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    CFTypeID v19 = &v3[8 * a2];
    goto LABEL_17;
  }

  unint64_t v6 = a2 - v5;
  uint64_t v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 3)
  {
    bzero(a1[1], 8 * v6);
    CFTypeID v19 = &v4[8 * v6];
LABEL_17:
    a1[1] = v19;
    return;
  }

  if (a2 >> 61) {
    sub_7A87C();
  }
  uint64_t v8 = v7 - v3;
  uint64_t v9 = v8 >> 2;
  if (v8 >> 2 <= a2) {
    uint64_t v9 = a2;
  }
  else {
    unint64_t v10 = v9;
  }
  CFIndex v11 = (char *)sub_7DC90(v10);
  char v12 = &v11[8 * v5];
  __int128 v14 = &v11[8 * v13];
  bzero(v12, 8 * v6);
  float v15 = &v12[8 * v6];
  CFTypeID v17 = *a1;
  std::string::size_type v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      uint64_t v18 = *((void *)v16 - 1);
      v16 -= 8;
      *((void *)v12 - 1) = v18;
      v12 -= 8;
    }

    while (v16 != v17);
    std::string::size_type v16 = *a1;
  }

  *a1 = v12;
  a1[1] = v15;
  a1[2] = v14;
  if (v16) {
    operator delete(v16);
  }
}

void *sub_148D54(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_4856C0;
  result[1] = v3;
  return result;
}

uint64_t sub_148D88(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_4856C0;
  a2[1] = v2;
  return result;
}

uint64_t sub_148DA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a2, a3, a4);
}

uint64_t sub_148DB8(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }

    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }

    uint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return 0LL;
          }
        }

        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }

          else
          {
            v11 &= v7 - 1;
          }

          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }

  char v12 = (void *)(a1 + 16);
  uint64_t v13 = operator new(0x28uLL);
  v24[0] = v13;
  v24[1] = a1 + 16;
  char v25 = 0;
  *uint64_t v13 = 0LL;
  v13[1] = v6;
  *((_DWORD *)v13 + 4) = *a3;
  sub_2DC450((uint64_t)(v13 + 3), (uint64_t)(a3 + 2));
  char v25 = 1;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1LL;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_52168(a1, v19);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }

    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }

  uint64_t v20 = *(void *)a1;
  int v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t v13 = *v21;
LABEL_38:
    void *v21 = v13;
    goto LABEL_39;
  }

  *uint64_t v13 = *v12;
  *char v12 = v13;
  *(void *)(v20 + 8 * v3) = v12;
  if (*v13)
  {
    unint64_t v22 = *(void *)(*v13 + 8LL);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v22 >= v7) {
        v22 %= v7;
      }
    }

    else
    {
      v22 &= v7 - 1;
    }

    int v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }

void sub_148FF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t *sub_149008(uint64_t a1, CFDictionaryRef *a2, uint64_t a3)
{
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_7E414(exception);
  }

  if (CFDictionaryGetCount(*a2) != 2)
  {
    unint64_t v18 = (os_log_t *)sub_138E8(13);
    size_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      CFDictionaryRef v20 = *a2;
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "DSPGraphConfig_Actions.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 421;
      *(_WORD *)&_BYTE buf[18] = 2112;
      *(void *)&buf[20] = v20;
      _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Metadata provided for tuning overlay tunings must have 2 entries. Dictionary: %@",  buf,  0x1Cu);
    }

    int v21 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error( v21,  "Metadata provided for tuning overlay tunings must have 2 entries. Dictionary: %@");
  }

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + sub_7A768(v9 - 32) = 1065353216;
  sub_149690((uint64_t)buf, *a2);
  sub_149690((uint64_t)&v32, *a2);
  uint64_t v6 = a3 + 24;
  uint64_t v33 = (v35 - (_BYTE *)v34) >> 3;
  while (1)
  {
    if (*(void *)buf
      && (unint64_t v7 = *(void *)&buf[8], *(void *)&buf[8] != (uint64_t)(*(void *)&buf[24] - *(void *)&buf[16]) >> 3))
    {
      uint64_t v8 = v32;
    }

    else
    {
      uint64_t v8 = v32;
      if (!v32 || v33 == (v35 - (_BYTE *)v34) >> 3) {
        break;
      }
      unint64_t v7 = *(void *)&buf[8];
    }

    if (*(void *)buf == v8 && v7 == v33) {
      break;
    }
    if ((v7 & 0x8000000000000000LL) != 0 || v7 >= (uint64_t)(*(void *)&buf[24] - *(void *)&buf[16]) >> 3)
    {
      BOOL v16 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v16, "DictionaryRef_iterator iterator out of range.");
    }

    sub_48100((uint64_t)&__dst, *(const __CFString **)(*(void *)&buf[16] + 8 * v7));
    BOOL v10 = sub_1476F8(v40[*(void *)&buf[8]]);
    std::__fs::filesystem::path v30 = __dst;
    BOOL v31 = v10;
    int size = (char)__dst.__pn_.__r_.__value_.__s.__size_;
    if ((__dst.__pn_.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      size_t cap_high = HIBYTE(__dst.__pn_.__r_.__value_.__l.__cap_);
    }
    else {
      size_t cap_high = v30.__pn_.__r_.__value_.__l.__size_;
    }
    sub_D0924((uint64_t)&v27, cap_high + 8);
    if ((v27.__pn_.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v13 = &v27;
    }
    else {
      uint64_t v13 = (std::__fs::filesystem::path *)v27.__pn_.__r_.__value_.__r.__words[0];
    }
    if (cap_high)
    {
      if (size >= 0) {
        float v14 = &v30;
      }
      else {
        float v14 = (std::__fs::filesystem::path *)v30.__pn_.__r_.__value_.__r.__words[0];
      }
      memmove(v13, v14, cap_high);
    }

    strcpy((char *)v13 + cap_high, ".austrip");
    std::__fs::filesystem::path v28 = v27;
    memset(&v27, 0, sizeof(v27));
    sub_83AA0(&__p, v6, &v28);
    if ((char)__p.__pn_.__r_.__value_.__s.__size_ < 0)
    {
      sub_24054(&__dst, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
    }

    else
    {
      std::__fs::filesystem::path __dst = __p;
    }

    sub_2DC0BC((uint64_t)&v28, (uint64_t)&__dst);
    LODWORD(__p.__pn_.__r_.__value_.__l.__data_) = v10;
    sub_2DC450((uint64_t)&__p.__pn_.__r_.__value_.__l.__size_, (uint64_t)&v28);
    sub_148DB8(a1, (int)__p.__pn_.__r_.__value_.__l.__data_, &__p);
    sub_2DBF5C((uint64_t)&__p.__pn_.__r_.__value_.__l.__size_);
    sub_2DBF5C((uint64_t)&v28);
    if ((char)__dst.__pn_.__r_.__value_.__s.__size_ < 0)
    {
      operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
      if ((size & 0x80000000) == 0) {
        goto LABEL_37;
      }
    }

    else if ((size & 0x80000000) == 0)
    {
      goto LABEL_37;
    }

    operator delete(v30.__pn_.__r_.__value_.__l.__data_);
LABEL_37:
    ++*(void *)&buf[8];
  }

  if (v36)
  {
    __int128 v37 = v36;
    operator delete(v36);
  }

  if (v34)
  {
    int v35 = v34;
    operator delete(v34);
  }

  if (v40)
  {
    unint64_t v41 = v40;
    operator delete(v40);
  }

  if (*(void *)&buf[16])
  {
    *(void *)&_BYTE buf[24] = *(void *)&buf[16];
    operator delete(*(void **)&buf[16]);
  }

  if (!sub_D01B4((void *)a1, 1))
  {
    unint64_t v22 = (os_log_t *)sub_138E8(13);
    __int128 v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "DSPGraphConfig_Actions.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 430;
      _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Resulting map does not cover if enrollment is set to true",  buf,  0x12u);
    }

    std::string::size_type v24 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v24, "Resulting map does not cover if enrollment is set to true");
LABEL_65:
  }

  __n128 result = sub_D01B4((void *)a1, 0);
  if (!result)
  {
    char v25 = (os_log_t *)sub_138E8(13);
    CFTypeID v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "DSPGraphConfig_Actions.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 431;
      _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Resulting map does not cover if enrollment is set to false",  buf,  0x12u);
    }

    std::string::size_type v24 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v24, "Resulting map does not cover if enrollment is set to false");
    goto LABEL_65;
  }

  return result;
}

void sub_14957C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *__p, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, uint64_t a30, uint64_t a31, char a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, int a42, __int16 a43, char a44, char a45)
{
}

void sub_14967C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, int a33, __int16 a34, char a35, char a36)
{
  if (a36 < 0) {
    JUMPOUT(0x149658LL);
  }
  JUMPOUT(0x14965CLL);
}

uint64_t sub_149690(uint64_t a1, CFDictionaryRef theDict)
{
  *(void *)a1 = theDict;
  *(_OWORD *)(a1 + 40) = 0u;
  unint64_t v3 = (char **)(a1 + 40);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 56) = 0LL;
  if (theDict)
  {
    CFIndex Count = CFDictionaryGetCount(theDict);
    sub_148C54((char **)(a1 + 16), Count);
    sub_148C54(v3, Count);
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)a1, *(const void ***)(a1 + 16), *(const void ***)(a1 + 40));
  }

  return a1;
}

uint64_t sub_149710(uint64_t a1, int *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + sub_7A768(v9 - 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 24 * a3;
    do
    {
      sub_D14D8(a1, *a2, a2);
      a2 += 6;
      v5 -= 24LL;
    }

    while (v5);
  }

  return a1;
}

void sub_149774(_Unwind_Exception *a1)
{
}

uint64_t sub_149788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2DBF5C((uint64_t)v6);
}

void sub_1497F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_149814(uint64_t a1, unint64_t a2, int a3)
{
  if (!a2) {
    return 0LL;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a3;
    if (a3 >= a2) {
      unint64_t v4 = a3 % a2;
    }
  }

  else
  {
    unint64_t v4 = (a2 - 1) & a3;
  }

  uint64_t v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5) {
    return 0LL;
  }
  for (__n128 result = *v5; result; __n128 result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3) {
        return result;
      }
    }

    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2) {
          v7 %= a2;
        }
      }

      else
      {
        v7 &= a2 - 1;
      }

      if (v7 != v4) {
        return 0LL;
      }
    }
  }

  return result;
}

void *sub_1498C0(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = 0LL;
  v2[1] = 0LL;
  sub_2DC450(v2 + 2, a1);
  return v2;
}

void sub_1498FC(_Unwind_Exception *a1)
{
}

uint64_t *sub_149910(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  if (a3)
  {
    uint64_t v5 = 16 * a3;
    do
    {
      uint64_t v6 = sub_1498C0(a2);
      uint64_t v7 = *a1;
      void *v6 = *a1;
      v6[1] = a1;
      *(void *)(v7 + 8) = v6;
      *a1 = (uint64_t)v6;
      ++a1[2];
      a2 += 16LL;
      v5 -= 16LL;
    }

    while (v5);
  }

  return a1;
}

void sub_14997C(_Unwind_Exception *a1)
{
}

void sub_149990(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint8x8_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0LL;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        sub_2DBF5C(v3 + 2);
        operator delete(v3);
        uint8x8_t v3 = v5;
      }

      while (v5 != a1);
    }
  }

uint64_t sub_149A00(int a1)
{
  uint64_t v1 = qword_49DAA0;
  if (!qword_49DAA0) {
LABEL_8:
  }
    sub_8F9A4("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      int v2 = *(_DWORD *)(v1 + 32);
      if (v2 <= a1) {
        break;
      }
      uint64_t v1 = *(void *)v1;
      if (!v1) {
        goto LABEL_8;
      }
    }

    if (v2 >= a1) {
      return v1 + 40;
    }
    uint64_t v1 = *(void *)(v1 + 8);
    if (!v1) {
      goto LABEL_8;
    }
  }

void sub_149A50(uint64_t a1, int a2, uint64_t a3)
{
  int v16 = a2;
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    BOOL v10 = (os_log_t *)sub_138E8(13);
    unint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      unint64_t v18 = "DSPGraphConfig_Actions.cpp";
      __int16 v19 = 1024;
      v20[0] = 44;
      _os_log_impl(&dword_0, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  sub_149D44((uint64_t)buf, &v16);
  CFDataRef v5 = CFDataCreate(0LL, *(const UInt8 **)a3, *(void *)(a3 + 8) - *(void *)a3);
  if (!v5)
  {
    uint64_t v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v13, "Could not construct");
  }

  sub_14591C(&cf, v5);
  sub_149E14((uint64_t)v20 + 2, &cf);
  v15[0] = buf;
  v15[1] = 2LL;
  CFDictionaryRef v6 = sub_5A950((uint64_t)v15);
  uint64_t v7 = 0LL;
  v15[2] = v6;
  do
  {
    uint64_t v8 = *(const void **)((char *)&v20[v7 + 2] + 2);
    if (v8) {
      CFRelease(v8);
    }
    uint64_t v9 = *(const void **)((char *)&v20[v7] + 2);
    if (v9) {
      CFRelease(v9);
    }
    v7 -= 4LL;
  }

  while (v7 != -8);
  if (cf) {
    CFRelease(cf);
  }
  sub_2DC034((uint64_t)v15, v6);
  *(_DWORD *)buf = 1735553138;
  sub_2DC450((uint64_t)&v18 + 4, (uint64_t)v15);
  sub_149710(a1, (int *)buf, 1LL);
  sub_2DBF5C((uint64_t)&v18 + 4);
  sub_2DBF5C((uint64_t)v15);
  CFRelease(v6);
}

void sub_149C7C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18)
{
}

uint64_t sub_149D44(uint64_t a1, int *a2)
{
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0LL, kCFNumberIntType, &valuePtr);
  *(void *)(a1 + 8) = v4;
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  return a1;
}

void sub_149DD8(_Unwind_Exception *a1)
{
  uint8x8_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_7DCC4((const void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_149E14(uint64_t a1, const void **a2)
{
  CFNumberRef v4 = *a2;
  if (v4) {
    CFRetain(v4);
  }
  *(void *)(a1 + 8) = v4;
  return a1;
}

void sub_149E5C(void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (char *)**a1;
  if (v2)
  {
    CFNumberRef v4 = (char *)v1[1];
    CFDataRef v5 = **a1;
    if (v4 != v2)
    {
      CFDictionaryRef v6 = (char *)v1[1];
      do
      {
        uint64_t v8 = (void *)*((void *)v6 - 3);
        v6 -= 24;
        uint64_t v7 = v8;
        if (v8)
        {
          *((void *)v4 - 2) = v7;
          operator delete(v7);
        }

        CFNumberRef v4 = v6;
      }

      while (v6 != v2);
      CFDataRef v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void *sub_149ED8(uint64_t a1)
{
  int v2 = operator new(0x20uLL);
  *int v2 = 0LL;
  v2[1] = 0LL;
  sub_2DC450((uint64_t)(v2 + 2), a1);
  return v2;
}

void sub_149F14(_Unwind_Exception *a1)
{
}

uint64_t sub_149F28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_2DC450(a1, a2);
  sub_2DC450(v5 + 16, a3);
  return a1;
}

void sub_149F5C(_Unwind_Exception *a1)
{
}

uint64_t sub_149F70(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
  {
    uint64_t v2 = **(void **)(a1 + 16);
    uint64_t v3 = **(void **)(a1 + 8);
    if (v2 != v3)
    {
      uint64_t v4 = **(void **)(a1 + 16);
      do
      {
        CFDictionaryRef v6 = *(void **)(v4 - 24);
        v4 -= 24LL;
        uint64_t v5 = v6;
        if (v6)
        {
          *(void *)(v2 - 16) = v5;
          operator delete(v5);
        }

        uint64_t v2 = v4;
      }

      while (v4 != v3);
    }
  }

  return a1;
}

void sub_149FD4(uint64_t a1, const __CFArray *a2)
{
  if (a2 && (CFTypeID TypeID = CFArrayGetTypeID(), TypeID == CFGetTypeID(a2)))
  {
    int Count = CFArrayGetCount(a2);
    int v21 = 0LL;
    unint64_t v22 = 0LL;
    unint64_t v23 = 0LL;
    sub_14A1F0((void **)&v21, Count);
    if (Count <= 0)
    {
      uint64_t v9 = v21;
      float v14 = v22;
      unint64_t v8 = v23;
LABEL_27:
      *(void *)a1 = v9;
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + 16) = v8;
      *(_BYTE *)(a1 + 24) = 1;
    }

    else
    {
      CFIndex v6 = 0LL;
      uint64_t v7 = Count;
      unint64_t v8 = v23;
      uint64_t v9 = v21;
      while (1)
      {
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a2, v6);
        unint64_t v11 = sub_36328(ValueAtIndex);
        int v12 = (int)v11;
        uint64_t v13 = v22;
        if ((unint64_t)v22 >= v8)
        {
          uint64_t v15 = (v22 - v9) >> 2;
          unint64_t v16 = v15 + 1;
          else {
            unint64_t v17 = v16;
          }
          if (v17) {
            unint64_t v17 = (unint64_t)sub_7A890(v17);
          }
          else {
            uint64_t v18 = 0LL;
          }
          __int16 v19 = (_DWORD *)(v17 + 4 * v15);
          *__int16 v19 = v12;
          float v14 = (char *)(v19 + 1);
          while (v13 != v9)
          {
            int v20 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *--__int16 v19 = v20;
          }

          unint64_t v8 = v17 + 4 * v18;
          if (v9) {
            operator delete(v9);
          }
          uint64_t v9 = v19;
        }

        else
        {
          *(_DWORD *)unint64_t v22 = (_DWORD)v11;
          float v14 = v13 + 4;
        }

        unint64_t v22 = v14;
        if (++v6 == v7) {
          goto LABEL_27;
        }
      }

      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 24) = 0;
      if (v9) {
        operator delete(v9);
      }
    }
  }

  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }

void *sub_14A180(void *result, void *a2)
{
  uint64_t v3 = (void *)*result;
  uint64_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    *(void *)(v4 - 24) = 0LL;
    *(void *)(v4 - 16) = 0LL;
    v4 -= 24LL;
    *(void *)(v4 + 16) = 0LL;
    __int128 v5 = *(_OWORD *)(v2 - 3);
    v2 -= 3;
    *(_OWORD *)uint64_t v4 = v5;
    *(void *)(v4 + 16) = v2[2];
    *uint64_t v2 = 0LL;
    v2[1] = 0LL;
    v2[2] = 0LL;
  }

  a2[1] = v4;
  CFIndex v6 = (void *)*result;
  uint64_t *result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void sub_14A1F0(void **a1, unint64_t a2)
{
  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62) {
      sub_7A87C();
    }
    int64_t v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    uint64_t v4 = (char *)sub_7A890(a2);
    __int128 v5 = &v4[v3 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v7 = &v4[4 * v6];
    uint64_t v8 = (char *)*a1;
    uint64_t v9 = (char *)a1[1];
    BOOL v10 = v5;
    if (v9 != *a1)
    {
      BOOL v10 = v5;
      do
      {
        int v11 = *((_DWORD *)v9 - 1);
        v9 -= 4;
        *((_DWORD *)v10 - 1) = v11;
        v10 -= 4;
      }

      while (v9 != v8);
    }

    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8) {
      operator delete(v8);
    }
  }

void sub_14A284(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    __int128 v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (const void *)*((void *)v4 - 1);
        v4 -= 8;
        sub_14A2F0(v6);
      }

      while (v4 != v2);
      __int128 v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_14A2F0(const void *a1)
{
  if (a1) {
    CFRelease(a1);
  }
}

uint64_t sub_14A30C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(const void **)(i - 8);
    *(void *)(a1 + 16) = i - 8;
    sub_14A2F0(v4);
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 sub_14A358(uint64_t a1, const __CFDictionary *a2, const UInt8 *a3, __n128 *a4)
{
  uint64_t v6 = (const __CFArray *)sub_1477B0(a2, a3);
  if (!v6)
  {
    LOBYTE(v8) = 0;
    char v10 = 0;
    goto LABEL_6;
  }

  sub_14A724((uint64_t)&v8, v6);
  if (!v10)
  {
LABEL_6:
    __n128 result = *a4;
    *(__n128 *)a1 = *a4;
    *(void *)(a1 + 16) = a4[1].n128_u64[0];
    a4->n128_u64[1] = 0LL;
    a4[1].n128_u64[0] = 0LL;
    a4->n128_u64[0] = 0LL;
    return result;
  }

  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  sub_8DC78((char *)a1, v8, v9, 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v8) >> 3));
  if (v10)
  {
    int v11 = &v8;
    sub_8CD60((void ***)&v11);
  }

  return result;
}

void sub_14A40C(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)bytes = a2;
  int v18 = 21;
  sub_59370(&v19, "AUName");
  int v5 = *(char *)(a3 + 23);
  if (v5 >= 0) {
    uint64_t v6 = (const UInt8 *)a3;
  }
  else {
    uint64_t v6 = *(const UInt8 **)a3;
  }
  if (v5 >= 0) {
    CFIndex v7 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    CFIndex v7 = *(void *)(a3 + 8);
  }
  CFStringRef v20 = CFStringCreateWithBytes(0LL, v6, v7, 0x8000100u, 0);
  if (!v20)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  sub_149D44((uint64_t)&v21, &v18);
  CFDataRef v8 = CFDataCreate(0LL, bytes, 4LL);
  if (!v8)
  {
    float v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "Could not construct");
  }

  sub_14591C(&cf, v8);
  sub_149E14((uint64_t)v22, &cf);
  v16[0] = &v19;
  v16[1] = 3LL;
  CFDictionaryRef v9 = sub_5A950((uint64_t)v16);
  uint64_t v10 = 0LL;
  v16[2] = v9;
  do
  {
    int v11 = *(const void **)&v22[v10 + 8];
    if (v11) {
      CFRelease(v11);
    }
    int v12 = *(const void **)&v22[v10];
    if (v12) {
      CFRelease(v12);
    }
    v10 -= 16LL;
  }

  while (v10 != -48);
  if (cf) {
    CFRelease(cf);
  }
  sub_2DC034((uint64_t)v16, v9);
  LODWORD(v19) = 1652060274;
  sub_2DC450((uint64_t)&v20, (uint64_t)v16);
  sub_149710(a1, (int *)&v19, 1LL);
  sub_2DBF5C((uint64_t)&v20);
  sub_2DBF5C((uint64_t)v16);
  CFRelease(v9);
}

void sub_14A614( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, CFTypeRef cf)
{
  while (v15 != &a14)
  {
    v15 -= 16;
    sub_7BFE0((uint64_t)v15);
  }

  _Unwind_Resume(a1);
}

void sub_14A724(uint64_t a1, const __CFArray *a2)
{
  CFTypeID TypeID = CFArrayGetTypeID();
  if (TypeID == CFGetTypeID(a2))
  {
    int Count = CFArrayGetCount(a2);
    __int128 v18 = 0uLL;
    unint64_t v19 = 0LL;
    sub_47F8C((uint64_t *)&v18, Count);
    if (Count < 1)
    {
LABEL_18:
      *(_OWORD *)a1 = v18;
      *(void *)(a1 + 16) = v19;
      unint64_t v19 = 0LL;
      __int128 v18 = 0uLL;
      *(_BYTE *)(a1 + 24) = 1;
    }

    else
    {
      CFIndex v6 = 0LL;
      while (1)
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a2, v6);
        sub_7D2D4((CFTypeID)&v15, ValueAtIndex);
        if (!v17) {
          break;
        }
        uint64_t v8 = *((void *)&v18 + 1);
        if (*((void *)&v18 + 1) >= v19)
        {
          unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v18 + 1) - v18) >> 3);
          unint64_t v11 = v10 + 1;
          if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_7A87C();
          }
          else {
            unint64_t v12 = v11;
          }
          v20[4] = (void **)&v19;
          if (v12) {
            unint64_t v12 = (unint64_t)sub_8D44C(v12);
          }
          else {
            uint64_t v13 = 0LL;
          }
          unint64_t v14 = v12 + 24 * v10;
          v20[0] = (void **)v12;
          v20[1] = (void **)v14;
          void v20[3] = (void **)(v12 + 24 * v13);
          *(_OWORD *)unint64_t v14 = v15;
          *(void *)(v14 + 16) = v16;
          __int128 v15 = 0uLL;
          uint64_t v16 = 0LL;
          v20[2] = (void **)(v14 + 24);
          sub_4802C((uint64_t *)&v18, v20);
          uint64_t v9 = *((void *)&v18 + 1);
          sub_480A0((uint64_t)v20);
        }

        else
        {
          **((_OWORD **)&v18 + 1) = v15;
          *(void *)(v8 + 16) = v16;
          uint64_t v16 = 0LL;
          __int128 v15 = 0uLL;
          uint64_t v9 = v8 + 24;
        }

        *((void *)&v18 + 1) = v9;
        if (Count == ++v6) {
          goto LABEL_18;
        }
      }

      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 24) = 0;
    }

    v20[0] = (void **)&v18;
    sub_8CD60(v20);
  }

  else
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }

void *sub_14A928(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    CFIndex v6 = result;
    __n128 result = sub_7A840(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }

  return result;
}

void sub_14A984(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

uint64_t sub_14A9A0(uint64_t a1, const void **a2, const void **a3)
{
  else {
    size_t v5 = (size_t)a2[1];
  }
  else {
    size_t v6 = (size_t)a3[1];
  }
  uint64_t result = sub_D0924(a1, v6 + v5);
  else {
    size_t v8 = *(char **)result;
  }
  if (v5)
  {
    else {
      uint64_t v9 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }

  unint64_t v10 = &v8[v5];
  if (v6)
  {
    else {
      unint64_t v11 = *a3;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v6);
  }

  v10[v6] = 0;
  return result;
}

char *sub_14AA58(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  uint64_t v4 = __dst;
  unint64_t v11 = __dst;
  unint64_t v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    size_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_24054(v4, *(void **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }

      else
      {
        __int128 v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v4 = v7;
      }

      size_t v6 = (__int128 *)((char *)v6 + 24);
      v4 += 24;
      unint64_t v12 = v4;
    }

    while (v6 != a3);
  }

  char v10 = 1;
  sub_8D490((uint64_t)v9);
  return v4;
}

void sub_14AB00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_14AB14(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
  {
    uint64_t v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }

  return a1;
}

void *sub_14AB54(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_485678;
  result[1] = v3;
  return result;
}

uint64_t sub_14AB88(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_485678;
  a2[1] = v2;
  return result;
}

uint64_t sub_14ABA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a2, a3, a4);
}

void sub_14ABB8()
{
}

void sub_14B134(_Unwind_Exception *exception_object)
{
  while (1)
  {
    size_t v5 = (void **)*--v2;
    uint64_t v4 = v5;
    *uint64_t v2 = 0LL;
    if (v5) {
      sub_14B7DC(v4);
    }
    if (v2 == v1) {
      _Unwind_Resume(exception_object);
    }
  }

void sub_14B158(void *a1, const char *a2, const char *a3)
{
  size_t v6 = operator new(0x10uLL);
  v6[1] = 0LL;
  void *v6 = os_log_create("com.apple.coreaudio", a2);
  *a1 = v6;
  CFStringRef v7 = CFStringCreateWithBytes(0LL, (const UInt8 *)"com.apple.coreaudio", 19LL, 0x8000100u, 0);
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  size_t v8 = strlen(a3);
  if (a3)
  {
    CFStringRef v9 = CFStringCreateWithBytes(0LL, (const UInt8 *)a3, v8, 0x8000100u, 0);
    if (!v9)
    {
      char v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v10, "Could not construct");
    }
  }

  else
  {
    CFStringRef v9 = 0LL;
  }

  v44[0] = &off_484C68;
  v44[1] = v6;
  uint64_t v45 = v44;
  unsigned __int8 v11 = atomic_load((unsigned __int8 *)&qword_4A0910);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_4A0910))
  {
    sub_32D1DC();
    __cxa_guard_release(&qword_4A0910);
  }

  std::string::size_type v46 = sub_388BFC;
  unint64_t v12 = v47;
  uint64_t v13 = (uint64_t)v45;
  if (v45)
  {
    if (v45 == v44)
    {
      uint64_t v48 = v47;
      (*(void (**)(void *, _BYTE *))(v44[0] + 24LL))(v44, v47);
      goto LABEL_12;
    }

    uint64_t v13 = (*(uint64_t (**)(void))(*v45 + 16LL))();
  }

  uint64_t v48 = (_BYTE *)v13;
LABEL_12:
  unsigned int v50 = 0LL;
  unint64_t v14 = operator new(0x30uLL);
  __int128 v15 = v46;
  void *v14 = &off_484C20;
  v14[1] = v15;
  sub_22C48C((uint64_t)(v14 + 2), (uint64_t)v47);
  unsigned int v50 = v14;
  std::mutex::lock((std::mutex *)&qword_4A08A8);
  char v17 = (CFTypeRef *)*((void *)&xmmword_4A08F0 + 1);
  for (uint64_t i = (CFTypeRef *)xmmword_4A08F0; i != v17; i += 6)
  {
    if (CFEqual(v9, *i) && CFEqual(v7, i[1])) {
      goto LABEL_42;
    }
  }

  CFRetain(v9);
  CFRetain(v7);
  uint64_t v18 = *((void *)&xmmword_4A08F0 + 1);
  if (*((void *)&xmmword_4A08F0 + 1) >= (unint64_t)qword_4A0900)
  {
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&xmmword_4A08F0 + 1) - xmmword_4A08F0) >> 4);
    if (v20 + 1 > 0x555555555555555LL) {
      sub_7A87C();
    }
    unint64_t v21 = 0x5555555555555556LL * ((qword_4A0900 - (uint64_t)xmmword_4A08F0) >> 4);
    if (v21 <= v20 + 1) {
      unint64_t v21 = v20 + 1;
    }
    else {
      unint64_t v22 = v21;
    }
    int v43 = &qword_4A0900;
    if (v22)
    {
      if (v22 > 0x555555555555555LL) {
        sub_7A8C4();
      }
      unint64_t v23 = (char *)operator new(48 * v22);
    }

    else
    {
      unint64_t v23 = 0LL;
    }

    __int128 v40 = v23;
    v41.i64[0] = (uint64_t)&v23[48 * v20];
    uint64_t v42 = (uint64_t)&v23[48 * v22];
    sub_32D6C4(v41.i64[0], (uint64_t)v9, (uint64_t)v7, v49);
    uint64_t v24 = v41.i64[0];
    uint64_t v19 = v41.i64[0] + 48;
    v41.i64[1] = v41.i64[0] + 48;
    __int128 v25 = xmmword_4A08F0;
    if (*((void *)&xmmword_4A08F0 + 1) == (void)xmmword_4A08F0)
    {
      int64x2_t v32 = vdupq_n_s64(*((unint64_t *)&xmmword_4A08F0 + 1));
LABEL_40:
      *(void *)&xmmword_4A08F0 = v24;
      *((void *)&xmmword_4A08F0 + 1) = v19;
      int64x2_t v41 = v32;
      uint64_t v33 = qword_4A0900;
      qword_4A0900 = v42;
      uint64_t v42 = v33;
      __int128 v40 = (char *)v32.i64[0];
      sub_32D838((uint64_t)&v40);
      goto LABEL_41;
    }

    uint64_t v26 = 0LL;
    uint64_t v27 = *((void *)&xmmword_4A08F0 + 1);
    while (1)
    {
      uint64_t v28 = v24 + v26;
      uint64_t v29 = *((void *)&v25 + 1) + v26;
      *(_OWORD *)(v24 + v26 - sub_51FA0(v10 + 48) = *(_OWORD *)(*((void *)&v25 + 1) + v26 - 48);
      uint64_t v30 = *(void *)(*((void *)&v25 + 1) + v26 - 8);
      if (v30)
      {
        if (v29 - 32 == v30)
        {
          *(void *)(v28 - 8) = v28 - 32;
          (*(void (**)(void))(**(void **)(v29 - 8) + 24LL))(*(void *)(v29 - 8));
          goto LABEL_37;
        }

        BOOL v31 = (void *)(v27 - 8);
        *(void *)(v28 - 8) = v30;
      }

      else
      {
        BOOL v31 = (void *)(v28 - 8);
      }

      void *v31 = 0LL;
LABEL_37:
      v27 -= 48LL;
      v26 -= 48LL;
      if (*((void *)&v25 + 1) + v26 == (void)v25)
      {
        v24 += v26;
        int64x2_t v32 = (int64x2_t)xmmword_4A08F0;
        uint64_t v19 = v41.i64[1];
        goto LABEL_40;
      }
    }
  }

  sub_32D6C4(*((void **)&xmmword_4A08F0 + 1), (uint64_t)v9, (uint64_t)v7, v49);
  uint64_t v19 = v18 + 48;
  *((void *)&xmmword_4A08F0 + 1) = v18 + 48;
LABEL_41:
  *((void *)&xmmword_4A08F0 + 1) = v19;
  CFSetAddValue((CFMutableSetRef)qword_4A08E8, v7);
  sub_32D35C(*((void *)&xmmword_4A08F0 + 1) - 48LL);
LABEL_42:
  std::mutex::unlock((std::mutex *)&qword_4A08A8);
  std::string::size_type v34 = v50;
  if (v50 == v49)
  {
    uint64_t v35 = 4LL;
    std::string::size_type v34 = v49;
  }

  else
  {
    if (!v50) {
      goto LABEL_47;
    }
    uint64_t v35 = 5LL;
  }

  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_47:
  if (v48 == v47)
  {
    uint64_t v36 = 4LL;
  }

  else
  {
    if (!v48) {
      goto LABEL_52;
    }
    uint64_t v36 = 5LL;
    unint64_t v12 = v48;
  }

  (*(void (**)(void *))(*v12 + 8 * v36))(v12);
LABEL_52:
  __int128 v37 = v45;
  if (v45 == v44)
  {
    uint64_t v38 = 4LL;
    __int128 v37 = v44;
  }

  else
  {
    if (!v45) {
      goto LABEL_57;
    }
    uint64_t v38 = 5LL;
  }

  (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_57:
  if (v9) {
    CFRelease(v9);
  }
  CFRelease(v7);
}

void sub_14B67C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const void *a11, const void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, char *a21)
{
  uint64_t v24 = a21;
  if (a21 == &a18)
  {
    uint64_t v25 = 4LL;
    uint64_t v24 = &a18;
  }

  else
  {
    if (!a21) {
      goto LABEL_6;
    }
    uint64_t v25 = 5LL;
  }

  (*(void (**)(void))(*(void *)v24 + 8 * v25))();
LABEL_6:
  sub_7A738(&a11);
  sub_7A738(&a12);
  *unint64_t v22 = 0LL;
  sub_14B7DC(v21);
  _Unwind_Resume(a1);
}

void sub_14B7DC(void **a1)
{
  if (a1)
  {
    os_release(*a1);
    operator delete(a1);
  }

void *sub_14B818(void *a1, uint64_t a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0LL;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a2)
  {
    uint64_t v5 = 1LL;
    size_t v6 = a1;
    do
    {
      CFStringRef v7 = operator new(0x20uLL);
      uint64_t v8 = *(void *)(v3 + 16);
      v7[6] = *(_DWORD *)(v3 + 24);
      *((void *)v7 + 1) = a1;
      *((void *)v7 + 2) = v8;
      *(void *)CFStringRef v7 = v6;
      *((void *)v6 + 1) = v7;
      *a1 = v7;
      a1[2] = v5;
      uint64_t v3 = *(void *)(v3 + 8);
      ++v5;
      size_t v6 = v7;
    }

    while (v3 != a2);
  }

  return a1;
}

void sub_14B8A4(_Unwind_Exception *a1)
{
}

uint64_t sub_14B8B8(uint64_t a1, int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 == a1) {
    return 0LL;
  }
  int v3 = *a2;
  int v4 = a2[1];
  int v5 = a2[2];
  while (1)
  {
    int v6 = *(_DWORD *)(v2 + 24);
    if (v4 == 707406378 || ((v7 = *(_DWORD *)(v2 + 20), v7 != 707406378) ? (BOOL v8 = v7 == v4) : (BOOL v8 = 1), v8))
    {
      if (v3 == 707406378 || ((int v9 = *(_DWORD *)(v2 + 16), v9 != 707406378) ? (v10 = v9 == v3) : (v10 = 1), v10))
      {
        uint64_t v11 = 1LL;
        if (v5 == -1) {
          break;
        }
        if (v6 == -1 || v6 == v5) {
          break;
        }
      }
    }

    uint64_t v2 = *(void *)(v2 + 8);
    if (v2 == a1) {
      return 0LL;
    }
  }

  return v11;
}

BOOL sub_14B938(const __CFString *a1)
{
  CFPropertyListRef v1 = CFPreferencesCopyValue( a1,  @"com.apple.audio.virtualaudio",  kCFPreferencesCurrentUser,  kCFPreferencesAnyHost);
  CFPropertyListRef v2 = v1;
  if (v1) {
    CFRelease(v1);
  }
  return v2 != 0LL;
}

BOOL sub_14B98C(const __CFString *a1, CFStringRef applicationID, _DWORD *a3)
{
  int v3 = 0;
  Boolean keyExistsAndHasValidFormat = 0;
  if (a1)
  {
    if (applicationID)
    {
      *a3 = CFPreferencesGetAppIntegerValue(a1, applicationID, &keyExistsAndHasValidFormat);
      int v3 = keyExistsAndHasValidFormat;
      if (!keyExistsAndHasValidFormat)
      {
        *a3 = CFPreferencesGetAppBooleanValue(a1, applicationID, &keyExistsAndHasValidFormat);
        int v3 = keyExistsAndHasValidFormat;
      }
    }
  }

  return v3 != 0;
}

uint64_t sub_14BA08(CFStringRef key, const __CFString *a2, uint64_t a3)
{
  uint64_t result = 0LL;
  if (key)
  {
    if (a2)
    {
      uint64_t result = (uint64_t)CFPreferencesCopyValue(key, a2, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
      if (result)
      {
        int v6 = (const void *)result;
        CFTypeID v7 = CFGetTypeID((CFTypeRef)result);
        if (v7 == CFStringGetTypeID())
        {
          *(void *)buf = v6;
          buf[8] = 1;
          sub_6A8C0(a3, (uint64_t)buf);
          sub_19DFC((uint64_t)buf);
          return 1LL;
        }

        CFRelease(v6);
        BOOL v8 = (os_log_t *)sub_138E8(13);
        int v9 = *v8;
        if (*v8)
        {
          uint64_t result = os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR);
          if (!(_DWORD)result) {
            return result;
          }
          sub_48E98(__p, key);
          if (v12 >= 0) {
            BOOL v10 = __p;
          }
          else {
            BOOL v10 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "RunTimeDefaults.cpp";
          __int16 v14 = 1024;
          int v15 = 135;
          __int16 v16 = 2080;
          char v17 = v10;
          _os_log_impl(&dword_0, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d The value for key %s is not a CFString.", buf, 0x1Cu);
          if (v12 < 0) {
            operator delete(__p[0]);
          }
        }

        return 0LL;
      }
    }
  }

  return result;
}

void sub_14BB88( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t sub_14BBA4(uint64_t a1, CFStringRef key, const __CFString *a3)
{
  CFTypeRef cf = 0LL;
  unsigned __int8 v11 = 1;
  if (a3) {
    int v5 = a3;
  }
  else {
    int v5 = @"com.apple.audio.virtualaudio";
  }
  *(_BYTE *)a1 = sub_14BA08(key, v5, (uint64_t)&cf);
  CFTypeRef v6 = cf;
  *(void *)(a1 + 8) = cf;
  int v7 = v11;
  *(_BYTE *)(a1 + 16) = v11;
  if (v7) {
    BOOL v8 = v6 == 0LL;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8) {
    CFRetain(v6);
  }
  return sub_19DFC((uint64_t)&cf);
}

void sub_14BC20( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

CFStringRef sub_14BC34(CFStringRef key, void **a2)
{
  CFPropertyListRef v2 = key;
  if (key)
  {
    int v4 = (const __CFString *)CFPreferencesCopyValue( key,  @"com.apple.audio.virtualaudio",  kCFPreferencesCurrentUser,  kCFPreferencesAnyHost);
    if (v4)
    {
      int v5 = v4;
      CFTypeID v6 = CFGetTypeID(v4);
      if (v6 == CFStringGetTypeID())
      {
        System = CFLocaleGetSystem();
        BOOL v8 = CFNumberFormatterCreate(0LL, System, kCFNumberFormatterDecimalStyle);
        if (v8)
        {
          int v9 = v8;
          CFNumberRef NumberFromString = CFNumberFormatterCreateNumberFromString(0LL, v8, v5, 0LL, 0LL);
          if (NumberFromString)
          {
            unsigned __int8 v11 = (const __CFString *)NumberFromString;
            CFRelease(v5);
            CFTypeID v6 = CFGetTypeID(v11);
            int v5 = v11;
          }

          else
          {
            unint64_t v21 = (os_log_t *)sub_138E8(13);
            unint64_t v22 = *v21;
            if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
            {
              sub_48E98(valuePtr, v2);
              unint64_t v23 = v25 >= 0 ? valuePtr : (void **)valuePtr[0];
              *(_DWORD *)buf = 136315650;
              uint64_t v27 = "RunTimeDefaults.cpp";
              __int16 v28 = 1024;
              int v29 = 191;
              __int16 v30 = 2080;
              BOOL v31 = v23;
              _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d The value for key %s is a CFString that cannot be converted to a CFNumber.",  buf,  0x1Cu);
              if (v25 < 0) {
                operator delete(valuePtr[0]);
              }
            }
          }

          CFRelease(v9);
        }

        else
        {
          uint64_t v19 = (os_log_t *)sub_138E8(13);
          unint64_t v20 = *v19;
          if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            uint64_t v27 = "RunTimeDefaults.cpp";
            __int16 v28 = 1024;
            int v29 = 198;
            _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Unable to create a CFNumberFormatterRef.",  buf,  0x12u);
          }
        }
      }

      if (v6 == CFNumberGetTypeID())
      {
        int Value = CFNumberGetValue((CFNumberRef)v5, kCFNumberFloat64Type, valuePtr);
        CFPropertyListRef v2 = (const __CFString *)(Value == 1);
        if (Value == 1)
        {
          *a2 = valuePtr[0];
        }

        else
        {
          char v17 = (os_log_t *)sub_138E8(13);
          uint64_t v18 = *v17;
          if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            uint64_t v27 = "RunTimeDefaults.cpp";
            __int16 v28 = 1024;
            int v29 = 213;
            _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d CFNumberGetValue() failed while trying to convert a CFNumber to a Float32.",  buf,  0x12u);
          }
        }
      }

      else
      {
        uint64_t v13 = (os_log_t *)sub_138E8(13);
        __int16 v14 = *v13;
        if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
        {
          sub_48E98(valuePtr, v2);
          int v15 = v25 >= 0 ? valuePtr : (void **)valuePtr[0];
          *(_DWORD *)buf = 136315650;
          uint64_t v27 = "RunTimeDefaults.cpp";
          __int16 v28 = 1024;
          int v29 = 218;
          __int16 v30 = 2080;
          BOOL v31 = v15;
          _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d The value for key %s is neither a CFNumber nor a convertible CFString.",  buf,  0x1Cu);
          if (v25 < 0) {
            operator delete(valuePtr[0]);
          }
        }

        CFPropertyListRef v2 = 0LL;
      }

      CFRelease(v5);
    }

    else
    {
      return 0LL;
    }
  }

  return v2;
}

uint64_t sub_14BFC8()
{
  if ((byte_48E741 & 1) == 0)
  {
    if (sub_14B98C(@"AllowUSBInputForSiri", @"com.apple.audio.virtualaudio", &v3))
    {
      byte_48E740 = v3 != 0;
      uint64_t v0 = (os_log_t *)sub_138E8(13);
      CFPropertyListRef v1 = *v0;
      if (*v0)
      {
        if (os_log_type_enabled(*v0, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          int v5 = "RunTimeDefaults.cpp";
          __int16 v6 = 1024;
          int v7 = 379;
          __int16 v8 = 1024;
          int v9 = byte_48E740;
          _os_log_impl(&dword_0, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Allow USB Input for Siri: %u", buf, 0x18u);
        }
      }
    }

    byte_48E741 = 1;
  }

  return byte_48E740;
}

void sub_14C0DC(id a1)
{
}

void sub_14C0F4(id a1)
{
  if (sub_14B98C(@"AllowUSBForTelephony", @"com.apple.audio.virtualaudio", &v3)) {
    byte_48E742 = v3 != 0;
  }
  CFPropertyListRef v1 = (os_log_t *)sub_138E8(13);
  CFPropertyListRef v2 = *v1;
  if (*v1)
  {
    if (os_log_type_enabled(*v1, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      int v5 = "RunTimeDefaults.cpp";
      __int16 v6 = 1024;
      int v7 = 403;
      __int16 v8 = 1024;
      int v9 = byte_48E742;
      _os_log_impl(&dword_0, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Allow USB for Telephony: %u", buf, 0x18u);
    }
  }

uint64_t sub_14C1EC()
{
  if ((byte_48E751 & 1) == 0)
  {
    if (sub_14B98C(@"DisallowUSBHostAudioOutput", @"com.apple.audio.virtualaudio", &v3))
    {
      byte_48E750 = v3 != 0;
      uint64_t v0 = (os_log_t *)sub_138E8(13);
      CFPropertyListRef v1 = *v0;
      if (*v0)
      {
        if (os_log_type_enabled(*v0, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          int v5 = "RunTimeDefaults.cpp";
          __int16 v6 = 1024;
          int v7 = 425;
          __int16 v8 = 1024;
          int v9 = byte_48E750;
          _os_log_impl(&dword_0, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Disallow USB Host Audio Output: %u", buf, 0x18u);
        }
      }
    }

    byte_48E751 = 1;
  }

  return byte_48E750;
}

uint64_t sub_14C300()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_48E758);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_48E758))
  {
    byte_48E752 = sub_14C370();
    __cxa_guard_release(&qword_48E758);
  }

  return byte_48E752;
}

void sub_14C358(_Unwind_Exception *a1)
{
}

BOOL sub_14C370()
{
  if (!sub_14B98C(@"EnableCarPlayTesting", @"com.apple.coreaudio", &v5)) {
    return 0LL;
  }
  int v0 = v5;
  BOOL v1 = v5 != 0;
  CFPropertyListRef v2 = (os_log_t *)sub_138E8(13);
  int v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    int v7 = "RunTimeDefaults.cpp";
    __int16 v8 = 1024;
    int v9 = 447;
    __int16 v10 = 1024;
    BOOL v11 = v0 != 0;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Enable CarPlay test routes: %u", buf, 0x18u);
  }

  return v1;
}

void sub_14C474(id a1)
{
}

void sub_14C48C(id a1)
{
  if (sub_14B98C(@"AllowVibeInMultiRoute", @"com.apple.audio.virtualaudio", &v3))
  {
    byte_48E760 = v3 != 0;
    BOOL v1 = (os_log_t *)sub_138E8(13);
    CFPropertyListRef v2 = *v1;
    if (*v1)
    {
      if (os_log_type_enabled(*v1, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        int v5 = "RunTimeDefaults.cpp";
        __int16 v6 = 1024;
        int v7 = 475;
        __int16 v8 = 1024;
        int v9 = byte_48E760;
        _os_log_impl(&dword_0, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Allow vibe in multi-route: %u", buf, 0x18u);
      }
    }
  }

uint64_t sub_14C580()
{
  if ((byte_48E771 & 1) == 0)
  {
    if (sub_14B98C(@"AllowUSBInVoiceChat", @"com.apple.audio.virtualaudio", &v5))
    {
      int v0 = (os_log_t *)sub_138E8(13);
      BOOL v1 = *v0;
      if (*v0)
      {
        BOOL v2 = os_log_type_enabled(*v0, OS_LOG_TYPE_DEFAULT);
        int v3 = v5;
        if (v2)
        {
          *(_DWORD *)buf = 136315906;
          int v7 = "RunTimeDefaults.cpp";
          __int16 v8 = 1024;
          int v9 = 520;
          __int16 v10 = 2080;
          BOOL v11 = "AllowUSBInVoiceChat";
          __int16 v12 = 1024;
          int v13 = v5;
          _os_log_impl(&dword_0, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Default %s: %d.", buf, 0x22u);
        }
      }

      else
      {
        int v3 = v5;
      }

      byte_48E770 = v3 != 0;
    }

    byte_48E771 = 1;
  }

  return byte_48E770;
}

uint64_t sub_14C6AC()
{
  if ((byte_48E773 & 1) == 0)
  {
    if (sub_14B98C(@"DisableAudioProcessing", @"com.apple.audio.virtualaudio", &v5))
    {
      int v0 = (os_log_t *)sub_138E8(13);
      BOOL v1 = *v0;
      if (*v0)
      {
        BOOL v2 = os_log_type_enabled(*v0, OS_LOG_TYPE_DEFAULT);
        int v3 = v5;
        if (v2)
        {
          *(_DWORD *)buf = 136315906;
          int v7 = "RunTimeDefaults.cpp";
          __int16 v8 = 1024;
          int v9 = 570;
          __int16 v10 = 2080;
          BOOL v11 = "DisableAudioProcessing";
          __int16 v12 = 1024;
          int v13 = v5;
          _os_log_impl(&dword_0, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Default %s: %d.", buf, 0x22u);
        }
      }

      else
      {
        int v3 = v5;
      }

      byte_48E772 = v3 != 0;
    }

    byte_48E773 = 1;
  }

  return byte_48E772;
}

void sub_14C7D8()
{
  *(void *)__int16 v6 = 0LL;
  if (sub_14BC34(@"VADIOCycleUsage", (void **)v6))
  {
    float v0 = *(double *)v6;
    float v1 = 1.0;
    if (v0 <= 1.0) {
      float v1 = *(double *)v6;
    }
    BOOL v2 = v0 < 0.0;
    float v3 = 0.0;
    if (!v2) {
      float v3 = v1;
    }
    *(float *)&qword_48E7E0 = v3;
    BYTE4(qword_48E7E0) = 1;
    int v4 = (os_log_t *)sub_138E8(13);
    int v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
    {
      if (!BYTE4(qword_48E7E0)) {
        sub_8DEEC();
      }
      *(_DWORD *)__int16 v6 = 136315906;
      *(void *)&v6[4] = "RunTimeDefaults.cpp";
      __int16 v7 = 1024;
      int v8 = 884;
      __int16 v9 = 2080;
      __int16 v10 = "VADIOCycleUsage";
      __int16 v11 = 2048;
      double v12 = *(float *)&qword_48E7E0;
      _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined to %f", v6, 0x26u);
    }
  }

void *sub_14C918(void *a1)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_48E808);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_48E808))
  {
    qword_48E7F0 = 0LL;
    qword_48E7F8 = 0LL;
    qword_48E800 = 0LL;
    __cxa_guard_release(&qword_48E808);
  }

  if ((byte_48E810 & 1) != 0) {
    goto LABEL_127;
  }
  byte_48E810 = 1;
  if (!sub_14B938(@"BuiltInMicSelection")) {
    goto LABEL_127;
  }
  *(_DWORD *)buf = 0;
  BOOL v3 = sub_14B98C(@"BuiltInMicSelection", @"com.apple.audio.virtualaudio", buf);
  int v4 = *(_DWORD *)buf;
  unsigned int v5 = v3 ? *(_DWORD *)buf : 0;
  if (!v3) {
    goto LABEL_127;
  }
  int v6 = sub_753A8();
  int v7 = sub_1CC154();
  if (v6 <= 2024)
  {
    switch(v6)
    {
      case 0:
        unsigned int v44 = (os_log_t *)sub_138E8(13);
        __int16 v9 = *v44;
        if (!*v44 || !os_log_type_enabled(*v44, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_32;
        }
        *(_DWORD *)buf = 136315906;
        std::string::size_type v52 = "RunTimeDefaults.cpp";
        __int16 v53 = 1024;
        int v54 = 1094;
        __int16 v55 = 1024;
        LODWORD(v56[0]) = 0;
        WORD2(v56[0]) = 2080;
        *(void *)((char *)v56 + 6) = "BuiltInMicSelection";
        __int16 v10 = "%25s:%-5d Unknown product %u. Ignoring default %s (default VAD behavior will obtain).";
        break;
      case 2:
      case 3:
      case 4:
      case 5:
      case 48:
      case 68:
      case 79:
      case 82:
      case 134:
      case 135:
      case 138:
      case 139:
      case 140:
      case 141:
      case 146:
      case 147:
      case 148:
      case 149:
      case 150:
      case 151:
      case 152:
      case 153:
      case 154:
      case 155:
      case 156:
      case 157:
      case 158:
      case 159:
      case 161:
      case 162:
      case 163:
      case 164:
      case 165:
      case 166:
      case 167:
      case 168:
      case 181:
      case 182:
      case 185:
      case 187:
      case 192:
      case 195:
      case 196:
      case 197:
        goto LABEL_10;
      case 9:
      case 10:
      case 17:
      case 18:
      case 19:
      case 20:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 45:
      case 46:
      case 106:
      case 107:
      case 125:
      case 179:
      case 180:
        goto LABEL_28;
      case 72:
      case 73:
      case 74:
      case 75:
      case 77:
      case 78:
      case 80:
      case 81:
      case 83:
      case 84:
      case 85:
      case 86:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 98:
      case 99:
      case 102:
      case 103:
      case 177:
      case 193:
      case 194:
        goto LABEL_16;
      case 87:
      case 88:
      case 96:
      case 97:
      case 100:
      case 101:
      case 104:
      case 105:
        int v13 = (os_log_t *)sub_138E8(13);
        __int16 v14 = *v13;
        if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          std::string::size_type v52 = "RunTimeDefaults.cpp";
          __int16 v53 = 1024;
          int v54 = 1086;
          __int16 v55 = 1024;
          LODWORD(v56[0]) = v6;
          _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Product %u has five microphones. In the bit field, bit 0 corresponds to the top left mic; bit 1 co"
            "rresponds to the top right mic; bit 2 corresponds to the front mic; bit 3 corresponds to the back mic; bit 4"
            " corresponds to the side mic",
            buf,
            0x18u);
        }

        int v7 = 5;
        goto LABEL_32;
      case 160:
      case 169:
        uint64_t v42 = (os_log_t *)sub_138E8(13);
        int v43 = *v42;
        if (*v42 && os_log_type_enabled(*v42, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          std::string::size_type v52 = "RunTimeDefaults.cpp";
          __int16 v53 = 1024;
          int v54 = 1018;
          __int16 v55 = 1024;
          LODWORD(v56[0]) = v6;
          _os_log_impl( &dword_0,  v43,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Product %u has three microphones. In the bit field, bit 0 corresponds to the bottom mic; bit 1 cor"
            "responds to the back mic; bit 2 corresponds to the front mic.",
            buf,
            0x18u);
        }

        int v7 = 3;
        goto LABEL_32;
      default:
        goto LABEL_32;
    }

    goto LABEL_13;
  }

  if (v6 > 4013)
  {
    if ((v6 - 12002) < 2 || (v6 - 4014) <= 1)
    {
LABEL_10:
      int v8 = (os_log_t *)sub_138E8(13);
      __int16 v9 = *v8;
      if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315906;
        std::string::size_type v52 = "RunTimeDefaults.cpp";
        __int16 v53 = 1024;
        int v54 = 969;
        __int16 v55 = 1024;
        LODWORD(v56[0]) = v6;
        WORD2(v56[0]) = 2080;
        *(void *)((char *)v56 + 6) = "BuiltInMicSelection";
        __int16 v10 = "%25s:%-5d Product %u has 0 or 1 microphone. Ignoring default %s (default VAD behavior will obtain).";
LABEL_13:
        _os_log_impl(&dword_0, v9, OS_LOG_TYPE_DEFAULT, v10, buf, 0x22u);
      }
    }
  }

  else if ((v6 - 2025) >= 3)
  {
    if ((v6 - 2028) < 2)
    {
LABEL_28:
      int v15 = (os_log_t *)sub_138E8(13);
      __int16 v16 = *v15;
      if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        std::string::size_type v52 = "RunTimeDefaults.cpp";
        __int16 v53 = 1024;
        int v54 = 1067;
        __int16 v55 = 1024;
        LODWORD(v56[0]) = v6;
        _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Product %u has four microphones. In the bit field, bit 0 corresponds to the bottom mic; bit 1 corres"
          "ponds to the back mic; bit 2 corresponds to the front mic; bit 3 corresponds to the second bottom mic",
          buf,
          0x18u);
      }

      int v7 = 4;
    }
  }

  else
  {
LABEL_16:
    __int16 v11 = (os_log_t *)sub_138E8(13);
    double v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      std::string::size_type v52 = "RunTimeDefaults.cpp";
      __int16 v53 = 1024;
      int v54 = 1008;
      __int16 v55 = 1024;
      LODWORD(v56[0]) = v6;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Product %u has two microphones. In the bit field, bit 0 corresponds to the top mic; bit 1 corresponds "
        "to the back mic.",
        buf,
        0x18u);
    }

    int v7 = 2;
  }

uint64_t sub_14D60C()
{
  if ((byte_48E814 & 1) == 0)
  {
    if (sub_14B98C(@"Force24Bit", @"com.apple.audio.virtualaudio", &v5))
    {
      float v0 = (os_log_t *)sub_138E8(13);
      float v1 = *v0;
      if (*v0)
      {
        BOOL v2 = os_log_type_enabled(*v0, OS_LOG_TYPE_DEFAULT);
        int v3 = v5;
        if (v2)
        {
          *(_DWORD *)buf = 136315906;
          int v7 = "RunTimeDefaults.cpp";
          __int16 v8 = 1024;
          int v9 = 1383;
          __int16 v10 = 2080;
          __int16 v11 = "DisableEANC";
          __int16 v12 = 1024;
          int v13 = v5;
          _os_log_impl(&dword_0, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Default %s: %d.", buf, 0x22u);
        }
      }

      else
      {
        int v3 = v5;
      }

      byte_48E813 = v3 != 0;
    }

    byte_48E814 = 1;
  }

  return byte_48E813;
}

uint64_t sub_14D738()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_48E830);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_48E830))
  {
    *(void *)buf = 0LL;
    buf[8] = 0;
    byte_48E818 = 0;
    qword_48E820 = 0LL;
    byte_48E828 = 0;
    sub_19DFC((uint64_t)buf);
    __cxa_guard_release(&qword_48E830);
  }

  if ((byte_48E838 & 1) == 0)
  {
    sub_14BBA4((uint64_t)v7, @"HeadsetOverride", 0LL);
    if (v7[0])
    {
      if (cf[0])
      {
        CFRetain(cf[0]);
        CFTypeRef v1 = cf[0];
      }

      else
      {
        CFTypeRef v1 = 0LL;
      }

      *(void *)buf = v1;
      buf[8] = 0;
      sub_6A8C0((uint64_t)&qword_48E820, (uint64_t)buf);
      sub_19DFC((uint64_t)buf);
      byte_48E818 = qword_48E820 != 0;
      if (qword_48E820) {
        goto LABEL_12;
      }
      BOOL v2 = (os_log_t *)sub_138E8(13);
      int v3 = *v2;
      if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "RunTimeDefaults.cpp";
        __int16 v10 = 1024;
        int v11 = 1409;
        __int16 v12 = 2080;
        int v13 = "HeadsetOverride";
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: An invalid string was retrieved for defaults key %s",  buf,  0x1Cu);
      }

      if (byte_48E818)
      {
LABEL_12:
        int v4 = (os_log_t *)sub_138E8(13);
        int v5 = *v4;
        if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "RunTimeDefaults.cpp";
          __int16 v10 = 1024;
          int v11 = 1411;
          __int16 v12 = 2080;
          int v13 = "HeadsetOverride";
          __int16 v14 = 2112;
          uint64_t v15 = qword_48E820;
          _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Defaults key %s was defined as %@", buf, 0x26u);
        }
      }
    }

    byte_48E838 = 1;
    sub_19DFC((uint64_t)cf);
  }

  return byte_48E818;
}

void sub_14D990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

uint64_t sub_14D9C8()
{
  if ((byte_48E83A & 1) == 0)
  {
    if (sub_14B98C(@"RawModeDisablesSpeakerProcessing", @"com.apple.audio.virtualaudio", &v6))
    {
      if (qword_48CDB8 != -1) {
        dispatch_once(&qword_48CDB8, &stru_46DD20);
      }
      if (byte_48CDA8) {
        BOOL v0 = v6 == 0;
      }
      else {
        BOOL v0 = 1;
      }
      char v1 = !v0;
      byte_48E839 = v1;
      BOOL v2 = (os_log_t *)sub_138E8(13);
      int v3 = *v2;
      if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
      {
        int v4 = "disabled";
        __int16 v8 = "RunTimeDefaults.cpp";
        *(_DWORD *)buf = 136315650;
        if (!byte_48E839) {
          int v4 = "enabled";
        }
        __int16 v9 = 1024;
        int v10 = 1434;
        __int16 v11 = 2080;
        __int16 v12 = v4;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Speaker EQ & Speaker Protection will be %s in raw mode",  buf,  0x1Cu);
      }
    }

    byte_48E83A = 1;
  }

  return byte_48E839;
}

BOOL sub_14DB2C()
{
  int v6 = 0;
  if (sub_14B98C(@"CaptureIOData", @"com.apple.audio.virtualaudio", &v6))
  {
    int v0 = v6;
    BOOL v1 = v6 != 0;
    BOOL v2 = (os_log_t *)sub_138E8(13);
    int v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = "Dis";
      int v6 = 136316162;
      int v7 = "RunTimeDefaults.cpp";
      __int16 v8 = 1024;
      int v9 = 1482;
      __int16 v11 = "CaptureIOData";
      __int16 v10 = 2080;
      if (v0) {
        int v4 = "En";
      }
      __int16 v12 = 1024;
      int v13 = v0;
      __int16 v14 = 2080;
      uint64_t v15 = v4;
      _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Defaults key %s was defined to %d. %sabling VA IO capture.",  (uint8_t *)&v6,  0x2Cu);
    }
  }

  else
  {
    if (qword_48CDB8 != -1) {
      dispatch_once(&qword_48CDB8, &stru_46DD20);
    }
    return byte_48CDA8
        && (sub_56120() == 2
         || sub_56120() == 3
         || sub_56120() == 4
         || sub_56120() == 5
         || sub_56120() == 195);
  }

  return v1;
}

BOOL sub_14DCE4()
{
  int v7 = 0;
  BOOL v0 = sub_14B98C(@"EnableHALBorealisMonitor", @"com.apple.audio.virtualaudio", &v7);
  int v1 = v7;
  if (v7) {
    BOOL v2 = v0;
  }
  else {
    BOOL v2 = 0LL;
  }
  if (v0)
  {
    int v3 = (os_log_t *)sub_138E8(13);
    int v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = "Dis";
        int v7 = 136316162;
        __int16 v8 = "RunTimeDefaults.cpp";
        __int16 v9 = 1024;
        int v10 = 1512;
        __int16 v12 = "EnableHALBorealisMonitor";
        __int16 v11 = 2080;
        if (v2) {
          int v5 = "En";
        }
        __int16 v13 = 1024;
        int v14 = v1;
        __int16 v15 = 2080;
        __int16 v16 = v5;
        _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Defaults key %s was defined to %d. %sabling HAL Borealis capture.",  (uint8_t *)&v7,  0x2Cu);
      }
    }
  }

  return v2;
}

uint64_t sub_14DE1C(const char *a1)
{
  size_t v2 = strlen(a1);
  if (a1)
  {
    int v3 = CFStringCreateWithBytes(0LL, (const UInt8 *)a1, v2, 0x8000100u, 0);
    *(void *)buf = v3;
    if (!v3)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }

  else
  {
    int v3 = 0LL;
    *(void *)buf = 0LL;
  }

  unsigned int v11 = 0;
  BOOL v5 = sub_14B98C(v3, @"com.apple.coreaudio", &v11);
  uint64_t v6 = v11;
  if (v3) {
    CFRelease(v3);
  }
  if (v5)
  {
    int v7 = (os_log_t *)sub_138E8(13);
    __int16 v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v9 = "En";
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = "RunTimeDefaults.cpp";
      int v14 = 1535;
      __int16 v13 = 1024;
      if (!(_DWORD)v6) {
        __int16 v9 = "Dis";
      }
      __int16 v15 = 2080;
      __int16 v16 = a1;
      __int16 v17 = 1024;
      int v18 = v6;
      __int16 v19 = 2080;
      unint64_t v20 = v9;
      _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Defaults key %s was defined to %d. %sabling HAL IO capture.",  buf,  0x2Cu);
    }
  }

  else
  {
    if (qword_48CDB8 != -1) {
      dispatch_once(&qword_48CDB8, &stru_46DD20);
    }
    if (byte_48CDA8
      && (sub_56120() == 2
       || sub_56120() == 3
       || sub_56120() == 4
       || sub_56120() == 5
       || sub_56120() == 195))
    {
      return 2LL;
    }

    else
    {
      return 0LL;
    }
  }

  return v6;
}

void sub_14E040( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

BOOL sub_14E074()
{
  int v7 = 0;
  BOOL v0 = sub_14B98C(@"DisableSpeechDetectionRoute", @"com.apple.coreaudio", &v7);
  int v1 = v7;
  if (v7) {
    BOOL v2 = v0;
  }
  else {
    BOOL v2 = 0LL;
  }
  if (v0)
  {
    int v3 = (os_log_t *)sub_138E8(13);
    int v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v5 = "Dis";
        int v7 = 136316162;
        __int16 v8 = "RunTimeDefaults.cpp";
        __int16 v9 = 1024;
        int v10 = 1558;
        __int16 v12 = "DisableSpeechDetectionRoute";
        __int16 v11 = 2080;
        if (v2) {
          BOOL v5 = "En";
        }
        __int16 v13 = 1024;
        int v14 = v1;
        __int16 v15 = 2080;
        __int16 v16 = v5;
        _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Defaults key %s was defined to %d. %sabling voice trigger VAD creation.",  (uint8_t *)&v7,  0x2Cu);
      }
    }
  }

  return v2;
}

uint64_t sub_14E1A0()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_48E850);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_48E850))
  {
    byte_48E848 = sub_14E210();
    __cxa_guard_release(&qword_48E850);
  }

  return byte_48E848;
}

void sub_14E1F8(_Unwind_Exception *a1)
{
}

BOOL sub_14E210()
{
  LOBYTE(v9) = 0;
  AppBooleanint Value = CFPreferencesGetAppBooleanValue( @"EnableSiriOverUSB",  @"com.apple.audio.virtualaudio",  (Boolean *)&v9);
  int v1 = v9;
  if (AppBooleanValue) {
    BOOL v2 = v9 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    unsigned int v3 = 0;
  }
  else {
    unsigned int v3 = 256;
  }
  if ((_BYTE)v9)
  {
    int v4 = AppBooleanValue;
    BOOL v5 = (os_log_t *)sub_138E8(13);
    uint64_t v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = "Disabled";
        int v9 = 136316162;
        int v10 = "RunTimeDefaults.cpp";
        __int16 v11 = 1024;
        int v12 = 1570;
        __int16 v13 = 2080;
        int v14 = "EnableSiriOverUSB";
        if (v4) {
          int v7 = "Enabled";
        }
        __int16 v15 = 1024;
        unsigned int v16 = v3 >> 8;
        __int16 v17 = 2080;
        int v18 = v7;
        _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Defaults key %s was defined to %u. Siri over USB is %s",  (uint8_t *)&v9,  0x2Cu);
      }
    }
  }

  return (v3 | (v1 != 0)) == 257;
}

BOOL sub_14E35C()
{
  LOBYTE(v9) = 0;
  AppBooleanint Value = CFPreferencesGetAppBooleanValue(@"EnableAUSPL", @"com.apple.coreaudio", (Boolean *)&v9);
  int v1 = v9;
  if (AppBooleanValue) {
    BOOL v2 = v9 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    unsigned int v3 = 0;
  }
  else {
    unsigned int v3 = 256;
  }
  if ((_BYTE)v9)
  {
    int v4 = AppBooleanValue;
    BOOL v5 = (os_log_t *)sub_138E8(13);
    uint64_t v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = "Disabled";
        int v9 = 136316162;
        int v10 = "RunTimeDefaults.cpp";
        __int16 v11 = 1024;
        int v12 = 1581;
        __int16 v13 = 2080;
        int v14 = "EnableAUSPL";
        if (v4) {
          int v7 = "Enabled";
        }
        __int16 v15 = 1024;
        unsigned int v16 = v3 >> 8;
        __int16 v17 = 2080;
        int v18 = v7;
        _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Defaults key %s was defined to %u. Enable AUSPL is %s",  (uint8_t *)&v9,  0x2Cu);
      }
    }
  }

  return (v3 | (v1 != 0)) != 1;
}

BOOL sub_14E4A8()
{
  int v7 = 0;
  BOOL v0 = sub_14B98C(@"DisableDeviceOrientationStereoSwap", @"com.apple.audio.virtualaudio", &v7);
  int v1 = v7;
  if (v7) {
    BOOL v2 = v0;
  }
  else {
    BOOL v2 = 0LL;
  }
  if (v0)
  {
    unsigned int v3 = (os_log_t *)sub_138E8(13);
    int v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v5 = "Dis";
        int v7 = 136316162;
        __int16 v8 = "RunTimeDefaults.cpp";
        __int16 v9 = 1024;
        int v10 = 1646;
        int v12 = "DisableDeviceOrientationStereoSwap";
        __int16 v11 = 2080;
        if (v2) {
          BOOL v5 = "En";
        }
        __int16 v13 = 1024;
        int v14 = v1;
        __int16 v15 = 2080;
        unsigned int v16 = v5;
        _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Defaults key %s was defined to %d. %sabling device orientation based stereo channel swap.",  (uint8_t *)&v7,  0x2Cu);
      }
    }
  }

  return v2;
}

BOOL sub_14E5D4()
{
  int v5 = 0;
  BOOL v0 = sub_14B98C(@"ForceLDCM", @"com.apple.coreaudio", &v5);
  int v1 = 0;
  if (v0)
  {
    int v1 = v5;
    BOOL v2 = (os_log_t *)sub_138E8(13);
    unsigned int v3 = *v2;
    if (*v2)
    {
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = 136315906;
        uint64_t v6 = "RunTimeDefaults.cpp";
        __int16 v7 = 1024;
        int v8 = 1690;
        __int16 v9 = 2080;
        int v10 = "ForceLDCM";
        __int16 v11 = 1024;
        int v12 = v1;
        _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Defaults key %s was defined to %d. Forcing creation of LDCM alternate VAD.",  (uint8_t *)&v5,  0x22u);
      }
    }
  }

  return v1 && v0;
}

uint64_t sub_14E6E4()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_48E8B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_48E8B8))
  {
    byte_48E8B0 = sub_14E754();
    __cxa_guard_release(&qword_48E8B8);
  }

  return byte_48E8B0;
}

void sub_14E73C(_Unwind_Exception *a1)
{
}

BOOL sub_14E754()
{
  LOBYTE(v7) = 0;
  AppBooleanint Value = CFPreferencesGetAppBooleanValue( @"DisableAudio",  @"com.apple.audio.virtualaudio",  (Boolean *)&v7);
  int v1 = v7;
  if (AppBooleanValue) {
    BOOL v2 = v7 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    unsigned int v3 = 0;
  }
  else {
    unsigned int v3 = 256;
  }
  if ((_BYTE)v7)
  {
    int v4 = (os_log_t *)sub_138E8(13);
    int v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = 136315906;
        int v8 = "RunTimeDefaults.cpp";
        __int16 v9 = 1024;
        int v10 = 1717;
        __int16 v11 = 2080;
        int v12 = "DisableAudio";
        __int16 v13 = 1024;
        unsigned int v14 = v3 >> 8;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Defaults key %s was defined to %u",  (uint8_t *)&v7,  0x22u);
      }
    }
  }

  return (v3 | (v1 != 0)) == 257;
}

uint64_t sub_14E87C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_48E8C8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_48E8C8))
  {
    byte_48E8C0 = sub_14E8EC();
    __cxa_guard_release(&qword_48E8C8);
  }

  return byte_48E8C0;
}

void sub_14E8D4(_Unwind_Exception *a1)
{
}

BOOL sub_14E8EC()
{
  LOBYTE(v7) = 0;
  AppBooleanint Value = CFPreferencesGetAppBooleanValue( @"ForceSoftwareVolumeMode",  @"com.apple.audio.virtualaudio",  (Boolean *)&v7);
  int v1 = v7;
  if (AppBooleanValue) {
    BOOL v2 = v7 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    unsigned int v3 = 0;
  }
  else {
    unsigned int v3 = 256;
  }
  if ((_BYTE)v7)
  {
    int v4 = (os_log_t *)sub_138E8(13);
    int v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = 136315906;
        int v8 = "RunTimeDefaults.cpp";
        __int16 v9 = 1024;
        int v10 = 1744;
        __int16 v11 = 2080;
        int v12 = "ForceSoftwareVolumeMode";
        __int16 v13 = 1024;
        unsigned int v14 = v3 >> 8;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Defaults key %s was defined to %u",  (uint8_t *)&v7,  0x22u);
      }
    }
  }

  return (v3 | (v1 != 0)) == 257;
}

uint64_t sub_14EA14()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_48E8D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_48E8D8))
  {
    byte_48E8D0 = sub_14EA84();
    __cxa_guard_release(&qword_48E8D8);
  }

  return byte_48E8D0;
}

void sub_14EA6C(_Unwind_Exception *a1)
{
}

BOOL sub_14EA84()
{
  LOBYTE(v7) = 0;
  AppBooleanint Value = CFPreferencesGetAppBooleanValue( @"EnableIDAMInput",  @"com.apple.audio.virtualaudio",  (Boolean *)&v7);
  int v1 = v7;
  if (AppBooleanValue) {
    BOOL v2 = v7 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    unsigned int v3 = 0;
  }
  else {
    unsigned int v3 = 256;
  }
  if ((_BYTE)v7)
  {
    int v4 = (os_log_t *)sub_138E8(13);
    int v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = 136315906;
        int v8 = "RunTimeDefaults.cpp";
        __int16 v9 = 1024;
        int v10 = 1758;
        __int16 v11 = 2080;
        int v12 = "EnableIDAMInput";
        __int16 v13 = 1024;
        unsigned int v14 = v3 >> 8;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Defaults key %s was defined to %u",  (uint8_t *)&v7,  0x22u);
      }
    }
  }

  return (v3 | (v1 != 0)) == 257;
}

BOOL sub_14EBAC()
{
  int v7 = 0;
  BOOL v0 = sub_14B98C(@"PreferInEarOverCarKit", @"com.apple.coreaudio", &v7);
  int v1 = v7;
  if (v7) {
    BOOL v2 = v0;
  }
  else {
    BOOL v2 = 0LL;
  }
  if (v0)
  {
    unsigned int v3 = (os_log_t *)sub_138E8(13);
    int v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = "Dis";
        int v7 = 136316162;
        int v8 = "RunTimeDefaults.cpp";
        __int16 v9 = 1024;
        int v10 = 1777;
        int v12 = "PreferInEarOverCarKit";
        __int16 v11 = 2080;
        if (v2) {
          int v5 = "En";
        }
        __int16 v13 = 1024;
        int v14 = v1;
        __int16 v15 = 2080;
        unsigned int v16 = v5;
        _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Defaults key %s was defined to %d. %sabling prioritizing in-ear status.",  (uint8_t *)&v7,  0x2Cu);
      }
    }
  }

  return v2;
}

void sub_14ECE4(id a1)
{
}

void sub_14ECFC(id a1)
{
  char v11 = 0;
  if (MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 6)
  {
    CFPreferencesAppSynchronize(@"EnableNanoTetheredDemoMode");
    BOOL v1 = sub_32D4CC(@"EnableNanoTetheredDemoMode", @"com.apple.demo-settings", &v11);
    if (!v11) {
      return;
    }
    BOOL v2 = v1;
    unsigned int v3 = (os_log_t *)sub_138E8(13);
    os_log_t v4 = *v3;
    if (!*v3 || !os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_11;
    }
    *(_DWORD *)buf = 136315906;
    __int16 v13 = "RunTimeDefaults.cpp";
    __int16 v14 = 1024;
    int v15 = 1803;
    __int16 v16 = 2080;
    CFStringRef v17 = (CFStringRef)"com.apple.demo-settings/EnableNanoTetheredDemoMode";
    __int16 v18 = 1024;
    LODWORD(v19) = v2;
    int v5 = "%25s:%-5d Preference %s: %u.";
    uint64_t v6 = v4;
    uint32_t v7 = 34;
    goto LABEL_10;
  }

  CFPreferencesAppSynchronize(@"EnableTetheredDisplayPortMode");
  BOOL v8 = sub_32D4CC(@"EnableTetheredDisplayPortMode", kCFPreferencesAnyApplication, &v11);
  if (!v11) {
    return;
  }
  BOOL v2 = v8;
  __int16 v9 = (os_log_t *)sub_138E8(13);
  os_log_t v10 = *v9;
  if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136316162;
    __int16 v13 = "RunTimeDefaults.cpp";
    __int16 v14 = 1024;
    int v15 = 1814;
    __int16 v16 = 2112;
    CFStringRef v17 = kCFPreferencesAnyApplication;
    __int16 v18 = 2080;
    __int16 v19 = "EnableTetheredDisplayPortMode";
    __int16 v20 = 1024;
    BOOL v21 = v2;
    int v5 = "%25s:%-5d Preference %@ / %s: %u.";
    uint64_t v6 = v10;
    uint32_t v7 = 44;
LABEL_10:
    _os_log_impl(&dword_0, v6, OS_LOG_TYPE_DEFAULT, v5, buf, v7);
  }

_BYTE *sub_14EEF8(_BYTE *__dst)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_48E930);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_48E930))
  {
    sub_14EF6C();
    __cxa_guard_release(&qword_48E930);
  }

  return sub_C590C(__dst, &xmmword_48E910);
}

void sub_14EF54(_Unwind_Exception *a1)
{
}

uint64_t sub_14EF6C()
{
  if (v6[0])
  {
    CFTypeRef v0 = cf[0];
    if (cf[0]) {
      CFRetain(cf[0]);
    }
    sub_7F234(&v3, v0);
    if (!v3)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }

    sub_48100((uint64_t)&v4, (const __CFString *)v3);
    xmmword_48E910 = v4;
    qword_48E920 = v5;
    uint64_t v5 = 0LL;
    __int128 v4 = 0uLL;
    byte_48E928 = 1;
    if (v3) {
      CFRelease(v3);
    }
  }

  else
  {
    LOBYTE(xmmword_48E910) = 0;
    byte_48E928 = 0;
  }

  return sub_19DFC((uint64_t)cf);
}

void sub_14F068( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
}

uint64_t sub_14F0A4()
{
  if (v6[0])
  {
    CFTypeRef v0 = cf[0];
    if (cf[0]) {
      CFRetain(cf[0]);
    }
    sub_7F234(v3, v0);
    if (!v3[0])
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }

    sub_48100((uint64_t)&__p, (const __CFString *)v3[0]);
    if (v3[0]) {
      CFRelease(v3[0]);
    }
    sub_7D084(v3, "\n");
    sub_15443C(&qword_48E938, &__p, (char *)v3);
    if (v4 < 0) {
      operator delete((void *)v3[0]);
    }
  }

  else
  {
    qword_48E938 = 0LL;
    unk_48E940 = 0LL;
    qword_48E948 = 0LL;
  }

  return sub_19DFC((uint64_t)cf);
}

void sub_14F1BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
}

uint64_t sub_14F228()
{
  if (v6[0])
  {
    CFTypeRef v0 = cf[0];
    if (cf[0]) {
      CFRetain(cf[0]);
    }
    sub_7F234(v3, v0);
    if (!v3[0])
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }

    sub_48100((uint64_t)&__p, (const __CFString *)v3[0]);
    if (v3[0]) {
      CFRelease(v3[0]);
    }
    sub_7D084(v3, "\n");
    sub_15443C(&qword_48E958, &__p, (char *)v3);
    if (v4 < 0) {
      operator delete((void *)v3[0]);
    }
  }

  else
  {
    qword_48E958 = 0LL;
    unk_48E960 = 0LL;
    qword_48E968 = 0LL;
  }

  return sub_19DFC((uint64_t)cf);
}

void sub_14F340( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
}

uint64_t sub_14F3AC()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_48E980);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_48E980))
  {
    byte_48E978 = sub_14F41C();
    __cxa_guard_release(&qword_48E980);
  }

  return byte_48E978;
}

void sub_14F404(_Unwind_Exception *a1)
{
}

BOOL sub_14F41C()
{
  LOBYTE(v7) = 0;
  AppBooleanint Value = CFPreferencesGetAppBooleanValue( @"DefaultVADUsesTimeSync",  @"com.apple.audio.virtualaudio",  (Boolean *)&v7);
  int v1 = v7;
  if (AppBooleanValue) {
    BOOL v2 = v7 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    unsigned int v3 = 0;
  }
  else {
    unsigned int v3 = 256;
  }
  if ((_BYTE)v7)
  {
    char v4 = (os_log_t *)sub_138E8(13);
    uint64_t v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = 136315906;
        BOOL v8 = "RunTimeDefaults.cpp";
        __int16 v9 = 1024;
        int v10 = 2008;
        __int16 v11 = 2080;
        int v12 = "DefaultVADUsesTimeSync";
        __int16 v13 = 1024;
        unsigned int v14 = v3 >> 8;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Defaults key %s was defined to %u",  (uint8_t *)&v7,  0x22u);
      }
    }
  }

  return (v3 | (v1 != 0)) == 257;
}

void sub_14F544()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_48E990);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_48E990))
    {
      qword_48E988 = sub_14F5B4();
      __cxa_guard_release(&qword_48E990);
    }
  }

void sub_14F59C(_Unwind_Exception *a1)
{
}

uint64_t sub_14F5B4()
{
  int v4 = 0;
  if (!sub_14B98C(@"SpeakerVolumeTransferFunction", @"com.apple.audio.virtualaudio", &v4)) {
    return 0LL;
  }
  uint64_t v0 = v4;
  int v1 = (os_log_t *)sub_138E8(13);
  BOOL v2 = *v1;
  if (*v1)
  {
    if (os_log_type_enabled(*v1, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315906;
      uint64_t v5 = "RunTimeDefaults.cpp";
      __int16 v6 = 1024;
      int v7 = 2020;
      __int16 v8 = 2080;
      __int16 v9 = "SpeakerVolumeTransferFunction";
      __int16 v10 = 2048;
      uint64_t v11 = v0;
      _os_log_impl( &dword_0,  v2,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Defaults key %s was defined to %li",  (uint8_t *)&v4,  0x26u);
    }
  }

  return v0 | 0x100000000LL;
}

uint64_t sub_14F6C0()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_48E9B0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_48E9B0))
  {
    qword_48E9A8 = sub_14F730();
    __cxa_guard_release(&qword_48E9B0);
  }

  return qword_48E9A8;
}

void sub_14F718(_Unwind_Exception *a1)
{
}

uint64_t sub_14F730()
{
  unsigned int v4 = 0;
  if (!sub_14B98C(@"AdaptiveVolumeHIDStreamingRateMs", @"com.apple.audio.virtualaudio", &v4)) {
    return 0LL;
  }
  uint64_t v0 = v4;
  int v1 = (os_log_t *)sub_138E8(13);
  BOOL v2 = *v1;
  if (*v1)
  {
    if (os_log_type_enabled(*v1, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v4 = 136315906;
      uint64_t v5 = "RunTimeDefaults.cpp";
      __int16 v6 = 1024;
      int v7 = 2164;
      __int16 v8 = 2080;
      __int16 v9 = "AdaptiveVolumeHIDStreamingRateMs";
      __int16 v10 = 1024;
      int v11 = v0;
      _os_log_impl( &dword_0,  v2,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Defaults key %s was defined to %u",  (uint8_t *)&v4,  0x22u);
    }
  }

  return v0 | 0x100000000LL;
}

uint64_t sub_14F834()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_48E9C0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_48E9C0))
  {
    byte_48E9B8 = sub_14F8A4();
    __cxa_guard_release(&qword_48E9C0);
  }

  return byte_48E9B8;
}

void sub_14F88C(_Unwind_Exception *a1)
{
}

BOOL sub_14F8A4()
{
  LOBYTE(v6) = 0;
  AppBooleanint Value = CFPreferencesGetAppBooleanValue( @"LogTimeTaken",  @"com.apple.audio.virtualaudio",  (Boolean *)&v6);
  BOOL v1 = AppBooleanValue != 0;
  if (!(_BYTE)v6) {
    return 0LL;
  }
  int v2 = AppBooleanValue;
  unsigned int v3 = (os_log_t *)sub_138E8(13);
  unsigned int v4 = *v3;
  if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136315906;
    int v7 = "RunTimeDefaults.cpp";
    __int16 v8 = 1024;
    int v9 = 2177;
    __int16 v10 = 2080;
    int v11 = "LogTimeTaken";
    __int16 v12 = 1024;
    BOOL v13 = v2 != 0;
    _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Defaults key %s was defined to %u",  (uint8_t *)&v6,  0x22u);
  }

  return v1;
}

uint64_t sub_14F9C4()
{
  if (v20[0])
  {
    CFTypeRef v0 = cf[0];
    if (cf[0]) {
      CFRetain(cf[0]);
    }
    sub_7F234(v22, v0);
    if (!*(void *)v22)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }

    sub_48100((uint64_t)buf, *(const __CFString **)v22);
    if (*(void *)v22) {
      CFRelease(*(CFTypeRef *)v22);
    }
    uint64_t v1 = v26;
    if ((v26 & 0x80u) == 0) {
      uint64_t v2 = v26;
    }
    else {
      uint64_t v2 = *(void *)&buf[8];
    }
    if (v2 == 3)
    {
      if ((v26 & 0x80) != 0)
      {
      }

      else if (v26)
      {
        __int16 v10 = buf;
        int v11 = &byte_401A18;
        while (*v10 == *v11)
        {
          ++v10;
          ++v11;
          if (!--v1) {
            goto LABEL_41;
          }
        }

        goto LABEL_45;
      }

void sub_14FDAC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_19DFC(v22);
  _Unwind_Resume(a1);
}

uint64_t sub_14FE28(unsigned int a1)
{
  if (a1 < 6) {
    return *(unsigned int *)&aNupephpehvpeps[4 * a1];
  }
  uint64_t v3 = sub_138E8(17);
  uint64_t v4 = sub_138E8(28);
  char v5 = 0;
  uint64_t v6 = 0LL;
  *(void *)__int16 v12 = 0x100000002LL;
  uint64_t v7 = *(void *)(v3 + 8);
  while (1)
  {
    uint64_t v8 = *(int *)&v12[4 * v6];
    char v9 = v5;
    if (((v7 & v8) != 0) != ((*(void *)(v4 + 8) & v8) != 0)) {
      break;
    }
    char v5 = 1;
    uint64_t v6 = 1LL;
    if ((v9 & 1) != 0) {
      goto LABEL_9;
    }
  }

  if ((v7 & v8) == 0) {
    uint64_t v3 = v4;
  }
LABEL_9:
  uint64_t v2 = 1701868910LL;
  __int16 v10 = *(os_log_s **)v3;
  if (v10 && os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int16 v12 = 136315650;
    *(void *)&v12[4] = "BluetoothUtilities.cpp";
    __int16 v13 = 1024;
    int v14 = 81;
    __int16 v15 = 1024;
    unsigned int v16 = a1;
    _os_log_impl(&dword_0, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Unknown Bluetooth device category: %u.", v12, 0x18u);
  }

  return v2;
}

uint64_t *sub_14FF7C(uint64_t a1, uint64_t a2, int a3)
{
  BOOL v6 = sub_203D48(a2);
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = 1885544823;
  *(_DWORD *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 12) = 1;
  uint64_t result = sub_86550((uint64_t *)(a1 + 16), (uint64_t)&unk_48E9C8);
  __int16 v8 = 0;
  if ((int)a2 <= 1886152040)
  {
    if ((int)a2 <= 1885892673)
    {
      if ((_DWORD)a2 != 1885418100)
      {
        int v9 = 1885890164;
        goto LABEL_14;
      }

      goto LABEL_15;
    }

    if ((_DWORD)a2 == 1885892674) {
      goto LABEL_16;
    }
    int v10 = 1885892706;
LABEL_10:
    if ((_DWORD)a2 == v10) {
      goto LABEL_16;
    }
    goto LABEL_20;
  }

  if ((int)a2 <= 1886152051)
  {
    if ((_DWORD)a2 == 1886152041) {
      goto LABEL_15;
    }
    int v10 = 1886152047;
    goto LABEL_10;
  }

  if ((_DWORD)a2 != 1886152052)
  {
    int v9 = 1886216820;
LABEL_14:
    if ((_DWORD)a2 == v9) {
      goto LABEL_15;
    }
LABEL_20:
    __int16 v12 = (os_log_t *)sub_138E8(13);
    __int16 v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, a2);
      int v14 = v17 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      __int16 v19 = "BluetoothUtilities.cpp";
      __int16 v20 = 1024;
      int v21 = 126;
      __int16 v22 = 2080;
      __int16 v23 = v14;
      _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnsupportedOperationError): Unsupported port type %s",  buf,  0x1Cu);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 1970171760;
  }

void sub_1501C8(_Unwind_Exception *a1)
{
}

uint64_t sub_1501DC(uint64_t a1, int *a2, uint64_t a3, void *a4)
{
  uint64_t v8 = *(void *)(*(void *)a2 + 24LL);
  sub_B8CBC((uint64_t *)&v88, (uint64_t *)(v8 + 32), "", 56);
  uint64_t v9 = *((void *)v88 + 24);
  if (!v9)
  {
    std::string::size_type v63 = (os_log_t *)sub_138E8(13);
    uint64_t v64 = *v63;
    if (*v63 && os_log_type_enabled(*v63, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v90 = 136315394;
      *(void *)&v90[4] = "RoutingHandler_Playback_ATV.cpp";
      *(_WORD *)&v90[12] = 1024;
      *(_DWORD *)&v90[14] = 60;
      _os_log_impl( &dword_0,  v64,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [activeDevice is NULL]: could not get active device",  v90,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003329396;
  }

  uint64_t v10 = v88[36];
  sub_1B6C7C(*((os_unfair_lock_s **)v88 + 24), 1, a2[3], *(void *)(v8 + 72), a3);
  __int16 v11 = (char *)operator new(0x30uLL);
  int v12 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 120LL))(v9);
  *(void *)uint64_t v90 = v88;
  *(void *)&v90[8] = v89;
  if (v89)
  {
    p_shared_weak_owners = (unint64_t *)&v89->__shared_weak_owners_;
    do
      unint64_t v14 = __ldxr(p_shared_weak_owners);
    while (__stxr(v14 + 1, p_shared_weak_owners));
  }

  sub_CAE54(&v85, (uint64_t *)v90, 1LL);
  *(void *)__int16 v11 = off_484140;
  *((_DWORD *)v11 + 2) = v12;
  *((void *)v11 + 2) = v11 + 16;
  *((void *)v11 + 3) = v11 + 16;
  *((void *)v11 + 4) = 0LL;
  uint64_t v15 = v87;
  if (v87)
  {
    uint64_t v17 = v85;
    unsigned int v16 = v86;
    uint64_t v18 = *v86;
    *(void *)(v18 + 8) = *(void *)(v85 + 8);
    **(void **)(v17 + 8) = v18;
    uint64_t v19 = *((void *)v11 + 2);
    *(void *)(v19 + 8) = v16;
    *unsigned int v16 = v19;
    *((void *)v11 + 2) = v17;
    *(void *)(v17 + 8) = v11 + 16;
    *((void *)v11 + 4) = v15;
    uint64_t v87 = 0LL;
  }

  strcpy(v11 + 40, "duar");
  __int16 v20 = operator new(0x18uLL);
  int v21 = *(void **)(a3 + 8);
  void *v20 = a3;
  v20[1] = v21;
  v20[2] = v11;
  void *v21 = v20;
  uint64_t v22 = *(void *)(a3 + 16) + 1LL;
  *(void *)(a3 + 8) = v20;
  *(void *)(a3 + 16) = v22;
  sub_CCAB4((uint64_t)v11);
  sub_85B80(&v85);
  if (*(void *)&v90[8]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v90[8]);
  }
  sub_1D2530(v90, v9, (uint64_t)v88);
  *(_DWORD *)buf = v88[36];
  sub_7A22C((uint64_t)v83, (unsigned int *)buf, 1LL);
  __int16 v23 = *(unsigned int **)a2;
  int v78 = 0LL;
  int v79 = 0LL;
  uint64_t v80 = 0LL;
  sub_105E0C((char **)&v81, *(_DWORD *)(a1 + 8), a2, &v78);
  buf[0] = 0;
  _DWORD buf[16] = 0;
  int v24 = sub_10A5F4( (uint64_t *)v90,  0,  1,  v23,  (uint64_t)(a2 + 30),  (__int128 *)(a2 + 6),  (uint64_t)buf,  &v81,  0LL,  (uint64_t)v83,  (__int128 *)a2 + 11);
  *(void *)buf = &v81;
  sub_7A668((void ***)buf);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 248LL))(&v81, v9, 1LL, v10);
  (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 256LL))( &v78,  v9,  1LL,  v10);
  if (!v79 || v79->__shared_owners_ == -1)
  {
    std::string::size_type v57 = (os_log_t *)sub_138E8(13);
    __int128 v58 = *v57;
    if (*v57 && os_log_type_enabled(*v57, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandler_Playback_ATV.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 87;
      _os_log_impl( &dword_0,  v58,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to locate mute control.",  buf,  0x12u);
    }

    unsigned int v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v59, "Unable to locate mute control.");
  }

  CFTypeID v76 = 0LL;
  int v77 = std::__shared_weak_count::lock(v79);
  if (!v77 || (CFTypeID v76 = v78) == 0LL)
  {
    CFTypeID v60 = (os_log_t *)sub_138E8(13);
    uint64_t v61 = *v60;
    if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandler_Playback_ATV.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 91;
      _os_log_impl( &dword_0,  v61,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to locate volume control",  buf,  0x12u);
    }

    std::string v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v62, "Unable to locate volume control");
  }

  uint64_t v25 = *(void *)(v8 + 72);
  LOBYTE(__p[0]) = 0;
  char v75 = 0;
  sub_1B1E64((uint64_t)v78, (uint64_t)v24, v88, v25, (uint64_t)a2, 0LL, (uint64_t)__p);
  if (v75 && __p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  a4[2] = v24;
  a4[3] = 0LL;
  unsigned __int8 v26 = operator new(0x68uLL);
  sub_CB19C(buf, (uint64_t)v78, v79);
  CFTypeRef v66 = *(std::__shared_weak_count **)&buf[8];
  __int128 v73 = *(_OWORD *)buf;
  *(void *)buf = 0LL;
  *(void *)&buf[8] = 0LL;
  sub_CAF18((uint64_t)v26, &v73);
  a4[4] = v26;
  if (v66)
  {
    p_shared_owners = (unint64_t *)&v66->__shared_owners_;
    do
      unint64_t v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }

  int v29 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    __int16 v30 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }

  int64x2_t v32 = operator new(0x68uLL);
  sub_150BF4(buf, (uint64_t)v81, v82);
  __int128 v67 = *(std::__shared_weak_count **)&buf[8];
  __int128 v72 = *(_OWORD *)buf;
  *(void *)buf = 0LL;
  *(void *)&buf[8] = 0LL;
  sub_CAF18((uint64_t)v32, &v72);
  a4[5] = v32;
  if (v67)
  {
    uint64_t v33 = (unint64_t *)&v67->__shared_owners_;
    do
      unint64_t v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }

  uint64_t v35 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    uint64_t v36 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }

  uint64_t v38 = operator new(0x68uLL);
  sub_CAEBC((uint64_t *)buf);
  char v68 = *(std::__shared_weak_count **)&buf[8];
  __int128 v71 = *(_OWORD *)buf;
  *(void *)buf = 0LL;
  *(void *)&buf[8] = 0LL;
  sub_CAF18((uint64_t)v38, &v71);
  a4[6] = v38;
  if (v68)
  {
    __int128 v39 = (unint64_t *)&v68->__shared_owners_;
    do
      unint64_t v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }

  int64x2_t v41 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    uint64_t v42 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }

  unsigned int v44 = operator new(0x68uLL);
  sub_CB144((uint64_t *)buf);
  unsigned __int8 v69 = *(std::__shared_weak_count **)&buf[8];
  __int128 v70 = *(_OWORD *)buf;
  *(void *)buf = 0LL;
  *(void *)&buf[8] = 0LL;
  sub_CAF18((uint64_t)v44, &v70);
  a4[7] = v44;
  if (v69)
  {
    uint64_t v45 = (unint64_t *)&v69->__shared_owners_;
    do
      unint64_t v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }

  uint64_t v47 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    unsigned int v48 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }

  char v50 = v77;
  if (v77)
  {
    uint64_t v51 = (unint64_t *)&v77->__shared_owners_;
    do
      unint64_t v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }

  if (v79) {
    std::__shared_weak_count::__release_weak(v79);
  }
  if (v82) {
    std::__shared_weak_count::__release_weak(v82);
  }
  sub_32C8C(v84);
  sub_85D64(v91[7]);
  sub_85D64(v91[4]);
  *(void *)buf = v91;
  sub_85DA4((void ***)buf);
  *(void *)buf = &v90[8];
  sub_85DA4((void ***)buf);
  __int16 v53 = v89;
  if (v89)
  {
    int v54 = (unint64_t *)&v89->__shared_owners_;
    do
      unint64_t v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }

  return 0LL;
}

void sub_150A40( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20, char a21, uint64_t a22, void *__p, uint64_t a24, uint64_t a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, std::__shared_weak_count *a30, uint64_t a31, uint64_t a32, std::__shared_weak_count *a33, uint64_t a34, uint64_t a35, void *a36, uint64_t a37, char a38, uint64_t a39, uint64_t a40, char a41)
{
  if (a30) {
    std::__shared_weak_count::__release_weak(a30);
  }
  if (a33) {
    std::__shared_weak_count::__release_weak(a33);
  }
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 8LL))(v41);
  }
  sub_32C8C(a36);
  sub_10A59C(v43 - 240);
  sub_7A768((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void sub_150BF4(void *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  BOOL v6 = (char *)operator new(0x78uLL);
  uint64_t v7 = v6;
  *((void *)v6 + 1) = 0LL;
  *((void *)v6 + 2) = 0LL;
  *(void *)BOOL v6 = off_47D698;
  uint64_t v8 = v6 + 24;
  if (a3)
  {
    p_shared_weak_owners = (unint64_t *)&a3->__shared_weak_owners_;
    do
      unint64_t v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
  }

  *((_DWORD *)v6 + 8) = 0;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *((void *)v6 + 11) = 0LL;
  *((_DWORD *)v6 + 24) = 1065353216;
  *((void *)v6 + 3) = off_47D6D0;
  *((void *)v6 + 13) = a2;
  *((void *)v6 + 14) = a3;
  if (a3)
  {
    __int16 v11 = (unint64_t *)&a3->__shared_weak_owners_;
    do
      unint64_t v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }

  sub_CC160((uint64_t)(v6 + 24));
  if (a3) {
    std::__shared_weak_count::__release_weak(a3);
  }
  *a1 = v8;
  a1[1] = v7;
}

void sub_150CC0(_Unwind_Exception *a1)
{
  shared_weak_owners = (std::__shared_weak_count *)v1[4].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  sub_F3008(v3);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

void sub_150CFC(void *a1)
{
  uint64_t v1 = (void *)sub_151440(a1);
  operator delete(v1);
}

uint64_t sub_150D10(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 16LL))(v8, a2);
  uint64_t v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return v3;
}

void sub_150DA0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_150DB4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 24LL))(v8, a2);
  uint64_t v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      unint64_t v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return v3;
}

void sub_150E44( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_150E58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 32LL))(v12, a2, a3, a4);
  uint64_t v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  return v7;
}

void sub_150F00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_150F14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int16 v11 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

void sub_150FCC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_150FE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int16 v11 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

void sub_151098( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1510AC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      unint64_t v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }

void sub_151130( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_151144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 64LL))(v12, a2, a3, a4);
  uint64_t v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  return v7;
}

void sub_1511EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_151200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 72LL))(v12, a2, a3, a4);
  uint64_t v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      unint64_t v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }

  return v7;
}

void sub_1512A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::__shared_weak_count *sub_1512BC(uint64_t *a1, uint64_t *a2, const char *a3, int a4)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  uint64_t v7 = (std::__shared_weak_count *)a2[1];
  if (!v7
    || (uint64_t result = std::__shared_weak_count::lock(v7), (a1[1] = (uint64_t)result) == 0)
    || (uint64_t v10 = *a2, *a1 = *a2, !v10))
  {
    __int16 v11 = (os_log_t *)sub_138E8(13);
    uint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      if (a3)
      {
        uint64_t v14 = strrchr(a3, 47);
        if (v14) {
          unint64_t v13 = v14 + 1;
        }
        else {
          unint64_t v13 = a3;
        }
      }

      else
      {
        unint64_t v13 = 0LL;
      }

      int v16 = 136315906;
      uint64_t v17 = "StandardUtilities.h";
      __int16 v18 = 1024;
      int v19 = 267;
      __int16 v20 = 2080;
      int v21 = v13;
      __int16 v22 = 1024;
      int v23 = a4;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Could not lock weak ptr (%s:%d).",  (uint8_t *)&v16,  0x22u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not lock weak ptr (%s:%d).");
  }

  return result;
}

void sub_151418(_Unwind_Exception *a1)
{
}

uint64_t sub_151440(void *a1)
{
  *a1 = off_47D6D0;
  uint64_t v2 = (std::__shared_weak_count *)a1[11];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return sub_F3008((uint64_t)a1);
}

void sub_151478(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_47D698;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_151488(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_47D698;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_1514A8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1514C4(void *a1)
{
  uint64_t v1 = (void *)sub_151868(a1);
  operator delete(v1);
}

uint64_t sub_1514D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 16LL))(*(void *)(a1 + 80));
}

uint64_t sub_1514E8(uint64_t a1)
{
  uint64_t v7 = 0x676C6F626C6E616DLL;
  int v8 = 0;
  CFStringRef theString = 0LL;
  int v5 = 8;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, CFStringRef *))(*(void *)a1 + 56LL))( a1,  &v7,  0LL,  0LL,  &v5,  &theString);
  buffer[0] = 0;
  if (theString)
  {
    CFIndex usedBufLen = 0LL;
    v10.length = CFStringGetLength(theString);
    v10.location = 0LL;
    CFStringGetBytes(theString, v10, 0x8000100u, 0, 0, buffer, 255LL, &usedBufLen);
    buffer[usedBufLen] = 0;
    CFRelease(theString);
  }

  uint64_t v2 = "Input";
  if (!*(_BYTE *)(a1 + 88)) {
    uint64_t v2 = "Output";
  }
  return printf( "AudioObjectID:\t0x%X\n\tClass:\t\t%s\n\tName:\t\t%s\n\tDirection:\t%s\n\tChannels:\t%u\n",  *(_DWORD *)(a1 + 8),  "Audio Stream",  (const char *)buffer,  v2,  *(_DWORD *)(*(void *)(a1 + 104) + 44LL));
}

void sub_151620(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x15154CLL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_151638(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (*a2 <= 1819173228)
  {
    if (v2 > 1818455661)
    {
      BOOL v3 = v2 == 1818455662;
      int v4 = 1819107691;
    }

    else
    {
      BOOL v3 = v2 == 1818452846;
      int v4 = 1818454126;
    }
  }

  else if (v2 <= 1935894637)
  {
    BOOL v3 = v2 == 1819173229;
    int v4 = 1819569763;
  }

  else
  {
    BOOL v3 = v2 == 1935894638 || v2 == 1935960434;
    int v4 = 1952805485;
  }

  if (v3 || v2 == v4) {
    return 0LL;
  }
  else {
    return sub_5E070(a1, a2);
  }
}

uint64_t sub_1516EC()
{
  return 0LL;
}

uint64_t sub_1516F4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 128LL))(*(void *)(a1 + 80));
}

uint64_t sub_151704(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  int v2 = *((_DWORD *)a2 + 2);
  if (*(_BYTE *)(a1 + 88)) {
    int v3 = 1768845428;
  }
  else {
    int v3 = 1869968496;
  }
  HIDWORD(v5) = v3;
  int v6 = v2;
  if (v2) {
    int v2 = v2 + *(_DWORD *)(a1 + 92) - 1;
  }
  int v6 = v2;
  return (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 80) + 144LL))(*(void *)(a1 + 80), &v5);
}

uint64_t sub_151770(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  int v2 = *((_DWORD *)a2 + 2);
  if (*(_BYTE *)(a1 + 88)) {
    int v3 = 1768845428;
  }
  else {
    int v3 = 1869968496;
  }
  HIDWORD(v5) = v3;
  int v6 = v2;
  if (v2) {
    int v2 = v2 + *(_DWORD *)(a1 + 92) - 1;
  }
  int v6 = v2;
  return (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 80) + 152LL))(*(void *)(a1 + 80), &v5);
}

uint64_t sub_1517DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  int v2 = *((_DWORD *)a2 + 2);
  if (*(_BYTE *)(a1 + 88)) {
    int v3 = 1768845428;
  }
  else {
    int v3 = 1869968496;
  }
  HIDWORD(v5) = v3;
  int v6 = v2;
  if (v2) {
    int v2 = v2 + *(_DWORD *)(a1 + 92) - 1;
  }
  int v6 = v2;
  return (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 80) + 160LL))(*(void *)(a1 + 80), &v5);
}

uint64_t sub_151848()
{
  return 0LL;
}

uint64_t sub_151850()
{
  return 0LL;
}

uint64_t sub_151860()
{
  return 1LL;
}

uint64_t sub_151868(void *a1)
{
  *a1 = off_4711C0;
  sub_2F534C((uint64_t)a1, a1[13]);
  uint64_t v2 = a1[13];
  a1[13] = 0LL;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 8LL))(v2);
    uint64_t v3 = a1[13];
    a1[13] = 0LL;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8LL))(v3);
    }
  }

  return sub_2F4E00((uint64_t)a1);
}

uint64_t sub_1518D0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v9 = *(void *)(v6 + 16);
  uint64_t v7 = v6 + 16;
  uint64_t v8 = v9;
  int v10 = *(char *)(v7 + 23);
  if (v10 >= 0) {
    uint64_t v11 = v7;
  }
  else {
    uint64_t v11 = v8;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(v7 + 23);
  }
  else {
    uint64_t v12 = *(void *)(v7 + 8);
  }
  sub_826EC(&v21, v11, v12);
  uint64_t v13 = *(void *)(a2 + 8);
  while (1)
  {
    uint64_t v13 = *(void *)(v13 + 8);
    if (v13 == a2) {
      break;
    }
    int v14 = *(char *)(a3 + 23);
    if (v14 >= 0) {
      uint64_t v15 = a3;
    }
    else {
      uint64_t v15 = *(void *)a3;
    }
    if (v14 >= 0) {
      uint64_t v16 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v16 = *(void *)(a3 + 8);
    }
    sub_826EC(&v21, v15, v16);
    int v17 = *(char *)(v13 + 39);
    if (v17 >= 0) {
      uint64_t v18 = v13 + 16;
    }
    else {
      uint64_t v18 = *(void *)(v13 + 16);
    }
    if (v17 >= 0) {
      uint64_t v19 = *(unsigned __int8 *)(v13 + 39);
    }
    else {
      uint64_t v19 = *(void *)(v13 + 24);
    }
    sub_826EC(&v21, v18, v19);
  }

  sub_82924(a1, (uint64_t)v22);
  if (v23 < 0) {
    operator delete((void *)v22[8]);
  }
  std::streambuf::~streambuf(v22);
  return std::ios::~ios(&v24);
}

void sub_151A08(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_151A20(uint64_t a1, const __CFString *a2)
{
  if (!a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_7E414(exception);
  }

  return sub_48100(a1, a2);
}

void sub_151A64(_Unwind_Exception *a1)
{
}

std::string *sub_151A78(std::string *a1, const __CFArray *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "{ ", 2uLL);
  if (a2)
  {
    CFIndex Count = CFArrayGetCount(a2);
    if (Count >= 1)
    {
      for (CFIndex i = 0LL; i != Count; ++i)
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a2, i);
        sub_151BB8(&__p, ValueAtIndex);
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type size = __p.__r_.__value_.__s.__size_;
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        std::string::append(a1, (const std::string::value_type *)p_p, size);
        if (Count - 1 != i) {
          std::string::append(a1, ", ", 2uLL);
        }
      }
    }
  }

  return std::string::append(a1, " }", 2uLL);
}

void sub_151B78( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

std::string *sub_151BB8(std::string *result, const __CFString *cf)
{
  uint64_t v2 = result;
  if (cf)
  {
    CFTypeID v4 = CFGetTypeID(cf);
    if (v4 == CFDictionaryGetTypeID()) {
      return sub_151D60(v2, (const __CFDictionary *)cf);
    }
    if (v4 == CFArrayGetTypeID()) {
      return (std::string *)sub_151A78(v2, cf);
    }
    if (v4 == CFNumberGetTypeID())
    {
      if (CFNumberGetByteSize((CFNumberRef)cf) == 4
        && CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, &valuePtr))
      {
        return (std::string *)sub_2CA1C(v2, valuePtr);
      }

      CFStringRef valuePtr = CFStringCreateWithFormat(kCFAllocatorDefault, 0LL, @"%@", cf);
      char v6 = 1;
      sub_48E98(v2, valuePtr);
    }

    else
    {
      if (v4 == CFStringGetTypeID()) {
        return (std::string *)sub_48E98(v2, cf);
      }
      if (v4 == CFBooleanGetTypeID()) {
        return (std::string *)sub_151F78(v2, (CFBooleanRef)cf);
      }
      CFStringRef valuePtr = CFCopyDescription(cf);
      char v6 = 1;
      sub_48E98(v2, valuePtr);
    }

    return (std::string *)sub_19DFC((uint64_t)&valuePtr);
  }

  else
  {
    result->__r_.__value_.__r.__words[0] = 0LL;
    result->__r_.__value_.__l.__size_ = 0LL;
    result->__r_.__value_.__l.__cap_ = 0LL;
  }

  return result;
}

void sub_151D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

std::string *sub_151D60(std::string *a1, const __CFDictionary *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "[ ", 2uLL);
  if (a2)
  {
    CFIndex Count = CFDictionaryGetCount(a2);
    uint64_t v5 = __chkstk_darwin(Count);
    uint64_t v7 = (const void **)((char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
    __chkstk_darwin(v5);
    uint64_t v9 = (CFTypeRef *)((char *)&v15 - v8);
    CFDictionaryGetKeysAndValues(a2, v7, (const void **)((char *)&v15 - v8));
    if (Count >= 1)
    {
      do
      {
        sub_151BB8((int)&v15, *v7);
        if ((v17 & 0x80u) == 0) {
          int v10 = (const std::string::value_type *)&v15;
        }
        else {
          int v10 = v15;
        }
        if ((v17 & 0x80u) == 0) {
          std::string::size_type v11 = v17;
        }
        else {
          std::string::size_type v11 = v16;
        }
        std::string::append(a1, v10, v11);
        std::string::append(a1, ": ", 2uLL);
        sub_151BB8((int)&v15, *v9);
        if ((v17 & 0x80u) == 0) {
          uint64_t v12 = (const std::string::value_type *)&v15;
        }
        else {
          uint64_t v12 = v15;
        }
        if ((v17 & 0x80u) == 0) {
          std::string::size_type v13 = v17;
        }
        else {
          std::string::size_type v13 = v16;
        }
        std::string::append(a1, v12, v13);
        if (Count != 1) {
          std::string::append(a1, "; ", 2uLL);
        }
        ++v9;
        ++v7;
        --Count;
      }

      while (Count);
    }
  }

  return std::string::append(a1, " ]", 2uLL);
}

void sub_151F30(_Unwind_Exception *exception_object)
{
}

void *sub_151F78(void *a1, CFBooleanRef BOOLean)
{
  if (CFBooleanGetValue(BOOLean)) {
    uint64_t v3 = "true";
  }
  else {
    uint64_t v3 = "false";
  }
  return sub_7D084(a1, v3);
}

uint64_t sub_151FB8(void *a1, uint64_t a2)
{
  switch(*(_DWORD *)a2)
  {
    case 0:
      uint64_t v4 = sub_2DC888((int *)a2);
      std::ostream::operator<<(&v25, v4);
      goto LABEL_35;
    case 1:
    case 5:
      buf[0] = *(_BYTE *)(a2 + 8);
      sub_826EC(&v25, (uint64_t)buf, 1LL);
      goto LABEL_35;
    case 2:
      std::ostream::operator<<(&v25, *(__int16 *)(a2 + 8));
      goto LABEL_35;
    case 3:
      uint64_t v8 = sub_2DC980((int *)a2);
      std::ostream::operator<<(&v25, v8);
      goto LABEL_35;
    case 4:
      std::ostream::operator<<(&v25, *(void *)(a2 + 8));
      goto LABEL_35;
    case 6:
      std::ostream::operator<<(&v25, *(unsigned __int16 *)(a2 + 8));
      goto LABEL_35;
    case 7:
      uint64_t v9 = sub_2DCA7C((int *)a2);
      std::ostream::operator<<(&v25, v9);
      goto LABEL_35;
    case 8:
      std::ostream::operator<<(&v25, *(void *)(a2 + 8));
      goto LABEL_35;
    case 9:
      float v10 = sub_2DCB78((float *)a2);
      std::ostream::operator<<(&v25, v10);
      goto LABEL_35;
    case 0xA:
      double v11 = sub_2DCC74((double *)a2);
      std::ostream::operator<<(&v25, v11);
      goto LABEL_35;
    case 0xB:
      uint64_t v12 = sub_2DCD70((int *)a2);
      goto LABEL_25;
    case 0xD:
      uint64_t v12 = sub_2DCE6C((int *)a2);
LABEL_25:
      std::ostream::operator<<(&v25, v12);
      goto LABEL_35;
    case 0xE:
      uint64_t v5 = (const __CFString *)sub_2DCF68((int *)a2);
      sub_48100((uint64_t)buf, v5);
      if (v31 >= 0) {
        uint64_t v6 = buf;
      }
      else {
        uint64_t v6 = *(_BYTE **)buf;
      }
      if (v31 >= 0) {
        uint64_t v7 = HIBYTE(v31);
      }
      else {
        uint64_t v7 = *(void *)&buf[8];
      }
      sub_826EC(&v25, (uint64_t)v6, v7);
      if (SHIBYTE(v31) < 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_35;
    case 0xF:
      uint64_t v19 = (os_log_t *)sub_138E8(13);
      os_log_t v20 = *v19;
      if (!*v19 || !os_log_type_enabled(*v19, OS_LOG_TYPE_INFO)) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "StandardUtilities.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 362;
      std::string::size_type v16 = "%25s:%-5d Unable to return a single string for kVariTypeMap.";
      goto LABEL_32;
    case 0x10:
      uint64_t v21 = (os_log_t *)sub_138E8(13);
      os_log_t v20 = *v21;
      if (!*v21 || !os_log_type_enabled(*v21, OS_LOG_TYPE_INFO)) {
        goto LABEL_35;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "StandardUtilities.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 359;
      std::string::size_type v16 = "%25s:%-5d Unable to return a single string for kVariTypeList.";
LABEL_32:
      unsigned __int8 v17 = v20;
      uint32_t v18 = 18;
      break;
    case 0x12:
      sub_826EC(&v25, (uint64_t)"std::function<VariTypeMap()>", 28LL);
      goto LABEL_35;
    default:
      std::string::size_type v13 = (os_log_t *)sub_138E8(13);
      os_log_t v14 = *v13;
      if (!*v13 || !os_log_type_enabled(*v13, OS_LOG_TYPE_INFO)) {
        goto LABEL_35;
      }
      int v15 = *(_DWORD *)a2;
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "StandardUtilities.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 366;
      __int16 v30 = 1024;
      int v31 = v15;
      std::string::size_type v16 = "%25s:%-5d Unable to return a single string for VariType %d.";
      unsigned __int8 v17 = v14;
      uint32_t v18 = 24;
      break;
  }

  _os_log_impl(&dword_0, v17, OS_LOG_TYPE_INFO, v16, buf, v18);
LABEL_35:
  sub_82924(a1, (uint64_t)v26);
  *(void *)((char *)v24
  uint64_t v25 = v22;
  if (v27 < 0) {
    operator delete((void *)v26[8]);
  }
  std::streambuf::~streambuf(v26);
  return std::ios::~ios(&v28);
}

void sub_1523A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_1523EC(void *a1, int *a2, __int128 *a3)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0LL;
  if (*a2 >= 0xF)
  {
    switch(*a2)
    {
      case 15:
        uint64_t v15 = sub_2DD064(a2);
        if (*((char *)a3 + 23) < 0)
        {
          sub_24054(&__dst, *(void **)a3, *((void *)a3 + 1));
        }

        else
        {
          __int128 __dst = *a3;
          uint64_t v79 = *((void *)a3 + 2);
        }

        sub_152CB4(&v83, v15, &__dst);
        std::string::size_type cap = v83.__r_.__value_.__l.__cap_;
        if (v83.__r_.__value_.__l.__cap_)
        {
          __int128 v19 = *(_OWORD *)&v83.__r_.__value_.__l.__data_;
          uint64_t v20 = *(void *)v83.__r_.__value_.__l.__size_;
          *(void *)(v20 + 8) = *(void *)(v83.__r_.__value_.__r.__words[0] + 8);
          **(void **)(v19 + 8) = v20;
          uint64_t v21 = (void *)*a1;
          v21[1] = *((void *)&v19 + 1);
          **((void **)&v19 + 1) = v21;
          *a1 = v19;
          *(void *)(v19 + 8) = a1;
          a1[2] += cap;
          v83.__r_.__value_.__l.__cap_ = 0LL;
        }

        sub_1532B4(&v83);
        if ((SHIBYTE(v79) & 0x80000000) == 0) {
          return;
        }
        os_log_t v14 = (void *)__dst;
        break;
      case 16:
        uint64_t v16 = sub_2DD25C(a2);
        if (*((char *)a3 + 23) < 0)
        {
          sub_24054(&v76, *(void **)a3, *((void *)a3 + 1));
        }

        else
        {
          __int128 v76 = *a3;
          uint64_t v77 = *((void *)a3 + 2);
        }

        std::string __p = &__p;
        p_p = &__p;
        uint64_t v82 = 0LL;
        int v22 = SHIBYTE(v77);
        if (v77 >= 0) {
          size_t v23 = HIBYTE(v77);
        }
        else {
          size_t v23 = *((void *)&v76 + 1);
        }
        int v70 = SHIBYTE(v77);
        sub_D0924((uint64_t)&v83, v23 + 1);
        if ((v83.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v24 = &v83;
        }
        else {
          uint64_t v24 = (std::string *)v83.__r_.__value_.__r.__words[0];
        }
        if (v23)
        {
          if (v22 >= 0) {
            uint64_t v25 = &v76;
          }
          else {
            uint64_t v25 = (__int128 *)v76;
          }
          memmove(v24, v25, v23);
        }

        *(_WORD *)((char *)&v24->__r_.__value_.__l.__data_ + v23) = 123;
        unsigned __int8 v26 = (char *)operator new(0x28uLL);
        *(std::string *)(v26 + 16) = v83;
        char v27 = __p;
        *(void *)unsigned __int8 v26 = __p;
        *((void *)v26 + 1) = &__p;
        v27[1] = v26;
        std::string __p = v26;
        ++v82;
        uint64_t v28 = *(void *)(v16 + 8);
        if (v28 != v16)
        {
          if (v22 >= 0) {
            int v29 = &v76;
          }
          else {
            int v29 = (__int128 *)v76;
          }
          do
          {
            sub_D0924((uint64_t)v84, v23 + 4);
            if (v85 >= 0) {
              __int16 v30 = v84;
            }
            else {
              __int16 v30 = *(_BYTE **)v84;
            }
            if (v23) {
              memmove(v30, v29, v23);
            }
            strcpy(&v30[v23], "    ");
            sub_1523EC(&v83, v28 + 16, v84);
            if (v85 < 0) {
              operator delete(*(void **)v84);
            }
            std::string::size_type v31 = v83.__r_.__value_.__l.__cap_;
            if (v83.__r_.__value_.__l.__cap_)
            {
              __int128 v32 = *(_OWORD *)&v83.__r_.__value_.__l.__data_;
              uint64_t v33 = *(void *)v83.__r_.__value_.__l.__size_;
              *(void *)(v33 + 8) = *(void *)(v83.__r_.__value_.__r.__words[0] + 8);
              **(void **)(v32 + 8) = v33;
              unint64_t v34 = __p;
              *((void *)__p + 1) = *((void *)&v32 + 1);
              **((void **)&v32 + 1) = v34;
              *(void *)(v32 + 8) = &__p;
              std::string __p = (void *)v32;
              v82 += v31;
              v83.__r_.__value_.__l.__cap_ = 0LL;
            }

            sub_1532B4(&v83);
            uint64_t v28 = *(void *)(v28 + 8);
          }

          while (v28 != v16);
        }

        uint64_t v35 = &v83;
        sub_D0924((uint64_t)&v83, v23 + 1);
        if ((v83.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          uint64_t v35 = (std::string *)v83.__r_.__value_.__r.__words[0];
        }
        if (v23)
        {
          if (v70 >= 0) {
            uint64_t v36 = &v76;
          }
          else {
            uint64_t v36 = (__int128 *)v76;
          }
          memmove(v35, v36, v23);
        }

        *(_WORD *)((char *)&v35->__r_.__value_.__l.__data_ + v23) = 125;
        unint64_t v37 = (void **)operator new(0x28uLL);
        *(std::string *)(v37 + 2) = v83;
        uint64_t v38 = __p;
        *unint64_t v37 = __p;
        v37[1] = &__p;
        v38[1] = v37;
        BOOL v39 = __CFADD__(v82, 1LL);
        uint64_t v40 = v82 + 1;
        std::string __p = v37;
        ++v82;
        if (!v39)
        {
          uint64_t v41 = p_p;
          uint64_t v42 = *p_p;
          v42[1] = &__p;
          *v37[1] = v42;
          uint64_t v43 = (void *)*a1;
          v43[1] = v41;
          std::__shared_weak_count *v41 = v43;
          *a1 = v37;
          v37[1] = a1;
          a1[2] += v40;
          uint64_t v82 = 0LL;
        }

        sub_1532B4(&__p);
        if ((v70 & 0x80000000) == 0) {
          return;
        }
        os_log_t v14 = (void *)v76;
        break;
      case 17:
        uint64_t v17 = sub_2DD358(a2);
        if (*((char *)a3 + 23) < 0)
        {
          sub_24054(&v71, *(void **)a3, *((void *)a3 + 1));
        }

        else
        {
          __int128 v71 = *a3;
          uint64_t v72 = *((void *)a3 + 2);
        }

        __int128 v73 = (char *)&v73;
        __int128 v74 = &v73;
        uint64_t v75 = 0LL;
        int v44 = SHIBYTE(v72);
        if (v72 >= 0) {
          size_t v45 = HIBYTE(v72);
        }
        else {
          size_t v45 = *((void *)&v71 + 1);
        }
        unint64_t v46 = &v83;
        sub_D0924((uint64_t)&v83, v45 + 7);
        if ((v83.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          unint64_t v46 = (std::string *)v83.__r_.__value_.__r.__words[0];
        }
        if (v45)
        {
          if (v44 >= 0) {
            uint64_t v47 = &v71;
          }
          else {
            uint64_t v47 = (__int128 *)v71;
          }
          memmove(v46, v47, v45);
        }

        strcpy((char *)v46 + v45, "PAIR: {");
        unsigned int v48 = (char *)operator new(0x28uLL);
        *(std::string *)(v48 + 16) = v83;
        unint64_t v49 = v73;
        *(void *)unsigned int v48 = v73;
        *((void *)v48 + 1) = &v73;
        *((void *)v49 + 1) = v48;
        __int128 v73 = v48;
        ++v75;
        char v50 = v84;
        sub_D0924((uint64_t)v84, v45 + 4);
        if (v85 < 0) {
          char v50 = *(_BYTE **)v84;
        }
        if (v45)
        {
          if (v44 >= 0) {
            uint64_t v51 = &v71;
          }
          else {
            uint64_t v51 = (__int128 *)v71;
          }
          memmove(v50, v51, v45);
        }

        strcpy(&v50[v45], "    ");
        sub_1523EC(&v83, v17, v84);
        std::string::size_type v52 = v83.__r_.__value_.__l.__cap_;
        if (v83.__r_.__value_.__l.__cap_)
        {
          __int128 v53 = *(_OWORD *)&v83.__r_.__value_.__l.__data_;
          uint64_t v54 = *(void *)v83.__r_.__value_.__l.__size_;
          *(void *)(v54 + 8) = *(void *)(v83.__r_.__value_.__r.__words[0] + 8);
          **(void **)(v53 + 8) = v54;
          unint64_t v55 = v73;
          *((void *)v73 + 1) = *((void *)&v53 + 1);
          **((void **)&v53 + 1) = v55;
          *(void *)(v53 + 8) = &v73;
          __int128 v73 = (char *)v53;
          v75 += v52;
          v83.__r_.__value_.__l.__cap_ = 0LL;
        }

        sub_1532B4(&v83);
        if (v85 < 0) {
          operator delete(*(void **)v84);
        }
        sub_D0924((uint64_t)&__p, v45 + 4);
        if (v82 >= 0) {
          __int128 v56 = &__p;
        }
        else {
          __int128 v56 = __p;
        }
        if (v45)
        {
          if (v44 >= 0) {
            std::string::size_type v57 = &v71;
          }
          else {
            std::string::size_type v57 = (__int128 *)v71;
          }
          memmove(v56, v57, v45);
        }

        strcpy((char *)v56 + v45, "    ");
        sub_1523EC(&v83, v17 + 16, &__p);
        std::string::size_type v58 = v83.__r_.__value_.__l.__cap_;
        if (v83.__r_.__value_.__l.__cap_)
        {
          __int128 v59 = *(_OWORD *)&v83.__r_.__value_.__l.__data_;
          uint64_t v60 = *(void *)v83.__r_.__value_.__l.__size_;
          *(void *)(v60 + 8) = *(void *)(v83.__r_.__value_.__r.__words[0] + 8);
          **(void **)(v59 + 8) = v60;
          uint64_t v61 = v73;
          *((void *)v73 + 1) = *((void *)&v59 + 1);
          **((void **)&v59 + 1) = v61;
          *(void *)(v59 + 8) = &v73;
          __int128 v73 = (char *)v59;
          v75 += v58;
          v83.__r_.__value_.__l.__cap_ = 0LL;
        }

        sub_1532B4(&v83);
        if (SHIBYTE(v82) < 0) {
          operator delete(__p);
        }
        std::string v62 = &v83;
        sub_D0924((uint64_t)&v83, v45 + 1);
        if ((v83.__r_.__value_.__s.__size_ & 0x80u) != 0) {
          std::string v62 = (std::string *)v83.__r_.__value_.__r.__words[0];
        }
        if (v45)
        {
          if (v44 >= 0) {
            std::string::size_type v63 = &v71;
          }
          else {
            std::string::size_type v63 = (__int128 *)v71;
          }
          memmove(v62, v63, v45);
        }

        *(_WORD *)((char *)&v62->__r_.__value_.__l.__data_ + v45) = 125;
        uint64_t v64 = (char *)operator new(0x28uLL);
        *(std::string *)(v64 + 16) = v83;
        __int128 v65 = v73;
        *(void *)uint64_t v64 = v73;
        *((void *)v64 + 1) = &v73;
        *((void *)v65 + 1) = v64;
        BOOL v39 = __CFADD__(v75, 1LL);
        uint64_t v66 = v75 + 1;
        __int128 v73 = v64;
        ++v75;
        if (!v39)
        {
          __int128 v67 = v74;
          char v68 = *v74;
          *((void *)v68 + 1) = &v73;
          **((void **)v64 + 1) = v68;
          uint64_t v69 = *a1;
          *(void *)(v69 + 8) = v67;
          *__int128 v67 = (char *)v69;
          *a1 = v64;
          *((void *)v64 + 1) = a1;
          a1[2] += v66;
          uint64_t v75 = 0LL;
        }

        sub_1532B4(&v73);
        if ((v44 & 0x80000000) == 0) {
          return;
        }
        os_log_t v14 = (void *)v71;
        break;
      case 18:
        goto LABEL_2;
      default:
        return;
    }

    goto LABEL_10;
  }

void sub_152B98( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, int a31, __int16 a32, char a33, char a34, void *__p, uint64_t a36, int a37, __int16 a38, char a39, char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  sub_1532B4(&a15);
  if (v41 < 0) {
    operator delete(a12);
  }
  sub_1532B4(v40);
  _Unwind_Resume(a1);
}

void sub_152CB4(uint64_t *a1, uint64_t a2, const void **a3)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  for (CFIndex i = *(uint64_t **)(a2 + 16); i; CFIndex i = (uint64_t *)*i)
  {
    int v6 = *((_DWORD *)i + 6);
    if ((v6 - 18) > 0xFFFFFFFC)
    {
      if (v6 == 15) {
        uint64_t v24 = "VariTypeMap { ";
      }
      else {
        uint64_t v24 = "VariTypeList { ";
      }
      else {
        size_t v25 = (size_t)a3[1];
      }
      sub_D0924((uint64_t)&v56, v25 + 1);
      if ((v56.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        unsigned __int8 v26 = &v56;
      }
      else {
        unsigned __int8 v26 = (std::string *)v56.__r_.__value_.__r.__words[0];
      }
      if (v25)
      {
        else {
          char v27 = *a3;
        }
        memmove(v26, v27, v25);
      }

      *(_WORD *)((char *)&v26->__r_.__value_.__l.__data_ + v25) = 91;
      sub_2CA1C(&v53, *((unsigned int *)i + 4));
      if ((v55 & 0x80u) == 0) {
        uint64_t v28 = (const std::string::value_type *)&v53;
      }
      else {
        uint64_t v28 = (const std::string::value_type *)v53;
      }
      if ((v55 & 0x80u) == 0) {
        std::string::size_type v29 = v55;
      }
      else {
        std::string::size_type v29 = v54;
      }
      __int16 v30 = std::string::append(&v56, v28, v29);
      __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v57.__r_.__value_.__l.__cap_ = v30->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0LL;
      v30->__r_.__value_.__l.__cap_ = 0LL;
      v30->__r_.__value_.__r.__words[0] = 0LL;
      __int128 v32 = std::string::append(&v57, "]: ", 3uLL);
      __int128 v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v58.__r_.__value_.__l.__cap_ = v32->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0LL;
      v32->__r_.__value_.__l.__cap_ = 0LL;
      v32->__r_.__value_.__r.__words[0] = 0LL;
      if (v6 == 15) {
        std::string::size_type v34 = 14LL;
      }
      else {
        std::string::size_type v34 = 15LL;
      }
      uint64_t v35 = std::string::append(&v58, v24, v34);
      std::string::size_type v36 = v35->__r_.__value_.__r.__words[0];
      *(void *)&__int128 __p = v35->__r_.__value_.__l.__size_;
      *(void *)((char *)&__p + 7) = *(std::string::size_type *)((char *)&v35->__r_.__value_.__r.__words[1] + 7);
      unsigned __int8 size = v35->__r_.__value_.__s.__size_;
      v35->__r_.__value_.__l.__size_ = 0LL;
      v35->__r_.__value_.__l.__cap_ = 0LL;
      v35->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v38 = operator new(0x28uLL);
      uint64_t v39 = __p;
      v38[2] = v36;
      v38[3] = v39;
      *(void *)((char *)v38 + 31) = *(void *)((char *)&__p + 7);
      *((_BYTE *)v38 + 39) = size;
      uint64_t v40 = *a1;
      *uint64_t v38 = *a1;
      v38[1] = a1;
      *(void *)(v40 + 8) = v38;
      *a1 = (uint64_t)v38;
      ++a1[2];
      else {
        size_t v41 = (size_t)a3[1];
      }
      sub_D0924((uint64_t)v51, v41 + 8);
      if (v52 >= 0) {
        uint64_t v42 = v51;
      }
      else {
        uint64_t v42 = (void **)v51[0];
      }
      if (v41)
      {
        else {
          uint64_t v43 = *a3;
        }
        memmove(v42, v43, v41);
      }

      strcpy((char *)v42 + v41, "        ");
      sub_1523EC(&v58, (int *)i + 6, (__int128 *)v51);
      if (v52 < 0) {
        operator delete(v51[0]);
      }
      sub_7D084(&v57, " } ");
      int v44 = (char *)operator new(0x28uLL);
      *(std::string *)(v44 + 16) = v57;
      std::string::size_type v45 = v58.__r_.__value_.__r.__words[0];
      *(void *)int v44 = v58.__r_.__value_.__r.__words[0];
      *((void *)v44 + 1) = &v58;
      *(void *)(v45 + 8) = v44;
      BOOL v46 = __CFADD__(v58.__r_.__value_.__l.__cap_, 1LL);
      std::string::size_type v47 = v58.__r_.__value_.__l.__cap_ + 1;
      v58.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
      ++v58.__r_.__value_.__l.__cap_;
      if (!v46)
      {
        unsigned int v48 = (void *)v58.__r_.__value_.__l.__size_;
        uint64_t v49 = *(void *)v58.__r_.__value_.__l.__size_;
        *(void *)(v49 + 8) = *((void *)v44 + 1);
        **((void **)v44 + 1) = v49;
        uint64_t v50 = *a1;
        *(void *)(v50 + 8) = v48;
        *unsigned int v48 = v50;
        *a1 = (uint64_t)v44;
        *((void *)v44 + 1) = a1;
        a1[2] += v47;
        v58.__r_.__value_.__l.__cap_ = 0LL;
      }

      sub_1532B4(&v58);
    }

    else
    {
      else {
        size_t v7 = (size_t)a3[1];
      }
      sub_D0924((uint64_t)&v56, v7 + 1);
      if ((v56.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v8 = &v56;
      }
      else {
        uint64_t v8 = (std::string *)v56.__r_.__value_.__r.__words[0];
      }
      if (v7)
      {
        else {
          std::string::size_type v9 = *a3;
        }
        memmove(v8, v9, v7);
      }

      *(_WORD *)((char *)&v8->__r_.__value_.__l.__data_ + v7) = 91;
      sub_2CA1C(&v53, *((unsigned int *)i + 4));
      if ((v55 & 0x80u) == 0) {
        float v10 = (const std::string::value_type *)&v53;
      }
      else {
        float v10 = (const std::string::value_type *)v53;
      }
      if ((v55 & 0x80u) == 0) {
        std::string::size_type v11 = v55;
      }
      else {
        std::string::size_type v11 = v54;
      }
      uint64_t v12 = std::string::append(&v56, v10, v11);
      __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v57.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0LL;
      v12->__r_.__value_.__l.__cap_ = 0LL;
      v12->__r_.__value_.__r.__words[0] = 0LL;
      os_log_t v14 = std::string::append(&v57, "]: ", 3uLL);
      __int128 v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v58.__r_.__value_.__l.__cap_ = v14->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0LL;
      v14->__r_.__value_.__l.__cap_ = 0LL;
      v14->__r_.__value_.__r.__words[0] = 0LL;
      sub_151FB8(&__p, (uint64_t)(i + 3));
      if ((v60 & 0x80u) == 0) {
        p_p = (const std::string::value_type *)&__p;
      }
      else {
        p_p = (const std::string::value_type *)__p;
      }
      if ((v60 & 0x80u) == 0) {
        std::string::size_type v17 = v60;
      }
      else {
        std::string::size_type v17 = *((void *)&__p + 1);
      }
      uint32_t v18 = std::string::append(&v58, p_p, v17);
      std::string::size_type v19 = v18->__r_.__value_.__r.__words[0];
      v61[0] = v18->__r_.__value_.__l.__size_;
      *(void *)((char *)v61 + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
      unsigned __int8 v20 = v18->__r_.__value_.__s.__size_;
      v18->__r_.__value_.__l.__size_ = 0LL;
      v18->__r_.__value_.__l.__cap_ = 0LL;
      v18->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v21 = operator new(0x28uLL);
      uint64_t v22 = v61[0];
      v21[2] = v19;
      void v21[3] = v22;
      *(void *)((char *)v21 + 31) = *(void *)((char *)v61 + 7);
      *((_BYTE *)v21 + 39) = v20;
      v61[0] = 0LL;
      *(void *)((char *)v61 + 7) = 0LL;
      uint64_t v23 = *a1;
      void *v21 = *a1;
      v21[1] = a1;
      *(void *)(v23 + 8) = v21;
      *a1 = (uint64_t)v21;
      ++a1[2];
    }
  }

void sub_1531B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, uint64_t a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *__p, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40, uint64_t a41, uint64_t a42, uint64_t a43, int a44, __int16 a45, char a46, char a47)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  sub_1532B4(&a35);
  sub_1532B4(v47);
  _Unwind_Resume(a1);
}

void *sub_1532B4(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    uint64_t result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = (void *)*result;
    v3[1] = *(void *)(*v1 + 8LL);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0LL;
    while (result != v1)
    {
      uint64_t v4 = (void *)result[1];
      sub_153310((void **)result);
      uint64_t result = v4;
    }
  }

  return result;
}

void sub_153310(void **__p)
{
}

void sub_153340(uint64_t *a1, uint64_t a2)
{
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_153398( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1533B4(uint64_t *a1, CFDictionaryRef theDict, int a3, const void **a4)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  if (theDict)
  {
    CFIndex Count = CFDictionaryGetCount(theDict);
    CFIndex v9 = Count;
    if (Count >= 1)
    {
      uint64_t v47 = (uint64_t)&v47;
      uint64_t v10 = __chkstk_darwin(Count);
      uint64_t v12 = (const void **)((char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
      __chkstk_darwin(v10);
      os_log_t v14 = (const __CFString **)((char *)&v47 - v13);
      CFDictionaryGetKeysAndValues(theDict, v12, (const void **)((char *)&v47 - v13));
      int v49 = a3 - 1;
      unsigned int v48 = &v51;
      while (1)
      {
        if (a3 >= 2 && ((CFTypeID v15 = CFGetTypeID(*v14), CFArrayGetTypeID() == v15) || CFDictionaryGetTypeID() == v15))
        {
          else {
            size_t v16 = (size_t)a4[1];
          }
          sub_D0924((uint64_t)&v54, v16 + 2);
          if ((v54.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v17 = &v54;
          }
          else {
            std::string::size_type v17 = (std::string *)v54.__r_.__value_.__r.__words[0];
          }
          if (v16)
          {
            else {
              uint32_t v18 = *a4;
            }
            memmove(v17, v18, v16);
          }

          strcpy((char *)v17 + v16, "- ");
          sub_151BB8(&v53, (const __CFString *)*v12);
          if ((v53.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v19 = &v53;
          }
          else {
            std::string::size_type v19 = (std::string *)v53.__r_.__value_.__r.__words[0];
          }
          if ((v53.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type size = v53.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type size = v53.__r_.__value_.__l.__size_;
          }
          std::string::append(&v54, (const std::string::value_type *)v19, size);
          std::string::append(&v54, ":", 1uLL);
          uint64_t v21 = sub_153968((uint64_t)&v54);
          v21[1] = a1;
          uint64_t v22 = *a1;
          void *v21 = *a1;
          *(void *)(v22 + 8) = v21;
          *a1 = (uint64_t)v21;
          ++a1[2];
          uint64_t v23 = (std::string *)sub_7D084(&v53, "  ");
          int v24 = *((char *)a4 + 23);
          if (v24 >= 0) {
            size_t v25 = (const std::string::value_type *)a4;
          }
          else {
            size_t v25 = (const std::string::value_type *)*a4;
          }
          if (v24 >= 0) {
            std::string::size_type v26 = *((unsigned __int8 *)a4 + 23);
          }
          else {
            std::string::size_type v26 = (std::string::size_type)a4[1];
          }
          char v27 = std::string::append(v23, v25, v26);
          uint64_t v28 = (void *)v27->__r_.__value_.__r.__words[0];
          unint64_t v29 = v27->__r_.__value_.__l.__size_;
          v52[0] = v27->__r_.__value_.__r.__words[2];
          *(_DWORD *)((char *)v52 + 3) = *(_DWORD *)((char *)&v27->__r_.__value_.__r.__words[2] + 3);
          int v30 = (char)v27->__r_.__value_.__s.__size_;
          v27->__r_.__value_.__l.__size_ = 0LL;
          v27->__r_.__value_.__l.__cap_ = 0LL;
          v27->__r_.__value_.__r.__words[0] = 0LL;
          __int128 v31 = *v14;
          if (v30 < 0)
          {
            sub_24054(&__dst, v28, v29);
          }

          else
          {
            *(void *)&__int128 __dst = v28;
            *((void *)&__dst + 1) = v29;
            __int128 v32 = v48;
            *(_DWORD *)unsigned int v48 = v52[0];
            *(_DWORD *)((char *)v32 + 3) = *(_DWORD *)((char *)v52 + 3);
            HIBYTE(v51) = v30;
          }

          sub_1539D4((uint64_t *)&v53, v31, v49, &__dst);
          if (SHIBYTE(v51) < 0) {
            operator delete((void *)__dst);
          }
          sub_154088(a1, a1, v53.__r_.__value_.__l.__size_, (uint64_t)&v53);
          sub_1532B4(&v53);
          if (v30 < 0) {
            operator delete(v28);
          }
        }

        else
        {
          else {
            size_t v33 = (size_t)a4[1];
          }
          sub_D0924((uint64_t)&v54, v33 + 2);
          if ((v54.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v34 = &v54;
          }
          else {
            std::string::size_type v34 = (std::string *)v54.__r_.__value_.__r.__words[0];
          }
          if (v33)
          {
            else {
              uint64_t v35 = *a4;
            }
            memmove(v34, v35, v33);
          }

          strcpy((char *)v34 + v33, "- ");
          sub_151BB8(&v53, (const __CFString *)*v12);
          if ((v53.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v36 = &v53;
          }
          else {
            std::string::size_type v36 = (std::string *)v53.__r_.__value_.__r.__words[0];
          }
          if ((v53.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v37 = v53.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v37 = v53.__r_.__value_.__l.__size_;
          }
          std::string::append(&v54, (const std::string::value_type *)v36, v37);
          std::string::append(&v54, ": ", 2uLL);
          sub_151BB8(&v53, *v14);
          if ((v53.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            uint64_t v38 = &v53;
          }
          else {
            uint64_t v38 = (std::string *)v53.__r_.__value_.__r.__words[0];
          }
          if ((v53.__r_.__value_.__s.__size_ & 0x80u) == 0) {
            std::string::size_type v39 = v53.__r_.__value_.__s.__size_;
          }
          else {
            std::string::size_type v39 = v53.__r_.__value_.__l.__size_;
          }
          std::string::append(&v54, (const std::string::value_type *)v38, v39);
          uint64_t v40 = sub_153968((uint64_t)&v54);
          v40[1] = a1;
          uint64_t v41 = *a1;
          void *v40 = *a1;
          *(void *)(v41 + 8) = v40;
          *a1 = (uint64_t)v40;
          ++a1[2];
        }

        operator delete(v54.__r_.__value_.__l.__data_);
LABEL_72:
        ++v14;
        ++v12;
        if (!--v9) {
          return;
        }
      }
    }

    else {
      size_t v42 = (size_t)a4[1];
    }
    uint64_t v43 = &v54;
    sub_D0924((uint64_t)&v54, v42 + 22);
    if ((v54.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      uint64_t v43 = (std::string *)v54.__r_.__value_.__r.__words[0];
    }
    if (v42)
    {
      else {
        int v44 = *a4;
      }
      memmove(v43, v44, v42);
    }

    strcpy((char *)v43 + v42, "- < empty dictionary >");
    std::string::size_type v45 = sub_153968((uint64_t)&v54);
    v45[1] = a1;
    uint64_t v46 = *a1;
    *std::string::size_type v45 = *a1;
    *(void *)(v46 + 8) = v45;
    *a1 = (uint64_t)v45;
    ++a1[2];
  }

void sub_1538B8(_Unwind_Exception *a1)
{
}

void *sub_153968(uint64_t a1)
{
  uint64_t v2 = operator new(0x28uLL);
  uint64_t v3 = v2 + 2;
  *uint64_t v2 = 0LL;
  v2[1] = 0LL;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_24054(v3, *(void **)a1, *(void *)(a1 + 8));
  }

  else
  {
    *(_OWORD *)uint64_t v3 = *(_OWORD *)a1;
    v2[4] = *(void *)(a1 + 16);
  }

  return v2;
}

void sub_1539C0(_Unwind_Exception *a1)
{
}

void *sub_1539D4(uint64_t *a1, const void *a2, int a3, __int128 *a4)
{
  uint64_t v54 = (uint64_t)&v54;
  unsigned __int8 v55 = &v54;
  uint64_t v56 = 0LL;
  if (!a2)
  {
    *a1 = (uint64_t)a1;
    a1[1] = (uint64_t)a1;
    a1[2] = 0LL;
    return sub_1532B4(&v54);
  }

  CFTypeID v8 = CFGetTypeID(a2);
  if (v8 == CFDictionaryGetTypeID())
  {
    if (*((char *)a4 + 23) < 0)
    {
      sub_24054(&__dst, *(void **)a4, *((void *)a4 + 1));
    }

    else
    {
      __int128 __dst = *a4;
      uint64_t v53 = *((void *)a4 + 2);
    }

    sub_1533B4((int)a1, (CFDictionaryRef)a2);
    if (SHIBYTE(v53) < 0)
    {
      os_log_t v14 = (void *)__dst;
LABEL_96:
      operator delete(v14);
      return sub_1532B4(&v54);
    }

    return sub_1532B4(&v54);
  }

  if (v8 != CFArrayGetTypeID())
  {
    uint64_t v9 = v56;
    *a1 = (uint64_t)a1;
    a1[1] = (uint64_t)a1;
    a1[2] = 0LL;
    if (v9)
    {
      uint64_t v11 = v54;
      uint64_t v10 = v55;
      uint64_t v12 = *v55;
      *(void *)(v12 + 8) = *(void *)(v54 + 8);
      **(void **)(v11 + 8) = v12;
      uint64_t v13 = *a1;
      *(void *)(v13 + 8) = v10;
      uint64_t *v10 = v13;
      *a1 = v11;
      *(void *)(v11 + 8) = a1;
      a1[2] = v9;
      uint64_t v56 = 0LL;
    }

    return sub_1532B4(&v54);
  }

  if (*((char *)a4 + 23) < 0)
  {
    sub_24054(v50, *(void **)a4, *((void *)a4 + 1));
  }

  else
  {
    *(_OWORD *)uint64_t v50 = *a4;
    uint64_t v51 = *((void *)a4 + 2);
  }

  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0LL;
  CFIndex Count = CFArrayGetCount((CFArrayRef)a2);
  if (Count >= 1)
  {
    CFIndex v16 = 0LL;
    while (1)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)a2, v16);
      uint32_t v18 = ValueAtIndex;
      if (a3 < 2 || (CFTypeID v19 = CFGetTypeID(ValueAtIndex), CFArrayGetTypeID() != v19) && CFDictionaryGetTypeID() != v19)
      {
        if (v51 >= 0) {
          size_t v37 = HIBYTE(v51);
        }
        else {
          size_t v37 = (size_t)v50[1];
        }
        sub_D0924((uint64_t)&v63, v37 + 2);
        if ((v63.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v38 = &v63;
        }
        else {
          uint64_t v38 = (std::string *)v63.__r_.__value_.__r.__words[0];
        }
        if (v37)
        {
          if (v51 >= 0) {
            std::string::size_type v39 = v50;
          }
          else {
            std::string::size_type v39 = (void **)v50[0];
          }
          memmove(v38, v39, v37);
        }

        strcpy((char *)v38 + v37, "- ");
        sub_151BB8(&v62, v18);
        if ((v62.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          uint64_t v40 = &v62;
        }
        else {
          uint64_t v40 = (std::string *)v62.__r_.__value_.__r.__words[0];
        }
        if ((v62.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type size = v62.__r_.__value_.__s.__size_;
        }
        else {
          std::string::size_type size = v62.__r_.__value_.__l.__size_;
        }
        std::string::append(&v63, (const std::string::value_type *)v40, size);
        size_t v42 = sub_153968((uint64_t)&v63);
        v42[1] = a1;
        uint64_t v43 = *a1;
        *size_t v42 = *a1;
        *(void *)(v43 + 8) = v42;
        *a1 = (uint64_t)v42;
        ++a1[2];
        goto LABEL_78;
      }

      if (v51 >= 0) {
        size_t v20 = HIBYTE(v51);
      }
      else {
        size_t v20 = (size_t)v50[1];
      }
      sub_D0924((uint64_t)&v61, v20 + 7);
      if ((v61.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v21 = &v61;
      }
      else {
        uint64_t v21 = (std::string *)v61.__r_.__value_.__r.__words[0];
      }
      if (v20)
      {
        if (v51 >= 0) {
          uint64_t v22 = v50;
        }
        else {
          uint64_t v22 = (void **)v50[0];
        }
        memmove(v21, v22, v20);
      }

      strcpy((char *)v21 + v20, "- item ");
      std::to_string(&v60, v16);
      if ((v60.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        uint64_t v23 = &v60;
      }
      else {
        uint64_t v23 = (std::string *)v60.__r_.__value_.__r.__words[0];
      }
      if ((v60.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        std::string::size_type v24 = v60.__r_.__value_.__s.__size_;
      }
      else {
        std::string::size_type v24 = v60.__r_.__value_.__l.__size_;
      }
      size_t v25 = std::string::append(&v61, (const std::string::value_type *)v23, v24);
      __int128 v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v62.__r_.__value_.__l.__cap_ = v25->__r_.__value_.__l.__cap_;
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0LL;
      v25->__r_.__value_.__l.__cap_ = 0LL;
      v25->__r_.__value_.__r.__words[0] = 0LL;
      char v27 = std::string::append(&v62, ":", 1uLL);
      std::string v63 = *v27;
      v27->__r_.__value_.__l.__size_ = 0LL;
      v27->__r_.__value_.__l.__cap_ = 0LL;
      v27->__r_.__value_.__r.__words[0] = 0LL;
      uint64_t v28 = sub_153968((uint64_t)&v63);
      v28[1] = a1;
      uint64_t v29 = *a1;
      *uint64_t v28 = *a1;
      *(void *)(v29 + 8) = v28;
      *a1 = (uint64_t)v28;
      ++a1[2];
      int v30 = (std::string *)sub_7D084(&v62, "  ");
      if (v51 >= 0) {
        __int128 v31 = v50;
      }
      else {
        __int128 v31 = (void **)v50[0];
      }
      if (v51 >= 0) {
        std::string::size_type v32 = HIBYTE(v51);
      }
      else {
        std::string::size_type v32 = (std::string::size_type)v50[1];
      }
      size_t v33 = std::string::append(v30, (const std::string::value_type *)v31, v32);
      uint64_t v35 = (void *)v33->__r_.__value_.__r.__words[0];
      std::string::size_type v34 = (void *)v33->__r_.__value_.__l.__size_;
      LODWORD(v61.__r_.__value_.__l.__data_) = v33->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v61.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v33->__r_.__value_.__r.__words[2] + 3);
      int v36 = (char)v33->__r_.__value_.__s.__size_;
      v33->__r_.__value_.__l.__size_ = 0LL;
      v33->__r_.__value_.__l.__cap_ = 0LL;
      v33->__r_.__value_.__r.__words[0] = 0LL;
      if ((char)v62.__r_.__value_.__s.__size_ < 0)
      {
        operator delete(v62.__r_.__value_.__l.__data_);
        if (v36 < 0)
        {
LABEL_73:
          sub_24054(__p, v35, (unint64_t)v34);
          goto LABEL_74;
        }
      }

      else if (v36 < 0)
      {
        goto LABEL_73;
      }

      __p[0] = v35;
      __p[1] = v34;
      *(_DWORD *)std::string v58 = v61.__r_.__value_.__l.__data_;
      *(_DWORD *)&v58[3] = *(_DWORD *)((char *)v61.__r_.__value_.__r.__words + 3);
      char v59 = v36;
LABEL_74:
      sub_1539D4(&v62, v18, (a3 - 1), __p);
      if (v59 < 0) {
        operator delete(__p[0]);
      }
      sub_154088(a1, a1, v62.__r_.__value_.__l.__size_, (uint64_t)&v62);
      sub_1532B4(&v62);
      if (v36 < 0) {
        operator delete(v35);
      }
LABEL_78:
      if (Count == ++v16) {
        goto LABEL_94;
      }
    }
  }

  if (v51 >= 0) {
    size_t v44 = HIBYTE(v51);
  }
  else {
    size_t v44 = (size_t)v50[1];
  }
  std::string::size_type v45 = &v63;
  sub_D0924((uint64_t)&v63, v44 + 17);
  if ((v63.__r_.__value_.__s.__size_ & 0x80u) != 0) {
    std::string::size_type v45 = (std::string *)v63.__r_.__value_.__r.__words[0];
  }
  if (v44)
  {
    if (v51 >= 0) {
      uint64_t v46 = v50;
    }
    else {
      uint64_t v46 = (void **)v50[0];
    }
    memmove(v45, v46, v44);
  }

  strcpy((char *)v45 + v44, "- < empty array >");
  uint64_t v47 = sub_153968((uint64_t)&v63);
  v47[1] = a1;
  uint64_t v48 = *a1;
  *uint64_t v47 = *a1;
  *(void *)(v48 + 8) = v47;
  *a1 = (uint64_t)v47;
  ++a1[2];
LABEL_94:
  if (SHIBYTE(v51) < 0)
  {
    os_log_t v14 = v50[0];
    goto LABEL_96;
  }

  return sub_1532B4(&v54);
}

void sub_153F70( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20, __int16 a21, char a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, void *a34, uint64_t a35, int a36, __int16 a37, char a38, char a39, uint64_t a40, uint64_t a41, int a42, __int16 a43, char a44, char a45)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_1532B4(&a25);
  _Unwind_Resume(a1);
}

void *sub_154088(void *result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    size_t v7 = result;
    uint64_t result = sub_154174(0LL, a3 + 16);
    CFTypeID v8 = result;
    uint64_t v9 = *(void *)(a3 + 8);
    uint64_t v10 = 1LL;
    if (v9 != a4)
    {
      uint64_t v11 = (uint64_t)result;
      do
      {
        uint64_t result = sub_154174(v11, v9 + 16);
        *(void *)(v11 + 8) = result;
        ++v10;
        uint64_t v9 = *(void *)(v9 + 8);
        uint64_t v11 = (uint64_t)result;
      }

      while (v9 != a4);
    }

    uint64_t v12 = *a2;
    *(void *)(v12 + 8) = v8;
    void *v8 = v12;
    *a2 = (uint64_t)result;
    result[1] = a2;
    v7[2] += v10;
  }

  return result;
}

void sub_154140(void *a1)
{
  do
  {
    uint64_t v2 = (void **)*v1;
    sub_153310(v1);
    uint64_t v1 = v2;
  }

  while (v2);
  __cxa_rethrow();
}

void sub_154160(_Unwind_Exception *a1)
{
}

void *sub_154174(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = operator new(0x28uLL);
  void *v4 = a1;
  v4[1] = 0LL;
  char v5 = v4 + 2;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_24054(v5, *(void **)a2, *(void *)(a2 + 8));
  }

  else
  {
    *(_OWORD *)char v5 = *(_OWORD *)a2;
    v4[4] = *(void *)(a2 + 16);
  }

  return v4;
}

void sub_1541D4(_Unwind_Exception *a1)
{
}

void sub_1541E8(uint64_t a1, CFArrayRef *a2)
{
  if (*a2) {
    unsigned int Count = CFArrayGetCount(*a2);
  }
  else {
    unsigned int Count = 0;
  }
  *(void *)a1 = 0LL;
  *(void *)(a1 + 8) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  sub_14A1F0((void **)a1, Count);
  if (Count)
  {
    for (unsigned int i = 0; i != Count; ++i)
    {
      if (!sub_1A0E0C(a2, i, &v20))
      {
        std::string::size_type v17 = (os_log_t *)sub_138E8(13);
        uint32_t v18 = *v17;
        if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          uint64_t v22 = "StandardUtilities.cpp";
          __int16 v23 = 1024;
          int v24 = 682;
          __int16 v25 = 1024;
          unsigned int v26 = i;
          _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): GetUInt32 failed for index %u of input CACFArray",  buf,  0x18u);
        }

        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "GetUInt32 failed for index %u of input CACFArray");
      }

      size_t v7 = *(_DWORD **)(a1 + 8);
      unint64_t v6 = *(void *)(a1 + 16);
      if ((unint64_t)v7 >= v6)
      {
        uint64_t v9 = *(_DWORD **)a1;
        uint64_t v10 = ((uint64_t)v7 - *(void *)a1) >> 2;
        unint64_t v11 = v10 + 1;
        uint64_t v12 = v6 - (void)v9;
        if (v12 >> 1 > v11) {
          unint64_t v11 = v12 >> 1;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13) {
          unint64_t v13 = (unint64_t)sub_7A890(v13);
        }
        else {
          uint64_t v14 = 0LL;
        }
        CFTypeID v15 = (_DWORD *)(v13 + 4 * v10);
        *CFTypeID v15 = v20;
        CFTypeID v8 = v15 + 1;
        while (v7 != v9)
        {
          int v16 = *--v7;
          *--CFTypeID v15 = v16;
        }

        *(void *)a1 = v15;
        *(void *)(a1 + 8) = v8;
        *(void *)(a1 + 16) = v13 + 4 * v14;
        if (v9) {
          operator delete(v9);
        }
      }

      else
      {
        _DWORD *v7 = v20;
        CFTypeID v8 = v7 + 1;
      }

      *(void *)(a1 + 8) = v8;
    }
  }

void sub_154404(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(exception_object);
}

void sub_15443C(uint64_t *a1, std::string *__str, char *a3)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  int64_t size = __str->__r_.__value_.__s.__size_;
  if ((size & 0x80u) == 0LL) {
    size_t v7 = __str;
  }
  else {
    size_t v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  int v8 = a3[23];
  if (v8 >= 0) {
    uint64_t v9 = a3;
  }
  else {
    uint64_t v9 = *(char **)a3;
  }
  if (v8 >= 0) {
    int64_t v10 = a3[23];
  }
  else {
    int64_t v10 = *((void *)a3 + 1);
  }
  if (v10)
  {
    if ((size & 0x80u) != 0LL) {
      int64_t size = __str->__r_.__value_.__l.__size_;
    }
    if (size >= v10)
    {
      uint64_t v43 = (char *)v7 + size;
      int v44 = *v9;
      std::string::size_type v45 = v7;
      do
      {
        int64_t v46 = size - v10;
        if (v46 == -1) {
          break;
        }
        uint64_t v47 = (char *)memchr(v45, v44, v46 + 1);
        if (!v47) {
          break;
        }
        uint64_t v48 = v47;
        if (!memcmp(v47, v9, v10))
        {
          std::string::size_type v11 = 0LL;
          if (v48 != v43)
          {
            int64_t v17 = v48 - (char *)v7;
            if (v17 != -1) {
              goto LABEL_21;
            }
          }

          goto LABEL_15;
        }

        std::string::size_type v45 = (std::string *)(v48 + 1);
        int64_t size = v43 - (v48 + 1);
      }

      while (size >= v10);
    }

    std::string::size_type v11 = 0LL;
  }

  else
  {
    int64_t v17 = 0LL;
LABEL_21:
    std::string::size_type v11 = 0LL;
    uint32_t v18 = a1 + 2;
    do
    {
      std::string::basic_string(&v59, __str, v11, v17 - v11, (std::allocator<char> *)&v60);
      unint64_t v20 = a1[1];
      unint64_t v19 = a1[2];
      if (v20 >= v19)
      {
        unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *a1) >> 3);
        unint64_t v23 = v22 + 1;
        if (v22 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_7A87C();
        }
        unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *a1) >> 3);
        if (2 * v24 > v23) {
          unint64_t v23 = 2 * v24;
        }
        if (v24 >= 0x555555555555555LL) {
          unint64_t v25 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v25 = v23;
        }
        uint64_t v64 = v18;
        if (v25) {
          unint64_t v25 = (unint64_t)sub_8D44C(v25);
        }
        else {
          uint64_t v26 = 0LL;
        }
        unint64_t v27 = v25 + 24 * v22;
        unint64_t v60 = v25;
        unint64_t v61 = v27;
        unint64_t v63 = v25 + 24 * v26;
        __int128 v28 = *(_OWORD *)&v59.__r_.__value_.__l.__data_;
        *(void *)(v27 + 16) = v59.__r_.__value_.__l.__cap_;
        *(_OWORD *)unint64_t v27 = v28;
        memset(&v59, 0, sizeof(v59));
        unint64_t v62 = v27 + 24;
        sub_4802C(a1, &v60);
        uint64_t v29 = a1[1];
        sub_480A0((uint64_t)&v60);
        int v30 = (char)v59.__r_.__value_.__s.__size_;
        a1[1] = v29;
        if (v30 < 0) {
          operator delete(v59.__r_.__value_.__l.__data_);
        }
      }

      else
      {
        __int128 v21 = *(_OWORD *)&v59.__r_.__value_.__l.__data_;
        *(void *)(v20 + 16) = v59.__r_.__value_.__l.__cap_;
        *(_OWORD *)unint64_t v20 = v21;
        a1[1] = v20 + 24;
      }

      int v31 = a3[23];
      std::string::size_type v32 = __str->__r_.__value_.__s.__size_;
      if ((v32 & 0x80u) == 0LL) {
        size_t v33 = __str;
      }
      else {
        size_t v33 = (std::string *)__str->__r_.__value_.__r.__words[0];
      }
      if ((v32 & 0x80u) != 0LL) {
        std::string::size_type v32 = __str->__r_.__value_.__l.__size_;
      }
      int64_t v34 = v31 >= 0 ? a3[23] : *((void *)a3 + 1);
      std::string::size_type v11 = v34 + v17;
      uint64_t v35 = v31 >= 0 ? a3 : *(char **)a3;
      if (v32 < v11) {
        break;
      }
      v17 += v34;
      if (v34)
      {
        int v36 = (char *)v33 + v11;
        size_t v37 = (char *)v33 + v32;
        int64_t v38 = v32 - v11;
        if (v38 >= v34)
        {
          int v39 = *v35;
          while (1)
          {
            int64_t v40 = v38 - v34;
            if (v40 == -1) {
              break;
            }
            uint64_t v41 = (char *)memchr(v36, v39, v40 + 1);
            if (!v41) {
              break;
            }
            size_t v42 = v41;
            if (!memcmp(v41, v35, v34))
            {
              if (v42 == v37) {
                goto LABEL_15;
              }
              int64_t v17 = v42 - (char *)v33;
              uint32_t v18 = a1 + 2;
              goto LABEL_57;
            }

            int v36 = v42 + 1;
            int64_t v38 = v37 - (v42 + 1);
            if (v38 < v34) {
              goto LABEL_15;
            }
          }
        }

        break;
      }

void sub_154880( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_8CD60((void ***)&__p);
  _Unwind_Resume(a1);
}

void *sub_1548D4(void *a1, uint64_t a2)
{
  if ((_DWORD)a2) {
    return (void *)sub_2CA1C(a1, a2);
  }
  else {
    return sub_7D084(a1, "ok");
  }
}

std::string *sub_1548E8(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::reserve(a1, 0x60uLL);
  std::to_string(&v58, *(_DWORD *)(a2 + 32));
  uint64_t v4 = std::string::insert(&v58, 0LL, "[ ", 2uLL);
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__l.__cap_ = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  unint64_t v6 = std::string::append(&v59, "/", 1uLL);
  __int128 v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v60.__r_.__value_.__l.__cap_ = v6->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0LL;
  v6->__r_.__value_.__l.__cap_ = 0LL;
  v6->__r_.__value_.__r.__words[0] = 0LL;
  std::to_string(&v57, *(double *)a2);
  if ((v57.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v8 = &v57;
  }
  else {
    int v8 = (std::string *)v57.__r_.__value_.__r.__words[0];
  }
  if ((v57.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type size = v57.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type size = v57.__r_.__value_.__l.__size_;
  }
  int64_t v10 = std::string::append(&v60, (const std::string::value_type *)v8, size);
  __int128 v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v64.__r_.__value_.__l.__cap_ = v10->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0LL;
  v10->__r_.__value_.__l.__cap_ = 0LL;
  v10->__r_.__value_.__r.__words[0] = 0LL;
  std::string::size_type v12 = std::string::append(&v64, "/", 1uLL);
  __int128 v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__l.__cap_ = v12->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0LL;
  v12->__r_.__value_.__l.__cap_ = 0LL;
  v12->__r_.__value_.__r.__words[0] = 0LL;
  std::to_string(&v56, *(_DWORD *)(a2 + 28));
  if ((v56.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    unint64_t v14 = &v56;
  }
  else {
    unint64_t v14 = (std::string *)v56.__r_.__value_.__r.__words[0];
  }
  if ((v56.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    std::string::size_type v15 = v56.__r_.__value_.__s.__size_;
  }
  else {
    std::string::size_type v15 = v56.__r_.__value_.__l.__size_;
  }
  __int128 v16 = std::string::append(&v61, (const std::string::value_type *)v14, v15);
  __int128 v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  int64_t cap = v16->__r_.__value_.__l.__cap_;
  __int128 v62 = v17;
  v16->__r_.__value_.__l.__size_ = 0LL;
  v16->__r_.__value_.__l.__cap_ = 0LL;
  v16->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint32_t v18 = (const std::string::value_type *)&v62;
  }
  else {
    uint32_t v18 = (const std::string::value_type *)v62;
  }
  if (cap >= 0) {
    std::string::size_type v19 = HIBYTE(cap);
  }
  else {
    std::string::size_type v19 = *((void *)&v62 + 1);
  }
  std::string::append(a1, v18, v19);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v62);
  }
  double v20 = *(double *)(a2 + 40);
  double v21 = *(double *)(a2 + 48);
  if (*(double *)a2 != v21 || v21 != v20)
  {
    std::to_string(&v59, v20);
    unint64_t v22 = std::string::insert(&v59, 0LL, " (", 2uLL);
    __int128 v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__l.__cap_ = v22->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0LL;
    v22->__r_.__value_.__l.__cap_ = 0LL;
    v22->__r_.__value_.__r.__words[0] = 0LL;
    unint64_t v24 = std::string::append(&v60, "-", 1uLL);
    __int128 v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v64.__r_.__value_.__l.__cap_ = v24->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0LL;
    v24->__r_.__value_.__l.__cap_ = 0LL;
    v24->__r_.__value_.__r.__words[0] = 0LL;
    std::to_string(&v58, *(double *)(a2 + 48));
    if ((v58.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v26 = &v58;
    }
    else {
      uint64_t v26 = (std::string *)v58.__r_.__value_.__r.__words[0];
    }
    if ((v58.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v27 = v58.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v27 = v58.__r_.__value_.__l.__size_;
    }
    __int128 v28 = std::string::append(&v64, (const std::string::value_type *)v26, v27);
    __int128 v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__l.__cap_ = v28->__r_.__value_.__l.__cap_;
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0LL;
    v28->__r_.__value_.__l.__cap_ = 0LL;
    v28->__r_.__value_.__r.__words[0] = 0LL;
    int v30 = std::string::append(&v61, ")", 1uLL);
    __int128 v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    int64_t cap = v30->__r_.__value_.__l.__cap_;
    __int128 v62 = v31;
    v30->__r_.__value_.__l.__size_ = 0LL;
    v30->__r_.__value_.__l.__cap_ = 0LL;
    v30->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      std::string::size_type v32 = (const std::string::value_type *)&v62;
    }
    else {
      std::string::size_type v32 = (const std::string::value_type *)v62;
    }
    if (cap >= 0) {
      std::string::size_type v33 = HIBYTE(cap);
    }
    else {
      std::string::size_type v33 = *((void *)&v62 + 1);
    }
    std::string::append(a1, v32, v33);
    if (SHIBYTE(cap) < 0) {
      operator delete((void *)v62);
    }
  }

  uint64_t v34 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v34 != 1819304813)
  {
    sub_2CA1C(&v61, v34);
    uint64_t v35 = std::string::insert(&v61, 0LL, "; fmt: ", 7uLL);
    __int128 v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    int64_t cap = v35->__r_.__value_.__l.__cap_;
    __int128 v62 = v36;
    v35->__r_.__value_.__l.__size_ = 0LL;
    v35->__r_.__value_.__l.__cap_ = 0LL;
    v35->__r_.__value_.__r.__words[0] = 0LL;
    if (cap >= 0) {
      size_t v37 = (const std::string::value_type *)&v62;
    }
    else {
      size_t v37 = (const std::string::value_type *)v62;
    }
    if (cap >= 0) {
      std::string::size_type v38 = HIBYTE(cap);
    }
    else {
      std::string::size_type v38 = *((void *)&v62 + 1);
    }
    std::string::append(a1, v37, v38);
    if (SHIBYTE(cap) < 0) {
      operator delete((void *)v62);
    }
  }

  snprintf((char *)&v64, 0x13uLL, "%p", (const void *)*(unsigned int *)(a2 + 12));
  sub_7D084(&v61, (char *)&v64);
  int v39 = std::string::insert(&v61, 0LL, "; flags: ", 9uLL);
  __int128 v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  int64_t cap = v39->__r_.__value_.__l.__cap_;
  __int128 v62 = v40;
  v39->__r_.__value_.__l.__size_ = 0LL;
  v39->__r_.__value_.__l.__cap_ = 0LL;
  v39->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v41 = (const std::string::value_type *)&v62;
  }
  else {
    uint64_t v41 = (const std::string::value_type *)v62;
  }
  if (cap >= 0) {
    std::string::size_type v42 = HIBYTE(cap);
  }
  else {
    std::string::size_type v42 = *((void *)&v62 + 1);
  }
  std::string::append(a1, v41, v42);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v62);
  }
  std::to_string(&v61, *(_DWORD *)(a2 + 16));
  uint64_t v43 = std::string::insert(&v61, 0LL, "; bpp: ", 7uLL);
  __int128 v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  int64_t cap = v43->__r_.__value_.__l.__cap_;
  __int128 v62 = v44;
  v43->__r_.__value_.__l.__size_ = 0LL;
  v43->__r_.__value_.__l.__cap_ = 0LL;
  v43->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    std::string::size_type v45 = (const std::string::value_type *)&v62;
  }
  else {
    std::string::size_type v45 = (const std::string::value_type *)v62;
  }
  if (cap >= 0) {
    std::string::size_type v46 = HIBYTE(cap);
  }
  else {
    std::string::size_type v46 = *((void *)&v62 + 1);
  }
  std::string::append(a1, v45, v46);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v62);
  }
  std::to_string(&v61, *(_DWORD *)(a2 + 20));
  uint64_t v47 = std::string::insert(&v61, 0LL, "; fpp: ", 7uLL);
  __int128 v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
  int64_t cap = v47->__r_.__value_.__l.__cap_;
  __int128 v62 = v48;
  v47->__r_.__value_.__l.__size_ = 0LL;
  v47->__r_.__value_.__l.__cap_ = 0LL;
  v47->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    unint64_t v49 = (const std::string::value_type *)&v62;
  }
  else {
    unint64_t v49 = (const std::string::value_type *)v62;
  }
  if (cap >= 0) {
    std::string::size_type v50 = HIBYTE(cap);
  }
  else {
    std::string::size_type v50 = *((void *)&v62 + 1);
  }
  std::string::append(a1, v49, v50);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v62);
  }
  std::to_string(&v61, *(_DWORD *)(a2 + 24));
  unint64_t v51 = std::string::insert(&v61, 0LL, "; Bpf: ", 7uLL);
  __int128 v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
  int64_t cap = v51->__r_.__value_.__l.__cap_;
  __int128 v62 = v52;
  v51->__r_.__value_.__l.__size_ = 0LL;
  v51->__r_.__value_.__l.__cap_ = 0LL;
  v51->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v53 = (const std::string::value_type *)&v62;
  }
  else {
    uint64_t v53 = (const std::string::value_type *)v62;
  }
  if (cap >= 0) {
    std::string::size_type v54 = HIBYTE(cap);
  }
  else {
    std::string::size_type v54 = *((void *)&v62 + 1);
  }
  std::string::append(a1, v53, v54);
  if (SHIBYTE(cap) < 0) {
    operator delete((void *)v62);
  }
  return std::string::append(a1, " ]", 2uLL);
}

void sub_154F68( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21, void *a22, uint64_t a23, int a24, __int16 a25, char a26, char a27, void *a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, uint64_t a34, void *a35, uint64_t a36, int a37, __int16 a38, char a39, char a40, uint64_t a41, void *__p, uint64_t a43, int a44, __int16 a45, char a46, char a47)
{
  if (a47 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_155138(void *a1, unsigned int *a2)
{
  int v3 = *(_DWORD *)((char *)v26 + *(void *)(v25 - 24));
  sub_826EC(&v25, (uint64_t)"[", 1LL);
  *(_DWORD *)((char *)v26 + *(void *)(v25 - 24)) |= v3 | 8;
  sub_826EC(&v25, (uint64_t)"tag: ", 5LL);
  uint64_t v4 = (void *)std::ostream::operator<<(&v25, *a2);
  sub_826EC(v4, (uint64_t)"; ", 2LL);
  sub_826EC(&v25, (uint64_t)"bitmap: ", 8LL);
  __int128 v5 = (void *)std::ostream::operator<<(&v25, a2[1]);
  sub_826EC(v5, (uint64_t)"; ", 2LL);
  *(_DWORD *)((char *)v26 + *(void *)(v25 - 24)) |= v3;
  sub_826EC(&v25, (uint64_t)"descs: [", 8LL);
  if (a2[2])
  {
    unint64_t v6 = 0LL;
    int v8 = (float *)(a2 + 7);
    do
    {
      sub_82600((uint64_t)&v29);
      int v9 = *(_DWORD *)((char *)v30 + *(void *)(v29 - 24));
      sub_826EC(&v29, (uint64_t)"[", 1LL);
      sub_826EC(&v29, (uint64_t)"label: ", 7LL);
      int64_t v10 = (void *)std::ostream::operator<<(&v29, *((unsigned int *)v8 - 4));
      sub_826EC(v10, (uint64_t)"; ", 2LL);
      *(_DWORD *)((char *)v30 + *(void *)(v29 - 24)) |= v9 | 8;
      sub_826EC(&v29, (uint64_t)"flags: ", 7LL);
      __int128 v11 = (void *)std::ostream::operator<<(&v29, *((unsigned int *)v8 - 3));
      sub_826EC(v11, (uint64_t)"; ", 2LL);
      *(_DWORD *)((char *)v30 + *(void *)(v29 - 24)) |= v9;
      sub_826EC(&v29, (uint64_t)"coords: (", 9LL);
      std::string::size_type v12 = (void *)std::ostream::operator<<(&v29, *(v8 - 2));
      __int128 v13 = sub_826EC(v12, (uint64_t)",", 1LL);
      unint64_t v14 = (void *)std::ostream::operator<<(v13, *(v8 - 1));
      std::string::size_type v15 = sub_826EC(v14, (uint64_t)",", 1LL);
      __int128 v16 = (void *)std::ostream::operator<<(v15, *v8);
      sub_826EC(v16, (uint64_t)")", 1LL);
      sub_826EC(&v29, (uint64_t)"]", 1LL);
      sub_82924(v23, (uint64_t)v30);
      uint64_t v29 = v7;
      *(void *)((char *)&v30[-1] + *(void *)(v7 - sub_32C8C(*(void **)(v1 + 24)) = v22;
      if (v31 < 0) {
        operator delete((void *)v30[8]);
      }
      std::streambuf::~streambuf(v30);
      std::ios::~ios(&v32);
      if ((v24 & 0x80u) == 0) {
        __int128 v17 = v23;
      }
      else {
        __int128 v17 = (void **)v23[0];
      }
      if ((v24 & 0x80u) == 0) {
        uint64_t v18 = v24;
      }
      else {
        uint64_t v18 = (uint64_t)v23[1];
      }
      sub_826EC(&v25, (uint64_t)v17, v18);
      unsigned int v19 = a2[2];
      if (v6 != v19 - 1)
      {
        sub_826EC(&v25, (uint64_t)"; ", 2LL);
        unsigned int v19 = a2[2];
      }

      ++v6;
      v8 += 5;
    }

    while (v6 < v19);
  }

  sub_826EC(&v25, (uint64_t)"]; ", 3LL);
  sub_826EC(&v25, (uint64_t)"]", 1LL);
  sub_82924(a1, (uint64_t)v26);
  if (v27 < 0) {
    operator delete((void *)v26[8]);
  }
  std::streambuf::~streambuf(v26);
  return std::ios::~ios(&v28);
}

void sub_155518( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, char a50)
{
}

void sub_155560(void *a1, uint64_t a2)
{
  *a1 = 0LL;
  sub_D0720(&v4, a2);
  CFDataRef v3 = v4;
  sub_155850(v5, v4);
  *a1 = v5[0];
  v5[0] = 0LL;
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1555EC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_7A0E8(a1);
}

void *sub_155850(void *a1, const __CFData *a2)
{
  if (!a2) {
    goto LABEL_8;
  }
  CFPropertyListRef v3 = CFPropertyListCreateWithData(0LL, a2, 0LL, 0LL, 0LL);
  if (v3)
  {
    CFDataRef v4 = v3;
    CFTypeID v5 = CFGetTypeID(v3);
    if (v5 == CFDictionaryGetTypeID()) {
      return sub_3617C(a1, v4);
    }
    CFRelease(v4);
LABEL_8:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_7E414(exception);
  }

  uint64_t result = (void *)CFDictionaryGetTypeID();
  if (result) {
    goto LABEL_8;
  }
  *a1 = 0LL;
  return result;
}

void sub_155904(_Unwind_Exception *a1)
{
}

uint64_t sub_155918(uint64_t a1, int a2, AudioObjectID inObjectID, uint64_t a4)
{
  *(_BYTE *)a1 = a2;
  *(_DWORD *)(a1 + 4) = inObjectID;
  if (a2) {
    int v6 = 1869968496;
  }
  else {
    int v6 = 1768845428;
  }
  int v28 = 1937077093;
  int v29 = v6;
  *(void *)outDataSize = 0LL;
  OSStatus PropertyDataSize = AudioObjectGetPropertyDataSize( inObjectID,  (const AudioObjectPropertyAddress *)&v28,  0,  0LL,  &outDataSize[1]);
  if (PropertyDataSize)
  {
    unint64_t v14 = (os_log_t *)sub_138E8(13);
    std::string::size_type v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v32 = "StandardUtilities.cpp";
      __int16 v33 = 1024;
      int v34 = 1057;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (result) [error result is an error]: Attempt to get stream usage data size failed.",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = PropertyDataSize;
  }

  uint64_t v8 = outDataSize[1];
  if (!outDataSize[1])
  {
    __int128 v17 = (os_log_t *)sub_138E8(13);
    uint64_t v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v32 = "StandardUtilities.cpp";
      __int16 v33 = 1024;
      int v34 = 1058;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): The HAL returned a stream usage size of 0.",  buf,  0x12u);
    }

    unsigned int v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v19, "The HAL returned a stream usage size of 0.");
  }

  *(_DWORD *)(a1 + 8) = outDataSize[1];
  AudioObjectID v9 = *(_DWORD *)(a1 + 4);
  outDataSize[1] = v8;
  int64_t v10 = malloc(16 * v8);
  if (!v10)
  {
    double v20 = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    double v21 = std::bad_alloc::bad_alloc(v20);
  }

  __int128 v11 = v10;
  void *v10 = a4;
  int v28 = 1937077093;
  int v29 = v6;
  outDataSize[0] = 0;
  OSStatus PropertyData = AudioObjectGetPropertyData(v9, (const AudioObjectPropertyAddress *)&v28, 0, 0LL, &outDataSize[1], v10);
  if (PropertyData)
  {
    uint64_t v22 = (os_log_t *)sub_138E8(13);
    __int128 v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v32 = "StandardUtilities.cpp";
      __int16 v33 = 1024;
      int v34 = 1071;
      _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (result) [error result is an error]: Attempt to get stream usage failed.",  buf,  0x12u);
    }

    unsigned __int8 v24 = __cxa_allocate_exception(0x10uLL);
    *(void *)unsigned __int8 v24 = &off_4865A0;
    void v24[2] = PropertyData;
  }

  if (outDataSize[1] != (_DWORD)v8)
  {
    uint64_t v25 = (os_log_t *)sub_138E8(13);
    uint64_t v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v32 = "StandardUtilities.cpp";
      __int16 v33 = 1024;
      int v34 = 1072;
      _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): The HAL returned a different stream usage size than that provided.",  buf,  0x12u);
    }

    char v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v27, "The HAL returned a different stream usage size than that provided.");
  }

  *(void *)(a1 + 16) = v11;
  return a1;
}

void sub_155CD8(_Unwind_Exception *a1)
{
}

uint64_t sub_155D1C(uint64_t a1)
{
  if (*(_BYTE *)a1) {
    AudioObjectPropertyScope v1 = 1869968496;
  }
  else {
    AudioObjectPropertyScope v1 = 1768845428;
  }
  inAddress.mSelector = 1937077093;
  inAddress.mScope = v1;
  inAddress.mElement = 0;
  uint64_t v2 = AudioObjectSetPropertyData( *(_DWORD *)(a1 + 4),  &inAddress,  0,  0LL,  *(_DWORD *)(a1 + 8),  *(const void **)(a1 + 16));
  if ((_DWORD)v2)
  {
    CFPropertyListRef v3 = (os_log_t *)sub_138E8(13);
    CFDataRef v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(__p, v2);
        if (v8 >= 0) {
          CFTypeID v5 = __p;
        }
        else {
          CFTypeID v5 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315906;
        __int128 v11 = "StandardUtilities.cpp";
        __int16 v12 = 1024;
        int v13 = 1096;
        __int16 v14 = 2080;
        std::string::size_type v15 = v5;
        __int16 v16 = 1024;
        int v17 = v2;
        _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d AudioObjectSetPropertyData(kAudioDevicePropertyIOProcStreamUsage) returned '%s' (%d).",  buf,  0x22u);
        if (v8 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }

  return v2;
}

uint64_t sub_155E78(void *a1, uint64_t a2)
{
  CFDataRef v4 = (void *)std::ostream::operator<<(&v8, *(unsigned int *)(*(void *)(a2 + 16) + 8LL));
  sub_826EC(v4, (uint64_t)"; ", 2LL);
  sub_826EC(&v8, (uint64_t)"mStreamIsOn: [", 14LL);
  uint64_t v5 = *(void *)(a2 + 16);
  if (*(_DWORD *)(v5 + 8))
  {
    unint64_t v6 = 0LL;
    do
    {
      std::ostream::operator<<(&v8, *(unsigned int *)(v5 + 4 * v6++ + 12));
      uint64_t v5 = *(void *)(a2 + 16);
    }

    while (v6 < *(unsigned int *)(v5 + 8));
  }

  sub_826EC(&v8, (uint64_t)"]", 1LL);
  sub_82924(a1, (uint64_t)v9);
  if (v10 < 0) {
    operator delete((void *)v9[8]);
  }
  std::streambuf::~streambuf(v9);
  return std::ios::~ios(&v11);
}

void sub_155FB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

BOOL sub_155FC8(io_registry_entry_t a1, char *a2)
{
  if ((v19 & 0x80u) == 0) {
    CFPropertyListRef v3 = __p;
  }
  else {
    CFPropertyListRef v3 = *(const UInt8 **)__p;
  }
  if (v3)
  {
    if ((v19 & 0x80u) == 0) {
      CFIndex v4 = v19;
    }
    else {
      CFIndex v4 = *(void *)&__p[8];
    }
    uint64_t v5 = (const __CFData *)CFStringCreateWithBytes(0LL, v3, v4, 0x8000100u, 0);
    CFDataRef theData = v5;
    if (!v5)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }

    if (a1) {
      goto LABEL_10;
    }
  }

  else
  {
    uint64_t v5 = 0LL;
    CFDataRef theData = 0LL;
    if (a1)
    {
LABEL_10:
      CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(a1, (CFStringRef)v5, 0LL, 0);
      goto LABEL_13;
    }
  }

  CFTypeRef CFProperty = 0LL;
LABEL_13:
  CFTypeRef v16 = CFProperty;
  if (v5) {
    CFRelease(v5);
  }
  if ((char)v19 < 0)
  {
    operator delete(*(void **)__p);
    if (CFProperty) {
      goto LABEL_17;
    }
    return 0LL;
  }

  if (!CFProperty) {
    return 0LL;
  }
LABEL_17:
  CFTypeID v7 = CFGetTypeID(CFProperty);
  if (v7 == CFDataGetTypeID())
  {
    sub_156328(&theData, &v16);
    if (!theData)
    {
      uint64_t v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v11, "Could not construct");
    }

    if (CFDataGetLength(theData) != 4)
    {
      __int16 v12 = (os_log_t *)sub_138E8(13);
      int v13 = *v12;
      if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 __p = 136315394;
        *(void *)&__p[4] = "StandardUtilities.cpp";
        *(_WORD *)&_BYTE __p[12] = 1024;
        *(_DWORD *)&__p[14] = 1331;
        _os_log_impl(&dword_0, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
      }

      __int16 v14 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v14, "Precondition failure.");
    }

    if (!theData)
    {
      std::string::size_type v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v15, "Could not construct");
    }

    BOOL v8 = *(_DWORD *)CFDataGetBytePtr(theData) != 0;
    if (theData) {
      CFRelease(theData);
    }
  }

  else
  {
    BOOL v8 = 0LL;
  }

  CFRelease(CFProperty);
  return v8;
}

void sub_156278( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

void *sub_156328(void *a1, CFTypeRef *a2)
{
  if (*a2)
  {
    CFTypeID v4 = CFGetTypeID(*a2);
    if (v4 != CFDataGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_7E414(exception);
    }

    CFTypeRef v5 = *a2;
    if (v5) {
      CFRetain(v5);
    }
  }

  else
  {
    CFTypeRef v5 = 0LL;
  }

  return sub_14591C(a1, v5);
}

void sub_1563B4(_Unwind_Exception *a1)
{
}

uint64_t sub_1563D0(void *a1)
{
  io_registry_entry_t v2 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
  if (!v2)
  {
    unint64_t v6 = (os_log_t *)sub_138E8(13);
    CFTypeID v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "EDTUtilsImpl.h";
      __int16 v13 = 1024;
      int v14 = 47;
      __int16 v15 = 2080;
      CFTypeRef v16 = "IODeviceTree:/product/audio";
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).",  buf,  0x1Cu);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
  }

  CFPropertyListRef v3 = CFStringCreateWithBytes(0LL, (const UInt8 *)"speaker-cpms-bgd_1s", 19LL, 0x8000100u, 0);
  *(void *)buf = v3;
  if (!v3)
  {
    AudioObjectID v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v9, "Could not construct");
  }

  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v2, v3, kCFAllocatorDefault, 0);
  sub_14591C(&cf, CFProperty);
  if (!cf)
  {
    char v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v10, "Could not construct");
  }

  sub_15676C(a1, cf);
  if (cf) {
    CFRelease(cf);
  }
  CFRelease(v3);
  return IOObjectRelease(v2);
}

void sub_1565E8( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf, __int128 a12, int a13, __int16 a14, __int16 a15, const char *a16)
{
  if (a2 == 1)
  {
    double v20 = __cxa_begin_catch(a1);
    double v21 = (os_log_t *)sub_138E8(17);
    uint64_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = (*(uint64_t (**)(void *))(*(void *)v20 + 16LL))(v20);
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "EDTUtilsImpl.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 74;
      WORD1(a12) = 2080;
      *(void *)((char *)&a12 + 4) = v23;
      WORD6(a12) = 2080;
      a15 = 2080;
      a16 = "speaker-cpms-bgd_1s";
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d EDT Accessor error '%s' for path: %s ; key: %s did not return any data",
        (uint8_t *)&buf,
        0x30u);
    }

    *CFTypeRef v16 = 0LL;
    v16[1] = 0LL;
    v16[2] = 0LL;
    __cxa_end_catch();
    JUMPOUT(0x1564A0LL);
  }

  _Unwind_Resume(a1);
}

void sub_156754()
{
}

void sub_15675C()
{
}

size_t sub_15676C(void *a1, const void *a2)
{
  CFTypeID TypeID = CFDataGetTypeID();
  if (TypeID != CFGetTypeID(a2))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_7D078(exception);
  }

  BytePtr = CFDataGetBytePtr((CFDataRef)a2);
  size_t result = CFDataGetLength((CFDataRef)a2);
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = 0LL;
  if (result)
  {
    size_t v7 = result;
    sub_D0AA0(a1, result);
    BOOL v8 = (char *)a1[1];
    size_t result = (size_t)memmove(v8, BytePtr, v7);
    a1[1] = &v8[v7];
  }

  return result;
}

void sub_156820(_Unwind_Exception *a1)
{
}

uint64_t sub_15684C(void *a1)
{
  io_registry_entry_t v2 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
  if (!v2)
  {
    unint64_t v6 = (os_log_t *)sub_138E8(13);
    size_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "EDTUtilsImpl.h";
      __int16 v13 = 1024;
      int v14 = 47;
      __int16 v15 = 2080;
      CFTypeRef v16 = "IODeviceTree:/product/audio";
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).",  buf,  0x1Cu);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
  }

  CFPropertyListRef v3 = CFStringCreateWithBytes(0LL, (const UInt8 *)"speaker-cpms-bgd_100ms", 22LL, 0x8000100u, 0);
  *(void *)buf = v3;
  if (!v3)
  {
    AudioObjectID v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v9, "Could not construct");
  }

  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v2, v3, kCFAllocatorDefault, 0);
  sub_14591C(&cf, CFProperty);
  if (!cf)
  {
    char v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v10, "Could not construct");
  }

  sub_15676C(a1, cf);
  if (cf) {
    CFRelease(cf);
  }
  CFRelease(v3);
  return IOObjectRelease(v2);
}

void sub_156A64( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf, __int128 a12, int a13, __int16 a14, __int16 a15, const char *a16)
{
  if (a2 == 1)
  {
    double v20 = __cxa_begin_catch(a1);
    double v21 = (os_log_t *)sub_138E8(17);
    uint64_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = (*(uint64_t (**)(void *))(*(void *)v20 + 16LL))(v20);
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "EDTUtilsImpl.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 74;
      WORD1(a12) = 2080;
      *(void *)((char *)&a12 + 4) = v23;
      WORD6(a12) = 2080;
      a15 = 2080;
      a16 = "speaker-cpms-bgd_100ms";
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d EDT Accessor error '%s' for path: %s ; key: %s did not return any data",
        (uint8_t *)&buf,
        0x30u);
    }

    *CFTypeRef v16 = 0LL;
    v16[1] = 0LL;
    v16[2] = 0LL;
    __cxa_end_catch();
    JUMPOUT(0x15691CLL);
  }

  _Unwind_Resume(a1);
}

void sub_156BD0()
{
}

void sub_156BD8()
{
}

uint64_t sub_156BE8(void *a1)
{
  io_registry_entry_t v2 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
  if (!v2)
  {
    unint64_t v6 = (os_log_t *)sub_138E8(13);
    size_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "EDTUtilsImpl.h";
      __int16 v13 = 1024;
      int v14 = 47;
      __int16 v15 = 2080;
      CFTypeRef v16 = "IODeviceTree:/product/audio";
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).",  buf,  0x1Cu);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
  }

  CFPropertyListRef v3 = CFStringCreateWithBytes(0LL, (const UInt8 *)"speaker-cpms-bgd_inst", 21LL, 0x8000100u, 0);
  *(void *)buf = v3;
  if (!v3)
  {
    AudioObjectID v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v9, "Could not construct");
  }

  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v2, v3, kCFAllocatorDefault, 0);
  sub_14591C(&cf, CFProperty);
  if (!cf)
  {
    char v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v10, "Could not construct");
  }

  sub_15676C(a1, cf);
  if (cf) {
    CFRelease(cf);
  }
  CFRelease(v3);
  return IOObjectRelease(v2);
}

void sub_156E00( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf, __int128 a12, int a13, __int16 a14, __int16 a15, char *a16)
{
  if (a2 == 1)
  {
    double v20 = __cxa_begin_catch(a1);
    double v21 = (os_log_t *)sub_138E8(17);
    uint64_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = (*(uint64_t (**)(void *))(*(void *)v20 + 16LL))(v20);
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "EDTUtilsImpl.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 74;
      WORD1(a12) = 2080;
      *(void *)((char *)&a12 + 4) = v23;
      WORD6(a12) = 2080;
      a15 = 2080;
      a16 = "speaker-cpms-bgd_inst";
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d EDT Accessor error '%s' for path: %s ; key: %s did not return any data",
        (uint8_t *)&buf,
        0x30u);
    }

    *CFTypeRef v16 = 0LL;
    v16[1] = 0LL;
    v16[2] = 0LL;
    __cxa_end_catch();
    JUMPOUT(0x156CB8LL);
  }

  _Unwind_Resume(a1);
}

void sub_156F6C()
{
}

void sub_156F74()
{
}

void sub_156F84(const __CFString *a1, _DWORD *a2, uint64_t **a3)
{
  if (*a2) {
    BOOL v4 = a2[1] == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    sub_48100((uint64_t)v15, a1);
    uint64_t v6 = *(void *)a2;
    size_t v7 = operator new(8uLL);
    void *v7 = v6;
    if (SHIBYTE(v16) < 0)
    {
      sub_24054(__dst, v15[0], (unint64_t)v15[1]);
    }

    else
    {
      *(_OWORD *)__int128 __dst = *(_OWORD *)v15;
      uint64_t v20 = v16;
    }

    __p[0] = 0LL;
    __p[1] = 0LL;
    uint64_t v22 = 0LL;
    sub_7A5B8(__p, v7, (uint64_t)(v7 + 1), 2uLL);
    BOOL v8 = (char *)a3[1];
    AudioObjectID v9 = (char **)(a3 + 1);
    for (unsigned int i = (char **)(a3 + 1); v8; v8 = v9[1])
    {
      while (1)
      {
        AudioObjectID v9 = (char **)v8;
        uint64_t v11 = v8 + 32;
        BOOL v8 = *v9;
        unsigned int i = v9;
        if (!*v9) {
          goto LABEL_14;
        }
      }

      if ((sub_845A0(v11, __dst) & 0x80) == 0) {
        goto LABEL_20;
      }
      unsigned int i = v9 + 1;
    }

void sub_1571A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, __int128 buf, __int128 a19)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a2 == 1)
  {
    uint64_t v22 = __cxa_begin_catch(a1);
    uint64_t v23 = (os_log_t *)sub_138E8(13);
    unsigned __int8 v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = (*(uint64_t (**)(void *))(*(void *)v22 + 16LL))(v22);
      LODWORD(buf) = 136315650;
      *(void *)((char *)&buf + 4) = "StandardUtilities.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 1318;
      WORD1(a19) = 2080;
      *(void *)((char *)&a19 + 4) = v25;
      _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PV_InsertCPMSEntry exception '%s'",  (uint8_t *)&buf,  0x1Cu);
    }

    __cxa_end_catch();
    JUMPOUT(0x157168LL);
  }

  _Unwind_Resume(a1);
}

void sub_1572EC(CFDictionaryRef *a1, void *a2)
{
  int64x2_t v22 = 0uLL;
  unint64_t v23 = 0LL;
  sub_7DCF4(&v22, a2[2]);
  uint64_t v6 = (void *)*a2;
  BOOL v4 = a2 + 1;
  CFTypeRef v5 = v6;
  if (v6 != v4)
  {
    size_t v7 = (CFStringRef *)v22.i64[1];
    do
    {
      if ((unint64_t)v7 >= v23)
      {
        uint64_t v8 = ((uint64_t)v7 - v22.i64[0]) >> 4;
        unint64_t v9 = (uint64_t)(v23 - v22.i64[0]) >> 3;
        if (v9 <= v8 + 1) {
          unint64_t v9 = v8 + 1;
        }
        if (v23 - v22.i64[0] >= 0x7FFFFFFFFFFFFFF0LL) {
          unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v9;
        }
        char v27 = &v23;
        if (v10) {
          unint64_t v10 = (unint64_t)sub_7BE90(v10);
        }
        else {
          uint64_t v11 = 0LL;
        }
        unsigned __int8 v24 = (int64x2_t *)v10;
        v25.i64[0] = v10 + 16 * v8;
        v25.i64[1] = v25.i64[0];
        unint64_t v26 = v10 + 16 * v11;
        sub_15758C((CFStringRef *)v25.i64[0], (const UInt8 *)v5 + 32, (int **)v5 + 7);
        uint64_t v12 = v25.i64[0];
        size_t v7 = (CFStringRef *)(v25.i64[1] + 16);
        v25.i64[1] += 16LL;
        __int16 v13 = (void *)v22.i64[1];
        int v14 = (void *)v22.i64[0];
        if (v22.i64[1] == v22.i64[0])
        {
          int64x2_t v16 = vdupq_n_s64(v22.u64[1]);
        }

        else
        {
          do
          {
            uint64_t v15 = *(v13 - 2);
            v13 -= 2;
            *(void *)(v12 - 16) = v15;
            v12 -= 16LL;
            *__int16 v13 = 0LL;
            *(void *)(v12 + 8) = v13[1];
            v13[1] = 0LL;
          }

          while (v13 != v14);
          int64x2_t v16 = v22;
          size_t v7 = (CFStringRef *)v25.i64[1];
        }

        v22.i64[0] = v12;
        v22.i64[1] = (uint64_t)v7;
        int64x2_t v25 = v16;
        unint64_t v17 = v23;
        unint64_t v23 = v26;
        unint64_t v26 = v17;
        unsigned __int8 v24 = (int64x2_t *)v16.i64[0];
        sub_7BEC4((uint64_t)&v24);
      }

      else
      {
        sub_15758C(v7, (const UInt8 *)v5 + 32, (int **)v5 + 7);
        v7 += 2;
      }

      v22.i64[1] = (uint64_t)v7;
      char v18 = (void *)v5[1];
      if (v18)
      {
        do
        {
          unsigned __int8 v19 = v18;
          char v18 = (void *)*v18;
        }

        while (v18);
      }

      else
      {
        do
        {
          unsigned __int8 v19 = (void *)v5[2];
          BOOL v20 = *v19 == (void)v5;
          CFTypeRef v5 = v19;
        }

        while (!v20);
      }

      CFTypeRef v5 = v19;
    }

    while (v19 != v4);
  }

  CFDictionaryRef v21 = sub_7C1F4((void ***)&v22);
  unsigned __int8 v24 = &v22;
  sub_7CFCC((void ***)&v24);
  *a1 = v21;
}

void sub_1574C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a9;
  sub_7CFCC(&a13);
  _Unwind_Resume(a1);
}

void sub_157508(void *a1)
{
  if (a1)
  {
    sub_157508(*a1);
    sub_157508(a1[1]);
    sub_157548((uint64_t)(a1 + 4));
    operator delete(a1);
  }

void sub_157548(uint64_t a1)
{
  io_registry_entry_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + sub_7A768(v9 - 32) = v2;
    operator delete(v2);
  }

CFStringRef *sub_15758C(CFStringRef *a1, const UInt8 *a2, int **a3)
{
  CFIndex v5 = *((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    CFIndex v6 = a2[23];
  }

  else
  {
    a2 = *(const UInt8 **)a2;
    CFIndex v6 = v5;
  }

  CFStringRef v7 = CFStringCreateWithBytes(0LL, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  a1[1] = (CFStringRef)sub_7C020(a3);
  return a1;
}

void sub_15762C(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_157668(uint64_t a1)
{
  io_registry_entry_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + sub_7A768(v9 - 32) = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_1576A8(uint64_t a1)
{
  AudioObjectPropertyScope v1 = *(void **)a1;
  *(void *)a1 = 0LL;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_157548((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }

uint64_t sub_1576EC(int a1)
{
  uint64_t result = 1LL;
  if (a1 > 1886216808)
  {
    if (a1 <= 1886614624)
    {
      if (a1 > 1886545253)
      {
        if (a1 > 1886610287)
        {
          if (a1 == 1886610288 || a1 == 1886613611) {
            return result;
          }
          unsigned __int16 v10 = 28786;
        }

        else
        {
          if (a1 == 1886545254 || a1 == 1886549104) {
            return result;
          }
          unsigned __int16 v10 = 24943;
        }

        int v7 = v10 | 0x70730000;
      }

      else if (a1 > 1886284904)
      {
        if (a1 == 1886284905 || a1 == 1886287212) {
          return result;
        }
        int v7 = 1886545251;
      }

      else
      {
        if (a1 == 1886216809 || a1 == 1886216820) {
          return result;
        }
        int v7 = 1886222185;
      }
    }

    else if (a1 > 1886680174)
    {
      if (a1 > 1886743661)
      {
        if (a1 == 1886743662 || a1 == 1886745449) {
          return result;
        }
        unsigned __int16 v9 = 29551;
      }

      else
      {
        if (a1 == 1886680175 || a1 == 1886742889) {
          return result;
        }
        unsigned __int16 v9 = 26991;
      }

      int v7 = v9 | 0x70750000;
    }

    else
    {
      if (a1 <= 1886675560)
      {
        unsigned int v3 = a1 - 1886614625;
        if (v3 <= 0xF)
        {
          int v4 = 1 << v3;
          int v5 = 49409;
          goto LABEL_12;
        }

        return 0LL;
      }

      if (a1 == 1886675561 || a1 == 1886675567) {
        return result;
      }
      int v7 = 1886680169;
    }

float sub_157A88(uint64_t a1, unsigned int a2, double a3, double a4)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 8) = a1 + 16;
  char v4 = 1;
  *(_BYTE *)(a1 + sub_7A768(v9 - 32) = 1;
  *(void *)(a1 + 40) = 0x3F80000040000000LL;
  *(_DWORD *)(a1 + 36) = a2;
  if (a2 > 0xF)
  {
    float v6 = 1.0;
    float v5 = 2.0;
  }

  else
  {
    char v4 = byte_4034F0[a2];
    float v5 = *(float *)&aKcajmlovdlovBd[4 * a2 + 152];
    float v6 = flt_4016F0[a2];
  }

  *(_BYTE *)(a1 + sub_7A768(v9 - 32) = v4;
  *(float *)&a3 = a3;
  float v7 = a4;
  *(float *)(a1 + 40) = v5;
  *(float *)(a1 + 44) = v6;
  sub_886F8(a1, 0, 0x7FFFFFFF, a3, v7);
  return result;
}

void sub_157B20(_Unwind_Exception *a1)
{
  io_registry_entry_t v2 = v1;
  sub_32C8C(*v2);
  _Unwind_Resume(a1);
}

void sub_157B38(uint64_t a1, double **a2)
{
  io_registry_entry_t v2 = a2[1];
  if (*a2 == v2)
  {
    int v34 = (os_log_t *)sub_138E8(13);
    uint64_t v35 = *v34;
    if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      __int128 v44 = "StandardUtilities.cpp";
      __int16 v45 = 1024;
      int v46 = 1592;
      _os_log_impl(&dword_0, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  unint64_t v4 = ((char *)v2 - (char *)*a2) >> 4;
  unint64_t v5 = 0x7FFFFFFF / v4;
  float v6 = 0LL;
  unint64_t v7 = v4 + 1;
  if (v4 == -1LL)
  {
    unsigned __int16 v8 = 0LL;
  }

  else
  {
    unsigned __int16 v9 = 0LL;
    unint64_t v10 = 0LL;
    int v11 = 0;
    do
    {
      if ((unint64_t)v9 >= v10)
      {
        uint64_t v12 = (v9 - v6) >> 2;
        unint64_t v13 = v12 + 1;
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          unint64_t v14 = (unint64_t)sub_7A890(v14);
        }
        else {
          uint64_t v15 = 0LL;
        }
        int64x2_t v16 = (char *)(v14 + 4 * v12);
        *(_DWORD *)int64x2_t v16 = v11;
        unsigned __int16 v8 = v16 + 4;
        while (v9 != v6)
        {
          int v17 = *((_DWORD *)v9 - 1);
          v9 -= 4;
          *((_DWORD *)v16 - 1) = v17;
          v16 -= 4;
        }

        unint64_t v10 = v14 + 4 * v15;
        if (v6) {
          operator delete(v6);
        }
        float v6 = v16;
      }

      else
      {
        *(_DWORD *)unsigned __int16 v9 = v11;
        unsigned __int16 v8 = v9 + 4;
      }

      v11 += v5;
      unsigned __int16 v9 = v8;
      --v7;
    }

    while (v7);
  }

  char v18 = (os_log_t *)sub_138E8(20);
  unsigned __int8 v19 = *v18;
  if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_DEFAULT))
  {
    memset(&v41, 0, sizeof(v41));
    std::string::append(&v41, "{ ", 2uLL);
    if (v6 != v8)
    {
      BOOL v20 = (int *)v6;
      while (1)
      {
        std::to_string(&v42, *v20);
        if ((v42.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          CFDictionaryRef v21 = &v42;
        }
        else {
          CFDictionaryRef v21 = (std::string *)v42.__r_.__value_.__r.__words[0];
        }
        if ((v42.__r_.__value_.__s.__size_ & 0x80u) == 0) {
          std::string::size_type size = v42.__r_.__value_.__s.__size_;
        }
        else {
          std::string::size_type size = v42.__r_.__value_.__l.__size_;
        }
        std::string::append(&v41, (const std::string::value_type *)v21, size);
        std::string::append(&v41, ", ", 2uLL);
      }
    }

    std::string::append(&v41, " }", 2uLL);
    if ((v41.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      unint64_t v23 = &v41;
    }
    else {
      unint64_t v23 = (std::string *)v41.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136316162;
    __int128 v44 = "StandardUtilities.cpp";
    __int16 v45 = 1024;
    int v46 = 1600;
    __int16 v47 = 1024;
    int v48 = 0x7FFFFFFF;
    __int16 v49 = 1024;
    int v50 = v5;
    __int16 v51 = 2080;
    __int128 v52 = v23;
    _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Max: %d Step size: %d, VolumeCurve Scalar points: %s",  buf,  0x28u);
  }

  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 8) = a1 + 16;
  *(_DWORD *)(a1 + 36) = 0;
  *(_BYTE *)(a1 + sub_7A768(v9 - 32) = 0;
  __asm { FMOV            V0.2S, #1.0 }

  *(void *)(a1 + 40) = _D0;
  sub_32C8C(0LL);
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 24) = 0LL;
  *(void *)(a1 + 16) = 0LL;
  int v30 = *a2;
  int v29 = a2[1];
  if ((((char *)v29 - (char *)*a2) >> 4) + 1 != (v8 - v6) >> 2)
  {
    size_t v37 = (os_log_t *)sub_138E8(13);
    std::string::size_type v38 = *v37;
    if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      __int128 v44 = "StandardUtilities.cpp";
      __int16 v45 = 1024;
      int v46 = 1607;
      _os_log_impl(&dword_0, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", buf, 0x12u);
    }

    int v39 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v39, "Invariant failure.");
  }

  if (v30 == v29)
  {
    if (!v6) {
      return;
    }
  }

  else
  {
    unsigned int v31 = 1;
    do
    {
      double v32 = *v30;
      *(float *)&double v32 = *v30;
      float v33 = v30[1];
      sub_886F8(a1, *(_DWORD *)&v6[4 * v31 - 4], *(_DWORD *)&v6[4 * v31], v32, v33);
      ++v31;
      v30 += 2;
    }

    while (v30 != v29);
  }

  operator delete(v6);
}

void sub_157FC4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20, char a21, char a22)
{
  if (v23) {
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void sub_15805C(unsigned int **a1, CFArrayRef *a2)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
  io_registry_entry_t v2 = *a2;
  if (*a2)
  {
    CFIndex Count = CFArrayGetCount(*a2);
    CFIndex v6 = Count;
    unint64_t v7 = *a2;
    if (v7)
    {
      CFIndex v22 = CFArrayGetCount(v7);
      if (!v6) {
        return;
      }
    }

    else
    {
      CFIndex v22 = 0LL;
      if (!Count) {
        return;
      }
    }

    unsigned __int16 v8 = 0LL;
    unint64_t v9 = 0LL;
    unint64_t v10 = 0LL;
    unint64_t v11 = 0LL;
    CFIndex v21 = v6;
    do
    {
      if (v2 == v7 && v11 == v22) {
        break;
      }
      sub_36030(&cf, v2, v11);
      unsigned int v12 = sub_1581F8(&cf);
      unsigned int v13 = v12;
      if ((unint64_t)v10 >= v9)
      {
        uint64_t v14 = v10 - v8;
        unint64_t v15 = v14 + 1;
        else {
          unint64_t v16 = v15;
        }
        if (v16) {
          unint64_t v16 = (unint64_t)sub_7A890(v16);
        }
        else {
          uint64_t v17 = 0LL;
        }
        char v18 = (unsigned int *)(v16 + 4 * v14);
        unsigned int *v18 = v13;
        unsigned __int8 v19 = v18 + 1;
        while (v10 != v8)
        {
          unsigned int v20 = *--v10;
          *--char v18 = v20;
        }

        unint64_t v9 = v16 + 4 * v17;
        *a1 = v18;
        a1[1] = v19;
        a1[2] = (unsigned int *)v9;
        if (v8) {
          operator delete(v8);
        }
        unsigned __int16 v8 = v18;
        unint64_t v10 = v19;
        CFIndex v6 = v21;
      }

      else
      {
        *v10++ = v12;
      }

      a1[1] = v10;
      if (cf) {
        CFRelease(cf);
      }
      ++v11;
    }

    while (v11 != v6);
  }

CFNumberRef sub_1581F8(const void **a1)
{
  io_registry_entry_t v2 = *a1;
  if (!v2) {
    return 0LL;
  }
  CFTypeID v3 = CFGetTypeID(v2);
  if (v3 == CFNumberGetTypeID())
  {
    sub_158360(__p, a1);
    unint64_t v4 = __p[0];
    if (__p[0])
    {
      unint64_t v5 = sub_8D7E0((const __CFNumber *)__p[0]);
      CFRelease(v4);
      return v5;
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_20:
  }

  if (!*a1) {
    return 0LL;
  }
  CFTypeID v6 = CFGetTypeID(*a1);
  if (v6 != CFStringGetTypeID()) {
    return 0LL;
  }
  sub_D9B14(&cf, a1);
  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_20;
  }

  sub_48100((uint64_t)__p, (const __CFString *)cf);
  if (v13 >= 0) {
    unint64_t v7 = __p;
  }
  else {
    unint64_t v7 = (void **)__p[0];
  }
  unsigned int v8 = *(_DWORD *)v7;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (cf) {
    CFRelease(cf);
  }
  return (const __CFNumber *)bswap32(v8);
}

void sub_158328(void *a1)
{
}

const void *sub_158360(void *a1, const void **a2)
{
  float result = *a2;
  if (!*a2) {
    goto LABEL_6;
  }
  CFTypeID v5 = CFGetTypeID(result);
  float result = (const void *)CFNumberGetTypeID();
  if ((const void *)v5 != result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_7E414(exception);
  }

  CFTypeID v6 = *a2;
  if (v6)
  {
    CFRetain(v6);
    *a1 = v6;
    CFTypeID v7 = CFGetTypeID(v6);
    float result = (const void *)CFNumberGetTypeID();
    if ((const void *)v7 != result)
    {
      unsigned int v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v8, "Could not construct");
    }
  }

  else
  {
LABEL_6:
    *a1 = 0LL;
  }

  return result;
}

void sub_158430(_Unwind_Exception *a1)
{
}

void sub_158474(uint64_t a1, CFTypeRef *a2)
{
  if (*a2 && (CFTypeID v4 = CFGetTypeID(*a2), v4 == CFArrayGetTypeID()))
  {
    sub_158524(&cf, a2);
    sub_15805C((unsigned int **)a1, (CFArrayRef *)&cf);
    if (cf) {
      CFRelease(cf);
    }
  }

  else
  {
    unsigned int v5 = sub_1581F8(a2);
    *(void *)(a1 + 8) = 0LL;
    *(void *)(a1 + 16) = 0LL;
    *(void *)a1 = 0LL;
    CFTypeID v6 = (unsigned int *)operator new(4uLL);
    *(void *)a1 = v6;
    *v6++ = v5;
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v6;
  }

void *sub_158524(void *a1, CFTypeRef *a2)
{
  if (*a2)
  {
    CFTypeID v4 = CFGetTypeID(*a2);
    if (v4 != CFArrayGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_7E414(exception);
    }

    CFTypeRef v5 = *a2;
    if (v5) {
      CFRetain(v5);
    }
  }

  else
  {
    CFTypeRef v5 = 0LL;
  }

  return sub_35F84(a1, v5);
}

void sub_1585B0(_Unwind_Exception *a1)
{
}

CFNumberRef sub_1585CC(const __CFDictionary **a1, const UInt8 *a2, unsigned int *a3)
{
  CFTypeRef v5 = *a1;
  if (!v5 || !sub_51DF4(v5, a2)) {
    return (const __CFNumber *)*a3;
  }
  if (!*a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }

  sub_147680(&cf, *a1, a2);
  CFTypeID v7 = sub_1581F8(&cf);
  if (cf) {
    CFRelease(cf);
  }
  return v7;
}

void sub_15867C(void *a1)
{
}

void *sub_15869C(void *result, CFTypeRef cf)
{
  io_registry_entry_t v2 = result;
  if (cf)
  {
    CFRetain(cf);
    return sub_7F234(v2, cf);
  }

  else
  {
    const void *result = 0LL;
  }

  return result;
}

uint64_t sub_1586E4(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v5[0] = a2;
  uint64_t v3 = *(void *)(v2 + 56);
  if (!v3) {
    sub_82CEC();
  }
  return (*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)v3 + 48LL))(v3, v5);
}

void sub_158760( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf, __int128 a12, __int16 a13, __int16 a14, int a15, int a16)
{
  if (a2)
  {
    if (a2 == 3)
    {
      uint64_t v17 = __cxa_begin_catch(a1);
      char v18 = (os_log_t *)sub_138E8(13);
      unsigned __int8 v19 = *v18;
      if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
      {
        int v20 = v17[2];
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 429;
        WORD1(a12) = 1024;
        DWORD1(a12) = v20;
        WORD4(a12) = 2080;
        *(void *)((char *)&a12 + 10) = "";
        a14 = 1024;
        a15 = 1695;
        _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).",  (uint8_t *)&buf,  0x28u);
      }
    }

    else
    {
      CFIndex v21 = __cxa_begin_catch(a1);
      if (a2 == 2)
      {
        CFIndex v22 = v21;
        unint64_t v23 = (os_log_t *)sub_138E8(13);
        unsigned __int8 v24 = *v23;
        if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
        {
          uint64_t v25 = (*(uint64_t (**)(void *))(*(void *)v22 + 16LL))(v22);
          LODWORD(buf) = 136316162;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 430;
          WORD1(a12) = 2080;
          *(void *)((char *)&a12 + 4) = v25;
          WORD6(a12) = 2080;
          *(void *)((char *)&a12 + 14) = "";
          HIWORD(a15) = 1024;
          a16 = 1695;
          _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).",  (uint8_t *)&buf,  0x2Cu);
        }
      }

      else
      {
        unint64_t v26 = (os_log_t *)sub_138E8(13);
        char v27 = *v26;
        if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315906;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 431;
          WORD1(a12) = 2080;
          *(void *)((char *)&a12 + 4) = "";
          WORD6(a12) = 1024;
          *(_DWORD *)((char *)&a12 + 14) = 1695;
          _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).",  (uint8_t *)&buf,  0x22u);
        }
      }
    }

    __cxa_end_catch();
    JUMPOUT(0x158728LL);
  }

  _Unwind_Resume(a1);
}

void sub_1589B0(uint64_t a1, int a2, int *a3, uint64_t a4)
{
  if (!a2)
  {
    char v18 = (os_log_t *)sub_138E8(13);
    unsigned __int8 v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      int v24 = 136315394;
      uint64_t v25 = "HALJackStateHandler.cpp";
      __int16 v26 = 1024;
      int v27 = 176;
      _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v24,  0x12u);
    }

    goto LABEL_29;
  }

  CFTypeID v4 = a3;
  if (!a3)
  {
    int v20 = (os_log_t *)sub_138E8(13);
    CFIndex v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      int v24 = 136315394;
      uint64_t v25 = "HALJackStateHandler.cpp";
      __int16 v26 = 1024;
      int v27 = 177;
      _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v24,  0x12u);
    }

    goto LABEL_29;
  }

  if (!a4)
  {
    CFIndex v22 = (os_log_t *)sub_138E8(13);
    unint64_t v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      int v24 = 136315394;
      uint64_t v25 = "HALJackStateHandler.cpp";
      __int16 v26 = 1024;
      int v27 = 178;
      _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v24,  0x12u);
    }

void sub_158D34( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v14);
  if (a2 == 3)
  {
    uint64_t v17 = __cxa_begin_catch(exception_object);
    char v18 = (os_log_t *)sub_138E8(13);
    os_log_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      int v20 = v17[2];
      LODWORD(va_start(va, a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(va_start(va, a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v20;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 194;
      CFIndex v21 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      CFIndex v22 = v19;
      uint32_t v23 = 40;
LABEL_15:
      _os_log_impl(&dword_0, v22, OS_LOG_TYPE_ERROR, v21, (uint8_t *)&a9, v23);
    }
  }

  else
  {
    int v24 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint64_t v25 = v24;
      __int16 v26 = (os_log_t *)sub_138E8(13);
      os_log_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        uint64_t v28 = (*(uint64_t (**)(void *))(*(void *)v25 + 16LL))(v25);
        LODWORD(va_start(va, a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(va_start(va, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v28;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 194;
        CFIndex v21 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        CFIndex v22 = v27;
        uint32_t v23 = 44;
        goto LABEL_15;
      }
    }

    else
    {
      int v29 = (os_log_t *)sub_138E8(13);
      os_log_t v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        LODWORD(va_start(va, a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(va_start(va, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 194;
        CFIndex v21 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        CFIndex v22 = v30;
        uint32_t v23 = 34;
        goto LABEL_15;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x158B5CLL);
}

void sub_158F70()
{
}

void sub_158F7C()
{
}

void sub_158F88()
{
}

void sub_158F98()
{
}

void sub_158FA0(uint64_t *a1)
{
}

void sub_159010( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    unint64_t v15 = __cxa_begin_catch(exception_object);
    unint64_t v16 = (os_log_t *)sub_138E8(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(va_start(va, a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(va_start(va, a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 98;
      os_log_t v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      int v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }

  else
  {
    CFIndex v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint32_t v23 = v22;
      int v24 = (os_log_t *)sub_138E8(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16LL))(v23);
        LODWORD(va_start(va, a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(va_start(va, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 98;
        os_log_t v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        int v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      os_log_t v27 = (os_log_t *)sub_138E8(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(va_start(va, a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(va_start(va, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 98;
        os_log_t v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        int v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x158FD8LL);
}

void *sub_159258(uint64_t a1, uint64_t (*a2)(BOOL, BOOL, uint64_t, uint64_t), uint64_t a3)
{
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
  int v46 = 0;
  if (*(_BYTE *)(a1 + 96))
  {
    LODWORD(__p) = 4;
    (*(void (**)(void, const char *, void, void, void **, int *))(**(void **)(a1 + 88) + 40LL))( *(void *)(a1 + 88),  "kcajtpni",  0LL,  0LL,  &__p,  &v46);
    uint64_t v7 = sub_138E8(21);
    uint64_t v8 = sub_138E8(30);
    char v9 = 0;
    uint64_t v10 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v11 = *(void *)(v7 + 8);
    while (1)
    {
      uint64_t v12 = *(int *)&buf[4 * v10];
      char v13 = v9;
      if (((v11 & v12) != 0) != ((*(void *)(v8 + 8) & v12) != 0)) {
        break;
      }
      char v9 = 1;
      uint64_t v10 = 1LL;
      if ((v13 & 1) != 0) {
        goto LABEL_8;
      }
    }

    if ((v11 & v12) == 0) {
      uint64_t v7 = v8;
    }
LABEL_8:
    uint64_t v14 = *(os_log_s **)v7;
    if (v14 && os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v15 = "YES";
      *(void *)&uint8_t buf[4] = "HALJackStateHandler.cpp";
      *(_DWORD *)buf = 136315650;
      if (!v46) {
        unint64_t v15 = "NO";
      }
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 209;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v15;
      _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d input connected: %s", buf, 0x1Cu);
    }
  }

  int v45 = 0;
  int v16 = *(unsigned __int8 *)(a1 + 97);
  if (*(_BYTE *)(a1 + 97))
  {
    LODWORD(__p) = 4;
    (*(void (**)(void, const char *, void, void, void **, int *))(**(void **)(a1 + 88) + 40LL))( *(void *)(a1 + 88),  "kcajptuo",  0LL,  0LL,  &__p,  &v45);
    uint64_t v17 = sub_138E8(21);
    uint64_t v18 = sub_138E8(30);
    char v19 = 0;
    uint64_t v20 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v21 = *(void *)(v17 + 8);
    while (1)
    {
      uint64_t v22 = *(int *)&buf[4 * v20];
      char v23 = v19;
      if (((v21 & v22) != 0) != ((*(void *)(v18 + 8) & v22) != 0)) {
        break;
      }
      char v19 = 1;
      uint64_t v20 = 1LL;
      if ((v23 & 1) != 0) {
        goto LABEL_20;
      }
    }

    if ((v21 & v22) == 0) {
      uint64_t v17 = v18;
    }
LABEL_20:
    int v24 = *(os_log_s **)v17;
    if (v24 && os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      os_log_t v25 = "YES";
      *(void *)&uint8_t buf[4] = "HALJackStateHandler.cpp";
      *(_DWORD *)buf = 136315650;
      if (!v45) {
        os_log_t v25 = "NO";
      }
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 217;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v25;
      _os_log_impl(&dword_0, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d output connected: %s", buf, 0x1Cu);
    }

    int v16 = v45;
  }

  uint64_t v26 = sub_15984C(v46 != 0, v16 != 0, *(void *)(a1 + 88));
  uint64_t v27 = sub_138E8(21);
  uint64_t v28 = sub_138E8(30);
  char v29 = 0;
  uint64_t v30 = 0LL;
  *(void *)buf = 0x100000002LL;
  uint64_t v31 = *(void *)(v27 + 8);
  while (1)
  {
    uint64_t v32 = *(int *)&buf[4 * v30];
    char v33 = v29;
    if (((v31 & v32) != 0) != ((*(void *)(v28 + 8) & v32) != 0)) {
      break;
    }
    char v29 = 1;
    uint64_t v30 = 1LL;
    if ((v33 & 1) != 0) {
      goto LABEL_32;
    }
  }

  if ((v31 & v32) == 0) {
    uint64_t v27 = v28;
  }
LABEL_32:
  int v34 = *(os_log_s **)v27;
  if (!v34 || !os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_38;
  }
  sub_2CA1C(&__p, v26);
  uint64_t v35 = v44 >= 0 ? &__p : (void **)__p;
  *(_DWORD *)buf = 136315650;
  *(void *)&uint8_t buf[4] = "HALJackStateHandler.cpp";
  *(_WORD *)&_BYTE buf[12] = 1024;
  *(_DWORD *)&buf[14] = 222;
  *(_WORD *)&_BYTE buf[18] = 2080;
  *(void *)&buf[20] = v35;
  _os_log_impl(&dword_0, v34, OS_LOG_TYPE_DEBUG, "%25s:%-5d headphone jack descriptor: '%s'", buf, 0x1Cu);
  if (v44 < 0)
  {
    operator delete(__p);
    if (a2)
    {
LABEL_39:
      sub_34AA0(buf, a1);
      float result = (void *)a2(v46 != 0, v45 != 0, v26, a3);
      if (buf[8]) {
        float result = (void *)(*(uint64_t (**)(void))(**(void **)buf + 16LL))(*(void *)buf);
      }
      if (!v6) {
        return result;
      }
      return (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
    }
  }

  else
  {
LABEL_38:
    if (a2) {
      goto LABEL_39;
    }
  }

  *(void *)buf = buf;
  *(void *)&buf[8] = buf;
  *(void *)&_DWORD buf[16] = 0LL;
  uint64_t v37 = *(void *)(a1 + 112);
  if (v37 != a1 + 104)
  {
    uint64_t v38 = 1LL;
    int v39 = buf;
    do
    {
      __int128 v40 = operator new(0x20uLL);
      v40[1] = *(_OWORD *)(v37 + 16);
      *(void *)__int128 v40 = v39;
      *((void *)v40 + 1) = buf;
      *((void *)v39 + 1) = v40;
      *(void *)buf = v40;
      *(void *)&_DWORD buf[16] = v38;
      uint64_t v37 = *(void *)(v37 + 8);
      ++v38;
      int v39 = v40;
    }

    while (v37 != a1 + 104);
  }

  sub_34AA0(&__p, a1);
  for (uint64_t i = *(void *)&buf[8]; buf != (_BYTE *)i; uint64_t i = *(void *)(i + 8))
    (*(void (**)(BOOL, BOOL, uint64_t, void))(i + 16))(v46 != 0, v45 != 0, v26, *(void *)(i + 24));
  if (v43) {
    (*(void (**)(void *))(*(void *)__p + 16LL))(__p);
  }
  float result = sub_68314(buf);
  if (v6) {
    return (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
  }
  return result;
}

void sub_159794( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

uint64_t sub_15984C(int a1, int a2, uint64_t a3)
{
  if (a2) {
    unsigned int v3 = 1784965232;
  }
  else {
    unsigned int v3 = 0;
  }
  if (a1) {
    uint64_t v4 = 1784965235LL;
  }
  else {
    uint64_t v4 = v3;
  }
  if (!a2) {
    return v4;
  }
  if ((sub_14D738() & 1) == 0)
  {
    sub_159F0C(buf, a3);
    if (!*(void *)buf) {
      return 0LL;
    }
    unint64_t v7 = sub_159FE0((const __CFDictionary **)buf);
    if ((v7 & 0xFF00000000LL) != 0) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = v4;
    }
    if (*(void *)buf) {
      CFRelease(*(CFTypeRef *)buf);
    }
    return v8;
  }

  char v9 = v6;
  if ((byte_48EABC & 1) == 0)
  {
    *(void *)buf = CFStringCreateWithCString(0LL, "b15", 0x600u);
    buf[8] = 1;
    int v10 = 1784820021;
    if (!sub_159E64((CFStringRef *)buf))
    {
      __int128 __p = (void *)CFStringCreateWithCString(0LL, "b18", 0x600u);
      char v36 = 1;
      if (!sub_159E64((CFStringRef *)&__p))
      {
        CFStringRef v52 = CFStringCreateWithCString(0LL, "b126", 0x600u);
        char v53 = 1;
        BOOL v28 = sub_159E64(&v52);
        sub_19DFC((uint64_t)&v52);
        sub_19DFC((uint64_t)&__p);
        sub_19DFC((uint64_t)buf);
        if (v28) {
          goto LABEL_21;
        }
        CFStringRef v50 = CFStringCreateWithCString(0LL, "b60f", 0x600u);
        char v51 = 1;
        int v10 = 1647718502;
        if (!sub_159E64(&v50))
        {
          CFStringRef v48 = CFStringCreateWithCString(0LL, "b149", 0x600u);
          char v49 = 1;
          BOOL v29 = sub_159E64(&v48);
          sub_19DFC((uint64_t)&v48);
          sub_19DFC((uint64_t)&v50);
          if (!v29)
          {
            CFStringRef v46 = CFStringCreateWithCString(0LL, "b60g", 0x600u);
            char v47 = 1;
            BOOL v30 = sub_159E64(&v46);
            sub_19DFC((uint64_t)&v46);
            if (v30)
            {
              int v10 = 1647718503;
            }

            else
            {
              CFStringRef v44 = CFStringCreateWithCString(0LL, "a36", 0x600u);
              char v45 = 1;
              BOOL v31 = sub_159E64(&v44);
              sub_19DFC((uint64_t)&v44);
              if (v31)
              {
                int v10 = 1784754998;
              }

              else
              {
                CFStringRef v42 = CFStringCreateWithCString(0LL, "b198", 0x600u);
                char v43 = 1;
                BOOL v32 = sub_159E64(&v42);
                sub_19DFC((uint64_t)&v42);
                if (v32)
                {
                  int v10 = 1647393080;
                }

                else
                {
                  CFStringRef v40 = CFStringCreateWithCString(0LL, "b310", 0x600u);
                  char v41 = 1;
                  BOOL v33 = sub_159E64(&v40);
                  sub_19DFC((uint64_t)&v40);
                  if (v33)
                  {
                    int v10 = 1781739824;
                  }

                  else
                  {
                    CFStringRef v38 = CFStringCreateWithCString(0LL, "b302", 0x600u);
                    char v39 = 1;
                    BOOL v34 = sub_159E64(&v38);
                    sub_19DFC((uint64_t)&v38);
                    if (!v34) {
                      goto LABEL_22;
                    }
                    int v10 = 1647521842;
                  }
                }
              }
            }
          }

void sub_159DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
}

BOOL sub_159E64(CFStringRef *a1)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)&qword_48EAC0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_48EAC0))
  {
    qword_48EAC8 = sub_14D738();
    qword_48EAD0 = v4;
    __cxa_guard_release(&qword_48EAC0);
  }

  return (_BYTE)qword_48EAC8 && CFStringCompare(*a1, *(CFStringRef *)qword_48EAD0, 5uLL) == kCFCompareEqualTo;
}

void sub_159EF4(_Unwind_Exception *a1)
{
}

void *sub_159F0C(void *a1, uint64_t a2)
{
  AudioObjectID v3 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120LL))(a2);
  inAddress.mElement = 0;
  AudioObjectID v13 = v3;
  *(void *)&inAddress.mSelector = 0x676C6F6268656164LL;
  float result = (void *)sub_C57E0((uint64_t)v8, &v13, &inAddress);
  if (v11)
  {
    CFTypeRef v5 = v10;
    int v10 = 0LL;
    v6[0] = &off_486378;
    v6[1] = v5;
    char v7 = 1;
    sub_39FD8(&v9);
    if (v5) {
      CFRetain(v5);
    }
    sub_3617C(a1, v5);
    return sub_39FD8(v6);
  }

  else
  {
    *a1 = 0LL;
  }

  return result;
}

void sub_159FC4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a12) {
    sub_39FD8(&a10);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_159FE0(const __CFDictionary **a1)
{
  AudioObjectPropertyScope v1 = *a1;
  if (!v1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_7E414(exception);
  }

  unsigned __int8 v2 = (const __CFNumber *)sub_E6E10(v1, "earpiece design");
  if (!v2) {
    goto LABEL_6;
  }
  AudioObjectID v3 = sub_36328(v2);
  unint64_t v4 = (unint64_t)v3 >> 32;
  if (!((unint64_t)v3 >> 32))
  {
LABEL_7:
    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
    return v6 | v4 | v7;
  }

  unsigned int v5 = (_DWORD)v3 - 1;
  if (((_DWORD)v3 - 1) > 7)
  {
LABEL_6:
    unint64_t v4 = 0LL;
    goto LABEL_7;
  }

  unint64_t v4 = qword_401AE8[v5];
  uint64_t v6 = qword_401B28[v5];
  uint64_t v7 = qword_401B68[v5];
  return v6 | v4 | v7;
}

void sub_15A08C(_Unwind_Exception *a1)
{
}

uint64_t sub_15A0A0(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
  if (*(_BYTE *)(a1 + 97)) {
    sub_F35C8(*(void *)(a1 + 88), "kcajptuo", (uint64_t)sub_1589B0, a1);
  }
  if (*(_BYTE *)(a1 + 96)) {
    sub_F35C8(*(void *)(a1 + 88), "kcajtpni", (uint64_t)sub_1589B0, a1);
  }
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)a1 + 24LL))(a1);
  }
  sub_68314((void *)(a1 + 104));
  *(void *)a1 = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 24));
  return a1;
}

BOOL sub_15A154(uint64_t a1)
{
  if (!theDict) {
    return 0;
  }
  CFIndex Count = CFDictionaryGetCount(theDict);
  if (Count) {
    BOOL v1 = (sub_159FE0(&theDict) & 0xFF00000000LL) != 0;
  }
  if (theDict) {
    CFRelease(theDict);
  }
  if (!Count) {
    return 0;
  }
  return v1;
}

void sub_15A1C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

uint64_t sub_15A1DC(uint64_t a1)
{
  *(void *)a1 = off_4712E0;
  return sub_F8158(a1);
}

void sub_15A1EC(void *a1)
{
  *a1 = off_4712E0;
  BOOL v1 = (void *)sub_F8158((uint64_t)a1);
  operator delete(v1);
}

uint64_t sub_15A20C(os_unfair_lock_s *a1)
{
  return 1LL;
}

uint64_t sub_15A224(uint64_t a1)
{
  int v8 = 1;
  uint64_t v6 = 0LL;
  char v7 = 1;
  uint64_t v1 = *(void *)(a1 + 192);
  if (v1)
  {
    (*(void (**)(void *__return_ptr))(*(void *)v1 + 128LL))(v5);
    sub_6A8C0((uint64_t)&v6, (uint64_t)v5);
    sub_19DFC((uint64_t)v5);
    uint64_t v2 = v6;
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  if (qword_4919C8 != -1) {
    dispatch_once(&qword_4919C8, &stru_471760);
  }
  uint64_t v3 = 0x165706870LL;
  if (off_491A68)
  {
    off_491A68(&v8, v2);
    if (!v8) {
      uint64_t v3 = 0x165706F74LL;
    }
  }

  sub_19DFC((uint64_t)&v6);
  return v3;
}

void sub_15A2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

uint64_t sub_15A320(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 520);
}

BOOL sub_15A328(uint64_t a1)
{
  return *(_DWORD *)(a1 + 264) >> 1 == 823859251;
}

void sub_15A340(_BYTE *a1, uint64_t a2, int a3, uint64_t a4)
{
  a1[520] = a3;
  if (!a3) {
    goto LABEL_39;
  }
  uint64_t v5 = a4;
  if ((int)a4 <= 1781740086)
  {
    if ((int)a4 <= 1647718501)
    {
      if ((_DWORD)a4 != 1647393080 && (_DWORD)a4 != 1647521842) {
        goto LABEL_19;
      }
    }

    else if ((_DWORD)a4 != 1647718502 && (_DWORD)a4 != 1647718503)
    {
      if ((_DWORD)a4 != 1781739824) {
        goto LABEL_19;
      }
      uint64_t v5 = 1647522096LL;
    }
  }

  else if ((int)a4 > 1784965231)
  {
    switch((_DWORD)a4)
    {
      case 0x6A646870:
        uint64_t v5 = 1751410292LL;
        break;
      case 0x6A757362:
        uint64_t v5 = 1970496068LL;
        break;
      case 0x6A646873:
        uint64_t v5 = 1214539380LL;
        break;
      default:
        goto LABEL_19;
    }
  }

  else
  {
    if ((_DWORD)a4 == 1781740087) {
      goto LABEL_26;
    }
    if ((_DWORD)a4 != 1784754998)
    {
      if ((_DWORD)a4 == 1784820021)
      {
        uint64_t v5 = 1214394677LL;
        goto LABEL_26;
      }

void sub_15A690(_Unwind_Exception *a1)
{
}

void sub_15A6AC(id a1)
{
  uint64_t v1 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v1) {
    goto LABEL_5;
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    int v3 = 136315138;
    unint64_t v4 = dlerror();
    _os_log_error_impl( &dword_0,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "dlerror : libAudioIssueDetector ADAM: %s",  (uint8_t *)&v3,  0xCu);
  }

  uint64_t v1 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1);
  if (v1)
  {
LABEL_5:
    off_4919D0 = dlsym(v1, "AudioDataAnalysisManagerCreate");
    off_4919D8 = dlsym(v1, "AudioDataAnalysisManagerDispose");
    qword_4919E0 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerReset");
    off_4919E8 = dlsym(v1, "AudioDataAnalysisManagerUpdateReportingSessions");
    qword_4919F0 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerCreateNodePCM");
    off_4919F8 = dlsym(v1, "AudioDataAnalysisManagerCreateNodeSPL");
    qword_491A00 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerRemoveNode");
    off_491A08 = dlsym(v1, "AudioDataAnalysisManagerInitialize");
    qword_491A10 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerIsSessionInitialized");
    qword_491A18 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerProcessAudio");
    off_491A20 = (uint64_t (*)(void, void, void, float, float, float, float, float))dlsym(v1, "AudioDataAnalysisManagerProcessSPL");
    qword_491A28 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerCreateNodeEnvSPL");
    qword_491A30 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerCreateNodeEnvSoundClass");
    qword_491A38 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerProcessEnvSPL");
    qword_491A40 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerProcessEnvSoundClass");
    off_491A48 = dlsym(v1, "AudioDataAnalysisManagerSetDeviceInfo");
    qword_491A50 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerRegisterDeviceInfo");
    qword_491A58 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerSetDeviceConnectionState");
    off_491A60 = dlsym(v1, "AudioDataAnalysisManagerStartServices");
    off_491A68 = dlsym(v1, "AudioDataAnalysisManagerConnectedWiredDeviceIsHeadphone");
    qword_491A70 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerSetApplicationBundleID");
  }

  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    uint64_t v2 = dlerror();
    int v3 = 136315138;
    unint64_t v4 = v2;
    _os_log_error_impl( &dword_0,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "dlerror : libAudioIssueDetector ADAM: %s",  (uint8_t *)&v3,  0xCu);
  }

void *sub_15A9C8(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char **a7)
{
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_485ED0;
  return a1;
}

void sub_15AA70( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_15AA94(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    uint64_t v5 = &qword_48EB50;
  }
  else {
    uint64_t v5 = &qword_48EB20;
  }
  memset(v13, 0, sizeof(v13));
  sub_F9530((uint64_t)v10, *(unsigned int *)v5);
  CFStringRef v8 = CFStringCreateWithCString(0LL, "Wired Headphones", 0x600u);
  char v9 = 1;
  memset(v7, 0, sizeof(v7));
  sub_15A9C8((void *)a1, v5, a2, (uint64_t)v13, (uint64_t)v10, (uint64_t)&v8, v7);
  uint64_t v14 = v7;
  sub_7A668((void ***)&v14);
  sub_19DFC((uint64_t)&v8);
  sub_19DFC((uint64_t)&v12);
  sub_19DFC((uint64_t)&v11);
  sub_19DFC((uint64_t)v10);
  *(void *)a1 = off_4712E0;
  *(_BYTE *)(a1 + 520) = 0;
  return a1;
}

void sub_15AB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v14 = va_arg(va3, void);
  uint64_t v16 = va_arg(va3, void);
  *(void *)(v6 - 56) = v5;
  sub_7A668((void ***)(v6 - 56));
  sub_19DFC((uint64_t)va);
  sub_19DFC((uint64_t)va3);
  sub_19DFC((uint64_t)va2);
  sub_19DFC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_15ABC8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a3) {
    char v7 = &qword_48EB50;
  }
  else {
    char v7 = &qword_48EB20;
  }
  memset(v9, 0, sizeof(v9));
  sub_15A9C8((void *)a1, v7, a2, (uint64_t)v10, a4, a5, v9);
  uint64_t v11 = v9;
  sub_7A668((void ***)&v11);
  *(void *)a1 = off_4712E0;
  *(_BYTE *)(a1 + 520) = 0;
  return a1;
}

void sub_15AC54(_Unwind_Exception *a1)
{
  *(void *)(v2 - 24) = v1;
  sub_7A668((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_15AC6C(uint64_t a1, AudioObjectID *a2, AudioObjectPropertyAddress *inAddress)
{
  if (AudioObjectHasProperty(*a2, inAddress))
  {
    LOBYTE(outData) = 0;
    char v13 = 0;
    *(_DWORD *)a1 = 2003329396;
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 0;
    sub_D9A9C((uint64_t)&outData);
    UInt32 ioDataSize = sub_37408(*a2, inAddress, 0, 0LL);
    if (ioDataSize)
    {
      outData = 0LL;
      OSStatus PropertyData = AudioObjectGetPropertyData(*a2, inAddress, 0, 0LL, &ioDataSize, &outData);
      *(_DWORD *)a1 = PropertyData;
      if (!PropertyData)
      {
        char v7 = outData;
        CFTypeRef v10 = outData;
        sub_D9B14(&v9, &v10);
        uint64_t v8 = v9;
        *(_BYTE *)(a1 + 16) = 1;
        *(void *)(a1 + 8) = v8;
        if (v7) {
          CFRelease(v7);
        }
      }
    }
  }

  else
  {
    LOBYTE(outData) = 0;
    char v13 = 0;
    *(_DWORD *)a1 = 2003332927;
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 0;
    sub_D9A9C((uint64_t)&outData);
  }

void *sub_15AD84(void *result, uint64_t a2, CFTypeRef cf)
{
  int v3 = result;
  if (*(_BYTE *)(a2 + 8))
  {
    void *result = *(void *)a2;
    *(void *)a2 = 0LL;
  }

  else
  {
    if (cf) {
      float result = CFRetain(cf);
    }
    void *v3 = cf;
  }

  return result;
}

void sub_15ADD4(void *a1)
{
  uint64_t v1 = (void *)sub_15AEF4(a1);
  operator delete(v1);
}

uint64_t sub_15ADE8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 424LL))(a1);
}

BOOL sub_15ADF4(uint64_t a1)
{
  uint64_t v1 = *(const __CFString **)(a1 + 528);
  if (!v1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_7E414(exception);
  }

  sub_48100((uint64_t)v5, v1);
  if ((v6 & 0x80000000) == 0) {
    return v6 != 0;
  }
  BOOL v2 = v5[1] != 0LL;
  operator delete(v5[0]);
  return v2;
}

void sub_15AE74(_Unwind_Exception *a1)
{
}

uint64_t sub_15AE88(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 424LL))(a1);
}

void *sub_15AE94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *(const __CFString **)(a1 + 528);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_7E414(exception);
  }

  return sub_48100(a2, v2);
}

void sub_15AEE0(_Unwind_Exception *a1)
{
}

uint64_t sub_15AEF4(void *a1)
{
  *a1 = off_471518;
  BOOL v2 = (const void *)a1[66];
  if (v2) {
    CFRelease(v2);
  }
  *a1 = off_4712E0;
  return sub_F8158((uint64_t)a1);
}

uint64_t sub_15AF3C(uint64_t a1)
{
  *(void *)a1 = off_471790;
  return sub_F8158(a1);
}

void sub_15AF4C(void *a1)
{
  *a1 = off_471790;
  uint64_t v1 = (void *)sub_F8158((uint64_t)a1);
  operator delete(v1);
}

uint64_t sub_15AF6C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 520);
}

void sub_15AF74(uint64_t a1, char a2, char a3)
{
  *(_BYTE *)(a1 + 520) = a2 & a3;
  sub_CC160(a1);
}

uint64_t sub_15AF80(uint64_t a1, uint64_t a2, char **a3)
{
  CFStringRef v7 = CFStringCreateWithCString(0LL, "Wired Microphone", 0x600u);
  char v8 = 1;
  sub_15A9C8((void *)a1, &qword_48EBB0, a2, (uint64_t)v12, (uint64_t)v9, (uint64_t)&v7, a3);
  sub_19DFC((uint64_t)&v7);
  sub_19DFC((uint64_t)&v11);
  sub_19DFC((uint64_t)&v10);
  sub_19DFC((uint64_t)v9);
  *(void *)a1 = off_471790;
  *(_BYTE *)(a1 + 520) = 0;
  return a1;
}

void sub_15B048(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  uint64_t v8 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v9 = va_arg(va3, void);
  uint64_t v11 = va_arg(va3, void);
  sub_19DFC((uint64_t)va);
  sub_19DFC((uint64_t)va3);
  sub_19DFC((uint64_t)va2);
  sub_19DFC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_15B080(uint64_t a1)
{
  *(void *)a1 = off_4746F8;
  sub_32C8C(*(void **)(a1 + 40));
  sub_32C8C(*(void **)(a1 + 16));
  return a1;
}

void sub_15B0BC(void **a1)
{
  *a1 = off_4746F8;
  sub_32C8C(a1[5]);
  sub_32C8C(a1[2]);
  operator delete(a1);
}

void sub_15B0F8(uint64_t a1)
{
  uint64_t v2 = **(void **)(a1 + 64);
  sub_15BB00((uint64_t)v10, (void *)(a1 + 8));
  sub_15BB00((uint64_t)v11, (void *)(a1 + 32));
  uint64_t v12 = *(void *)(a1 + 56);
  if (!*(void *)v2)
  {
    CFStringRef v7 = (os_log_t *)sub_138E8(13);
    uint64_t v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
      __int16 v14 = 1024;
      *(_DWORD *)char v15 = 502;
      _os_log_impl(&dword_0, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (*(_BYTE *)(v2 + 8))
  {
    uint64_t v3 = (dispatch_queue_s *)sub_869B4();
    *(void *)buf = v2;
    sub_15BB00((uint64_t)&buf[8], v10);
    sub_15BB00((uint64_t)v16, v11);
    uint64_t v17 = v12;
    unint64_t v4 = operator new(0x40uLL);
    void *v4 = *(void *)buf;
    sub_15BB00((uint64_t)(v4 + 1), &buf[8]);
    sub_15BB00((uint64_t)(v4 + 4), v16);
    v4[7] = v17;
    dispatch_async_f(v3, v4, (dispatch_function_t)sub_15DDCC);
    sub_32C8C((void *)v16[1]);
    sub_32C8C(*(void **)&v15[2]);
  }

  else
  {
    uint64_t v5 = (os_log_t *)sub_138E8(12);
    uint64_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
      __int16 v14 = 1024;
      *(_DWORD *)char v15 = 506;
      _os_log_impl(&dword_0, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d No CommCenter process active.", buf, 0x12u);
    }
  }

  sub_32C8C((void *)v11[1]);
  sub_32C8C((void *)v10[1]);
}

void sub_15B350( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 buf, __int128 a18, __int16 a19, __int16 a20, int a21, int a22)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  if (a2 == 3)
  {
    os_log_t v25 = __cxa_begin_catch(a1);
    uint64_t v26 = (os_log_t *)sub_138E8(13);
    os_log_t v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      int v28 = v25[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a18) = 1024;
      DWORD1(a18) = v28;
      WORD4(a18) = 2080;
      *(void *)((char *)&a18 + 10) = "";
      a20 = 1024;
      a21 = 514;
      BOOL v29 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      BOOL v30 = v27;
      uint32_t v31 = 40;
LABEL_15:
      _os_log_impl(&dword_0, v30, OS_LOG_TYPE_ERROR, v29, (uint8_t *)&buf, v31);
    }
  }

  else
  {
    BOOL v32 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      BOOL v33 = v32;
      BOOL v34 = (os_log_t *)sub_138E8(13);
      os_log_t v35 = *v34;
      if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
      {
        uint64_t v36 = (*(uint64_t (**)(void *))(*(void *)v33 + 16LL))(v33);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a18) = 2080;
        *(void *)((char *)&a18 + 4) = v36;
        WORD6(a18) = 2080;
        *(void *)((char *)&a18 + 14) = "";
        HIWORD(a21) = 1024;
        a22 = 514;
        BOOL v29 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        BOOL v30 = v35;
        uint32_t v31 = 44;
        goto LABEL_15;
      }
    }

    else
    {
      char v37 = (os_log_t *)sub_138E8(13);
      os_log_t v38 = *v37;
      if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a18) = 2080;
        *(void *)((char *)&a18 + 4) = "";
        WORD6(a18) = 1024;
        *(_DWORD *)((char *)&a18 + 14) = 514;
        BOOL v29 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        BOOL v30 = v38;
        uint32_t v31 = 34;
        goto LABEL_15;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x15B1FCLL);
}

void sub_15B5C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

void sub_15B5FC(uint64_t a1)
{
  uint64_t v2 = **(void **)(a1 + 64);
  sub_15BB00((uint64_t)v10, (void *)(a1 + 8));
  sub_15BB00((uint64_t)v11, (void *)(a1 + 32));
  uint64_t v12 = *(void *)(a1 + 56);
  if (!*(void *)v2)
  {
    CFStringRef v7 = (os_log_t *)sub_138E8(13);
    uint64_t v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
      __int16 v14 = 1024;
      *(_DWORD *)char v15 = 502;
      _os_log_impl(&dword_0, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (*(_BYTE *)(v2 + 8))
  {
    uint64_t v3 = (dispatch_queue_s *)sub_869B4();
    *(void *)buf = v2;
    sub_15BB00((uint64_t)&buf[8], v10);
    sub_15BB00((uint64_t)v16, v11);
    uint64_t v17 = v12;
    unint64_t v4 = operator new(0x40uLL);
    void *v4 = *(void *)buf;
    sub_15BB00((uint64_t)(v4 + 1), &buf[8]);
    sub_15BB00((uint64_t)(v4 + 4), v16);
    v4[7] = v17;
    dispatch_async_f(v3, v4, (dispatch_function_t)sub_15D88C);
    sub_32C8C((void *)v16[1]);
    sub_32C8C(*(void **)&v15[2]);
  }

  else
  {
    uint64_t v5 = (os_log_t *)sub_138E8(12);
    uint64_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
      __int16 v14 = 1024;
      *(_DWORD *)char v15 = 506;
      _os_log_impl(&dword_0, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d No CommCenter process active.", buf, 0x12u);
    }
  }

  sub_32C8C((void *)v11[1]);
  sub_32C8C((void *)v10[1]);
}

void sub_15B854( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 buf, __int128 a18, __int16 a19, __int16 a20, int a21, int a22)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  if (a2 == 3)
  {
    os_log_t v25 = __cxa_begin_catch(a1);
    uint64_t v26 = (os_log_t *)sub_138E8(13);
    os_log_t v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      int v28 = v25[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a18) = 1024;
      DWORD1(a18) = v28;
      WORD4(a18) = 2080;
      *(void *)((char *)&a18 + 10) = "";
      a20 = 1024;
      a21 = 514;
      BOOL v29 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      BOOL v30 = v27;
      uint32_t v31 = 40;
LABEL_15:
      _os_log_impl(&dword_0, v30, OS_LOG_TYPE_ERROR, v29, (uint8_t *)&buf, v31);
    }
  }

  else
  {
    BOOL v32 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      BOOL v33 = v32;
      BOOL v34 = (os_log_t *)sub_138E8(13);
      os_log_t v35 = *v34;
      if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
      {
        uint64_t v36 = (*(uint64_t (**)(void *))(*(void *)v33 + 16LL))(v33);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a18) = 2080;
        *(void *)((char *)&a18 + 4) = v36;
        WORD6(a18) = 2080;
        *(void *)((char *)&a18 + 14) = "";
        HIWORD(a21) = 1024;
        a22 = 514;
        BOOL v29 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        BOOL v30 = v35;
        uint32_t v31 = 44;
        goto LABEL_15;
      }
    }

    else
    {
      char v37 = (os_log_t *)sub_138E8(13);
      os_log_t v38 = *v37;
      if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a18) = 2080;
        *(void *)((char *)&a18 + 4) = "";
        WORD6(a18) = 1024;
        *(_DWORD *)((char *)&a18 + 14) = 514;
        BOOL v29 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        BOOL v30 = v38;
        uint32_t v31 = 34;
        goto LABEL_15;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x15B700LL);
}

void sub_15BAC8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

uint64_t sub_15BB00(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0LL;
  uint64_t v3 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  unint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      uint64_t v6 = (unsigned int *)(v5 + 4);
      CFStringRef v7 = *(uint64_t **)(a1 + 8);
      uint64_t v8 = v3;
      uint64_t v9 = *(void *)(a1 + 8);
      uint64_t v10 = v3;
      if (v7)
      {
        do
        {
          uint64_t v8 = (uint64_t **)v9;
          uint64_t v9 = *(void *)(v9 + 8);
        }

        while (v9);
      }

      else
      {
        do
        {
          uint64_t v8 = (uint64_t **)v10[2];
          BOOL v11 = *v8 == (uint64_t *)v10;
          uint64_t v10 = v8;
        }

        while (v11);
      }

      unsigned int v12 = *v6;
      if (*((_DWORD *)v8 + 8) < *v6)
      {
LABEL_8:
        if (v7) {
          char v13 = v8;
        }
        else {
          char v13 = v3;
        }
        if (v7) {
          __int16 v14 = v8 + 1;
        }
        else {
          __int16 v14 = v3;
        }
      }

      else
      {
        char v13 = v3;
        __int16 v14 = v3;
        if (v7)
        {
          __int16 v14 = v3;
          while (1)
          {
            while (1)
            {
              char v13 = (uint64_t **)v7;
              unsigned int v18 = *((_DWORD *)v7 + 8);
              if (v12 >= v18) {
                break;
              }
              CFStringRef v7 = *v13;
              __int16 v14 = v13;
              if (!*v13) {
                goto LABEL_15;
              }
            }

            if (v18 >= v12) {
              break;
            }
            __int16 v14 = v13 + 1;
            CFStringRef v7 = v13[1];
            if (!v7) {
              goto LABEL_15;
            }
          }
        }
      }

      if (!*v14)
      {
LABEL_15:
        char v15 = (uint64_t *)operator new(0x30uLL);
        *((_OWORD *)v15 + 2) = *(_OWORD *)v6;
        sub_32C38((uint64_t **)a1, (uint64_t)v13, v14, v15);
      }

      uint64_t v16 = (void *)v5[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          uint64_t v16 = (void *)*v16;
        }

        while (v16);
      }

      else
      {
        do
        {
          uint64_t v17 = (void *)v5[2];
          BOOL v11 = *v17 == (void)v5;
          uint64_t v5 = v17;
        }

        while (!v11);
      }

      uint64_t v5 = v17;
    }

    while (v17 != v4);
  }

  return a1;
}

void sub_15BC6C(_Unwind_Exception *a1)
{
}

void sub_15BC80(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = sub_138E8(12);
  if ((*(_BYTE *)(v3 + 8) & 1) != 0)
  {
    unint64_t v4 = *(os_log_s **)v3;
    if (*(void *)v3)
    {
      if (os_log_type_enabled(*(os_log_t *)v3, OS_LOG_TYPE_DEBUG))
      {
        sub_15C0F4(v50, (void *)(a1 + 8));
        int v5 = v51;
        uint64_t v6 = (void **)v50[0];
        sub_15C0F4(__p, v2 + 3);
        CFStringRef v7 = v50;
        if (v5 < 0) {
          CFStringRef v7 = v6;
        }
        if (v49 >= 0) {
          uint64_t v8 = __p;
        }
        else {
          uint64_t v8 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315906;
        char v53 = "CoreTelephonyInterface.cpp";
        __int16 v54 = 1024;
        int v55 = 474;
        __int16 v56 = 2080;
        __int16 v57 = v7;
        __int16 v58 = 2080;
        std::string v59 = v8;
        _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d Deactivating Route: %s Current: %s", buf, 0x26u);
        if (v49 < 0) {
          operator delete(__p[0]);
        }
        if (v51 < 0) {
          operator delete(v50[0]);
        }
      }
    }
  }

  uint64_t v9 = *(void **)(a1 + 8);
  if (v9 != (void *)(a1 + 16))
  {
    uint64_t v10 = v2 + 4;
    do
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        unsigned int v12 = *((_DWORD *)v9 + 8);
        char v13 = v2 + 4;
        do
        {
          unsigned int v14 = *(_DWORD *)(v11 + 32);
          BOOL v15 = v14 >= v12;
          if (v14 >= v12) {
            uint64_t v16 = (uint64_t *)v11;
          }
          else {
            uint64_t v16 = (uint64_t *)(v11 + 8);
          }
          if (v15) {
            char v13 = (uint64_t *)v11;
          }
          uint64_t v11 = *v16;
        }

        while (*v16);
        if (v13 != v10 && v12 >= *((_DWORD *)v13 + 8))
        {
          unint64_t v17 = v13[5];
          if (v17)
          {
            if (v17 < v9[5])
            {
              unsigned int v18 = (os_log_t *)sub_138E8(12);
              char v19 = *v18;
              if (*v18)
              {
                if (os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315394;
                  char v53 = "CoreTelephonyInterface.cpp";
                  __int16 v54 = 1024;
                  int v55 = 262;
                  _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Removing more inputs than we have",  buf,  0x12u);
                }
              }
            }

            unint64_t v20 = v13[5];
            unint64_t v21 = v9[5];
            BOOL v15 = v20 >= v21;
            unint64_t v22 = v20 - v21;
            if (!v15) {
              unint64_t v22 = 0LL;
            }
            v13[5] = v22;
          }
        }
      }

      __int16 v23 = (void *)v9[1];
      if (v23)
      {
        do
        {
          int v24 = v23;
          __int16 v23 = (void *)*v23;
        }

        while (v23);
      }

      else
      {
        do
        {
          int v24 = (void *)v9[2];
          BOOL v25 = *v24 == (void)v9;
          uint64_t v9 = v24;
        }

        while (!v25);
      }

      uint64_t v9 = v24;
    }

    while (v24 != (void *)(a1 + 16));
  }

  uint64_t v26 = *(void **)(a1 + 32);
  if (v26 != (void *)(a1 + 40))
  {
    os_log_t v27 = v2 + 7;
    do
    {
      uint64_t v28 = *v27;
      if (*v27)
      {
        unsigned int v29 = *((_DWORD *)v26 + 8);
        BOOL v30 = v2 + 7;
        do
        {
          unsigned int v31 = *(_DWORD *)(v28 + 32);
          BOOL v32 = v31 >= v29;
          if (v31 >= v29) {
            BOOL v33 = (uint64_t *)v28;
          }
          else {
            BOOL v33 = (uint64_t *)(v28 + 8);
          }
          if (v32) {
            BOOL v30 = (uint64_t *)v28;
          }
          uint64_t v28 = *v33;
        }

        while (*v33);
        if (v30 != v27 && v29 >= *((_DWORD *)v30 + 8))
        {
          unint64_t v34 = v30[5];
          if (v34)
          {
            if (v34 < v26[5])
            {
              os_log_t v35 = (os_log_t *)sub_138E8(12);
              uint64_t v36 = *v35;
              if (*v35)
              {
                if (os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315394;
                  char v53 = "CoreTelephonyInterface.cpp";
                  __int16 v54 = 1024;
                  int v55 = 273;
                  _os_log_impl( &dword_0,  v36,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Removing more outputs than we have",  buf,  0x12u);
                }
              }
            }

            unint64_t v37 = v30[5];
            unint64_t v38 = v26[5];
            BOOL v15 = v37 >= v38;
            unint64_t v39 = v37 - v38;
            if (!v15) {
              unint64_t v39 = 0LL;
            }
            v30[5] = v39;
          }
        }
      }

      CFStringRef v40 = (void *)v26[1];
      if (v40)
      {
        do
        {
          char v41 = v40;
          CFStringRef v40 = (void *)*v40;
        }

        while (v40);
      }

      else
      {
        do
        {
          char v41 = (void *)v26[2];
          BOOL v25 = *v41 == (void)v26;
          uint64_t v26 = v41;
        }

        while (!v25);
      }

      uint64_t v26 = v41;
    }

    while (v41 != (void *)(a1 + 40));
  }

  unint64_t v42 = *(void *)(a1 + 56);
  if (v42)
  {
    if (v2[9] > v42)
    {
      char v43 = (os_log_t *)sub_138E8(12);
      CFStringRef v44 = *v43;
      if (*v43)
      {
        if (os_log_type_enabled(*v43, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          char v53 = "CoreTelephonyInterface.cpp";
          __int16 v54 = 1024;
          int v55 = 280;
          _os_log_impl(&dword_0, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d Removing more NR count than we have", buf, 0x12u);
        }
      }
    }

    unint64_t v45 = v2[9];
    unint64_t v46 = *(void *)(a1 + 56);
    BOOL v15 = v45 >= v46;
    unint64_t v47 = v45 - v46;
    if (!v15) {
      unint64_t v47 = 0LL;
    }
    v2[9] = v47;
  }

  sub_15C4D0(v2);
}

void sub_15C0D0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_15C0F4(void *a1, void *a2)
{
  unint64_t v4 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      sub_826EC(&v28, (uint64_t)"Input: ", 7LL);
      sub_2CA1C(&__p, *((unsigned int *)v4 + 8));
      if ((v27 & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if ((v27 & 0x80u) == 0) {
        uint64_t v6 = v27;
      }
      else {
        uint64_t v6 = v26;
      }
      sub_826EC(&v28, (uint64_t)p_p, v6);
      sub_826EC(&v28, (uint64_t)" Count: ", 8LL);
      CFStringRef v7 = (void *)std::ostream::operator<<(&v28, v4[5]);
      std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24LL)));
      uint64_t v8 = std::locale::use_facet(&v32, &std::ctype<char>::id);
      uint64_t v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10LL);
      std::locale::~locale(&v32);
      std::ostream::put(v7, v9);
      std::ostream::flush(v7);
      uint64_t v10 = (void *)v4[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = (void *)*v10;
        }

        while (v10);
      }

      else
      {
        do
        {
          uint64_t v11 = (void *)v4[2];
          BOOL v12 = *v11 == (void)v4;
          unint64_t v4 = v11;
        }

        while (!v12);
      }

      unint64_t v4 = v11;
    }

    while (v11 != a2 + 1);
  }

  char v13 = (void *)a2[3];
  if (v13 != a2 + 4)
  {
    do
    {
      sub_826EC(&v28, (uint64_t)"Output: ", 8LL);
      sub_2CA1C(&__p, *((unsigned int *)v13 + 8));
      if ((v27 & 0x80u) == 0) {
        unsigned int v14 = &__p;
      }
      else {
        unsigned int v14 = __p;
      }
      if ((v27 & 0x80u) == 0) {
        uint64_t v15 = v27;
      }
      else {
        uint64_t v15 = v26;
      }
      sub_826EC(&v28, (uint64_t)v14, v15);
      sub_826EC(&v28, (uint64_t)" Count: ", 8LL);
      uint64_t v16 = (void *)std::ostream::operator<<(&v28, v13[5]);
      std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*v16 - 24LL)));
      unint64_t v17 = std::locale::use_facet(&v32, &std::ctype<char>::id);
      uint64_t v18 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10LL);
      std::locale::~locale(&v32);
      std::ostream::put(v16, v18);
      std::ostream::flush(v16);
      char v19 = (void *)v13[1];
      if (v19)
      {
        do
        {
          unint64_t v20 = v19;
          char v19 = (void *)*v19;
        }

        while (v19);
      }

      else
      {
        do
        {
          unint64_t v20 = (void *)v13[2];
          BOOL v12 = *v20 == (void)v13;
          char v13 = v20;
        }

        while (!v12);
      }

      char v13 = v20;
    }

    while (v20 != a2 + 4);
  }

  sub_826EC(&v28, (uint64_t)"VP Use Count: ", 14LL);
  unint64_t v21 = (void *)std::ostream::operator<<(&v28, a2[6]);
  std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24LL)));
  unint64_t v22 = std::locale::use_facet((const std::locale *)&__p, &std::ctype<char>::id);
  uint64_t v23 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10LL);
  std::locale::~locale((std::locale *)&__p);
  std::ostream::put(v21, v23);
  std::ostream::flush(v21);
  sub_82924(a1, (uint64_t)v29);
  if (v30 < 0) {
    operator delete((void *)v29[8]);
  }
  std::streambuf::~streambuf(v29);
  return std::ios::~ios(&v31);
}

void sub_15C46C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void sub_15C4D0(void *a1)
{
  uint64_t v2 = (const void *)kCTAudioInputsKey;
  if (kCTAudioInputsKey)
  {
    CFRetain(kCTAudioInputsKey);
    sub_7F234(&v41, v2);
  }

  else
  {
    CFTypeRef v41 = 0LL;
  }

  sub_15CBB0((CFDictionaryRef *)&v40, (uint64_t)(a1 + 3), 1);
  sub_15D500(buf, v41, &v40);
  uint64_t v3 = (const void *)kCTAudioOutputsKey;
  if (kCTAudioOutputsKey) {
    CFRetain(kCTAudioOutputsKey);
  }
  sub_7F234(&v39, v3);
  sub_15CBB0((CFDictionaryRef *)&v38, (uint64_t)(a1 + 3), 0);
  sub_15D500((int *)((char *)&v49 + 2), v39, &v38);
  unint64_t v4 = (const void *)kCTAudioNoiseReductionEnabledKey;
  if (kCTAudioNoiseReductionEnabledKey) {
    CFRetain(kCTAudioNoiseReductionEnabledKey);
  }
  sub_7F234(&cf, v4);
  uint64_t v5 = a1[9];
  CFTypeRef v6 = cf;
  if (cf) {
    CFRetain(cf);
  }
  CFStringRef v7 = &kCFBooleanTrue;
  if (!v5) {
    CFStringRef v7 = &kCFBooleanFalse;
  }
  CFBooleanRef v8 = *v7;
  CFTypeRef v52 = v6;
  CFBooleanRef v53 = v8;
  uint64_t v9 = (const void *)kCTAudioConnectedPortsKey;
  if (kCTAudioConnectedPortsKey) {
    CFRetain(kCTAudioConnectedPortsKey);
  }
  sub_7F234(&v36, v9);
  uint64_t v10 = (void *)a1[10];
  if (v10 == a1 + 11)
  {
LABEL_22:
    __int16 v56 = 0LL;
    __int16 v57 = 0LL;
    uint64_t v58 = 0LL;
    sub_7E328(&__p, 0LL);
    unsigned int v14 = v56;
    uint64_t v15 = v57;
    if (v56 != v57)
    {
      uint64_t v16 = __p;
      do
      {
        uint64_t v17 = *v14++;
        *v16++ = v17;
      }

      while (v14 != v15);
    }

    CFArrayRef v18 = sub_7E39C((const void **)__p, (uint64_t)v44);
    if (__p)
    {
      CFStringRef v44 = __p;
      operator delete(__p);
    }

    __int128 __p = &v56;
    sub_8C8F0((void ***)&__p);
  }

  else
  {
    while (*((_DWORD *)v10 + 7) != 1885892727)
    {
      uint64_t v11 = (void *)v10[1];
      if (v11)
      {
        do
        {
          BOOL v12 = v11;
          uint64_t v11 = (void *)*v11;
        }

        while (v11);
      }

      else
      {
        do
        {
          BOOL v12 = (void *)v10[2];
          BOOL v13 = *v12 == (void)v10;
          uint64_t v10 = v12;
        }

        while (!v13);
      }

      uint64_t v10 = v12;
      if (v12 == a1 + 11) {
        goto LABEL_22;
      }
    }

    char v19 = (const void *)kCTAudioHeadphonesWiredPort;
    if (kCTAudioHeadphonesWiredPort) {
      CFRetain(kCTAudioHeadphonesWiredPort);
    }
    sub_7F234(&v56, v19);
    sub_7E328(&__p, 1uLL);
    *(void *)__int128 __p = v56;
    CFArrayRef v18 = sub_7E39C((const void **)__p, (uint64_t)v44);
    if (__p)
    {
      CFStringRef v44 = __p;
      operator delete(__p);
    }

    if (v56) {
      CFRelease(v56);
    }
  }

  CFTypeRef v20 = v36;
  if (v36) {
    CFRetain(v36);
  }
  CFTypeRef v54 = v20;
  if (v18) {
    CFRetain(v18);
  }
  CFArrayRef v55 = v18;
  v42[0] = buf;
  v42[1] = 4LL;
  CFDictionaryRef v21 = sub_5A950((uint64_t)v42);
  for (uint64_t i = 0LL; i != -64; i -= 16LL)
  {
    uint64_t v23 = *(CFArrayRef *)((char *)&v55 + i);
    if (v23) {
      CFRelease(v23);
    }
    int v24 = *(CFTypeRef *)((char *)&v54 + i);
    if (v24) {
      CFRelease(v24);
    }
  }

  if (v18) {
    CFRelease(v18);
  }
  if (v36) {
    CFRelease(v36);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v38) {
    CFRelease(v38);
  }
  if (v39) {
    CFRelease(v39);
  }
  if (v40) {
    CFRelease(v40);
  }
  if (v41) {
    CFRelease(v41);
  }
  BOOL v25 = (const void *)a1[2];
  if (!v25 || !CFEqual(v21, v25))
  {
    uint64_t v26 = sub_138E8(12);
    if ((*(_BYTE *)(v26 + 8) & 1) != 0)
    {
      unsigned __int8 v27 = *(os_log_s **)v26;
      if (*(void *)v26)
      {
        if (os_log_type_enabled(*(os_log_t *)v26, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v28 = CFCopyDescription(v21);
          sub_48188((uint64_t)&__p, v28);
          if (v28) {
            CFRelease(v28);
          }
          p_p = &__p;
          if (v45 < 0) {
            p_p = __p;
          }
          *(_DWORD *)buf = 136315650;
          unint64_t v47 = "CoreTelephonyInterface.cpp";
          __int16 v48 = 1024;
          int v49 = 633;
          __int16 v50 = 2080;
          *(void *)char v51 = p_p;
          _os_log_impl( &dword_0,  v27,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Sending route info '%s' to Core Telephony",  buf,  0x1Cu);
          if (v45 < 0) {
            operator delete(__p);
          }
        }
      }
    }

    unint64_t active = _CTServerConnectionSetActiveAudioSystemConfiguration(*a1, v21);
    int v31 = active;
    unint64_t v32 = HIDWORD(active);
    if (active)
    {
      BOOL v33 = (os_log_t *)sub_138E8(12);
      unint64_t v34 = *v33;
      if (*v33)
      {
        if (os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          unint64_t v47 = "CoreTelephonyInterface.cpp";
          __int16 v48 = 1024;
          int v49 = 639;
          __int16 v50 = 1024;
          *(_DWORD *)char v51 = v31;
          *(_WORD *)&v51[4] = 1024;
          *(_DWORD *)&v51[6] = v32;
          _os_log_impl( &dword_0,  v34,  OS_LOG_TYPE_ERROR,  "%25s:%-5d _CTServerConnectionSetActiveAudioSystemConfiguration returned error: {domain, error} : {%d, %d}",  buf,  0x1Eu);
        }
      }
    }

    os_log_t v35 = (const void *)a1[2];
    a1[2] = v21;
    CFRetain(v21);
    if (v35) {
      CFRelease(v35);
    }
  }

  CFRelease(v21);
}

void sub_15C9E0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20, char a21, char a22, int a23, __int16 a24, char a25, char a26, int a27, __int16 a28, char a29, char a30, int a31, __int16 a32, char a33, char a34, uint64_t a35, uint64_t a36, uint64_t a37, void *__p, uint64_t a39, uint64_t a40, char a41)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

void sub_15CBB0(CFDictionaryRef *a1, uint64_t a2, int a3)
{
  if (a3) {
    uint64_t v4 = 0LL;
  }
  else {
    uint64_t v4 = 24LL;
  }
  if (a3) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = a2 + 24;
  }
  if (a3)
  {
    CFTypeRef v6 = (const void *)kCTAudioBuiltInMic1Key;
    if (kCTAudioBuiltInMic1Key)
    {
      CFRetain(kCTAudioBuiltInMic1Key);
      sub_7F234(v70, v6);
      CFTypeRef v7 = v70[0];
    }

    else
    {
      CFTypeRef v7 = 0LL;
    }

    *(void *)buf = v7;
    v70[0] = 0LL;
    buf[8] = 0;
    uint64_t v10 = (const void *)kCTAudioBuiltInMic2Key;
    if (kCTAudioBuiltInMic2Key) {
      CFRetain(kCTAudioBuiltInMic2Key);
    }
    sub_7F234(&v72, v10);
    *(void *)&_DWORD buf[16] = v72;
    CFTypeRef v72 = 0LL;
    _BYTE buf[24] = 0;
    uint64_t v11 = (const void *)kCTAudioBuiltInMic3Key;
    if (kCTAudioBuiltInMic3Key) {
      CFRetain(kCTAudioBuiltInMic3Key);
    }
    sub_7F234(&cf, v11);
    *(void *)&_BYTE buf[32] = cf;
    CFTypeRef cf = 0LL;
    char v74 = 0;
    sub_15D55C((uint64_t)&v66, (uint64_t)buf, 3LL);
    for (uint64_t i = 32LL; i != -16; i -= 16LL)
    {
      BOOL v13 = *(const void **)&buf[i];
      if (v13) {
        CFRelease(v13);
      }
    }

    if (cf) {
      CFRelease(cf);
    }
    if (v72) {
      CFRelease(v72);
    }
    CFTypeRef v14 = v70[0];
    if (v70[0]) {
LABEL_41:
    }
      CFRelease(v14);
  }

  else
  {
    CFBooleanRef v8 = (const void *)kCTAudioSpeakerKey;
    if (kCTAudioSpeakerKey)
    {
      CFRetain(kCTAudioSpeakerKey);
      sub_7F234(v70, v8);
      CFTypeRef v9 = v70[0];
    }

    else
    {
      CFTypeRef v9 = 0LL;
    }

    *(void *)buf = v9;
    v70[0] = 0LL;
    buf[8] = 0;
    uint64_t v15 = (const void *)kCTAudioOtherKey;
    if (kCTAudioOtherKey) {
      CFRetain(kCTAudioOtherKey);
    }
    sub_7F234(&v72, v15);
    *(void *)&_DWORD buf[16] = v72;
    CFTypeRef v72 = 0LL;
    _BYTE buf[24] = 0;
    uint64_t v16 = (const void *)kCTAudioReceiverKey;
    if (kCTAudioReceiverKey) {
      CFRetain(kCTAudioReceiverKey);
    }
    sub_7F234(&cf, v16);
    *(void *)&_BYTE buf[32] = cf;
    CFTypeRef cf = 0LL;
    char v74 = 0;
    sub_15D55C((uint64_t)&v66, (uint64_t)buf, 3LL);
    for (uint64_t j = 32LL; j != -16; j -= 16LL)
    {
      CFArrayRef v18 = *(const void **)&buf[j];
      if (v18) {
        CFRelease(v18);
      }
    }

    if (cf) {
      CFRelease(cf);
    }
    if (v72) {
      CFRelease(v72);
    }
    CFTypeRef v14 = v70[0];
    if (v70[0]) {
      goto LABEL_41;
    }
  }

  char v19 = *(void **)(a2 + v4);
  CFTypeRef v20 = (void *)(v5 + 8);
  if (v19 != (void *)(v5 + 8))
  {
    CFDictionaryRef v21 = "Output";
    unint64_t v22 = (const void *)kCTAudioReceiverKey;
    if (a3) {
      CFDictionaryRef v21 = "Input";
    }
    __int128 v62 = v21;
    uint64_t v23 = (const void *)kCTAudioOtherKey;
    int v24 = (const void *)kCTAudioBuiltInMic3Key;
    BOOL v25 = (const void *)kCTAudioSpeakerKey;
    uint64_t v26 = (const void *)kCTAudioBuiltInMic2Key;
    unsigned __int8 v27 = (const void *)kCTAudioBuiltInMic1Key;
    std::string v64 = (const void *)kCTAudioSpeakerKey;
    while (!v19[5])
    {
LABEL_90:
      CFStringRef v44 = (void *)v19[1];
      if (v44)
      {
        do
        {
          char v45 = v44;
          CFStringRef v44 = (void *)*v44;
        }

        while (v44);
      }

      else
      {
        do
        {
          char v45 = (void *)v19[2];
          BOOL v29 = *v45 == (void)v19;
          char v19 = v45;
        }

        while (!v29);
      }

      char v19 = v45;
      if (v45 == v20) {
        goto LABEL_96;
      }
    }

    int v28 = *((_DWORD *)v19 + 8);
    if (a3)
    {
      if (v28 <= 1768778033)
      {
        if (v28 != 1718446435)
        {
          unsigned __int16 v31 = 26929;
LABEL_66:
          if (v28 != (v31 | 0x696D0000))
          {
            CFTypeRef v72 = 0LL;
            goto LABEL_81;
          }

          if (v27)
          {
            CFRetain(v27);
            char v30 = v27;
            goto LABEL_72;
          }

          goto LABEL_71;
        }

        if (v24)
        {
          CFRetain(v24);
          char v30 = v24;
          goto LABEL_72;
        }
      }

      else
      {
        BOOL v29 = v28 == 1768778034 || v28 == 1936550243;
        if (!v29)
        {
          unsigned __int16 v31 = 26979;
          goto LABEL_66;
        }

        if (v26)
        {
          CFRetain(v26);
          char v30 = v26;
          goto LABEL_72;
        }
      }
    }

    else if (v28 == 1886613611)
    {
      if (v25)
      {
        CFRetain(v25);
        char v30 = v25;
        goto LABEL_72;
      }
    }

    else if (v28 == 1886545251)
    {
      if (v22)
      {
        CFRetain(v22);
        char v30 = v22;
        goto LABEL_72;
      }
    }

    else if (v23)
    {
      CFRetain(v23);
      char v30 = v23;
      goto LABEL_72;
    }

LABEL_81:
    uint64_t v41 = sub_138E8(12);
    if ((*(_BYTE *)(v41 + 8) & 1) != 0)
    {
      unint64_t v42 = *(os_log_s **)v41;
      if (*(void *)v41)
      {
        if (os_log_type_enabled(*(os_log_t *)v41, OS_LOG_TYPE_DEBUG))
        {
          sub_2CA1C(v70, *((unsigned int *)v19 + 8));
          char v43 = v70;
          if ((v71 & 0x8000000000000000LL) != 0LL) {
            char v43 = (CFTypeRef *)v70[0];
          }
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 202;
          *(_WORD *)&_BYTE buf[18] = 2080;
          *(void *)&buf[20] = v62;
          *(_WORD *)&_BYTE buf[28] = 2080;
          *(void *)&buf[30] = v43;
          _os_log_impl(&dword_0, v42, OS_LOG_TYPE_DEBUG, "%25s:%-5d Unable to determine CTkey for %s %s", buf, 0x26u);
          if (SHIBYTE(v71) < 0) {
            operator delete((void *)v70[0]);
          }
        }
      }
    }

    goto LABEL_88;
  }

void sub_15D350( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20, int a21, __int16 a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_15D500(void *a1, CFTypeRef cf, const void **a3)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  CFTypeRef v6 = *a3;
  if (v6) {
    CFRetain(v6);
  }
  a1[1] = v6;
  return a1;
}

uint64_t sub_15D55C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0LL;
  uint64_t v4 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v5 = a2;
    uint64_t v6 = a2 + 16 * a3;
    while (1)
    {
      uint64_t v7 = *(void *)(a1 + 8);
      CFBooleanRef v8 = v4;
      if (v7)
      {
        do
        {
          uint64_t v9 = v7;
          uint64_t v7 = *(void *)(v7 + 8);
        }

        while (v7);
      }

      else
      {
        do
        {
          uint64_t v9 = (uint64_t)v8[2];
          BOOL v10 = *(void *)v9 == (void)v8;
          CFBooleanRef v8 = (uint64_t **)v9;
        }

        while (v10);
      }

      if ((unint64_t)sub_5586C(*(const __CFString **)(v9 + 32), (const __CFString **)v5) >= 2)
      {
        if (!*v4) {
          goto LABEL_10;
        }
LABEL_12:
        uint64_t v17 = (void *)v9;
        uint64_t v11 = (uint64_t **)(v9 + 8);
        goto LABEL_14;
      }

      uint64_t v11 = (uint64_t **)sub_15D74C(a1, &v17, (const __CFString **)v5);
LABEL_14:
      if (!*v11) {
        goto LABEL_15;
      }
LABEL_18:
      v5 += 16LL;
      if (v5 == v6) {
        return a1;
      }
    }

    uint64_t v9 = (uint64_t)v4;
    if (!v7)
    {
LABEL_10:
      uint64_t v17 = v4;
      uint64_t v11 = v4;
LABEL_15:
      BOOL v12 = operator new(0x30uLL);
      v15[1] = v4;
      BOOL v13 = *(const __CFString **)v5;
      if (*(void *)v5) {
        CFRetain(*(CFTypeRef *)v5);
      }
      v12[4] = v13;
      *((_BYTE *)v12 + 40) = *(_BYTE *)(v5 + 8);
      char v16 = 1;
      sub_32C38((uint64_t **)a1, (uint64_t)v17, v11, v12);
      v15[0] = 0LL;
      sub_15D7E4((uint64_t)v15);
      goto LABEL_18;
    }

    goto LABEL_12;
  }

  return a1;
}

void sub_15D6AC(_Unwind_Exception *a1)
{
}

const void **sub_15D6C0(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_15D6F0(void *a1)
{
  if (a1)
  {
    sub_15D6F0(*a1);
    sub_15D6F0(a1[1]);
    sub_15D730((const void *)a1[4]);
    operator delete(a1);
  }

void sub_15D730(const void *a1)
{
  if (a1) {
    CFRelease(a1);
  }
}

void *sub_15D74C(uint64_t a1, void *a2, const __CFString **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = (void *)v4;
        CFBooleanRef v8 = (const __CFString **)(v4 + 32);
        uint64_t v4 = *v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      uint64_t v5 = v7 + 1;
      uint64_t v4 = v7[1];
    }

    while (v4);
  }

  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }

void sub_15D7E4(uint64_t a1)
{
  uint64_t v1 = *(const void ***)a1;
  *(void *)a1 = 0LL;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16)) {
      sub_15D730(v1[4]);
    }
    operator delete(v1);
  }

void *sub_15D828(void *a1, CFTypeRef cf, _BYTE *a3)
{
  if (cf) {
    CFRetain(cf);
  }
  if (*a3) {
    uint64_t v6 = &kCFBooleanTrue;
  }
  else {
    uint64_t v6 = &kCFBooleanFalse;
  }
  CFBooleanRef v7 = *v6;
  *a1 = cf;
  a1[1] = v7;
  return a1;
}

void sub_15D88C(void **a1)
{
  if (a1) {
    sub_15DB40(a1);
  }
}

void sub_15D8F4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    uint64_t v15 = __cxa_begin_catch(exception_object);
    char v16 = (os_log_t *)sub_138E8(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(va_start(va, a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(va_start(va, a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 98;
      char v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      CFTypeRef v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }

  else
  {
    unint64_t v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint64_t v23 = v22;
      int v24 = (os_log_t *)sub_138E8(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16LL))(v23);
        LODWORD(va_start(va, a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(va_start(va, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 98;
        char v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        CFTypeRef v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      unsigned __int8 v27 = (os_log_t *)sub_138E8(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(va_start(va, a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(va_start(va, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 98;
        char v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        CFTypeRef v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x15D8B8LL);
}

void sub_15DB40(void **a1)
{
}

void sub_15DB70(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = sub_138E8(12);
  if ((*(_BYTE *)(v3 + 8) & 1) != 0)
  {
    uint64_t v4 = *(os_log_s **)v3;
    if (*(void *)v3)
    {
      if (os_log_type_enabled(*(os_log_t *)v3, OS_LOG_TYPE_DEBUG))
      {
        sub_15C0F4(v22, a1 + 1);
        int v5 = v23;
        uint64_t v6 = (void **)v22[0];
        sub_15C0F4(__p, (void *)(v2 + 24));
        CFBooleanRef v7 = v22;
        if (v5 < 0) {
          CFBooleanRef v7 = v6;
        }
        if (v21 >= 0) {
          CFBooleanRef v8 = __p;
        }
        else {
          CFBooleanRef v8 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315906;
        os_log_t v25 = "CoreTelephonyInterface.cpp";
        __int16 v26 = 1024;
        int v27 = 463;
        __int16 v28 = 2080;
        BOOL v29 = v7;
        __int16 v30 = 2080;
        unsigned __int16 v31 = v8;
        _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d Activating Route: %s Current: %s", buf, 0x26u);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
        if (v23 < 0) {
          operator delete(v22[0]);
        }
      }
    }
  }

  uint64_t v9 = (uint64_t *)a1[1];
  if (v9 != a1 + 2)
  {
    do
    {
      uint64_t v10 = v9[5];
      uint64_t v11 = sub_12A68C((uint64_t **)(v2 + 24), *((_DWORD *)v9 + 8), (_DWORD *)v9 + 8);
      v11[5] = (uint64_t *)((char *)v11[5] + v10);
      BOOL v12 = (uint64_t *)v9[1];
      if (v12)
      {
        do
        {
          BOOL v13 = v12;
          BOOL v12 = (uint64_t *)*v12;
        }

        while (v12);
      }

      else
      {
        do
        {
          BOOL v13 = (uint64_t *)v9[2];
          BOOL v14 = *v13 == (void)v9;
          uint64_t v9 = v13;
        }

        while (!v14);
      }

      uint64_t v9 = v13;
    }

    while (v13 != a1 + 2);
  }

  uint64_t v15 = (uint64_t *)a1[4];
  if (v15 != a1 + 5)
  {
    do
    {
      uint64_t v16 = v15[5];
      os_log_t v17 = sub_12A68C((uint64_t **)(v2 + 48), *((_DWORD *)v15 + 8), (_DWORD *)v15 + 8);
      v17[5] = (uint64_t *)((char *)v17[5] + v16);
      int v18 = (uint64_t *)v15[1];
      if (v18)
      {
        do
        {
          char v19 = v18;
          int v18 = (uint64_t *)*v18;
        }

        while (v18);
      }

      else
      {
        do
        {
          char v19 = (uint64_t *)v15[2];
          BOOL v14 = *v19 == (void)v15;
          uint64_t v15 = v19;
        }

        while (!v14);
      }

      uint64_t v15 = v19;
    }

    while (v19 != a1 + 5);
  }

  *(void *)(v2 + 72) += a1[7];
  sub_15C4D0((void *)v2);
}

void sub_15DDAC(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_15DDCC(uint64_t *a1)
{
  if (a1) {
    sub_15DB40((void **)a1);
  }
}

void sub_15DE34( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    uint64_t v15 = __cxa_begin_catch(exception_object);
    uint64_t v16 = (os_log_t *)sub_138E8(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(va_start(va, a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(va_start(va, a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 98;
      char v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      CFTypeRef v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }

  else
  {
    unint64_t v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      char v23 = v22;
      int v24 = (os_log_t *)sub_138E8(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16LL))(v23);
        LODWORD(va_start(va, a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(va_start(va, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 98;
        char v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        CFTypeRef v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      int v27 = (os_log_t *)sub_138E8(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(va_start(va, a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(va_start(va, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 98;
        char v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        CFTypeRef v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x15DDF8LL);
}

uint64_t sub_15E080(uint64_t a1, const __CFDictionary **a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 0;
  *(int64x2_t *)(a1 + 8) = vdupq_n_s64(0x40BF400000000000uLL);
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_7E414(exception);
  }

  uint64_t v4 = (const __CFString *)sub_A15A4(*a2, kCTAudioVocoderType);
  if (v4)
  {
    sub_7D2D4((CFTypeID)buf, v4);
    if (buf[24])
    {
      if ((buf[23] & 0x80000000) != 0)
      {
        unint64_t v42 = *(void **)buf;
        sub_24054(__p, *(void **)buf, *(unint64_t *)&buf[8]);
        if (buf[24]) {
          operator delete(v42);
        }
      }

      else
      {
        *(_OWORD *)__int128 __p = *(_OWORD *)buf;
        uint64_t v51 = *(void *)&buf[16];
      }

      goto LABEL_8;
    }
  }

  else
  {
    buf[0] = 0;
    _BYTE buf[24] = 0;
  }

  __p[0] = 0LL;
  __p[1] = 0LL;
  uint64_t v51 = 0LL;
LABEL_8:
  int v5 = *a2;
  if (!*a2)
  {
    unint64_t v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v47, "Could not construct");
  }

  *(_DWORD *)buf = 0;
  unsigned int v6 = sub_15ECE4(v5, kCTAudioVocoderSampleRate, (unsigned int *)buf);
  CFBooleanRef v7 = *a2;
  if (!*a2)
  {
    uint64_t v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v48, "Could not construct");
  }

  *(_DWORD *)buf = 0;
  unsigned int v8 = sub_15ECE4(v7, kCTAudioVocoderI2SClockRate, (unsigned int *)buf);
  uint64_t v9 = sub_138E8(12);
  uint64_t v10 = sub_138E8(39);
  char v11 = 0;
  uint64_t v12 = 0LL;
  *(void *)buf = 0x100000002LL;
  uint64_t v13 = *(void *)(v9 + 8);
  while (1)
  {
    uint64_t v14 = *(int *)&buf[4 * v12];
    char v15 = v11;
    if (((v13 & v14) != 0) != ((*(void *)(v10 + 8) & v14) != 0)) {
      break;
    }
    char v11 = 1;
    uint64_t v12 = 1LL;
    if ((v15 & 1) != 0) {
      goto LABEL_16;
    }
  }

  if ((v13 & v14) == 0) {
    uint64_t v9 = v10;
  }
LABEL_16:
  uint64_t v16 = *(os_log_s **)v9;
  if (v16 && os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    os_log_t v17 = __p;
    if (v51 < 0) {
      os_log_t v17 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136316162;
    *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 338;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&buf[20] = v17;
    __int16 v78 = 1024;
    *(_DWORD *)uint64_t v79 = v6;
    *(_WORD *)&v79[4] = 1024;
    *(_DWORD *)&v79[6] = v8;
    _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d vocoder type is %s, vocoder sample rate is %u Hz, hardware sample rate is %u",  buf,  0x28u);
  }

  *(double *)(a1 + 8) = sub_15ED24(v6);
  *(double *)(a1 + 16) = sub_15ED24(v8);
  unsigned __int8 v18 = atomic_load((unsigned __int8 *)&qword_48ED20);
  if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_48ED20))
  {
    sub_48E98(&v76, kCTAudioVocoderTypeQCELP13);
    *(std::string *)buf = v76;
    memset(&v76, 0, sizeof(v76));
    *(_DWORD *)&_BYTE buf[24] = 1902341232;
    sub_48E98(v74, kCTAudioVocoderTypeEVRC);
    *(_OWORD *)&v79[2] = *(_OWORD *)v74;
    uint64_t v80 = v75;
    v74[1] = 0LL;
    uint64_t v75 = 0LL;
    v74[0] = 0LL;
    int v81 = 1702261347;
    sub_48E98(&v72, kCTAudioVocoderTypeEVRCB);
    __int128 v82 = v72;
    uint64_t v83 = v73;
    uint64_t v73 = 0LL;
    __int128 v72 = 0uLL;
    int v84 = 1702261346;
    sub_48E98(v70, kCTAudioVocoderType4GVNB);
    __int128 v85 = *(_OWORD *)v70;
    uint64_t v86 = v71;
    v70[1] = 0LL;
    uint64_t v71 = 0LL;
    v70[0] = 0LL;
    int v87 = 880176738;
    sub_48E98(&v68, kCTAudioVocoderType4GVWB);
    __int128 v88 = v68;
    uint64_t v89 = v69;
    uint64_t v69 = 0LL;
    __int128 v68 = 0uLL;
    int v90 = 880179042;
    sub_48E98(v66, kCTAudioVocoderType4GVNW);
    __int128 v91 = *(_OWORD *)v66;
    uint64_t v92 = v67;
    v66[1] = 0LL;
    uint64_t v67 = 0LL;
    v66[0] = 0LL;
    int v93 = 880176759;
    sub_48E98(&v64, kCTAudioVocoderTypeFR);
    __int128 v94 = v64;
    uint64_t v95 = v65;
    uint64_t v65 = 0LL;
    __int128 v64 = 0uLL;
    int v96 = 1718755360;
    sub_48E98(v62, kCTAudioVocoderTypeHR);
    __int128 v97 = *(_OWORD *)v62;
    uint64_t v98 = v63;
    v62[1] = 0LL;
    uint64_t v63 = 0LL;
    v62[0] = 0LL;
    int v99 = 1752309792;
    sub_48E98(v60, kCTAudioVocoderTypeEFR);
    __int128 v100 = *(_OWORD *)v60;
    uint64_t v101 = v61;
    v60[1] = 0LL;
    uint64_t v61 = 0LL;
    v60[0] = 0LL;
    int v102 = 1701212704;
    sub_48E98(v58, kCTAudioVocoderTypeAMR);
    __int128 v103 = *(_OWORD *)v58;
    uint64_t v104 = v59;
    v58[1] = 0LL;
    uint64_t v59 = 0LL;
    v58[0] = 0LL;
    int v105 = 1935764850;
    sub_48E98(v56, kCTAudioVocoderTypeWAMR);
    __int128 v106 = *(_OWORD *)v56;
    uint64_t v107 = v57;
    v56[1] = 0LL;
    uint64_t v57 = 0LL;
    v56[0] = 0LL;
    int v108 = 1935767394;
    sub_48E98(v54, kCTAudioVocoderTypeEAMR);
    __int128 v109 = *(_OWORD *)v54;
    uint64_t v110 = v55;
    v54[1] = 0LL;
    uint64_t v55 = 0LL;
    v54[0] = 0LL;
    int v111 = 1700883826;
    sub_48E98(v52, kCTAudioVocoderTypeEVS);
    __int128 v112 = *(_OWORD *)v52;
    uint64_t v113 = v53;
    v52[1] = 0LL;
    uint64_t v53 = 0LL;
    v52[0] = 0LL;
    int v114 = 1936029299;
    sub_15EE74((uint64_t)buf, 13LL);
    uint64_t v49 = 52LL;
    do
    {
      if (SHIBYTE(v76.__r_.__value_.__r.__words[v49 + 1]) < 0) {
        operator delete(*(void **)((char *)&v75 + v49 * 8));
      }
      v49 -= 4LL;
    }

    while (v49 * 8);
    if (SHIBYTE(v53) < 0) {
      operator delete(v52[0]);
    }
    if (SHIBYTE(v55) < 0) {
      operator delete(v54[0]);
    }
    if (SHIBYTE(v57) < 0) {
      operator delete(v56[0]);
    }
    if (SHIBYTE(v59) < 0) {
      operator delete(v58[0]);
    }
    if (SHIBYTE(v61) < 0) {
      operator delete(v60[0]);
    }
    if (SHIBYTE(v63) < 0) {
      operator delete(v62[0]);
    }
    if (SHIBYTE(v65) < 0) {
      operator delete((void *)v64);
    }
    if (SHIBYTE(v67) < 0) {
      operator delete(v66[0]);
    }
    if (SHIBYTE(v69) < 0) {
      operator delete((void *)v68);
    }
    if (SHIBYTE(v71) < 0) {
      operator delete(v70[0]);
    }
    if (SHIBYTE(v73) < 0) {
      operator delete((void *)v72);
    }
    if (SHIBYTE(v75) < 0) {
      operator delete(v74[0]);
    }
    __cxa_guard_release(&qword_48ED20);
  }

  unint64_t v19 = sub_7ED44((uint64_t)__p);
  unint64_t v20 = *((void *)&xmmword_48ECF8 + 1);
  if (*((void *)&xmmword_48ECF8 + 1))
  {
    unint64_t v21 = v19;
    uint8x8_t v22 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_48ECF8 + 8));
    v22.i16[0] = vaddlv_u8(v22);
    unint64_t v23 = v22.u32[0];
    if (v22.u32[0] > 1uLL)
    {
      unint64_t v24 = v19;
      if (v19 >= *((void *)&xmmword_48ECF8 + 1)) {
        unint64_t v24 = v19 % *((void *)&xmmword_48ECF8 + 1);
      }
    }

    else
    {
      unint64_t v24 = (*((void *)&xmmword_48ECF8 + 1) - 1LL) & v19;
    }

    os_log_t v25 = *(uint64_t ***)(xmmword_48ECF8 + 8 * v24);
    if (v25)
    {
      for (uint64_t i = *v25; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v27 = i[1];
        if (v21 == v27)
        {
          if (sub_7F194((unsigned __int8 *)i + 16, (unsigned __int8 *)__p))
          {
            unsigned int v43 = i[5] & 0xFFFFFF00;
            int v44 = *((_DWORD *)i + 10);
            uint64_t v45 = 0x100000000LL;
            goto LABEL_69;
          }
        }

        else
        {
          if (v23 > 1)
          {
            if (v27 >= v20) {
              v27 %= v20;
            }
          }

          else
          {
            v27 &= v20 - 1;
          }

          if (v27 != v24) {
            break;
          }
        }
      }
    }
  }

  uint64_t v28 = sub_138E8(12);
  uint64_t v29 = sub_138E8(39);
  char v30 = 0;
  uint64_t v31 = 0LL;
  *(void *)buf = 0x100000002LL;
  uint64_t v32 = *(void *)(v28 + 8);
  while (1)
  {
    uint64_t v33 = *(int *)&buf[4 * v31];
    char v34 = v30;
    if (((v32 & v33) != 0) != ((*(void *)(v29 + 8) & v33) != 0)) {
      break;
    }
    char v30 = 1;
    uint64_t v31 = 1LL;
    if ((v34 & 1) != 0) {
      goto LABEL_44;
    }
  }

  if ((v32 & v33) == 0) {
    uint64_t v28 = v29;
  }
LABEL_44:
  os_log_t v35 = *(os_log_s **)v28;
  if (v35 && os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
  {
    if (v51 >= 0) {
      CFTypeRef v36 = __p;
    }
    else {
      CFTypeRef v36 = (void **)__p[0];
    }
    if (v51 >= 0) {
      unint64_t v37 = (char *)HIBYTE(v51);
    }
    else {
      unint64_t v37 = (char *)__p[1];
    }
    memset(&v76, 0, sizeof(v76));
    std::string::append(&v76, "{ ", 2uLL);
    if (v37)
    {
      while (1)
      {
        std::to_string((std::string *)buf, *(char *)v36);
        if (buf[23] >= 0) {
          CFTypeRef v38 = buf;
        }
        else {
          CFTypeRef v38 = *(const std::string::value_type **)buf;
        }
        if (buf[23] >= 0) {
          std::string::size_type v39 = buf[23];
        }
        else {
          std::string::size_type v39 = *(void *)&buf[8];
        }
        std::string::append(&v76, v38, v39);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (!--v37) {
          break;
        }
        CFTypeRef v36 = (void **)((char *)v36 + 1);
        std::string::append(&v76, ", ", 2uLL);
      }
    }

    std::string::append(&v76, " }", 2uLL);
    if ((v76.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      CFTypeRef v40 = &v76;
    }
    else {
      CFTypeRef v40 = (std::string *)v76.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 53;
    *(_WORD *)&_BYTE buf[18] = 2080;
    *(void *)&buf[20] = v40;
    _os_log_impl(&dword_0, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d Unhandled vocoder type: %s", buf, 0x1Cu);
  }

  uint64_t v45 = 0LL;
  int v44 = 0;
  unsigned int v43 = 0;
LABEL_69:
  *(_BYTE *)(a1 + 4) = BYTE4(v45);
  *(_DWORD *)a1 = v45 | v44 | v43;
  if (SHIBYTE(v51) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_15EA7C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20, void *a21, uint64_t a22, int a23, __int16 a24, char a25, char a26, void *a27, uint64_t a28, int a29, __int16 a30, char a31, char a32, void *a33, uint64_t a34, int a35, __int16 a36, char a37, char a38, void *a39, uint64_t a40, int a41, __int16 a42, char a43, char a44, void *a45, uint64_t a46, int a47, __int16 a48, char a49, char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,void *a63)
{
  uint64_t v80 = 416LL;
  while (1)
  {
    v80 -= 32LL;
    if (!v80)
    {
      if (a20 < 0) {
        operator delete(__p);
      }
      if (a26 < 0) {
        operator delete(a21);
      }
      if (a32 < 0) {
        operator delete(a27);
      }
      if (a38 < 0) {
        operator delete(a33);
      }
      if (a44 < 0) {
        operator delete(a39);
      }
      if (a50 < 0) {
        operator delete(a45);
      }
      if (a56 < 0) {
        operator delete(a51);
      }
      if (a62 < 0) {
        operator delete(a57);
      }
      if (a68 < 0) {
        operator delete(a63);
      }
      if (a72 < 0) {
        operator delete(a69);
      }
      if (a74 < 0) {
        operator delete(a73);
      }
      if (a76 < 0) {
        operator delete(a75);
      }
      if (a78 < 0) {
        operator delete(a77);
      }
      __cxa_guard_abort(&qword_48ED20);
      if (a14 < 0) {
        operator delete(a9);
      }
      _Unwind_Resume(a1);
    }
  }

void sub_15ECCC( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a56 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x15ECA4LL);
}

unint64_t sub_15ECE4(const __CFDictionary *a1, const void *a2, unsigned int *a3)
{
  uint64_t v4 = (const __CFNumber *)sub_A15A4(a1, a2);
  if (!v4) {
    return *a3;
  }
  unint64_t result = (unint64_t)sub_36328(v4);
  if (HIDWORD(result)) {
    return result;
  }
  else {
    return *a3;
  }
}

double sub_15ED24(unsigned int a1)
{
  if (a1) {
    return (double)a1;
  }
  uint64_t v3 = sub_138E8(12);
  uint64_t v4 = sub_138E8(39);
  char v5 = 0;
  uint64_t v6 = 0LL;
  *(void *)char v11 = 0x100000002LL;
  uint64_t v7 = *(void *)(v3 + 8);
  while (1)
  {
    uint64_t v8 = *(int *)&v11[4 * v6];
    char v9 = v5;
    if (((v7 & v8) != 0) != ((*(void *)(v4 + 8) & v8) != 0)) {
      break;
    }
    char v5 = 1;
    uint64_t v6 = 1LL;
    if ((v9 & 1) != 0) {
      goto LABEL_10;
    }
  }

  if ((v7 & v8) == 0) {
    uint64_t v3 = v4;
  }
LABEL_10:
  uint64_t v10 = *(os_log_s **)v3;
  double v1 = 8000.0;
  if (v10 && os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)char v11 = 136315906;
    *(void *)&v11[4] = "CoreTelephonyInterface.cpp";
    __int16 v12 = 1024;
    int v13 = 99;
    __int16 v14 = 1024;
    int v15 = 0;
    __int16 v16 = 1024;
    int v17 = 8000;
    _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Invalid vocoder sample rate: %u Hz. Setting to default sample rate: %u Hz",  v11,  0x1Eu);
  }

  return v1;
}

void sub_15EE74(uint64_t a1, uint64_t a2)
{
  xmmword_48ECF8 = 0u;
  *(_OWORD *)&qword_48ED08 = 0u;
  dword_48ED18 = 1065353216;
  if (a2)
  {
    uint64_t v3 = a1;
    uint64_t v4 = 0LL;
    uint64_t v5 = a1 + 32 * a2;
    uint64_t v6 = &qword_48E000;
    uint64_t v7 = &qword_48E000;
    while (1)
    {
      unint64_t v8 = sub_7ED44(v3);
      unint64_t v9 = v8;
      unint64_t v10 = v6[416];
      if (v10)
      {
        uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
        v11.i16[0] = vaddlv_u8(v11);
        unint64_t v12 = v11.u32[0];
        if (v11.u32[0] > 1uLL)
        {
          unint64_t v2 = v8;
          if (v8 >= v10) {
            unint64_t v2 = v8 % v10;
          }
        }

        else
        {
          unint64_t v2 = (v10 - 1) & v8;
        }

        int v13 = *(unsigned __int8 ***)(xmmword_48ECF8 + 8 * v2);
        if (v13)
        {
          __int16 v14 = *v13;
          if (*v13)
          {
            while (1)
            {
              unint64_t v15 = *((void *)v14 + 1);
              if (v15 == v9)
              {
                if (sub_7F194(v14 + 16, (unsigned __int8 *)v3))
                {
                  uint64_t v6 = &qword_48E000;
                  uint64_t v7 = &qword_48E000;
                  goto LABEL_80;
                }
              }

              else
              {
                if (v12 > 1)
                {
                  if (v15 >= v10) {
                    v15 %= v10;
                  }
                }

                else
                {
                  v15 &= v10 - 1;
                }

                if (v15 != v2)
                {
LABEL_19:
                  uint64_t v6 = &qword_48E000;
                  break;
                }
              }

              __int16 v14 = *(unsigned __int8 **)v14;
              if (!v14) {
                goto LABEL_19;
              }
            }
          }
        }

        uint64_t v7 = &qword_48E000;
      }

      __int16 v16 = (char *)operator new(0x30uLL);
      *(void *)__int16 v16 = 0LL;
      *((void *)v16 + 1) = v9;
      int v17 = v16 + 16;
      if (*(char *)(v3 + 23) < 0)
      {
        sub_24054(v17, *(void **)v3, *(void *)(v3 + 8));
        uint64_t v4 = v7[418];
      }

      else
      {
        __int128 v18 = *(_OWORD *)v3;
        *((void *)v16 + 4) = *(void *)(v3 + 16);
        *(_OWORD *)int v17 = v18;
      }

      *((_DWORD *)v16 + 10) = *(_DWORD *)(v3 + 24);
      float v19 = (float)(unint64_t)(v4 + 1);
LABEL_70:
      uint64_t v35 = xmmword_48ECF8;
      CFTypeRef v36 = *(void **)(xmmword_48ECF8 + 8 * v2);
      if (v36)
      {
        *(void *)__int16 v16 = *v36;
      }

      else
      {
        *(void *)__int16 v16 = qword_48ED08;
        qword_48ED08 = (uint64_t)v16;
        *(void *)(v35 + 8 * sub_143134(1, v2) = &qword_48ED08;
        if (!*(void *)v16) {
          goto LABEL_79;
        }
        unint64_t v37 = *(void *)(*(void *)v16 + 8LL);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v37 >= v10) {
            v37 %= v10;
          }
        }

        else
        {
          v37 &= v10 - 1;
        }

        CFTypeRef v36 = (void *)(xmmword_48ECF8 + 8 * v37);
      }

      *CFTypeRef v36 = v16;
LABEL_79:
      uint64_t v4 = v7[418] + 1;
      v7[418] = v4;
LABEL_80:
      v3 += 32LL;
      if (v3 == v5) {
        return;
      }
    }

    BOOL v20 = (v10 & (v10 - 1)) != 0;
    if (v10 < 3) {
      BOOL v20 = 1LL;
    }
    unint64_t v21 = v20 | (2 * v10);
    unint64_t v22 = vcvtps_u32_f32(v19 / *(float *)&dword_48ED18);
    if (v21 <= v22) {
      int8x8_t prime = (int8x8_t)v22;
    }
    else {
      int8x8_t prime = (int8x8_t)v21;
    }
    if (*(void *)&prime == 1LL)
    {
      int8x8_t prime = (int8x8_t)2LL;
    }

    else if ((*(void *)&prime & (*(void *)&prime - 1LL)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }

    unint64_t v10 = v6[416];
    if (*(void *)&prime > v10) {
      goto LABEL_36;
    }
    if (*(void *)&prime < v10)
    {
      unint64_t v30 = vcvtps_u32_f32((float)(unint64_t)qword_48ED10 / *(float *)&dword_48ED18);
      if (v10 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }

      else
      {
        uint64_t v32 = 1LL << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }

      if (*(void *)&prime <= v30) {
        int8x8_t prime = (int8x8_t)v30;
      }
      if (*(void *)&prime >= v10)
      {
        unint64_t v10 = v6[416];
      }

      else
      {
        if (prime)
        {
LABEL_36:
          if (*(void *)&prime >> 61) {
            sub_7A8C4();
          }
          unint64_t v24 = operator new(8LL * *(void *)&prime);
          os_log_t v25 = (void *)xmmword_48ECF8;
          *(void *)&xmmword_48ECF8 = v24;
          if (v25) {
            operator delete(v25);
          }
          uint64_t v26 = 0LL;
          v6[416] = (uint64_t)prime;
          do
            *(void *)(xmmword_48ECF8 + 8 * v26++) = 0LL;
          while (*(void *)&prime != v26);
          unint64_t v27 = (void **)qword_48ED08;
          if (qword_48ED08)
          {
            unint64_t v28 = *(void *)(qword_48ED08 + 8);
            uint8x8_t v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(void *)&prime) {
                v28 %= *(void *)&prime;
              }
            }

            else
            {
              v28 &= *(void *)&prime - 1LL;
            }

            *(void *)(xmmword_48ECF8 + 8 * v28) = &qword_48ED08;
            for (i = *v27; i; unint64_t v28 = v34)
            {
              unint64_t v34 = i[1];
              if (v29.u32[0] > 1uLL)
              {
                if (v34 >= *(void *)&prime) {
                  v34 %= *(void *)&prime;
                }
              }

              else
              {
                v34 &= *(void *)&prime - 1LL;
              }

              if (v34 != v28)
              {
                if (!*(void *)(xmmword_48ECF8 + 8 * v34))
                {
                  *(void *)(xmmword_48ECF8 + 8 * v34) = v27;
                  goto LABEL_61;
                }

                *unint64_t v27 = (void *)*i;
                *uint64_t i = **(void **)(xmmword_48ECF8 + 8 * v34);
                **(void **)(xmmword_48ECF8 + 8 * v34) = i;
                uint64_t i = v27;
              }

              unint64_t v34 = v28;
LABEL_61:
              unint64_t v27 = (void **)i;
              uint64_t i = (void *)*i;
            }
          }

          unint64_t v10 = (unint64_t)prime;
          goto LABEL_65;
        }

        CFTypeRef v38 = (void *)xmmword_48ECF8;
        *(void *)&xmmword_48ECF8 = 0LL;
        if (v38) {
          operator delete(v38);
        }
        unint64_t v10 = 0LL;
        v6[416] = 0LL;
      }
    }

void sub_15F2F4(_Unwind_Exception *a1)
{
}

void sub_15F328()
{
  CFTypeRef v0 = (void **)qword_48ED08;
  if (qword_48ED08)
  {
    do
    {
      double v1 = (void **)*v0;
      operator delete(v0);
      CFTypeRef v0 = v1;
    }

    while (v1);
  }

  unint64_t v2 = (void *)xmmword_48ECF8;
  *(void *)&xmmword_48ECF8 = 0LL;
  if (v2) {
    operator delete(v2);
  }
}

void sub_15F38C(char a1, void **__p)
{
  if (a1)
  {
  }

  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void sub_15F3D8(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == 2 && MGGetBoolAnswer(@"HasBaseband"))
  {
    sub_15F86C();
    uint64_t v4 = qword_48EC28;
    uint64_t v12 = qword_48EC28;
    sub_86550(v13, a2);
    if (!*(void *)v4)
    {
      unint64_t v9 = (os_log_t *)sub_138E8(13);
      unint64_t v10 = *v9;
      if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
        __int16 v17 = 1024;
        int v18 = 502;
        _os_log_impl(&dword_0, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }

    if (*(_BYTE *)(v4 + 8))
    {
      uint64_t v5 = (dispatch_queue_s *)sub_869B4();
      uint64_t v14 = v12;
      sub_86550(v15, (uint64_t)v13);
      uint64_t v6 = (uint64_t *)operator new(0x20uLL);
      uint64_t *v6 = v14;
      sub_86550(v6 + 1, (uint64_t)v15);
      *(void *)buf = 0LL;
      dispatch_async_f(v5, v6, (dispatch_function_t)sub_15FA08);
      sub_15FCB4((void ***)buf);
      sub_32C8C((void *)v15[1]);
    }

    else
    {
      uint64_t v7 = (os_log_t *)sub_138E8(12);
      unint64_t v8 = *v7;
      if (*v7)
      {
        if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
          __int16 v17 = 1024;
          int v18 = 506;
          _os_log_impl(&dword_0, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d No CommCenter process active.", buf, 0x12u);
        }
      }
    }

    sub_32C8C((void *)v13[1]);
  }

void sub_15F5FC( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 buf, __int128 a18, __int16 a19, __int16 a20, int a21, int a22)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v22);
  if (a2 == 3)
  {
    os_log_t v25 = __cxa_begin_catch(a1);
    uint64_t v26 = (os_log_t *)sub_138E8(13);
    os_log_t v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      int v28 = v25[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a18) = 1024;
      DWORD1(a18) = v28;
      WORD4(a18) = 2080;
      *(void *)((char *)&a18 + 10) = "";
      a20 = 1024;
      a21 = 514;
      uint8x8_t v29 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      unint64_t v30 = v27;
      uint32_t v31 = 40;
LABEL_15:
      _os_log_impl(&dword_0, v30, OS_LOG_TYPE_ERROR, v29, (uint8_t *)&buf, v31);
    }
  }

  else
  {
    uint64_t v32 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      uint64_t v33 = v32;
      unint64_t v34 = (os_log_t *)sub_138E8(13);
      os_log_t v35 = *v34;
      if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
      {
        uint64_t v36 = (*(uint64_t (**)(void *))(*(void *)v33 + 16LL))(v33);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a18) = 2080;
        *(void *)((char *)&a18 + 4) = v36;
        WORD6(a18) = 2080;
        *(void *)((char *)&a18 + 14) = "";
        HIWORD(a21) = 1024;
        a22 = 514;
        uint8x8_t v29 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        unint64_t v30 = v35;
        uint32_t v31 = 44;
        goto LABEL_15;
      }
    }

    else
    {
      unint64_t v37 = (os_log_t *)sub_138E8(13);
      os_log_t v38 = *v37;
      if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a18) = 2080;
        *(void *)((char *)&a18 + 4) = "";
        WORD6(a18) = 1024;
        *(_DWORD *)((char *)&a18 + 14) = 514;
        uint8x8_t v29 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        unint64_t v30 = v38;
        uint32_t v31 = 34;
        goto LABEL_15;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x15F4B4LL);
}

void sub_15F834( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

void sub_15F86C()
{
  unsigned __int8 v0 = atomic_load((unsigned __int8 *)&qword_48ECF0);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_48ECF0))
    {
      sub_15FCF0();
      __cxa_guard_release(&qword_48ECF0);
    }
  }

void sub_15F8BC(_Unwind_Exception *a1)
{
}

void sub_15F8D4(uint64_t a1)
{
  unint64_t v2 = *(void **)a1;
  uint64_t v3 = sub_138E8(12);
  if ((*(_BYTE *)(v3 + 8) & 1) != 0)
  {
    uint64_t v4 = *(os_log_s **)v3;
    if (*(void *)v3)
    {
      if (os_log_type_enabled(*(os_log_t *)v3, OS_LOG_TYPE_DEBUG))
      {
        sub_2DA7F4(&__p, (void *)(a1 + 8));
        uint64_t v5 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315650;
        unint64_t v8 = "CoreTelephonyInterface.cpp";
        __int16 v9 = 1024;
        int v10 = 484;
        __int16 v11 = 2080;
        uint64_t v12 = v5;
        _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d Updating Connected Ports %s", buf, 0x1Cu);
      }
    }
  }

  if (v2 + 10 != (void *)(a1 + 8)) {
    sub_52A24((uint64_t)(v2 + 10), *(void **)(a1 + 8), (void *)(a1 + 16));
  }
  sub_15C4D0(v2);
}

void sub_15FA08(void **a1)
{
  double v1 = a1;
  sub_15F8D4((uint64_t)a1);
  sub_15FCB4(&v1);
}

void sub_15FA6C( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf, __int128 a12, __int16 a13, __int16 a14, int a15, int a16)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    __int16 v17 = __cxa_begin_catch(a1);
    int v18 = (os_log_t *)sub_138E8(13);
    os_log_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      int v20 = v17[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a12) = 1024;
      DWORD1(a12) = v20;
      WORD4(a12) = 2080;
      *(void *)((char *)&a12 + 10) = "";
      a14 = 1024;
      a15 = 98;
      unint64_t v21 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      unint64_t v22 = v19;
      uint32_t v23 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v22, OS_LOG_TYPE_ERROR, v21, (uint8_t *)&buf, v23);
    }
  }

  else
  {
    unint64_t v24 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      os_log_t v25 = v24;
      uint64_t v26 = (os_log_t *)sub_138E8(13);
      os_log_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        uint64_t v28 = (*(uint64_t (**)(void *))(*(void *)v25 + 16LL))(v25);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = v28;
        WORD6(a12) = 2080;
        *(void *)((char *)&a12 + 14) = "";
        HIWORD(a15) = 1024;
        a16 = 98;
        unint64_t v21 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        unint64_t v22 = v27;
        uint32_t v23 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      uint8x8_t v29 = (os_log_t *)sub_138E8(13);
      os_log_t v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = "";
        WORD6(a12) = 1024;
        *(_DWORD *)((char *)&a12 + 14) = 98;
        unint64_t v21 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        unint64_t v22 = v30;
        uint32_t v23 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x15FA34LL);
}

void sub_15FCB4(void ***a1)
{
  double v1 = *a1;
  *a1 = 0LL;
  if (v1)
  {
    sub_32C8C(v1[2]);
    operator delete(v1);
  }

void sub_15FCF0()
{
  unsigned __int8 v0 = operator new(0x68uLL);
  uint64_t v1 = sub_869B4();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000LL;
  v8[2] = sub_1607D4;
  v8[3] = &unk_471A28;
  v8[4] = v0;
  uint64_t v2 = _CTServerConnectionCreateOnTargetQueue(kCFAllocatorDefault, @"Virtual Audio", v1, v8);
  *(void *)unsigned __int8 v0 = v2;
  v0[4] = 0;
  *((void *)v0 + 2) = 0LL;
  *((void *)v0 + 4) = 0LL;
  *((void *)v0 + 3) = v0 + 16;
  *((void *)v0 + 8) = 0LL;
  *((void *)v0 + 9) = 0LL;
  *((void *)v0 + 7) = 0LL;
  *((void *)v0 + 5) = 0LL;
  *((void *)v0 + 6) = v0 + 28;
  *((void *)v0 + 11) = 0LL;
  *((void *)v0 + 12) = 0LL;
  *((void *)v0 + 10) = v0 + 44;
  if (v2)
  {
    uint64_t v3 = (dispatch_queue_s *)sub_869B4();
    uint64_t v4 = operator new(8uLL);
    void *v4 = v0;
    dispatch_async_f(v3, v4, (dispatch_function_t)sub_16111C);
  }

  else
  {
    uint64_t v6 = (os_log_t *)sub_138E8(12);
    uint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int v10 = "CoreTelephonyInterface.cpp";
      __int16 v11 = 1024;
      int v12 = 394;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error encountered when attempting to establish CoreTelephony connection",  buf,  0x12u);
    }
  }

  qword_48EC28 = (uint64_t)v0;
  unk_48EC30 = 850045863LL;
  BYTE4(xmmword_48EC70) = 0;
  xmmword_48EC38 = 0u;
  unk_48EC48 = 0u;
  xmmword_48EC58 = 0u;
  *(__int128 *)((char *)&xmmword_48EC58 + 9) = 0u;
  *(__int128 *)((char *)&xmmword_48EC70 + 8) = (__int128)vdupq_n_s64(0x40BF400000000000uLL);
  qword_48ECB8 = 0LL;
  qword_48ECB0 = 0LL;
  qword_48ECA0 = 0LL;
  qword_48ECA8 = &qword_48ECB0;
  LODWORD(v8[0]) = 2;
  sub_15FFCC(qword_48ECC0, (int *)v8, 1LL);
  qword_48ECD8 = (uint64_t)sub_15F3D8;
  unk_48ECE0 = &qword_48EC28;
  qword_48ECE8 = 0LL;
  uint64_t v5 = sub_32918();
  sub_395880(v5, (uint64_t)&qword_48ECA8);
}

void sub_15FF08(_Unwind_Exception *a1)
{
}

uint64_t *sub_15FFCC(uint64_t *a1, int *a2, uint64_t a3)
{
  a1[1] = 0LL;
  uint64_t v4 = a1 + 1;
  a1[2] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  if (a3)
  {
    uint64_t v6 = 4 * a3;
    do
    {
      sub_36A30(a1, v4, *a2, *a2);
      ++a2;
      v6 -= 4LL;
    }

    while (v6);
  }

  return a1;
}

void sub_160030(_Unwind_Exception *a1)
{
}

void sub_160044()
{
  uint64_t v0 = qword_48EC28;
  qword_48EC28 = 0LL;
  if (v0)
  {
    uint64_t v3 = v0;
    uint64_t v1 = (dispatch_queue_s *)sub_869B4();
    if (dispatch_get_specific("VirtualAudioQueueKey") == "VirtualAudioQueueKey")
    {
      sub_1603C4((CFTypeRef *)v0);
    }

    else
    {
      uint64_t v4 = &v3;
      block[0] = _NSConcreteStackBlock;
      block[1] = 0x40000000LL;
      block[2] = sub_160530;
      block[3] = &unk_471A48;
      block[4] = &v4;
      dispatch_sync(v1, block);
    }

    sub_32C8C(*(void **)(v0 + 88));
    sub_32C8C(*(void **)(v0 + 56));
    sub_32C8C(*(void **)(v0 + 32));
    uint64_t v2 = *(const void **)(v0 + 16);
    if (v2) {
      CFRelease(v2);
    }
    operator delete((void *)v0);
  }

void sub_160174( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf, __int128 a12, __int16 a13, __int16 a14, int a15, int a16)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    __int16 v17 = __cxa_begin_catch(a1);
    int v18 = (os_log_t *)sub_138E8(13);
    os_log_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      int v20 = v17[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a12) = 1024;
      DWORD1(a12) = v20;
      WORD4(a12) = 2080;
      *(void *)((char *)&a12 + 10) = "";
      a14 = 1024;
      a15 = 35;
      unint64_t v21 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      unint64_t v22 = v19;
      uint32_t v23 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v22, OS_LOG_TYPE_ERROR, v21, (uint8_t *)&buf, v23);
    }
  }

  else
  {
    unint64_t v24 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      os_log_t v25 = v24;
      uint64_t v26 = (os_log_t *)sub_138E8(13);
      os_log_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        uint64_t v28 = (*(uint64_t (**)(void *))(*(void *)v25 + 16LL))(v25);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = v28;
        WORD6(a12) = 2080;
        *(void *)((char *)&a12 + 14) = "";
        HIWORD(a15) = 1024;
        a16 = 35;
        unint64_t v21 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        unint64_t v22 = v27;
        uint32_t v23 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      uint8x8_t v29 = (os_log_t *)sub_138E8(13);
      os_log_t v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = "";
        WORD6(a12) = 1024;
        *(_DWORD *)((char *)&a12 + 14) = 35;
        unint64_t v21 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        unint64_t v22 = v30;
        uint32_t v23 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x16011CLL);
}

void sub_1603C4(CFTypeRef *a1)
{
  CFTypeRef v2 = *a1;
  if (!v2)
  {
    uint64_t v3 = (os_log_t *)sub_138E8(13);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      uint64_t v7 = "CoreTelephonyInterface.cpp";
      __int16 v8 = 1024;
      int v9 = 530;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v6,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  _CTServerConnectionUnregisterForNotification(v2, kCTAudioSampleRateSwitchCompleteNotification);
  _CTServerConnectionUnregisterForNotification(*a1, kCTAudioVocoderInfoNotification);
  _CTServerConnectionUnregisterForNotification(*a1, kCTDaemonReadyNotification);
  _CTServerConnectionUnregisterForNotification(*a1, kCTConnectionInvalidatedNotification);
  CFRelease(*a1);
  *a1 = 0LL;
}

void sub_160514(_Unwind_Exception *exception_object)
{
}

void sub_160530(uint64_t a1)
{
}

void sub_160594( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    unint64_t v15 = __cxa_begin_catch(exception_object);
    __int16 v16 = (os_log_t *)sub_138E8(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(va_start(va, a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(va_start(va, a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 47;
      os_log_t v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      int v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }

  else
  {
    unint64_t v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint32_t v23 = v22;
      unint64_t v24 = (os_log_t *)sub_138E8(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16LL))(v23);
        LODWORD(va_start(va, a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(va_start(va, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 47;
        os_log_t v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        int v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      os_log_t v27 = (os_log_t *)sub_138E8(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(va_start(va, a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(va_start(va, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 47;
        os_log_t v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        int v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x160564LL);
}

void sub_1607D4(uint64_t a1, const __CFString *a2, CFTypeRef cf)
{
  if (!a2)
  {
    uint32_t v23 = (os_log_t *)sub_138E8(13);
    unint64_t v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
      __int16 v41 = 1024;
      int v42 = 561;
      _os_log_impl(&dword_0, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint64_t v5 = *(unsigned __int8 **)(a1 + 32);
  if (cf)
  {
    CFRetain(cf);
    sub_3617C(&cfa, cf);
  }

  else
  {
    CFTypeRef cfa = 0LL;
  }

  int v6 = (os_log_t *)sub_138E8(12);
  uint64_t v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
  {
    os_log_t v35 = a2;
    char v36 = 0;
    sub_48E98(v38, a2);
    if (SHIBYTE(v39) >= 0) {
      __int16 v8 = v38;
    }
    else {
      __int16 v8 = (void **)v38[0];
    }
    if (cfa)
    {
      int v9 = CFCopyDescription(cfa);
      sub_48188((uint64_t)&__p, v9);
      if (v9) {
        CFRelease(v9);
      }
      p_p = (const char *)&__p;
      if (v34 < 0) {
        p_p = (const char *)__p;
      }
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
      __int16 v41 = 1024;
      int v42 = 567;
      __int16 v43 = 2080;
      int v44 = v8;
      __int16 v45 = 2080;
      unint64_t v46 = p_p;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Received CoreTelephony Notification: [%s] with info: %s",  buf,  0x26u);
      if (v34 < 0) {
        operator delete(__p);
      }
    }

    else
    {
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
      __int16 v41 = 1024;
      int v42 = 567;
      __int16 v43 = 2080;
      int v44 = v8;
      __int16 v45 = 2080;
      unint64_t v46 = "nil";
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Received CoreTelephony Notification: [%s] with info: %s",  buf,  0x26u);
    }

    if (SHIBYTE(v39) < 0) {
      operator delete(v38[0]);
    }
    sub_19DFC((uint64_t)&v35);
  }

  if (CFStringCompare(a2, kCTAudioVocoderInfoNotification, 0LL) == kCFCompareEqualTo)
  {
    if (cfa)
    {
      sub_15F86C();
      sub_15E080((uint64_t)buf, (const __CFDictionary **)&cfa);
      sub_161640((uint64_t)buf);
      goto LABEL_41;
    }

    uint64_t v26 = (os_log_t *)sub_138E8(13);
    os_log_t v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
      __int16 v41 = 1024;
      int v42 = 571;
      _os_log_impl(&dword_0, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

void sub_160E00( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, const void *a15, void *__p, uint64_t a17, uint64_t a18, __int128 buf, __int128 a20, __int16 a21, __int16 a22, int a23, int a24)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v24);
  sub_7A708(&a15);
  if (a2 == 3)
  {
    os_log_t v27 = __cxa_begin_catch(a1);
    os_log_t v28 = (os_log_t *)sub_138E8(13);
    os_log_t v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      int v30 = v27[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a20) = 1024;
      DWORD1(a20) = v30;
      WORD4(a20) = 2080;
      *(void *)((char *)&a20 + 10) = "";
      a22 = 1024;
      a23 = 651;
      uint32_t v31 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      uint64_t v32 = v29;
      uint32_t v33 = 40;
LABEL_15:
      _os_log_impl(&dword_0, v32, OS_LOG_TYPE_ERROR, v31, (uint8_t *)&buf, v33);
    }
  }

  else
  {
    char v34 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      os_log_t v35 = v34;
      char v36 = (os_log_t *)sub_138E8(13);
      os_log_t v37 = *v36;
      if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
      {
        uint64_t v38 = (*(uint64_t (**)(void *))(*(void *)v35 + 16LL))(v35);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a20) = 2080;
        *(void *)((char *)&a20 + 4) = v38;
        WORD6(a20) = 2080;
        *(void *)((char *)&a20 + 14) = "";
        HIWORD(a23) = 1024;
        a24 = 651;
        uint32_t v31 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        uint64_t v32 = v37;
        uint32_t v33 = 44;
        goto LABEL_15;
      }
    }

    else
    {
      std::string::size_type v39 = (os_log_t *)sub_138E8(13);
      os_log_t v40 = *v39;
      if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a20) = 2080;
        *(void *)((char *)&a20 + 4) = "";
        WORD6(a20) = 1024;
        *(_DWORD *)((char *)&a20 + 14) = 651;
        uint32_t v31 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        uint64_t v32 = v40;
        uint32_t v33 = 34;
        goto LABEL_15;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x160AFCLL);
}

void sub_1610EC()
{
}

void sub_1610F8()
{
}

void sub_161104()
{
}

void sub_161114()
{
}

void sub_16111C(void *a1)
{
  CFTypeRef v2 = (void *)*a1;
  char v20 = 0;
  unint64_t CommCenterInitializationState = _CTServerConnectionGetCommCenterInitializationState(*v2, &v20);
  int v4 = CommCenterInitializationState;
  unint64_t v5 = HIDWORD(CommCenterInitializationState);
  if (CommCenterInitializationState)
  {
    int v6 = (os_log_t *)sub_138E8(12);
    uint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      unint64_t v24 = "CoreTelephonyInterface.cpp";
      __int16 v25 = 1024;
      int v26 = 404;
      __int16 v27 = 1024;
      int v28 = v4;
      __int16 v29 = 1024;
      int v30 = v5;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d _CTServerConnectionGetCommCenterInitializationState returned error: {domain, error} : {%d, %d}",  buf,  0x1Eu);
    }

void sub_1613CC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_7A0E8(exception_object);
}

void sub_1613E4( void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, CFTypeRef cf, uint64_t a12, __int128 buf, __int128 a14, __int16 a15, __int16 a16, int a17, int a18)
{
  if (!a2) {
    JUMPOUT(0x1613D4LL);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (a2 == 3)
  {
    char v20 = __cxa_begin_catch(a1);
    char v21 = (os_log_t *)sub_138E8(13);
    os_log_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      int v23 = v20[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a14) = 1024;
      DWORD1(a14) = v23;
      WORD4(a14) = 2080;
      *(void *)((char *)&a14 + 10) = "";
      a16 = 1024;
      a17 = 98;
      unint64_t v24 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      __int16 v25 = v22;
      uint32_t v26 = 40;
LABEL_15:
      _os_log_impl(&dword_0, v25, OS_LOG_TYPE_ERROR, v24, (uint8_t *)&buf, v26);
    }
  }

  else
  {
    __int16 v27 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      int v28 = v27;
      __int16 v29 = (os_log_t *)sub_138E8(13);
      os_log_t v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        uint64_t v31 = (*(uint64_t (**)(void *))(*(void *)v28 + 16LL))(v28);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a14) = 2080;
        *(void *)((char *)&a14 + 4) = v31;
        WORD6(a14) = 2080;
        *(void *)((char *)&a14 + 14) = "";
        HIWORD(a17) = 1024;
        a18 = 98;
        unint64_t v24 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        __int16 v25 = v30;
        uint32_t v26 = 44;
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v32 = (os_log_t *)sub_138E8(13);
      os_log_t v33 = *v32;
      if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a14) = 2080;
        *(void *)((char *)&a14 + 4) = "";
        WORD6(a14) = 1024;
        *(_DWORD *)((char *)&a14 + 14) = 98;
        unint64_t v24 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        __int16 v25 = v33;
        uint32_t v26 = 34;
        goto LABEL_15;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x16135CLL);
}

void sub_161608()
{
}

void sub_161640(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 4);
  if (BYTE4(xmmword_48EC70)) {
    BOOL v3 = v2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  int v4 = !v3;
  if (v3)
  {
    if ((BYTE4(xmmword_48EC70) != 0) != (v2 != 0)) {
      goto LABEL_16;
    }
  }

  else if ((_DWORD)xmmword_48EC70 != *(_DWORD *)a1)
  {
LABEL_16:
    char v34 = 0LL;
    uint64_t v35 = 0LL;
    os_log_t v33 = &v34;
    if (!v4) {
      goto LABEL_17;
    }
    goto LABEL_14;
  }

  double v5 = *(double *)(a1 + 16);
  char v34 = 0LL;
  uint64_t v35 = 0LL;
  os_log_t v33 = &v34;
  if (dbl_48EC80 == v5) {
    goto LABEL_52;
  }
  if (!v4)
  {
LABEL_17:
    if ((v2 != 0) == (BYTE4(xmmword_48EC70) != 0)) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }

void sub_161B3C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20, char a21, char a22, void *a23, uint64_t a24, int a25, __int16 a26, char a27, char a28)
{
}

uint64_t *sub_161C34(uint64_t *result, int a2, int a3)
{
  int v4 = (uint64_t **)result;
  __int128 v6 = (uint64_t **)(result + 1);
  double v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        double v5 = *v7;
        __int128 v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }

      if (v8 >= a2) {
        break;
      }
      double v5 = v7[1];
      if (!v5)
      {
        __int128 v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }

  else
  {
    uint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    char v9 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v9 + 7) = a3;
    return sub_32C38(v4, (uint64_t)v7, v6, v9);
  }

  return result;
}

uint64_t sub_161CCC(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0LL;
  BOOL v3 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + 16) = 0LL;
  *(void *)a1 = a1 + 8;
  int v4 = a2 + 1;
  double v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      __int128 v6 = *(uint64_t **)(a1 + 8);
      uint64_t v7 = v3;
      uint64_t v8 = *(void *)(a1 + 8);
      char v9 = v3;
      if (v6)
      {
        do
        {
          uint64_t v7 = (uint64_t **)v8;
          uint64_t v8 = *(void *)(v8 + 8);
        }

        while (v8);
      }

      else
      {
        do
        {
          uint64_t v7 = (uint64_t **)v9[2];
          BOOL v10 = *v7 == (uint64_t *)v9;
          char v9 = v7;
        }

        while (v10);
      }

      int v11 = *((_DWORD *)v5 + 7);
      if (*((_DWORD *)v7 + 7) < v11)
      {
LABEL_8:
        if (v6) {
          uint64_t v12 = v7;
        }
        else {
          uint64_t v12 = v3;
        }
        if (v6) {
          char v13 = v7 + 1;
        }
        else {
          char v13 = v3;
        }
      }

      else
      {
        uint64_t v12 = v3;
        char v13 = v3;
        if (v6)
        {
          char v13 = v3;
          while (1)
          {
            while (1)
            {
              uint64_t v12 = (uint64_t **)v6;
              int v17 = *((_DWORD *)v6 + 7);
              if (v11 >= v17) {
                break;
              }
              __int128 v6 = *v12;
              char v13 = v12;
              if (!*v12) {
                goto LABEL_15;
              }
            }

            if (v17 >= v11) {
              break;
            }
            char v13 = v12 + 1;
            __int128 v6 = v12[1];
            if (!v6) {
              goto LABEL_15;
            }
          }
        }
      }

      if (!*v13)
      {
LABEL_15:
        unsigned int v14 = (uint64_t *)operator new(0x20uLL);
        *((_DWORD *)v14 + 7) = *((_DWORD *)v5 + 7);
        sub_32C38((uint64_t **)a1, (uint64_t)v12, v13, v14);
      }

      uint64_t v15 = (void *)v5[1];
      if (v15)
      {
        do
        {
          uint32_t v16 = v15;
          uint64_t v15 = (void *)*v15;
        }

        while (v15);
      }

      else
      {
        do
        {
          uint32_t v16 = (void *)v5[2];
          BOOL v10 = *v16 == (void)v5;
          double v5 = v16;
        }

        while (!v10);
      }

      double v5 = v16;
    }

    while (v16 != v4);
  }

  return a1;
}

void sub_161E2C(_Unwind_Exception *a1)
{
}

uint64_t sub_161E40(uint64_t a1)
{
  int v2 = (void *)(a1 + 16);
  BOOL v3 = *(void **)(a1 + 40);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    BOOL v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }

  return a1;
}

void sub_161E90(char *__p)
{
  int v2 = __p + 16;
  BOOL v3 = (char *)*((void *)__p + 5);
  if (v3 == v2)
  {
    uint64_t v4 = 4LL;
    BOOL v3 = v2;
    goto LABEL_5;
  }

  if (v3)
  {
    uint64_t v4 = 5LL;
LABEL_5:
    (*(void (**)(void))(*(void *)v3 + 8 * v4))();
  }

  operator delete(__p);
}

BOOL sub_161EE0@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    sub_82CEC();
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 48LL))(v2);
  return sub_72210(a2, 1920099684LL);
}

void *sub_161F20@<X0>(void *a1@<X8>)
{
  return sub_7D084(a1, "Vocoder update");
}

uint64_t sub_161F30(uint64_t a1)
{
  *(void *)a1 = off_471A78;
  sub_32C8C(*(void **)(a1 + 24));
  return a1;
}

void sub_161F64(void **a1)
{
  *a1 = off_471A78;
  sub_32C8C(a1[3]);
  operator delete(a1);
}

void *sub_161F98(uint64_t a1)
{
  uint64_t v2 = operator new(0x28uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t v2 = off_471A78;
  v2[1] = v3;
  sub_161CCC((uint64_t)(v2 + 2), (void *)(a1 + 16));
  return v2;
}

void sub_161FDC(_Unwind_Exception *a1)
{
}

uint64_t sub_161FF0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = off_471A78;
  a2[1] = v2;
  return sub_161CCC((uint64_t)(a2 + 2), (void *)(a1 + 16));
}

void sub_162010(uint64_t a1)
{
}

void sub_162018(void **a1)
{
}

void *sub_162040(void *result)
{
  uint64_t v1 = (void *)result[2];
  uint64_t v2 = result + 3;
  if (v1 != result + 3)
  {
    uint64_t v3 = result[1];
    do
    {
      unint64_t result = *(void **)(v3 + 120);
      if (result)
      {
        int v7 = *((_DWORD *)v1 + 7);
        unint64_t result = (void *)(*(uint64_t (**)(void *, int *))(*result + 48LL))(result, &v7);
      }

      uint64_t v4 = (void *)v1[1];
      if (v4)
      {
        do
        {
          double v5 = v4;
          uint64_t v4 = (void *)*v4;
        }

        while (v4);
      }

      else
      {
        do
        {
          double v5 = (void *)v1[2];
          BOOL v6 = *v5 == (void)v1;
          uint64_t v1 = v5;
        }

        while (!v6);
      }

      uint64_t v1 = v5;
    }

    while (v5 != v2);
  }

  return result;
}

void sub_1620D4(uint64_t a1)
{
  if (!**(void **)a1)
  {
    int v7 = (os_log_t *)sub_138E8(13);
    uint64_t v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)blocuint64_t k = 136315394;
      *(void *)&block[4] = "CoreTelephonyInterface.cpp";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 502;
      _os_log_impl(&dword_0, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", block, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (*(_BYTE *)(*(void *)a1 + 8LL))
  {
    uint64_t v1 = *(unsigned __int8 **)(a1 + 16);
    if (**(_DWORD **)(a1 + 8))
    {
      uint64_t v2 = (dispatch_queue_s *)sub_869B4();
      if (dispatch_get_specific("VirtualAudioQueueKey") == "VirtualAudioQueueKey")
      {
        sub_1627A8(v1);
      }

      else
      {
        BOOL v10 = v1;
        *(void *)blocuint64_t k = _NSConcreteStackBlock;
        *(void *)&block[8] = 0x40000000LL;
        *(void *)&block[16] = sub_162960;
        uint64_t v12 = &unk_4719D8;
        char v13 = &v10;
        dispatch_sync(v2, block);
      }
    }

    else
    {
      double v5 = (dispatch_queue_s *)sub_869B4();
      *(void *)blocuint64_t k = *(void *)v1;
      block[8] = v1[8];
      BOOL v6 = operator new(0x10uLL);
      _OWORD *v6 = *(_OWORD *)block;
      dispatch_async_f(v5, v6, (dispatch_function_t)sub_162C00);
    }
  }

  else
  {
    uint64_t v3 = (os_log_t *)sub_138E8(12);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)blocuint64_t k = 136315394;
      *(void *)&block[4] = "CoreTelephonyInterface.cpp";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 506;
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d No CommCenter process active.", block, 0x12u);
    }
  }

void sub_162308( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 buf, __int128 a12, __int16 a13, __int16 a14, int a15, int a16)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    int v17 = __cxa_begin_catch(exception_object);
    os_log_t v18 = (os_log_t *)sub_138E8(13);
    os_log_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      int v20 = v17[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a12) = 1024;
      DWORD1(a12) = v20;
      WORD4(a12) = 2080;
      *(void *)((char *)&a12 + 10) = "";
      a14 = 1024;
      a15 = 35;
      char v21 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      uint64_t v22 = v19;
      uint32_t v23 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v22, OS_LOG_TYPE_ERROR, v21, (uint8_t *)&buf, v23);
    }
  }

  else
  {
    unint64_t v24 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      __int16 v25 = v24;
      uint64_t v26 = (os_log_t *)sub_138E8(13);
      os_log_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        uint64_t v28 = (*(uint64_t (**)(void *))(*(void *)v25 + 16LL))(v25);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = v28;
        WORD6(a12) = 2080;
        *(void *)((char *)&a12 + 14) = "";
        HIWORD(a15) = 1024;
        a16 = 35;
        char v21 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        uint64_t v22 = v27;
        uint32_t v23 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      uint64_t v29 = (os_log_t *)sub_138E8(13);
      os_log_t v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = "";
        WORD6(a12) = 1024;
        *(_DWORD *)((char *)&a12 + 14) = 35;
        char v21 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        uint64_t v22 = v30;
        uint32_t v23 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x162238LL);
}

void sub_162560( void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 a11, __int128 a12, __int16 a13, __int16 a14, int a15, int a16)
{
  if (!a2) {
    JUMPOUT(0x162550LL);
  }
  __cxa_free_exception(v16);
  if (a2 == 3)
  {
    os_log_t v19 = __cxa_begin_catch(a1);
    int v20 = (os_log_t *)sub_138E8(13LL);
    os_log_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      int v22 = v19[2];
      LODWORD(a11) = 136316162;
      *(void *)((char *)&a11 + 4) = "StandardUtilities.h";
      WORD6(a11) = 1024;
      *(_DWORD *)((char *)&a11 + 14) = 429;
      WORD1(a12) = 1024;
      DWORD1(a12) = v22;
      WORD4(a12) = 2080;
      *(void *)((char *)&a12 + 10) = "";
      a14 = 1024;
      a15 = 514;
      uint32_t v23 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      unint64_t v24 = v21;
      uint32_t v25 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v24, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&a11, v25);
    }
  }

  else
  {
    uint64_t v26 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      os_log_t v27 = v26;
      uint64_t v28 = (os_log_t *)sub_138E8(13LL);
      os_log_t v29 = *v28;
      if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
      {
        uint64_t v30 = (*(uint64_t (**)(void *))(*(void *)v27 + 16LL))(v27);
        LODWORD(a11) = 136316162;
        *(void *)((char *)&a11 + 4) = "StandardUtilities.h";
        WORD6(a11) = 1024;
        *(_DWORD *)((char *)&a11 + 14) = 430;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = v30;
        WORD6(a12) = 2080;
        *(void *)((char *)&a12 + 14) = "";
        HIWORD(a15) = 1024;
        a16 = 514;
        uint32_t v23 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        unint64_t v24 = v29;
        uint32_t v25 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      uint64_t v31 = (os_log_t *)sub_138E8(13LL);
      os_log_t v32 = *v31;
      if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a11) = 136315906;
        *(void *)((char *)&a11 + 4) = "StandardUtilities.h";
        WORD6(a11) = 1024;
        *(_DWORD *)((char *)&a11 + 14) = 431;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = "";
        WORD6(a12) = 1024;
        *(_DWORD *)((char *)&a12 + 14) = 514;
        uint32_t v23 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        unint64_t v24 = v32;
        uint32_t v25 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x162238LL);
}

void sub_162578(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x162584LL);
  }
  JUMPOUT(0x162550LL);
}

void sub_162778()
{
}

void sub_162784()
{
}

void sub_162790()
{
}

void sub_1627A0()
{
}

void sub_1627A8(unsigned __int8 *a1)
{
  uint64_t v1 = *(void *)a1;
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(*(void *)a1 + 9LL));
  if (a1[8] != (v2 & 1))
  {
    uint64_t v4 = sub_138E8(12);
    if ((*(_BYTE *)(v4 + 8) & 1) != 0)
    {
      double v5 = *(os_log_s **)v4;
      if (*(void *)v4)
      {
        if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
        {
          BOOL v6 = "True";
          int v7 = a1[8];
          unsigned int v14 = "CoreTelephonyInterface.cpp";
          int v13 = 136315650;
          if (!v7) {
            BOOL v6 = "False";
          }
          __int16 v15 = 1024;
          int v16 = 429;
          __int16 v17 = 2080;
          v18[0] = v6;
          _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Updating TTY enabled state: %s",  (uint8_t *)&v13,  0x1Cu);
        }
      }
    }

    unint64_t v8 = _CTServerConnectionSetTTYMode(*(void *)v1, a1[8]);
    int v9 = v8;
    unint64_t v10 = HIDWORD(v8);
    if (v8)
    {
      int v11 = (os_log_t *)sub_138E8(12);
      uint64_t v12 = *v11;
      if (*v11)
      {
        if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
        {
          int v13 = 136315906;
          unsigned int v14 = "CoreTelephonyInterface.cpp";
          __int16 v15 = 1024;
          int v16 = 433;
          __int16 v17 = 1024;
          LODWORD(v18[0]) = v9;
          WORD2(v18[0]) = 1024;
          *(_DWORD *)((char *)v18 + 6) = v10;
          _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d _CTServerConnectionSetTTYMode returned error: {domain, error} : {%d, %d}",  (uint8_t *)&v13,  0x1Eu);
        }
      }
    }

    else
    {
      atomic_store(a1[8], (unsigned __int8 *)(v1 + 9));
    }
  }

void sub_162960(uint64_t a1)
{
}

void sub_1629C0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    __int16 v15 = __cxa_begin_catch(exception_object);
    int v16 = (os_log_t *)sub_138E8(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(va_start(va, a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(va_start(va, a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 47;
      os_log_t v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      int v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }

  else
  {
    int v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint32_t v23 = v22;
      unint64_t v24 = (os_log_t *)sub_138E8(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16LL))(v23);
        LODWORD(va_start(va, a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(va_start(va, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 47;
        os_log_t v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        int v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      os_log_t v27 = (os_log_t *)sub_138E8(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(va_start(va, a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(va_start(va, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 47;
        os_log_t v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        int v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x162990LL);
}

void sub_162C00(unsigned __int8 *a1)
{
  if (a1) {
    operator delete(a1);
  }
}

void sub_162C68( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    __int16 v15 = __cxa_begin_catch(exception_object);
    int v16 = (os_log_t *)sub_138E8(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(va_start(va, a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(va_start(va, a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 98;
      os_log_t v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      int v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }

  else
  {
    int v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint32_t v23 = v22;
      unint64_t v24 = (os_log_t *)sub_138E8(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16LL))(v23);
        LODWORD(va_start(va, a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(va_start(va, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 98;
        os_log_t v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        int v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      os_log_t v27 = (os_log_t *)sub_138E8(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(va_start(va, a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(va_start(va, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 98;
        os_log_t v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        int v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x162C2CLL);
}

uint64_t sub_162EB4()
{
  uint64_t v0 = MGGetBoolAnswer(@"HasBaseband");
  if ((v0 & 1) == 0)
  {
    uint64_t v1 = (os_log_t *)sub_138E8(12);
    unsigned __int8 v2 = *v1;
    if (*v1)
    {
      if (os_log_type_enabled(*v1, OS_LOG_TYPE_DEFAULT))
      {
        int v4 = 136315394;
        double v5 = "CoreTelephonyInterface.cpp";
        __int16 v6 = 1024;
        int v7 = 706;
        _os_log_impl(&dword_0, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Baseband is not supported", (uint8_t *)&v4, 0x12u);
      }
    }
  }

  return v0;
}

double sub_162F84(uint64_t a1)
{
  unsigned __int8 v2 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  double v3 = *(double *)(a1 + 80);
  int v4 = (os_log_t *)sub_138E8(12);
  double v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136315650;
    unint64_t v8 = "CoreTelephonyInterface.cpp";
    __int16 v9 = 1024;
    int v10 = 723;
    __int16 v11 = 2048;
    double v12 = v3;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Vocoder rate is %f", (uint8_t *)&v7, 0x1Cu);
  }

  std::mutex::unlock(v2);
  return v3;
}

void sub_163070(_Unwind_Exception *a1)
{
}

double sub_163084(uint64_t a1)
{
  unsigned __int8 v2 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  double v3 = *(double *)(a1 + 88);
  int v4 = (os_log_t *)sub_138E8(12);
  double v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136315650;
    unint64_t v8 = "CoreTelephonyInterface.cpp";
    __int16 v9 = 1024;
    int v10 = 733;
    __int16 v11 = 2048;
    double v12 = v3;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Vocoder hardware rate is %f", (uint8_t *)&v7, 0x1Cu);
  }

  std::mutex::unlock(v2);
  return v3;
}

void sub_163170(_Unwind_Exception *a1)
{
}

void sub_163184(uint64_t *a1, double a2)
{
  uint64_t v4 = sub_138E8(12);
  uint64_t v5 = sub_138E8(39);
  char v6 = 0;
  uint64_t v7 = 0LL;
  *(void *)buf = 0x100000002LL;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = *(int *)&buf[4 * v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1LL;
    if ((v10 & 1) != 0)
    {
      if ((v8 & 1) == 0) {
        goto LABEL_12;
      }
      goto LABEL_9;
    }
  }

  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
  if ((*(void *)(v4 + 8) & 1) != 0)
  {
LABEL_9:
    __int16 v11 = *(os_log_s **)v4;
    if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
      __int16 v63 = 1024;
      int v64 = 741;
      __int16 v65 = 2048;
      double v66 = a2;
      _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d +- CoreTelephonyInterface::confirmVocoderSampleRate(inSampleRate %f)",  buf,  0x1Cu);
    }
  }

void sub_163870( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 buf, __int128 a16, __int16 a17, __int16 a18, int a19, int a20)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v20);
  if (a2 == 3)
  {
    uint32_t v23 = __cxa_begin_catch(a1);
    CFTypeRef v24 = (os_log_t *)sub_138E8(13);
    os_log_t v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      int v26 = v23[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a16) = 1024;
      DWORD1(a16) = v26;
      WORD4(a16) = 2080;
      *(void *)((char *)&a16 + 10) = "";
      a18 = 1024;
      a19 = 514;
      os_log_t v27 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      CFTypeRef v28 = v25;
      uint32_t v29 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v28, OS_LOG_TYPE_ERROR, v27, (uint8_t *)&buf, v29);
    }
  }

  else
  {
    uint64_t v30 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      uint64_t v31 = v30;
      os_log_t v32 = (os_log_t *)sub_138E8(13);
      os_log_t v33 = *v32;
      if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
      {
        uint64_t v34 = (*(uint64_t (**)(void *))(*(void *)v31 + 16LL))(v31);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a16) = 2080;
        *(void *)((char *)&a16 + 4) = v34;
        WORD6(a16) = 2080;
        *(void *)((char *)&a16 + 14) = "";
        HIWORD(a19) = 1024;
        a20 = 514;
        os_log_t v27 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        CFTypeRef v28 = v33;
        uint32_t v29 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      uint64_t v35 = (os_log_t *)sub_138E8(13);
      os_log_t v36 = *v35;
      if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a16) = 2080;
        *(void *)((char *)&a16 + 4) = "";
        WORD6(a16) = 1024;
        *(_DWORD *)((char *)&a16 + 14) = 514;
        os_log_t v27 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        CFTypeRef v28 = v36;
        uint32_t v29 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x163510LL);
}

uint64_t sub_163B74(uint64_t a1)
{
  unsigned __int8 v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_163BA4()
{
  unint64_t v0 = _CTServerConnectionAudioSampleRateSwitchDidComplete();
  int v1 = v0;
  unint64_t v2 = HIDWORD(v0);
  if (v0)
  {
    uint64_t v3 = sub_138E8(12);
    uint64_t v4 = sub_138E8(39);
    char v5 = 0;
    uint64_t v6 = 0LL;
    *(void *)__int16 v11 = 0x100000002LL;
    uint64_t v7 = *(void *)(v3 + 8);
    while (1)
    {
      uint64_t v8 = *(int *)&v11[4 * v6];
      char v9 = v5;
      if (((v7 & v8) != 0) != ((*(void *)(v4 + 8) & v8) != 0)) {
        break;
      }
      char v5 = 1;
      uint64_t v6 = 1LL;
      if ((v9 & 1) != 0) {
        goto LABEL_8;
      }
    }

    if ((v7 & v8) == 0) {
      uint64_t v3 = v4;
    }
LABEL_8:
    char v10 = *(os_log_s **)v3;
    if (v10)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int16 v11 = 136315906;
        *(void *)&v11[4] = "CoreTelephonyInterface.cpp";
        __int16 v12 = 1024;
        int v13 = 455;
        __int16 v14 = 1024;
        int v15 = v1;
        __int16 v16 = 1024;
        int v17 = v2;
        _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d _CTServerConnectionAudioSampleRateSwitchDidComplete returned error: {domain, error} : {%d, %d}",  v11,  0x1Eu);
      }
    }
  }

void sub_163CEC(void *a1)
{
}

void sub_163D58( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    int v15 = __cxa_begin_catch(exception_object);
    __int16 v16 = (os_log_t *)sub_138E8(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(va_start(va, a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(va_start(va, a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 98;
      os_log_t v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      dispatch_semaphore_t v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }

  else
  {
    uint64_t v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint32_t v23 = v22;
      CFTypeRef v24 = (os_log_t *)sub_138E8(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16LL))(v23);
        LODWORD(va_start(va, a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(va_start(va, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 98;
        os_log_t v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        dispatch_semaphore_t v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      os_log_t v27 = (os_log_t *)sub_138E8(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(va_start(va, a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(va_start(va, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 98;
        os_log_t v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        dispatch_semaphore_t v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x163D20LL);
}

void sub_163FA0(void *__p)
{
  unint64_t v2 = (const void *)__p[1];
  if (v2) {
    CFRelease(v2);
  }
  operator delete(__p);
}

uint64_t sub_163FD0(uint64_t a1)
{
  unsigned __int8 v12 = 0;
  uint64_t v10 = a1;
  __int16 v11 = &v12;
  if (!*(void *)a1)
  {
    uint64_t v7 = (os_log_t *)sub_138E8(13);
    uint64_t v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)blocuint64_t k = 136315394;
      *(void *)&block[4] = "CoreTelephonyInterface.cpp";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 502;
      _os_log_impl(&dword_0, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", block, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (*(_BYTE *)(a1 + 8))
  {
    unint64_t v2 = (dispatch_queue_s *)sub_869B4();
    if (dispatch_get_specific("VirtualAudioQueueKey") == "VirtualAudioQueueKey")
    {
      unsigned __int8 v5 = atomic_load((unsigned __int8 *)(a1 + 9));
      *__int16 v11 = v5 & 1;
    }

    else
    {
      int v13 = &v10;
      *(void *)blocuint64_t k = _NSConcreteStackBlock;
      *(void *)&block[8] = 0x40000000LL;
      *(void *)&block[16] = sub_164430;
      int v15 = &unk_4719B8;
      __int16 v16 = &v13;
      dispatch_sync(v2, block);
    }
  }

  else
  {
    uint64_t v3 = (os_log_t *)sub_138E8(12);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)blocuint64_t k = 136315394;
      *(void *)&block[4] = "CoreTelephonyInterface.cpp";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 506;
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d No CommCenter process active.", block, 0x12u);
    }
  }

  return v12;
}

void sub_1641D8( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 buf, __int128 a14, __int16 a15, __int16 a16, int a17, int a18)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v18);
  if (a2 == 3)
  {
    uint32_t v21 = __cxa_begin_catch(a1);
    uint64_t v22 = (os_log_t *)sub_138E8(13);
    os_log_t v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      int v24 = v21[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a14) = 1024;
      DWORD1(a14) = v24;
      WORD4(a14) = 2080;
      *(void *)((char *)&a14 + 10) = "";
      a16 = 1024;
      a17 = 514;
      os_log_t v25 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      uint64_t v26 = v23;
      uint32_t v27 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v26, OS_LOG_TYPE_ERROR, v25, (uint8_t *)&buf, v27);
    }
  }

  else
  {
    os_log_t v28 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      uint32_t v29 = v28;
      uint64_t v30 = (os_log_t *)sub_138E8(13);
      os_log_t v31 = *v30;
      if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
      {
        uint64_t v32 = (*(uint64_t (**)(void *))(*(void *)v29 + 16LL))(v29);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a14) = 2080;
        *(void *)((char *)&a14 + 4) = v32;
        WORD6(a14) = 2080;
        *(void *)((char *)&a14 + 14) = "";
        HIWORD(a17) = 1024;
        a18 = 514;
        os_log_t v25 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        uint64_t v26 = v31;
        uint32_t v27 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      os_log_t v33 = (os_log_t *)sub_138E8(13);
      os_log_t v34 = *v33;
      if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a14) = 2080;
        *(void *)((char *)&a14 + 4) = "";
        WORD6(a14) = 1024;
        *(_DWORD *)((char *)&a14 + 14) = 514;
        os_log_t v25 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        uint64_t v26 = v34;
        uint32_t v27 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x164104LL);
}

uint64_t sub_164430(uint64_t result)
{
  int v1 = **(uint64_t ***)(result + 32);
  uint64_t v3 = *v1;
  unint64_t v2 = (_BYTE *)v1[1];
  LOBYTE(v3) = atomic_load((unsigned __int8 *)(v3 + 9));
  *unint64_t v2 = v3 & 1;
  return result;
}

uint64_t sub_164450(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = (unsigned __int16)sub_55D7C(*(void *)(a2 + 112) + 8LL, *(unsigned int *)(a2 + 12));
  if (v3 <= 0x100) {
    char v4 = 0;
  }
  else {
    char v4 = v3;
  }
  __int16 v67 = (unsigned int **)a2;
  unsigned __int8 v5 = (uint64_t *)(*(void *)(*(void *)a2 + 24LL) + 32LL);
  if (*(_DWORD *)(a2 + 8) == 1668509810)
  {
    sub_B8CBC((uint64_t *)&__p, v5, "", 69);
    (*(void (**)(_BYTE *__return_ptr))(*(void *)__p.__r_.__value_.__l.__data_ + 272LL))(buf);
    sub_124CAC(v76, buf);
    sub_85B80((uint64_t *)buf);
    std::string::size_type size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      uint64_t v7 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        unint64_t v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      goto LABEL_12;
    }
  }

  else
  {
    sub_B8CBC((uint64_t *)buf, v5, "", 70);
    (*(void (**)(uint64_t *__return_ptr))(**(void **)buf + 272LL))(v76);
    std::string::size_type size = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      char v9 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v8 = __ldaxr(v9);
      while (__stlxr(v8 - 1, v9));
LABEL_12:
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }

  if (!v4) {
    goto LABEL_102;
  }
  if (v77 < 2) {
    goto LABEL_102;
  }
  uint64_t v10 = *((void *)*v67 + 3);
  uint64_t v66 = 0LL;
  int v65 = 0;
  int v11 = 1;
  do
  {
    int v68 = v11;
    uint64_t v12 = *(void *)(v10 + 24);
    int v13 = (uint64_t *)v76[1];
    v70[0] = *(void *)(v10 + 16);
    v70[1] = v12;
    if (v12)
    {
      __int16 v14 = (unint64_t *)(v12 + 16);
      do
        unint64_t v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }

    __int16 v16 = *(std::__shared_weak_count **)(v10 + 40);
    uint64_t v71 = *(void *)(v10 + 32);
    CFNumberRef v72 = v16;
    if (v16)
    {
      p_shared_weak_owners = (unint64_t *)&v16->__shared_weak_owners_;
      do
        unint64_t v18 = __ldxr(p_shared_weak_owners);
      while (__stxr(v18 + 1, p_shared_weak_owners));
    }

    uint64_t v19 = *(void *)(v10 + 56);
    uint64_t v73 = *(void *)(v10 + 48);
    uint64_t v74 = v19;
    if (v19)
    {
      dispatch_semaphore_t v20 = (unint64_t *)(v19 + 16);
      do
        unint64_t v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }

    __int128 v75 = *(_OWORD *)(v10 + 64);
    if (v13 != v76)
    {
      while (1)
      {
        uint64_t v22 = (std::__shared_weak_count *)v13[3];
        if (v22)
        {
          os_log_t v23 = std::__shared_weak_count::lock(v22);
          int v24 = v23;
          if (v23)
          {
            uint64_t v25 = v13[2];
            uint64_t v26 = (unint64_t *)&v23->__shared_weak_owners_;
            do
              unint64_t v27 = __ldxr(v26);
            while (__stxr(v27 + 1, v26));
            p_shared_owners = (unint64_t *)&v23->__shared_owners_;
            do
              unint64_t v29 = __ldaxr(p_shared_owners);
            while (__stlxr(v29 - 1, p_shared_owners));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v24);
            }
          }

          else
          {
            uint64_t v25 = 0LL;
          }
        }

        else
        {
          uint64_t v25 = 0LL;
          int v24 = 0LL;
        }

        if (v72)
        {
          uint64_t v30 = std::__shared_weak_count::lock(v72);
          os_log_t v31 = v30;
          if (v30)
          {
            uint64_t v32 = v71;
            os_log_t v33 = (unint64_t *)&v30->__shared_weak_owners_;
            do
              unint64_t v34 = __ldxr(v33);
            while (__stxr(v34 + 1, v33));
            uint64_t v35 = (unint64_t *)&v30->__shared_owners_;
            do
              unint64_t v36 = __ldaxr(v35);
            while (__stlxr(v36 - 1, v35));
            if (v36)
            {
              if (v24) {
                goto LABEL_46;
              }
            }

            else
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v31);
              if (v24)
              {
LABEL_46:
                uint64_t v37 = std::__shared_weak_count::lock(v24);
                if (v37) {
                  uint64_t v38 = v25;
                }
                else {
                  uint64_t v38 = 0LL;
                }
                if (!v31) {
                  goto LABEL_60;
                }
                goto LABEL_53;
              }
            }
          }

          else
          {
            uint64_t v32 = 0LL;
            if (v24) {
              goto LABEL_46;
            }
          }
        }

        else
        {
          uint64_t v32 = 0LL;
          os_log_t v31 = 0LL;
          if (v24) {
            goto LABEL_46;
          }
        }

        uint64_t v38 = 0LL;
        uint64_t v37 = 0LL;
        if (!v31) {
          goto LABEL_60;
        }
LABEL_53:
        uint64_t v39 = std::__shared_weak_count::lock(v31);
        if (v39)
        {
          uint64_t v40 = v39;
          BOOL v41 = v38 == v32;
          char v42 = (unint64_t *)&v39->__shared_owners_;
          do
            unint64_t v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v40);
          }

          if (!v37) {
            goto LABEL_64;
          }
          goto LABEL_61;
        }

void sub_164B18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
}

uint64_t sub_164B74(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)a2;
  if (*(_DWORD *)(*(void *)a2 + 4LL) || *(_DWORD *)v5 != 1986291046)
  {
    dispatch_semaphore_t v20 = (os_log_t *)sub_138E8(13);
    unint64_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v26 = "RoutingHandler_SplitterPlayback_GenericConfig1.cpp";
      __int16 v27 = 1024;
      int v28 = 157;
      _os_log_impl(&dword_0, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  sub_B8CBC(&v23, (uint64_t *)(*(void *)(v5 + 24) + 32LL), "", 160);
  (*(void (**)(uint8_t *__return_ptr))(*(void *)v23 + 272LL))(buf);
  int v11 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      unint64_t v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }

  __int16 v14 = (uint64_t *)operator new(0x20uLL);
  uint64_t *v14 = (uint64_t)off_482E68;
  sub_EE1E8(v14 + 1, buf);
  unint64_t v15 = operator new(0x18uLL);
  __int16 v16 = *(void **)(a3 + 8);
  *unint64_t v15 = a3;
  v15[1] = v16;
  void v15[2] = v14;
  *__int16 v16 = v15;
  uint64_t v17 = *(void *)(a3 + 16) + 1LL;
  *(void *)(a3 + 8) = v15;
  *(void *)(a3 + 16) = v17;
  (*(void (**)(uint64_t *))(*v14 + 16))(v14);
  *(_DWORD *)(a4 + 12) = 1;
  uint64_t v18 = sub_20D52C(a1, a2, a3, a4, a5);
  (*(void (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 40LL))(a1, a2, a4, a3);
  sub_85B80((uint64_t *)buf);
  return v18;
}

void sub_164DAC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

void sub_164DFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (os_log_t *)sub_138E8(20);
  uint64_t v6 = *v5;
  if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "RoutingHandler_SplitterPlayback_GenericConfig1.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 114;
    _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Configuring splitter playback route controls",  buf,  0x12u);
  }

  int64x2_t v126 = 0uLL;
  uint64_t v127 = 0LL;
  uint64_t v7 = *(void **)(*(void *)a2 + 24LL);
  if (v7 == (void *)(*(void *)a2 + 16LL))
  {
    unint64_t v8 = 0LL;
    char v9 = 0LL;
  }

  else
  {
    unint64_t v117 = 0LL;
    unint64_t v8 = 0LL;
    char v9 = 0LL;
    int v111 = (uint64_t **)(a3 + 72);
    do
    {
      sub_B8CBC((uint64_t *)&v125, v7 + 4, "", 122);
      uint64_t v10 = *(void *)(v125 + 192);
      if (!v10)
      {
        __int128 v103 = (os_log_t *)sub_138E8(13);
        uint64_t v104 = *v103;
        if (*v103 && os_log_type_enabled(*v103, OS_LOG_TYPE_ERROR))
        {
          (*(void (**)(__int128 *__return_ptr))(*(void *)v125 + 144LL))(&v124);
          uint64_t v105 = v124;
          sub_2CA1C(&v128, *(unsigned int *)(v125 + 144));
          if (v129 >= 0) {
            __int128 v106 = &v128;
          }
          else {
            __int128 v106 = (__int128 *)v128;
          }
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "RoutingHandler_SplitterPlayback_GenericConfig1.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 131;
          *(_WORD *)&_BYTE buf[18] = 2112;
          *(void *)&buf[20] = v105;
          *(_WORD *)&_BYTE buf[28] = 2080;
          *(void *)&buf[30] = v106;
          _os_log_impl( &dword_0,  v104,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [controlDevice is NULL]: could not get device for por t \\%@\\ (type: '%s').",  buf,  0x26u);
          if (SHIBYTE(v129) < 0) {
            operator delete((void *)v128);
          }
          sub_19DFC((uint64_t)&v124);
        }

        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &off_4865A0;
        exception[2] = 2003329396;
      }

      uint64_t v11 = *(unsigned int *)(v125 + 144);
      int v12 = *(_DWORD *)(v125 + 264);
      int v13 = (*(uint64_t (**)(void))(*(void *)v10 + 120LL))(*(void *)(v125 + 192));
      int v14 = v13;
      if ((unint64_t)v8 >= v117)
      {
        uint64_t v15 = (v8 - v9) >> 2;
        unint64_t v16 = v15 + 1;
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          unint64_t v17 = (unint64_t)sub_7A890(v17);
        }
        else {
          uint64_t v18 = 0LL;
        }
        uint64_t v19 = (char *)(v17 + 4 * v15);
        *(_DWORD *)uint64_t v19 = v14;
        dispatch_semaphore_t v20 = v19 + 4;
        while (v8 != v9)
        {
          int v21 = *((_DWORD *)v8 - 1);
          v8 -= 4;
          *((_DWORD *)v19 - 1) = v21;
          v19 -= 4;
        }

        unint64_t v117 = v17 + 4 * v18;
        if (v9) {
          operator delete(v9);
        }
        char v9 = v19;
        unint64_t v8 = v20;
      }

      else
      {
        *(_DWORD *)unint64_t v8 = v13;
        v8 += 4;
      }

      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 248LL))( &v128,  v10,  1LL,  v11);
      if (!*((void *)&v128 + 1) || *(void *)(*((void *)&v128 + 1) + 8LL) == -1LL)
      {
        int v99 = (os_log_t *)sub_138E8(13);
        __int128 v100 = *v99;
        if (*v99 && os_log_type_enabled(*v99, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "RoutingHandler_SplitterPlayback_GenericConfig1.cpp";
          *(_WORD *)&_BYTE buf[12] = 1024;
          *(_DWORD *)&buf[14] = 135;
          _os_log_impl( &dword_0,  v100,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Unable to locate mute control.",  buf,  0x12u);
        }

        uint64_t v101 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v101, "Unable to locate mute control.");
      }

      sub_150BF4(&v124, v128, *((std::__shared_weak_count **)&v128 + 1));
      uint64_t v22 = v126.i64[1];
      if (v126.i64[1] >= (unint64_t)v127)
      {
        uint64_t v24 = (v126.i64[1] - v126.i64[0]) >> 4;
        unint64_t v25 = (uint64_t)&v127[-v126.i64[0]] >> 3;
        if (v25 <= v24 + 1) {
          unint64_t v25 = v24 + 1;
        }
        else {
          unint64_t v26 = v25;
        }
        *(void *)&_BYTE buf[32] = &v127;
        __int16 v27 = (char *)sub_7BE90(v26);
        unint64_t v29 = (__int128 *)&v27[16 * v24];
        *unint64_t v29 = v124;
        __int128 v124 = 0uLL;
        uint64_t v30 = (void *)v126.i64[1];
        os_log_t v31 = (void *)v126.i64[0];
        if (v126.i64[1] == v126.i64[0])
        {
          int64x2_t v34 = vdupq_n_s64(v126.u64[1]);
          uint64_t v32 = &v27[16 * v24];
        }

        else
        {
          uint64_t v32 = &v27[16 * v24];
          do
          {
            __int128 v33 = *((_OWORD *)v30 - 1);
            v30 -= 2;
            *((_OWORD *)v32 - 1) = v33;
            v32 -= 16;
            *uint64_t v30 = 0LL;
            v30[1] = 0LL;
          }

          while (v30 != v31);
          int64x2_t v34 = v126;
        }

        uint64_t v23 = v29 + 1;
        v126.i64[0] = (uint64_t)v32;
        v126.i64[1] = (uint64_t)(v29 + 1);
        *(int64x2_t *)&buf[8] = v34;
        uint64_t v35 = v127;
        uint64_t v127 = &v27[16 * v28];
        *(void *)&_BYTE buf[24] = v35;
        *(void *)buf = v34.i64[0];
        sub_A0D64((uint64_t)buf);
      }

      else
      {
        *(_OWORD *)v126.i64[1] = v124;
        uint64_t v23 = (_OWORD *)(v22 + 16);
      }

      v126.i64[1] = (uint64_t)v23;
      if (sub_1B5B3C(*(void *)(a2 + 112), *(unsigned int *)(a2 + 12), v11, v12))
      {
        uint64_t v36 = *(void *)(a3 + 16);
        uint64_t v37 = v125;
        uint64_t v38 = v7[9];
        char v39 = sub_203C24(*(void *)(v125 + 192));
        sub_1B37C4((uint64_t *)buf, a2, v36, v37, v38, a4, v39);
        unsigned int v40 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 120LL))(v10);
        BOOL v41 = operator new(0x68uLL);
        sub_CB19C(&v124, *(uint64_t *)buf, *(std::__shared_weak_count **)&buf[8]);
        uint64_t v116 = (std::__shared_weak_count *)*((void *)&v124 + 1);
        __int128 v123 = v124;
        __int128 v124 = 0uLL;
        sub_CAF18((uint64_t)v41, &v123);
        char v42 = (uint64_t **)(a3 + 72);
        unint64_t v43 = *v111;
        unint64_t v44 = (uint64_t **)(a3 + 72);
        if (*v111)
        {
          unint64_t v45 = v116;
          while (1)
          {
            while (1)
            {
              char v42 = (uint64_t **)v43;
              unsigned int v46 = *((_DWORD *)v43 + 8);
              if (v40 >= v46) {
                break;
              }
              unint64_t v43 = *v42;
              unint64_t v44 = v42;
              if (!*v42) {
                goto LABEL_49;
              }
            }

            if (v46 >= v40) {
              break;
            }
            unint64_t v43 = v42[1];
            if (!v43)
            {
              unint64_t v44 = v42 + 1;
              goto LABEL_49;
            }
          }
        }

        else
        {
LABEL_49:
          int v47 = operator new(0x30uLL);
          v47[8] = v40;
          *((void *)v47 + 5) = v41;
          sub_32C38((uint64_t **)(a3 + 64), (uint64_t)v42, v44, (uint64_t *)v47);
          unint64_t v45 = (std::__shared_weak_count *)*((void *)&v123 + 1);
        }

        if (v45)
        {
          p_shared_owners = (unint64_t *)&v45->__shared_owners_;
          do
            unint64_t v49 = __ldaxr(p_shared_owners);
          while (__stlxr(v49 - 1, p_shared_owners));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }

        unint64_t v50 = (std::__shared_weak_count *)*((void *)&v124 + 1);
        if (*((void *)&v124 + 1))
        {
          int v51 = (unint64_t *)(*((void *)&v124 + 1) + 8LL);
          do
            unint64_t v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
            std::__shared_weak_count::__release_weak(v50);
          }
        }

        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
        }
      }

      if (*((void *)&v128 + 1)) {
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v128 + 1));
      }
      unint64_t v53 = (std::__shared_weak_count *)*((void *)&v125 + 1);
      if (*((void *)&v125 + 1))
      {
        CFTypeRef v54 = (unint64_t *)(*((void *)&v125 + 1) + 8LL);
        do
          unint64_t v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }

      uint64_t v7 = (void *)v7[1];
    }

    while (v7 != (void *)(*(void *)a2 + 16LL));
  }

  int v114 = operator new(0x68uLL);
  uint64_t v56 = (std::__shared_weak_count *)operator new(0x128uLL);
  *(_OWORD *)&v56->__shared_owners_ = 0u;
  v56->__vftable = (std::__shared_weak_count_vtbl *)off_471B08;
  uint64_t v129 = 0LL;
  __int128 v128 = 0u;
  sub_7A5B8(&v128, v9, (uint64_t)v8, (v8 - v9) >> 2);
  sub_2BC660((uint64_t)&v56[1]);
  v56[5].__shared_owners_ = 0LL;
  unint64_t v57 = (void **)&v56[5].__shared_owners_;
  v56[1].__vftable = (std::__shared_weak_count_vtbl *)off_483AA8;
  v56[4].__shared_owners_ = (uint64_t)off_483B78;
  HIDWORD(v56[4].__shared_weak_owners_) = 0;
  LOBYTE(v56[5].__vftable) = 0;
  v56[5].__shared_weak_owners_ = 0LL;
  v56[6].__vftable = 0LL;
  sub_189C20((uint64_t)&v56[6].__shared_owners_);
  uint64_t v59 = (_DWORD *)*((void *)&v128 + 1);
  uint64_t v58 = (_DWORD *)v128;
  if ((void)v128 == *((void *)&v128 + 1))
  {
    int v108 = (os_log_t *)sub_138E8(13);
    __int128 v109 = *v108;
    if (*v108 && os_log_type_enabled(*v108, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "SplitterMasterVolumeControl.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 52;
      _os_log_impl( &dword_0,  v109,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError): Empty parameter.",  buf,  0x12u);
    }

    uint64_t v110 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v110 = &off_4865A0;
    v110[2] = 560947818;
  }

  uint64_t v60 = (os_log_t *)sub_138E8(1);
  CFTypeRef v61 = *v60;
  if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "SplitterMasterVolumeControl.cpp";
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&buf[14] = 54;
    *(_WORD *)&_BYTE buf[18] = 2048;
    *(void *)&buf[20] = v56 + 1;
    _os_log_impl(&dword_0, v61, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Created master volume (%p)", buf, 0x1Cu);
  }

  std::string __p = v58;
  do
  {
    shared_weak_owners = (char *)v56[5].__shared_weak_owners_;
    __int128 v62 = v56[6].__vftable;
    if (shared_weak_owners >= (char *)v62)
    {
      shared_owners = (char *)*v57;
      uint64_t v66 = (shared_weak_owners - (_BYTE *)*v57) >> 2;
      unint64_t v67 = v66 + 1;
      uint64_t v68 = (char *)v62 - shared_owners;
      if (v68 >> 1 > v67) {
        unint64_t v67 = v68 >> 1;
      }
      else {
        unint64_t v69 = v67;
      }
      if (v69)
      {
        unint64_t v69 = (unint64_t)sub_7A890(v69);
        shared_owners = (char *)v56[5].__shared_owners_;
        shared_weak_owners = (char *)v56[5].__shared_weak_owners_;
      }

      else
      {
        uint64_t v70 = 0LL;
      }

      uint64_t v71 = (_DWORD *)(v69 + 4 * v66);
      *uint64_t v71 = *v58;
      int v64 = v71 + 1;
      while (shared_weak_owners != shared_owners)
      {
        int v72 = *((_DWORD *)shared_weak_owners - 1);
        shared_weak_owners -= 4;
        *--uint64_t v71 = v72;
      }

      v56[5].__shared_owners_ = (uint64_t)v71;
      v56[5].__shared_weak_owners_ = (uint64_t)v64;
      v56[6].__vftable = (std::__shared_weak_count_vtbl *)(v69 + 4 * v70);
      if (shared_owners) {
        operator delete(shared_owners);
      }
    }

    else
    {
      *(_DWORD *)shared_weak_owners = *v58;
      int v64 = shared_weak_owners + 4;
    }

    v56[5].__shared_weak_owners_ = (uint64_t)v64;
    AudioObjectID v73 = *v58;
    *(_DWORD *)buf = 2004053366;
    *(void *)&uint8_t buf[4] = qword_4A8EA0;
    if (AudioObjectHasProperty(v73, (const AudioObjectPropertyAddress *)buf))
    {
      LODWORD(v124) = *v58;
      *(_DWORD *)buf = 2004053366;
      *(void *)&uint8_t buf[4] = qword_4A8EA0;
      unint64_t v74 = sub_1B99A8((AudioObjectID *)&v124, (const AudioObjectPropertyAddress *)buf, 0, 0LL);
      int v76 = v74;
      if ((_DWORD)v74 || !v75)
      {
        int v102 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v102 = &off_4865A0;
        v102[2] = v76;
      }

      HIDWORD(v56[4].__shared_weak_owners_) = HIDWORD(v74);
      unint64_t v77 = (os_log_t *)sub_138E8(1);
      uint64_t v78 = *v77;
      if (*v77 && os_log_type_enabled(*v77, OS_LOG_TYPE_DEFAULT))
      {
        double v79 = *((float *)&v56[4].__shared_weak_owners_ + 1);
        int v80 = *v58;
        *(_DWORD *)buf = 136316162;
        *(void *)&uint8_t buf[4] = "SplitterMasterVolumeControl.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 63;
        *(_WORD *)&_BYTE buf[18] = 2048;
        *(void *)&buf[20] = v56 + 1;
        *(_WORD *)&_BYTE buf[28] = 2048;
        *(double *)&buf[30] = v79;
        *(_WORD *)&buf[38] = 1024;
        int v131 = v80;
        _os_log_impl(&dword_0, v78, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Initial master volume (%p)  %f from %u", buf, 0x2Cu);
      }
    }

    ++v58;
  }

  while (v58 != v59);
  if (__p) {
    operator delete(__p);
  }
  *(void *)&__int128 v125 = v56 + 1;
  *((void *)&v125 + 1) = v56;
  __int128 v122 = v125;
  __int128 v125 = 0uLL;
  *(void *)(a3 + sub_7A768(v9 - 32) = sub_CAF18((uint64_t)v114, &v122);
  if (v56)
  {
    __int16 v81 = (unint64_t *)&v56->__shared_owners_;
    do
      unint64_t v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }

  uint64_t v83 = (std::__shared_weak_count *)*((void *)&v125 + 1);
  if (*((void *)&v125 + 1))
  {
    int v84 = (unint64_t *)(*((void *)&v125 + 1) + 8LL);
    do
      unint64_t v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }

  uint64_t v86 = operator new(0x68uLL);
  sub_1662B4((uint64_t)v86, (char **)&v126);
  *(void *)(a3 + 40) = v86;
  int v87 = operator new(0x68uLL);
  sub_CAEBC((uint64_t *)buf);
  uint64_t v118 = *(std::__shared_weak_count **)&buf[8];
  __int128 v121 = *(_OWORD *)buf;
  *(void *)buf = 0LL;
  *(void *)&buf[8] = 0LL;
  sub_CAF18((uint64_t)v87, &v121);
  *(void *)(a3 + sub_51FA0(v10 + 48) = v87;
  if (v118)
  {
    __int128 v88 = (unint64_t *)&v118->__shared_owners_;
    do
      unint64_t v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
      std::__shared_weak_count::__release_weak(v118);
    }
  }

  int v90 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    __int128 v91 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }

  int v93 = operator new(0x68uLL);
  sub_CB144((uint64_t *)buf);
  uint64_t v119 = *(std::__shared_weak_count **)&buf[8];
  __int128 v120 = *(_OWORD *)buf;
  *(void *)buf = 0LL;
  *(void *)&buf[8] = 0LL;
  sub_CAF18((uint64_t)v93, &v120);
  *(void *)(a3 + 56) = v93;
  if (v119)
  {
    __int128 v94 = (unint64_t *)&v119->__shared_owners_;
    do
      unint64_t v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }

  int v96 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    __int128 v97 = (unint64_t *)(*(void *)&buf[8] + 8LL);
    do
      unint64_t v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }

  if (v9) {
    operator delete(v9);
  }
  *(void *)buf = &v126;
  sub_7A668((void ***)buf);
}

void sub_165AC0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, char a21, uint64_t a22, char a23, uint64_t a24, char a25, uint64_t a26, char a27, uint64_t a28, char *a29, uint64_t a30, char a31)
{
  *(void *)(v33 + 152) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(v33 + 176));
  uint64_t v36 = *v31;
  if (*v31)
  {
    *(void *)(v33 + 136) = v36;
    operator delete(v36);
  }

  sub_F3008(a17);
  uint64_t v37 = *(void **)(v34 - 184);
  if (v37)
  {
    *(void *)(v34 - 176) = v37;
    operator delete(v37);
  }

  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v33);
  operator delete(v38);
  operator delete(__p);
  if (v32) {
    operator delete(v32);
  }
  a29 = &a31;
  sub_7A668((void ***)&a29);
  _Unwind_Resume(a1);
}

void sub_165CB8( uint64_t a1@<X0>, unsigned int **a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t **a5@<X8>)
{
  char v9 = *a2;
  memset(__p, 0, sizeof(__p));
  sub_105E0C((char **)v45, *(_DWORD *)(a1 + 8), a2, (unsigned int **)__p);
  uint64_t v10 = (uint64_t *)operator new(0x390uLL);
  sub_2EF040((uint64_t)v10, a3, (uint64_t)v9, (__int128 *)(a2 + 15), v45, 0, a4);
  uint64_t *v10 = (uint64_t)&off_46D690;
  if (!a3[2])
  {
    BOOL v41 = (os_log_t *)sub_138E8(13);
    char v42 = *v41;
    if (*v41 && os_log_type_enabled(*v41, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_BroadcastSplitter.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 51;
      _os_log_impl(&dword_0, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  sub_2315F8(v10);
  uint64_t v11 = *(void **)(a3[1] + 8LL);
  *(void *)buf = buf;
  *(void *)&buf[8] = buf;
  *(void *)&_DWORD buf[16] = 0LL;
  if (v11 != a3)
  {
    do
    {
      int v12 = sub_85E54(v11 + 2);
      uint64_t v13 = *(void *)buf;
      *int v12 = *(void *)buf;
      v12[1] = buf;
      *(void *)(v13 + 8) = v12;
      *(void *)buf = v12;
      ++*(void *)&buf[16];
      uint64_t v11 = (void *)v11[1];
    }

    while (v11 != a3);
    for (uint64_t i = *(void *)&buf[8]; (uint8_t *)i != buf; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v15 = sub_28153C((uint64_t)v10, *((_DWORD *)a2 + 34), a2 + 3, 1LL, 0LL, (uint64_t *)(i + 16), v9);
      unint64_t v16 = operator new(0x18uLL);
      v16[1] = v10 + 106;
      v16[2] = v15;
      uint64_t v17 = v10[106];
      *unint64_t v16 = v17;
      *(void *)(v17 + 8) = v16;
      v10[106] = (uint64_t)v16;
      ++v10[108];
    }
  }

  sub_85CA0((uint64_t *)buf);
  uint64_t v54 = 0LL;
  uint64_t v18 = *(void *)(*((void *)v9 + 3) + 72LL);
  sub_85A90(v53, *(void **)(a3[1] + 48LL));
  uint64_t v19 = *((unsigned int *)a2 + 34);
  uint64_t v20 = *((void *)v9 + 5);
  *(void *)buf = *(unsigned int **)((char *)a2 + 124);
  sub_1F7320(v52, v19, a2 + 3, v53, v18, v20, (unsigned int *)buf, &v54);
  int v21 = (uint64_t *)v10[98];
  uint64_t v22 = (std::__shared_weak_count *)v10[99];
  int v47 = (uint8_t *)v21;
  uint64_t v48 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      unint64_t v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
    unint64_t v50 = v21;
    int v51 = v22;
    p_shared_weak_owners = (unint64_t *)&v22->__shared_weak_owners_;
    do
      unint64_t v26 = __ldxr(p_shared_weak_owners);
    while (__stxr(v26 + 1, p_shared_weak_owners));
  }

  else
  {
    unint64_t v50 = v21;
    int v51 = 0LL;
  }

  __int128 v49 = *(_OWORD *)v52;
  *(_OWORD *)unint64_t v52 = 0uLL;
  uint64_t v27 = v54;
  sub_280F54((uint64_t)buf, v18, *((void *)v9 + 5), *v9, 1768776806LL);
  uint64_t v28 = (std::__shared_weak_count_vtbl *)sub_22B748((uint64_t)v10, (uint64_t *)&v50, v53, &v49, v27, (uint64_t)buf);
  unint64_t v29 = (std::__shared_weak_count *)*((void *)&v49 + 1);
  if (*((void *)&v49 + 1))
  {
    uint64_t v30 = (unint64_t *)(*((void *)&v49 + 1) + 8LL);
    do
      unint64_t v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }

  if (v51) {
    std::__shared_weak_count::__release_weak(v51);
  }
  uint64_t v32 = v48;
  if (v48)
  {
    uint64_t v33 = (unint64_t *)&v48->__shared_owners_;
    do
      unint64_t v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }

  memset(buf, 0, 24);
  v46[0] = v28;
  if (v28)
  {
    uint64_t v35 = (std::__shared_weak_count *)operator new(0x20uLL);
    v35->__vftable = (std::__shared_weak_count_vtbl *)&off_47C9A8;
    v35->__shared_owners_ = 0LL;
    v35->__shared_weak_owners_ = 0LL;
    v35[1].__vftable = v28;
  }

  else
  {
    uint64_t v35 = 0LL;
  }

  v46[1] = v35;
  sub_85AF8(&v47, v46);
  sub_2318DC((unint64_t *)v10, (uint64_t **)buf, (uint64_t **)&v47);
  unint64_t v55 = &v47;
  sub_7A668((void ***)&v55);
  if (v35)
  {
    uint64_t v36 = (unint64_t *)&v35->__shared_owners_;
    do
      unint64_t v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }

  int v47 = buf;
  sub_7A668((void ***)&v47);
  (*(void (**)(uint64_t *))(*v10 + 600))(v10);
  uint64_t v38 = (std::__shared_weak_count *)v52[1];
  if (v52[1])
  {
    char v39 = (unint64_t *)(v52[1] + 8);
    do
      unint64_t v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }

  sub_85B80(v53);
  *a5 = v10;
  *(void *)buf = v45;
  sub_7A668((void ***)buf);
  if (__p[0]) {
    operator delete(__p[0]);
  }
}

void sub_16616C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char *a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, std::__shared_weak_count *a24, char a25, uint64_t a26, uint64_t a27, char a28)
{
  a18 = &a13;
  sub_7A668((void ***)&a18);
  if (a10) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1662B4(uint64_t a1, char **a2)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 64) = 0LL;
  *(_OWORD *)(a1 + sub_7A768(v9 - 32) = 0u;
  *(_OWORD *)(a1 + sub_51FA0(v10 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(void *)(a1 + 80) = 0LL;
  unsigned int v3 = (int64x2_t *)(a1 + 80);
  *(void *)a1 = off_484208;
  *(void *)(a1 + sub_7BFE0(v23 - 88) = 0LL;
  *(void *)(a1 + 96) = 0LL;
  char v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 == v5)
  {
    sub_CAEBC((uint64_t *)&v33);
    __int128 v14 = v33;
    __int128 v34 = v33;
    __int128 v33 = 0uLL;
    unint64_t v15 = *(void *)(a1 + 96);
    unint64_t v16 = *(_OWORD **)(a1 + 88);
    if ((unint64_t)v16 >= v15)
    {
      __int128 v32 = v14;
      uint64_t v18 = ((uint64_t)v16 - v3->i64[0]) >> 4;
      uint64_t v19 = v15 - v3->i64[0];
      uint64_t v20 = v19 >> 3;
      else {
        unint64_t v21 = v20;
      }
      uint64_t v38 = a1 + 96;
      uint64_t v22 = (char *)sub_7BE90(v21);
      unint64_t v24 = &v22[16 * v18];
      *(_OWORD *)unint64_t v24 = v32;
      __int128 v34 = 0uLL;
      unint64_t v26 = *(void **)(a1 + 80);
      unint64_t v25 = *(void **)(a1 + 88);
      if (v25 == v26)
      {
        int64x2_t v29 = vdupq_n_s64((unint64_t)v25);
        uint64_t v27 = &v22[16 * v18];
      }

      else
      {
        uint64_t v27 = &v22[16 * v18];
        do
        {
          __int128 v28 = *((_OWORD *)v25 - 1);
          v25 -= 2;
          *((_OWORD *)v27 - 1) = v28;
          v27 -= 16;
          *unint64_t v25 = 0LL;
          v25[1] = 0LL;
        }

        while (v25 != v26);
        int64x2_t v29 = *v3;
      }

      uint64_t v17 = v24 + 16;
      *(void *)(a1 + 80) = v27;
      *(void *)(a1 + sub_7BFE0(v23 - 88) = v24 + 16;
      int64x2_t v36 = v29;
      uint64_t v30 = *(void *)(a1 + 96);
      *(void *)(a1 + 96) = &v22[16 * v23];
      uint64_t v37 = v30;
      uint64_t v35 = v29.i64[0];
      sub_A0D64((uint64_t)&v35);
    }

    else
    {
      *unint64_t v16 = v14;
      uint64_t v17 = v16 + 1;
      __int128 v34 = 0uLL;
    }

    *(void *)(a1 + sub_7BFE0(v23 - 88) = v17;
  }

  else
  {
    uint64_t v6 = v5 - v4;
    sub_1664F0((void **)(a1 + 80));
    if (v5 - v4 < 0) {
      sub_7A87C();
    }
    uint64_t v7 = v6 >> 4;
    uint64_t v8 = *(void *)(a1 + 96) - *(void *)(a1 + 80);
    else {
      unint64_t v9 = v7;
    }
    sub_846C4(v3, v9);
    uint64_t v10 = *(void **)(a1 + 88);
    do
    {
      void *v10 = *(void *)v4;
      uint64_t v11 = *((void *)v4 + 1);
      v10[1] = v11;
      if (v11)
      {
        int v12 = (unint64_t *)(v11 + 8);
        do
          unint64_t v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }

      v4 += 16;
      v10 += 2;
    }

    while (v4 != v5);
    *(void *)(a1 + sub_7BFE0(v23 - 88) = v10;
  }

  sub_CC160(a1);
  return a1;
}

void sub_1664B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_7A768((uint64_t)va1);
  sub_7A768((uint64_t)va);
  sub_7A668((void ***)va1);
  sub_F3008(v3);
  _Unwind_Resume(a1);
}

void sub_1664F0(void **a1)
{
  int v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    char v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        uint64_t v3 = sub_7A768(v3 - 16);
      while ((void *)v3 != v1);
      char v4 = *a1;
    }

    a1[1] = v1;
    operator delete(v4);
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
  }

void sub_16654C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_471B08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_16655C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_471B08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_16657C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_166594(void *a1, AudioObjectPropertySelector a2, CFTypeRef *a3)
{
  uint64_t v6 = (const __CFString *)*a3;
  if (*a3) {
    CFRetain(*a3);
  }
  CFTypeRef cf = v6;
  *a1 = 0LL;
  a1[1] = 0LL;
  if (CFStringCompare(v6, @"Codec", 0LL) == kCFCompareEqualTo)
  {
    uint64_t v8 = operator new(0x2B8uLL);
    CFTypeRef cf = 0LL;
    sub_36E3FC((uint64_t)v8, a2, v6, v6, 0LL);
    void *v8 = off_4736F8;
    v8[62] = 0LL;
    v8[63] = 0LL;
    sub_189C20((uint64_t)(v8 + 64));
    *((_BYTE *)v8 + 656) = 0;
    if (sub_93B80())
    {
      v8[83] = 0LL;
    }

    else
    {
      *(void *)AudioObjectPropertyAddress inAddress = &inAddress[8];
      *(void *)&inAddress[8] = 0LL;
      *(void *)&inAddress[32] = 0LL;
      v209[0] = 0LL;
      *(void *)&inAddress[16] = 0LL;
      *(void *)&inAddress[24] = &inAddress[32];
      sub_2DE180((uint64_t *)inAddress, 0x706D6269u, 1768778083);
      sub_2DE180((uint64_t *)inAddress, 0x706D6269u, 1768778033);
      sub_2DE180((uint64_t *)inAddress, 0x706D7769u, 1701669219);
      sub_2DE180((uint64_t *)inAddress, 0x70747469u, 1701669219);
      sub_2DE334((uint64_t)inAddress, 0x656D6963u, 1886222185);
      sub_2DE334((uint64_t)inAddress, 0x656D6963u, 1886680169);
      sub_2DE334((uint64_t)inAddress, 0x696D6963u, 1886216809);
      sub_2DE334((uint64_t)inAddress, 0x696D6931u, 1886216809);
      sub_2DE334((uint64_t)inAddress, 0x736D6963u, 1886216809);
      sub_2DE334((uint64_t)inAddress, 0x696D6932u, 1886216809);
      sub_2DE334((uint64_t)inAddress, 0x6C6D6963u, 1886216809);
      sub_2DE334((uint64_t)inAddress, 0x666D6963u, 1886216809);
      sub_2DE334((uint64_t)inAddress, 0x6265616Du, 1886216809);
      unint64_t v24 = operator new(0x78uLL);
      sub_2DFDA8((uint64_t)v24, a2, inAddress);
      v8[83] = v24;
      sub_8DF20(*(void **)&inAddress[32]);
      sub_8DF20(*(void **)&inAddress[8]);
    }

    v8[84] = sub_33341C();
    *((_BYTE *)v8 + 680) = 0;
    *((_DWORD *)v8 + 171) = 2;
    *((_BYTE *)v8 + 6sub_7BFE0(v23 - 88) = 0;
    *((_DWORD *)v8 + 173) = 0;
    if (a2)
    {
      if (v6)
      {
        *(void *)&__p.mSelector = 0x696E707436776E66LL;
        __p.mElement = 0;
        if ((*(unsigned int (**)(void *, AudioObjectPropertyAddress *))(*v8 + 16LL))(v8, &__p))
        {
          *(_DWORD *)AudioObjectPropertyAddress inAddress = 4;
          LODWORD(inData) = 0;
          sub_232A4((uint64_t)v8, &__p, 0, 0LL, (UInt32 *)inAddress, (float *)&inData);
          *((_BYTE *)v8 + 680) = (_DWORD)inData != 0;
          sub_9005C();
          sub_189620((uint64_t)v8, byte_48CC70);
        }

        AudioObjectID v25 = (*(uint64_t (**)(void *))(*v8 + 120LL))(v8);
        if (AudioObjectHasProperty(v25, (const AudioObjectPropertyAddress *)&qword_48F4B0))
        {
          AudioObjectID v26 = (*(uint64_t (**)(void *))(*v8 + 120LL))(v8);
          LODWORD(inData) = 0;
          strcpy(inAddress, "dneitpni");
          inAddress[9] = 0;
          *(_WORD *)&inAddress[10] = 0;
          OSStatus v27 = AudioObjectSetPropertyData(v26, (const AudioObjectPropertyAddress *)inAddress, 0, 0LL, 4u, &inData);
          if (v27)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            *(void *)exception = &off_4865A0;
            exception[2] = v27;
          }

          if (atomic_load((unsigned int *)v8 + 173))
          {
            CFStringRef v183 = (os_log_t *)sub_138E8(13);
            unint64_t v184 = *v183;
            if (*v183 && os_log_type_enabled(*v183, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress inAddress = 136315394;
              *(void *)&inAddress[4] = "Device_Codec_Aspen.cpp";
              *(_WORD *)&inAddress[12] = 1024;
              *(_DWORD *)&inAddress[14] = 304;
              _os_log_impl( &dword_0,  v184,  OS_LOG_TYPE_ERROR,  "%25s:%-5d POSTCONDITION FAILURE (std::logic_error).",  inAddress,  0x12u);
            }

            __int128 v185 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v185, "Postcondition failure.");
          }
        }

        if ((sub_1861F4((uint64_t)v8) & 1) != 0
          || (*(void *)AudioObjectPropertyAddress inAddress = 0x6F7574706D757465LL,
              *(_DWORD *)&inAddress[8] = 4,
              ((*(uint64_t (**)(void *, _BYTE *))(*v8 + 16LL))(v8, inAddress) & 1) != 0))
        {
          sub_371820((uint64_t)v8, 0, 0x6F757470u, 0);
        }

        int64x2_t v29 = (std::__shared_weak_count *)operator new(0x28uLL);
        v29->__shared_owners_ = 0LL;
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        v29->__vftable = (std::__shared_weak_count_vtbl *)&off_471BB8;
        v29->__shared_weak_owners_ = 0LL;
        v29[1].__vftable = (std::__shared_weak_count_vtbl *)v8;
        v29[1].__shared_owners_ = (uint64_t)sub_16877C;
        *(void *)&__int128 v31 = v8;
        *((void *)&v31 + 1) = v29;
        __int128 v32 = (std::__shared_weak_count *)v8[11];
        if (v32)
        {
          if (v32->__shared_owners_ != -1)
          {
LABEL_57:
            unint64_t v21 = (std::__shared_weak_count *)a1[1];
            *(_OWORD *)a1 = v31;
            if (!v21) {
              goto LABEL_149;
            }
            unint64_t v40 = (unint64_t *)&v21->__shared_owners_;
            do
              unint64_t v23 = __ldaxr(v40);
            while (__stlxr(v23 - 1, v40));
            goto LABEL_147;
          }

          do
            unint64_t v33 = __ldxr(p_shared_owners);
          while (__stxr(v33 + 1, p_shared_owners));
          __int128 v188 = v31;
          p_shared_weak_owners = (unint64_t *)&v29->__shared_weak_owners_;
          do
            unint64_t v35 = __ldxr(p_shared_weak_owners);
          while (__stxr(v35 + 1, p_shared_weak_owners));
          v8[10] = v8;
          v8[11] = v29;
          std::__shared_weak_count::__release_weak(v32);
          __int128 v31 = v188;
        }

        else
        {
          do
            unint64_t v36 = __ldxr(p_shared_owners);
          while (__stxr(v36 + 1, p_shared_owners));
          uint64_t v37 = (unint64_t *)&v29->__shared_weak_owners_;
          do
            unint64_t v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
          v8[10] = v8;
          v8[11] = v29;
        }

        do
          unint64_t v39 = __ldaxr(p_shared_owners);
        while (__stlxr(v39 - 1, p_shared_owners));
        if (!v39)
        {
          __int128 v189 = v31;
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
          __int128 v31 = v189;
        }

        goto LABEL_57;
      }

      unint64_t v179 = (os_log_t *)sub_138E8(13);
      unint64_t v180 = *v179;
      if (*v179 && os_log_type_enabled(*v179, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress inAddress = 136315394;
        *(void *)&inAddress[4] = "Device_Codec_Aspen.cpp";
        *(_WORD *)&inAddress[12] = 1024;
        *(_DWORD *)&inAddress[14] = 287;
        _os_log_impl( &dword_0,  v180,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  inAddress,  0x12u);
      }
    }

    else
    {
      int v177 = (os_log_t *)sub_138E8(13);
      unint64_t v178 = *v177;
      if (*v177 && os_log_type_enabled(*v177, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress inAddress = 136315394;
        *(void *)&inAddress[4] = "Device_Codec_Aspen.cpp";
        *(_WORD *)&inAddress[12] = 1024;
        *(_DWORD *)&inAddress[14] = 286;
        _os_log_impl( &dword_0,  v178,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  inAddress,  0x12u);
      }
    }

    __int128 v181 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v181, "Precondition failure.");
  }

  if (CFStringCompare(v6, @"Baseband Voice", 0LL))
  {
    if (CFStringCompare(v6, @"USB Audio Output", 0LL))
    {
      if (CFStringCompare(v6, @"USB IDAM", 0LL))
      {
        if (CFStringCompare(v6, @"Speaker", 0LL))
        {
          if (CFStringCompare(v6, @"AppleSongbirdDSP", 0LL))
          {
            if (CFStringCompare(v6, @"PuffinInput", 0LL))
            {
              if (CFStringCompare(v6, @"PuffinOutput", 0LL))
              {
                if (CFStringCompare(v6, @"Actuator", 0LL))
                {
                  *(void *)AudioObjectPropertyAddress inAddress = @"HP16Mic";
                  if (sub_168A84(v6, @"AOP Audio-1", (CFStringRef *)inAddress))
                  {
                    uint64_t v7 = operator new(0x200uLL);
                    CFTypeRef cf = 0LL;
                    sub_37A864((uint64_t)v7, a2, v6);
                    sub_168AD0(inAddress, (uint64_t)v7);
                    sub_127660((uint64_t)a1, (__int128 *)inAddress);
                    sub_7A768((uint64_t)inAddress);
                  }

                  else
                  {
                    *(void *)AudioObjectPropertyAddress inAddress = @"DigitalMic";
                    *(void *)&__p.mSelector = @"Mic";
                    if (sub_168C04(v6, @"Digital Mic", (CFStringRef *)inAddress, (CFStringRef *)&__p))
                    {
                      int v166 = operator new(0x200uLL);
                      CFTypeRef cf = 0LL;
                      sub_D9BBC((uint64_t)v166, a2, v6);
                      sub_168C70(inAddress, (uint64_t)v166);
                      sub_127660((uint64_t)a1, (__int128 *)inAddress);
                      sub_7A768((uint64_t)inAddress);
                    }

                    else
                    {
                      *(void *)AudioObjectPropertyAddress inAddress = @"Flicker";
                      *(void *)&__p.mSelector = @"Penrose";
                      if (sub_168C04(v6, @"Hawking", (CFStringRef *)inAddress, (CFStringRef *)&__p))
                      {
                        unint64_t v167 = operator new(0x1F0uLL);
                        CFTypeRef cf = 0LL;
                        sub_36E3FC((uint64_t)v167, a2, v6, v6, 0LL);
                        void *v167 = &off_483F58;
                        sub_168DA4(inAddress, (uint64_t)v167);
                        sub_127660((uint64_t)a1, (__int128 *)inAddress);
                        sub_7A768((uint64_t)inAddress);
                      }

                      else if (CFStringCompare(v6, @"Halogen", 0LL))
                      {
                        *(void *)AudioObjectPropertyAddress inAddress = @"AudioDebug";
                        *(void *)&__p.mSelector = @"AudioDebug2";
                        if (!sub_168C04(v6, @"MaggieDebug", (CFStringRef *)inAddress, (CFStringRef *)&__p)) {
                          goto LABEL_278;
                        }
                        if (qword_48CDB8 != -1) {
                          dispatch_once(&qword_48CDB8, &stru_46DD20);
                        }
                        if (byte_48CDA8 || byte_48CDA9)
                        {
                          unint64_t v168 = operator new(0x208uLL);
                          CFTypeRef cf = 0LL;
                          sub_16900C((uint64_t)v168, a2, v6);
                          sub_1690F0(inAddress, (uint64_t)v168);
                          sub_127660((uint64_t)a1, (__int128 *)inAddress);
                          sub_7A768((uint64_t)inAddress);
                        }

                        else
                        {
LABEL_278:
                          *(void *)AudioObjectPropertyAddress inAddress = @"DSP Debug2";
                          if (sub_168A84(v6, @"DSP Debug1", (CFStringRef *)inAddress))
                          {
                            unint64_t v170 = operator new(0x210uLL);
                            CFTypeRef cf = 0LL;
                            sub_EE48C((uint64_t)v170, a2, v6);
                            sub_169224(inAddress, (uint64_t)v170);
                            sub_127660((uint64_t)a1, (__int128 *)inAddress);
                            sub_7A768((uint64_t)inAddress);
                          }

                          else
                          {
                            if (CFStringCompare(v6, @"Haptic Debug", 0LL)) {
                              goto LABEL_311;
                            }
                            if (qword_48CDB8 != -1) {
                              dispatch_once(&qword_48CDB8, &stru_46DD20);
                            }
                            if (byte_48CDA8 || byte_48CDA9)
                            {
                              unint64_t v172 = operator new(0x208uLL);
                              CFTypeRef cf = 0LL;
                              sub_169358((uint64_t)v172, a2, v6);
                              sub_16943C(inAddress, (uint64_t)v172);
                              sub_127660((uint64_t)a1, (__int128 *)inAddress);
                              sub_7A768((uint64_t)inAddress);
                            }

                            else
                            {
LABEL_311:
                              if (CFStringCompare(v6, @"Virtual eARC", 0LL))
                              {
                                if (CFStringCompare(v6, @"Squid Audio", 0LL))
                                {
                                  if (CFStringCompare(v6, @"HPMic", 0LL))
                                  {
                                    if (CFStringCompare(v6, @"Receiver", 0LL))
                                    {
                                      if (CFStringCompare(v6, @"LPMicInjection", 0LL) == kCFCompareEqualTo)
                                      {
                                        unint64_t v171 = operator new(0x1F0uLL);
                                        CFTypeRef cf = 0LL;
                                        sub_36E3FC((uint64_t)v171, a2, v6, v6, 0LL);
                                        *unint64_t v171 = &off_475EB8;
                                        sub_169A40(inAddress, (uint64_t)v171);
                                        sub_127660((uint64_t)a1, (__int128 *)inAddress);
                                        sub_7A768((uint64_t)inAddress);
                                      }
                                    }

                                    else
                                    {
                                      uint64_t v176 = operator new(0x2B8uLL);
                                      CFTypeRef cf = 0LL;
                                      sub_388320((uint64_t)v176, a2, v6);
                                      sub_16990C(inAddress, (uint64_t)v176);
                                      sub_127660((uint64_t)a1, (__int128 *)inAddress);
                                      sub_7A768((uint64_t)inAddress);
                                    }
                                  }

                                  else
                                  {
                                    unint64_t v175 = operator new(0x2B8uLL);
                                    CFTypeRef cf = 0LL;
                                    sub_1E0818((uint64_t)v175, a2, v6);
                                    sub_1697D8(inAddress, (uint64_t)v175);
                                    sub_127660((uint64_t)a1, (__int128 *)inAddress);
                                    sub_7A768((uint64_t)inAddress);
                                  }
                                }

                                else
                                {
                                  uint64_t v174 = operator new(0x1F0uLL);
                                  CFTypeRef cf = 0LL;
                                  sub_36E3FC((uint64_t)v174, a2, v6, v6, 0LL);
                                  *uint64_t v174 = &off_484D90;
                                  sub_1696A4(inAddress, (uint64_t)v174);
                                  sub_127660((uint64_t)a1, (__int128 *)inAddress);
                                  sub_7A768((uint64_t)inAddress);
                                }
                              }

                              else
                              {
                                unint64_t v173 = operator new(0x1F0uLL);
                                sub_36E3FC((uint64_t)v173, a2, @"Virtual eARC", @"Virtual eARC", 0LL);
                                *unint64_t v173 = &off_485490;
                                sub_169570(inAddress, (uint64_t)v173);
                                sub_127660((uint64_t)a1, (__int128 *)inAddress);
                                sub_7A768((uint64_t)inAddress);
                              }
                            }
                          }
                        }
                      }

                      else
                      {
                        char v169 = operator new(0x1F0uLL);
                        CFTypeRef cf = 0LL;
                        sub_36E3FC((uint64_t)v169, a2, v6, v6, 0LL);
                        *char v169 = &off_475650;
                        sub_168ED8(inAddress, (uint64_t)v169);
                        sub_127660((uint64_t)a1, (__int128 *)inAddress);
                        sub_7A768((uint64_t)inAddress);
                      }
                    }
                  }
                }

                else
                {
                  unint64_t v165 = operator new(0x1F0uLL);
                  CFTypeRef cf = 0LL;
                  sub_36E3FC((uint64_t)v165, a2, v6, v6, 0LL);
                  void *v165 = &off_46EC70;
                  sub_168950(inAddress, (uint64_t)v165);
                  sub_127660((uint64_t)a1, (__int128 *)inAddress);
                  sub_7A768((uint64_t)inAddress);
                }
              }

              else
              {
                int v152 = operator new(0x1F0uLL);
                CFTypeRef cf = 0LL;
                sub_36E3FC((uint64_t)v152, a2, v6, v6, 0LL);
                *int v152 = &off_472B00;
                sub_16881C(inAddress, (uint64_t)v152);
                sub_127660((uint64_t)a1, (__int128 *)inAddress);
                sub_7A768((uint64_t)inAddress);
              }

              goto LABEL_149;
            }

            __int128 v94 = (std::__shared_weak_count_vtbl *)operator new(0x1F0uLL);
            CFTypeRef cf = 0LL;
            sub_36E3FC((uint64_t)v94, a2, v6, v6, 0LL);
            v94->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&off_472918;
            unint64_t v95 = (std::__shared_weak_count *)operator new(0x28uLL);
            v95->__shared_owners_ = 0LL;
            int v96 = (unint64_t *)&v95->__shared_owners_;
            v95->__vftable = (std::__shared_weak_count_vtbl *)&off_471EF0;
            v95->__shared_weak_owners_ = 0LL;
            v95[1].__vftable = v94;
            v95[1].__shared_owners_ = (uint64_t)sub_16877C;
            *(void *)&__int128 v97 = v94;
            *((void *)&v97 + 1) = v95;
            unint64_t v98 = (std::__shared_weak_count *)v94[2].~__shared_weak_count_0;
            if (v98)
            {
              if (v98->__shared_owners_ != -1)
              {
LABEL_144:
                unint64_t v21 = (std::__shared_weak_count *)a1[1];
                *(_OWORD *)a1 = v97;
                if (!v21) {
                  goto LABEL_149;
                }
                __int128 v106 = (unint64_t *)&v21->__shared_owners_;
                do
                  unint64_t v23 = __ldaxr(v106);
                while (__stlxr(v23 - 1, v106));
                goto LABEL_147;
              }

              do
                unint64_t v99 = __ldxr(v96);
              while (__stxr(v99 + 1, v96));
              __int128 v198 = v97;
              __int128 v100 = (unint64_t *)&v95->__shared_weak_owners_;
              do
                unint64_t v101 = __ldxr(v100);
              while (__stxr(v101 + 1, v100));
              v94[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v94;
              v94[2].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v95;
              std::__shared_weak_count::__release_weak(v98);
              __int128 v97 = v198;
            }

            else
            {
              do
                unint64_t v102 = __ldxr(v96);
              while (__stxr(v102 + 1, v96));
              __int128 v103 = (unint64_t *)&v95->__shared_weak_owners_;
              do
                unint64_t v104 = __ldxr(v103);
              while (__stxr(v104 + 1, v103));
              v94[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v94;
              v94[2].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v95;
            }

            do
              unint64_t v105 = __ldaxr(v96);
            while (__stlxr(v105 - 1, v96));
            if (!v105)
            {
              __int128 v199 = v97;
              ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
              std::__shared_weak_count::__release_weak(v95);
              __int128 v97 = v199;
            }

            goto LABEL_144;
          }

          __int16 v81 = (std::__shared_weak_count_vtbl *)operator new(0x1F0uLL);
          CFTypeRef cf = 0LL;
          sub_36E3FC((uint64_t)v81, a2, v6, v6, 0LL);
          v81->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&off_47C9E0;
          unint64_t v82 = (std::__shared_weak_count *)operator new(0x28uLL);
          v82->__shared_owners_ = 0LL;
          uint64_t v83 = (unint64_t *)&v82->__shared_owners_;
          v82->__vftable = (std::__shared_weak_count_vtbl *)&off_471EB8;
          v82->__shared_weak_owners_ = 0LL;
          v82[1].__vftable = v81;
          v82[1].__shared_owners_ = (uint64_t)sub_16877C;
          *(void *)&__int128 v84 = v81;
          *((void *)&v84 + 1) = v82;
          unint64_t v85 = (std::__shared_weak_count *)v81[2].~__shared_weak_count_0;
          if (v85)
          {
            if (v85->__shared_owners_ != -1)
            {
LABEL_127:
              unint64_t v21 = (std::__shared_weak_count *)a1[1];
              *(_OWORD *)a1 = v84;
              if (!v21) {
                goto LABEL_149;
              }
              int v93 = (unint64_t *)&v21->__shared_owners_;
              do
                unint64_t v23 = __ldaxr(v93);
              while (__stlxr(v23 - 1, v93));
              goto LABEL_147;
            }

            do
              unint64_t v86 = __ldxr(v83);
            while (__stxr(v86 + 1, v83));
            __int128 v196 = v84;
            int v87 = (unint64_t *)&v82->__shared_weak_owners_;
            do
              unint64_t v88 = __ldxr(v87);
            while (__stxr(v88 + 1, v87));
            v81[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v81;
            v81[2].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v82;
            std::__shared_weak_count::__release_weak(v85);
            __int128 v84 = v196;
          }

          else
          {
            do
              unint64_t v89 = __ldxr(v83);
            while (__stxr(v89 + 1, v83));
            int v90 = (unint64_t *)&v82->__shared_weak_owners_;
            do
              unint64_t v91 = __ldxr(v90);
            while (__stxr(v91 + 1, v90));
            v81[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v81;
            v81[2].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v82;
          }

          do
            unint64_t v92 = __ldaxr(v83);
          while (__stlxr(v92 - 1, v83));
          if (!v92)
          {
            __int128 v197 = v84;
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
            __int128 v84 = v197;
          }

          goto LABEL_127;
        }

        uint64_t v68 = operator new(0x1F0uLL);
        CFTypeRef cf = 0LL;
        sub_36E3FC((uint64_t)v68, a2, v6, v6, 0LL);
        *(void *)uint64_t v68 = &off_47BC38;
        *((_DWORD *)v68 + 123) = 1;
        sub_31821C();
        if (!dword_49DAC8) {
          sub_371820((uint64_t)v68, 0, 0x6F757470u, 0);
        }
        unint64_t v69 = (std::__shared_weak_count *)operator new(0x28uLL);
        v69->__shared_owners_ = 0LL;
        uint64_t v70 = (unint64_t *)&v69->__shared_owners_;
        v69->__vftable = (std::__shared_weak_count_vtbl *)&off_471E80;
        v69->__shared_weak_owners_ = 0LL;
        v69[1].__vftable = (std::__shared_weak_count_vtbl *)v68;
        v69[1].__shared_owners_ = (uint64_t)sub_16877C;
        *(void *)&__int128 v71 = v68;
        *((void *)&v71 + 1) = v69;
        int v72 = (std::__shared_weak_count *)*((void *)v68 + 11);
        if (v72)
        {
          if (v72->__shared_owners_ != -1)
          {
LABEL_110:
            unint64_t v21 = (std::__shared_weak_count *)a1[1];
            *(_OWORD *)a1 = v71;
            if (!v21) {
              goto LABEL_149;
            }
            int v80 = (unint64_t *)&v21->__shared_owners_;
            do
              unint64_t v23 = __ldaxr(v80);
            while (__stlxr(v23 - 1, v80));
            goto LABEL_147;
          }

          do
            unint64_t v73 = __ldxr(v70);
          while (__stxr(v73 + 1, v70));
          __int128 v194 = v71;
          unint64_t v74 = (unint64_t *)&v69->__shared_weak_owners_;
          do
            unint64_t v75 = __ldxr(v74);
          while (__stxr(v75 + 1, v74));
          *((void *)v68 + 10) = v68;
          *((void *)v68 + 11) = v69;
          std::__shared_weak_count::__release_weak(v72);
          __int128 v71 = v194;
        }

        else
        {
          do
            unint64_t v76 = __ldxr(v70);
          while (__stxr(v76 + 1, v70));
          unint64_t v77 = (unint64_t *)&v69->__shared_weak_owners_;
          do
            unint64_t v78 = __ldxr(v77);
          while (__stxr(v78 + 1, v77));
          *((void *)v68 + 10) = v68;
          *((void *)v68 + 11) = v69;
        }

        do
          unint64_t v79 = __ldaxr(v70);
        while (__stlxr(v79 - 1, v70));
        if (!v79)
        {
          __int128 v195 = v71;
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
          __int128 v71 = v195;
        }

        goto LABEL_110;
      }

      unint64_t v55 = (std::__shared_weak_count_vtbl *)operator new(0x1F0uLL);
      CFTypeRef cf = 0LL;
      sub_36E3FC((uint64_t)v55, a2, v6, v6, 0LL);
      v55->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&off_471C60;
      uint64_t v56 = (std::__shared_weak_count *)operator new(0x28uLL);
      v56->__shared_owners_ = 0LL;
      unint64_t v57 = (unint64_t *)&v56->__shared_owners_;
      v56->__vftable = (std::__shared_weak_count_vtbl *)&off_471E48;
      v56->__shared_weak_owners_ = 0LL;
      v56[1].__vftable = v55;
      v56[1].__shared_owners_ = (uint64_t)sub_16877C;
      *(void *)&__int128 v58 = v55;
      *((void *)&v58 + 1) = v56;
      uint64_t v59 = (std::__shared_weak_count *)v55[2].~__shared_weak_count_0;
      if (v59)
      {
        if (v59->__shared_owners_ != -1)
        {
LABEL_91:
          unint64_t v21 = (std::__shared_weak_count *)a1[1];
          *(_OWORD *)a1 = v58;
          if (!v21) {
            goto LABEL_149;
          }
          unint64_t v67 = (unint64_t *)&v21->__shared_owners_;
          do
            unint64_t v23 = __ldaxr(v67);
          while (__stlxr(v23 - 1, v67));
          goto LABEL_147;
        }

        do
          unint64_t v60 = __ldxr(v57);
        while (__stxr(v60 + 1, v57));
        __int128 v192 = v58;
        CFTypeRef v61 = (unint64_t *)&v56->__shared_weak_owners_;
        do
          unint64_t v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
        v55[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v55;
        v55[2].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v56;
        std::__shared_weak_count::__release_weak(v59);
        __int128 v58 = v192;
      }

      else
      {
        do
          unint64_t v63 = __ldxr(v57);
        while (__stxr(v63 + 1, v57));
        int v64 = (unint64_t *)&v56->__shared_weak_owners_;
        do
          unint64_t v65 = __ldxr(v64);
        while (__stxr(v65 + 1, v64));
        v55[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v55;
        v55[2].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v56;
      }

      do
        unint64_t v66 = __ldaxr(v57);
      while (__stlxr(v66 - 1, v57));
      if (!v66)
      {
        __int128 v193 = v58;
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
        __int128 v58 = v193;
      }

      goto LABEL_91;
    }

    BOOL v41 = (std::__shared_weak_count_vtbl *)operator new(0x280uLL);
    CFTypeRef cf = 0LL;
    sub_36E3FC((uint64_t)v41, a2, v6, v6, 0LL);
    v41->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_475430;
    sub_189C20((uint64_t)&v41[12].__on_zero_shared);
    uint64_t v42 = sub_1F4000();
    sub_1F470C(v42, 1684500341, (unint64_t)sub_1E496C, (unint64_t)v41);
    unint64_t v43 = (std::__shared_weak_count *)operator new(0x28uLL);
    v43->__shared_owners_ = 0LL;
    unint64_t v44 = (unint64_t *)&v43->__shared_owners_;
    v43->__vftable = (std::__shared_weak_count_vtbl *)&off_471C28;
    v43->__shared_weak_owners_ = 0LL;
    v43[1].__vftable = v41;
    v43[1].__shared_owners_ = (uint64_t)sub_16877C;
    *(void *)&__int128 v45 = v41;
    *((void *)&v45 + 1) = v43;
    unsigned int v46 = (std::__shared_weak_count *)v41[2].~__shared_weak_count_0;
    if (v46)
    {
      if (v46->__shared_owners_ != -1)
      {
LABEL_74:
        unint64_t v21 = (std::__shared_weak_count *)a1[1];
        *(_OWORD *)a1 = v45;
        if (!v21) {
          goto LABEL_149;
        }
        uint64_t v54 = (unint64_t *)&v21->__shared_owners_;
        do
          unint64_t v23 = __ldaxr(v54);
        while (__stlxr(v23 - 1, v54));
        goto LABEL_147;
      }

      do
        unint64_t v47 = __ldxr(v44);
      while (__stxr(v47 + 1, v44));
      __int128 v190 = v45;
      uint64_t v48 = (unint64_t *)&v43->__shared_weak_owners_;
      do
        unint64_t v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
      v41[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v41;
      v41[2].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v43;
      std::__shared_weak_count::__release_weak(v46);
      __int128 v45 = v190;
    }

    else
    {
      do
        unint64_t v50 = __ldxr(v44);
      while (__stxr(v50 + 1, v44));
      int v51 = (unint64_t *)&v43->__shared_weak_owners_;
      do
        unint64_t v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
      v41[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v41;
      v41[2].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v43;
    }

    do
      unint64_t v53 = __ldaxr(v44);
    while (__stlxr(v53 - 1, v44));
    if (!v53)
    {
      __int128 v191 = v45;
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
      __int128 v45 = v191;
    }

    goto LABEL_74;
  }

  unint64_t v9 = (std::__shared_weak_count_vtbl *)operator new(0x288uLL);
  CFTypeRef cf = 0LL;
  sub_36E3FC((uint64_t)v9, a2, v6, v6, 0LL);
  v9->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_479C50;
  sub_189C20((uint64_t)&v9[12].__on_zero_shared);
  sub_15F86C();
  v9[16].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&qword_48EC28;
  uint64_t v10 = (std::__shared_weak_count *)operator new(0x28uLL);
  v10->__shared_owners_ = 0LL;
  uint64_t v11 = (unint64_t *)&v10->__shared_owners_;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_471BF0;
  v10->__shared_weak_owners_ = 0LL;
  v10[1].__vftable = v9;
  v10[1].__shared_owners_ = (uint64_t)sub_16877C;
  *(void *)&__int128 v12 = v9;
  *((void *)&v12 + 1) = v10;
  unint64_t v13 = (std::__shared_weak_count *)v9[2].~__shared_weak_count_0;
  if (!v13)
  {
    do
      unint64_t v17 = __ldxr(v11);
    while (__stxr(v17 + 1, v11));
    uint64_t v18 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      unint64_t v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    v9[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
    v9[2].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
    do
LABEL_26:
      unint64_t v20 = __ldaxr(v11);
    while (__stlxr(v20 - 1, v11));
    if (!v20)
    {
      __int128 v187 = v12;
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      __int128 v12 = v187;
    }

    goto LABEL_29;
  }

  if (v13->__shared_owners_ == -1)
  {
    do
      unint64_t v14 = __ldxr(v11);
    while (__stxr(v14 + 1, v11));
    __int128 v186 = v12;
    unint64_t v15 = (unint64_t *)&v10->__shared_weak_owners_;
    do
      unint64_t v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v9[2].~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))v9;
    v9[2].~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))v10;
    std::__shared_weak_count::__release_weak(v13);
    __int128 v12 = v186;
    goto LABEL_26;
  }

void sub_168360()
{
}

void sub_1683AC()
{
}

void sub_168428(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    sub_16877C(v2);
    __cxa_rethrow();
  }

  JUMPOUT(0x16876CLL);
}

void sub_168448()
{
}

void sub_168464(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    sub_16877C(v2);
    __cxa_rethrow();
  }

  JUMPOUT(0x16876CLL);
}

void sub_168484()
{
}

void sub_1684A8(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    sub_16877C(v2);
    __cxa_rethrow();
  }

  JUMPOUT(0x16876CLL);
}

void sub_1684C8()
{
}

void sub_1684E0()
{
}

void sub_16853C(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    sub_16877C(v2);
    __cxa_rethrow();
  }

  JUMPOUT(0x16876CLL);
}

void sub_16855C()
{
}

void sub_16857C()
{
}

void sub_1685AC(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    sub_16877C(v2);
    __cxa_rethrow();
  }

  JUMPOUT(0x16876CLL);
}

void sub_1685CC()
{
}

void sub_1685DC()
{
  *(void *)(v0 + 496) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(v0 + 520));
  JUMPOUT(0x168738LL);
}

void sub_168604()
{
}

void sub_168614()
{
  *(void *)(v0 + 496) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(v0 + 520));
  JUMPOUT(0x168738LL);
}

void sub_16863C(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    sub_16877C(v2);
    __cxa_rethrow();
  }

  JUMPOUT(0x16876CLL);
}

void sub_16865C()
{
}

void sub_168670()
{
}

void sub_168678()
{
}

void sub_168680()
{
}

void sub_168688( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, const void *a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30)
{
}

void *sub_16877C(uint64_t a1)
{
  uint64_t v2 = sub_5954C();
  unint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 304LL))(v2);
  if (a1)
  {
    int v4 = (int)result;
    uint64_t v5 = (unint64_t *)qword_4A9BE8;
    uint64_t v7 = &v7;
    uint64_t v8 = &v7;
    uint64_t v9 = 0LL;
    uint64_t v6 = operator new(0x18uLL);
    v6[1] = &v7;
    void v6[2] = a1;
    void *v6 = &v7;
    uint64_t v7 = v6;
    uint64_t v8 = v6;
    uint64_t v9 = 1LL;
    sub_16B004(v5, &v7, v4);
    return sub_68314(&v7);
  }

  return result;
}

void sub_168808(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void *sub_16881C(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = (std::__shared_weak_count *)operator new(0x28uLL);
  v4->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_471F28;
  v4->__shared_weak_owners_ = 0LL;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  v4[1].__shared_owners_ = (uint64_t)sub_16877C;
  a1[1] = v4;
  uint64_t v6 = (void *)(a2 + 80);
  if (a2)
  {
    uint64_t v7 = *(std::__shared_weak_count **)(a2 + 88);
    if (v7)
    {
      if (v7->__shared_owners_ != -1) {
        return a1;
      }
      do
        unint64_t v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
      std::__shared_weak_count::__release_weak(v7);
    }

    else
    {
      do
        unint64_t v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      __int128 v12 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
    }

    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return a1;
}

void sub_168928(void *a1)
{
}

void sub_16893C(_Unwind_Exception *a1)
{
}

void *sub_168950(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = (std::__shared_weak_count *)operator new(0x28uLL);
  v4->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_471F60;
  v4->__shared_weak_owners_ = 0LL;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  v4[1].__shared_owners_ = (uint64_t)sub_16877C;
  a1[1] = v4;
  uint64_t v6 = (void *)(a2 + 80);
  if (a2)
  {
    uint64_t v7 = *(std::__shared_weak_count **)(a2 + 88);
    if (v7)
    {
      if (v7->__shared_owners_ != -1) {
        return a1;
      }
      do
        unint64_t v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
      std::__shared_weak_count::__release_weak(v7);
    }

    else
    {
      do
        unint64_t v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      __int128 v12 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
    }

    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return a1;
}

void sub_168A5C(void *a1)
{
}

void sub_168A70(_Unwind_Exception *a1)
{
}

BOOL sub_168A84(const __CFString *a1, const __CFString *a2, CFStringRef *a3)
{
  return CFStringCompare(a1, a2, 0LL) == kCFCompareEqualTo || CFStringCompare(a1, *a3, 0LL) == kCFCompareEqualTo;
}

void *sub_168AD0(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = (std::__shared_weak_count *)operator new(0x28uLL);
  v4->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_471F98;
  v4->__shared_weak_owners_ = 0LL;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  v4[1].__shared_owners_ = (uint64_t)sub_16877C;
  a1[1] = v4;
  uint64_t v6 = (void *)(a2 + 80);
  if (a2)
  {
    uint64_t v7 = *(std::__shared_weak_count **)(a2 + 88);
    if (v7)
    {
      if (v7->__shared_owners_ != -1) {
        return a1;
      }
      do
        unint64_t v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
      std::__shared_weak_count::__release_weak(v7);
    }

    else
    {
      do
        unint64_t v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      __int128 v12 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
    }

    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return a1;
}

void sub_168BDC(void *a1)
{
}

void sub_168BF0(_Unwind_Exception *a1)
{
}

BOOL sub_168C04(const __CFString *a1, const __CFString *a2, CFStringRef *a3, CFStringRef *a4)
{
  return CFStringCompare(a1, a2, 0LL) == kCFCompareEqualTo
      || CFStringCompare(a1, *a3, 0LL) == kCFCompareEqualTo
      || CFStringCompare(a1, *a4, 0LL) == kCFCompareEqualTo;
}

void *sub_168C70(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = (std::__shared_weak_count *)operator new(0x28uLL);
  v4->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_471FD0;
  v4->__shared_weak_owners_ = 0LL;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  v4[1].__shared_owners_ = (uint64_t)sub_16877C;
  a1[1] = v4;
  uint64_t v6 = (void *)(a2 + 80);
  if (a2)
  {
    uint64_t v7 = *(std::__shared_weak_count **)(a2 + 88);
    if (v7)
    {
      if (v7->__shared_owners_ != -1) {
        return a1;
      }
      do
        unint64_t v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
      std::__shared_weak_count::__release_weak(v7);
    }

    else
    {
      do
        unint64_t v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      __int128 v12 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
    }

    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return a1;
}

void sub_168D7C(void *a1)
{
}

void sub_168D90(_Unwind_Exception *a1)
{
}

void *sub_168DA4(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = (std::__shared_weak_count *)operator new(0x28uLL);
  v4->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_472008;
  v4->__shared_weak_owners_ = 0LL;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  v4[1].__shared_owners_ = (uint64_t)sub_16877C;
  a1[1] = v4;
  uint64_t v6 = (void *)(a2 + 80);
  if (a2)
  {
    uint64_t v7 = *(std::__shared_weak_count **)(a2 + 88);
    if (v7)
    {
      if (v7->__shared_owners_ != -1) {
        return a1;
      }
      do
        unint64_t v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
      std::__shared_weak_count::__release_weak(v7);
    }

    else
    {
      do
        unint64_t v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      __int128 v12 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
    }

    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return a1;
}

void sub_168EB0(void *a1)
{
}

void sub_168EC4(_Unwind_Exception *a1)
{
}

void *sub_168ED8(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = (std::__shared_weak_count *)operator new(0x28uLL);
  v4->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_472040;
  v4->__shared_weak_owners_ = 0LL;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  v4[1].__shared_owners_ = (uint64_t)sub_16877C;
  a1[1] = v4;
  uint64_t v6 = (void *)(a2 + 80);
  if (a2)
  {
    uint64_t v7 = *(std::__shared_weak_count **)(a2 + 88);
    if (v7)
    {
      if (v7->__shared_owners_ != -1) {
        return a1;
      }
      do
        unint64_t v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
      std::__shared_weak_count::__release_weak(v7);
    }

    else
    {
      do
        unint64_t v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      __int128 v12 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
    }

    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return a1;
}

void sub_168FE4(void *a1)
{
}

void sub_168FF8(_Unwind_Exception *a1)
{
}

uint64_t sub_16900C(uint64_t a1, AudioObjectPropertySelector a2, const __CFString *a3)
{
  *(void *)sub_1A22B8(a1, a2, a3) = &off_472078;
  int v4 = (os_log_t *)sub_138E8(17);
  uint64_t v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136315394;
    unint64_t v8 = "Device_BasicDSP_Debug.h";
    __int16 v9 = 1024;
    int v10 = 32;
    _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating Debug device", (uint8_t *)&v7, 0x12u);
  }

  return a1;
}

void sub_1690DC(_Unwind_Exception *a1)
{
}

void *sub_1690F0(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = (std::__shared_weak_count *)operator new(0x28uLL);
  v4->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_472280;
  v4->__shared_weak_owners_ = 0LL;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  v4[1].__shared_owners_ = (uint64_t)sub_16877C;
  a1[1] = v4;
  uint64_t v6 = (void *)(a2 + 80);
  if (a2)
  {
    int v7 = *(std::__shared_weak_count **)(a2 + 88);
    if (v7)
    {
      if (v7->__shared_owners_ != -1) {
        return a1;
      }
      do
        unint64_t v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
      std::__shared_weak_count::__release_weak(v7);
    }

    else
    {
      do
        unint64_t v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      __int128 v12 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
    }

    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return a1;
}

void sub_1691FC(void *a1)
{
}

void sub_169210(_Unwind_Exception *a1)
{
}

void *sub_169224(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = (std::__shared_weak_count *)operator new(0x28uLL);
  v4->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_4722B8;
  v4->__shared_weak_owners_ = 0LL;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  v4[1].__shared_owners_ = (uint64_t)sub_16877C;
  a1[1] = v4;
  uint64_t v6 = (void *)(a2 + 80);
  if (a2)
  {
    int v7 = *(std::__shared_weak_count **)(a2 + 88);
    if (v7)
    {
      if (v7->__shared_owners_ != -1) {
        return a1;
      }
      do
        unint64_t v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
      std::__shared_weak_count::__release_weak(v7);
    }

    else
    {
      do
        unint64_t v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      __int128 v12 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
    }

    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return a1;
}

void sub_169330(void *a1)
{
}

void sub_169344(_Unwind_Exception *a1)
{
}

uint64_t sub_169358(uint64_t a1, AudioObjectPropertySelector a2, const __CFString *a3)
{
  *(void *)sub_1A22B8(a1, a2, a3) = &off_4722F0;
  int v4 = (os_log_t *)sub_138E8(17);
  uint64_t v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136315394;
    unint64_t v8 = "Device_WatchHapticDebug_Aspen.h";
    __int16 v9 = 1024;
    int v10 = 30;
    _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Creating Watch Haptic Debug device",  (uint8_t *)&v7,  0x12u);
  }

  return a1;
}

void sub_169428(_Unwind_Exception *a1)
{
}

void *sub_16943C(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = (std::__shared_weak_count *)operator new(0x28uLL);
  v4->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_4724F8;
  v4->__shared_weak_owners_ = 0LL;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  v4[1].__shared_owners_ = (uint64_t)sub_16877C;
  a1[1] = v4;
  uint64_t v6 = (void *)(a2 + 80);
  if (a2)
  {
    int v7 = *(std::__shared_weak_count **)(a2 + 88);
    if (v7)
    {
      if (v7->__shared_owners_ != -1) {
        return a1;
      }
      do
        unint64_t v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
      std::__shared_weak_count::__release_weak(v7);
    }

    else
    {
      do
        unint64_t v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      __int128 v12 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
    }

    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return a1;
}

void sub_169548(void *a1)
{
}

void sub_16955C(_Unwind_Exception *a1)
{
}

void *sub_169570(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = (std::__shared_weak_count *)operator new(0x28uLL);
  v4->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_472530;
  v4->__shared_weak_owners_ = 0LL;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  v4[1].__shared_owners_ = (uint64_t)sub_16877C;
  a1[1] = v4;
  uint64_t v6 = (void *)(a2 + 80);
  if (a2)
  {
    int v7 = *(std::__shared_weak_count **)(a2 + 88);
    if (v7)
    {
      if (v7->__shared_owners_ != -1) {
        return a1;
      }
      do
        unint64_t v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
      std::__shared_weak_count::__release_weak(v7);
    }

    else
    {
      do
        unint64_t v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      __int128 v12 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
    }

    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return a1;
}

void sub_16967C(void *a1)
{
}

void sub_169690(_Unwind_Exception *a1)
{
}

void *sub_1696A4(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = (std::__shared_weak_count *)operator new(0x28uLL);
  v4->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_472568;
  v4->__shared_weak_owners_ = 0LL;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  v4[1].__shared_owners_ = (uint64_t)sub_16877C;
  a1[1] = v4;
  uint64_t v6 = (void *)(a2 + 80);
  if (a2)
  {
    int v7 = *(std::__shared_weak_count **)(a2 + 88);
    if (v7)
    {
      if (v7->__shared_owners_ != -1) {
        return a1;
      }
      do
        unint64_t v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
      std::__shared_weak_count::__release_weak(v7);
    }

    else
    {
      do
        unint64_t v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      __int128 v12 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
    }

    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return a1;
}

void sub_1697B0(void *a1)
{
}

void sub_1697C4(_Unwind_Exception *a1)
{
}

void *sub_1697D8(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = (std::__shared_weak_count *)operator new(0x28uLL);
  v4->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_4725A0;
  v4->__shared_weak_owners_ = 0LL;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  v4[1].__shared_owners_ = (uint64_t)sub_16877C;
  a1[1] = v4;
  uint64_t v6 = (void *)(a2 + 80);
  if (a2)
  {
    int v7 = *(std::__shared_weak_count **)(a2 + 88);
    if (v7)
    {
      if (v7->__shared_owners_ != -1) {
        return a1;
      }
      do
        unint64_t v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
      std::__shared_weak_count::__release_weak(v7);
    }

    else
    {
      do
        unint64_t v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      __int128 v12 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
    }

    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return a1;
}

void sub_1698E4(void *a1)
{
}

void sub_1698F8(_Unwind_Exception *a1)
{
}

void *sub_16990C(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = (std::__shared_weak_count *)operator new(0x28uLL);
  v4->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_4725D8;
  v4->__shared_weak_owners_ = 0LL;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  v4[1].__shared_owners_ = (uint64_t)sub_16877C;
  a1[1] = v4;
  uint64_t v6 = (void *)(a2 + 80);
  if (a2)
  {
    int v7 = *(std::__shared_weak_count **)(a2 + 88);
    if (v7)
    {
      if (v7->__shared_owners_ != -1) {
        return a1;
      }
      do
        unint64_t v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
      std::__shared_weak_count::__release_weak(v7);
    }

    else
    {
      do
        unint64_t v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      __int128 v12 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
    }

    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return a1;
}

void sub_169A18(void *a1)
{
}

void sub_169A2C(_Unwind_Exception *a1)
{
}

void *sub_169A40(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = (std::__shared_weak_count *)operator new(0x28uLL);
  v4->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_472610;
  v4->__shared_weak_owners_ = 0LL;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  v4[1].__shared_owners_ = (uint64_t)sub_16877C;
  a1[1] = v4;
  uint64_t v6 = (void *)(a2 + 80);
  if (a2)
  {
    int v7 = *(std::__shared_weak_count **)(a2 + 88);
    if (v7)
    {
      if (v7->__shared_owners_ != -1) {
        return a1;
      }
      do
        unint64_t v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
      std::__shared_weak_count::__release_weak(v7);
    }

    else
    {
      do
        unint64_t v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      __int128 v12 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
    }

    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return a1;
}

void sub_169B4C(void *a1)
{
}

void sub_169B60(_Unwind_Exception *a1)
{
}

void *sub_169B74(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = (std::__shared_weak_count *)operator new(0x28uLL);
  v4->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_472648;
  v4->__shared_weak_owners_ = 0LL;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  v4[1].__shared_owners_ = (uint64_t)sub_16877C;
  a1[1] = v4;
  uint64_t v6 = (void *)(a2 + 80);
  if (a2)
  {
    int v7 = *(std::__shared_weak_count **)(a2 + 88);
    if (v7)
    {
      if (v7->__shared_owners_ != -1) {
        return a1;
      }
      do
        unint64_t v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
      std::__shared_weak_count::__release_weak(v7);
    }

    else
    {
      do
        unint64_t v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      __int128 v12 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
    }

    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return a1;
}

void sub_169C80(void *a1)
{
}

void sub_169C94(_Unwind_Exception *a1)
{
}

void *sub_169CA8(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = (std::__shared_weak_count *)operator new(0x28uLL);
  v4->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_472680;
  v4->__shared_weak_owners_ = 0LL;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  v4[1].__shared_owners_ = (uint64_t)sub_16877C;
  a1[1] = v4;
  uint64_t v6 = (void *)(a2 + 80);
  if (a2)
  {
    int v7 = *(std::__shared_weak_count **)(a2 + 88);
    if (v7)
    {
      if (v7->__shared_owners_ != -1) {
        return a1;
      }
      do
        unint64_t v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
      std::__shared_weak_count::__release_weak(v7);
    }

    else
    {
      do
        unint64_t v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      __int128 v12 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
    }

    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return a1;
}

void sub_169DB4(void *a1)
{
}

void sub_169DC8(_Unwind_Exception *a1)
{
}

void *sub_169DDC(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = (std::__shared_weak_count *)operator new(0x28uLL);
  v4->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_4726B8;
  v4->__shared_weak_owners_ = 0LL;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  v4[1].__shared_owners_ = (uint64_t)sub_16877C;
  a1[1] = v4;
  uint64_t v6 = (void *)(a2 + 80);
  if (a2)
  {
    int v7 = *(std::__shared_weak_count **)(a2 + 88);
    if (v7)
    {
      if (v7->__shared_owners_ != -1) {
        return a1;
      }
      do
        unint64_t v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
      std::__shared_weak_count::__release_weak(v7);
    }

    else
    {
      do
        unint64_t v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      __int128 v12 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
    }

    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return a1;
}

void sub_169EE8(void *a1)
{
}

void sub_169EFC(_Unwind_Exception *a1)
{
}

void *sub_169F10(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = (std::__shared_weak_count *)operator new(0x28uLL);
  v4->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_4726F0;
  v4->__shared_weak_owners_ = 0LL;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  v4[1].__shared_owners_ = (uint64_t)sub_16877C;
  a1[1] = v4;
  uint64_t v6 = (void *)(a2 + 80);
  if (a2)
  {
    int v7 = *(std::__shared_weak_count **)(a2 + 88);
    if (v7)
    {
      if (v7->__shared_owners_ != -1) {
        return a1;
      }
      do
        unint64_t v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
      std::__shared_weak_count::__release_weak(v7);
    }

    else
    {
      do
        unint64_t v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      __int128 v12 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
    }

    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return a1;
}

void sub_16A01C(void *a1)
{
}

void sub_16A030(_Unwind_Exception *a1)
{
}

void *sub_16A044(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = (std::__shared_weak_count *)operator new(0x28uLL);
  v4->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_472728;
  v4->__shared_weak_owners_ = 0LL;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  v4[1].__shared_owners_ = (uint64_t)sub_16877C;
  a1[1] = v4;
  uint64_t v6 = (void *)(a2 + 80);
  if (a2)
  {
    int v7 = *(std::__shared_weak_count **)(a2 + 88);
    if (v7)
    {
      if (v7->__shared_owners_ != -1) {
        return a1;
      }
      do
        unint64_t v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
      std::__shared_weak_count::__release_weak(v7);
    }

    else
    {
      do
        unint64_t v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      __int128 v12 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
    }

    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return a1;
}

void sub_16A150(void *a1)
{
}

void sub_16A164(_Unwind_Exception *a1)
{
}

void *sub_16A178(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = (std::__shared_weak_count *)operator new(0x28uLL);
  v4->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_472760;
  v4->__shared_weak_owners_ = 0LL;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  v4[1].__shared_owners_ = (uint64_t)sub_16877C;
  a1[1] = v4;
  uint64_t v6 = (void *)(a2 + 80);
  if (a2)
  {
    int v7 = *(std::__shared_weak_count **)(a2 + 88);
    if (v7)
    {
      if (v7->__shared_owners_ != -1) {
        return a1;
      }
      do
        unint64_t v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
      std::__shared_weak_count::__release_weak(v7);
    }

    else
    {
      do
        unint64_t v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      __int128 v12 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
    }

    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return a1;
}

void sub_16A284(void *a1)
{
}

void sub_16A298(_Unwind_Exception *a1)
{
}

void *sub_16A2AC(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = (std::__shared_weak_count *)operator new(0x28uLL);
  v4->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_472798;
  v4->__shared_weak_owners_ = 0LL;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  v4[1].__shared_owners_ = (uint64_t)sub_16877C;
  a1[1] = v4;
  uint64_t v6 = (void *)(a2 + 80);
  if (a2)
  {
    int v7 = *(std::__shared_weak_count **)(a2 + 88);
    if (v7)
    {
      if (v7->__shared_owners_ != -1) {
        return a1;
      }
      do
        unint64_t v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
      std::__shared_weak_count::__release_weak(v7);
    }

    else
    {
      do
        unint64_t v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      __int128 v12 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
    }

    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return a1;
}

void sub_16A3B8(void *a1)
{
}

void sub_16A3CC(_Unwind_Exception *a1)
{
}

void *sub_16A3E0(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = (std::__shared_weak_count *)operator new(0x28uLL);
  v4->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_4727D0;
  v4->__shared_weak_owners_ = 0LL;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  v4[1].__shared_owners_ = (uint64_t)sub_16877C;
  a1[1] = v4;
  uint64_t v6 = (void *)(a2 + 80);
  if (a2)
  {
    int v7 = *(std::__shared_weak_count **)(a2 + 88);
    if (v7)
    {
      if (v7->__shared_owners_ != -1) {
        return a1;
      }
      do
        unint64_t v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
      std::__shared_weak_count::__release_weak(v7);
    }

    else
    {
      do
        unint64_t v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      __int128 v12 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
    }

    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return a1;
}

void sub_16A4EC(void *a1)
{
}

void sub_16A500(_Unwind_Exception *a1)
{
}

void *sub_16A514(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = (std::__shared_weak_count *)operator new(0x28uLL);
  v4->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_472808;
  v4->__shared_weak_owners_ = 0LL;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  v4[1].__shared_owners_ = (uint64_t)sub_16877C;
  a1[1] = v4;
  uint64_t v6 = (void *)(a2 + 80);
  if (a2)
  {
    int v7 = *(std::__shared_weak_count **)(a2 + 88);
    if (v7)
    {
      if (v7->__shared_owners_ != -1) {
        return a1;
      }
      do
        unint64_t v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
      std::__shared_weak_count::__release_weak(v7);
    }

    else
    {
      do
        unint64_t v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      __int128 v12 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
    }

    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return a1;
}

void sub_16A620(void *a1)
{
}

void sub_16A634(_Unwind_Exception *a1)
{
}

void *sub_16A648(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = (std::__shared_weak_count *)operator new(0x28uLL);
  v4->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_472840;
  v4->__shared_weak_owners_ = 0LL;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  v4[1].__shared_owners_ = (uint64_t)sub_16877C;
  a1[1] = v4;
  uint64_t v6 = (void *)(a2 + 80);
  if (a2)
  {
    int v7 = *(std::__shared_weak_count **)(a2 + 88);
    if (v7)
    {
      if (v7->__shared_owners_ != -1) {
        return a1;
      }
      do
        unint64_t v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
      std::__shared_weak_count::__release_weak(v7);
    }

    else
    {
      do
        unint64_t v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      __int128 v12 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
    }

    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return a1;
}

void sub_16A754(void *a1)
{
}

void sub_16A768(_Unwind_Exception *a1)
{
}

void *sub_16A77C(void *a1, uint64_t a2)
{
  *a1 = a2;
  int v4 = (std::__shared_weak_count *)operator new(0x28uLL);
  v4->__shared_owners_ = 0LL;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_472878;
  v4->__shared_weak_owners_ = 0LL;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)a2;
  v4[1].__shared_owners_ = (uint64_t)sub_16877C;
  a1[1] = v4;
  uint64_t v6 = (void *)(a2 + 80);
  if (a2)
  {
    int v7 = *(std::__shared_weak_count **)(a2 + 88);
    if (v7)
    {
      if (v7->__shared_owners_ != -1) {
        return a1;
      }
      do
        unint64_t v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
      std::__shared_weak_count::__release_weak(v7);
    }

    else
    {
      do
        unint64_t v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      __int128 v12 = (unint64_t *)&v4->__shared_weak_owners_;
      do
        unint64_t v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      void *v6 = a2;
      *(void *)(a2 + sub_7BFE0(v23 - 88) = v4;
    }

    do
      unint64_t v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  return a1;
}

void sub_16A888(void *a1)
{
}

void sub_16A89C(_Unwind_Exception *a1)
{
}

void sub_16A8B4(std::__shared_weak_count *a1)
{
}

uint64_t sub_16A8C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_16A8EC(std::__shared_weak_count *a1)
{
}

uint64_t sub_16A900(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_16A924(std::__shared_weak_count *a1)
{
}

uint64_t sub_16A938(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_16A95C(std::__shared_weak_count *a1)
{
}

uint64_t sub_16A970(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_16A994(std::__shared_weak_count *a1)
{
}

uint64_t sub_16A9A8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_16A9CC(std::__shared_weak_count *a1)
{
}

uint64_t sub_16A9E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_16AA04(std::__shared_weak_count *a1)
{
}

uint64_t sub_16AA18(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_16AA3C(std::__shared_weak_count *a1)
{
}

uint64_t sub_16AA50(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_16AA74(std::__shared_weak_count *a1)
{
}

uint64_t sub_16AA88(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_16AAAC(std::__shared_weak_count *a1)
{
}

uint64_t sub_16AAC0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_16AAE4(std::__shared_weak_count *a1)
{
}

uint64_t sub_16AAF8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_16AB1C(std::__shared_weak_count *a1)
{
}

uint64_t sub_16AB30(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_16AB54(std::__shared_weak_count *a1)
{
}

uint64_t sub_16AB68(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_16AB8C(std::__shared_weak_count *a1)
{
}

uint64_t sub_16ABA0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_16ABC4(std::__shared_weak_count *a1)
{
}

uint64_t sub_16ABD8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_16ABFC(std::__shared_weak_count *a1)
{
}

uint64_t sub_16AC10(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_16AC34(std::__shared_weak_count *a1)
{
}

uint64_t sub_16AC48(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_16AC6C(void *a1)
{
  uint64_t v1 = (void *)sub_EE450(a1);
  operator delete(v1);
}

uint64_t sub_16AC80()
{
  return 1LL;
}

void sub_16AC8C(std::__shared_weak_count *a1)
{
}

uint64_t sub_16ACA0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_16ACC4(std::__shared_weak_count *a1)
{
}

uint64_t sub_16ACD8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_16ACFC(void *a1)
{
  uint64_t v1 = (void *)sub_EE450(a1);
  operator delete(v1);
}

uint64_t sub_16AD10()
{
  return 1LL;
}

void sub_16AD18(void *a1@<X8>)
{
  *a1 = 0LL;
  a1[1] = 0LL;
  a1[2] = 0LL;
}

uint64_t sub_16AD24()
{
  return 1LL;
}

void sub_16AD30(std::__shared_weak_count *a1)
{
}

uint64_t sub_16AD44(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_16AD68(std::__shared_weak_count *a1)
{
}

uint64_t sub_16AD7C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_16ADA0(std::__shared_weak_count *a1)
{
}

uint64_t sub_16ADB4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_16ADD8(std::__shared_weak_count *a1)
{
}

uint64_t sub_16ADEC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_16AE10(std::__shared_weak_count *a1)
{
}

uint64_t sub_16AE24(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_16AE48(std::__shared_weak_count *a1)
{
}

uint64_t sub_16AE5C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_16AE80(std::__shared_weak_count *a1)
{
}

uint64_t sub_16AE94(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_16AEB8(std::__shared_weak_count *a1)
{
}

uint64_t sub_16AECC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_16AEF0(std::__shared_weak_count *a1)
{
}

uint64_t sub_16AF04(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_16AF28(std::__shared_weak_count *a1)
{
}

uint64_t sub_16AF3C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_16AF60(std::__shared_weak_count *a1)
{
}

uint64_t sub_16AF74(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_16AF98(std::__shared_weak_count *a1)
{
}

uint64_t sub_16AFAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_16AFD0(std::__shared_weak_count *a1)
{
}

uint64_t sub_16AFE4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_16B004(unint64_t *a1, void *a2, int a3)
{
  if (a2[2])
  {
    if (a3)
    {
      int v4 = (dispatch_queue_s *)sub_869B4();
      uint64_t v5 = v25;
      *(void *)AudioObjectID v25 = v25;
      *(void *)&v25[8] = v25;
      *(void *)&_BYTE v25[16] = 0LL;
      uint64_t v6 = a2[2];
      if (v6)
      {
        uint64_t v8 = *a2;
        int v7 = (uint64_t *)a2[1];
        uint64_t v9 = *v7;
        *(void *)(v9 + 8) = *(void *)(*a2 + 8LL);
        **(void **)(v8 + 8) = v9;
        uint64_t v10 = *(void *)v25;
        *(void *)(*(void *)v25 + 8LL) = v7;
        uint64_t *v7 = v10;
        *(void *)(v8 + 8) = v25;
        *(void *)AudioObjectID v25 = v8;
        *(void *)&_BYTE v25[16] = v6;
        a2[2] = 0LL;
        uint64_t v5 = (_BYTE *)v8;
      }

      unint64_t v11 = (uint64_t *)operator new(0x18uLL);
      *unint64_t v11 = (uint64_t)v11;
      v11[1] = (uint64_t)v11;
      void v11[2] = 0LL;
      if (v6)
      {
        __int128 v12 = *(void **)&v25[8];
        uint64_t v13 = **(void **)&v25[8];
        *(void *)(v13 + 8) = *((void *)v5 + 1);
        **((void **)v5 + 1) = v13;
        uint64_t v14 = *v11;
        *(void *)(v14 + 8) = v12;
        *__int128 v12 = v14;
        *unint64_t v11 = (uint64_t)v5;
        *((void *)v5 + 1) = v11;
        void v11[2] = v6;
        *(void *)&_BYTE v25[16] = 0LL;
      }

      dispatch_async_f(v4, v11, (dispatch_function_t)sub_16B320);
      sub_68314(v25);
      if (a2[2])
      {
        unint64_t v15 = (os_log_t *)sub_138E8(13);
        unint64_t v16 = *v15;
        if (*v15)
        {
          if (os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectID v25 = 136315394;
            *(void *)&v25[4] = "ObjectDestructionManager.h";
            *(_WORD *)&v25[12] = 1024;
            *(_DWORD *)&v25[14] = 91;
            _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: The object destruction manager did not propery clear a command's object lis t! Some objects may not be deleted.",  v25,  0x12u);
          }
        }
      }
    }

    else
    {
      if ((sub_397E74(a1) & 1) == 0)
      {
        unint64_t v17 = (os_log_t *)sub_138E8(13);
        uint64_t v18 = *v17;
        if (*v17)
        {
          if (os_log_type_enabled(*v17, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)AudioObjectID v25 = 136315394;
            *(void *)&v25[4] = "ObjectDestructionManager.h";
            *(_WORD *)&v25[12] = 1024;
            *(_DWORD *)&v25[14] = 72;
            _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Synchronously deleting objects from outside of a managed ObjectDestruction event",  v25,  0x12u);
          }
        }
      }

      while (a2[2])
      {
        unint64_t v19 = (uint64_t *)a2[1];
        uint64_t v20 = v19[2];
        if (!v20)
        {
          uint64_t v22 = (os_log_t *)sub_138E8(13);
          unint64_t v23 = *v22;
          if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectID v25 = 136315394;
            *(void *)&v25[4] = "ObjectDestructionManager.h";
            *(_WORD *)&v25[12] = 1024;
            *(_DWORD *)&v25[14] = 149;
            _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error) [inObject is NULL]: Null object",  v25,  0x12u);
          }

          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "Null object");
        }

        (*(void (**)(uint64_t))(*(void *)v20 + 8LL))(v20);
        uint64_t v21 = *v19;
        *(void *)(v21 + 8) = v19[1];
        *(void *)v19[1] = v21;
        --a2[2];
        operator delete(v19);
      }
    }
  }

void sub_16B2F4(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_16B320(void *a1)
{
  uint64_t v2 = sub_5954C();
  uint64_t v3 = (char *)operator new(0x28uLL);
  int v4 = v3;
  uint64_t v5 = (void *)a1[1];
  uint64_t v14 = &v14;
  unint64_t v15 = &v14;
  uint64_t v16 = 0LL;
  if (v5 == a1)
  {
    *((_DWORD *)v3 + 2) = 1;
    *(void *)uint64_t v3 = off_471B40;
    *((void *)v3 + 2) = v3 + 16;
    *((void *)v3 + 3) = v3 + 16;
    int v7 = (uint64_t *)(v3 + 32);
    goto LABEL_7;
  }

  uint64_t v6 = 0LL;
  int v7 = &v16;
  uint64_t v8 = &v14;
  do
  {
    uint64_t v9 = operator new(0x18uLL);
    uint64_t v10 = v5[2];
    v9[1] = &v14;
    v9[2] = v10;
    *uint64_t v9 = v8;
    v8[1] = v9;
    ++v6;
    uint64_t v14 = v9;
    uint64_t v16 = v6;
    uint64_t v5 = (void *)v5[1];
    uint64_t v8 = v9;
  }

  while (v5 != a1);
  *((_DWORD *)v4 + 2) = 1;
  *(void *)int v4 = off_471B40;
  *((void *)v4 + 2) = v4 + 16;
  *((void *)v4 + 3) = v4 + 16;
  *((void *)v4 + 4) = 0LL;
  if (v6)
  {
    unint64_t v11 = v15;
    uint64_t v12 = *v15;
    *(void *)(v12 + 8) = v9[1];
    *(void *)v9[1] = v12;
    uint64_t v13 = *((void *)v4 + 2);
    *(void *)(v13 + 8) = v11;
    *unint64_t v11 = v13;
    *((void *)v4 + 2) = v9;
    v9[1] = v4 + 16;
    *((void *)v4 + 4) = v6;
LABEL_7:
    uint64_t *v7 = 0LL;
  }

  (*(void (**)(uint64_t, char *))(*(void *)v2 + 328LL))(v2, v4);
  sub_68314(&v14);
  sub_68314(a1);
  operator delete(a1);
}

void sub_16B470(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_16B4BC(void *a1)
{
  uint64_t v1 = sub_16B864(a1);
  operator delete(v1);
}

uint64_t sub_16B4D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = (unint64_t *)qword_4A9BE8;
  if (atomic_load((unint64_t *)qword_4A9BE8))
  {
    if ((sub_397E74((unint64_t *)qword_4A9BE8) & 1) == 0)
    {
      uint64_t v6 = (os_log_t *)sub_138E8(13);
      int v7 = *v6;
      if (*v6)
      {
        if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "ObjectDestructionManager.h";
          __int16 v22 = 1024;
          int v23 = 124;
          _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: mExecutionThread has been set outside of this command's execution",  buf,  0x12u);
        }
      }
    }
  }

  if (sub_397E74(v4))
  {
    uint64_t v8 = sub_138E8(13);
    uint64_t v9 = sub_138E8(15);
    char v10 = 0;
    uint64_t v11 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v12 = *(void *)(v8 + 8);
    while (1)
    {
      uint64_t v13 = *(int *)&buf[4 * v11];
      char v14 = v10;
      if (((v12 & v13) != 0) != ((*(void *)(v9 + 8) & v13) != 0)) {
        break;
      }
      char v10 = 1;
      uint64_t v11 = 1LL;
      if ((v14 & 1) != 0) {
        goto LABEL_13;
      }
    }

    if ((v12 & v13) == 0) {
      uint64_t v8 = v9;
    }
LABEL_13:
    unint64_t v15 = *(os_log_s **)v8;
    if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "ObjectDestructionManager.h";
      __int16 v22 = 1024;
      int v23 = 127;
      _os_log_impl(&dword_0, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Called recursively", buf, 0x12u);
    }
  }

  v19[0] = &off_471B70;
  v19[1] = v4;
  uint64_t v20 = v19;
  sub_35678(buf, 0, (uint64_t)v19);
  uint64_t v16 = v20;
  if (v20 == v19)
  {
    uint64_t v17 = 4LL;
    uint64_t v16 = v19;
    goto LABEL_20;
  }

  if (v20)
  {
    uint64_t v17 = 5LL;
LABEL_20:
    (*(void (**)(void))(*v16 + 8 * v17))();
  }

  atomic_store((unint64_t)pthread_self(), v4);
  sub_16B004(v4, (void *)(a1 + 16), 0);
  sub_72210(a2, 1920099684LL);
  return sub_35B78((uint64_t)buf);
}

void sub_16B710( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_16B770(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = std::string::insert(&v4, 0LL, "Destroying core object(s): ", 0x1BuLL);
  *a2 = *v3;
  v3->__r_.__value_.__l.__size_ = 0LL;
  v3->__r_.__value_.__l.__cap_ = 0LL;
  v3->__r_.__value_.__r.__words[0] = 0LL;
}

void sub_16B7E4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_16B808(uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &off_471B70;
  result[1] = v3;
  return result;
}

uint64_t sub_16B83C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &off_471B70;
  a2[1] = v2;
  return result;
}

uint64_t sub_16B858(uint64_t result)
{
  return result;
}

void *sub_16B864(void *a1)
{
  uint64_t v2 = a1 + 2;
  if (a1[4])
  {
    uint64_t v3 = sub_138E8(13);
    uint64_t v4 = sub_138E8(15);
    char v5 = 0;
    uint64_t v6 = 0LL;
    *(void *)AudioObjectPropertyAddress __p = 0x100000002LL;
    uint64_t v7 = *(void *)(v3 + 8);
    while (1)
    {
      uint64_t v8 = *(int *)&__p[4 * v6];
      char v9 = v5;
      if (((v7 & v8) != 0) != ((*(void *)(v4 + 8) & v8) != 0)) {
        break;
      }
      char v5 = 1;
      uint64_t v6 = 1LL;
      if ((v9 & 1) != 0) {
        goto LABEL_8;
      }
    }

    if ((v7 & v8) == 0) {
      uint64_t v3 = v4;
    }
LABEL_8:
    char v10 = *(os_log_s **)v3;
    if (v10 && os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = a1[3];
      memset(&v17, 0, sizeof(v17));
      std::string::append(&v17, "{ ", 2uLL);
      if ((void *)v11 != v2)
      {
        while (1)
        {
          uint64_t v12 = *(os_unfair_lock_s **)(v11 + 16);
          if (v12) {
            sub_23FE8((uint64_t)__p, v12 + 2);
          }
          else {
            sub_7D084(__p, "NULL");
          }
          if (SBYTE3(v20) >= 0) {
            uint64_t v13 = __p;
          }
          else {
            uint64_t v13 = *(const std::string::value_type **)__p;
          }
          if (SBYTE3(v20) >= 0) {
            std::string::size_type v14 = BYTE3(v20);
          }
          else {
            std::string::size_type v14 = *(void *)&__p[8];
          }
          std::string::append(&v17, v13, v14);
          if (SBYTE3(v20) < 0) {
            operator delete(*(void **)__p);
          }
          uint64_t v11 = *(void *)(v11 + 8);
          if ((void *)v11 == v2) {
            break;
          }
          std::string::append(&v17, ", ", 2uLL);
        }
      }

      std::string::append(&v17, " }", 2uLL);
      if ((v17.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        unint64_t v15 = &v17;
      }
      else {
        unint64_t v15 = (std::string *)v17.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress __p = 136315650;
      *(void *)&__p[4] = "ObjectDestructionManager.h";
      *(_WORD *)&_BYTE __p[12] = 1024;
      *(_DWORD *)&__p[14] = 115;
      __int16 v19 = 2080;
      uint64_t v20 = v15;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Destructor called without an intervening call to Execute. Contained objects (%s) will be leaked!.",  __p,  0x1Cu);
    }
  }

  sub_68314(v2);
  return a1;
}

void sub_16BAA8( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_7A0E8(exception_object);
}

void sub_16BB04(void *a1)
{
  uint64_t v1 = sub_16EE74(a1);
  operator delete(v1);
}

void sub_16BB18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a1 + 8;
  int v9 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 8) + 16LL))(a1 + 8);
  if ((a2 == 0) != (*(void *)(a1 + 120) != 0LL))
  {
    std::string::size_type v14 = (os_log_t *)sub_138E8(13);
    unint64_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)blocuint64_t k = 136315394;
      *(void *)&block[4] = "DeviceListener_Aspen.cpp";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 69;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): DeviceListener_Aspen::SetDeviceListener requires that either proc be v alid (non-NULL) if no listener is registered, or NULL, if a listener is already registered.",  block,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error( exception,  "DeviceListener_Aspen::SetDeviceListener requires that either proc be valid (non-NULL) if no listener is registered , or NULL, if a listener is already registered.");
LABEL_23:
  }

  if (!a2 && a3)
  {
    std::string v17 = (os_log_t *)sub_138E8(13);
    uint64_t v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)blocuint64_t k = 136315394;
      *(void *)&block[4] = "DeviceListener_Aspen.cpp";
      *(_WORD *)&block[12] = 1024;
      *(_DWORD *)&block[14] = 70;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): DeviceListener_Aspen::SetDeviceListener requires that clientData be NU LL if proc is NULL",  block,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error( exception,  "DeviceListener_Aspen::SetDeviceListener requires that clientData be NULL if proc is NULL");
    goto LABEL_23;
  }

  *(_DWORD *)(a1 + 136) = *(_DWORD *)a4;
  *(void *)(a1 + 120) = a2;
  *(void *)(a1 + sub_51FA0(v10 + 128) = a3;
  if (a1 + 136 != a4)
  {
    sub_16C238((uint64_t **)(a1 + 144), *(void **)(a4 + 8), (void *)(a4 + 16));
    a2 = *(void *)(a1 + 120);
  }

  if (a2)
  {
    uint64_t v23 = a1;
    char v10 = (dispatch_queue_s *)sub_869B4();
    if (dispatch_get_specific("VirtualAudioQueueKey") == "VirtualAudioQueueKey")
    {
      sub_16C694(a1);
    }

    else
    {
      *(void *)&inAddress.mSelector = &v23;
      *(void *)blocuint64_t k = _NSConcreteStackBlock;
      *(void *)&block[8] = 0x40000000LL;
      *(void *)&block[16] = sub_16E37C;
      AudioObjectID v25 = &unk_4728E8;
      p_AudioObjectPropertyAddress inAddress = &inAddress;
      dispatch_sync(v10, block);
    }

    *(void *)&inAddress.mSelector = 0x676C6F6272647623LL;
    inAddress.mElement = 0;
    OSStatus v13 = AudioObjectAddPropertyListener(1u, &inAddress, (AudioObjectPropertyListenerProc)sub_16E64C, (void *)a1);
    if (v13)
    {
      __int16 v19 = (os_log_t *)sub_138E8(13);
      uint64_t v20 = *v19;
      if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)blocuint64_t k = 136315394;
        *(void *)&block[4] = "DeviceListener_Aspen.cpp";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 98;
        _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: failed to add device listener",  block,  0x12u);
      }

      uint64_t v21 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v21 = &off_4865A0;
      v21[2] = v13;
    }
  }

  else
  {
    strcpy(block, "#vdrbolg");
    block[9] = 0;
    *(_WORD *)&block[10] = 0;
    AudioObjectRemovePropertyListener( 1u,  (const AudioObjectPropertyAddress *)block,  (AudioObjectPropertyListenerProc)sub_16E64C,  (void *)a1);
    uint64_t v12 = *(void **)(a1 + 104);
    uint64_t v11 = (void *)(a1 + 104);
    sub_32C8C(v12);
    *(v11 - 1) = v11;
    *uint64_t v11 = 0LL;
    v11[1] = 0LL;
  }

  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v8 + 24LL))(v8);
  }
}

void sub_16BEB8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    *uint64_t v2 = 0LL;
    v2[1] = 0LL;
    __cxa_rethrow();
  }

  _Unwind_Resume(exception_object);
}

void sub_16BED4( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 buf, __int128 a14, __int16 a15, __int16 a16, int a17, int a18)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __cxa_end_catch();
  if (a2 == 3)
  {
    uint64_t v20 = __cxa_begin_catch(a1);
    uint64_t v21 = (os_log_t *)sub_138E8(13);
    os_log_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      int v23 = v20[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a14) = 1024;
      DWORD1(a14) = v23;
      WORD4(a14) = 2080;
      *(void *)((char *)&a14 + 10) = "";
      a16 = 1024;
      a17 = 35;
      unint64_t v24 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      AudioObjectID v25 = v22;
      uint32_t v26 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v25, OS_LOG_TYPE_ERROR, v24, (uint8_t *)&buf, v26);
    }
  }

  else
  {
    OSStatus v27 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      __int128 v28 = v27;
      int64x2_t v29 = (os_log_t *)sub_138E8(13);
      os_log_t v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        uint64_t v31 = (*(uint64_t (**)(void *))(*(void *)v28 + 16LL))(v28);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a14) = 2080;
        *(void *)((char *)&a14 + 4) = v31;
        WORD6(a14) = 2080;
        *(void *)((char *)&a14 + 14) = "";
        HIWORD(a17) = 1024;
        a18 = 35;
        unint64_t v24 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        AudioObjectID v25 = v30;
        uint32_t v26 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      __int128 v32 = (os_log_t *)sub_138E8(13);
      os_log_t v33 = *v32;
      if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a14) = 2080;
        *(void *)((char *)&a14 + 4) = "";
        WORD6(a14) = 1024;
        *(_DWORD *)((char *)&a14 + 14) = 35;
        unint64_t v24 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        AudioObjectID v25 = v33;
        uint32_t v26 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x16BC78LL);
}

void sub_16C0D8(_Unwind_Exception *a1)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
  }
  _Unwind_Resume(a1);
}

void sub_16C168(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 8;
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 8) + 16LL))(a1 + 8);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)a2;
  if (a1 + 136 != a2) {
    sub_16C238((uint64_t **)(a1 + 144), *(void **)(a2 + 8), (void *)(a2 + 16));
  }
  uint64_t v6 = (dispatch_queue_s *)sub_869B4();
  uint64_t v7 = operator new(8uLL);
  void *v7 = a1;
  dispatch_async_f(v6, v7, (dispatch_function_t)sub_16C3E4);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24LL))(v4);
  }
}

void sub_16C20C(_Unwind_Exception *exception_object)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_16C238(uint64_t **result, void *a2, void *a3)
{
  int v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    void *result = (uint64_t *)(result + 1);
    v7[2] = 0LL;
    result[1] = 0LL;
    result[2] = 0LL;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    __int16 v19 = (uint64_t *)result;
    uint64_t v20 = v8;
    uint64_t v21 = v8;
    if (v8)
    {
      uint64_t v20 = sub_68080((uint64_t)v8);
      if (a2 != a3)
      {
        int v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          char v10 = v21;
          uint64_t v11 = (uint64_t **)sub_851C4((uint64_t)v5, &v18, v21 + 4);
          sub_32C38(v5, v18, v11, v10);
          uint64_t v8 = v20;
          uint64_t v21 = v20;
          if (v20) {
            uint64_t v20 = sub_68080((uint64_t)v20);
          }
          uint64_t v12 = (void *)v9[1];
          if (v12)
          {
            do
            {
              a2 = v12;
              uint64_t v12 = (void *)*v12;
            }

            while (v12);
          }

          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v13 = *a2 == (void)v9;
              int v9 = a2;
            }

            while (!v13);
          }

          if (!v8) {
            break;
          }
          int v9 = a2;
        }

        while (a2 != a3);
      }
    }

    unint64_t result = (uint64_t **)sub_16E330((uint64_t)&v19);
  }

  if (a2 != a3)
  {
    do
    {
      sub_E72E8((uint64_t)&v19, (uint64_t)v5, (uint64_t)(a2 + 4));
      std::string::size_type v14 = v19;
      unint64_t v15 = (uint64_t **)sub_851C4((uint64_t)v5, &v18, v19 + 4);
      unint64_t result = (uint64_t **)sub_32C38(v5, v18, v15, v14);
      uint64_t v16 = (void *)a2[1];
      if (v16)
      {
        do
        {
          std::string v17 = v16;
          uint64_t v16 = (void *)*v16;
        }

        while (v16);
      }

      else
      {
        do
        {
          std::string v17 = (void *)a2[2];
          BOOL v13 = *v17 == (void)a2;
          a2 = v17;
        }

        while (!v13);
      }

      a2 = v17;
    }

    while (v17 != a3);
  }

  return result;
}

void sub_16C3D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_16C3E4(uint64_t *a1)
{
}

void sub_16C44C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    unint64_t v15 = __cxa_begin_catch(exception_object);
    uint64_t v16 = (os_log_t *)sub_138E8(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(va_start(va, a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(va_start(va, a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 98;
      __int16 v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      uint64_t v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }

  else
  {
    os_log_t v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      int v23 = v22;
      unint64_t v24 = (os_log_t *)sub_138E8(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16LL))(v23);
        LODWORD(va_start(va, a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(va_start(va, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 98;
        __int16 v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        uint64_t v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      OSStatus v27 = (os_log_t *)sub_138E8(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(va_start(va, a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(va_start(va, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 98;
        __int16 v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        uint64_t v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x16C414LL);
}

void sub_16C694(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  BOOL v3 = sub_5518(a1 + 8);
  sub_86550(&v78, a1 + 96);
  int v75 = *(_DWORD *)(a1 + 136);
  sub_16D268(&v76, (void *)(a1 + 144));
  if (v3) {
    sub_563C(v2);
  }
  __int128 v58 = (uint64_t **)(a1 + 96);
  sub_16D310((uint64_t *)&v73);
  v72[0] = 0LL;
  v72[1] = 0LL;
  __int128 v71 = v72;
  *(void *)&__int128 v62 = v73;
  cf[0] = v74;
  *(void *)__int16 v81 = v78;
  unint64_t v69 = v79;
  v65.n128_u64[0] = (unint64_t)&v71;
  v65.n128_u64[1] = (unint64_t)v72;
  sub_11A048((uint64_t)buf, (uint64_t)&v62, cf, (uint64_t)v81, &v69, &v65);
  v70[0] = 0LL;
  v70[1] = 0LL;
  unint64_t v69 = v70;
  *(void *)&__int128 v62 = v78;
  cf[0] = v79;
  int v80 = v74;
  *(void *)__int16 v81 = v73;
  v65.n128_u64[0] = (unint64_t)&v69;
  v65.n128_u64[1] = (unint64_t)v70;
  sub_11A048((uint64_t)buf, (uint64_t)&v62, cf, (uint64_t)v81, &v80, &v65);
  sub_86550((uint64_t *)&v65, (uint64_t)&v71);
  sub_86550(v66, (uint64_t)&v69);
  sub_86550(v67, (uint64_t)&v73);
  sub_86550(v68, (uint64_t)&v78);
  uint64_t v4 = sub_138E8(7);
  if ((*(_BYTE *)(v4 + 8) & 1) != 0 && *(void *)v4)
  {
    sub_16D58C(&v78, (uint64_t)"Cached Devices");
    sub_16D58C(&v73, (uint64_t)"Fetched Devices");
  }

  sub_16D58C(&v71, (uint64_t)"New Devices");
  sub_16D58C(&v69, (uint64_t)"Old Devices");
  __int128 v63 = 0u;
  __int128 v64 = 0u;
  __int128 v62 = 0u;
  int v5 = v71;
  if (v71 != v72)
  {
    do
    {
      CFTypeRef v6 = sub_16D818(*((_DWORD *)v5 + 7));
      sub_7F234(cf, v6);
      if (cf[0])
      {
        sub_48100((uint64_t)buf, (const __CFString *)cf[0]);
        uint64_t v7 = BYTE3(v88);
        int v8 = SBYTE3(v88);
        int v9 = *(void **)buf;
        if (SBYTE3(v88) >= 0)
        {
          char v10 = buf;
        }

        else
        {
          uint64_t v7 = *(void *)&buf[8];
          char v10 = *(_BYTE **)buf;
        }

        uint64_t v11 = &v10[v7];
        if (v7 >= 19)
        {
          uint64_t v12 = v10;
          do
          {
            BOOL v13 = (char *)memchr(v12, 86, v7 - 18);
            if (!v13) {
              break;
            }
            BOOL v14 = *(void *)v13 == 0x416C617574726956LL && *((void *)v13 + 1) == 0x697665446F696475LL;
            if (v14 && *(void *)(v13 + 11) == 0x5F6563697665446FLL) {
              goto LABEL_23;
            }
            uint64_t v12 = v13 + 1;
            uint64_t v7 = v11 - (_BYTE *)v12;
          }

          while (v11 - (_BYTE *)v12 > 18);
        }

        BOOL v13 = v11;
LABEL_23:
        BOOL v17 = v13 == v11 || v13 - v10 == -1;
        if (v8 < 0)
        {
          operator delete(v9);
          if (v17)
          {
LABEL_36:
            if (!cf[0])
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Could not construct");
            }

            sub_48100((uint64_t)buf, (const __CFString *)cf[0]);
            char v21 = BYTE3(v88);
            os_log_t v22 = v77;
            if (v76 != v77)
            {
              if (SBYTE3(v88) >= 0) {
                int v23 = (char *)BYTE3(v88);
              }
              else {
                int v23 = *(char **)&buf[8];
              }
              if (SBYTE3(v88) >= 0) {
                unint64_t v24 = buf;
              }
              else {
                unint64_t v24 = *(_BYTE **)buf;
              }
              os_log_t v22 = v76;
              do
              {
                uint64_t v25 = *((unsigned __int8 *)v22 + 55);
                if ((v25 & 0x80u) == 0LL) {
                  uint64_t v26 = (char *)*((unsigned __int8 *)v22 + 55);
                }
                else {
                  uint64_t v26 = v22[5];
                }
                if (v26 == v23)
                {
                  if ((v25 & 0x80) != 0)
                  {
                    if (!memcmp(v22[4], v24, (size_t)v22[5])) {
                      goto LABEL_63;
                    }
                  }

                  else
                  {
                    if (!*((_BYTE *)v22 + 55)) {
                      goto LABEL_63;
                    }
                    uint64_t v27 = 0LL;
                    while (*((unsigned __int8 *)v22 + v27 + 32) == v24[v27])
                    {
                      if (v25 == ++v27) {
                        goto LABEL_63;
                      }
                    }
                  }
                }

                os_log_t v28 = v22[1];
                if (v28)
                {
                  do
                  {
                    int64x2_t v29 = (char **)v28;
                    os_log_t v28 = *(char **)v28;
                  }

                  while (v28);
                }

                else
                {
                  do
                  {
                    int64x2_t v29 = (char **)v22[2];
                    BOOL v14 = *v29 == (char *)v22;
                    os_log_t v22 = v29;
                  }

                  while (!v14);
                }

                os_log_t v22 = v29;
              }

              while (v29 != v77);
              os_log_t v22 = v77;
            }

void sub_16CF4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char *a55,uint64_t a56,uint64_t a57,void *a58)
{
}

void *sub_16D268(void *a1, void *a2)
{
  a1[1] = 0LL;
  uint64_t v3 = (uint64_t)(a1 + 1);
  a1[2] = 0LL;
  *a1 = a1 + 1;
  uint64_t v4 = (void **)(a2 + 1);
  int v5 = (void **)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      sub_E7140((uint64_t)a1, v3, v5 + 4, (uint64_t)(v5 + 4));
      CFTypeRef v6 = (void **)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          CFTypeRef v6 = (void **)*v6;
        }

        while (v6);
      }

      else
      {
        do
        {
          uint64_t v7 = (void **)v5[2];
          BOOL v8 = *v7 == v5;
          int v5 = v7;
        }

        while (!v8);
      }

      int v5 = v7;
    }

    while (v7 != v4);
  }

  return a1;
}

void sub_16D2FC(_Unwind_Exception *a1)
{
}

uint64_t *sub_16D310(uint64_t *a1)
{
  uint64_t inAddress_8 = 0LL;
  uint64_t inAddress = 0x676C6F6272647623LL;
  uint64_t PropertyDataSize = AudioObjectGetPropertyDataSize( 1u,  (const AudioObjectPropertyAddress *)&inAddress,  0,  0LL,  (UInt32 *)&inAddress_8 + 1);
  int v3 = PropertyDataSize;
  if ((_DWORD)PropertyDataSize)
  {
    uint64_t v11 = (os_log_t *)sub_138E8(13);
    uint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int v20 = "DeviceListener_Aspen.cpp";
      __int16 v21 = 1024;
      int v22 = 251;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: failed to read the property size for kAudioHardwarePr opertyPhysicalDevices",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = v3;
  }

  HIDWORD(inAddress_8) += 40;
  __chkstk_darwin(PropertyDataSize);
  int v5 = (unsigned int *)((char *)&inAddress - ((v4 + 15) & 0x1FFFFFFF0LL));
  unint64_t result = (uint64_t *)AudioObjectGetPropertyData( 1u,  (const AudioObjectPropertyAddress *)&inAddress,  0,  0LL,  (UInt32 *)&inAddress_8 + 1,  v5);
  int v7 = (int)result;
  if ((_DWORD)result)
  {
    BOOL v14 = (os_log_t *)sub_138E8(13);
    unint64_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int v20 = "DeviceListener_Aspen.cpp";
      __int16 v21 = 1024;
      int v22 = 262;
      _os_log_impl( &dword_0,  v15,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: failed to read current device list",  buf,  0x12u);
    }

    uint64_t v16 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v16 = &off_4865A0;
    v16[2] = v7;
  }

  unint64_t v8 = HIDWORD(inAddress_8);
  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = (uint64_t)(a1 + 1);
  if (v8 >= 4)
  {
    unint64_t v9 = v8 >> 2;
    do
    {
      unsigned int v10 = *v5++;
      unint64_t result = sub_57ADC(a1, v10, v10);
      --v9;
    }

    while (v9);
  }

  return result;
}

void sub_16D570(_Unwind_Exception *exception_object)
{
}

void sub_16D58C(void *a1, uint64_t a2)
{
  if (a2)
  {
    if (a1[2])
    {
      uint64_t v4 = (os_log_t *)sub_138E8(7);
      int v5 = *v4;
      if (*v4)
      {
        if (os_log_type_enabled(*v4, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          int v20 = "DeviceListener_Aspen.cpp";
          __int16 v21 = 1024;
          int v22 = 302;
          __int16 v23 = 2080;
          v24[0] = a2;
          _os_log_impl(&dword_0, v5, OS_LOG_TYPE_INFO, "%25s:%-5d %s", buf, 0x1Cu);
        }
      }
    }
  }

  unint64_t v8 = (void *)*a1;
  CFTypeRef v6 = a1 + 1;
  int v7 = v8;
  if (v6 != v8)
  {
    do
    {
      AudioObjectID v9 = *((_DWORD *)v7 + 7);
      unsigned int v10 = (const __CFString *)sub_16D818(v9);
      uint64_t v11 = (os_log_t *)sub_138E8(7);
      uint64_t v12 = *v11;
      if (v10)
      {
        if (v12 && os_log_type_enabled(*v11, OS_LOG_TYPE_INFO))
        {
          sub_48E98(__p, v10);
          BOOL v13 = __p;
          if (v18 < 0) {
            BOOL v13 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136315906;
          int v20 = "DeviceListener_Aspen.cpp";
          __int16 v21 = 1024;
          int v22 = 311;
          __int16 v23 = 1024;
          LODWORD(v24[0]) = v9;
          WORD2(v24[0]) = 2080;
          *(void *)((char *)v24 + 6) = v13;
          _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, "%25s:%-5d AudioObjectID: %u, UID = %s", buf, 0x22u);
          if (v18 < 0) {
            operator delete(__p[0]);
          }
        }

        CFRelease(v10);
      }

      else if (v12 && os_log_type_enabled(*v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        int v20 = "DeviceListener_Aspen.cpp";
        __int16 v21 = 1024;
        int v22 = 316;
        __int16 v23 = 1024;
        LODWORD(v24[0]) = v9;
        _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, "%25s:%-5d AudioObjectID: %u, UID is NULL", buf, 0x18u);
      }

      BOOL v14 = (void *)v7[1];
      if (v14)
      {
        do
        {
          unint64_t v15 = v14;
          BOOL v14 = (void *)*v14;
        }

        while (v14);
      }

      else
      {
        do
        {
          unint64_t v15 = (void *)v7[2];
          BOOL v16 = *v15 == (void)v7;
          int v7 = v15;
        }

        while (!v16);
      }

      int v7 = v15;
    }

    while (v6 != v15);
  }

CFTypeRef sub_16D818(AudioObjectID a1)
{
  CFTypeRef outData = 0LL;
  inAddress.mElement = 0;
  UInt32 ioDataSize = 8;
  *(void *)&inAddress.mSelector = 0x676C6F6275696420LL;
  OSStatus PropertyData = AudioObjectGetPropertyData(a1, &inAddress, 0, 0LL, &ioDataSize, &outData);
  if (PropertyData || (ioDataSize == 8 ? (BOOL v3 = outData == 0LL) : (BOOL v3 = 1), v3))
  {
    uint64_t v4 = (os_log_t *)sub_138E8(7);
    int v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136316418;
      int v20 = "DeviceListener_Aspen.cpp";
      __int16 v21 = 1024;
      *(_DWORD *)CFTypeRef cf = 284;
      *(_WORD *)&cf[4] = 1024;
      *(_DWORD *)&cf[6] = a1;
      __int16 v23 = 1024;
      *(_DWORD *)unint64_t v24 = PropertyData;
      *(_WORD *)&v24[4] = 1024;
      *(_DWORD *)&v24[6] = ioDataSize;
      __int16 v25 = 2048;
      CFTypeRef v26 = outData;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d failed to read device UID for device %u; device may have already been removed (status = %d, propSize = %u, uid = %p)",
        buf,
        0x2Eu);
    }

    if (outData)
    {
      CFRelease(outData);
      CFTypeRef outData = 0LL;
    }
  }

  uint64_t v6 = sub_138E8(7);
  if ((*(_BYTE *)(v6 + 8) & 1) != 0)
  {
    int v7 = *(os_log_s **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        *(void *)&v14.mSelector = 0x676C6F626C6E616DLL;
        v14.mElement = 0;
        if (AudioObjectHasProperty(a1, &v14))
        {
          AudioObjectID v18 = a1;
          uint64_t v12 = 0x676C6F626C6E616DLL;
          LODWORD(v13) = 0;
          sub_C80E0((uint64_t)buf, &v18, (AudioObjectPropertyAddress *)&v12, 0, 0LL);
          if (*(_DWORD *)buf || !(_BYTE)v23)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            int v11 = *(_DWORD *)buf;
            *(void *)exception = &off_4865A0;
            exception[2] = v11;
          }

          uint64_t v12 = (uint64_t)off_485B28;
          uint64_t v8 = *(void *)&cf[2];
          if (*(void *)&cf[2])
          {
            CFRetain(*(CFTypeRef *)&cf[2]);
            uint64_t v12 = (uint64_t)&off_483688;
            uint64_t v13 = v8;
            if (!(_BYTE)v23) {
              goto LABEL_24;
            }
          }

          else
          {
            uint64_t v12 = (uint64_t)&off_483688;
            uint64_t v13 = 0LL;
          }

          sub_39FD8((const char **)((char *)&v20 + 4));
LABEL_24:
          *(_DWORD *)buf = 136315906;
          int v20 = "DeviceListener_Aspen.cpp";
          __int16 v21 = 1024;
          *(_DWORD *)CFTypeRef cf = 292;
          *(_WORD *)&cf[4] = 1024;
          *(_DWORD *)&cf[6] = a1;
          __int16 v23 = 2112;
          *(void *)unint64_t v24 = v8;
          _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d AudioObjectID %u is kAudioObjectPropertyName %@.",  buf,  0x22u);
          sub_39FD8(&v12);
          return outData;
        }

        *(_DWORD *)buf = 136315906;
        int v20 = "DeviceListener_Aspen.cpp";
        __int16 v21 = 1024;
        *(_DWORD *)CFTypeRef cf = 292;
        *(_WORD *)&cf[4] = 1024;
        *(_DWORD *)&cf[6] = a1;
        __int16 v23 = 2112;
        *(void *)unint64_t v24 = @"<unknown>";
        _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d AudioObjectID %u is kAudioObjectPropertyName %@.",  buf,  0x22u);
      }
    }
  }

  return outData;
}

void sub_16DB40( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2) {
    sub_7A0E8(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_16DB7C(uint64_t a1)
{
  uint64_t v2 = (os_log_t *)sub_138E8(7);
  BOOL v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315394;
    int v5 = "DeviceListener_Aspen.cpp";
    __int16 v6 = 1024;
    int v7 = 165;
    _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error Occured handling a Device Update",  (uint8_t *)&v4,  0x12u);
  }

  sub_16D58C((void *)(a1 + 72), (uint64_t)"Cached Devices");
  sub_16D58C((void *)(a1 + 48), (uint64_t)"Fetched Devices");
}

uint64_t **sub_16DC58(void *a1, unsigned int *a2, uint64_t a3, unsigned int *a4, uint64_t **a5)
{
  if (a2 != a4)
  {
    int v7 = a2;
    do
    {
      unsigned int v9 = *v7++;
      sub_13B6B0(a5, v9);
      if ((char *)v7 - *a1 == ".A.dylib")
      {
        unsigned int v10 = (unsigned int *)a1[1];
        ++a1;
        int v7 = v10;
      }
    }

    while (v7 != a4);
  }

  return a5;
}

uint64_t sub_16DCBC(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  BOOL v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    int v4 = (void *)(a1 + 40);
    BOOL v3 = *(void ***)(a1 + 8);
  }

  else
  {
    int v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    __int16 v6 = &v2[v5 >> 8];
    uint64_t v7 = (uint64_t)*v6;
    uint64_t v8 = (uint64_t)*v6 + 16 * v5;
    if (v8 != v9)
    {
      do
      {
        unsigned int v10 = *(const void **)(v8 + 8);
        if (v10)
        {
          CFRelease(v10);
          uint64_t v7 = (uint64_t)*v6;
        }

        v8 += 16LL;
        if (v8 - v7 == 4096)
        {
          uint64_t v11 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v11;
          uint64_t v8 = v11;
        }
      }

      while (v8 != v9);
      uint64_t v2 = *(void ***)(a1 + 8);
      BOOL v3 = *(void ***)(a1 + 16);
    }
  }

  void *v4 = 0LL;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8LL);
      *(void *)(a1 + 8) = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }

    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }

  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 128LL;
    goto LABEL_16;
  }

  if (v13 == 2)
  {
    uint64_t v14 = 256LL;
LABEL_16:
    *(void *)(a1 + sub_7A768(v9 - 32) = v14;
  }

  if (v2 != v3)
  {
    do
    {
      unint64_t v15 = *v2++;
      operator delete(v15);
    }

    while (v2 != v3);
    uint64_t v17 = *(void *)(a1 + 8);
    uint64_t v16 = *(void *)(a1 + 16);
    if (v16 != v17) {
      *(void *)(a1 + 16) = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8LL);
    }
  }

  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void **sub_16DE14(void **a1)
{
  return a1;
}

void sub_16DE54(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    a1[4] = v4;
    unint64_t v5 = (void *)a1[1];
    __int16 v6 = (char *)a1[2];
    uint64_t v9 = *v5;
    uint64_t v7 = (char *)(v5 + 1);
    uint64_t v8 = v9;
    a1[1] = v7;
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      else {
        unint64_t v40 = (uint64_t)&v6[-*a1] >> 2;
      }
      BOOL v41 = (char *)sub_7DC90(v40);
      uint64_t v42 = &v41[8 * (v40 >> 2)];
      unint64_t v44 = &v41[8 * v43];
      __int128 v45 = (uint64_t *)a1[1];
      __int16 v6 = v42;
      uint64_t v46 = a1[2] - (void)v45;
      if (v46)
      {
        __int16 v6 = &v42[v46 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v47 = 8 * (v46 >> 3);
        unint64_t v48 = &v41[8 * (v40 >> 2)];
        do
        {
          uint64_t v49 = *v45++;
          *(void *)unint64_t v48 = v49;
          v48 += 8;
          v47 -= 8LL;
        }

        while (v47);
      }

      goto LABEL_29;
    }

LABEL_5:
    uint64_t v11 = v10 >> 3;
    BOOL v12 = v10 >> 3 < -1;
    uint64_t v13 = (v10 >> 3) + 2;
    if (v12) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v11 + 1;
    }
    uint64_t v15 = -(v14 >> 1);
    uint64_t v16 = v14 >> 1;
    uint64_t v17 = &v7[-8 * v16];
    int64_t v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      uint64_t v7 = (char *)a1[1];
    }

    __int16 v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }

  int v20 = (char *)a1[2];
  __int16 v19 = (char *)a1[3];
  __int16 v21 = (char *)*a1;
  int v22 = (char *)a1[1];
  unint64_t v23 = (v20 - v22) >> 3;
  uint64_t v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    __int16 v25 = operator new(0x1000uLL);
    CFTypeRef v26 = v25;
    if (v19 != v20)
    {
      *(void *)int v20 = v25;
LABEL_42:
      a1[2] += 8LL;
      return;
    }

    if (v22 == v21)
    {
      if (v20 == v22) {
        unint64_t v51 = 1LL;
      }
      else {
        unint64_t v51 = (v19 - v22) >> 2;
      }
      uint64_t v52 = 2 * v51;
      unint64_t v53 = (char *)sub_7DC90(v51);
      int v22 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8LL];
      unint64_t v55 = (uint64_t *)a1[1];
      BOOL v56 = v22;
      uint64_t v57 = a1[2] - (void)v55;
      if (v57)
      {
        BOOL v56 = &v22[v57 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v58 = 8 * (v57 >> 3);
        uint64_t v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8LL];
        do
        {
          uint64_t v60 = *v55++;
          *(void *)uint64_t v59 = v60;
          v59 += 8;
          v58 -= 8LL;
        }

        while (v58);
      }

      __int128 v61 = (char *)*a1;
      *a1 = v53;
      a1[1] = v22;
      a1[2] = v56;
      a1[3] = &v53[8 * v54];
      if (v61)
      {
        operator delete(v61);
        int v22 = (char *)a1[1];
      }
    }

    *((void *)v22 - 1) = v26;
    uint64_t v7 = (char *)a1[1];
    __int16 v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    uint64_t v8 = *((void *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(void *)__int16 v6 = v8;
      goto LABEL_42;
    }

    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      else {
        unint64_t v85 = (uint64_t)&v6[-*a1] >> 2;
      }
      BOOL v41 = (char *)sub_7DC90(v85);
      uint64_t v42 = &v41[8 * (v85 >> 2)];
      unint64_t v44 = &v41[8 * v86];
      __int16 v87 = (uint64_t *)a1[1];
      __int16 v6 = v42;
      uint64_t v88 = a1[2] - (void)v87;
      if (v88)
      {
        __int16 v6 = &v42[v88 & 0xFFFFFFFFFFFFFFF8LL];
        uint64_t v89 = 8 * (v88 >> 3);
        int v90 = &v41[8 * (v85 >> 2)];
        do
        {
          uint64_t v91 = *v87++;
          *(void *)int v90 = v91;
          v90 += 8;
          v89 -= 8LL;
        }

        while (v89);
      }

  if (byte_48FD60) {
    uint64_t v0 = +[CPMSAgent isCPMSSupportedForClient:](&OBJC_CLASS___CPMSAgent, "isCPMSSupportedForClient:", 5LL);
  }
  else {
    uint64_t v0 = 0LL;
  }
  __int16 v6 = (os_log_s *)*(id *)sub_138E8(16);
  BOOL v3 = v6;
  if (v6 && os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = "unsupported";
    unint64_t v40 = "CPMSInterface.mm";
    *(_DWORD *)buf = 136315650;
    if ((_DWORD)v0) {
      uint64_t v7 = "supported";
    }
    BOOL v41 = 1024;
    uint64_t v42 = 78;
    uint64_t v43 = 2080;
    unint64_t v44 = (char *)v7;
    unint64_t v5 = "%25s:%-5d CPMS for Speaker is %s";
    goto LABEL_19;
  }

  unint64_t result = _os_feature_enabled_impl("VirtualAudio", "additive_routing");
  if ((_DWORD)result)
  {
    unint64_t v5 = 0;
    if (MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 1)
    {
      if ((sub_1CA280() & 1) != 0)
      {
        unint64_t v5 = 1;
      }

      else if (MGGetBoolAnswer(@"YiUtBQygkHRhLcdO3LFB4A"))
      {
        unint64_t v5 = MGGetBoolAnswer(@"DeviceSupportsUSBTypeC");
      }

      else
      {
        unint64_t v5 = 0;
      }
    }

    __int16 v6 = 0;
    uint64_t v7 = sub_1CA280();
    return v7 ^ (v7 | v5 | v6);
  }

  return result;
}

      uint64_t v8 = 1;
LABEL_6:
      v5 += 12;
      if (v5 == a4) {
        return;
      }
    }

    unint64_t v28 = sub_138E8(2);
    if ((*(_BYTE *)(v28 + 8) & 1) == 0) {
      goto LABEL_5;
    }
    int64x2_t v29 = (os_log_s *)*(id *)v28;
    if (!v29) {
      goto LABEL_5;
    }
    unint64_t v23 = v29;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v42 = "VirtualAudio_PlugIn.mm";
      uint64_t v43 = 1024;
      unint64_t v44 = 4982;
      _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Client specified a device hint for a device type that does not exist in the new route.",  buf,  0x12u);
    }

    goto LABEL_42;
  }

void sub_16E300( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  if ((void)a11) {
    operator delete((void *)a11);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_16E330(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }

      while (v3);
      *(void *)(a1 + 8) = v2;
    }

    sub_88C08((char *)v2);
  }

  return a1;
}

void sub_16E37C(uint64_t a1)
{
}

void sub_16E3E4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  *(void *)(v2 + 120) = 0LL;
  *(void *)(v2 + sub_51FA0(v10 + 128) = 0LL;
  __cxa_rethrow();
}

void sub_16E408( void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    JUMPOUT(0x16E3ECLL);
  }
  __cxa_end_catch();
  if (a2 == 3)
  {
    uint64_t v16 = __cxa_begin_catch(a1);
    uint64_t v17 = (os_log_t *)sub_138E8(13);
    os_log_t v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      int v19 = v16[2];
      LODWORD(va_start(va, a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(va_start(va, a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v19;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 47;
      int v20 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      __int16 v21 = v18;
      uint32_t v22 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v21, OS_LOG_TYPE_ERROR, v20, (uint8_t *)&a9, v22);
    }
  }

  else
  {
    unint64_t v23 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      uint64_t v24 = v23;
      __int16 v25 = (os_log_t *)sub_138E8(13);
      os_log_t v26 = *v25;
      if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
      {
        uint64_t v27 = (*(uint64_t (**)(void *))(*(void *)v24 + 16LL))(v24);
        LODWORD(va_start(va, a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(va_start(va, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v27;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 47;
        int v20 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        __int16 v21 = v26;
        uint32_t v22 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      unint64_t v28 = (os_log_t *)sub_138E8(13);
      os_log_t v29 = *v28;
      if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
      {
        LODWORD(va_start(va, a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(va_start(va, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 47;
        int v20 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        __int16 v21 = v29;
        uint32_t v22 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x16E3B4LL);
}

void sub_16E60C()
{
}

void sub_16E618()
{
}

void sub_16E624()
{
}

void sub_16E630(void *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  JUMPOUT(0x16E3ECLL);
}

uint64_t sub_16E64C(uint64_t a1, int a2, int *a3, uint64_t a4)
{
  if (!a2)
  {
    uint64_t v16 = (os_log_t *)sub_138E8(13);
    uint64_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v22 = 136315394;
      unint64_t v23 = "DeviceListener_Aspen.cpp";
      __int16 v24 = 1024;
      int v25 = 121;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v22,  0x12u);
    }

    goto LABEL_25;
  }

  if (!a3)
  {
    os_log_t v18 = (os_log_t *)sub_138E8(13);
    int v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      int v22 = 136315394;
      unint64_t v23 = "DeviceListener_Aspen.cpp";
      __int16 v24 = 1024;
      int v25 = 122;
      _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v22,  0x12u);
    }

    goto LABEL_25;
  }

  if (!a4)
  {
    int v20 = (os_log_t *)sub_138E8(13);
    __int16 v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      int v22 = 136315394;
      unint64_t v23 = "DeviceListener_Aspen.cpp";
      __int16 v24 = 1024;
      int v25 = 123;
      _os_log_impl( &dword_0,  v21,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)&v22,  0x12u);
    }

void sub_16E958( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v14);
  if (a2 == 3)
  {
    uint64_t v17 = __cxa_begin_catch(exception_object);
    os_log_t v18 = (os_log_t *)sub_138E8(13);
    os_log_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      int v20 = v17[2];
      LODWORD(va_start(va, a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(va_start(va, a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v20;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 138;
      __int16 v21 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      int v22 = v19;
      uint32_t v23 = 40;
LABEL_15:
      _os_log_impl(&dword_0, v22, OS_LOG_TYPE_ERROR, v21, (uint8_t *)&a9, v23);
    }
  }

  else
  {
    __int16 v24 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      int v25 = v24;
      os_log_t v26 = (os_log_t *)sub_138E8(13);
      os_log_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        uint64_t v28 = (*(uint64_t (**)(void *))(*(void *)v25 + 16LL))(v25);
        LODWORD(va_start(va, a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(va_start(va, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v28;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 138;
        __int16 v21 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        int v22 = v27;
        uint32_t v23 = 44;
        goto LABEL_15;
      }
    }

    else
    {
      os_log_t v29 = (os_log_t *)sub_138E8(13);
      os_log_t v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        LODWORD(va_start(va, a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(va_start(va, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 138;
        __int16 v21 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        int v22 = v30;
        uint32_t v23 = 34;
        goto LABEL_15;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x16E77CLL);
}

void sub_16EB94()
{
}

void sub_16EBA0()
{
}

void sub_16EBAC()
{
}

void sub_16EBBC()
{
}

void sub_16EBC4(uint64_t *a1)
{
}

void sub_16EC2C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    uint64_t v15 = __cxa_begin_catch(exception_object);
    uint64_t v16 = (os_log_t *)sub_138E8(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(va_start(va, a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(va_start(va, a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 98;
      os_log_t v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      int v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&dword_0, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }

  else
  {
    int v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint32_t v23 = v22;
      __int16 v24 = (os_log_t *)sub_138E8(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16LL))(v23);
        LODWORD(va_start(va, a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(va_start(va, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 98;
        os_log_t v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        int v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }

    else
    {
      os_log_t v27 = (os_log_t *)sub_138E8(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(va_start(va, a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(va_start(va, a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 98;
        os_log_t v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        int v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x16EBF4LL);
}

void *sub_16EE74(void *a1)
{
  *a1 = off_4728B0;
  uint64_t v2 = a1 + 1;
  int v3 = (*(uint64_t (**)(void *))(a1[1] + 16LL))(a1 + 1);
  if (a1[15] || a1[16])
  {
    unint64_t v4 = (os_log_t *)sub_138E8(7);
    unint64_t v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
      {
        v7.mSelector = 136315394;
        *(void *)&v7.mScope = "DeviceListener_Aspen.cpp";
        __int16 v8 = 1024;
        int v9 = 54;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Destructor of DeviceListener_Aspen called while the DeviceListenerProc / client data was still valid...",  (uint8_t *)&v7,  0x12u);
      }
    }
  }

  *(void *)&v7.mSelector = 0x676C6F6272647623LL;
  v7.mElement = 0;
  AudioObjectRemovePropertyListener(1u, &v7, (AudioObjectPropertyListenerProc)sub_16E64C, a1);
  if (v3) {
    (*(void (**)(void *))(*v2 + 24LL))(v2);
  }
  sub_88C08((char *)a1[19]);
  sub_32C8C((void *)a1[13]);
  a1[1] = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 4));
  return a1;
}

void sub_16EFD0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_7A0E8(a1);
  }
  _Unwind_Resume(a1);
}

void sub_16EFEC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_36F1E0(a1);
  operator delete(v1);
}

uint64_t sub_16F000(uint64_t a1)
{
  if (((*(void *)(a1 + 280) - *(void *)(a1 + 272)) & 0xFFFFFFFF0LL) == 0)
  {
    uint64_t v16 = (os_log_t *)sub_138E8(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int v34 = 136315394;
      *(void *)&v34[4] = "Device_Puffin.cpp";
      __int16 v35 = 1024;
      *(_DWORD *)uint64_t v36 = 89;
      _os_log_impl( &dword_0,  v17,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Puffin audio device has no input streams",  v34,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Puffin audio device has no input streams");
  }

  sub_F9530((uint64_t)v34, qword_48EFA0);
  uint64_t v2 = (os_log_t *)sub_138E8(17);
  int v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = *(void *)&v36[2];
    if (!*(void *)&v36[2]) {
      uint64_t v4 = *(void *)v34;
    }
    if (v37[0]) {
      uint64_t v5 = v37[0];
    }
    else {
      uint64_t v5 = v4;
    }
    uint64_t v6 = *(void **)(a1 + 448);
    AudioObjectPropertyAddress __p = v6;
    LOBYTE(v25) = *(_BYTE *)(a1 + 456);
    if ((_BYTE)v25 && v6) {
      CFRetain(v6);
    }
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "Device_Puffin.cpp";
    __int16 v28 = 1024;
    int v29 = 95;
    __int16 v30 = 2112;
    uint64_t v31 = v5;
    __int16 v32 = 2112;
    __int128 v33 = v6;
    _os_log_impl( &dword_0,  v3,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d creating a Puffin output port with name %@ and UID %@",  buf,  0x26u);
    sub_19DFC((uint64_t)&__p);
  }

  AudioObjectPropertyAddress __p = 0LL;
  uint64_t v25 = 0LL;
  uint64_t v26 = 0LL;
  memset(v23, 0, sizeof(v23));
  AudioObjectPropertyAddress v7 = *(const void **)(a1 + 448);
  os_log_t v19 = v7;
  char v20 = *(_BYTE *)(a1 + 456);
  if (v20 && v7) {
    CFRetain(v7);
  }
  __int16 v8 = operator new(0x228uLL);
  v8[1] = 0LL;
  v8[2] = 0LL;
  void *v8 = off_485B80;
  sub_7D084(buf, "");
  sub_F9638((uint64_t)(v8 + 3), &qword_48EFA0, a1, (uint64_t)&__p, (uint64_t)v34, (uint64_t)&v19, v23, (__int128 *)buf);
  v8[3] = &off_46FD40;
  *((_WORD *)v8 + 272) = 0;
  if (SBYTE3(v31) < 0) {
    operator delete(*(void **)buf);
  }
  *(void *)&__int128 v21 = v8 + 3;
  *((void *)&v21 + 1) = v8;
  sub_AFDAC((uint64_t)&v21, v8 + 13, (uint64_t)(v8 + 3));
  __int128 v22 = v21;
  __int128 v21 = 0uLL;
  sub_3711D4(a1, (void ***)&v22);
  int v9 = (std::__shared_weak_count *)*((void *)&v22 + 1);
  if (*((void *)&v22 + 1))
  {
    uint64_t v10 = (unint64_t *)(*((void *)&v22 + 1) + 8LL);
    do
      unint64_t v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  BOOL v12 = (std::__shared_weak_count *)*((void *)&v21 + 1);
  if (*((void *)&v21 + 1))
  {
    uint64_t v13 = (unint64_t *)(*((void *)&v21 + 1) + 8LL);
    do
      unint64_t v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }

  sub_19DFC((uint64_t)&v19);
  *(void *)buf = v23;
  sub_7A668((void ***)buf);
  if (__p) {
    operator delete(__p);
  }
  sub_19DFC((uint64_t)v37);
  sub_19DFC((uint64_t)&v36[2]);
  sub_19DFC((uint64_t)v34);
  return 1LL;
}

void sub_16F370( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
}

uint64_t sub_16F40C(uint64_t a1, unsigned int a2)
{
  if (a2 != 1886216809)
  {
    int v3 = (os_log_t *)sub_138E8(17);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, a2);
      uint64_t v5 = v11 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      uint64_t v13 = "Device_Puffin.cpp";
      __int16 v14 = 1024;
      int v15 = 117;
      __int16 v16 = 2080;
      os_log_t v17 = v5;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).",  buf,  0x1Cu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v6 = (os_log_t *)sub_138E8(13);
    AudioObjectPropertyAddress v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v13 = "Device_Puffin.cpp";
      __int16 v14 = 1024;
      int v15 = 118;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unsupported VirtualAudioPortType.",  buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }

  return 0LL;
}

void sub_16F5B8(_Unwind_Exception *a1)
{
}

void sub_16F5D8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_36F1E0(a1);
  operator delete(v1);
}

BOOL sub_16F5EC(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  return a2->mSelector != 1064725619 && sub_36854C(a1, a2);
}

uint64_t sub_16F60C(uint64_t a1)
{
  if (((*(void *)(a1 + 304) - *(void *)(a1 + 296)) & 0xFFFFFFFF0LL) == 0)
  {
    os_log_t v17 = (os_log_t *)sub_138E8(13);
    int v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int16 v35 = 136315394;
      *(void *)&v35[4] = "Device_Puffin.cpp";
      __int16 v36 = 1024;
      *(_DWORD *)__int128 v37 = 229;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Puffin audio device has no output streams",  v35,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Puffin audio device has no output streams");
  }

  uint64_t v2 = operator new(0x1E0uLL);
  sub_1C88B8((uint64_t)v2, a1, 1869968496LL, 0, 0, 74, 0LL);
  sub_1D5AE0((void *)a1, (uint64_t)v2);
  sub_1D55D4((uint64_t *)a1, 1u, 1886613611LL, (uint64_t)v2);
  sub_1D580C(a1, 1u, 1886613611LL, (uint64_t)v2);
  sub_F9530((uint64_t)v35, qword_48EF70);
  int v3 = (os_log_t *)sub_138E8(17);
  uint64_t v4 = *v3;
  if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)&v37[2];
    if (!*(void *)&v37[2]) {
      uint64_t v5 = *(void *)v35;
    }
    if (v38[0]) {
      uint64_t v6 = v38[0];
    }
    else {
      uint64_t v6 = v5;
    }
    AudioObjectPropertyAddress v7 = *(void **)(a1 + 448);
    AudioObjectPropertyAddress __p = v7;
    LOBYTE(v26) = *(_BYTE *)(a1 + 456);
    if ((_BYTE)v26 && v7) {
      CFRetain(v7);
    }
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "Device_Puffin.cpp";
    __int16 v29 = 1024;
    int v30 = 242;
    __int16 v31 = 2112;
    uint64_t v32 = v6;
    __int16 v33 = 2112;
    int v34 = v7;
    _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d creating a Puffin output port with name %@ and UID %@",  buf,  0x26u);
    sub_19DFC((uint64_t)&__p);
  }

  AudioObjectPropertyAddress __p = 0LL;
  uint64_t v26 = 0LL;
  uint64_t v27 = 0LL;
  memset(v24, 0, sizeof(v24));
  __int16 v8 = *(const void **)(a1 + 448);
  char v20 = v8;
  char v21 = *(_BYTE *)(a1 + 456);
  if (v21 && v8) {
    CFRetain(v8);
  }
  int v9 = operator new(0x228uLL);
  v9[1] = 0LL;
  v9[2] = 0LL;
  *int v9 = off_485B80;
  sub_7D084(buf, "");
  sub_F9638((uint64_t)(v9 + 3), &qword_48EF70, a1, (uint64_t)&__p, (uint64_t)v35, (uint64_t)&v20, v24, (__int128 *)buf);
  void v9[3] = &off_46FD40;
  *((_WORD *)v9 + 272) = 0;
  if (SBYTE3(v32) < 0) {
    operator delete(*(void **)buf);
  }
  *(void *)&__int128 v22 = v9 + 3;
  *((void *)&v22 + 1) = v9;
  sub_AFDAC((uint64_t)&v22, v9 + 13, (uint64_t)(v9 + 3));
  __int128 v23 = v22;
  __int128 v22 = 0uLL;
  sub_3711D4(a1, (void ***)&v23);
  uint64_t v10 = (std::__shared_weak_count *)*((void *)&v23 + 1);
  if (*((void *)&v23 + 1))
  {
    char v11 = (unint64_t *)(*((void *)&v23 + 1) + 8LL);
    do
      unint64_t v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }

  uint64_t v13 = (std::__shared_weak_count *)*((void *)&v22 + 1);
  if (*((void *)&v22 + 1))
  {
    __int16 v14 = (unint64_t *)(*((void *)&v22 + 1) + 8LL);
    do
      unint64_t v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  sub_19DFC((uint64_t)&v20);
  *(void *)buf = v24;
  sub_7A668((void ***)buf);
  if (__p) {
    operator delete(__p);
  }
  sub_19DFC((uint64_t)v38);
  sub_19DFC((uint64_t)&v37[2]);
  sub_19DFC((uint64_t)v35);
  return 1LL;
}

void sub_16F9E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *__p, uint64_t a22, int a23, __int16 a24, char a25, char a26)
{
}

uint64_t sub_16FA90(uint64_t a1, unsigned int a2)
{
  if (a2 != 1886613611)
  {
    int v3 = (os_log_t *)sub_138E8(17);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, a2);
      uint64_t v5 = v11 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      uint64_t v13 = "Device_Puffin.cpp";
      __int16 v14 = 1024;
      int v15 = 264;
      __int16 v16 = 2080;
      os_log_t v17 = v5;
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).",  buf,  0x1Cu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v6 = (os_log_t *)sub_138E8(13);
    AudioObjectPropertyAddress v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v13 = "Device_Puffin.cpp";
      __int16 v14 = 1024;
      int v15 = 265;
      _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unsupported VirtualAudioPortType.",  buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }

  return 0LL;
}

void sub_16FC3C(_Unwind_Exception *a1)
{
}

void sub_16FC5C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_F9108(a1);
  operator delete(v1);
}

BOOL sub_16FC70(uint64_t a1, _DWORD *a2)
{
  return *a2 == 1886810226;
}

uint64_t sub_16FC88()
{
  return 0LL;
}

uint64_t sub_16FC90(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    int v9 = (os_log_t *)sub_138E8(13);
    uint64_t v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)a2;
      int v18 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)__p, (unsigned int *)&v17);
      char v11 = v20 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      __int128 v22 = "Port_CarPlay_Aspen.cpp";
      __int16 v23 = 1024;
      int v24 = 176;
      __int16 v25 = 2080;
      uint64_t v26 = v11;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((a3 != 0) == (a4 == 0))
  {
    uint64_t v13 = (os_log_t *)sub_138E8(13);
    __int16 v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)a2;
      int v18 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)__p, (unsigned int *)&v17);
      int v15 = v20 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136316162;
      __int128 v22 = "Port_CarPlay_Aspen.cpp";
      __int16 v23 = 1024;
      int v24 = 177;
      __int16 v25 = 2080;
      uint64_t v26 = v15;
      __int16 v27 = 1024;
      int v28 = a3;
      __int16 v29 = 2048;
      uint64_t v30 = a4;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }

    __int16 v16 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v16 = &off_4865A0;
    v16[2] = 561211770;
  }

  if (*(_DWORD *)a2 == 1886810226) {
    return 4LL;
  }
  sub_F409C(a1, (uint64_t *)a2, a3, a4);
  return 0LL;
}

uint64_t sub_16FF48(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1);
  if ((result & 1) == 0)
  {
    uint64_t v13 = (os_log_t *)sub_138E8(13);
    __int16 v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = *(void *)a2;
      int v26 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)__p, (unsigned int *)&v25);
      int v15 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      uint64_t v30 = "Port_CarPlay_Aspen.cpp";
      __int16 v31 = 1024;
      int v32 = 197;
      __int16 v33 = 2080;
      int v34 = (const char *)v15;
      _os_log_impl( &dword_0,  v14,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((a3 != 0) == (a4 == 0))
  {
    uint64_t v17 = (os_log_t *)sub_138E8(13);
    int v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = *(void *)a2;
      int v26 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)__p, (unsigned int *)&v25);
      os_log_t v19 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136316162;
      uint64_t v30 = "Port_CarPlay_Aspen.cpp";
      __int16 v31 = 1024;
      int v32 = 198;
      __int16 v33 = 2080;
      int v34 = (const char *)v19;
      __int16 v35 = 1024;
      LODWORD(v36[0]) = a3;
      WORD2(v36[0]) = 2048;
      *(void *)((char *)v36 + 6) = a4;
      _os_log_impl( &dword_0,  v18,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }

    char v20 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v20 = &off_4865A0;
    v20[2] = 561211770;
  }

  if (!a6)
  {
    char v21 = (os_log_t *)sub_138E8(13);
    __int128 v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = *(void *)a2;
      int v26 = *(_DWORD *)(a2 + 8);
      sub_613AC((uint64_t)__p, (unsigned int *)&v25);
      __int16 v23 = v28 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315906;
      uint64_t v30 = "Port_CarPlay_Aspen.cpp";
      __int16 v31 = 1024;
      int v32 = 199;
      __int16 v33 = 2080;
      int v34 = "outData";
      __int16 v35 = 2080;
      v36[0] = v23;
      _os_log_impl( &dword_0,  v22,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }

    int v24 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v24 = &off_4865A0;
    void v24[2] = 561211770;
  }

  if (*(_DWORD *)a2 != 1886810226) {
    return sub_F4320(a1, (uint64_t *)a2, a3, a4, v12, (uint64_t)a6);
  }
  *a6 = 1;
  return result;
}

uint64_t sub_17033C()
{
  return 1LL;
}

void sub_170348(uint64_t a1)
{
  uint64_t v1 = (void *)sub_F8158(a1);
  operator delete(v1);
}

uint64_t sub_17035C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 424LL))(a1);
}

BOOL sub_170368(uint64_t a1)
{
  return sub_209014(*(const __CFString **)(*(void *)(a1 + 192) + 496LL));
}

uint64_t sub_170374(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 192) + 504LL);
}

void *sub_170380@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(const __CFString **)(*(void *)(a1 + 192) + 496LL);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_7E414(exception);
  }

  return sub_48100(a2, v2);
}

void sub_1703D0(_Unwind_Exception *a1)
{
}

BOOL sub_1703E4(uint64_t a1, int a2)
{
  return a2 == 1768776806 || a2 == 1987208039 || a2 == 1987211117;
}

void sub_17040C(uint64_t a1, int a2, int a3)
{
  if (((a2 - 1886614625) > 0xE || ((1 << (a2 - 97)) & 0x4101) == 0)
    && a2 != 1885565044
    && a2 != 1886609775)
  {
    uint64_t v13 = (os_log_t *)sub_138E8(13);
    __int16 v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int16 v16 = 136315394;
      *(void *)&v16[4] = "Port_CarPlay_Aspen.cpp";
      *(_WORD *)&v16[12] = 1024;
      *(_DWORD *)&v16[14] = 31;
      _os_log_impl(&dword_0, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v16, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  if (a3 != 1885544823 && a3 != 1885566825)
  {
    uint64_t v10 = (os_log_t *)sub_138E8(13);
    char v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int16 v16 = 136315394;
      *(void *)&v16[4] = "Port_CarPlay_Aspen.cpp";
      *(_WORD *)&v16[12] = 1024;
      *(_DWORD *)&v16[14] = 32;
      _os_log_impl(&dword_0, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v16, 0x12u);
    }

    uint64_t v12 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v12, "Precondition failure.");
  }

  *(void *)&v16[8] = 0LL;
  *(void *)&v16[16] = 0LL;
  *(void *)__int16 v16 = &v16[8];
  if (a2 > 1886614632)
  {
    if (a2 != 1886614633 && a2 != 1886614639) {
      goto LABEL_21;
    }
  }

  else if (a2 != 1885565044)
  {
    if (a2 == 1886614625)
    {
      sub_57ADC((uint64_t *)v16, 0x76737972u, 1987279218);
      *(_DWORD *)a1 = 1886614625;
      *(_DWORD *)(a1 + 4) = a3;
      *(_DWORD *)(a1 + 8) = 1701869160;
      *(_BYTE *)(a1 + 12) = 1;
      sub_86550((uint64_t *)(a1 + 16), (uint64_t)v16);
LABEL_22:
      __int16 v9 = *(_WORD *)(a1 + 40) & 0xF800;
      __int16 v7 = 660;
      goto LABEL_23;
    }

void sub_1707A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

void *sub_1707E8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  if (v25 < 0) {
    operator delete(__p[0]);
  }
  __p[0] = v26;
  sub_7A668((void ***)__p);
  sub_32C8C(*(void **)&v32[4]);
  *a1 = &off_472CE8;
  if (a5 != 1885565044 && a5 != 1886614633 && a5 != 1886614639)
  {
    char v21 = (os_log_t *)sub_138E8(13);
    __int128 v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "Port_CarPlay_Aspen.cpp";
      __int16 v29 = 1024;
      int v30 = 131;
      _os_log_impl(&dword_0, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  uint64_t v11 = sub_138E8(23);
  uint64_t v12 = sub_138E8(27);
  char v13 = 0;
  uint64_t v14 = 0LL;
  *(void *)buf = 0x100000002LL;
  uint64_t v15 = *(void *)(v11 + 8);
  while (1)
  {
    uint64_t v16 = *(int *)&buf[4 * v14];
    char v17 = v13;
    if (((v15 & v16) != 0) != ((*(void *)(v12 + 8) & v16) != 0)) {
      break;
    }
    char v13 = 1;
    uint64_t v14 = 1LL;
    if ((v17 & 1) != 0) {
      goto LABEL_12;
    }
  }

  if ((v15 & v16) == 0) {
    uint64_t v11 = v12;
  }
LABEL_12:
  int v18 = *(os_log_s **)v11;
  if (v18 && os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    os_log_t v19 = "Input";
    *(void *)&uint8_t buf[4] = "Port_CarPlay_Aspen.cpp";
    *(_DWORD *)buf = 136315650;
    if (a5 == 1886614639) {
      os_log_t v19 = "Output";
    }
    __int16 v29 = 1024;
    int v30 = 132;
    __int16 v31 = 2080;
    *(void *)int v32 = v19;
    _os_log_impl(&dword_0, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d Creating CarPlay Main Audio %s port", buf, 0x1Cu);
  }

  return a1;
}

void sub_170AB8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25)
{
}

void sub_170B28(uint64_t a1)
{
  uint64_t v1 = (void *)sub_F8158(a1);
  operator delete(v1);
}

void sub_170B3C(int a1, _BYTE *a2)
{
  *a2 = 1;
  if (a1 > 186)
  {
    if (a1 > 196)
    {
      if ((a1 - 12002) < 2)
      {
        sub_28E530();
        return;
      }

      if (a1 != 197) {
        goto LABEL_20;
      }
    }

    else if (a1 != 187)
    {
      if (a1 == 194)
      {
        sub_1CC154();
        buf[20] = 1;
        __int128 v151 = 0u;
        __int128 v152 = 0u;
        __int128 v153 = 0u;
        LODWORD(v154) = 0;
        BYTE4(v154) = (unsigned __int16)sub_8339C((uint64_t)@"XxnEk9uiIk5vCdbWEGt7lA") > 0x100u;
        BYTE5(v154) = 1;
        *(void *)((char *)&v154 + 6) = 0LL;
        HIWORD(v154) = 0;
        LODWORD(v155) = 16777473;
        int v157 = 0LL;
        uint64_t v158 = 0LL;
        char v156 = &v157;
        __int16 v159 = 0;
        char v160 = 0;
        int v161 = -1044381696;
        char v162 = 1;
        int v163 = -1044381696;
        char v164 = 1;
        int v165 = 0;
        char v166 = 1;
        int v167 = -1056964608;
        char v168 = 1;
        int v169 = -1033371648;
        char v170 = 1;
        int v171 = 0;
        char v172 = 1;
        int v173 = -1033371648;
        char v174 = 1;
        int v175 = 0;
        char v176 = 1;
        int v177 = -1044381696;
        char v178 = 1;
        int v179 = 0;
        char v180 = 1;
        int v181 = -1033371648;
        char v182 = 1;
        int v183 = 0;
        char v184 = 1;
        int v185 = -1033371648;
        char v186 = 1;
        int v187 = -1055916032;
        char v188 = 1;
        int v189 = -1033371648;
        char v190 = 1;
        int v191 = 0;
        char v192 = 1;
        int v193 = -1055916032;
        char v194 = 1;
        int v195 = -1033371648;
        char v196 = 1;
        int v197 = -1055916032;
        char v198 = 1;
        int v199 = -1033371648;
        char v200 = 1;
        int v201 = 0;
        char v202 = 1;
        int v203 = -1055916032;
        char v204 = 1;
        int v205 = -1043333120;
        char v206 = 1;
        int v207 = 0x40000000;
        char v208 = 1;
        int v209 = 16777472;
        int v210 = 0;
        char v211 = 1;
        int v212 = 0;
        char v213 = 1;
        int v214 = 1103626240;
        char v215 = 1;
        int v216 = 0;
        char v217 = 1;
        int v218 = 1094713344;
        char v219 = 1;
        int v220 = 1094713344;
        char v221 = 1;
        int v222 = 1094713344;
        char v223 = 1;
        int v224 = -1061158912;
        char v225 = 1;
        int v226 = 1107296256;
        char v227 = 1;
        int v228 = 1107296256;
        char v229 = 1;
        int v230 = 1092616192;
        char v231 = 1;
        int v232 = 0;
        char v233 = 1;
        int v234 = 0;
        char v235 = 1;
        int v236 = 16777472;
        v237.__r_.__value_.__s.__data_[0] = 0;
        char v240 = 0;
        LOBYTE(v241[0]) = 0;
        char v243 = 0;
        char v244 = 0;
        char v245 = 0;
        char v246 = 0;
        char v247 = 0;
        LOBYTE(v2sub_51FA0(v10 + 48) = 0;
        char v249 = 0;
        LOBYTE(v250) = 0;
        char v251 = 0;
        LOBYTE(v252) = 0;
        char v253 = 0;
        LOBYTE(v254) = 0;
        char v255 = 0;
        LOBYTE(v256) = 0;
        char v257 = 0;
        LOBYTE(v258) = 0;
        char v259 = 0;
        LOBYTE(v260) = 0;
        char v261 = 0;
        LOBYTE(v262) = 0;
        char v263 = 0;
        char v264 = 0;
        char v265 = 0;
        char v266 = 0;
        char v267 = 0;
        LOBYTE(v268) = 0;
        char v269 = 0;
        char v270 = 0;
        char v271 = 0;
        char v272 = 0;
        char v273 = 0;
        char v274 = 0;
        char v275 = 0;
        char v276 = 0;
        char v277 = 0;
        char v278 = 0;
        char v279 = 0;
        char v280 = 0;
        char v281 = 0;
        char v282 = 1;
        char v283 = 0;
        char v284 = 0;
        LOBYTE(v285) = 0;
        char v286 = 0;
        LOBYTE(v287) = 0;
        char v288 = 0;
        LOBYTE(v289) = 0;
        char v290 = 0;
        LOBYTE(v291) = 0;
        char v292 = 0;
        __int16 v293 = 0;
        LOBYTE(v294) = 0;
        char v295 = 0;
        LOBYTE(v296) = 0;
        char v297 = 0;
        char v298 = 0;
        char v299 = 0;
        LOBYTE(v300) = 0;
        char v301 = 0;
        LOBYTE(v302) = 0;
        char v303 = 0;
        LOBYTE(v304) = 0;
        char v305 = 0;
        LOBYTE(v306) = 0;
        char v307 = 0;
        LOBYTE(v308) = 0;
        char v309 = 0;
        LOBYTE(v310) = 0;
        char v311 = 0;
        char v312 = 0;
        char v313 = 0;
        char v314 = 0;
        char v315 = 0;
        LOBYTE(v316) = 0;
        char v318 = 0;
        v319.__r_.__value_.__s.__data_[0] = 0;
        char v320 = 0;
        v321.__r_.__value_.__s.__data_[0] = 0;
        char v322 = 0;
        v323.__r_.__value_.__s.__data_[0] = 0;
        char v324 = 0;
        int v325 = 256;
        LOBYTE(v326) = 0;
        char v327 = 0;
        char v328 = 0;
        char v329 = 0;
        char v330 = 0;
        char v331 = 0;
        __int16 v332 = 0;
        uint8_t buf[4] = 1;
        *(_DWORD *)buf = 1953460273;
        _BYTE buf[12] = 1;
        *(_DWORD *)&buf[8] = 2;
        *(_DWORD *)&_DWORD buf[16] = 5;
        LODWORD(__src[0]) = 1;
        sub_909D8((char *)&v151, (char *)__src, (uint64_t)__src + 4, 1uLL);
        __src[0] = (void *)0x400000003LL;
        sub_909D8((char *)&v152 + 8, (char *)__src, (uint64_t)&__src[1], 2uLL);
        LODWORD(v154) = 16843009;
        WORD3(v154) = 257;
        WORD6(v154) = 257;
        LOWORD(v155) = 256;
        int v205 = -1047527424;
        char v206 = 1;
        int v214 = 1103101952;
        char v215 = 1;
        int v220 = 0;
        char v221 = 1;
        int v222 = 0;
        char v223 = 1;
        int v218 = 0;
        char v219 = 1;
        int v234 = 1090519040;
        char v235 = 1;
        int v224 = -1040187392;
        char v225 = 1;
        int v207 = 0;
        char v208 = 1;
        LOWORD(v209) = 257;
        int v236 = 16843009;
        if (!v249) {
          char v249 = 1;
        }
        int v248 = 1836282987;
        if (!v251) {
          char v251 = 1;
        }
        int v250 = 2;
        if (!v253) {
          char v253 = 1;
        }
        int v252 = 8;
        if (!v255) {
          char v255 = 1;
        }
        int v254 = 8;
        int v258 = 36;
        char v259 = 1;
        int v260 = 36;
        char v261 = 1;
        int v262 = 36;
        char v263 = 1;
        int v268 = 36;
        char v269 = 1;
        int v285 = 40;
        char v286 = 1;
        int v287 = 3;
        char v288 = 1;
        int v289 = 25;
        char v290 = 1;
        int v291 = 40;
        char v292 = 1;
        int v304 = 13;
        char v305 = 1;
        int v306 = 40;
        char v307 = 1;
        int v308 = 23;
        char v309 = 1;
        int v310 = 7;
        char v311 = 1;
        __int16 v293 = 257;
        sub_1CA59C(__src, 87);
        if (v318)
        {
          if (SHIBYTE(v317) < 0) {
            operator delete((void *)v316);
          }
          __int128 v316 = *(_OWORD *)__src;
          int v317 = v145;
          HIBYTE(v145) = 0;
          LOBYTE(__src[0]) = 0;
        }

        else
        {
          __int128 v316 = *(_OWORD *)__src;
          int v317 = v145;
          __src[1] = 0LL;
          __int128 v145 = 0LL;
          __src[0] = 0LL;
          char v318 = 1;
        }

        if (v320)
        {
          sub_90AD0(&v319, "_top_mic_general");
        }

        else
        {
          sub_7D084(&v319, "_top_mic_general");
          char v320 = 1;
        }

        if (v322)
        {
          sub_90AD0(&v321, "_top_mic_measurement");
        }

        else
        {
          sub_7D084(&v321, "_top_mic_measurement");
          char v322 = 1;
        }

        if (v324)
        {
          sub_90AD0(&v323, "_top_mic_hearing_accessibility");
        }

        else
        {
          sub_7D084(&v323, "_top_mic_hearing_accessibility");
          char v324 = 1;
        }

        if (!buf[12]) {
          _BYTE buf[12] = 1;
        }
        *(_DWORD *)&buf[8] = 1;
        if (!buf[20]) {
          buf[20] = 1;
        }
        *(_DWORD *)&_DWORD buf[16] = 2;
        sub_909D8((char *)&v151, 0LL, 0LL, 0LL);
        sub_909D8((char *)&v152 + 8, 0LL, 0LL, 0LL);
        LOWORD(v154) = 256;
        WORD6(v154) = 256;
        LOWORD(v155) = 256;
        if (!v251) {
          char v251 = 1;
        }
        int v250 = 0;
        if (!v253) {
          char v253 = 1;
        }
        int v252 = 2;
        if (!v255) {
          char v255 = 1;
        }
        int v254 = 0;
        sub_1CA59C(__src, 194);
        if (v318)
        {
          if (SHIBYTE(v317) < 0) {
            operator delete((void *)v316);
          }
          __int128 v316 = *(_OWORD *)__src;
          int v317 = v145;
          HIBYTE(v145) = 0;
          LOBYTE(__src[0]) = 0;
        }

        else
        {
          __int128 v316 = *(_OWORD *)__src;
          int v317 = v145;
          __src[1] = 0LL;
          __int128 v145 = 0LL;
          __src[0] = 0LL;
          char v318 = 1;
        }

        sub_343768(buf);
        goto LABEL_140;
      }

      if (a1 != 195) {
        goto LABEL_20;
      }
      goto LABEL_11;
    }

void sub_1734C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41)
{
  if (SLOBYTE(STACK[0x2DF]) < 0) {
    operator delete((void *)STACK[0x2C8]);
  }
  if (SLOBYTE(STACK[0x2C7]) < 0) {
    operator delete((void *)STACK[0x2B0]);
  }
  sub_839EC((uint64_t)&a27);
  sub_82FAC((uint64_t)&a41);
  _Unwind_Resume(a1);
}

uint64_t sub_1736D0(uint64_t a1)
{
  *(void *)a1 = off_473378;
  *(void *)(a1 + 520) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 544));
  return sub_F8158(a1);
}

void sub_173714(uint64_t a1)
{
  *(void *)a1 = off_473378;
  *(void *)(a1 + 520) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 544));
  uint64_t v2 = (void *)sub_F8158(a1);
  operator delete(v2);
}

uint64_t sub_17375C(os_unfair_lock_s *a1)
{
  return 1LL;
}

void sub_173788(uint64_t a1)
{
  uint64_t v2 = a1 + 520;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 520) + 16LL))(a1 + 520);
  *(_BYTE *)(a1 + 608) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  }
  sub_F4ECC(a1);
}

BOOL sub_1737D8(uint64_t a1)
{
  uint64_t v2 = a1 + 520;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 520) + 16LL))(a1 + 520);
  int v4 = *(unsigned __int8 *)(a1 + 608);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  }
  return v4 != 0;
}

uint64_t sub_17382C(uint64_t a1)
{
  uint64_t v2 = a1 + 520;
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 520) + 16LL))(a1 + 520);
  int v4 = *(_DWORD *)(a1 + 144);
  uint64_t v5 = (void *)sub_1F4000();
  if (v4 == 1886745455) {
    uint64_t v6 = 1684500341LL;
  }
  else {
    uint64_t v6 = 1819176821LL;
  }
  uint64_t result = sub_1F35E4(v5, v6);
  *(_BYTE *)(a1 + 608) = result;
  if (v3) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24LL))(v2);
  }
  return result;
}

void sub_1738B0(_Unwind_Exception *exception_object)
{
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24LL))(v1);
  }
  _Unwind_Resume(exception_object);
}

_BYTE *sub_1738D4(_BYTE *a1, uint64_t *a2, uint64_t a3, CFStringRef *a4)
{
  __int16 v8 = (char *)operator new(0xCuLL);
  v16[1] = v8 + 12;
  v16[2] = v8 + 12;
  qmemcpy(v8, "gcrvmorvtshv", 12);
  v16[0] = v8;
  sub_F9530((uint64_t)&v14, *(unsigned int *)a2);
  memset(v13, 0, sizeof(v13));
  sub_7D084(__p, "");
  sub_F9638((uint64_t)a1, a2, a3, (uint64_t)v16, (uint64_t)&v14, (uint64_t)a4, v13, (__int128 *)__p);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  __p[0] = v13;
  sub_7A668((void ***)__p);
  sub_19DFC((uint64_t)&v15);
  sub_19DFC((uint64_t)&v14.__r_.__value_.__l.__cap_);
  sub_19DFC((uint64_t)&v14);
  operator delete(v8);
  *(void *)a1 = off_473378;
  sub_48E98(&v14, *a4);
  std::string::append(&v14, " Port_IAPLineOut_Aspen mutex", 0x1CuLL);
  if ((v14.__r_.__value_.__s.__size_ & 0x80u) == 0) {
    int v9 = &v14;
  }
  else {
    int v9 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  sub_B1F7C((uint64_t)(a1 + 520), (uint64_t)v9);
  a1[608] = 0;
  (*(void (**)(_BYTE *, uint64_t))(*(void *)a1 + 104LL))(a1, 1768513904LL);
  return a1;
}

void sub_173A48( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20, int a21, __int16 a22, char a23, char a24)
{
  *(void *)(v24 + 520) = off_46E4E8;
  pthread_mutex_destroy((pthread_mutex_t *)(v24 + 544));
  sub_F8158(v24);
  _Unwind_Resume(a1);
}

std::string *sub_173AF4(std::string *a1, void *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "{ ", 2uLL);
  if (a2[9])
  {
    sub_7D084(v11, "Persistent input ports");
    sub_173CFC(&__p, (uint64_t)(a2 + 6), (const void **)v11);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type size = __p.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)p_p, size);
    if (v12 < 0) {
      operator delete(v11[0]);
    }
  }

  if (a2[19])
  {
    sub_7D084(v11, "Persistent tapStream ports");
    sub_173CFC(&__p, (uint64_t)(a2 + 16), (const void **)v11);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      uint64_t v6 = &__p;
    }
    else {
      uint64_t v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v7 = __p.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v7 = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)v6, v7);
    if (v12 < 0) {
      operator delete(v11[0]);
    }
  }

  if (a2[14])
  {
    sub_7D084(v11, "Persistent output ports");
    sub_173CFC(&__p, (uint64_t)(a2 + 11), (const void **)v11);
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      __int16 v8 = &__p;
    }
    else {
      __int16 v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
      std::string::size_type v9 = __p.__r_.__value_.__s.__size_;
    }
    else {
      std::string::size_type v9 = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)v8, v9);
    if (v12 < 0) {
      operator delete(v11[0]);
    }
  }

  return std::string::append(a1, " }", 2uLL);
}

void sub_173C94( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_173CFC(std::string *a1, uint64_t a2, const void **a3)
{
  else {
    size_t v6 = (size_t)a3[1];
  }
  uint64_t v7 = sub_D0924((uint64_t)a1, v6 + 4);
  else {
    __int16 v8 = *(void **)v7;
  }
  if (v6)
  {
    else {
      std::string::size_type v9 = *a3;
    }
    memmove(v8, v9, v6);
  }

  strcpy((char *)v8 + v6, ": [ ");
  uint64_t v10 = *(uint64_t ***)(a2 + 16);
  if (v10)
  {
    while (1)
    {
      std::string::append(a1, "(", 1uLL);
      sub_2CA1C(&__p, *((unsigned int *)v10 + 4));
      if ((v23 & 0x80u) == 0) {
        p_p = (const std::string::value_type *)&__p;
      }
      else {
        p_p = (const std::string::value_type *)__p;
      }
      if ((v23 & 0x80u) == 0) {
        std::string::size_type v12 = v23;
      }
      else {
        std::string::size_type v12 = v22;
      }
      std::string::append(a1, p_p, v12);
      std::string::append(a1, ", ", 2uLL);
      std::string v14 = (const __CFString **)v10[3];
      char v13 = (const __CFString **)v10[4];
      memset(&v20, 0, sizeof(v20));
      std::string::append(&v20, "{ ", 2uLL);
      if (v14 != v13)
      {
        while (1)
        {
          sub_151A20((uint64_t)&__p, *v14);
          if ((v23 & 0x80u) == 0) {
            uint64_t v15 = (const std::string::value_type *)&__p;
          }
          else {
            uint64_t v15 = (const std::string::value_type *)__p;
          }
          if ((v23 & 0x80u) == 0) {
            std::string::size_type v16 = v23;
          }
          else {
            std::string::size_type v16 = v22;
          }
          std::string::append(&v20, v15, v16);
          if (++v14 == v13) {
            break;
          }
          std::string::append(&v20, ", ", 2uLL);
        }
      }

      std::string::append(&v20, " }", 2uLL);
      char v17 = (v20.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v20 : (std::string *)v20.__r_.__value_.__r.__words[0];
      std::string::size_type v18 = (v20.__r_.__value_.__s.__size_ & 0x80u) == 0 ? v20.__r_.__value_.__s.__size_ : v20.__r_.__value_.__l.__size_;
      std::string::append(a1, (const std::string::value_type *)v17, v18);
      std::string::append(a1, ")", 1uLL);
      uint64_t v10 = (uint64_t **)*v10;
      if (!v10) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }

  return std::string::append(a1, " ] ", 3uLL);
}

void sub_173F38( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

void sub_173FAC(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)(a1 + 8) || *(void *)(a1 + 24) != *(void *)(a1 + 32))
  {
    sub_B8E40(&v50, a2, "", 110);
    int v3 = v51;
    if (v51 != &v50)
    {
      while (1)
      {
        int v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3[2] + 152LL))(v3[2]);
        uint64_t v5 = v3[2];
        if (v4) {
          break;
        }
        if (sub_174514((const __CFString ***)a1, v3[2]))
        {
          __int16 v11 = *(_WORD *)(v5 + 184);
          unsigned int v12 = *(_DWORD *)(v5 + 144);
          char v13 = *(const void **)(v5 + 248);
          CFTypeRef v56 = v13;
          LOBYTE(v57) = *(_BYTE *)(v5 + 256);
          if ((_BYTE)v57) {
            BOOL v14 = v13 == 0LL;
          }
          else {
            BOOL v14 = 1;
          }
          if (!v14)
          {
            CFRetain(v13);
            goto LABEL_20;
          }

          if (v13) {
LABEL_20:
          }
            CFRetain(v13);
          sub_7F234(&v53, v13);
          sub_19DFC((uint64_t)&v56);
          BOOL v15 = sub_203D48(v12);
          std::string::size_type v16 = (void *)(a1 + 48);
          if ((v11 & 1) == 0) {
            std::string::size_type v16 = (void *)(a1 + 88);
          }
          if (v15) {
            char v17 = (void *)(a1 + 128);
          }
          else {
            char v17 = v16;
          }
          if (sub_52918(v17, v12))
          {
            std::string::size_type v18 = sub_52918(v17, v12);
            if (!v18) {
              sub_8F9A4("unordered_map::at: key not found");
            }
            os_log_t v19 = v18;
            uint64_t v20 = (const __CFString **)v18[3];
            char v21 = (const __CFString **)v18[4];
            if (v20 == v21)
            {
              std::string::size_type v22 = (const __CFString **)v18[3];
            }

            else
            {
              while (sub_5586C(*v20, (const __CFString **)&v53))
              {
                if (++v20 == v21)
                {
                  uint64_t v20 = v21;
                  break;
                }
              }

              std::string::size_type v22 = v20;
              uint64_t v20 = (const __CFString **)v19[4];
            }

            if (v22 != v20)
            {
              __int16 v33 = v22 + 1;
              if (v22 + 1 != v20)
              {
                uint64_t v34 = *v22;
                do
                {
                  std::string::size_type v22 = v33;
                  *(v33 - 1) = *v33;
                  *v33++ = v34;
                }

                while (v33 != v20);
                uint64_t v20 = (const __CFString **)v19[4];
              }

              while (v20 != v22)
              {
                __int16 v35 = *--v20;
                sub_8D328(v35);
              }

              v19[4] = (uint64_t)v22;
              if ((const __CFString **)v19[3] == v22)
              {
                uint64_t v36 = sub_52918(v17, v12);
                if (v36)
                {
                  int8x8_t v37 = (int8x8_t)v17[1];
                  unint64_t v38 = v36[1];
                  uint8x8_t v39 = (uint8x8_t)vcnt_s8(v37);
                  v39.i16[0] = vaddlv_u8(v39);
                  if (v39.u32[0] > 1uLL)
                  {
                    if (v38 >= *(void *)&v37) {
                      v38 %= *(void *)&v37;
                    }
                  }

                  else
                  {
                    v38 &= *(void *)&v37 - 1LL;
                  }

                  uint64_t v44 = *(uint64_t **)(*v17 + 8 * v38);
                  do
                  {
                    __int128 v45 = v44;
                    uint64_t v44 = (uint64_t *)*v44;
                  }

                  while (v44 != v36);
                  if (v45 == v17 + 2) {
                    goto LABEL_88;
                  }
                  unint64_t v46 = v45[1];
                  if (v39.u32[0] > 1uLL)
                  {
                    if (v46 >= *(void *)&v37) {
                      v46 %= *(void *)&v37;
                    }
                  }

                  else
                  {
                    v46 &= *(void *)&v37 - 1LL;
                  }

                  if (v46 != v38)
                  {
LABEL_88:
                    if (!*v36) {
                      goto LABEL_89;
                    }
                    unint64_t v47 = *(void *)(*v36 + 8);
                    if (v39.u32[0] > 1uLL)
                    {
                      if (v47 >= *(void *)&v37) {
                        v47 %= *(void *)&v37;
                      }
                    }

                    else
                    {
                      v47 &= *(void *)&v37 - 1LL;
                    }

                    if (v47 != v38) {
LABEL_89:
                    }
                      *(void *)(*v17 + 8 * v38) = 0LL;
                  }

                  uint64_t v48 = *v36;
                  if (*v36)
                  {
                    unint64_t v49 = *(void *)(v48 + 8);
                    if (v39.u32[0] > 1uLL)
                    {
                      if (v49 >= *(void *)&v37) {
                        v49 %= *(void *)&v37;
                      }
                    }

                    else
                    {
                      v49 &= *(void *)&v37 - 1LL;
                    }

                    if (v49 != v38)
                    {
                      *(void *)(*v17 + 8 * v49) = v45;
                      uint64_t v48 = *v36;
                    }
                  }

                  *__int128 v45 = v48;
                  *uint64_t v36 = 0LL;
                  --v17[3];
                  sub_8D1B0(1, (void **)v36);
                }
              }
            }
          }

          CFTypeRef v43 = v53;
          if (!v53) {
            goto LABEL_100;
          }
LABEL_99:
          CFRelease(v43);
        }

void sub_174480(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  BOOL v10 = va_arg(va2, const void *);
  sub_7A768((uint64_t)va2);
  sub_7A738((const void **)va1);
  sub_1BB88((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_174514(const __CFString ***a1, uint64_t a2)
{
  if ((*(_WORD *)(a2 + 184) & 1) != 0)
  {
    if (sub_203D48(*(_DWORD *)(a2 + 144)))
    {
      std::string::size_type v22 = &off_475E08;
      uint64_t v24 = &v22;
      sub_203E78(&v19, a2, (uint64_t)&v22);
      uint64_t v6 = v24;
      if (v24 == &v22)
      {
        uint64_t v7 = 4LL;
        uint64_t v6 = &v22;
      }

      else
      {
        if (!v24) {
          goto LABEL_25;
        }
        uint64_t v7 = 5LL;
      }

      (*v6)[v7]();
LABEL_25:
      cf[0] = 0LL;
      __int16 v11 = v20;
      if (v20)
      {
        unsigned int v12 = std::__shared_weak_count::lock(v20);
        cf[1] = v12;
        if (v12)
        {
          char v13 = v12;
          BOOL v14 = v19;
          cf[0] = v19;
          std::__shared_weak_count::__release_weak(v11);
          if (!v14)
          {
            BOOL v8 = 0LL;
LABEL_38:
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              unint64_t v17 = __ldaxr(p_shared_owners);
            while (__stlxr(v17 - 1, p_shared_owners));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }

            return v8;
          }

          BOOL v15 = (uint64_t (**)())v14[31];
          std::string::size_type v22 = v15;
          char v23 = *((_BYTE *)v14 + 256);
          if (v23 && v15)
          {
            CFRetain(v15);
          }

          else if (!v15)
          {
            goto LABEL_36;
          }

          CFRetain(v15);
LABEL_36:
          sub_7F234(&v19, v15);
          sub_19DFC((uint64_t)&v22);
          BOOL v8 = sub_174810(a1 + 3, (const __CFString **)&v19);
          if (v19) {
            CFRelease(v19);
          }
          goto LABEL_38;
        }

        std::__shared_weak_count::__release_weak(v11);
      }

      return 0LL;
    }

    BOOL v10 = *(uint64_t (***)())(a2 + 248);
    std::string::size_type v22 = v10;
    char v23 = *(_BYTE *)(a2 + 256);
    if (v23 && v10)
    {
      CFRetain(v10);
    }

    else if (!v10)
    {
      goto LABEL_21;
    }

    CFRetain(v10);
LABEL_21:
    sub_7F234(cf, v10);
    sub_19DFC((uint64_t)&v22);
    BOOL v8 = sub_174810(a1, (const __CFString **)cf);
    CFTypeRef v9 = cf[0];
    if (!cf[0]) {
      return v8;
    }
    goto LABEL_15;
  }

  int v4 = *(uint64_t (***)())(a2 + 248);
  std::string::size_type v22 = v4;
  char v23 = *(_BYTE *)(a2 + 256);
  if (v23) {
    BOOL v5 = v4 == 0LL;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    CFRetain(v4);
LABEL_13:
    CFRetain(v4);
    goto LABEL_14;
  }

  if (v4) {
    goto LABEL_13;
  }
LABEL_14:
  sub_7F234(cf, v4);
  sub_19DFC((uint64_t)&v22);
  BOOL v8 = sub_174810(a1 + 3, (const __CFString **)cf);
  CFTypeRef v9 = cf[0];
  if (cf[0]) {
LABEL_15:
  }
    CFRelease(v9);
  return v8;
}

void sub_174780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
}

BOOL sub_174810(const __CFString ***a1, const __CFString **a2)
{
  int v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 == v3)
  {
    uint64_t v6 = *a1;
  }

  else
  {
    while (sub_5586C(*v2, a2))
    {
      if (++v2 == v3)
      {
        int v2 = v3;
        break;
      }
    }

    uint64_t v6 = v2;
    int v2 = a1[1];
  }

  return v6 != v2;
}

uint64_t sub_17487C(uint64_t a1, unsigned int a2, const __CFString **a3)
{
  uint64_t v7 = sub_52918((void *)a1, a2);
  if (v7 && sub_174810((const __CFString ***)v7 + 3, a3)) {
    return 0LL;
  }
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v9 <= a2) {
        unint64_t v3 = a2 % v9;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v9 - 1) & a2;
    }

    __int16 v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      unsigned int v12 = (char *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v13 == a2)
          {
            if (*((_DWORD *)v12 + 4) == a2) {
              goto LABEL_43;
            }
          }

          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }

            else
            {
              v13 &= v9 - 1;
            }

            if (v13 != v3) {
              break;
            }
          }

          unsigned int v12 = *(char **)v12;
        }

        while (v12);
      }
    }
  }

  unsigned int v12 = (char *)operator new(0x30uLL);
  *(void *)unsigned int v12 = 0LL;
  *((void *)v12 + 1) = a2;
  *((_DWORD *)v12 + 4) = a2;
  *((void *)v12 + 4) = 0LL;
  *((void *)v12 + 5) = 0LL;
  *((void *)v12 + 3) = 0LL;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1LL;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_52168(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= a2) {
        unint64_t v3 = a2 % v9;
      }
      else {
        unint64_t v3 = a2;
      }
    }

    else
    {
      unint64_t v3 = ((_DWORD)v9 - 1) & a2;
    }
  }

  uint64_t v20 = *(void *)a1;
  char v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *(void *)unsigned int v12 = *v21;
  }

  else
  {
    *(void *)unsigned int v12 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v12;
    *(void *)(v20 + 8 * v3) = a1 + 16;
    if (!*(void *)v12) {
      goto LABEL_42;
    }
    unint64_t v22 = *(void *)(*(void *)v12 + 8LL);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }

    else
    {
      v22 &= v9 - 1;
    }

    char v21 = (void *)(*(void *)a1 + 8 * v22);
  }

  void *v21 = v12;
LABEL_42:
  ++*(void *)(a1 + 24);
LABEL_43:
  unint64_t v23 = *((void *)v12 + 5);
  uint64_t v24 = (void *)*((void *)v12 + 4);
  if ((unint64_t)v24 >= v23)
  {
    uint64_t v26 = *((void *)v12 + 3);
    uint64_t v27 = ((uint64_t)v24 - v26) >> 3;
    uint64_t v28 = v23 - v26;
    uint64_t v29 = v28 >> 2;
    else {
      unint64_t v30 = v29;
    }
    uint64_t v44 = v12 + 40;
    if (v30)
    {
      uint64_t v32 = (char *)sub_7DC90(v30);
    }

    else
    {
      uint64_t v32 = 0LL;
      uint64_t v31 = 0LL;
    }

    __int16 v33 = &v32[8 * v27];
    uint64_t v34 = &v32[8 * v31];
    CFTypeRef v43 = v34;
    __int16 v35 = sub_126284(v33, *a3);
    int v25 = v35 + 1;
    v42.i64[1] = (uint64_t)(v35 + 1);
    int8x8_t v37 = (void *)*((void *)v12 + 3);
    uint64_t v36 = (void *)*((void *)v12 + 4);
    if (v36 == v37)
    {
      int64x2_t v39 = vdupq_n_s64((unint64_t)v36);
    }

    else
    {
      do
      {
        uint64_t v38 = *--v36;
        *--__int16 v35 = v38;
        *uint64_t v36 = 0LL;
      }

      while (v36 != v37);
      int64x2_t v39 = *(int64x2_t *)(v12 + 24);
      int v25 = (void *)v42.i64[1];
      uint64_t v34 = v43;
    }

    *((void *)v12 + 3) = v35;
    *((void *)v12 + 4) = v25;
    int64x2_t v42 = v39;
    uint64_t v40 = (char *)*((void *)v12 + 5);
    *((void *)v12 + 5) = v34;
    CFTypeRef v43 = v40;
    uint64_t v41 = v39.i64[0];
    sub_E6DC4((uint64_t)&v41);
  }

  else
  {
    int v25 = sub_126284(v24, *a3) + 1;
  }

  *((void *)v12 + 4) = v25;
  return 1LL;
}

void sub_174B9C(_Unwind_Exception *a1)
{
}

void *sub_174BBC()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &off_4735A8;
  return result;
}

void sub_174BE0(uint64_t a1, void *a2)
{
  *a2 = &off_4735A8;
}

uint64_t sub_174BF8()
{
  return 1LL;
}

BOOL sub_174C00(void *a1, void *a2, void *a3, void *a4)
{
  BOOL v4 = a3 == a4;
  if (a3 != a4 && a1 != a2)
  {
    while (1)
    {
      unsigned int v5 = *((_DWORD *)a3 + 7);
      unsigned int v6 = *((_DWORD *)a1 + 7);
      if (v5 < v6) {
        break;
      }
      if (v6 >= v5)
      {
        BOOL v8 = (void *)a3[1];
        if (v8)
        {
          do
          {
            uint64_t v7 = v8;
            BOOL v8 = (void *)*v8;
          }

          while (v8);
        }

        else
        {
          do
          {
            uint64_t v7 = (void *)a3[2];
            BOOL v9 = *v7 == (void)a3;
            a3 = v7;
          }

          while (!v9);
        }
      }

      else
      {
        uint64_t v7 = a3;
      }

      uint8x8_t v10 = (void *)a1[1];
      if (v10)
      {
        do
        {
          __int16 v11 = v10;
          uint8x8_t v10 = (void *)*v10;
        }

        while (v10);
      }

      else
      {
        do
        {
          __int16 v11 = (void *)a1[2];
          BOOL v9 = *v11 == (void)a1;
          a1 = v11;
        }

        while (!v9);
      }

      BOOL v4 = v7 == a4;
      if (v7 != a4)
      {
        a1 = v11;
        a3 = v7;
        if (v11 != a2) {
          continue;
        }
      }

      return v4;
    }

    return 0LL;
  }

  return v4;
}

void sub_174CC0(uint64_t a1)
{
  unsigned int v27 = *(_DWORD *)(a1 + 16);
  uint64_t v28 = 1735159650LL;
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 376LL))(*(void *)(a1 + 8));
  if ((v2 & 0xFF00000000LL) == 0 || v2 == 0LL)
  {
    BOOL v4 = (os_log_t *)sub_138E8(19);
    unsigned int v5 = *v4;
    if (!*v4 || !os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    sub_2CA1C(__p, 1937208176LL);
    int v6 = v26;
    uint64_t v7 = (void **)__p[0];
    (*(void (**)(void *__return_ptr))(**(void **)(a1 + 8) + 128LL))(v24);
    BOOL v8 = __p;
    if (v6 < 0) {
      BOOL v8 = v7;
    }
    *(_DWORD *)buf = 136315906;
    unint64_t v30 = "RoutingHandlerAction_BluetoothSoftwareVolume.cpp";
    __int16 v31 = 1024;
    int v32 = 19;
    __int16 v33 = 2080;
    uint64_t v34 = v8;
    __int16 v35 = 2112;
    v36[0] = v24[0];
    BOOL v9 = "%25s:%-5d Software volume mode (%s) is not supported on device %@";
  }

  else
  {
    char v10 = (*(uint64_t (**)(void, unsigned int *))(**(void **)(a1 + 8) + 16LL))(*(void *)(a1 + 8), &v27);
    if ((v10 & 1) != 0)
    {
      char v11 = (*(uint64_t (**)(void, unsigned int *))(**(void **)(a1 + 8) + 24LL))( *(void *)(a1 + 8),  &v27);
      unsigned int v12 = (os_log_t *)sub_138E8(19);
      unsigned int v5 = *v12;
      if ((v11 & 1) != 0)
      {
        if (v5 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
        {
          sub_2CA1C(__p, *(unsigned int *)(a1 + 16));
          int v13 = v26;
          float v14 = (void **)__p[0];
          int v15 = *(_DWORD *)(a1 + 20);
          (*(void (**)(void *__return_ptr))(**(void **)(a1 + 8) + 128LL))(v24);
          BOOL v16 = __p;
          if (v13 < 0) {
            BOOL v16 = v14;
          }
          *(_DWORD *)buf = 136316162;
          unint64_t v30 = "RoutingHandlerAction_BluetoothSoftwareVolume.cpp";
          __int16 v31 = 1024;
          int v32 = 38;
          __int16 v33 = 2080;
          uint64_t v34 = v16;
          __int16 v35 = 1024;
          LODWORD(v36[0]) = v15;
          WORD2(v36[0]) = 2112;
          *(void *)((char *)v36 + 6) = v24[0];
          _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Setting property(%s) = %u for device %@",  buf,  0x2Cu);
          sub_19DFC((uint64_t)v24);
          if (v26 < 0) {
            operator delete(__p[0]);
          }
        }

        (*(void (**)(void, unsigned int *, void, void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 48LL))( *(void *)(a1 + 8),  &v27,  0LL,  0LL,  4LL,  a1 + 20);
        return;
      }

      if (!v5 || !os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      sub_2CA1C(__p, v27);
      int v21 = v26;
      unint64_t v22 = (void **)__p[0];
      (*(void (**)(void *__return_ptr))(**(void **)(a1 + 8) + 128LL))(v24);
      unint64_t v23 = __p;
      if (v21 < 0) {
        unint64_t v23 = v22;
      }
      *(_DWORD *)buf = 136315906;
      unint64_t v30 = "RoutingHandlerAction_BluetoothSoftwareVolume.cpp";
      __int16 v31 = 1024;
      int v32 = 33;
      __int16 v33 = 2080;
      uint64_t v34 = v23;
      __int16 v35 = 2112;
      v36[0] = v24[0];
      BOOL v9 = "%25s:%-5d Property %s is not settable on device %@";
    }

    else
    {
      unint64_t v17 = (os_log_t *)sub_138E8(19);
      unsigned int v5 = *v17;
      if (!*v17 || !os_log_type_enabled(*v17, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      sub_2CA1C(__p, v27);
      int v18 = v26;
      size_t v19 = (void **)__p[0];
      (*(void (**)(void *__return_ptr))(**(void **)(a1 + 8) + 128LL))(v24);
      uint64_t v20 = __p;
      if (v18 < 0) {
        uint64_t v20 = v19;
      }
      *(_DWORD *)buf = 136315906;
      unint64_t v30 = "RoutingHandlerAction_BluetoothSoftwareVolume.cpp";
      __int16 v31 = 1024;
      int v32 = 26;
      __int16 v33 = 2080;
      uint64_t v34 = v20;
      __int16 v35 = 2112;
      v36[0] = v24[0];
      BOOL v9 = "%25s:%-5d Property %s is not available on device %@";
    }
  }

  _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEFAULT, v9, buf, 0x26u);
  sub_19DFC((uint64_t)v24);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1750B8(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1750EC(uint64_t a1)
{
  int v12 = *(_DWORD *)(a1 + 16);
  uint64_t v13 = 1735159650LL;
  uint64_t result = (*(uint64_t (**)(void, int *))(**(void **)(a1 + 8) + 16LL))(*(void *)(a1 + 8), &v12);
  if ((_DWORD)result)
  {
    unint64_t v3 = (os_log_t *)sub_138E8(19);
    BOOL v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
    {
      sub_2CA1C(__p, *(unsigned int *)(a1 + 16));
      int v5 = v11;
      int v6 = (void **)__p[0];
      int v7 = *(_DWORD *)(a1 + 24);
      (*(void (**)(void *__return_ptr))(**(void **)(a1 + 8) + 128LL))(v9);
      BOOL v8 = __p;
      if (v5 < 0) {
        BOOL v8 = v6;
      }
      *(_DWORD *)buf = 136316162;
      int v15 = "RoutingHandlerAction_BluetoothSoftwareVolume.cpp";
      __int16 v16 = 1024;
      int v17 = 50;
      __int16 v18 = 2080;
      size_t v19 = v8;
      __int16 v20 = 1024;
      int v21 = v7;
      __int16 v22 = 2112;
      uint64_t v23 = v9[0];
      _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Resetting property(%s) = %u for device %@ back to its old value",  buf,  0x2Cu);
      sub_19DFC((uint64_t)v9);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }

    return (*(uint64_t (**)(void, int *, void, void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 48LL))( *(void *)(a1 + 8),  &v12,  0LL,  0LL,  4LL,  a1 + 24);
  }

  return result;
}

void sub_17527C(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_17529C(uint64_t a1)
{
  *(void *)a1 = off_4735F0;
  return sub_F3008(a1);
}

void sub_1752AC(void *a1)
{
  *a1 = off_4735F0;
  uint64_t v1 = (void *)sub_F3008((uint64_t)a1);
  operator delete(v1);
}

BOOL sub_1752CC(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  AudioObjectID v2 = *(_DWORD *)(a1 + 80);
  Boolean outIsSettable = 0;
  OSStatus IsPropertySettable = AudioObjectIsPropertySettable(v2, a2, &outIsSettable);
  if (IsPropertySettable)
  {
    int v5 = (os_log_t *)sub_138E8(13);
    int v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v13 = "Stream_HAL_Common.cpp";
      __int16 v14 = 1024;
      int v15 = 106;
      _os_log_impl( &dword_0,  v6,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Unable to determine whether the property is settable.",  buf,  0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = IsPropertySettable;
  }

  if (outIsSettable >= 2u)
  {
    BOOL v8 = (os_log_t *)sub_138E8(13);
    BOOL v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v13 = "Stream_HAL_Common.cpp";
      __int16 v14 = 1024;
      int v15 = 107;
      _os_log_impl( &dword_0,  v9,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): The HAL returned a bad value",  buf,  0x12u);
    }

    char v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v10, "The HAL returned a bad value");
  }

  return outIsSettable != 0;
}

void sub_175480(_Unwind_Exception *a1)
{
}

uint64_t sub_17549C( os_unfair_lock_s *a1, AudioObjectPropertyAddress *inAddress, UInt32 a3, const void *a4, UInt32 inDataSize, void *inData)
{
  if (inAddress->mSelector == 1936092532 || inAddress->mSelector == 1885762592)
  {
    if ((*(unsigned int (**)(os_unfair_lock_s *, AudioObjectPropertyAddress *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                          + 32LL))( a1,  inAddress) != inDataSize)
    {
      uint64_t v28 = (os_log_t *)sub_138E8(13);
      uint64_t v29 = *v28;
      if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "Stream_HAL_Common.cpp";
        __int16 v43 = 1024;
        int v44 = 206;
        _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): Bad data size for property kAudioStreamPropertyPhy sical/VirtualFormat",  buf,  0x12u);
      }

      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_4865A0;
      exception[2] = 561211770;
    }

    uint64_t v10 = sub_138E8(22);
    uint64_t v11 = sub_138E8(35);
    char v12 = 0;
    uint64_t v13 = 0LL;
    *(void *)buf = 0x100000002LL;
    uint64_t v14 = *(void *)(v10 + 8);
    while (1)
    {
      uint64_t v15 = *(int *)&buf[4 * v13];
      char v16 = v12;
      if (((v14 & v15) != 0) != ((*(void *)(v11 + 8) & v15) != 0)) {
        break;
      }
      char v12 = 1;
      uint64_t v13 = 1LL;
      if ((v16 & 1) != 0) {
        goto LABEL_13;
      }
    }

    if ((v14 & v15) == 0) {
      uint64_t v10 = v11;
    }
LABEL_13:
    int v17 = *(os_log_s **)v10;
    if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v38 = *(void *)&inAddress->mSelector;
      AudioObjectPropertyElement mElement = inAddress->mElement;
      sub_613AC((uint64_t)v40, (unsigned int *)&v38);
      if (v41 >= 0) {
        __int16 v18 = v40;
      }
      else {
        __int16 v18 = (void **)v40[0];
      }
      sub_23FE8((uint64_t)v36, a1 + 2);
      int v19 = v37;
      __int16 v20 = (void **)v36[0];
      sub_2CC00(&__p, (uint64_t)inData);
      int v21 = v36;
      if (v19 < 0) {
        int v21 = v20;
      }
      if ((__p.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = "Stream_HAL_Common.cpp";
      __int16 v43 = 1024;
      int v44 = 207;
      __int16 v45 = 2080;
      unint64_t v46 = v18;
      __int16 v47 = 2080;
      uint64_t v48 = v21;
      __int16 v49 = 2080;
      uint64_t v50 = p_p;
      _os_log_impl(&dword_0, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s on stream %s: %s.", buf, 0x30u);
      if (v37 < 0) {
        operator delete(v36[0]);
      }
      if (v41 < 0) {
        operator delete(v40[0]);
      }
    }

    uint64_t result = (*(uint64_t (**)(os_unfair_lock_s *, void *))(*(void *)&a1->_os_unfair_lock_opaque + 128LL))( a1,  inData);
    int v23 = result;
    if ((_DWORD)result)
    {
      uint64_t v24 = (os_log_t *)sub_138E8(13);
      int v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "Stream_HAL_Common.cpp";
        __int16 v43 = 1024;
        int v44 = 209;
        _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: error setting stream format",  buf,  0x12u);
      }

      char v26 = __cxa_allocate_exception(0x10uLL);
      *(void *)char v26 = &off_4865A0;
      v26[2] = v23;
    }
  }

  else
  {
    uint64_t result = AudioObjectSetPropertyData(a1[20]._os_unfair_lock_opaque, inAddress, a3, a4, inDataSize, inData);
    if ((_DWORD)result)
    {
      int v31 = result;
      int v32 = (os_log_t *)sub_138E8(13);
      __int16 v33 = *v32;
      if (*v32)
      {
        if (os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "Stream_HAL_Common.cpp";
          __int16 v43 = 1024;
          int v44 = 216;
          _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (status) [error status is an error]: Unable to set property data.",  buf,  0x12u);
        }
      }

      uint64_t v34 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v34 = &off_4865A0;
      void v34[2] = v31;
    }
  }

  return result;
}

void sub_1758EC( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20, __int16 a21, char a22, char a23)
{
  if (v24 < 0) {
    operator delete(v23);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_175924@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0LL;
  a2->__r_.__value_.__l.__size_ = 0LL;
  a2->__r_.__value_.__l.__cap_ = 0LL;
  std::to_string(&v18, *(_DWORD *)(a1 + 80));
  BOOL v4 = std::string::insert(&v18, 0LL, "[ id: ", 6uLL);
  __int128 v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  int64_t cap = v4->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v5;
  v4->__r_.__value_.__l.__size_ = 0LL;
  v4->__r_.__value_.__l.__cap_ = 0LL;
  v4->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    int v6 = __p;
  }
  else {
    int v6 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v7 = HIBYTE(cap);
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v6, v7);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  snprintf(__str, 0x13uLL, "%p", (const void *)a1);
  sub_7D084(&v18, __str);
  BOOL v8 = std::string::insert(&v18, 0LL, "; addr: ", 8uLL);
  __int128 v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  int64_t cap = v8->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v9;
  v8->__r_.__value_.__l.__size_ = 0LL;
  v8->__r_.__value_.__l.__cap_ = 0LL;
  v8->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v11 = HIBYTE(cap);
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v10, v11);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  if (*(_BYTE *)(a1 + 84)) {
    char v12 = "out";
  }
  else {
    char v12 = "in";
  }
  sub_7D084(&v18, v12);
  uint64_t v13 = std::string::insert(&v18, 0LL, "; dir: ", 7uLL);
  __int128 v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  int64_t cap = v13->__r_.__value_.__l.__cap_;
  *(_OWORD *)std::string __p = v14;
  v13->__r_.__value_.__l.__size_ = 0LL;
  v13->__r_.__value_.__l.__cap_ = 0LL;
  v13->__r_.__value_.__r.__words[0] = 0LL;
  if (cap >= 0) {
    uint64_t v15 = __p;
  }
  else {
    uint64_t v15 = (void **)__p[0];
  }
  if (cap >= 0) {
    std::string::size_type v16 = HIBYTE(cap);
  }
  else {
    std::string::size_type v16 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v15, v16);
  if (SHIBYTE(cap) < 0) {
    operator delete(__p[0]);
  }
  return std::string::append(a2, " ]", 2uLL);
}

void sub_175B44( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20, char a21)
{
}

BOOL sub_175BAC( uint64_t a1, const AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  uint64_t v6 = AudioObjectAddPropertyListener(*(_DWORD *)(a1 + 80), a2, a3, a4);
  if ((_DWORD)v6)
  {
    std::string::size_type v7 = (os_log_t *)sub_138E8(22);
    BOOL v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v19, v6);
        int v9 = v20;
        uint64_t v10 = (void **)v19[0];
        int v11 = *(_DWORD *)(a1 + 80);
        sub_2CA1C(__p, a2->mSelector);
        char v12 = v19;
        if (v9 < 0) {
          char v12 = v10;
        }
        if (v18 >= 0) {
          uint64_t v13 = __p;
        }
        else {
          uint64_t v13 = (void **)__p[0];
        }
        AudioObjectPropertyScope mScope = a2->mScope;
        AudioObjectPropertyElement mElement = a2->mElement;
        *(_DWORD *)buf = 136316930;
        __int16 v22 = "Stream_HAL_Common.cpp";
        __int16 v23 = 1024;
        int v24 = 235;
        __int16 v25 = 1024;
        int v26 = v6;
        __int16 v27 = 2080;
        uint64_t v28 = v12;
        __int16 v29 = 1024;
        int v30 = v11;
        __int16 v31 = 2080;
        int v32 = v13;
        __int16 v33 = 1024;
        AudioObjectPropertyScope v34 = mScope;
        __int16 v35 = 1024;
        AudioObjectPropertyElement v36 = mElement;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d FAIL with status %d (%s): mStreamID %u; selector %s; scope %u; element %u",
          buf,
          0x3Eu);
        if (v18 < 0) {
          operator delete(__p[0]);
        }
        if (v20 < 0) {
          operator delete(v19[0]);
        }
      }
    }
  }

  return (_DWORD)v6 == 0;
}

void sub_175D38(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_175D58( uint64_t a1, const AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  return AudioObjectRemovePropertyListener(*(_DWORD *)(a1 + 80), a2, a3, a4) == 0;
}

void sub_175D78(os_unfair_lock_s *a1)
{
  int v2 = (os_log_t *)sub_138E8(22);
  unint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEBUG))
  {
    sub_23FE8((uint64_t)__p, a1 + 2);
    if (v6 >= 0) {
      BOOL v4 = __p;
    }
    else {
      BOOL v4 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315650;
    BOOL v8 = "Stream_HAL_Common.cpp";
    __int16 v9 = 1024;
    int v10 = 83;
    __int16 v11 = 2080;
    char v12 = v4;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d Created Stream: %s.", buf, 0x1Cu);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }

uint64_t sub_175E78(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 104LL))(a1, a2, 1936092513LL);
}

uint64_t sub_175E8C(uint64_t a1, void **a2, AudioObjectPropertySelector a3)
{
  if (*a2 != a2[1])
  {
    uint64_t v60 = (os_log_t *)sub_138E8(13);
    __int128 v61 = *v60;
    if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v72 = "Stream_HAL_Common.cpp";
      __int16 v73 = 1024;
      int v74 = 279;
      _os_log_impl( &dword_0,  v61,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): specified StreamFormatList is not empty",  buf,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "specified StreamFormatList is not empty");
  }

  AudioObjectID v6 = *(_DWORD *)(a1 + 80);
  if (a3 != 1885762657 && a3 != 1936092513)
  {
    uint64_t v63 = (os_log_t *)sub_138E8(13);
    __int128 v64 = *v63;
    if (*v63 && os_log_type_enabled(*v63, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v72 = "Stream_HAL_Common.cpp";
      __int16 v73 = 1024;
      int v74 = 280;
      _os_log_impl( &dword_0,  v64,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): specified inSelector is not valid",  buf,  0x12u);
    }

    uint64_t v65 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v65, "specified inSelector is not valid");
  }

  UInt32 outDataSize = 0;
  inAddress.mSelector = a3;
  *(void *)&inAddress.AudioObjectPropertyScope mScope = 1735159650LL;
  uint64_t PropertyDataSize = AudioObjectGetPropertyDataSize(v6, &inAddress, 0, 0LL, &outDataSize);
  uint64_t PropertyData = PropertyDataSize;
  if ((_DWORD)PropertyDataSize)
  {
    __int16 v9 = (os_log_t *)sub_138E8(22);
    int v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(&v68, PropertyData);
      if ((v68.__r_.__value_.__s.__size_ & 0x80u) == 0) {
        __int16 v11 = &v68;
      }
      else {
        __int16 v11 = (std::string *)v68.__r_.__value_.__r.__words[0];
      }
      int v12 = *(_DWORD *)(a1 + 80);
      *(_DWORD *)buf = 136316162;
      uint64_t v72 = "Stream_HAL_Common.cpp";
      __int16 v73 = 1024;
      int v74 = 290;
      __int16 v75 = 1024;
      *(_DWORD *)uint64_t v76 = PropertyData;
      *(_WORD *)&v76[4] = 2080;
      *(void *)&v76[6] = v11;
      __int16 v77 = 1024;
      int v78 = v12;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error %d ('%s') determining the number of stream formats for stream %u",  buf,  0x28u);
    }
  }

  else if (outDataSize >= 0x38)
  {
    unint64_t v67 = &v66;
    UInt32 v15 = outDataSize / 0x38;
    __chkstk_darwin(PropertyDataSize);
    int v17 = (char *)&v66 - v16;
    UInt32 outDataSize = 56 * v15;
    uint64_t PropertyData = AudioObjectGetPropertyData( *(_DWORD *)(a1 + 80),  &inAddress,  0,  0LL,  &outDataSize,  (char *)&v66 - v16);
    if ((_DWORD)PropertyData)
    {
      char v18 = (os_log_t *)sub_138E8(22);
      int v19 = *v18;
      if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(&v68, PropertyData);
        char v20 = (v68.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &v68 : (std::string *)v68.__r_.__value_.__r.__words[0];
        int v21 = *(_DWORD *)(a1 + 80);
        *(_DWORD *)buf = 136316162;
        uint64_t v72 = "Stream_HAL_Common.cpp";
        __int16 v73 = 1024;
        int v74 = 303;
        __int16 v75 = 1024;
        *(_DWORD *)uint64_t v76 = PropertyData;
        *(_WORD *)&v76[4] = 2080;
        *(void *)&v76[6] = v20;
        __int16 v77 = 1024;
        int v78 = v21;
        _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error %d ('%s') reading the stream formats for stream %u",  buf,  0x28u);
      }
    }

    else
    {
      UInt32 v22 = outDataSize / 0x38;
      if (outDataSize / 0x38 < v15)
      {
        __int16 v23 = (os_log_t *)sub_138E8(22);
        int v24 = *v23;
        if (*v23)
        {
          if (os_log_type_enabled(*v23, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315906;
            uint64_t v72 = "Stream_HAL_Common.cpp";
            __int16 v73 = 1024;
            int v74 = 308;
            __int16 v75 = 1024;
            *(_DWORD *)uint64_t v76 = v22;
            *(_WORD *)&v76[4] = 1024;
            *(_DWORD *)&v76[6] = v15;
            _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d The HAL returned fewer stream formats (%u) than were expected (%u)",  buf,  0x1Eu);
          }
        }
      }

      if (v22 > v15)
      {
        __int16 v25 = (os_log_t *)sub_138E8(22);
        int v26 = *v25;
        if (*v25)
        {
          if (os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315906;
            uint64_t v72 = "Stream_HAL_Common.cpp";
            __int16 v73 = 1024;
            int v74 = 309;
            __int16 v75 = 1024;
            *(_DWORD *)uint64_t v76 = v22;
            *(_WORD *)&v76[4] = 1024;
            *(_DWORD *)&v76[6] = v15;
            _os_log_impl( &dword_0,  v26,  OS_LOG_TYPE_ERROR,  "%25s:%-5d The HAL returned more stream formats (%u) than were expected (%u)",  buf,  0x1Eu);
          }
        }
      }

      uint64_t v27 = sub_138E8(22);
      if ((*(_BYTE *)(v27 + 8) & 1) != 0)
      {
        __int16 v29 = *(os_log_s **)v27;
        if (*(void *)v27)
        {
          if (os_log_type_enabled(*(os_log_t *)v27, OS_LOG_TYPE_DEBUG))
          {
            int v30 = "virtual";
            int v31 = *(_DWORD *)(a1 + 80);
            *(_DWORD *)buf = 136315906;
            uint64_t v72 = "Stream_HAL_Common.cpp";
            __int16 v73 = 1024;
            int v74 = 312;
            if (a3 == 1885762657) {
              int v30 = "physical";
            }
            __int16 v75 = 2080;
            *(void *)uint64_t v76 = v30;
            *(_WORD *)&v76[8] = 1024;
            *(_DWORD *)&v76[10] = v31;
            _os_log_impl( &dword_0,  v29,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Querying HAL for %s formats on stream ID %u:",  buf,  0x22u);
          }
        }
      }

      if (v22 >= v15) {
        uint64_t v32 = v15;
      }
      else {
        uint64_t v32 = v22;
      }
      if ((_DWORD)v32)
      {
        uint64_t v33 = 0LL;
        *(void *)&__int128 v28 = 136315906LL;
        __int128 v66 = v28;
        do
        {
          AudioObjectPropertyScope v34 = &v17[56 * v33];
          __int16 v35 = (char *)a2[1];
          AudioObjectPropertyElement v36 = (char *)a2[2];
          if (v35 >= v36)
          {
            uint64_t v41 = 0x6DB6DB6DB6DB6DB7LL * ((v35 - (_BYTE *)*a2) >> 3);
            unint64_t v42 = v41 + 1;
            unint64_t v43 = 0x6DB6DB6DB6DB6DB7LL * ((v36 - (_BYTE *)*a2) >> 3);
            if (2 * v43 > v42) {
              unint64_t v42 = 2 * v43;
            }
            if (v43 >= 0x249249249249249LL) {
              unint64_t v44 = 0x492492492492492LL;
            }
            else {
              unint64_t v44 = v42;
            }
            if (v44) {
              unint64_t v44 = (unint64_t)sub_177AE0(v44);
            }
            else {
              uint64_t v45 = 0LL;
            }
            unint64_t v46 = v44 + 56 * v41;
            __int128 v47 = *(_OWORD *)v34;
            __int128 v48 = *((_OWORD *)v34 + 1);
            __int128 v49 = *((_OWORD *)v34 + 2);
            *(void *)(v46 + sub_51FA0(v10 + 48) = *((void *)v34 + 6);
            *(_OWORD *)(v46 + 16) = v48;
            *(_OWORD *)(v46 + sub_7A768(v9 - 32) = v49;
            *(_OWORD *)unint64_t v46 = v47;
            uint64_t v51 = (char *)*a2;
            uint64_t v50 = (char *)a2[1];
            uint64_t v52 = (char *)v46;
            if (v50 != *a2)
            {
              do
              {
                __int128 v53 = *(_OWORD *)(v50 - 56);
                __int128 v54 = *(_OWORD *)(v50 - 40);
                __int128 v55 = *(_OWORD *)(v50 - 24);
                *((void *)v52 - 1) = *((void *)v50 - 1);
                *(_OWORD *)(v52 - 24) = v55;
                *(_OWORD *)(v52 - 40) = v54;
                *(_OWORD *)(v52 - 56) = v53;
                v52 -= 56;
                v50 -= 56;
              }

              while (v50 != v51);
              uint64_t v50 = (char *)*a2;
            }

            uint64_t v40 = (void *)(v46 + 56);
            *a2 = v52;
            a2[1] = (void *)(v46 + 56);
            a2[2] = (void *)(v44 + 56 * v45);
            if (v50) {
              operator delete(v50);
            }
          }

          else
          {
            __int128 v37 = *(_OWORD *)v34;
            __int128 v38 = *((_OWORD *)v34 + 1);
            __int128 v39 = *((_OWORD *)v34 + 2);
            *((void *)v35 + 6) = *((void *)v34 + 6);
            *((_OWORD *)v35 + 1) = v38;
            *((_OWORD *)v35 + 2) = v39;
            *(_OWORD *)__int16 v35 = v37;
            uint64_t v40 = v35 + 56;
          }

          a2[1] = v40;
          uint64_t v56 = sub_138E8(22);
          if ((*(_BYTE *)(v56 + 8) & 1) != 0)
          {
            uint64_t v57 = *(os_log_s **)v56;
            if (*(void *)v56)
            {
              if (os_log_type_enabled(*(os_log_t *)v56, OS_LOG_TYPE_DEBUG))
              {
                sub_1548E8(&v68, (uint64_t)&v17[56 * v33]);
                uint64_t v58 = &v68;
                if ((v68.__r_.__value_.__s.__size_ & 0x80u) != 0) {
                  uint64_t v58 = (std::string *)v68.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)buf = v66;
                uint64_t v72 = "Stream_HAL_Common.cpp";
                __int16 v73 = 1024;
                int v74 = 317;
                __int16 v75 = 1024;
                *(_DWORD *)uint64_t v76 = v33;
                *(_WORD *)&v76[4] = 2080;
                *(void *)&v76[6] = v58;
                _os_log_impl(&dword_0, v57, OS_LOG_TYPE_DEBUG, "%25s:%-5d %u: %s.", buf, 0x22u);
              }
            }
          }

          ++v33;
        }

        while (v33 != v32);
      }
    }
  }

  else
  {
    uint64_t v13 = (os_log_t *)sub_138E8(22);
    uint64_t PropertyData = 2003329396LL;
    __int128 v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v72 = "Stream_HAL_Common.cpp";
      __int16 v73 = 1024;
      int v74 = 322;
      _os_log_impl(&dword_0, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d Stream does not have any virtual formats", buf, 0x12u);
    }
  }

  return PropertyData;
}

void sub_176708(_Unwind_Exception *a1)
{
}

uint64_t sub_176728(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120LL))(a1, a2, 1936092532LL);
}

uint64_t sub_17673C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 136LL))(a1, a2, 1936092532LL);
}

uint64_t sub_176750(uint64_t a1, const void *a2, AudioObjectPropertySelector a3)
{
  if (a3 != 1885762592 && a3 != 1936092532)
  {
    int v24 = (os_log_t *)sub_138E8(13);
    __int16 v25 = *v24;
    if (*v24)
    {
      if (os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "Stream_HAL_Common.cpp";
        __int16 v30 = 1024;
        int v31 = 365;
        _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): specified inSelector is not valid",  buf,  0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "specified inSelector is not valid");
  }

  uint64_t v7 = sub_138E8(22);
  uint64_t v8 = sub_138E8(35);
  char v9 = 0;
  uint64_t v10 = 0LL;
  *(void *)buf = 0x100000002LL;
  uint64_t v11 = *(void *)(v7 + 8);
  while (1)
  {
    uint64_t v12 = *(int *)&buf[4 * v10];
    char v13 = v9;
    if (((v11 & v12) != 0) != ((*(void *)(v8 + 8) & v12) != 0)) {
      break;
    }
    char v9 = 1;
    uint64_t v10 = 1LL;
    if ((v13 & 1) != 0) {
      goto LABEL_12;
    }
  }

  if ((v11 & v12) == 0) {
    uint64_t v7 = v8;
  }
LABEL_12:
  __int128 v14 = *(os_log_s **)v7;
  if (v14 && os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    UInt32 v15 = a3 == 1885762592 ? "physical" : "virtual";
    sub_2CC00(&__p, (uint64_t)a2);
    uint64_t v16 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
    int v17 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)buf = 136316162;
    *(void *)&uint8_t buf[4] = "Stream_HAL_Common.cpp";
    __int16 v30 = 1024;
    int v31 = 367;
    __int16 v32 = 2080;
    *(void *)uint64_t v33 = v15;
    *(_WORD *)&v33[8] = 2080;
    *(void *)&v33[10] = v16;
    *(_WORD *)&v33[18] = 1024;
    int v34 = v17;
    _os_log_impl(&dword_0, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting %s format to %s on stream %u.", buf, 0x2Cu);
  }

  inAddress.mSelector = a3;
  *(void *)&inAddress.AudioObjectPropertyScope mScope = 1735159650LL;
  uint64_t v18 = AudioObjectSetPropertyData(*(_DWORD *)(a1 + 80), &inAddress, 0, 0LL, 0x28u, a2);
  if ((_DWORD)v18)
  {
    int v19 = (os_log_t *)sub_138E8(22);
    char v20 = *v19;
    if (*v19)
    {
      if (os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(&__p, v18);
        int v21 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
        int v22 = *(_DWORD *)(a1 + 80);
        *(_DWORD *)buf = 136316162;
        *(void *)&uint8_t buf[4] = "Stream_HAL_Common.cpp";
        __int16 v30 = 1024;
        int v31 = 371;
        __int16 v32 = 1024;
        *(_DWORD *)uint64_t v33 = v18;
        *(_WORD *)&v33[4] = 2080;
        *(void *)&v33[6] = v21;
        *(_WORD *)&v33[14] = 1024;
        *(_DWORD *)&v33[16] = v22;
        _os_log_impl( &dword_0,  v20,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error %d ('%s') setting the current stream format for stream %u",  buf,  0x28u);
      }
    }
  }

  return v18;
}

void sub_176AA8(_Unwind_Exception *a1)
{
}

uint64_t sub_176AC4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 152LL))(a1, a2, 1936092532LL);
}

uint64_t sub_176AD8(uint64_t a1, uint64_t a2, AudioObjectPropertySelector a3)
{
  if (a3 != 1885762592 && a3 != 1936092532)
  {
    uint64_t v56 = (os_log_t *)sub_138E8(13);
    uint64_t v57 = *v56;
    if (*v56 && os_log_type_enabled(*v56, OS_LOG_TYPE_ERROR))
    {
      buf.mSelector = 136315394;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Stream_HAL_Common.cpp";
      __int16 v96 = 1024;
      int v97 = 389;
      _os_log_impl( &dword_0,  v57,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): specified inSelector is not valid",  (uint8_t *)&buf,  0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "specified inSelector is not valid");
  }

  uint64_t v6 = sub_138E8(22);
  uint64_t v7 = sub_138E8(35);
  char v8 = 0;
  uint64_t v9 = 0LL;
  *(void *)&buf.mSelector = 0x100000002LL;
  uint64_t v10 = *(void *)(v6 + 8);
  while (1)
  {
    uint64_t v11 = *((int *)&buf.mSelector + v9);
    char v12 = v8;
    if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
      break;
    }
    char v8 = 1;
    uint64_t v9 = 1LL;
    if ((v12 & 1) != 0) {
      goto LABEL_9;
    }
  }

  if ((v10 & v11) == 0) {
    uint64_t v6 = v7;
  }
LABEL_9:
  char v13 = *(os_log_s **)v6;
  if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v14 = a3 == 1885762592 ? "physical" : "virtual";
    sub_2CC00((std::string *)&v106, a2);
    UInt32 v15 = v106.__m_.__opaque[15] >= 0 ? &v106 : (std::mutex *)v106.__m_.__sig;
    int v16 = *(_DWORD *)(a1 + 80);
    buf.mSelector = 136316162;
    *(void *)&buf.AudioObjectPropertyScope mScope = "Stream_HAL_Common.cpp";
    __int16 v96 = 1024;
    int v97 = 391;
    __int16 v98 = 2080;
    *(void *)uint64_t v99 = v14;
    *(_WORD *)&v99[8] = 2080;
    *(void *)&v99[10] = v15;
    *(_WORD *)&v99[18] = 1024;
    *(_DWORD *)&v99[20] = v16;
    _os_log_impl( &dword_0,  v13,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d Synchronously setting %s format to %s on stream %u.",  (uint8_t *)&buf,  0x2Cu);
    if (v106.__m_.__opaque[15] < 0) {
      operator delete((void *)v106.__m_.__sig);
    }
  }

  if (a3 != 1936092532 && a3 != 1885762592) {
    return 2003332927LL;
  }
  AudioObjectID v17 = *(_DWORD *)(a1 + 80);
  inAddress.mSelector = a3;
  *(void *)&inAddress.AudioObjectPropertyScope mScope = 1735159650LL;
  uint64_t v18 = sub_138E8(13);
  if ((*(_BYTE *)(v18 + 8) & 1) != 0)
  {
    int v19 = *(os_log_s **)v18;
    if (*(void *)v18)
    {
      if (os_log_type_enabled(*(os_log_t *)v18, OS_LOG_TYPE_DEBUG))
      {
        *(AudioObjectPropertyAddress *)&__int128 v83 = inAddress;
        sub_613AC((uint64_t)&v106, (unsigned int *)&v83);
        char v20 = v106.__m_.__opaque[15] >= 0 ? &v106 : (std::mutex *)v106.__m_.__sig;
        buf.mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v96 = 1024;
        int v97 = 166;
        __int16 v98 = 2080;
        *(void *)uint64_t v99 = v20;
        *(_WORD *)&v99[8] = 1024;
        *(_DWORD *)&v99[10] = v17;
        _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Attempting to synchronize the property %s on id %u.",  (uint8_t *)&buf,  0x22u);
        if (v106.__m_.__opaque[15] < 0) {
          operator delete((void *)v106.__m_.__sig);
        }
      }
    }
  }

  AudioObjectPropertyAddress v92 = inAddress;
  AudioObjectID v91 = v17;
  int v93 = 0;
  uint64_t v94 = 0LL;
  sub_1777FC((uint64_t)&v106, (uint64_t)&v91);
  if (!*(_DWORD *)&v106.__m_.__opaque[32])
  {
    v89[0] = *(_OWORD *)&v106.__m_.__sig;
    v89[1] = *(_OWORD *)&v106.__m_.__opaque[8];
    uint64_t v90 = *(void *)&v106.__m_.__opaque[24];
    __int128 v21 = *(_OWORD *)(a2 + 16);
    v87[0] = *(_OWORD *)a2;
    v87[1] = v21;
    uint64_t v88 = *(void *)(a2 + 32);
    if (sub_177744((uint64_t)v89, (uint64_t)v87))
    {
      uint64_t v22 = sub_138E8(13);
      if ((*(_BYTE *)(v22 + 8) & 1) == 0) {
        return 0LL;
      }
      __int16 v23 = *(os_log_s **)v22;
      if (!*(void *)v22 || !os_log_type_enabled(*(os_log_t *)v22, OS_LOG_TYPE_DEBUG)) {
        return 0LL;
      }
      buf.mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
      __int16 v96 = 1024;
      int v97 = 191;
      __int16 v98 = 1024;
      *(_DWORD *)uint64_t v99 = v17;
LABEL_62:
      _os_log_impl( &dword_0,  v23,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.",  (uint8_t *)&buf,  0x18u);
      return 0LL;
    }
  }

  uint64_t v24 = sub_138E8(13);
  if ((*(_BYTE *)(v24 + 8) & 1) != 0)
  {
    __int16 v25 = *(os_log_s **)v24;
    if (*(void *)v24)
    {
      if (os_log_type_enabled(*(os_log_t *)v24, OS_LOG_TYPE_DEBUG))
      {
        v105.__cv_.__uint64_t sig = *(void *)&inAddress.mSelector;
        *(_DWORD *)v105.__cv_.__opaque = inAddress.mElement;
        sub_613AC((uint64_t)&v83, (unsigned int *)&v105);
        int v26 = (SBYTE7(v84) & 0x80u) == 0 ? &v83 : (__int128 *)v83;
        buf.mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v96 = 1024;
        int v97 = 199;
        __int16 v98 = 2080;
        *(void *)uint64_t v99 = v26;
        *(_WORD *)&v99[8] = 1024;
        *(_DWORD *)&v99[10] = v17;
        _os_log_impl( &dword_0,  v25,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d About to call AudioObjectSetPropertyData to set property: %s on id %u.",  (uint8_t *)&buf,  0x22u);
        if (SBYTE7(v84) < 0) {
          operator delete((void *)v83);
        }
      }
    }
  }

  AudioObjectPropertyAddress buf = inAddress;
  uint64_t v27 = AudioObjectSetPropertyData(v17, &buf, 0, 0LL, 0x28u, (const void *)a2);
  if (!(_DWORD)v27)
  {
    sub_1777FC((uint64_t)&v83, (uint64_t)&v91);
    if (!v86)
    {
      v81[0] = v83;
      v81[1] = v84;
      uint64_t v82 = v85;
      __int128 v34 = *(_OWORD *)(a2 + 16);
      v79[0] = *(_OWORD *)a2;
      v79[1] = v34;
      uint64_t v80 = *(void *)(a2 + 32);
      if (sub_177744((uint64_t)v81, (uint64_t)v79))
      {
        uint64_t v35 = sub_138E8(13);
        if ((*(_BYTE *)(v35 + 8) & 1) == 0) {
          return 0LL;
        }
        __int16 v23 = *(os_log_s **)v35;
        if (!*(void *)v35 || !os_log_type_enabled(*(os_log_t *)v35, OS_LOG_TYPE_DEBUG)) {
          return 0LL;
        }
        buf.mSelector = 136315650;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v96 = 1024;
        int v97 = 219;
        __int16 v98 = 1024;
        *(_DWORD *)uint64_t v99 = v17;
        goto LABEL_62;
      }
    }

    memset(v106.__m_.__opaque, 0, sizeof(v106.__m_.__opaque));
    v105.__cv_.__uint64_t sig = 1018212795LL;
    memset(v105.__cv_.__opaque, 0, sizeof(v105.__cv_.__opaque));
    v106.__m_.__uint64_t sig = 850045863LL;
    char v78 = 0;
    AudioObjectID v59 = v17;
    sub_7D684(inClientData, v17, &inAddress, (uint64_t)&v105, (uint64_t)&v106, (uint64_t)&v78);
    for (uint64_t i = 2000LL; ; i += (std::chrono::system_clock::now().__d_.__rep_ - v38.__d_.__rep_) / -1000)
    {
      sub_1777FC((uint64_t)&v73, (uint64_t)&v91);
      if (v76) {
        break;
      }
      v71[0] = v73;
      v71[1] = v74;
      uint64_t v72 = v75;
      __int128 v37 = *(_OWORD *)(a2 + 16);
      v69[0] = *(_OWORD *)a2;
      v69[1] = v37;
      uint64_t v70 = *(void *)(a2 + 32);
      if ((sub_177744((uint64_t)v71, (uint64_t)v69) & 1) != 0)
      {
        uint64_t v47 = sub_138E8(13);
        if ((*(_BYTE *)(v47 + 8) & 1) != 0)
        {
          __int128 v48 = *(os_log_s **)v47;
          if (*(void *)v47)
          {
            if (os_log_type_enabled(*(os_log_t *)v47, OS_LOG_TYPE_DEBUG))
            {
              __lk.__m_ = *(std::unique_lock<std::mutex>::mutex_type **)&inAddress.mSelector;
              *(_DWORD *)&__lk.__owns_ = inAddress.mElement;
              sub_613AC((uint64_t)&v73, (unsigned int *)&__lk);
              __int128 v49 = (SBYTE7(v74) & 0x80u) == 0 ? &v73 : (std::unique_lock<std::mutex> *)v73.__m_;
              buf.mSelector = 136315906;
              *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
              __int16 v96 = 1024;
              int v97 = 288;
              __int16 v98 = 2080;
              *(void *)uint64_t v99 = v49;
              *(_WORD *)&v99[8] = 1024;
              *(_DWORD *)&v99[10] = v59;
              _os_log_impl( &dword_0,  v48,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Successfully synchronized the property %s on id %u.",  (uint8_t *)&buf,  0x22u);
              if (SBYTE7(v74) < 0) {
                operator delete(v73.__m_);
              }
            }
          }
        }

        uint64_t v27 = 0LL;
        goto LABEL_111;
      }

      if (i <= 0)
      {
        uint64_t v50 = (os_log_t *)sub_138E8(13);
        uint64_t v51 = *v50;
        if (*v50 && os_log_type_enabled(*v50, OS_LOG_TYPE_ERROR))
        {
          AudioObjectPropertyAddress v66 = inAddress;
          uint64_t v52 = __p;
          sub_613AC((uint64_t)__p, &v66.mSelector);
          if (v68 < 0) {
            uint64_t v52 = (void **)__p[0];
          }
          __luint64_t k = v73;
          __int128 v64 = v74;
          uint64_t v65 = v75;
          __int128 v53 = *(_OWORD *)(a2 + 16);
          v61[0] = *(_OWORD *)a2;
          v61[1] = v53;
          uint64_t v62 = *(void *)(a2 + 32);
          int v54 = sub_177744((uint64_t)&__lk, (uint64_t)v61);
          buf.mSelector = 136316930;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          __int16 v96 = 1024;
          int v97 = 248;
          __int16 v98 = 2080;
          *(void *)uint64_t v99 = "set";
          *(_WORD *)&v99[8] = 2080;
          *(void *)&v99[10] = v52;
          *(_WORD *)&v99[18] = 2080;
          *(void *)&v99[20] = "set";
          *(_WORD *)&v99[28] = 1024;
          int v100 = v54;
          __int16 v101 = 1024;
          int v102 = 0;
          __int16 v103 = 1024;
          AudioObjectID v104 = v59;
          _os_log_impl( &dword_0,  v51,  OS_LOG_TYPE_ERROR,  "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.",  (uint8_t *)&buf,  0x42u);
          if (v68 < 0) {
            operator delete(__p[0]);
          }
        }

        uint64_t v27 = 2003329396LL;
        goto LABEL_111;
      }

      v38.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      uint64_t v39 = sub_138E8(13);
      if ((*(_BYTE *)(v39 + 8) & 1) != 0)
      {
        uint64_t v40 = *(os_log_s **)v39;
        if (*(void *)v39)
        {
          if (os_log_type_enabled(*(os_log_t *)v39, OS_LOG_TYPE_DEBUG))
          {
            buf.mSelector = 136315906;
            *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
            __int16 v96 = 1024;
            int v97 = 257;
            __int16 v98 = 2080;
            *(void *)uint64_t v99 = "with timeout";
            *(_WORD *)&v99[8] = 1024;
            *(_DWORD *)&v99[10] = v59;
            _os_log_impl( &dword_0,  v40,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.",  (uint8_t *)&buf,  0x22u);
          }
        }
      }

      sub_6DD4();
      *(void *)&buf.mSelector = &qword_48F828;
      LOBYTE(buf.mElement) = 0;
      LOBYTE(buf.mElement) = sub_1A30E4();
      __lk.__m_ = &v106;
      __lk.__owns_ = 1;
      std::mutex::lock(&v106);
      v41.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (!v78)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v42 = v41.__d_.__rep_ + 1000000 * i;
        while (1)
        {
          if (v42 <= std::chrono::steady_clock::now().__d_.__rep_) {
            goto LABEL_73;
          }
          v43.__d_.__rep_ = v42 - std::chrono::steady_clock::now().__d_.__rep_;
          if (v43.__d_.__rep_ >= 1) {
            break;
          }
LABEL_91:
          if (std::chrono::steady_clock::now().__d_.__rep_ >= v42 || v78) {
            goto LABEL_73;
          }
        }

        std::chrono::steady_clock::now();
        v44.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v44.__d_.__rep_)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v45 = 0LL;
          goto LABEL_87;
        }

        if (v44.__d_.__rep_ < 1)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v45 = 0x8000000000000000LL;
        }

        else
        {
          if ((unint64_t)v44.__d_.__rep_ > 0x20C49BA5E353F7LL)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v45 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_87;
          }

void sub_1776A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, char a47)
{
}

void sub_177734(void *a1@<X8>)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0LL;
}

uint64_t sub_177744(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 8);
  if (v3)
  {
    int v4 = *(_DWORD *)(a2 + 8);
    if (v4 && v3 != v4) {
      return 0LL;
    }
  }

  int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    int v7 = *(_DWORD *)(a2 + 16);
    if (v7)
    {
      if (v6 != v7) {
        return 0LL;
      }
    }
  }

  int v8 = *(_DWORD *)(a1 + 20);
  if (v8)
  {
    int v9 = *(_DWORD *)(a2 + 20);
    if (v9)
    {
      if (v8 != v9) {
        return 0LL;
      }
    }
  }

  int v10 = *(_DWORD *)(a1 + 24);
  if (v10)
  {
    int v11 = *(_DWORD *)(a2 + 24);
    if (v11)
    {
      if (v10 != v11) {
        return 0LL;
      }
    }
  }

  int v12 = *(_DWORD *)(a1 + 28);
  if (v12)
  {
    int v13 = *(_DWORD *)(a2 + 28);
    if (v13)
    {
      if (v12 != v13) {
        return 0LL;
      }
    }
  }

  int v14 = *(_DWORD *)(a1 + 32);
  if (v14 && (int v15 = *(_DWORD *)(a2 + 32)) != 0 && v14 != v15) {
    return 0LL;
  }
  else {
    return sub_2854C(a1, a2);
  }
}

__n128 sub_1777FC(uint64_t a1, uint64_t a2)
{
  int v4 = (uint64_t *)(a2 + 4);
  *(void *)AudioObjectPropertyAddress buf = *(void *)(a2 + 4);
  UInt32 v5 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)&buf[8] = *(_DWORD *)(a2 + 12);
  sub_177A00((uint64_t)&v23, (AudioObjectID *)a2, (AudioObjectPropertyAddress *)buf, v5, *(const void **)(a2 + 24));
  uint64_t v6 = v23;
  if (v23)
  {
    int v7 = (os_log_t *)sub_138E8(13);
    int v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2CA1C(v21, v6);
        int v9 = v22;
        int v10 = (void **)v21[0];
        uint64_t v17 = *v4;
        int v18 = *((_DWORD *)v4 + 2);
        sub_613AC((uint64_t)__p, (unsigned int *)&v17);
        int v11 = v21;
        if (v9 < 0) {
          int v11 = v10;
        }
        if (v20 >= 0) {
          int v12 = __p;
        }
        else {
          int v12 = (void **)__p[0];
        }
        AudioObjectID v13 = *(_DWORD *)a2;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
        *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 176;
        *(_WORD *)&_BYTE buf[18] = 1024;
        *(_DWORD *)&buf[20] = v6;
        *(_WORD *)&_BYTE buf[24] = 2080;
        *(void *)&buf[26] = v11;
        *(_WORD *)&buf[34] = 2080;
        *(void *)&_BYTE buf[36] = v12;
        __int16 v26 = 1024;
        AudioObjectID v27 = v13;
        _os_log_impl( &dword_0,  v8,  OS_LOG_TYPE_ERROR,  "%25s:%-5d error %d (%s) reading property data for property %s on id %u.",  buf,  0x32u);
        if (v20 < 0) {
          operator delete(__p[0]);
        }
        if (v22 < 0) {
          operator delete(v21[0]);
        }
      }
    }
  }

  int v14 = v24;
  memset(buf, 0, 40);
  if (!v24[40]) {
    int v14 = buf;
  }
  __n128 result = *(__n128 *)v14;
  __int128 v16 = *((_OWORD *)v14 + 1);
  *(_OWORD *)a1 = *(_OWORD *)v14;
  *(_OWORD *)(a1 + 16) = v16;
  *(void *)(a1 + sub_7A768(v9 - 32) = *((void *)v14 + 4);
  *(_DWORD *)(a1 + 40) = v6;
  return result;
}

void sub_1779E0(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_177A00( uint64_t a1, AudioObjectID *a2, AudioObjectPropertyAddress *inAddress, UInt32 a4, const void *a5)
{
  uint64_t result = AudioObjectHasProperty(*a2, inAddress);
  if ((_DWORD)result)
  {
    *(_DWORD *)a1 = 2003329396;
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + sub_51FA0(v10 + 48) = 0;
    uint64_t result = sub_37408(*a2, inAddress, a4, a5);
    UInt32 ioDataSize = result;
    if ((_DWORD)result)
    {
      uint64_t result = AudioObjectGetPropertyData(*a2, inAddress, a4, a5, &ioDataSize, v12);
      *(_DWORD *)a1 = result;
      if (!(_DWORD)result)
      {
        __int128 v11 = v12[1];
        *(_OWORD *)(a1 + 8) = v12[0];
        *(_OWORD *)(a1 + 24) = v11;
        *(void *)(a1 + 40) = v13;
        *(_BYTE *)(a1 + sub_51FA0(v10 + 48) = 1;
      }
    }
  }

  else
  {
    *(_DWORD *)a1 = 2003332927;
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + sub_51FA0(v10 + 48) = 0;
  }

  return result;
}

void *sub_177AE0(unint64_t a1)
{
  if (a1 >= 0x492492492492493LL) {
    sub_7A8C4();
  }
  return operator new(56 * a1);
}

uint64_t sub_177B28(uint64_t a1, AudioObjectID inObjectID)
{
  *(void *)(a1 + 72) = 0LL;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(void *)a1 = off_4735F0;
  *(_DWORD *)(a1 + 80) = inObjectID;
  *(void *)&inAddress.mSelector = 0x676C6F6273646972LL;
  inAddress.AudioObjectPropertyElement mElement = 0;
  UInt32 ioDataSize = 4;
  unsigned int outData = 2;
  uint64_t PropertyData = AudioObjectGetPropertyData(inObjectID, &inAddress, 0, 0LL, &ioDataSize, &outData);
  if ((_DWORD)PropertyData)
  {
    int v4 = (os_log_t *)sub_138E8(22);
    UInt32 v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      sub_2CA1C(__p, PropertyData);
      if (v12 >= 0) {
        uint64_t v6 = __p;
      }
      else {
        uint64_t v6 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      uint64_t v17 = "Stream_HAL_Common.cpp";
      __int16 v18 = 1024;
      int v19 = 55;
      __int16 v20 = 1024;
      int v21 = PropertyData;
      __int16 v22 = 2080;
      unsigned int v23 = v6;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Error %d ('%s') determining stream direction",  buf,  0x22u);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }

void sub_177D40(_Unwind_Exception *a1)
{
}

uint64_t sub_177D54(uint64_t result)
{
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + sub_7A768(v9 - 32) = 0u;
  *(_OWORD *)uint64_t result = 0u;
  strcpy((char *)(result + 48), "tlfd");
  *(_BYTE *)(result + 56) = 0;
  *(_BYTE *)(result + sub_51FA0(v10 + 128) = 0;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_OWORD *)(result + 176) = 0u;
  *(_OWORD *)(result + 192) = 0u;
  *(_OWORD *)(result + 208) = 0u;
  *(_OWORD *)(result + 224) = 0u;
  *(_OWORD *)(result + sub_67FE8(v33 + 240) = 0u;
  *(void *)(result + 256) = 0LL;
  strcpy((char *)(result + 264), "tlfd");
  *(_BYTE *)(result + 272) = 0;
  *(_BYTE *)(result + 344) = 0;
  *(void *)(result + 472) = 0LL;
  *(_OWORD *)(result + 440) = 0u;
  *(_OWORD *)(result + 456) = 0u;
  *(_OWORD *)(result + 408) = 0u;
  *(_OWORD *)(result + 424) = 0u;
  *(_OWORD *)(result + 376) = 0u;
  *(_OWORD *)(result + 392) = 0u;
  *(_OWORD *)(result + 360) = 0u;
  strcpy((char *)(result + 480), "tlfd");
  *(_BYTE *)(result + 4sub_7BFE0(v23 - 88) = 0;
  *(_BYTE *)(result + 560) = 0;
  *(_OWORD *)(result + 576) = 0u;
  *(_OWORD *)(result + 592) = 0u;
  *(_OWORD *)(result + 608) = 0u;
  *(_OWORD *)(result + 624) = 0u;
  *(_OWORD *)(result + 640) = 0u;
  *(_OWORD *)(result + 656) = 0u;
  *(_OWORD *)(result + 672) = 0u;
  *(void *)(result + 6sub_7BFE0(v23 - 88) = 0LL;
  strcpy((char *)(result + 696), "tlfd");
  *(_BYTE *)(result + 704) = 0;
  *(_BYTE *)(result + 776) = 0;
  *(_OWORD *)(result + 792) = 0u;
  *(_OWORD *)(result + 808) = 0u;
  *(_OWORD *)(result + 824) = 0u;
  *(_OWORD *)(result + 840) = 0u;
  *(_OWORD *)(result + 856) = 0u;
  *(_OWORD *)(result + 872) = 0u;
  *(_OWORD *)(result + 8sub_7BFE0(v23 - 88) = 0u;
  *(void *)(result + 904) = 0LL;
  strcpy((char *)(result + 912), "tlfd");
  *(_BYTE *)(result + 920) = 0;
  *(_BYTE *)(result + 992) = 0;
  *(_OWORD *)(result + 1008) = 0u;
  *(_OWORD *)(result + 1024) = 0u;
  *(_OWORD *)(result + 1040) = 0u;
  *(_OWORD *)(result + 1056) = 0u;
  *(_OWORD *)(result + 1072) = 0u;
  *(_OWORD *)(result + 10sub_7BFE0(v23 - 88) = 0u;
  *(_OWORD *)(result + 1104) = 0u;
  *(void *)(result + 1120) = 0LL;
  strcpy((char *)(result + 1128), "tlfd");
  *(_BYTE *)(result + 1136) = 0;
  *(_BYTE *)(result + 1208) = 0;
  *(void *)(result + 1336) = 0LL;
  *(_OWORD *)(result + 1304) = 0u;
  *(_OWORD *)(result + 1320) = 0u;
  *(_OWORD *)(result + 1272) = 0u;
  *(_OWORD *)(result + 12sub_7BFE0(v23 - 88) = 0u;
  *(_OWORD *)(result + 1sub_67FE8(v33 + 240) = 0u;
  *(_OWORD *)(result + 1256) = 0u;
  *(_OWORD *)(result + 1224) = 0u;
  strcpy((char *)(result + 1344), "tlfd");
  *(_BYTE *)(result + 1352) = 0;
  *(_BYTE *)(result + 1424) = 0;
  *(void *)(result + 1552) = 0LL;
  *(_OWORD *)(result + 1536) = 0u;
  *(_OWORD *)(result + 1520) = 0u;
  *(_OWORD *)(result + 1504) = 0u;
  *(_OWORD *)(result + 14sub_7BFE0(v23 - 88) = 0u;
  *(_OWORD *)(result + 1472) = 0u;
  *(_OWORD *)(result + 1456) = 0u;
  *(_OWORD *)(result + 1440) = 0u;
  strcpy((char *)(result + 1560), "tlfd");
  *(_BYTE *)(result + 1568) = 0;
  *(_BYTE *)(result + 1640) = 0;
  *(void *)(result + 1768) = 0LL;
  *(_OWORD *)(result + 1736) = 0u;
  *(_OWORD *)(result + 1752) = 0u;
  *(_OWORD *)(result + 1704) = 0u;
  *(_OWORD *)(result + 1720) = 0u;
  *(_OWORD *)(result + 1672) = 0u;
  *(_OWORD *)(result + 16sub_7BFE0(v23 - 88) = 0u;
  *(_OWORD *)(result + 1656) = 0u;
  strcpy((char *)(result + 1776), "tlfd");
  *(_BYTE *)(result + 1784) = 0;
  *(_BYTE *)(result + 1856) = 0;
  *(void *)(result + 1984) = 0LL;
  *(_OWORD *)(result + 1968) = 0u;
  *(_OWORD *)(result + 1952) = 0u;
  *(_OWORD *)(result + 1936) = 0u;
  *(_OWORD *)(result + 1920) = 0u;
  *(_OWORD *)(result + 1904) = 0u;
  *(_OWORD *)(result + 18sub_7BFE0(v23 - 88) = 0u;
  *(_OWORD *)(result + 1872) = 0u;
  strcpy((char *)(result + 1992), "tlfd");
  *(_BYTE *)(result + 2000) = 0;
  *(_BYTE *)(result + 2072) = 0;
  *(void *)(result + 2200) = 0LL;
  *(_OWORD *)(result + 2168) = 0u;
  *(_OWORD *)(result + 2184) = 0u;
  *(_OWORD *)(result + 2136) = 0u;
  *(_OWORD *)(result + 2152) = 0u;
  *(_OWORD *)(result + 2104) = 0u;
  *(_OWORD *)(result + 2120) = 0u;
  *(_OWORD *)(result + 20sub_7BFE0(v23 - 88) = 0u;
  strcpy((char *)(result + 2208), "tlfd");
  *(_BYTE *)(result + 2216) = 0;
  *(_BYTE *)(result + 22sub_7BFE0(v23 - 88) = 0;
  *(void *)(result + 2416) = 0LL;
  *(_OWORD *)(result + 2400) = 0u;
  *(_OWORD *)(result + 2384) = 0u;
  *(_OWORD *)(result + 2368) = 0u;
  *(_OWORD *)(result + 2352) = 0u;
  *(_OWORD *)(result + 2336) = 0u;
  *(_OWORD *)(result + 2320) = 0u;
  *(_OWORD *)(result + 2304) = 0u;
  strcpy((char *)(result + 2424), "tlfd");
  *(_BYTE *)(result + 24sub_7A768(v9 - 32) = 0;
  *(_BYTE *)(result + 2504) = 0;
  *(void *)(result + 26sub_7A768(v9 - 32) = 0LL;
  *(_OWORD *)(result + 2600) = 0u;
  *(_OWORD *)(result + 2616) = 0u;
  *(_OWORD *)(result + 2568) = 0u;
  *(_OWORD *)(result + 2sub_67FE8(v0 + 584) = 0u;
  *(_OWORD *)(result + 2536) = 0u;
  *(_OWORD *)(result + 2552) = 0u;
  *(_OWORD *)(result + 2520) = 0u;
  strcpy((char *)(result + 2640), "tlfd");
  *(_BYTE *)(result + 26sub_51FA0(v10 + 48) = 0;
  *(_BYTE *)(result + 2720) = 0;
  *(void *)(result + 28sub_51FA0(v10 + 48) = 0LL;
  *(_OWORD *)(result + 28sub_7A768(v9 - 32) = 0u;
  *(_OWORD *)(result + 2816) = 0u;
  *(_OWORD *)(result + 2800) = 0u;
  *(_OWORD *)(result + 2784) = 0u;
  *(_OWORD *)(result + 2768) = 0u;
  *(_OWORD *)(result + 2752) = 0u;
  *(_OWORD *)(result + 2736) = 0u;
  strcpy((char *)(result + 2856), "tlfd");
  *(_BYTE *)(result + 2864) = 0;
  *(_BYTE *)(result + 2936) = 0;
  *(void *)(result + 3064) = 0LL;
  *(_OWORD *)(result + 30sub_7A768(v9 - 32) = 0u;
  *(_OWORD *)(result + 30sub_51FA0(v10 + 48) = 0u;
  *(_OWORD *)(result + 3000) = 0u;
  *(_OWORD *)(result + 3016) = 0u;
  *(_OWORD *)(result + 2968) = 0u;
  *(_OWORD *)(result + 2984) = 0u;
  *(_OWORD *)(result + 2952) = 0u;
  strcpy((char *)(result + 3072), "tlfd");
  *(_BYTE *)(result + 3080) = 0;
  *(_BYTE *)(result + 3152) = 0;
  *(void *)(result + 3280) = 0LL;
  *(_OWORD *)(result + 3264) = 0u;
  *(_OWORD *)(result + 32sub_51FA0(v10 + 48) = 0u;
  *(_OWORD *)(result + 32sub_7A768(v9 - 32) = 0u;
  *(_OWORD *)(result + 3216) = 0u;
  *(_OWORD *)(result + 3200) = 0u;
  *(_OWORD *)(result + 3184) = 0u;
  *(_OWORD *)(result + 3168) = 0u;
  strcpy((char *)(result + 3288), "tlfd");
  *(_BYTE *)(result + 3296) = 0;
  *(_BYTE *)(result + 3368) = 0;
  *(void *)(result + 3496) = 0LL;
  *(_OWORD *)(result + 3464) = 0u;
  *(_OWORD *)(result + 3480) = 0u;
  *(_OWORD *)(result + 34sub_7A768(v9 - 32) = 0u;
  *(_OWORD *)(result + 34sub_51FA0(v10 + 48) = 0u;
  *(_OWORD *)(result + 3400) = 0u;
  *(_OWORD *)(result + 3416) = 0u;
  *(_OWORD *)(result + 3384) = 0u;
  strcpy((char *)(result + 3504), "tlfd");
  *(_BYTE *)(result + 3512) = 0;
  *(_BYTE *)(result + 3sub_67FE8(v0 + 584) = 0;
  *(void *)(result + 3712) = 0LL;
  *(_OWORD *)(result + 3696) = 0u;
  *(_OWORD *)(result + 3680) = 0u;
  *(_OWORD *)(result + 3664) = 0u;
  *(_OWORD *)(result + 36sub_51FA0(v10 + 48) = 0u;
  *(_OWORD *)(result + 36sub_7A768(v9 - 32) = 0u;
  *(_OWORD *)(result + 3616) = 0u;
  *(_OWORD *)(result + 3600) = 0u;
  strcpy((char *)(result + 3720), "tlfd");
  *(_BYTE *)(result + 3728) = 0;
  *(_BYTE *)(result + 3800) = 0;
  *(void *)(result + 3928) = 0LL;
  *(_OWORD *)(result + 3896) = 0u;
  *(_OWORD *)(result + 3912) = 0u;
  *(_OWORD *)(result + 3864) = 0u;
  *(_OWORD *)(result + 3880) = 0u;
  *(_OWORD *)(result + 38sub_7A768(v9 - 32) = 0u;
  *(_OWORD *)(result + 38sub_51FA0(v10 + 48) = 0u;
  *(_OWORD *)(result + 3816) = 0u;
  strcpy((char *)(result + 3936), "tlfd");
  *(_BYTE *)(result + 3944) = 0;
  *(_BYTE *)(result + 4016) = 0;
  *(void *)(result + 4144) = 0LL;
  *(_OWORD *)(result + 4sub_51FA0(v10 + 128) = 0u;
  *(_OWORD *)(result + 4sub_88540(v26 - 112) = 0u;
  *(_OWORD *)(result + 4096) = 0u;
  *(_OWORD *)(result + 4080) = 0u;
  *(_OWORD *)(result + 4064) = 0u;
  *(_OWORD *)(result + 40sub_51FA0(v10 + 48) = 0u;
  *(_OWORD *)(result + 40sub_7A768(v9 - 32) = 0u;
  strcpy((char *)(result + 4152), "tlfd");
  *(_BYTE *)(result + 4160) = 0;
  *(_BYTE *)(result + 42sub_7A768(v9 - 32) = 0;
  *(void *)(result + 4360) = 0LL;
  *(_OWORD *)(result + 4328) = 0u;
  *(_OWORD *)(result + 4344) = 0u;
  *(_OWORD *)(result + 4296) = 0u;
  *(_OWORD *)(result + 4312) = 0u;
  *(_OWORD *)(result + 4264) = 0u;
  *(_OWORD *)(result + 4280) = 0u;
  *(_OWORD *)(result + 42sub_51FA0(v10 + 48) = 0u;
  strcpy((char *)(result + 4368), "tlfd");
  *(_BYTE *)(result + 4376) = 0;
  *(_BYTE *)(result + 44sub_51FA0(v10 + 48) = 0;
  *(void *)(result + 4576) = 0LL;
  *(_OWORD *)(result + 4560) = 0u;
  *(_OWORD *)(result + 4544) = 0u;
  *(_OWORD *)(result + 4528) = 0u;
  *(_OWORD *)(result + 4512) = 0u;
  *(_OWORD *)(result + 4496) = 0u;
  *(_OWORD *)(result + 4480) = 0u;
  *(_OWORD *)(result + 4464) = 0u;
  strcpy((char *)(result + 4584), "tlfd");
  *(_BYTE *)(result + 4592) = 0;
  *(_BYTE *)(result + 4664) = 0;
  *(void *)(result + 4792) = 0LL;
  *(_OWORD *)(result + 4760) = 0u;
  *(_OWORD *)(result + 4776) = 0u;
  *(_OWORD *)(result + 4728) = 0u;
  *(_OWORD *)(result + 4744) = 0u;
  *(_OWORD *)(result + 4696) = 0u;
  *(_OWORD *)(result + 4712) = 0u;
  *(_OWORD *)(result + 4680) = 0u;
  strcpy((char *)(result + 4800), "tlfd");
  *(_BYTE *)(result + 4808) = 0;
  *(_BYTE *)(result + 4880) = 0;
  *(void *)(result + 5008) = 0LL;
  *(_OWORD *)(result + 4992) = 0u;
  *(_OWORD *)(result + 4976) = 0u;
  *(_OWORD *)(result + 4960) = 0u;
  *(_OWORD *)(result + 4944) = 0u;
  *(_OWORD *)(result + 4928) = 0u;
  *(_OWORD *)(result + 4912) = 0u;
  *(_OWORD *)(result + 4896) = 0u;
  strcpy((char *)(result + 5016), "tlfd");
  *(_BYTE *)(result + 5024) = 0;
  *(_BYTE *)(result + 5096) = 0;
  *(void *)(result + 5224) = 0LL;
  *(_OWORD *)(result + 5192) = 0u;
  *(_OWORD *)(result + 5208) = 0u;
  *(_OWORD *)(result + 5160) = 0u;
  *(_OWORD *)(result + 5176) = 0u;
  *(_OWORD *)(result + 5sub_51FA0(v10 + 128) = 0u;
  *(_OWORD *)(result + 5144) = 0u;
  *(_OWORD *)(result + 5sub_88540(v26 - 112) = 0u;
  strcpy((char *)(result + 5232), "tlfd");
  *(_BYTE *)(result + 5sub_67FE8(v33 + 240) = 0;
  *(_BYTE *)(result + 5312) = 0;
  *(void *)(result + 5440) = 0LL;
  *(_OWORD *)(result + 5424) = 0u;
  *(_OWORD *)(result + 5408) = 0u;
  *(_OWORD *)(result + 5392) = 0u;
  *(_OWORD *)(result + 5376) = 0u;
  *(_OWORD *)(result + 5360) = 0u;
  *(_OWORD *)(result + 5344) = 0u;
  *(_OWORD *)(result + 5328) = 0u;
  strcpy((char *)(result + 5448), "tlfd");
  *(_BYTE *)(result + 5456) = 0;
  *(_BYTE *)(result + 5528) = 0;
  *(void *)(result + 5656) = 0LL;
  *(_OWORD *)(result + 5624) = 0u;
  *(_OWORD *)(result + 5640) = 0u;
  *(_OWORD *)(result + 5592) = 0u;
  *(_OWORD *)(result + 5608) = 0u;
  *(_OWORD *)(result + 5560) = 0u;
  *(_OWORD *)(result + 5576) = 0u;
  *(_OWORD *)(result + 5544) = 0u;
  strcpy((char *)(result + 5664), "tlfd");
  *(_BYTE *)(result + 5672) = 0;
  *(_BYTE *)(result + 5744) = 0;
  *(void *)(result + 5872) = 0LL;
  *(_OWORD *)(result + 5856) = 0u;
  *(_OWORD *)(result + 5840) = 0u;
  *(_OWORD *)(result + 5824) = 0u;
  *(_OWORD *)(result + 5808) = 0u;
  *(_OWORD *)(result + 5792) = 0u;
  *(_OWORD *)(result + 5776) = 0u;
  *(_OWORD *)(result + 5760) = 0u;
  strcpy((char *)(result + 5880), "tlfd");
  *(_BYTE *)(result + 58sub_7BFE0(v23 - 88) = 0;
  *(_BYTE *)(result + 5960) = 0;
  *(void *)(result + 6040) = 0LL;
  *(_OWORD *)(result + 6008) = 0u;
  *(_OWORD *)(result + 6024) = 0u;
  *(_OWORD *)(result + 5976) = 0u;
  *(_OWORD *)(result + 5992) = 0u;
  return result;
}

uint64_t sub_178254(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0LL;
  *(void *)(a2 + 8) = 0LL;
  *(void *)(a2 + 16) = 0LL;
  int v4 = (void **)(a1 + 24);
  __int128 v5 = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)int v4 = v5;
  *(_BYTE *)(a2 + 47) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  char v6 = *(_BYTE *)(a2 + 52);
  *(_DWORD *)(a1 + sub_51FA0(v10 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = v6;
  BOOL v7 = (void **)(a1 + 56);
  int v8 = (__int128 *)(a2 + 56);
  if (*(unsigned __int8 *)(a1 + 128) == *(unsigned __int8 *)(a2 + 128))
  {
    if (*(_BYTE *)(a1 + 128))
    {
      __int128 v9 = *v8;
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(_OWORD *)BOOL v7 = v9;
      *(_BYTE *)(a2 + 79) = 0;
      *(_BYTE *)(a2 + 56) = 0;
      int v10 = (void **)(a1 + 80);
      __int128 v11 = *(_OWORD *)(a2 + 80);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(_OWORD *)int v10 = v11;
      *(_BYTE *)(a2 + 103) = 0;
      *(_BYTE *)(a2 + 80) = 0;
      char v12 = (void **)(a1 + 104);
      __int128 v13 = *(_OWORD *)(a2 + 104);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(_OWORD *)char v12 = v13;
      *(_BYTE *)(a2 + 127) = 0;
      *(_BYTE *)(a2 + 104) = 0;
    }
  }

  else if (*(_BYTE *)(a1 + 128))
  {
    sub_1791C0(a1 + 56);
  }

  else
  {
    __int128 v14 = *v8;
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)BOOL v7 = v14;
    *(void *)(a2 + 64) = 0LL;
    *(void *)(a2 + 72) = 0LL;
    *(void *)int v8 = 0LL;
    __int128 v15 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = v15;
    *(void *)(a2 + sub_7BFE0(v23 - 88) = 0LL;
    *(void *)(a2 + 96) = 0LL;
    *(void *)(a2 + 80) = 0LL;
    __int128 v16 = *(_OWORD *)(a2 + 104);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = v16;
    *(void *)(a2 + sub_88540(v26 - 112) = 0LL;
    *(void *)(a2 + 120) = 0LL;
    *(void *)(a2 + 104) = 0LL;
    *(_BYTE *)(a1 + sub_51FA0(v10 + 128) = 1;
  }

  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  uint64_t v17 = (void **)(a1 + 144);
  __int128 v18 = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_OWORD *)uint64_t v17 = v18;
  *(_BYTE *)(a2 + 167) = 0;
  *(_BYTE *)(a2 + 144) = 0;
  sub_179164((void **)(a1 + 168));
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a2 + 168) = 0LL;
  *(void *)(a2 + 176) = 0LL;
  *(void *)(a2 + 184) = 0LL;
  sub_179164((void **)(a1 + 192));
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a2 + 192) = 0LL;
  *(void *)(a2 + 200) = 0LL;
  *(void *)(a2 + 208) = 0LL;
  return a1;
}

void sub_178454(void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    __int128 v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_7A768(v4 - 24);
      while ((void *)v4 != v2);
      __int128 v5 = **a1;
    }

    v1[1] = v2;
    operator delete(v5);
  }

void sub_1784C4(void ***a1)
{
  int v2 = *a1;
  if (*v2)
  {
    sub_1790D8((uint64_t *)v2);
    operator delete(**a1);
  }

uint64_t sub_178504(void **a1)
{
  int v2 = (char *)a1 + 6095;
  uint64_t v4 = a1 + 834;
  sub_178454(&v4);
  uint64_t v4 = a1 + 831;
  sub_178454(&v4);
  if (v2[552] < 0) {
    operator delete(a1[828]);
  }
  sub_830DC((uint64_t)(a1 + 817));
  if (v2[432] < 0) {
    operator delete(a1[813]);
  }
  uint64_t v4 = a1 + 810;
  sub_1784C4(&v4);
  uint64_t v4 = a1 + 807;
  sub_178454(&v4);
  uint64_t v4 = a1 + 804;
  sub_178454(&v4);
  if (v2[336] < 0) {
    operator delete(a1[801]);
  }
  sub_830DC((uint64_t)(a1 + 790));
  if (v2[216] < 0) {
    operator delete(a1[786]);
  }
  uint64_t v4 = a1 + 783;
  sub_1784C4(&v4);
  uint64_t v4 = a1 + 780;
  sub_178454(&v4);
  uint64_t v4 = a1 + 777;
  sub_178454(&v4);
  if (v2[120] < 0) {
    operator delete(a1[774]);
  }
  sub_830DC((uint64_t)(a1 + 763));
  if (*v2 < 0) {
    operator delete(a1[759]);
  }
  uint64_t v4 = a1 + 756;
  sub_1784C4(&v4);
  return sub_178674((uint64_t)a1);
}

uint64_t sub_178674(uint64_t a1)
{
  int v2 = (char *)(a1 + 4151);
  uint64_t v4 = (void **)(a1 + 6024);
  sub_178454(&v4);
  uint64_t v4 = (void **)(a1 + 6000);
  sub_178454(&v4);
  if (v2[1848] < 0) {
    operator delete(*(void **)(a1 + 5976));
  }
  sub_830DC(a1 + 5888);
  if (v2[1728] < 0) {
    operator delete(*(void **)(a1 + 5856));
  }
  uint64_t v4 = (void **)(a1 + 5832);
  sub_1784C4(&v4);
  uint64_t v4 = (void **)(a1 + 5808);
  sub_178454(&v4);
  uint64_t v4 = (void **)(a1 + 5784);
  sub_178454(&v4);
  if (v2[1632] < 0) {
    operator delete(*(void **)(a1 + 5760));
  }
  sub_830DC(a1 + 5672);
  if (v2[1512] < 0) {
    operator delete(*(void **)(a1 + 5640));
  }
  uint64_t v4 = (void **)(a1 + 5616);
  sub_1784C4(&v4);
  uint64_t v4 = (void **)(a1 + 5592);
  sub_178454(&v4);
  uint64_t v4 = (void **)(a1 + 5568);
  sub_178454(&v4);
  if (v2[1416] < 0) {
    operator delete(*(void **)(a1 + 5544));
  }
  sub_830DC(a1 + 5456);
  if (v2[1296] < 0) {
    operator delete(*(void **)(a1 + 5424));
  }
  uint64_t v4 = (void **)(a1 + 5400);
  sub_1784C4(&v4);
  uint64_t v4 = (void **)(a1 + 5376);
  sub_178454(&v4);
  uint64_t v4 = (void **)(a1 + 5352);
  sub_178454(&v4);
  if (v2[1200] < 0) {
    operator delete(*(void **)(a1 + 5328));
  }
  sub_830DC(a1 + 5240);
  if (v2[1080] < 0) {
    operator delete(*(void **)(a1 + 5208));
  }
  uint64_t v4 = (void **)(a1 + 5184);
  sub_1784C4(&v4);
  uint64_t v4 = (void **)(a1 + 5160);
  sub_178454(&v4);
  uint64_t v4 = (void **)(a1 + 5136);
  sub_178454(&v4);
  if (v2[984] < 0) {
    operator delete(*(void **)(a1 + 5112));
  }
  sub_830DC(a1 + 5024);
  if (v2[864] < 0) {
    operator delete(*(void **)(a1 + 4992));
  }
  uint64_t v4 = (void **)(a1 + 4968);
  sub_1784C4(&v4);
  uint64_t v4 = (void **)(a1 + 4944);
  sub_178454(&v4);
  uint64_t v4 = (void **)(a1 + 4920);
  sub_178454(&v4);
  if (v2[768] < 0) {
    operator delete(*(void **)(a1 + 4896));
  }
  sub_830DC(a1 + 4808);
  if (v2[648] < 0) {
    operator delete(*(void **)(a1 + 4776));
  }
  uint64_t v4 = (void **)(a1 + 4752);
  sub_1784C4(&v4);
  uint64_t v4 = (void **)(a1 + 4728);
  sub_178454(&v4);
  uint64_t v4 = (void **)(a1 + 4704);
  sub_178454(&v4);
  if (v2[552] < 0) {
    operator delete(*(void **)(a1 + 4680));
  }
  sub_830DC(a1 + 4592);
  if (v2[432] < 0) {
    operator delete(*(void **)(a1 + 4560));
  }
  uint64_t v4 = (void **)(a1 + 4536);
  sub_1784C4(&v4);
  uint64_t v4 = (void **)(a1 + 4512);
  sub_178454(&v4);
  uint64_t v4 = (void **)(a1 + 4488);
  sub_178454(&v4);
  if (v2[336] < 0) {
    operator delete(*(void **)(a1 + 4464));
  }
  sub_830DC(a1 + 4376);
  if (v2[216] < 0) {
    operator delete(*(void **)(a1 + 4344));
  }
  uint64_t v4 = (void **)(a1 + 4320);
  sub_1784C4(&v4);
  uint64_t v4 = (void **)(a1 + 4296);
  sub_178454(&v4);
  uint64_t v4 = (void **)(a1 + 4272);
  sub_178454(&v4);
  if (v2[120] < 0) {
    operator delete(*(void **)(a1 + 4248));
  }
  sub_830DC(a1 + 4160);
  if (*v2 < 0) {
    operator delete(*(void **)(a1 + 4128));
  }
  uint64_t v4 = (void **)(a1 + 4104);
  sub_1784C4(&v4);
  uint64_t v4 = (void **)(a1 + 4080);
  sub_178454(&v4);
  uint64_t v4 = (void **)(a1 + 4056);
  sub_178454(&v4);
  sub_830DC(a1 + 3944);
  uint64_t v4 = (void **)(a1 + 3888);
  sub_1784C4(&v4);
  uint64_t v4 = (void **)(a1 + 3864);
  sub_178454(&v4);
  uint64_t v4 = (void **)(a1 + 3840);
  sub_178454(&v4);
  sub_830DC(a1 + 3728);
  uint64_t v4 = (void **)(a1 + 3672);
  sub_1784C4(&v4);
  uint64_t v4 = (void **)(a1 + 3648);
  sub_178454(&v4);
  uint64_t v4 = (void **)(a1 + 3624);
  sub_178454(&v4);
  sub_830DC(a1 + 3512);
  uint64_t v4 = (void **)(a1 + 3456);
  sub_1784C4(&v4);
  uint64_t v4 = (void **)(a1 + 3432);
  sub_178454(&v4);
  uint64_t v4 = (void **)(a1 + 3408);
  sub_178454(&v4);
  sub_830DC(a1 + 3296);
  uint64_t v4 = (void **)(a1 + 3240);
  sub_1784C4(&v4);
  uint64_t v4 = (void **)(a1 + 3216);
  sub_178454(&v4);
  uint64_t v4 = (void **)(a1 + 3192);
  sub_178454(&v4);
  sub_830DC(a1 + 3080);
  uint64_t v4 = (void **)(a1 + 3024);
  sub_1784C4(&v4);
  uint64_t v4 = (void **)(a1 + 3000);
  sub_178454(&v4);
  uint64_t v4 = (void **)(a1 + 2976);
  sub_178454(&v4);
  sub_830DC(a1 + 2864);
  uint64_t v4 = (void **)(a1 + 2808);
  sub_1784C4(&v4);
  uint64_t v4 = (void **)(a1 + 2784);
  sub_178454(&v4);
  uint64_t v4 = (void **)(a1 + 2760);
  sub_178454(&v4);
  sub_830DC(a1 + 2648);
  uint64_t v4 = (void **)(a1 + 2592);
  sub_1784C4(&v4);
  uint64_t v4 = (void **)(a1 + 2568);
  sub_178454(&v4);
  uint64_t v4 = (void **)(a1 + 2544);
  sub_178454(&v4);
  sub_830DC(a1 + 2432);
  uint64_t v4 = (void **)(a1 + 2376);
  sub_1784C4(&v4);
  uint64_t v4 = (void **)(a1 + 2352);
  sub_178454(&v4);
  uint64_t v4 = (void **)(a1 + 2328);
  sub_178454(&v4);
  sub_830DC(a1 + 2216);
  uint64_t v4 = (void **)(a1 + 2160);
  sub_1784C4(&v4);
  uint64_t v4 = (void **)(a1 + 2136);
  sub_178454(&v4);
  uint64_t v4 = (void **)(a1 + 2112);
  sub_178454(&v4);
  sub_830DC(a1 + 2000);
  uint64_t v4 = (void **)(a1 + 1944);
  sub_1784C4(&v4);
  uint64_t v4 = (void **)(a1 + 1920);
  sub_178454(&v4);
  uint64_t v4 = (void **)(a1 + 1896);
  sub_178454(&v4);
  sub_830DC(a1 + 1784);
  uint64_t v4 = (void **)(a1 + 1728);
  sub_1784C4(&v4);
  uint64_t v4 = (void **)(a1 + 1704);
  sub_178454(&v4);
  uint64_t v4 = (void **)(a1 + 1680);
  sub_178454(&v4);
  sub_830DC(a1 + 1568);
  uint64_t v4 = (void **)(a1 + 1512);
  sub_1784C4(&v4);
  uint64_t v4 = (void **)(a1 + 1488);
  sub_178454(&v4);
  uint64_t v4 = (void **)(a1 + 1464);
  sub_178454(&v4);
  sub_830DC(a1 + 1352);
  uint64_t v4 = (void **)(a1 + 1296);
  sub_1784C4(&v4);
  uint64_t v4 = (void **)(a1 + 1272);
  sub_178454(&v4);
  uint64_t v4 = (void **)(a1 + 1248);
  sub_178454(&v4);
  sub_830DC(a1 + 1136);
  uint64_t v4 = (void **)(a1 + 1080);
  sub_1784C4(&v4);
  uint64_t v4 = (void **)(a1 + 1056);
  sub_178454(&v4);
  uint64_t v4 = (void **)(a1 + 1032);
  sub_178454(&v4);
  sub_830DC(a1 + 920);
  uint64_t v4 = (void **)(a1 + 864);
  sub_1784C4(&v4);
  uint64_t v4 = (void **)(a1 + 840);
  sub_178454(&v4);
  uint64_t v4 = (void **)(a1 + 816);
  sub_178454(&v4);
  sub_830DC(a1 + 704);
  uint64_t v4 = (void **)(a1 + 648);
  sub_1784C4(&v4);
  uint64_t v4 = (void **)(a1 + 624);
  sub_178454(&v4);
  uint64_t v4 = (void **)(a1 + 600);
  sub_178454(&v4);
  sub_830DC(a1 + 488);
  uint64_t v4 = (void **)(a1 + 432);
  sub_1784C4(&v4);
  uint64_t v4 = (void **)(a1 + 408);
  sub_178454(&v4);
  uint64_t v4 = (void **)(a1 + 384);
  sub_178454(&v4);
  sub_830DC(a1 + 272);
  uint64_t v4 = (void **)(a1 + 216);
  sub_1784C4(&v4);
  uint64_t v4 = (void **)(a1 + 192);
  sub_178454(&v4);
  uint64_t v4 = (void **)(a1 + 168);
  sub_178454(&v4);
  sub_830DC(a1 + 56);
  uint64_t v4 = (void **)a1;
  sub_1784C4(&v4);
  return a1;
}

void sub_1790D8(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      char v6 = *(void **)(v4 - 24);
      v4 -= 24LL;
      __int128 v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }

      uint64_t v2 = v4;
    }

    while (v4 != v3);
  }

  a1[1] = v3;
}

void sub_17912C(uint64_t *a1)
{
  if (*a1)
  {
    sub_1790D8(a1);
    operator delete((void *)*a1);
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
  }

void sub_179164(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        uint64_t v3 = sub_7A768(v3 - 24);
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }

    a1[1] = v1;
    operator delete(v4);
    *a1 = 0LL;
    a1[1] = 0LL;
    a1[2] = 0LL;
  }

void sub_1791C0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a1 + 72) = 0;
  }

uint64_t sub_179218(void **a1)
{
  uint64_t v2 = (char *)a1 + 6095;
  uint64_t v4 = a1 + 807;
  sub_178454(&v4);
  uint64_t v4 = a1 + 804;
  sub_178454(&v4);
  if (v2[336] < 0) {
    operator delete(a1[801]);
  }
  sub_830DC((uint64_t)(a1 + 790));
  if (v2[216] < 0) {
    operator delete(a1[786]);
  }
  uint64_t v4 = a1 + 783;
  sub_1784C4(&v4);
  uint64_t v4 = a1 + 780;
  sub_178454(&v4);
  uint64_t v4 = a1 + 777;
  sub_178454(&v4);
  if (v2[120] < 0) {
    operator delete(a1[774]);
  }
  sub_830DC((uint64_t)(a1 + 763));
  if (*v2 < 0) {
    operator delete(a1[759]);
  }
  uint64_t v4 = a1 + 756;
  sub_1784C4(&v4);
  return sub_178674((uint64_t)a1);
}

void sub_179320(uint64_t a1, std::string::size_type a2)
{
  uint64_t v4 = (_BYTE *)(a1 + 6536);
  __int128 v5 = (_BYTE *)(a1 + 6100);
  uint64_t v6 = sub_177D54(a1);
  *(_OWORD *)(v6 + 6080) = 0u;
  *(_OWORD *)(v6 + 6064) = 0u;
  *(_OWORD *)(v6 + 60sub_51FA0(v10 + 48) = 0u;
  *(_DWORD *)(v6 + 6096) = 1684434036;
  _BYTE *v5 = 0;
  v5[4] = 0;
  v5[76] = 0;
  *(_OWORD *)(v6 + 6192) = 0u;
  *(_OWORD *)(v6 + 6208) = 0u;
  *(_OWORD *)(v6 + 6224) = 0u;
  *(_OWORD *)(v6 + 6sub_67FE8(v33 + 240) = 0u;
  *(_OWORD *)(v6 + 6256) = 0u;
  *(_OWORD *)(v6 + 6272) = 0u;
  *(_OWORD *)(v6 + 62sub_7BFE0(v23 - 88) = 0u;
  *(void *)(v6 + 6304) = 0LL;
  *(_DWORD *)(v6 + 6312) = 1684434036;
  v5[216] = 0;
  v5[220] = 0;
  v5[292] = 0;
  *(void *)(v6 + 6520) = 0LL;
  *(_OWORD *)(v6 + 64sub_7BFE0(v23 - 88) = 0u;
  *(_OWORD *)(v6 + 6504) = 0u;
  *(_OWORD *)(v6 + 6456) = 0u;
  *(_OWORD *)(v6 + 6472) = 0u;
  *(_OWORD *)(v6 + 6424) = 0u;
  *(_OWORD *)(v6 + 6440) = 0u;
  *(_OWORD *)(v6 + 6408) = 0u;
  *(_DWORD *)(v6 + 6528) = 1684434036;
  v5[432] = 0;
  _BYTE *v4 = 0;
  v4[72] = 0;
  *(_OWORD *)(v6 + 6624) = 0u;
  *(_OWORD *)(v6 + 6640) = 0u;
  *(_OWORD *)(v6 + 6656) = 0u;
  *(_OWORD *)(v6 + 6672) = 0u;
  *(void *)(v6 + 66sub_7BFE0(v23 - 88) = 0LL;
  *(void *)__int16 v29 = 0LL;
  *(_OWORD *)AudioObjectID v27 = 0u;
  *(_OWORD *)__int128 v28 = 0u;
  *(void *)&v49[16] = 2LL;
  *(_OWORD *)__int128 v49 = *(_OWORD *)&qword_402EFC;
  sub_83660((uint64_t)v27, (int *)v49, 3LL);
  sub_179A08( a1,  "headset_general",  "headset_latenight_general",  "headset_movie",  "headset_latenight_general",  "headset_latenight_movie",  a2,  v27,  v18,  v19,  v20,  v21,  0LL,  unk_402F04,  v23,  *((uint64_t *)&v23 + 1),  v24,  *((uint64_t *)&v24 + 1),  v25,  SWORD2(v25),  SBYTE6(v25),  SHIBYTE(v25),  v26.__r_.__value_.__s.__data_[0],  v26.__r_.__value_.__l.__size_,  v26.__r_.__value_.__l.__cap_,  v27[0],  v27[1],  (uint64_t)v28[0],  (uint64_t)v28[1],  v29[0],  v29[1],  SBYTE2(v29[1]),  SHIBYTE(v29[1]),  v30,  v32,  v33[0],  v33[1],  v33[2],  (void *)v33[3],  v33[4],  v34,  v35,  v36,  v37);
  sub_83284((uint64_t)v27);
  v44.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(0LL, "Generic", 0x600u);
  v44.__r_.__value_.__s.__data_[8] = 1;
  sub_300D48((std::string *)v49, (CFStringRef *)&v44);
  BOOL v7 = std::string::append((std::string *)v49, "volume_only.dspg", 0x10uLL);
  __int128 v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__l.__cap_ = v7->__r_.__value_.__l.__cap_;
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0LL;
  v7->__r_.__value_.__l.__cap_ = 0LL;
  v7->__r_.__value_.__r.__words[0] = 0LL;
  if ((v49[23] & 0x80000000) != 0) {
    operator delete(*(void **)v49);
  }
  sub_19DFC((uint64_t)&v44);
  __int128 v9 = (os_log_t *)sub_138E8(20);
  int v10 = *v9;
  if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v11 = &v48;
    if ((v48.__r_.__value_.__s.__size_ & 0x80u) != 0) {
      __int128 v11 = (std::string *)v48.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)__int128 v49 = 136315650;
    *(void *)&v49[4] = "RoutingSettings_Aspen.cpp";
    *(_WORD *)&v49[12] = 1024;
    *(_DWORD *)&v49[14] = 1247;
    *(_WORD *)&v49[18] = 2080;
    *(void *)&v49[20] = v11;
    _os_log_impl(&dword_0, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Volume only graph is %s", v49, 0x1Cu);
  }

  sub_7D084(v46, "volume only");
  v44.__r_.__value_.__s.__data_[0] = 0;
  char v45 = 0;
  v42.__r_.__value_.__s.__data_[0] = 0;
  char v43 = 0;
  uint64_t v50 = 0LL;
  memset(v49, 0, sizeof(v49));
  __int128 v51 = *(_OWORD *)v22;
  uint64_t v52 = 2LL;
  sub_83660((uint64_t)v49, (int *)&v51, 3LL);
  sub_302438((char **)v27, (char *)v46, &v48, &v44, &v42, 0LL, 0x100000002LL, 0x100000002LL, 0.0, 0LL, 0, (uint64_t)v49);
  sub_83284((uint64_t)v49);
  if (v47 < 0) {
    operator delete(v46[0]);
  }
  unsigned __int8 v12 = atomic_load((unsigned __int8 *)&qword_49D678);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_49D678))
  {
    sub_302570();
    __cxa_guard_release(&qword_49D678);
  }

  __int128 v13 = xmmword_49D668;
  *(_OWORD *)__int128 v49 = xmmword_49D668;
  if (*((void *)&xmmword_49D668 + 1))
  {
    __int128 v14 = (unint64_t *)(*((void *)&xmmword_49D668 + 1) + 8LL);
    do
      unint64_t v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }

  sub_143208(v27, v13, *((uint64_t *)&v13 + 1));
  if (*((void *)&v13 + 1))
  {
    __int128 v16 = (unint64_t *)(*((void *)&v13 + 1) + 8LL);
    do
      unint64_t v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      (*(void (**)(void))(**((void **)&v13 + 1) + 16LL))(*((void *)&v13 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v13 + 1));
    }
  }

  sub_178254(a1 + 6048, (uint64_t)v27);
  *(void *)__int128 v49 = v41;
  sub_178454((void ***)v49);
  *(void *)__int128 v49 = v40;
  sub_178454((void ***)v49);
  if (v39 < 0) {
    operator delete(__p);
  }
  sub_830DC((uint64_t)v33);
  if (v31 < 0) {
    operator delete(v28[1]);
  }
  *(void *)__int128 v49 = v27;
  sub_1784C4((void ***)v49);
  LODWORD(v44.__r_.__value_.__l.__data_) = -1046478848;
  sub_3043CC((char **)v27, (float *)&v44);
  sub_178254(a1 + 6480, (uint64_t)v27);
  *(void *)__int128 v49 = v41;
  sub_178454((void ***)v49);
  *(void *)__int128 v49 = v40;
  sub_178454((void ***)v49);
  if (v39 < 0) {
    operator delete(__p);
  }
  sub_830DC((uint64_t)v33);
  if (v31 < 0) {
    operator delete(v28[1]);
  }
  *(void *)__int128 v49 = v27;
  sub_1784C4((void ***)v49);
  sub_7D084(&v26, "siri_output");
  uint64_t v25 = 0LL;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  *(_OWORD *)__int128 v49 = *(_OWORD *)v22;
  *(void *)&v49[16] = 2LL;
  sub_83660((uint64_t)&v23, (int *)v49, 3LL);
  sub_17AB18((char **)v27, 0, &v26, &v23, a2, 0);
  sub_178254(a1 + 6264, (uint64_t)v27);
  *(void *)__int128 v49 = v41;
  sub_178454((void ***)v49);
  *(void *)__int128 v49 = v40;
  sub_178454((void ***)v49);
  if (v39 < 0) {
    operator delete(__p);
  }
  sub_830DC((uint64_t)v33);
  if (v31 < 0) {
    operator delete(v28[1]);
  }
  *(void *)__int128 v49 = v27;
  sub_1784C4((void ***)v49);
  sub_83284((uint64_t)&v23);
}

void sub_1798EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_179A08( uint64_t a1, char *__s, char *a3, char *a4, char *a5, char *a6, std::string::size_type a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20, char a21, char a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, int a30, __int16 a31, char a32, char a33, char a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, void *a39, uint64_t a40, int a41, __int16 a42, char a43, char a44)
{
  v66[0] = (void **)v65;
  sub_178454(v66);
  v66[0] = (void **)v64;
  sub_178454(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_830DC((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_1784C4(v66);
  sub_7D084(&v57, __s);
  sub_8427C((uint64_t)v56, (uint64_t)a8);
  sub_17AB18(v58, 0, &v57, v56, a7, 1);
  sub_178254(a1 + 216, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_178454(v66);
  v66[0] = (void **)v64;
  sub_178454(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_830DC((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_1784C4(v66);
  sub_83284((uint64_t)v56);
  sub_7D084(&v55, a3);
  sub_8427C((uint64_t)v54, (uint64_t)a8);
  sub_17AB18(v58, 1, &v55, v54, a7, 1);
  sub_178254(a1 + 432, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_178454(v66);
  v66[0] = (void **)v64;
  sub_178454(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_830DC((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_1784C4(v66);
  sub_83284((uint64_t)v54);
  sub_7D084(&v53, a5);
  sub_8427C((uint64_t)v52, (uint64_t)a8);
  sub_17AB18(v58, 3, &v53, v52, a7, 1);
  sub_178254(a1 + 648, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_178454(v66);
  v66[0] = (void **)v64;
  sub_178454(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_830DC((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_1784C4(v66);
  sub_83284((uint64_t)v52);
  sub_3058D0(v58, 0, __s, __s, a7, 1214394677LL, 1, 0, __s, a8);
  sub_178254(a1 + 864, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_178454(v66);
  v66[0] = (void **)v64;
  sub_178454(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_830DC((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_1784C4(v66);
  sub_3058D0(v58, 1, a3, a3, a7, 1214394677LL, 1, 0, a3, a8);
  sub_178254(a1 + 1080, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_178454(v66);
  v66[0] = (void **)v64;
  sub_178454(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_830DC((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_1784C4(v66);
  sub_3058D0(v58, 2, a4, a4, a7, 1214394677LL, 1, 0, a4, a8);
  sub_178254(a1 + 1296, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_178454(v66);
  v66[0] = (void **)v64;
  sub_178454(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_830DC((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_1784C4(v66);
  sub_3058D0(v58, 3, a5, a6, a7, 1214394677LL, 1, 0, a6, a8);
  sub_178254(a1 + 1512, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_178454(v66);
  v66[0] = (void **)v64;
  sub_178454(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_830DC((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_1784C4(v66);
  sub_3058D0(v58, 0, __s, __s, a7, 1214329654LL, 1, 0, __s, a8);
  sub_178254(a1 + 1728, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_178454(v66);
  v66[0] = (void **)v64;
  sub_178454(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_830DC((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_1784C4(v66);
  sub_3058D0(v58, 1, a3, a3, a7, 1214329654LL, 1, 0, a3, a8);
  sub_178254(a1 + 1944, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_178454(v66);
  v66[0] = (void **)v64;
  sub_178454(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_830DC((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_1784C4(v66);
  sub_3058D0(v58, 2, a4, a4, a7, 1214329654LL, 1, 0, a4, a8);
  sub_178254(a1 + 2160, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_178454(v66);
  v66[0] = (void **)v64;
  sub_178454(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_830DC((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_1784C4(v66);
  sub_3058D0(v58, 3, a5, a6, a7, 1214329654LL, 1, 0, a6, a8);
  sub_178254(a1 + 2376, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_178454(v66);
  v66[0] = (void **)v64;
  sub_178454(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_830DC((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_1784C4(v66);
  sub_3058D0(v58, 0, __s, __s, a7, 1647718502LL, 1, 0, __s, a8);
  sub_178254(a1 + 2592, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_178454(v66);
  v66[0] = (void **)v64;
  sub_178454(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_830DC((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_1784C4(v66);
  sub_3058D0(v58, 1, a3, a3, a7, 1647718502LL, 1, 0, a3, a8);
  sub_178254(a1 + 2808, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_178454(v66);
  v66[0] = (void **)v64;
  sub_178454(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_830DC((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_1784C4(v66);
  sub_3058D0(v58, 2, a4, a4, a7, 1647718502LL, 1, 0, a4, a8);
  sub_178254(a1 + 3024, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_178454(v66);
  v66[0] = (void **)v64;
  sub_178454(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_830DC((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_1784C4(v66);
  sub_3058D0(v58, 3, a5, a6, a7, 1647718502LL, 1, 0, a6, a8);
  sub_178254(a1 + 3240, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_178454(v66);
  v66[0] = (void **)v64;
  sub_178454(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_830DC((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_1784C4(v66);
  sub_3058D0(v58, 0, __s, __s, a7, 1647718503LL, 1, 0, __s, a8);
  sub_178254(a1 + 3456, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_178454(v66);
  v66[0] = (void **)v64;
  sub_178454(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_830DC((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_1784C4(v66);
  sub_3058D0(v58, 1, a3, a3, a7, 1647718503LL, 1, 0, a3, a8);
  sub_178254(a1 + 3672, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_178454(v66);
  v66[0] = (void **)v64;
  sub_178454(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_830DC((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_1784C4(v66);
  sub_3058D0(v58, 2, a4, a4, a7, 1647718503LL, 1, 0, a4, a8);
  sub_178254(a1 + 3888, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_178454(v66);
  v66[0] = (void **)v64;
  sub_178454(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_830DC((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_1784C4(v66);
  sub_3058D0(v58, 3, a5, a6, a7, 1647718503LL, 1, 0, a6, a8);
  sub_178254(a1 + 4104, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_178454(v66);
  v66[0] = (void **)v64;
  sub_178454(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_830DC((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_1784C4(v66);
  sub_3058D0(v58, 0, __s, __s, a7, 0LL, 1, 0, __s, a8);
  sub_178254(a1 + 4320, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_178454(v66);
  v66[0] = (void **)v64;
  sub_178454(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_830DC((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_1784C4(v66);
  sub_3058D0(v58, 1, a3, a3, a7, 0LL, 1, 0, a3, a8);
  sub_178254(a1 + 4536, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_178454(v66);
  v66[0] = (void **)v64;
  sub_178454(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_830DC((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_1784C4(v66);
  sub_3058D0(v58, 2, a4, a4, a7, 0LL, 1, 0, a4, a8);
  sub_178254(a1 + 4752, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_178454(v66);
  v66[0] = (void **)v64;
  sub_178454(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_830DC((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_1784C4(v66);
  sub_3058D0(v58, 3, a5, a6, a7, 0LL, 1, 0, a6, a8);
  sub_178254(a1 + 4968, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_178454(v66);
  v66[0] = (void **)v64;
  sub_178454(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_830DC((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_1784C4(v66);
  sub_3058D0(v58, 0, __s, __s, a7, 1752709424LL, 0, 0, __s, a8);
  sub_178254(a1 + 5184, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_178454(v66);
  v66[0] = (void **)v64;
  sub_178454(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_830DC((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_1784C4(v66);
  sub_3058D0(v58, 1, a3, a3, a7, 1752709424LL, 0, 0, a3, a8);
  sub_178254(a1 + 5400, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_178454(v66);
  v66[0] = (void **)v64;
  sub_178454(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_830DC((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_1784C4(v66);
  sub_3058D0(v58, 2, a4, a4, a7, 1752709424LL, 0, 0, a4, a8);
  sub_178254(a1 + 5616, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_178454(v66);
  v66[0] = (void **)v64;
  sub_178454(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_830DC((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_1784C4(v66);
  sub_3058D0(v58, 3, a5, a6, a7, 1752709424LL, 0, 0, a6, a8);
  sub_178254(a1 + 5832, (uint64_t)v58);
  v66[0] = (void **)v65;
  sub_178454(v66);
  v66[0] = (void **)v64;
  sub_178454(v66);
  if (v63 < 0) {
    operator delete(__p);
  }
  sub_830DC((uint64_t)v61);
  if (v60 < 0) {
    operator delete(v59);
  }
  v66[0] = (void **)v58;
  sub_1784C4(v66);
}

void sub_17AB18(char **a1, int a2, std::string *a3, void *a4, std::string::size_type a5, BOOL a6)
{
  if (_os_feature_enabled_impl("BluetoothFeatures", "AdaptiveVolumeControl")
    && (char *)sub_17ACC4( (const char **)off_4736A0,  (const char **)off_4736D0,  (const void **)&a3->__r_.__value_.__l.__data_)
     - (char *)off_4736A0 != 48)
  {
    a6 = 1;
    sub_17AD50((uint64_t)v19, (uint64_t)a4, 1);
    sub_17AF74((uint64_t)a4, v19);
    sub_83284((uint64_t)v19);
    std::string::size_type size = a3->__r_.__value_.__s.__size_;
    int v13 = (char)size;
    if ((size & 0x80u) != 0LL) {
      std::string::size_type size = a3->__r_.__value_.__l.__size_;
    }
    if (size == 11)
    {
      if (v13 >= 0) {
        __int128 v14 = (std::string::__raw *)a3;
      }
      else {
        __int128 v14 = (std::string::__raw *)a3->__r_.__value_.__r.__words[0];
      }
      std::string::size_type v15 = v14->__words[0];
      uint64_t v16 = *(std::string::size_type *)((char *)v14->__words + 3);
      a6 = v15 != 0x74756F5F69726973LL || v16 != 0x74757074756F5F69LL;
    }

    if ((char *)sub_17ACC4( (const char **)off_4736D0,  (const char **)&unk_4736E8,  (const void **)&a3->__r_.__value_.__l.__data_)
       - (char *)off_4736D0 != 24)
    {
      sub_17AD50((uint64_t)v19, (uint64_t)a4, 2);
      sub_17AF74((uint64_t)a4, v19);
      sub_83284((uint64_t)v19);
    }

    std::string::append(a3, "_av", 3uLL);
  }

  if (a6) {
    __s = (char *)a3;
  }
  else {
    __s = 0LL;
  }
  sub_3058D0(a1, a2, (char *)a3, (char *)a3, a5, 1633759844LL, 1, 1, __s, a4);
}

const char **sub_17ACC4(const char **a1, const char **a2, const void **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    char v5 = *((_BYTE *)a3 + 23);
    if (v5 >= 0) {
      size_t v6 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v6 = (size_t)a3[1];
    }
    if (v5 >= 0) {
      BOOL v7 = a3;
    }
    else {
      BOOL v7 = *a3;
    }
    while (v6 != strlen(*v3) || memcmp(v7, *v3, v6))
    {
      if (++v3 == a2) {
        return a2;
      }
    }
  }

  return v3;
}

void sub_17AD50(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v6 = *(void *)(sub_8427C(a1, a2) + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v3 = a3;
      if (v6 <= a3) {
        unint64_t v3 = a3 % v6;
      }
    }

    else
    {
      unint64_t v3 = (v6 - 1) & a3;
    }

    __int128 v8 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v8)
    {
      __int128 v9 = *v8;
      if (*v8)
      {
        do
        {
          unint64_t v10 = v9[1];
          if (v10 == a3)
          {
            if (*((_DWORD *)v9 + 4) == a3) {
              goto LABEL_40;
            }
          }

          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v10 >= v6) {
                v10 %= v6;
              }
            }

            else
            {
              v10 &= v6 - 1;
            }

            if (v10 != v3) {
              break;
            }
          }

          __int128 v9 = (void *)*v9;
        }

        while (v9);
      }
    }
  }

  __int128 v9 = operator new(0x18uLL);
  *__int128 v9 = 0LL;
  v9[1] = a3;
  *((_DWORD *)v9 + 4) = a3;
  *((_BYTE *)v9 + 20) = 0;
  float v11 = (float)(unint64_t)(*(void *)(a1 + 24) + 1LL);
  float v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    BOOL v13 = 1LL;
    if (v6 >= 3) {
      BOOL v13 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v14 = v13 | (2 * v6);
    unint64_t v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15) {
      size_t v16 = v15;
    }
    else {
      size_t v16 = v14;
    }
    sub_52168(a1, v16);
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= a3) {
        unint64_t v3 = a3 % v6;
      }
      else {
        unint64_t v3 = a3;
      }
    }

    else
    {
      unint64_t v3 = (v6 - 1) & a3;
    }
  }

  uint64_t v17 = *(void *)a1;
  uint64_t v18 = *(void **)(*(void *)a1 + 8 * v3);
  if (v18)
  {
    *__int128 v9 = *v18;
LABEL_38:
    void *v18 = v9;
    goto LABEL_39;
  }

  *__int128 v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v9;
  *(void *)(v17 + 8 * v3) = a1 + 16;
  if (*v9)
  {
    unint64_t v19 = *(void *)(*v9 + 8LL);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v19 >= v6) {
        v19 %= v6;
      }
    }

    else
    {
      v19 &= v6 - 1;
    }

    uint64_t v18 = (void *)(*(void *)a1 + 8 * v19);
    goto LABEL_38;
  }

void sub_17AF50(_Unwind_Exception *a1)
{
}

void sub_17AF74(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v4 = *(void **)(a1 + 16);
    if (v4)
    {
      do
      {
        char v5 = (void *)*v4;
        operator delete(v4);
        uint64_t v4 = v5;
      }

      while (v5);
    }

    *(void *)(a1 + 16) = 0LL;
    uint64_t v6 = *(void *)(a1 + 8);
    if (v6)
    {
      for (uint64_t i = 0LL; i != v6; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0LL;
    }

    *(void *)(a1 + 24) = 0LL;
  }

  uint64_t v8 = *a2;
  *a2 = 0LL;
  __int128 v9 = *(void **)a1;
  *(void *)a1 = v8;
  if (v9) {
    operator delete(v9);
  }
  uint64_t v12 = a2[2];
  float v11 = a2 + 2;
  uint64_t v10 = v12;
  uint64_t v13 = *(v11 - 1);
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 8) = v13;
  *(v11 - 1) = 0LL;
  uint64_t v14 = v11[1];
  *(void *)(a1 + 24) = v14;
  *(_DWORD *)(a1 + sub_7A768(v9 - 32) = *((_DWORD *)v11 + 4);
  if (v14)
  {
    unint64_t v15 = *(void *)(v10 + 8);
    unint64_t v16 = *(void *)(a1 + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v15 >= v16) {
        v15 %= v16;
      }
    }

    else
    {
      v15 &= v16 - 1;
    }

    *(void *)(*(void *)a1 + 8 * v15) = a1 + 16;
    *float v11 = 0LL;
    v11[1] = 0LL;
  }

#error "17B188: call analysis failed (funcsize=176)"
void sub_17B348( _Unwind_Exception *a1,  uint64_t a2,  uint64_t a3,  uint64_t a4,  uint64_t a5,  uint64_t a6,  uint64_t a7,  uint64_t a8,  uint64_t a9,  uint64_t a10,  uint64_t a11,  uint64_t a12,  uint64_t a13,  char a14)
{
  void **v14;
  sub_83284((uint64_t)&a14);
  sub_83284((uint64_t)&a9);
  sub_179218(v14);
  _Unwind_Resume(a1);
}

void sub_17B380(uint64_t a1, char **a2, char **a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void *)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_17912C((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      sub_7A87C();
    }
    unint64_t v10 = 0x5555555555555556LL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_8D400((void *)a1, v11);
    uint64_t v12 = sub_17BA18(v8, (uint64_t)a2, (uint64_t)a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }

  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 8) - v9) >> 3) < a4)
  {
    uint64_t v13 = &a2[(*(void *)(a1 + 8) - v9) >> 3];
    sub_17B8A0(a2, v13, v9);
    uint64_t v12 = sub_17BA18(v8, (uint64_t)v13, (uint64_t)a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }

  uint64_t v14 = sub_17B8A0(a2, a3, v9);
  unint64_t v15 = *(char ***)(a1 + 8);
  if (v15 != v14)
  {
    unint64_t v16 = *(char ***)(a1 + 8);
    do
    {
      uint64_t v18 = *(v16 - 3);
      v16 -= 3;
      uint64_t v17 = v18;
      if (v18)
      {
        *(v15 - 2) = v17;
        operator delete(v17);
      }

      unint64_t v15 = v16;
    }

    while (v16 != v14);
  }

  *(void *)(a1 + 8) = v14;
}

void sub_17B4E4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_17B4EC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_17B4F4(std::string *__dst, std::string *__str)
{
  if (__dst[3].__r_.__value_.__s.__data_[0] == __str[3].__r_.__value_.__s.__data_[0])
  {
    if (__dst[3].__r_.__value_.__s.__data_[0])
    {
      std::string::operator=(__dst, __str);
      std::string::operator=(__dst + 1, __str + 1);
      std::string::operator=(__dst + 2, __str + 2);
    }
  }

  else if (__dst[3].__r_.__value_.__s.__data_[0])
  {
    sub_1791C0((uint64_t)__dst);
  }

  else
  {
    sub_17B7BC((char *)__dst, (__int128 *)__str);
    __dst[3].__r_.__value_.__s.__data_[0] = 1;
  }

uint64_t sub_17B57C(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = *(void **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_179164((void **)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      sub_7A87C();
    }
    unint64_t v9 = 0x5555555555555556LL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v9 <= a4) {
      unint64_t v9 = a4;
    }
    else {
      unint64_t v10 = v9;
    }
    uint64_t result = (uint64_t)sub_8D400((void *)a1, v10);
    uint64_t v12 = *(void *)(a1 + 8);
    while (v6 != a3)
    {
      uint64_t v13 = v6[1];
      *(void *)uint64_t v12 = *v6;
      *(void *)(v12 + 8) = v13;
      if (v13)
      {
        uint64_t v14 = (unint64_t *)(v13 + 8);
        do
          unint64_t v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }

      *(_DWORD *)(v12 + 16) = *((_DWORD *)v6 + 4);
      v6 += 3;
      v12 += 24LL;
    }

uint64_t sub_17B714(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    char v5 = a1;
    do
    {
      uint64_t v7 = *v5;
      uint64_t v6 = v5[1];
      if (v6)
      {
        uint64_t v8 = (unint64_t *)(v6 + 8);
        do
          unint64_t v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }

      unint64_t v10 = *(std::__shared_weak_count **)(a3 + 8);
      *(void *)a3 = v7;
      *(void *)(a3 + 8) = v6;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          unint64_t v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }

      *(_DWORD *)(a3 + 16) = *((_DWORD *)v5 + 4);
      v5 += 3;
      a3 += 24LL;
    }

    while (v5 != a2);
  }

  return a3;
}

char *sub_17B7BC(char *__dst, __int128 *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_24054(__dst, *(void **)a2, *((void *)a2 + 1));
  }

  else
  {
    __int128 v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__int128 __dst = v4;
  }

  if (*((char *)a2 + 47) < 0)
  {
    sub_24054(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }

  else
  {
    __int128 v5 = *(__int128 *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }

  uint64_t v6 = __dst + 48;
  if (*((char *)a2 + 71) < 0)
  {
    sub_24054(v6, *((void **)a2 + 6), *((void *)a2 + 7));
  }

  else
  {
    __int128 v7 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *(_OWORD *)uint64_t v6 = v7;
  }

  return __dst;
}

void sub_17B86C(_Unwind_Exception *exception_object)
{
}

char **sub_17B8A0(char **a1, char **a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a1 != a2)
  {
    __int128 v4 = a2;
    __int128 v5 = a1;
    uint64_t v6 = (char **)(a3 + 8);
    while (v5 == v6 - 1)
    {
LABEL_26:
      v5 += 3;
      v3 += 24LL;
      v6 += 3;
      if (v5 == v4) {
        return v6 - 1;
      }
    }

    __int128 v7 = *v5;
    uint64_t v8 = v5[1];
    int64_t v9 = v8 - *v5;
    unint64_t v10 = v9 >> 3;
    uint64_t v11 = (uint64_t)v6[1];
    unint64_t v12 = *(v6 - 1);
    if (v9 >> 3 > (unint64_t)((v11 - (uint64_t)v12) >> 3))
    {
      if (v12)
      {
        _BYTE *v6 = v12;
        operator delete(v12);
        uint64_t v11 = 0LL;
        *(v6 - 1) = 0LL;
        _BYTE *v6 = 0LL;
        v6[1] = 0LL;
      }

      if (v9 < 0) {
        sub_7A87C();
      }
      uint64_t v13 = v11 >> 2;
      if (v11 >> 2 <= v10) {
        uint64_t v13 = v9 >> 3;
      }
      else {
        unint64_t v14 = v13;
      }
      sub_7E420(v6 - 1, v14);
      unint64_t v12 = *v6;
      if (v8 != v7) {
        memmove(*v6, v7, v9);
      }
      unint64_t v15 = v6;
      goto LABEL_25;
    }

    unint64_t v15 = (char **)(v3 + 8);
    int64_t v16 = *v6 - v12;
    uint64_t v17 = v16 >> 3;
    if (v16 >> 3 >= v10)
    {
      if (v8 == v7)
      {
LABEL_24:
        __int128 v4 = a2;
LABEL_25:
        *unint64_t v15 = &v12[v9];
        goto LABEL_26;
      }

      unint64_t v19 = *(v6 - 1);
      uint64_t v18 = *v5;
    }

    else
    {
      if (*v6 != v12)
      {
        memmove(*(v6 - 1), *v5, v16);
        unint64_t v12 = *v6;
      }

      uint64_t v18 = &v7[8 * v17];
      int64_t v9 = v8 - v18;
      if (v8 == v18) {
        goto LABEL_24;
      }
      unint64_t v19 = v12;
    }

    memmove(v19, v18, v9);
    goto LABEL_24;
  }

  return (char **)v3;
}

void *sub_17BA18(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  __int128 v4 = a4;
  unint64_t v14 = a4;
  unint64_t v15 = a4;
  v12[0] = a1;
  v12[1] = &v14;
  _OWORD v12[2] = &v15;
  char v13 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      void *v4 = 0LL;
      v4[1] = 0LL;
      v4[2] = 0LL;
      uint64_t v8 = *(const void **)v6;
      uint64_t v7 = *(void *)(v6 + 8);
      int64_t v9 = v7 - *(void *)v6;
      if (v7 != *(void *)v6)
      {
        sub_7E420(v4, v9 >> 3);
        unint64_t v10 = (char *)v4[1];
        memmove(v10, v8, v9);
        v4[1] = &v10[8 * (v9 >> 3)];
        __int128 v4 = v15;
      }

      v4 += 3;
      unint64_t v15 = v4;
      v6 += 24LL;
    }

    while (v6 != a3);
  }

  char v13 = 1;
  sub_149F70((uint64_t)v12);
  return v4;
}

void sub_17BAE8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }

  sub_149F70((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_17BB0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v24 = a4;
  uint64_t v25 = a3;
  uint64_t v23 = a5;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + sub_7A768(v9 - 32) = 0u;
  *(_OWORD *)(a1 + sub_51FA0(v10 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + sub_88540(v26 - 112) = 0u;
  *(_OWORD *)(a1 + sub_51FA0(v10 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + sub_67FE8(v33 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 2sub_7BFE0(v23 - 88) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  sub_17BEE0((void *)a1, a2, a3, a4);
  uint64_t v9 = operator new(0x80uLL);
  LODWORD(sub_FAA90(v24, v22) = -1052770304;
  BYTE4(sub_FAA90(v24, v22) = 1;
  uint64_t v20 = a2 + 6048;
  char v21 = 1;
  sub_2CE400((uint64_t)v9, 0LL, "", &v22, &qword_401C30, &v20, &xmmword_401C38, (uint64_t)&unk_401C48);
  *(void *)(a1 + 2sub_51FA0(v10 + 48) = v9;
  unint64_t v10 = operator new(0x80uLL);
  LODWORD(sub_FAA90(v24, v22) = -1041235968;
  BYTE4(sub_FAA90(v24, v22) = 1;
  uint64_t v20 = a2 + 6048;
  char v21 = 1;
  sub_2CE400((uint64_t)v10, 0LL, "", &v22, &qword_401C30, &v20, &xmmword_401C38, (uint64_t)&unk_401C48);
  *(void *)(a1 + 256) = v10;
  uint64_t v11 = operator new(0x80uLL);
  LODWORD(v20) = -1052770304;
  BYTE4(v20) = 1;
  sub_2CE400((uint64_t)v11, 0LL, "", &v20, &qword_401C30, (uint64_t *)&unk_401C78, &xmmword_401C38, (uint64_t)&unk_401C48);
  *(void *)(a1 + 264) = v11;
  unint64_t v12 = operator new(0x80uLL);
  LODWORD(sub_FAA90(v24, v22) = -1041235968;
  BYTE4(sub_FAA90(v24, v22) = 1;
  uint64_t v20 = a2 + 6480;
  char v21 = 1;
  sub_2CE400((uint64_t)v12, 0LL, "", &v22, &qword_401C30, &v20, &xmmword_401C38, (uint64_t)&unk_401C48);
  *(void *)(a1 + 272) = v12;
  char v13 = operator new(0x80uLL);
  uint64_t v20 = a2 + 6264;
  char v21 = 1;
  sub_2CE400( (uint64_t)v13,  0LL,  &qword_401C88,  &qword_401C90,  &qword_401C98,  &v20,  &xmmword_401CA0,  (uint64_t)&unk_401C48);
  *(void *)(a1 + sub_67FE8(v33 + 240) = v13;
  unint64_t v14 = operator new(0x80uLL);
  sub_2CE400((uint64_t)v14, 0LL, "", &v23, &qword_401C30, (uint64_t *)&unk_401C78, &xmmword_401C38, (uint64_t)&unk_401C48);
  *(void *)(a1 + 312) = v14;
  unint64_t v15 = operator new(0x80uLL);
  sub_2CE400((uint64_t)v15, 0LL, &v24, &v25, &qword_401C30, (uint64_t *)&unk_401C78, &xmmword_401C38, a6);
  *(void *)(a1 + 2sub_7BFE0(v23 - 88) = v15;
  int64_t v16 = operator new(0x80uLL);
  uint64_t v20 = a2 + 6048;
  char v21 = 1;
  sub_2CE400((uint64_t)v16, 0LL, "", &qword_401CB0, &qword_401C30, &v20, &xmmword_401C38, (uint64_t)&unk_401C48);
  *(void *)(a1 + 296) = v16;
  uint64_t v17 = operator new(0x80uLL);
  LODWORD(v20) = -1038090240;
  BYTE4(v20) = 1;
  sub_2CE400((uint64_t)v17, 0LL, "", &v20, &qword_401C30, (uint64_t *)&unk_401C78, &xmmword_401C38, (uint64_t)&unk_401C48);
  *(void *)(a1 + 304) = v17;
  uint64_t v18 = operator new(0x80uLL);
  LODWORD(v20) = 0;
  BYTE4(v20) = 1;
  uint64_t result = sub_2CE400( (uint64_t)v18,  0LL,  "",  &v20,  &qword_401C30,  (uint64_t *)&unk_401C78,  &xmmword_401C38,  (uint64_t)&unk_401C48);
  *(void *)(a1 + 280) = v18;
  return result;
}

void sub_17BEA8(_Unwind_Exception *a1)
{
}

uint64_t sub_17BEE0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = a4;
  uint64_t v40 = a3;
  uint64_t v6 = operator new(0x80uLL);
  uint64_t v37 = a2 + 4320;
  char v38 = 1;
  sub_2CE400((uint64_t)v6, 0LL, "", &qword_401CB0, &qword_401C30, &v37, &xmmword_401C38, (uint64_t)&unk_401C48);
  a1[1] = v6;
  uint64_t v7 = operator new(0x80uLL);
  uint64_t v37 = a2 + 4536;
  char v38 = 1;
  sub_2CE400((uint64_t)v7, 0LL, "", &qword_401CB0, &qword_401C30, &v37, &xmmword_401C38, (uint64_t)&unk_401C48);
  a1[2] = v7;
  uint64_t v8 = operator new(0x80uLL);
  uint64_t v37 = a2 + 4752;
  char v38 = 1;
  sub_2CE400((uint64_t)v8, 0LL, "", &qword_401CB0, &qword_401C30, &v37, &xmmword_401C38, (uint64_t)&unk_401C48);
  a1[3] = v8;
  uint64_t v9 = operator new(0x80uLL);
  uint64_t v37 = a2 + 4968;
  char v38 = 1;
  sub_2CE400((uint64_t)v9, 0LL, "", &qword_401CB0, &qword_401C30, &v37, &xmmword_401C38, (uint64_t)&unk_401C48);
  a1[4] = v9;
  unint64_t v10 = operator new(0x80uLL);
  uint64_t v37 = a2 + 4320;
  char v38 = 1;
  sub_2CE400((uint64_t)v10, 0LL, "", &qword_401CB0, &qword_401C30, &v37, &xmmword_401C38, (uint64_t)&unk_401C48);
  a1[5] = v10;
  uint64_t v11 = operator new(0x80uLL);
  uint64_t v37 = a2;
  char v38 = 1;
  sub_2CE400( (uint64_t)v11,  0LL,  &qword_401C88,  &qword_401C90,  &qword_401C98,  &v37,  &xmmword_401CA0,  (uint64_t)&unk_401C48);
  *a1 = v11;
  unint64_t v12 = operator new(0x80uLL);
  uint64_t v37 = a2 + 216;
  char v38 = 1;
  sub_2CE400( (uint64_t)v12,  0LL,  &qword_401C88,  &qword_401C90,  &qword_401C98,  &v37,  &xmmword_401CA0,  (uint64_t)&unk_401C48);
  a1[6] = v12;
  char v13 = operator new(0x80uLL);
  uint64_t v37 = a2 + 432;
  char v38 = 1;
  sub_2CE400((uint64_t)v13, 0LL, "", &qword_401CB0, &qword_401C30, &v37, &xmmword_401C38, (uint64_t)&unk_401C48);
  a1[7] = v13;
  unint64_t v14 = operator new(0x80uLL);
  uint64_t v37 = a2 + 648;
  char v38 = 1;
  sub_2CE400((uint64_t)v14, 0LL, "", &qword_401CB0, &qword_401C30, &v37, &xmmword_401C38, (uint64_t)&unk_401C48);
  a1[8] = v14;
  unint64_t v15 = operator new(0x80uLL);
  uint64_t v37 = a2 + 4320;
  char v38 = 1;
  sub_2CE400((uint64_t)v15, 0LL, &v39, &v40, &qword_401C30, &v37, &xmmword_401C38, (uint64_t)&unk_401C48);
  a1[9] = v15;
  int64_t v16 = operator new(0x80uLL);
  uint64_t v37 = a2 + 1728;
  char v38 = 1;
  sub_2CE400((uint64_t)v16, 0LL, "", &qword_401CB0, &qword_401C30, &v37, &xmmword_401C38, (uint64_t)&unk_401C48);
  a1[10] = v16;
  uint64_t v17 = operator new(0x80uLL);
  uint64_t v37 = a2 + 1944;
  char v38 = 1;
  sub_2CE400((uint64_t)v17, 0LL, "", &qword_401CB0, &qword_401C30, &v37, &xmmword_401C38, (uint64_t)&unk_401C48);
  a1[11] = v17;
  uint64_t v18 = operator new(0x80uLL);
  uint64_t v37 = a2 + 2160;
  char v38 = 1;
  sub_2CE400((uint64_t)v18, 0LL, "", &qword_401CB0, &qword_401C30, &v37, &xmmword_401C38, (uint64_t)&unk_401C48);
  a1[12] = v18;
  unint64_t v19 = operator new(0x80uLL);
  uint64_t v37 = a2 + 2376;
  char v38 = 1;
  sub_2CE400((uint64_t)v19, 0LL, "", &qword_401CB0, &qword_401C30, &v37, &xmmword_401C38, (uint64_t)&unk_401C48);
  a1[13] = v19;
  uint64_t v20 = operator new(0x80uLL);
  uint64_t v37 = a2 + 864;
  char v38 = 1;
  sub_2CE400((uint64_t)v20, 0LL, "", &qword_401CB0, &qword_401C30, &v37, &xmmword_401C38, (uint64_t)&unk_401C48);
  a1[14] = v20;
  char v21 = operator new(0x80uLL);
  uint64_t v37 = a2 + 1080;
  char v38 = 1;
  sub_2CE400((uint64_t)v21, 0LL, "", &qword_401CB0, &qword_401C30, &v37, &xmmword_401C38, (uint64_t)&unk_401C48);
  a1[15] = v21;
  uint64_t v22 = operator new(0x80uLL);
  uint64_t v37 = a2 + 1296;
  char v38 = 1;
  sub_2CE400((uint64_t)v22, 0LL, "", &qword_401CB0, &qword_401C30, &v37, &xmmword_401C38, (uint64_t)&unk_401C48);
  a1[16] = v22;
  uint64_t v23 = operator new(0x80uLL);
  uint64_t v37 = a2 + 1512;
  char v38 = 1;
  sub_2CE400((uint64_t)v23, 0LL, "", &qword_401CB0, &qword_401C30, &v37, &xmmword_401C38, (uint64_t)&unk_401C48);
  a1[17] = v23;
  uint64_t v24 = operator new(0x80uLL);
  uint64_t v37 = a2 + 2592;
  char v38 = 1;
  sub_2CE400((uint64_t)v24, 0LL, "", &qword_401CB0, &qword_401C30, &v37, &xmmword_401C38, (uint64_t)&unk_401C48);
  a1[18] = v24;
  uint64_t v25 = operator new(0x80uLL);
  uint64_t v37 = a2 + 2808;
  char v38 = 1;
  sub_2CE400((uint64_t)v25, 0LL, "", &qword_401CB0, &qword_401C30, &v37, &xmmword_401C38, (uint64_t)&unk_401C48);
  a1[19] = v25;
  std::string v26 = operator new(0x80uLL);
  uint64_t v37 = a2 + 3024;
  char v38 = 1;
  sub_2CE400((uint64_t)v26, 0LL, "", &qword_401CB0, &qword_401C30, &v37, &xmmword_401C38, (uint64_t)&unk_401C48);
  a1[20] = v26;
  AudioObjectID v27 = operator new(0x80uLL);
  uint64_t v37 = a2 + 3240;
  char v38 = 1;
  sub_2CE400((uint64_t)v27, 0LL, "", &qword_401CB0, &qword_401C30, &v37, &xmmword_401C38, (uint64_t)&unk_401C48);
  a1[21] = v27;
  __int128 v28 = operator new(0x80uLL);
  uint64_t v37 = a2 + 3456;
  char v38 = 1;
  sub_2CE400((uint64_t)v28, 0LL, "", &qword_401CB0, &qword_401C30, &v37, &xmmword_401C38, (uint64_t)&unk_401C48);
  a1[22] = v28;
  __int16 v29 = operator new(0x80uLL);
  uint64_t v37 = a2 + 3672;
  char v38 = 1;
  sub_2CE400((uint64_t)v29, 0LL, "", &qword_401CB0, &qword_401C30, &v37, &xmmword_401C38, (uint64_t)&unk_401C48);
  a1[23] = v29;
  char v30 = operator new(0x80uLL);
  uint64_t v37 = a2 + 3888;
  char v38 = 1;
  sub_2CE400((uint64_t)v30, 0LL, "", &qword_401CB0, &qword_401C30, &v37, &xmmword_401C38, (uint64_t)&unk_401C48);
  a1[24] = v30;
  char v31 = operator new(0x80uLL);
  uint64_t v37 = a2 + 4104;
  char v38 = 1;
  sub_2CE400((uint64_t)v31, 0LL, "", &qword_401CB0, &qword_401C30, &v37, &xmmword_401C38, (uint64_t)&unk_401C48);
  a1[25] = v31;
  uint64_t v32 = operator new(0x80uLL);
  uint64_t v37 = a2 + 5184;
  char v38 = 1;
  sub_2CE400((uint64_t)v32, 0LL, "", &qword_401CB0, &qword_401C30, &v37, &xmmword_401C38, (uint64_t)&unk_401C48);
  a1[26] = v32;
  uint64_t v33 = operator new(0x80uLL);
  uint64_t v37 = a2 + 5400;
  char v38 = 1;
  sub_2CE400((uint64_t)v33, 0LL, "", &qword_401CB0, &qword_401C30, &v37, &xmmword_401C38, (uint64_t)&unk_401C48);
  a1[27] = v33;
  int v34 = operator new(0x80uLL);
  uint64_t v37 = a2 + 5616;
  char v38 = 1;
  sub_2CE400((uint64_t)v34, 0LL, "", &qword_401CB0, &qword_401C30, &v37, &xmmword_401C38, (uint64_t)&unk_401C48);
  a1[28] = v34;
  __int16 v35 = operator new(0x80uLL);
  uint64_t v37 = a2 + 5832;
  char v38 = 1;
  uint64_t result = sub_2CE400((uint64_t)v35, 0LL, "", &qword_401CB0, &qword_401C30, &v37, &xmmword_401C38, (uint64_t)&unk_401C48);
  a1[29] = v35;
  return result;
}

void sub_17C894(_Unwind_Exception *a1)
{
}

uint64_t sub_17C91C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + sub_67FE8(v33 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + sub_51FA0(v10 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + sub_88540(v26 - 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + sub_7A768(v9 - 32) = 0u;
  *(_OWORD *)(a1 + sub_51FA0(v10 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_17BEE0((void *)a1, a2, a3, a4);
  uint64_t v6 = operator new(0x80uLL);
  LODWORD(v11) = -1052770304;
  BYTE4(v11) = 1;
  uint64_t v9 = a2 + 6048;
  char v10 = 1;
  sub_2CE400((uint64_t)v6, 0LL, "", &v11, &qword_401C30, &v9, &xmmword_401C38, (uint64_t)&unk_401C48);
  *(void *)(a1 + sub_67FE8(v33 + 240) = v6;
  uint64_t v7 = operator new(0x80uLL);
  LODWORD(v11) = -1041235968;
  BYTE4(v11) = 1;
  uint64_t v9 = a2 + 6264;
  char v10 = 1;
  uint64_t result = sub_2CE400((uint64_t)v7, 0LL, "", &v11, &qword_401C30, &v9, &xmmword_401C38, (uint64_t)&unk_401C48);
  *(void *)(a1 + 2sub_51FA0(v10 + 48) = v7;
  return result;
}

void sub_17CA30(_Unwind_Exception *a1)
{
}

void sub_17CA48(uint64_t a1, uint64_t a2)
{
  qword_4A8A30 = 0LL;
  qword_4A8A48 = 0LL;
  qword_4A8A28 = (uint64_t)&qword_4A8A30;
  qword_4A8A38 = 0LL;
  unk_4A8A40 = &qword_4A8A48;
  qword_4A8A60 = 0LL;
  qword_4A8A68 = 0LL;
  qword_4A8A50 = 0LL;
  unk_4A8A58 = &qword_4A8A60;
  uint64_t v18 = 0x696D646600000001LL;
  __int128 v19 = *(_OWORD *)sub_2FC95C();
  int v20 = 0;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  std::string __p = 0LL;
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A8358);
  uint64_t v18 = 0x696D646600000001LL;
  *(void *)&__int128 v19 = 2LL;
  DWORD2(v19) = 0;
  int v20 = 0;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  std::string __p = 0LL;
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A8250);
  uint64_t v18 = 0x696D646600000001LL;
  __int128 v19 = *(_OWORD *)sub_2FC95C();
  int v20 = 0;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  std::string __p = 0LL;
  sub_2D6400((uint64_t)&qword_4A8A28, (int *)&v18, a2, 0);
  sub_DB44C((uint64_t)&v18, 1, 1768776806, 1214394677);
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A83C0);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  DWORD2(sub_9DCB8(v25, v24) = 0;
  *(void *)&__int128 v24 = 2LL;
  sub_17E44C((uint64_t)&v18, 1768776806, &v24, 1214394677);
  __int128 v4 = &unk_4A8000;
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A82B8);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  sub_DB44C((uint64_t)&v18, 1, 1768776806, 1214329654);
  __int128 v5 = &unk_4A8000;
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A83A0);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  DWORD2(sub_9DCB8(v25, v24) = 0;
  *(void *)&__int128 v24 = 2LL;
  sub_17E44C((uint64_t)&v18, 1768776806, &v24, 1214329654);
  uint64_t v6 = &unk_4A8000;
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A8298);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  sub_DB44C((uint64_t)&v18, 1, 1768776806, 1647718502);
  uint64_t v7 = &unk_4A8000;
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A83E0);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  DWORD2(sub_9DCB8(v25, v24) = 0;
  *(void *)&__int128 v24 = 2LL;
  sub_17E44C((uint64_t)&v18, 1768776806, &v24, 1647718502);
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A82D8);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  sub_DB44C((uint64_t)&v18, 1, 1768776806, 1647718503);
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A8400);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  DWORD2(sub_9DCB8(v25, v24) = 0;
  *(void *)&__int128 v24 = 2LL;
  sub_17E44C((uint64_t)&v18, 1768776806, &v24, 1647718503);
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A82F8);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  sub_DB44C((uint64_t)&v18, 1, 1768776806, 1752709424);
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A8420);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  DWORD2(sub_9DCB8(v25, v24) = 0;
  *(void *)&__int128 v24 = 2LL;
  sub_17E44C((uint64_t)&v18, 1768776806, &v24, 1752709424);
  uint64_t v8 = &unk_4A8000;
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A8318);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  sub_DB44C((uint64_t)&v18, 1, 1768776806, 1752709424);
  sub_2D6400((uint64_t)&qword_4A8A28, (int *)&v18, a1, 0);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  if ((sub_1CA280() & 1) != 0
    || MGGetBoolAnswer(@"YiUtBQygkHRhLcdO3LFB4A")
    && MGGetBoolAnswer(@"DeviceSupportsUSBTypeC"))
  {
    char v9 = 0;
    *(void *)&__int128 v24 = 0x4864667468646674LL;
    uint64_t v10 = 1LL;
    uint64_t v11 = (int *)&v24;
    do
    {
      char v12 = v9;
      sub_DB44C((uint64_t)&v18, 1, 1768776806, *v11);
      sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A8358);
      if (__p)
      {
        uint64_t v22 = __p;
        operator delete(__p);
      }

      sub_DB44C((uint64_t)&v18, 1, 1768776806, *v11);
      sub_2D6400((uint64_t)&qword_4A8A28, (int *)&v18, (uint64_t)&unk_401BD8, 0);
      if (__p)
      {
        uint64_t v22 = __p;
        operator delete(__p);
      }

      uint64_t v11 = (int *)&v24 + v10;
      char v9 = 1;
      uint64_t v10 = 2LL;
    }

    while ((v12 & 1) == 0);
    uint64_t v8 = (void *)&unk_4A8000;
    __int128 v4 = (void *)&unk_4A8000;
    __int128 v5 = (void *)&unk_4A8000;
    uint64_t v6 = (void *)&unk_4A8000;
    uint64_t v7 = (void *)&unk_4A8000;
  }

  uint64_t v17 = (uint64_t **)&qword_4A8A28;
  sub_17E4B0(&v17, 1768776806);
  for (uint64_t i = 0LL; i != 20; i += 4LL)
    sub_17E4B0(&v17, *(_DWORD *)&aOvpvivpvcgpvcv_0[i]);
  for (uint64_t j = 0LL; j != 12; j += 4LL)
    sub_17E4B0(&v17, *(_DWORD *)&aOvpvivpvcgpvcv_0[j + 20]);
  uint64_t v18 = 0x696D646600000001LL;
  *(void *)&__int128 v19 = 1LL;
  DWORD2(v19) = 0;
  int v20 = 0;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  std::string __p = 0LL;
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A8360);
  uint64_t v18 = 0x696D646600000001LL;
  *(void *)&__int128 v19 = 3LL;
  DWORD2(v19) = 0;
  int v20 = 0;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  std::string __p = 0LL;
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A8258);
  DWORD2(sub_9DCB8(v25, v24) = 0;
  *(void *)&__int128 v24 = 1LL;
  sub_17E44C((uint64_t)&v18, 1768776806, &v24, 1214394677);
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A83C8);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  DWORD2(sub_9DCB8(v25, v24) = 0;
  *(void *)&__int128 v24 = 3LL;
  sub_17E44C((uint64_t)&v18, 1768776806, &v24, 1214394677);
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A82C0);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  DWORD2(sub_9DCB8(v25, v24) = 0;
  *(void *)&__int128 v24 = 1LL;
  sub_17E44C((uint64_t)&v18, 1768776806, &v24, 1214329654);
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A83A8);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  DWORD2(sub_9DCB8(v25, v24) = 0;
  *(void *)&__int128 v24 = 3LL;
  sub_17E44C((uint64_t)&v18, 1768776806, &v24, 1214329654);
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A82A0);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  DWORD2(sub_9DCB8(v25, v24) = 0;
  *(void *)&__int128 v24 = 1LL;
  sub_17E44C((uint64_t)&v18, 1768776806, &v24, 1647718502);
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A83E8);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  DWORD2(sub_9DCB8(v25, v24) = 0;
  *(void *)&__int128 v24 = 3LL;
  sub_17E44C((uint64_t)&v18, 1768776806, &v24, 1647718502);
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A82E0);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  DWORD2(sub_9DCB8(v25, v24) = 0;
  *(void *)&__int128 v24 = 1LL;
  sub_17E44C((uint64_t)&v18, 1768776806, &v24, 1647718503);
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A8408);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  DWORD2(sub_9DCB8(v25, v24) = 0;
  *(void *)&__int128 v24 = 3LL;
  sub_17E44C((uint64_t)&v18, 1768776806, &v24, 1647718503);
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A8300);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  DWORD2(sub_9DCB8(v25, v24) = 0;
  *(void *)&__int128 v24 = 1LL;
  sub_17E44C((uint64_t)&v18, 1768776806, &v24, 1752709424);
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A8428);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  DWORD2(sub_9DCB8(v25, v24) = 0;
  *(void *)&__int128 v24 = 3LL;
  sub_17E44C((uint64_t)&v18, 1768776806, &v24, 1752709424);
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A8320);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  uint64_t v18 = 0x6D6F767000000001LL;
  *(void *)&__int128 v19 = 1LL;
  DWORD2(v19) = 0;
  int v20 = 0;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  std::string __p = 0LL;
  sub_2D5F80((uint64_t **)&qword_4A8A28, &v18, qword_4A8370);
  uint64_t v18 = 0x6D6F767000000001LL;
  *(void *)&__int128 v19 = 3LL;
  DWORD2(v19) = 0;
  int v20 = 0;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  std::string __p = 0LL;
  sub_2D5F80((uint64_t **)&qword_4A8A28, &v18, qword_4A8268);
  DWORD2(sub_9DCB8(v25, v24) = 0;
  *(void *)&__int128 v24 = 1LL;
  sub_17E44C((uint64_t)&v18, 1836021360, &v24, 1214394677);
  sub_2D5F80((uint64_t **)&qword_4A8A28, &v18, qword_4A83D8);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  DWORD2(sub_9DCB8(v25, v24) = 0;
  *(void *)&__int128 v24 = 3LL;
  sub_17E44C((uint64_t)&v18, 1836021360, &v24, 1214394677);
  sub_2D5F80((uint64_t **)&qword_4A8A28, &v18, qword_4A82D0);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  DWORD2(sub_9DCB8(v25, v24) = 0;
  *(void *)&__int128 v24 = 1LL;
  sub_17E44C((uint64_t)&v18, 1836021360, &v24, 1214329654);
  sub_2D5F80((uint64_t **)&qword_4A8A28, &v18, qword_4A83B8);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  DWORD2(sub_9DCB8(v25, v24) = 0;
  *(void *)&__int128 v24 = 3LL;
  sub_17E44C((uint64_t)&v18, 1836021360, &v24, 1214329654);
  sub_2D5F80((uint64_t **)&qword_4A8A28, &v18, qword_4A82B0);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  DWORD2(sub_9DCB8(v25, v24) = 0;
  *(void *)&__int128 v24 = 1LL;
  sub_17E44C((uint64_t)&v18, 1836021360, &v24, 1647718502);
  sub_2D5F80((uint64_t **)&qword_4A8A28, &v18, qword_4A83F8);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  DWORD2(sub_9DCB8(v25, v24) = 0;
  *(void *)&__int128 v24 = 3LL;
  sub_17E44C((uint64_t)&v18, 1836021360, &v24, 1647718502);
  sub_2D5F80((uint64_t **)&qword_4A8A28, &v18, qword_4A82F0);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  DWORD2(sub_9DCB8(v25, v24) = 0;
  *(void *)&__int128 v24 = 1LL;
  sub_17E44C((uint64_t)&v18, 1836021360, &v24, 1647718503);
  sub_2D5F80((uint64_t **)&qword_4A8A28, &v18, qword_4A8418);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  DWORD2(sub_9DCB8(v25, v24) = 0;
  *(void *)&__int128 v24 = 3LL;
  sub_17E44C((uint64_t)&v18, 1836021360, &v24, 1647718503);
  sub_2D5F80((uint64_t **)&qword_4A8A28, &v18, qword_4A8310);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  DWORD2(sub_9DCB8(v25, v24) = 0;
  *(void *)&__int128 v24 = 1LL;
  sub_17E44C((uint64_t)&v18, 1836021360, &v24, 1752709424);
  sub_2D5F80((uint64_t **)&qword_4A8A28, &v18, qword_4A8438);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  DWORD2(sub_9DCB8(v25, v24) = 0;
  *(void *)&__int128 v24 = 3LL;
  sub_17E44C((uint64_t)&v18, 1836021360, &v24, 1752709424);
  sub_2D5F80((uint64_t **)&qword_4A8A28, &v18, qword_4A8330);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  uint64_t v18 = 0x6D6F767000000001LL;
  __int128 v19 = *(_OWORD *)sub_2FC95C();
  int v20 = 0;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  std::string __p = 0LL;
  sub_2D5F80((uint64_t **)&qword_4A8A28, &v18, qword_4A8368);
  uint64_t v18 = 0x6D6F767000000001LL;
  *(void *)&__int128 v19 = 2LL;
  DWORD2(v19) = 0;
  int v20 = 0;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  std::string __p = 0LL;
  sub_2D5F80((uint64_t **)&qword_4A8A28, &v18, qword_4A8260);
  sub_DB44C((uint64_t)&v18, 1, 1836021360, 1214394677);
  sub_2D5F80((uint64_t **)&qword_4A8A28, &v18, qword_4A83D0);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  DWORD2(sub_9DCB8(v25, v24) = 0;
  *(void *)&__int128 v24 = 2LL;
  sub_17E44C((uint64_t)&v18, 1836021360, &v24, 1214394677);
  sub_2D5F80((uint64_t **)&qword_4A8A28, &v18, qword_4A82C8);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  sub_DB44C((uint64_t)&v18, 1, 1836021360, 1214329654);
  sub_2D5F80((uint64_t **)&qword_4A8A28, &v18, qword_4A83B0);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  DWORD2(sub_9DCB8(v25, v24) = 0;
  *(void *)&__int128 v24 = 2LL;
  sub_17E44C((uint64_t)&v18, 1836021360, &v24, 1214329654);
  sub_2D5F80((uint64_t **)&qword_4A8A28, &v18, qword_4A82A8);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  sub_DB44C((uint64_t)&v18, 1, 1836021360, 1647718502);
  sub_2D5F80((uint64_t **)&qword_4A8A28, &v18, qword_4A83F0);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  DWORD2(sub_9DCB8(v25, v24) = 0;
  *(void *)&__int128 v24 = 2LL;
  sub_17E44C((uint64_t)&v18, 1836021360, &v24, 1647718502);
  sub_2D5F80((uint64_t **)&qword_4A8A28, &v18, qword_4A82E8);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  sub_DB44C((uint64_t)&v18, 1, 1836021360, 1647718503);
  sub_2D5F80((uint64_t **)&qword_4A8A28, &v18, qword_4A8410);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  DWORD2(sub_9DCB8(v25, v24) = 0;
  *(void *)&__int128 v24 = 2LL;
  sub_17E44C((uint64_t)&v18, 1836021360, &v24, 1647718503);
  sub_2D5F80((uint64_t **)&qword_4A8A28, &v18, qword_4A8308);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  sub_DB44C((uint64_t)&v18, 1, 1836021360, 1752709424);
  sub_2D5F80((uint64_t **)&qword_4A8A28, &v18, qword_4A8430);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  DWORD2(sub_9DCB8(v25, v24) = 0;
  *(void *)&__int128 v24 = 2LL;
  sub_17E44C((uint64_t)&v18, 1836021360, &v24, 1752709424);
  sub_2D5F80((uint64_t **)&qword_4A8A28, &v18, qword_4A8328);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  uint64_t v18 = 0x6D736D7400000001LL;
  __int128 v19 = *(_OWORD *)sub_2FC95C();
  int v20 = 0;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  std::string __p = 0LL;
  sub_2D5F80((uint64_t **)&qword_4A8A28, &v18, qword_4A8378);
  uint64_t v18 = 0x6D736D7400000001LL;
  *(void *)&__int128 v19 = 2LL;
  DWORD2(v19) = 0;
  int v20 = 0;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  std::string __p = 0LL;
  sub_2D5F80((uint64_t **)&qword_4A8A28, &v18, qword_4A8270);
  sub_DB44C((uint64_t)&v18, 1, 1836281204, 1214394677);
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A83C0);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  DWORD2(sub_9DCB8(v25, v24) = 0;
  *(void *)&__int128 v24 = 2LL;
  sub_17E44C((uint64_t)&v18, 1836281204, &v24, 1214394677);
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, v4[87]);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  sub_DB44C((uint64_t)&v18, 1, 1836281204, 1214329654);
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, v5[116]);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  DWORD2(sub_9DCB8(v25, v24) = 0;
  *(void *)&__int128 v24 = 2LL;
  sub_17E44C((uint64_t)&v18, 1836281204, &v24, 1214329654);
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, v6[83]);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  sub_DB44C((uint64_t)&v18, 1, 1836281204, 1647718502);
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, v7[124]);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  DWORD2(sub_9DCB8(v25, v24) = 0;
  *(void *)&__int128 v24 = 2LL;
  sub_17E44C((uint64_t)&v18, 1836281204, &v24, 1647718502);
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A82D8);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  sub_DB44C((uint64_t)&v18, 1, 1836281204, 1647718503);
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A8400);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  DWORD2(sub_9DCB8(v25, v24) = 0;
  *(void *)&__int128 v24 = 2LL;
  sub_17E44C((uint64_t)&v18, 1836281204, &v24, 1647718503);
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A82F8);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  sub_DB44C((uint64_t)&v18, 1, 1836281204, 1752709424);
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A8420);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  DWORD2(sub_9DCB8(v25, v24) = 0;
  *(void *)&__int128 v24 = 2LL;
  sub_17E44C((uint64_t)&v18, 1836281204, &v24, 1752709424);
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, v8[99]);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  uint64_t v18 = 0x7261772000000001LL;
  __int128 v19 = *(_OWORD *)sub_2FC95C();
  int v20 = 0;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  std::string __p = 0LL;
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A8478);
  uint64_t v18 = 0x696D766300000001LL;
  __int128 v19 = *(_OWORD *)sub_2FC95C();
  int v20 = 0;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  std::string __p = 0LL;
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A8398);
  uint64_t v18 = 0x696D766300000001LL;
  *(void *)&__int128 v19 = 2LL;
  DWORD2(v19) = 0;
  int v20 = 0;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  std::string __p = 0LL;
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A8290);
  sub_DB44C((uint64_t)&v18, 1, 1768781411, 1752709424);
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A8420);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  DWORD2(sub_9DCB8(v25, v24) = 0;
  *(void *)&__int128 v24 = 2LL;
  sub_17E44C((uint64_t)&v18, 1768781411, &v24, 1752709424);
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, v8[99]);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  uint64_t v18 = 0x696D6F6300000001LL;
  __int128 v19 = *(_OWORD *)sub_2FC95C();
  int v20 = 0;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  std::string __p = 0LL;
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A8398);
  uint64_t v18 = 0x696D6F6300000001LL;
  *(void *)&__int128 v19 = 2LL;
  DWORD2(v19) = 0;
  int v20 = 0;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  std::string __p = 0LL;
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A8290);
  sub_DB44C((uint64_t)&v18, 1, 1768779619, 1752709424);
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A8420);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  DWORD2(sub_9DCB8(v25, v24) = 0;
  *(void *)&__int128 v24 = 2LL;
  sub_17E44C((uint64_t)&v18, 1768779619, &v24, 1752709424);
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, v8[99]);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  uint64_t v18 = 0x676D637400000001LL;
  __int128 v19 = *(_OWORD *)sub_2FC95C();
  int v20 = 0;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  std::string __p = 0LL;
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A8398);
  uint64_t v18 = 0x676D637400000001LL;
  *(void *)&__int128 v19 = 2LL;
  DWORD2(v19) = 0;
  int v20 = 0;
  uint64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  std::string __p = 0LL;
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A8290);
  sub_DB44C((uint64_t)&v18, 1, 1735222132, 1752709424);
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A8420);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  DWORD2(sub_9DCB8(v25, v24) = 0;
  *(void *)&__int128 v24 = 2LL;
  sub_17E44C((uint64_t)&v18, 1735222132, &v24, 1752709424);
  sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, v8[99]);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

  for (uint64_t k = 0LL; k != 20; k += 4LL)
  {
    int v16 = *(_DWORD *)&aOvpvivpvcgpvcv[k];
    LODWORD(v18) = 1;
    HIDWORD(v18) = v16;
    __int128 v19 = *(_OWORD *)sub_2FC95C();
    int v20 = 0;
    uint64_t v22 = 0LL;
    uint64_t v23 = 0LL;
    std::string __p = 0LL;
    sub_2D5228((uint64_t **)&qword_4A8A28, (uint64_t)&v18, qword_4A8470);
    LODWORD(v18) = 1;
    HIDWORD(v18) = v16;
    __int128 v19 = *(_OWORD *)sub_2FC95C();
    int v20 = 0;
    uint64_t v22 = 0LL;
    uint64_t v23 = 0LL;
    std::string __p = 0LL;
    sub_2D6400((uint64_t)&qword_4A8A28, (int *)&v18, qword_4A8610, 0);
  }

  sub_DB44C((uint64_t)&v18, 1, 1987077987, 1752709424);
  sub_2D6400((uint64_t)&qword_4A8A28, (int *)&v18, qword_4A8610, 0);
  if (__p)
  {
    uint64_t v22 = __p;
    operator delete(__p);
  }

void sub_17E1BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  sub_F2A64((void **)&qword_4A8A28);
  _Unwind_Resume(a1);
}

uint64_t sub_17E44C(uint64_t a1, int a2, _OWORD *a3, int a4)
{
  *(_DWORD *)a1 = 1;
  *(_DWORD *)(a1 + 4) = a2;
  *(_OWORD *)(a1 + 8) = *a3;
  *(_DWORD *)(a1 + 24) = a4;
  *(void *)(a1 + sub_7A768(v9 - 32) = 0LL;
  *(void *)(a1 + 40) = 0LL;
  *(void *)(a1 + sub_51FA0(v10 + 48) = 0LL;
  sub_2CE7A0((_DWORD *)a1);
  return a1;
}

void sub_17E490(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  __int128 v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 40) = v5;
    operator delete(v5);
  }

  _Unwind_Resume(exception_object);
}

void sub_17E4B0(uint64_t ***a1, int a2)
{
  char v4 = 0;
  uint64_t v13 = 0x757362446A333237LL;
  uint64_t v5 = 1LL;
  uint64_t v6 = (int *)&v13;
  do
  {
    char v7 = v4;
    uint64_t v8 = *a1;
    sub_DB44C((uint64_t)v10, 1, a2, *v6);
    sub_2D5228(v8, (uint64_t)v10, (uint64_t)&unk_4A7CD8);
    if (__p)
    {
      char v12 = __p;
      operator delete(__p);
    }

    uint64_t v9 = (uint64_t)*a1;
    sub_DB44C((uint64_t)v10, 1, a2, *v6);
    sub_2D6400(v9, v10, qword_4A8610, 0);
    if (__p)
    {
      char v12 = __p;
      operator delete(__p);
    }

    uint64_t v6 = (int *)&v13 + v5;
    char v4 = 1;
    uint64_t v5 = 2LL;
  }

  while ((v7 & 1) == 0);
}

void sub_17E5D4( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_17E600(uint64_t a1)
{
  uint64_t v1 = (void *)sub_189B70(a1);
  operator delete(v1);
}

BOOL sub_17E614(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  int mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1836414052)
  {
    if (mSelector > 1986290210)
    {
      BOOL v6 = mSelector == 1987013732;
      int v7 = 1986290211;
    }

    else
    {
      BOOL v6 = mSelector == 1836414053;
      int v7 = 1986229104;
    }

    BOOL v9 = v6 || mSelector == v7;
    if (v9 && a2->mElement == 6 && a2->mScope == 1869968496) {
      return 1LL;
    }
    goto LABEL_22;
  }

  BOOL result = 1LL;
  if (mSelector > 1685483629)
  {
    if (mSelector != 1685483630 && mSelector != 1835103844)
    {
LABEL_22:
      sub_1BB60((std::mutex *)a1);
      return AudioObjectHasProperty(*(_DWORD *)(a1 + 268), a2) != 0;
    }
  }

  else
  {
    if (mSelector != 1064725619)
    {
      if (mSelector == 1634759542) {
        return result;
      }
      goto LABEL_22;
    }

    return a2->mScope == 1869968496;
  }

  return result;
}

uint64_t sub_17E740(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  int mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1836414052)
  {
    if (mSelector > 1986290210)
    {
      if (mSelector == 1986290211)
      {
LABEL_18:
        if (a2->mElement != 6 || a2->mScope != 1869968496) {
          return sub_36854C(a1, a2);
        }
        return 0LL;
      }

      if (mSelector != 1987013732) {
        return sub_36854C(a1, a2);
      }
    }

    else if (mSelector != 1836414053)
    {
      if (mSelector != 1986229104) {
        return sub_36854C(a1, a2);
      }
      goto LABEL_18;
    }

    if (a2->mElement != 6 || a2->mScope != 1869968496) {
      return sub_36854C(a1, a2);
    }
    return 1LL;
  }

  uint64_t v3 = 1LL;
  if (mSelector > 1685483629)
  {
    if (mSelector == 1685483630) {
      return v3;
    }
    if (mSelector != 1835103844) {
      return sub_36854C(a1, a2);
    }
    return 0LL;
  }

  if (mSelector == 1064725619) {
    return 0LL;
  }
  if (mSelector != 1634759542) {
    return sub_36854C(a1, a2);
  }
  return v3;
}

uint64_t sub_17E854(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    uint64_t v11 = (os_log_t *)sub_138E8(13);
    char v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v19);
      uint64_t v13 = v22 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      __int128 v24 = "Device_Codec_Aspen.cpp";
      __int16 v25 = 1024;
      int v26 = 433;
      __int16 v27 = 2080;
      __int128 v28 = v13;
      _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((a3 != 0) == (a4 == 0LL))
  {
    unint64_t v15 = (os_log_t *)sub_138E8(13);
    int v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v19);
      if (v22 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      __int128 v24 = "Device_Codec_Aspen.cpp";
      __int16 v25 = 1024;
      int v26 = 434;
      __int16 v27 = 2080;
      __int128 v28 = v17;
      __int16 v29 = 1024;
      UInt32 v30 = a3;
      __int16 v31 = 2048;
      uint64_t v32 = a4;
      _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v18 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v18 = &off_4865A0;
    void v18[2] = 561211770;
  }

  int mSelector = a2->mSelector;
  uint64_t result = 4LL;
  if ((int)a2->mSelector > 1836414052)
  {
    if (mSelector > 1986290210)
    {
      if (mSelector == 1986290211) {
        return 16LL;
      }
      int v10 = 1987013732;
    }

    else if (mSelector == 1836414053)
    {
      if (a2->mElement != 6) {
        return sub_21524(a1, a2, a3, a4);
      }
      int mSelector = a2->mScope;
      int v10 = 1869968496;
    }

    else
    {
      int v10 = 1986229104;
    }
  }

  else if (mSelector > 1685483629)
  {
    if (mSelector == 1685483630) {
      return result;
    }
    int v10 = 1835103844;
  }

  else
  {
    if (mSelector == 1064725619) {
      return result;
    }
    int v10 = 1634759542;
  }

  if (mSelector != v10) {
    return sub_21524(a1, a2, a3, a4);
  }
  return result;
}

void sub_17EBE4( unsigned __int8 *a1, const AudioObjectPropertyAddress *a2, uint64_t a3, const void *a4, UInt32 *a5, float *a6)
{
  if (((*(uint64_t (**)(unsigned __int8 *))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    uint64_t v37 = (os_log_t *)sub_138E8(13);
    char v38 = *v37;
    if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
    {
      uint64_t v113 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)&__p, (unsigned int *)&v113);
      uint64_t v39 = v116 >= 0 ? &__p : *(AudioObjectPropertyAddress **)&__p.mSelector;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_Codec_Aspen.cpp";
      __int16 v118 = 1024;
      int v119 = 491;
      __int16 v120 = 2080;
      *(void *)__int128 v121 = v39;
      _os_log_impl( &dword_0,  v38,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v116 < 0) {
        operator delete(*(void **)&__p.mSelector);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0LL))
  {
    std::chrono::steady_clock::time_point v41 = (os_log_t *)sub_138E8(13);
    std::string v42 = *v41;
    if (*v41 && os_log_type_enabled(*v41, OS_LOG_TYPE_ERROR))
    {
      uint64_t v113 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)&__p, (unsigned int *)&v113);
      char v43 = v116 >= 0 ? &__p : *(AudioObjectPropertyAddress **)&__p.mSelector;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "Device_Codec_Aspen.cpp";
      __int16 v118 = 1024;
      int v119 = 492;
      __int16 v120 = 2080;
      *(void *)__int128 v121 = v43;
      *(_WORD *)&v121[8] = 1024;
      LODWORD(v122[0]) = a3;
      WORD2(v122[0]) = 2048;
      *(void *)((char *)v122 + 6) = a4;
      _os_log_impl( &dword_0,  v42,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v116 < 0) {
        operator delete(*(void **)&__p.mSelector);
      }
    }

    std::string v44 = __cxa_allocate_exception(0x10uLL);
    *(void *)std::string v44 = &off_4865A0;
    v44[2] = 561211770;
  }

  if (!a6)
  {
    char v45 = (os_log_t *)sub_138E8(13);
    std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v46 = *v45;
    if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_ERROR))
    {
      uint64_t v113 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)&__p, (unsigned int *)&v113);
      char v47 = v116 >= 0 ? &__p : *(AudioObjectPropertyAddress **)&__p.mSelector;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_Codec_Aspen.cpp";
      __int16 v118 = 1024;
      int v119 = 493;
      __int16 v120 = 2080;
      *(void *)__int128 v121 = "outData";
      *(_WORD *)&v121[8] = 2080;
      v122[0] = v47;
      _os_log_impl( &dword_0,  v46,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
      if (v116 < 0) {
        operator delete(*(void **)&__p.mSelector);
      }
    }

    std::string v48 = __cxa_allocate_exception(0x10uLL);
    *(void *)std::string v48 = &off_4865A0;
    v48[2] = 561211770;
  }

  int mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1835103843)
  {
    if (mSelector > 1986229103)
    {
      if (mSelector != 1986229104)
      {
        if (mSelector == 1986290211)
        {
          UInt32 v36 = *a5;
          if (v36 != (*(unsigned int (**)(unsigned __int8 *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4))
          {
            std::condition_variable v105 = (os_log_t *)sub_138E8(13);
            std::mutex v106 = *v105;
            if (*v105 && os_log_type_enabled(*v105, OS_LOG_TYPE_ERROR))
            {
              uint64_t v113 = *(void *)&a2->mSelector;
              AudioObjectPropertyElement mElement = a2->mElement;
              sub_613AC((uint64_t)&__p, (unsigned int *)&v113);
              int v107 = v116;
              uint64_t v108 = *(AudioObjectPropertyAddress **)&__p.mSelector;
              UInt32 v109 = *a5;
              int v110 = (*(uint64_t (**)(unsigned __int8 *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
              p_p = &__p;
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
              *(void *)&uint8_t buf[4] = "Device_Codec_Aspen.cpp";
              if (v107 < 0) {
                p_p = v108;
              }
              __int16 v118 = 1024;
              int v119 = 541;
              __int16 v120 = 2080;
              *(void *)__int128 v121 = p_p;
              *(_WORD *)&v121[8] = 1024;
              LODWORD(v122[0]) = v109;
              WORD2(v122[0]) = 1024;
              *(_DWORD *)((char *)v122 + 6) = v110;
              _os_log_impl( &dword_0,  v106,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pass ed: %u; required: %u).",
                buf,
                0x28u);
              if (v116 < 0) {
                operator delete(*(void **)&__p.mSelector);
              }
            }

            __int128 v112 = __cxa_allocate_exception(0x10uLL);
            *(void *)__int128 v112 = &off_4865A0;
            v112[2] = 561211770;
          }

          if (a2->mElement == 6 && a2->mScope == 1869968496)
          {
            *(_OWORD *)a6 = xmmword_4031A0;
            return;
          }
        }

        else if (mSelector == 1987013732)
        {
          UInt32 v13 = *a5;
          if (v13 != (*(unsigned int (**)(unsigned __int8 *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4))
          {
            __int128 v49 = (os_log_t *)sub_138E8(13);
            uint64_t v50 = *v49;
            if (*v49 && os_log_type_enabled(*v49, OS_LOG_TYPE_ERROR))
            {
              uint64_t v113 = *(void *)&a2->mSelector;
              AudioObjectPropertyElement mElement = a2->mElement;
              sub_613AC((uint64_t)&__p, (unsigned int *)&v113);
              int v51 = v116;
              uint64_t v52 = *(AudioObjectPropertyAddress **)&__p.mSelector;
              UInt32 v53 = *a5;
              int v54 = (*(uint64_t (**)(unsigned __int8 *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
              std::string v55 = &__p;
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
              *(void *)&uint8_t buf[4] = "Device_Codec_Aspen.cpp";
              if (v51 < 0) {
                std::string v55 = v52;
              }
              __int16 v118 = 1024;
              int v119 = 528;
              __int16 v120 = 2080;
              *(void *)__int128 v121 = v55;
              *(_WORD *)&v121[8] = 1024;
              LODWORD(v122[0]) = v53;
              WORD2(v122[0]) = 1024;
              *(_DWORD *)((char *)v122 + 6) = v54;
              _os_log_impl( &dword_0,  v50,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pass ed: %u; required: %u).",
                buf,
                0x28u);
              if (v116 < 0) {
                operator delete(*(void **)&__p.mSelector);
              }
            }

            uint64_t v56 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v56 = &off_4865A0;
            void v56[2] = 561211770;
          }

          if (a2->mElement == 6 && a2->mScope == 1869968496)
          {
            unint64_t v14 = (float *)sub_1F4000();
            float v15 = (float)(sub_1F4F28(v14) * 100.0) + -100.0;
LABEL_57:
            *a6 = v15;
            return;
          }
        }

void sub_17FDB0( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_17FDF0( uint64_t a1, const AudioObjectPropertyAddress *a2, uint64_t a3, const void *a4, uint64_t a5, float *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16LL))(a1) & 1) == 0)
  {
    int v51 = (os_log_t *)sub_138E8(13);
    uint64_t v52 = *v51;
    if (*v51 && os_log_type_enabled(*v51, OS_LOG_TYPE_ERROR))
    {
      uint64_t v129 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v129);
      UInt32 v53 = v132 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      unint64_t v134 = (unint64_t)"Device_Codec_Aspen.cpp";
      __int16 v135 = 1024;
      int v136 = 604;
      __int16 v137 = 2080;
      int v138 = (const char *)v53;
      _os_log_impl( &dword_0,  v52,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v132 < 0) {
        operator delete(__p[0]);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if (((_DWORD)a3 != 0) == (a4 == 0LL))
  {
    std::string v55 = (os_log_t *)sub_138E8(13);
    uint64_t v56 = *v55;
    if (*v55 && os_log_type_enabled(*v55, OS_LOG_TYPE_ERROR))
    {
      uint64_t v129 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v129);
      std::string v57 = v132 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      unint64_t v134 = (unint64_t)"Device_Codec_Aspen.cpp";
      __int16 v135 = 1024;
      int v136 = 605;
      __int16 v137 = 2080;
      int v138 = (const char *)v57;
      __int16 v139 = 1024;
      LODWORD(v140[0]) = a3;
      WORD2(v140[0]) = 2048;
      *(void *)((char *)v140 + 6) = a4;
      _os_log_impl( &dword_0,  v56,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v132 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v58 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v58 = &off_4865A0;
    void v58[2] = 561211770;
  }

  if (!a6)
  {
    int v59 = (os_log_t *)sub_138E8(13);
    char v60 = *v59;
    if (*v59 && os_log_type_enabled(*v59, OS_LOG_TYPE_ERROR))
    {
      uint64_t v129 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)__p, (unsigned int *)&v129);
      UInt32 v61 = v132 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      unint64_t v134 = (unint64_t)"Device_Codec_Aspen.cpp";
      __int16 v135 = 1024;
      int v136 = 606;
      __int16 v137 = 2080;
      int v138 = "inData";
      __int16 v139 = 2080;
      v140[0] = v61;
      _os_log_impl( &dword_0,  v60,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.",  buf,  0x26u);
      if (v132 < 0) {
        operator delete(__p[0]);
      }
    }

    int v62 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v62 = &off_4865A0;
    uint64_t v62[2] = 561211770;
  }

  int mSelector = a2->mSelector;
  if ((int)a2->mSelector <= 1685483629)
  {
    if (mSelector <= 1162701935)
    {
      if (mSelector == 913796710)
      {
        if ((*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4) != (_DWORD)a5)
        {
          UInt32 v77 = (os_log_t *)sub_138E8(13);
          int v78 = *v77;
          if (*v77 && os_log_type_enabled(*v77, OS_LOG_TYPE_ERROR))
          {
            uint64_t v129 = *(void *)&a2->mSelector;
            AudioObjectPropertyElement mElement = a2->mElement;
            sub_613AC((uint64_t)__p, (unsigned int *)&v129);
            int v79 = v132;
            uint64_t v80 = (void **)__p[0];
            int v81 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
            uint64_t v82 = __p;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            unint64_t v134 = (unint64_t)"Device_Codec_Aspen.cpp";
            if (v79 < 0) {
              uint64_t v82 = v80;
            }
            __int16 v135 = 1024;
            int v136 = 699;
            __int16 v137 = 2080;
            int v138 = (const char *)v82;
            __int16 v139 = 1024;
            LODWORD(v140[0]) = a5;
            WORD2(v140[0]) = 1024;
            *(_DWORD *)((char *)v140 + 6) = v81;
            _os_log_impl( &dword_0,  v78,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed : %u; required: %u).",
              buf,
              0x28u);
            if (v132 < 0) {
              operator delete(__p[0]);
            }
          }

          int v83 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v83 = &off_4865A0;
          v83[2] = 561211770;
        }

        sub_189620(a1, *(_DWORD *)a6 != 0);
        return;
      }

      if (mSelector != 1162046576)
      {
LABEL_69:
        sub_3686A0(a1, a2, a3, a4, a5, a6);
        return;
      }

      float v26 = *a6;
      int v27 = (os_log_t *)sub_138E8(17);
      float v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        unint64_t v134 = (unint64_t)"Device_Codec_Aspen.cpp";
        __int16 v135 = 1024;
        int v136 = 640;
        __int16 v137 = 1024;
        *(float *)&int v138 = v26;
        _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d set DevicePropertyCodecLowPowerModeEnable = %u.",  buf,  0x18u);
      }
    }

    else
    {
      if (mSelector != 1162701936)
      {
        if (mSelector == 1634759542)
        {
          if ((*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4) != (_DWORD)a5)
          {
            __int128 v84 = (os_log_t *)sub_138E8(13);
            UInt32 v85 = *v84;
            if (*v84 && os_log_type_enabled(*v84, OS_LOG_TYPE_ERROR))
            {
              uint64_t v129 = *(void *)&a2->mSelector;
              AudioObjectPropertyElement mElement = a2->mElement;
              sub_613AC((uint64_t)__p, (unsigned int *)&v129);
              int v86 = v132;
              uint64_t v87 = (void **)__p[0];
              int v88 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
              uint64_t v89 = __p;
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
              unint64_t v134 = (unint64_t)"Device_Codec_Aspen.cpp";
              if (v86 < 0) {
                uint64_t v89 = v87;
              }
              __int16 v135 = 1024;
              int v136 = 612;
              __int16 v137 = 2080;
              int v138 = (const char *)v89;
              __int16 v139 = 1024;
              LODWORD(v140[0]) = a5;
              WORD2(v140[0]) = 1024;
              *(_DWORD *)((char *)v140 + 6) = v88;
              _os_log_impl( &dword_0,  v85,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pass ed: %u; required: %u).",
                buf,
                0x28u);
              if (v132 < 0) {
                operator delete(__p[0]);
              }
            }

            uint64_t v90 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v90 = &off_4865A0;
            v90[2] = 561211770;
          }

          AudioObjectPropertyScope mScope = a2->mScope;
          *(_DWORD *)AudioObjectPropertyAddress buf = 1987013732;
          unint64_t v134 = mScope;
          (*(void (**)(uint64_t, uint8_t *, uint64_t, const void *, uint64_t, float *))(*(void *)a1 + 48LL))( a1,  buf,  a3,  a4,  a5,  a6);
          return;
        }

        if (mSelector == 1650602615)
        {
          if ((*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4) != (_DWORD)a5)
          {
            char v63 = (os_log_t *)sub_138E8(13);
            __int128 v64 = *v63;
            if (*v63 && os_log_type_enabled(*v63, OS_LOG_TYPE_ERROR))
            {
              uint64_t v129 = *(void *)&a2->mSelector;
              AudioObjectPropertyElement mElement = a2->mElement;
              sub_613AC((uint64_t)__p, (unsigned int *)&v129);
              int v65 = v132;
              AudioObjectPropertyAddress v66 = (void **)__p[0];
              int v67 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
              char v68 = __p;
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
              unint64_t v134 = (unint64_t)"Device_Codec_Aspen.cpp";
              if (v65 < 0) {
                char v68 = v66;
              }
              __int16 v135 = 1024;
              int v136 = 622;
              __int16 v137 = 2080;
              int v138 = (const char *)v68;
              __int16 v139 = 1024;
              LODWORD(v140[0]) = a5;
              WORD2(v140[0]) = 1024;
              *(_DWORD *)((char *)v140 + 6) = v67;
              _os_log_impl( &dword_0,  v64,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pass ed: %u; required: %u).",
                buf,
                0x28u);
              if (v132 < 0) {
                operator delete(__p[0]);
              }
            }

            UInt32 v69 = __cxa_allocate_exception(0x10uLL);
            *(void *)UInt32 v69 = &off_4865A0;
            _OWORD v69[2] = 561211770;
          }

          int v16 = sub_188CBC(*(_DWORD *)(a1 + 268), (uint64_t)a2, a3, a4, a6);
          if (v16)
          {
            int v17 = v16;
            uint64_t v18 = (os_log_t *)sub_138E8(13);
            uint64_t v19 = *v18;
            if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              unint64_t v134 = (unint64_t)"Device_Codec_Aspen.cpp";
              __int16 v135 = 1024;
              int v136 = 624;
              _os_log_impl( &dword_0,  v19,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (theResult) [error theResult is an error]: error setting kAudioDevicePropertyBaseb andToCodecPlayThrough",  buf,  0x12u);
            }

            int v20 = __cxa_allocate_exception(0x10uLL);
            *(void *)int v20 = &off_4865A0;
            v20[2] = v17;
          }

          return;
        }

        goto LABEL_69;
      }

      float v38 = *a6;
      uint64_t v39 = (os_log_t *)sub_138E8(17);
      uint64_t v40 = *v39;
      if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        unint64_t v134 = (unint64_t)"Device_Codec_Aspen.cpp";
        __int16 v135 = 1024;
        int v136 = 649;
        __int16 v137 = 1024;
        *(float *)&int v138 = v38;
        _os_log_impl( &dword_0,  v40,  OS_LOG_TYPE_DEFAULT,  "%25s:%-5d set DevicePropertyMicrophoneLowPowerModeEnable = %u.",  buf,  0x18u);
      }
    }

    sub_3686A0(a1, a2, a3, a4, a5, a6);
    return;
  }

  if (mSelector > 1836414052)
  {
    switch(mSelector)
    {
      case 1836414053:
        if ((*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4) != (_DWORD)a5)
        {
          __int128 v112 = (os_log_t *)sub_138E8(13);
          uint64_t v113 = *v112;
          if (*v112 && os_log_type_enabled(*v112, OS_LOG_TYPE_ERROR))
          {
            uint64_t v129 = *(void *)&a2->mSelector;
            AudioObjectPropertyElement mElement = a2->mElement;
            sub_613AC((uint64_t)__p, (unsigned int *)&v129);
            int v114 = v132;
            uint64_t v115 = (void **)__p[0];
            int v116 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
            uint64_t v117 = __p;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            unint64_t v134 = (unint64_t)"Device_Codec_Aspen.cpp";
            if (v114 < 0) {
              uint64_t v117 = v115;
            }
            __int16 v135 = 1024;
            int v136 = 687;
            __int16 v137 = 2080;
            int v138 = (const char *)v117;
            __int16 v139 = 1024;
            LODWORD(v140[0]) = a5;
            WORD2(v140[0]) = 1024;
            *(_DWORD *)((char *)v140 + 6) = v116;
            _os_log_impl( &dword_0,  v113,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed : %u; required: %u).",
              buf,
              0x28u);
            if (v132 < 0) {
              operator delete(__p[0]);
            }
          }

          __int16 v118 = __cxa_allocate_exception(0x10uLL);
          *(void *)__int16 v118 = &off_4865A0;
          v118[2] = 561211770;
        }

        if (a2->mElement == 6 && a2->mScope == 1869968496)
        {
          uint64_t v41 = sub_1F4000();
          sub_1F57EC(v41, *(_DWORD *)a6 != 0);
          return;
        }

        break;
      case 1987013732:
        if ((*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4) != (_DWORD)a5)
        {
          __int16 v98 = (os_log_t *)sub_138E8(13);
          int v99 = *v98;
          if (*v98 && os_log_type_enabled(*v98, OS_LOG_TYPE_ERROR))
          {
            uint64_t v129 = *(void *)&a2->mSelector;
            AudioObjectPropertyElement mElement = a2->mElement;
            sub_613AC((uint64_t)__p, (unsigned int *)&v129);
            int v100 = v132;
            UInt32 v101 = (void **)__p[0];
            int v102 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
            __int16 v103 = __p;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            unint64_t v134 = (unint64_t)"Device_Codec_Aspen.cpp";
            if (v100 < 0) {
              __int16 v103 = v101;
            }
            __int16 v135 = 1024;
            int v136 = 663;
            __int16 v137 = 2080;
            int v138 = (const char *)v103;
            __int16 v139 = 1024;
            LODWORD(v140[0]) = a5;
            WORD2(v140[0]) = 1024;
            *(_DWORD *)((char *)v140 + 6) = v102;
            _os_log_impl( &dword_0,  v99,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed : %u; required: %u).",
              buf,
              0x28u);
            if (v132 < 0) {
              operator delete(__p[0]);
            }
          }

          AudioObjectID v104 = __cxa_allocate_exception(0x10uLL);
          *(void *)AudioObjectID v104 = &off_4865A0;
          v104[2] = 561211770;
        }

        if (a2->mElement == 6 && a2->mScope == 1869968496)
        {
          uint64_t v35 = sub_1F4000();
          if (sub_1F4DF8(v35))
          {
            float v36 = (float)(*a6 + 100.0) / 100.0;
            uint64_t v37 = sub_1F4000();
            sub_1F51DC(v37, v36);
          }

          return;
        }

        break;
      case 1999790690:
        if ((*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4) != (_DWORD)a5)
        {
          int v70 = (os_log_t *)sub_138E8(13);
          uint64_t v71 = *v70;
          if (*v70 && os_log_type_enabled(*v70, OS_LOG_TYPE_ERROR))
          {
            uint64_t v129 = *(void *)&a2->mSelector;
            AudioObjectPropertyElement mElement = a2->mElement;
            sub_613AC((uint64_t)__p, (unsigned int *)&v129);
            int v72 = v132;
            std::unique_lock<std::mutex> v73 = (void **)__p[0];
            int v74 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
            int v75 = __p;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            unint64_t v134 = (unint64_t)"Device_Codec_Aspen.cpp";
            if (v72 < 0) {
              int v75 = v73;
            }
            __int16 v135 = 1024;
            int v136 = 630;
            __int16 v137 = 2080;
            int v138 = (const char *)v75;
            __int16 v139 = 1024;
            LODWORD(v140[0]) = a5;
            WORD2(v140[0]) = 1024;
            *(_DWORD *)((char *)v140 + 6) = v74;
            _os_log_impl( &dword_0,  v71,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed : %u; required: %u).",
              buf,
              0x28u);
            if (v132 < 0) {
              operator delete(__p[0]);
            }
          }

          unsigned int v76 = __cxa_allocate_exception(0x10uLL);
          *(void *)unsigned int v76 = &off_4865A0;
          uint64_t v76[2] = 561211770;
        }

        int v21 = sub_188CBC(*(_DWORD *)(a1 + 268), (uint64_t)a2, a3, a4, a6);
        if (v21)
        {
          int v22 = v21;
          int v23 = (os_log_t *)sub_138E8(13);
          UInt32 v24 = *v23;
          if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            unint64_t v134 = (unint64_t)"Device_Codec_Aspen.cpp";
            __int16 v135 = 1024;
            int v136 = 632;
            _os_log_impl( &dword_0,  v24,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (theResult) [error theResult is an error]: error setting kAudioDevicePropertyCodecTo BasebandPlayThrough",  buf,  0x12u);
          }

          __int16 v25 = __cxa_allocate_exception(0x10uLL);
          *(void *)__int16 v25 = &off_4865A0;
          v25[2] = v22;
        }

        return;
    }

    goto LABEL_69;
  }

  if (mSelector == 1685483630)
  {
    if ((*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4) != (_DWORD)a5)
    {
      std::condition_variable v105 = (os_log_t *)sub_138E8(13);
      std::mutex v106 = *v105;
      if (*v105 && os_log_type_enabled(*v105, OS_LOG_TYPE_ERROR))
      {
        uint64_t v129 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_613AC((uint64_t)__p, (unsigned int *)&v129);
        int v107 = v132;
        uint64_t v108 = (void **)__p[0];
        int v109 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
        int v110 = __p;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        unint64_t v134 = (unint64_t)"Device_Codec_Aspen.cpp";
        if (v107 < 0) {
          int v110 = v108;
        }
        __int16 v135 = 1024;
        int v136 = 704;
        __int16 v137 = 2080;
        int v138 = (const char *)v110;
        __int16 v139 = 1024;
        LODWORD(v140[0]) = a5;
        WORD2(v140[0]) = 1024;
        *(_DWORD *)((char *)v140 + 6) = v109;
        _os_log_impl( &dword_0,  v106,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u ; required: %u).",
          buf,
          0x28u);
        if (v132 < 0) {
          operator delete(__p[0]);
        }
      }

      uint64_t v111 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v111 = &off_4865A0;
      v111[2] = 561211770;
    }

    *(_BYTE *)(a1 + 6sub_7BFE0(v23 - 88) = *(_DWORD *)a6 != 0;
    return;
  }

  if (mSelector == 1718432370)
  {
    if ((*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4) != (_DWORD)a5)
    {
      int v91 = (os_log_t *)sub_138E8(13);
      AudioObjectPropertyAddress v92 = *v91;
      if (*v91 && os_log_type_enabled(*v91, OS_LOG_TYPE_ERROR))
      {
        uint64_t v129 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_613AC((uint64_t)__p, (unsigned int *)&v129);
        int v93 = v132;
        int v94 = (void **)__p[0];
        int v95 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
        __int16 v96 = __p;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        unint64_t v134 = (unint64_t)"Device_Codec_Aspen.cpp";
        if (v93 < 0) {
          __int16 v96 = v94;
        }
        __int16 v135 = 1024;
        int v136 = 656;
        __int16 v137 = 2080;
        int v138 = (const char *)v96;
        __int16 v139 = 1024;
        LODWORD(v140[0]) = a5;
        WORD2(v140[0]) = 1024;
        *(_DWORD *)((char *)v140 + 6) = v95;
        _os_log_impl( &dword_0,  v92,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u ; required: %u).",
          buf,
          0x28u);
        if (v132 < 0) {
          operator delete(__p[0]);
        }
      }

      int v97 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v97 = &off_4865A0;
      v97[2] = 561211770;
    }

    int v30 = sub_188CBC(*(_DWORD *)(a1 + 268), (uint64_t)a2, a3, a4, a6);
    if (v30)
    {
      int v31 = v30;
      uint64_t v32 = (os_log_t *)sub_138E8(13);
      UInt32 v33 = *v32;
      if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        unint64_t v134 = (unint64_t)"Device_Codec_Aspen.cpp";
        __int16 v135 = 1024;
        int v136 = 658;
        _os_log_impl( &dword_0,  v33,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (theResult) [error theResult is an error]: error setting kAudioDevicePropertyFMTunerPlayThrough",  buf,  0x12u);
      }

      AudioObjectPropertyElement v34 = __cxa_allocate_exception(0x10uLL);
      *(void *)AudioObjectPropertyElement v34 = &off_4865A0;
      void v34[2] = v31;
    }

    return;
  }

  if (mSelector != 1768255076) {
    goto LABEL_69;
  }
  if (__PAIR64__(a2->mScope, 1768255076) == qword_48F4B0 && a2->mElement == dword_48F4B8)
  {
    if ((*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4) != (_DWORD)a5)
    {
      int v119 = (os_log_t *)sub_138E8(13);
      __int16 v120 = *v119;
      if (*v119 && os_log_type_enabled(*v119, OS_LOG_TYPE_ERROR))
      {
        uint64_t v129 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_613AC((uint64_t)__p, (unsigned int *)&v129);
        int v121 = v132;
        uint64_t v122 = (void **)__p[0];
        int v123 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32LL))( a1,  a2,  a3,  a4);
        __int128 v124 = __p;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        unint64_t v134 = (unint64_t)"Device_Codec_Aspen.cpp";
        if (v121 < 0) {
          __int128 v124 = v122;
        }
        __int16 v135 = 1024;
        int v136 = 711;
        __int16 v137 = 2080;
        int v138 = (const char *)v124;
        __int16 v139 = 1024;
        LODWORD(v140[0]) = a5;
        WORD2(v140[0]) = 1024;
        *(_DWORD *)((char *)v140 + 6) = v123;
        _os_log_impl( &dword_0,  v120,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u ; required: %u).",
          buf,
          0x28u);
        if (v132 < 0) {
          operator delete(__p[0]);
        }
      }

      CFTypeRef v125 = __cxa_allocate_exception(0x10uLL);
      *(void *)CFTypeRef v125 = &off_4865A0;
      v125[2] = 561211770;
    }

    float v13 = *a6;
    unint64_t v14 = (unsigned int *)(a1 + 692);
    if (v13 != 0.0)
    {
      do
        unsigned int v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
      if (v15) {
        return;
      }
      goto LABEL_76;
    }

    if (!atomic_load(v14))
    {
      uint64_t v126 = (os_log_t *)sub_138E8(13);
      uint64_t v127 = *v126;
      if (*v126 && os_log_type_enabled(*v126, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        unint64_t v134 = (unint64_t)"Device_Codec_Aspen.cpp";
        __int16 v135 = 1024;
        int v136 = 713;
        _os_log_impl( &dword_0,  v127,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): Attempt to power off the built-in mic when mMicPowerOnCount is 0.",  buf,  0x12u);
      }

      uint64_t v128 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v128, "Attempt to power off the built-in mic when mMicPowerOnCount is 0.");
    }

    do
    {
      unsigned int v45 = __ldaxr(v14);
      unsigned int v46 = v45 - 1;
    }

    while (__stlxr(v46, v14));
    if (!v46)
    {
LABEL_76:
      char v47 = (os_log_t *)sub_138E8(17);
      std::string v48 = *v47;
      if (*v47 && os_log_type_enabled(*v47, OS_LOG_TYPE_INFO))
      {
        __int128 v49 = "dis";
        unint64_t v134 = (unint64_t)"Device_Codec_Aspen.cpp";
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        if (v13 != 0.0) {
          __int128 v49 = "en";
        }
        __int16 v135 = 1024;
        int v136 = 716;
        __int16 v137 = 2080;
        int v138 = v49;
        _os_log_impl( &dword_0,  v48,  OS_LOG_TYPE_INFO,  "%25s:%-5d Non-redundant requesting to %sable microphone power. Calling the HAL.",  buf,  0x1Cu);
      }

      AudioObjectID v50 = *(_DWORD *)(a1 + 268);
      *(_DWORD *)AudioObjectPropertyAddress buf = LODWORD(v13) != 0;
      sub_188CBC(v50, (uint64_t)a2, a3, a4, buf);
    }
  }

  else
  {
    std::string v42 = (os_log_t *)sub_138E8(17);
    char v43 = *v42;
    if (*v42 && os_log_type_enabled(*v42, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      unint64_t v134 = (unint64_t)"Device_Codec_Aspen.cpp";
      __int16 v135 = 1024;
      int v136 = 722;
      _os_log_impl( &dword_0,  v43,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Unknown property address using selector kAppleEmbeddedAudio_DevicePropertyInputEnableDevice. Ignoring.",  buf,  0x12u);
    }
  }

void sub_18157C( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1815D0( void *a1, const AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  if (((*(uint64_t (**)(void *))(*a1 + 16LL))(a1) & 1) == 0)
  {
    BOOL v9 = (os_log_t *)sub_138E8(13);
    int v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_613AC((uint64_t)&__p, (unsigned int *)&v13);
      uint64_t v11 = v17 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_Codec_Aspen.cpp";
      __int16 v19 = 1024;
      *(_DWORD *)int v20 = 740;
      *(_WORD *)&v20[4] = 2080;
      *(void *)&_DWORD v20[6] = v11;
      _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.",  buf,  0x1Cu);
      if (v17 < 0) {
        operator delete(__p);
      }
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_4865A0;
    exception[2] = 2003332927;
  }

  if ((*(void *)&a2->mSelector != qword_48F480 || a2->mElement != dword_48F488)
    && (*(void *)&a2->mSelector != qword_48F490 || a2->mElement != dword_48F498)
    && (*(void *)&a2->mSelector != qword_48F4A0 || a2->mElement != dword_48F4A8))
  {
    return sub_368FB0((uint64_t)a1, a2, a3, a4);
  }

  AudioObjectPropertyAddress __p = *(void **)&a2->mSelector;
  AudioObjectPropertyElement v16 = a2->mElement;
  *(void *)AudioObjectPropertyAddress buf = *(void *)&a2->mSelector;
  *(_DWORD *)&buf[8] = a2->mElement;
  *(void *)&v20[2] = a3;
  *(void *)&v20[10] = a4;
  sub_1885D4(a1 + 64, (unsigned int *)&__p, (unsigned int *)buf);
  return 1LL;
}

BOOL sub_181858( uint64_t a1, const AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  if (*(void *)&a2->mSelector == qword_48F480 && a2->mElement == dword_48F488
    || *(void *)&a2->mSelector == qword_48F490 && a2->mElement == dword_48F498
    || *(void *)&a2->mSelector == qword_48F4A0 && a2->mElement == dword_48F4A8)
  {
    uint64_t v8 = *(void *)&a2->mSelector;
    uint64_t v13 = a4;
    uint64_t v14 = v8;
    AudioObjectPropertyElement mElement = a2->mElement;
    uint64_t v10 = *(void *)&a2->mSelector;
    AudioObjectPropertyElement v11 = a2->mElement;
    char v12 = a3;
    sub_18803C((uint64_t **)(a1 + 512), (unsigned int *)&v14, (unsigned int *)&v10);
    return 1LL;
  }

  else
  {
    sub_1BB60((std::mutex *)a1);
    return AudioObjectRemovePropertyListener(*(_DWORD *)(a1 + 268), a2, a3, a4) == 0;
  }

unsigned __int8 *sub_18199C(uint64_t a1)
{
  uint64_t v2 = sub_5954C();
  (*(void (**)(uint64_t, void (*)(os_unfair_lock_s *)))(*(void *)v2 + 56LL))(v2, sub_186428);
  if (sub_1841D4(a1))
  {
    uint64_t v3 = (void *)sub_1F4000();
    sub_1F4AD0(v3, 1819176821, (unint64_t)sub_18702C);
    char v4 = (uint64_t **)sub_1F4000();
    sub_1F440C(v4, (unint64_t)sub_186C38);
  }

  uint64_t v5 = *(uint64_t **)(a1 + 496);
  if (v5)
  {
    sub_20B22C(v5);
    uint64_t v6 = *(void *)(a1 + 496);
    *(void *)(a1 + 496) = 0LL;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8LL))(v6);
    }
  }

  return sub_369228(a1);
}

uint64_t sub_181A2C(uint64_t a1, double a2)
{
  double v19 = a2;
  uint64_t v4 = sub_369618(a1, a2);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 200LL))(a1);
  uint64_t v17 = 0x676C6F62616F7372LL;
  int v18 = 0;
  if (v5) {
    BOOL v6 = (_DWORD)v4 == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    uint64_t v7 = v5;
    if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v5 + 16LL))(v5, &v17))
    {
      uint64_t v8 = sub_138E8(17);
      uint64_t v9 = sub_138E8(36);
      char v10 = 0;
      uint64_t v11 = 0LL;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002LL;
      uint64_t v12 = *(void *)(v8 + 8);
      while (1)
      {
        uint64_t v13 = *(int *)&buf[4 * v11];
        char v14 = v10;
        if (((v12 & v13) != 0) != ((*(void *)(v9 + 8) & v13) != 0)) {
          break;
        }
        char v10 = 1;
        uint64_t v11 = 1LL;
        if ((v14 & 1) != 0) {
          goto LABEL_13;
        }
      }

      if ((v12 & v13) == 0) {
        uint64_t v8 = v9;
      }
LABEL_13:
      unsigned int v15 = *(os_log_s **)v8;
      if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "Device_Codec_Aspen.cpp";
        __int16 v21 = 1024;
        int v22 = 915;
        __int16 v23 = 2048;
        double v24 = a2;
        _os_log_impl(&dword_0, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d Informing AOP of Codec sample rate %f Hz", buf, 0x1Cu);
      }

      (*(void (**)(uint64_t, uint64_t *, void, void, uint64_t, double *))(*(void *)v7 + 48LL))( v7,  &v17,  0LL,  0LL,  8LL,  &v19);
    }
  }

  return v4;
}

uint64_t sub_181BE4(os_unfair_lock_s *a1)
{
  v82[0] = 1;
  *(void *)&v82[1] = 0x6F7574706D757465LL;
  v82[3] = 1;
  if ((*(unsigned int (**)(os_unfair_lock_s *, _DWORD *))(*(void *)&a1->_os_unfair_lock_opaque + 16LL))( a1,  &v82[1]))
  {
    (*(void (**)(os_unfair_lock_s *, _DWORD *, void, void, uint64_t, _DWORD *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                            + 48LL))( a1,  &v82[1],  0LL,  0LL,  4LL,  v82);
  }

  v82[3] = 2;
  if ((*(unsigned int (**)(os_unfair_lock_s *, _DWORD *))(*(void *)&a1->_os_unfair_lock_opaque + 16LL))( a1,  &v82[1]))
  {
    (*(void (**)(os_unfair_lock_s *, _DWORD *, void, void, uint64_t, _DWORD *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                            + 48LL))( a1,  &v82[1],  0LL,  0LL,  4LL,  v82);
  }

  v82[3] = 3;
  if ((*(unsigned int (**)(os_unfair_lock_s *, _DWORD *))(*(void *)&a1->_os_unfair_lock_opaque + 16LL))( a1,  &v82[1]))
  {
    (*(void (**)(os_unfair_lock_s *, _DWORD *, void, void, uint64_t, _DWORD *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                            + 48LL))( a1,  &v82[1],  0LL,  0LL,  4LL,  v82);
  }

  v82[3] = 4;
  if ((*(unsigned int (**)(os_unfair_lock_s *, _DWORD *))(*(void *)&a1->_os_unfair_lock_opaque + 16LL))( a1,  &v82[1]))
  {
    (*(void (**)(os_unfair_lock_s *, _DWORD *, void, void, uint64_t, _DWORD *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                            + 48LL))( a1,  &v82[1],  0LL,  0LL,  4LL,  v82);
  }

  v82[0] = 0;
  strcpy((char *)&v82[1], "w2bburtp");
  BYTE1(v82[3]) = 0;
  HIWORD(v82[3]) = 0;
  if ((*(unsigned int (**)(os_unfair_lock_s *, _DWORD *))(*(void *)&a1->_os_unfair_lock_opaque + 16LL))( a1,  &v82[1]))
  {
    (*(void (**)(os_unfair_lock_s *, _DWORD *, void, void, uint64_t, _DWORD *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                            + 48LL))( a1,  &v82[1],  0LL,  0LL,  4LL,  v82);
  }

  v82[1] = 1999790690;
  if ((*(unsigned int (**)(os_unfair_lock_s *, _DWORD *))(*(void *)&a1->_os_unfair_lock_opaque + 16LL))( a1,  &v82[1]))
  {
    (*(void (**)(os_unfair_lock_s *, _DWORD *, void, void, uint64_t, _DWORD *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                            + 48LL))( a1,  &v82[1],  0LL,  0LL,  4LL,  v82);
  }

  v82[1] = 1718432370;
  if ((*(unsigned int (**)(os_unfair_lock_s *, _DWORD *))(*(void *)&a1->_os_unfair_lock_opaque + 16LL))( a1,  &v82[1]))
  {
    (*(void (**)(os_unfair_lock_s *, _DWORD *, void, void, uint64_t, _DWORD *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                            + 48LL))( a1,  &v82[1],  0LL,  0LL,  4LL,  v82);
  }

  v82[0] = 0;
  strcpy((char *)&v82[1], "tumdptuo");
  BYTE1(v82[3]) = 0;
  HIWORD(v82[3]) = 0;
  if ((*(unsigned int (**)(os_unfair_lock_s *, _DWORD *))(*(void *)&a1->_os_unfair_lock_opaque + 16LL))( a1,  &v82[1]))
  {
    (*(void (**)(os_unfair_lock_s *, _DWORD *, void, void, uint64_t, _DWORD *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                            + 48LL))( a1,  &v82[1],  0LL,  0LL,  4LL,  v82);
  }

  int v80 = 4;
  float v81 = 0.0;
  strcpy((char *)&v82[1], "dlovptuo");
  BYTE1(v82[3]) = 0;
  HIWORD(v82[3]) = 0;
  if ((*(unsigned int (**)(os_unfair_lock_s *, _DWORD *))(*(void *)&a1->_os_unfair_lock_opaque + 16LL))( a1,  &v82[1]))
  {
    (*(void (**)(os_unfair_lock_s *, _DWORD *, void, void, int *, float *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                         + 40LL))( a1,  &v82[1],  0LL,  0LL,  &v80,  &v81);
    float v2 = v81;
    if (v81 != 0.0)
    {
      float v81 = 0.0;
      (*(void (**)(os_unfair_lock_s *, _DWORD *, void, void, uint64_t, float *, float))(*(void *)&a1->_os_unfair_lock_opaque + 48LL))( a1,  &v82[1],  0LL,  0LL,  4LL,  &v81,  v2);
    }
  }

  BYTE1(v82[3]) = 0;
  HIWORD(v82[3]) = 0;
  strcpy((char *)v82, "Ms2icrscbolg");
  if ((*(unsigned int (**)(os_unfair_lock_s *, _DWORD *))(*(void *)&a1->_os_unfair_lock_opaque + 16LL))( a1,  &v82[1]))
  {
    (*(void (**)(os_unfair_lock_s *, _DWORD *, void, void, uint64_t, _DWORD *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                            + 48LL))( a1,  &v82[1],  0LL,  0LL,  4LL,  v82);
  }

  strcpy(inAddress, "kcajptuo");
  inAddress[9] = 0;
  *(_WORD *)&inAddress[10] = 0;
  AudioObjectID v3 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 120LL))(a1);
  if (AudioObjectHasProperty(v3, (const AudioObjectPropertyAddress *)inAddress))
  {
    AudioObjectID v4 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 120LL))(a1);
    double v5 = sub_187E34(v4, 1u);
    double v7 = v6;
    uint64_t v8 = operator new(0x1E0uLL);
    sub_1C8600((uint64_t)v8, (uint64_t)a1, 1u, 74, v5, v7);
    sub_1D5AE0(a1, (uint64_t)v8);
    sub_1D55D4((uint64_t *)a1, 1u, 1885892727LL, (uint64_t)v8);
    sub_1D580C((uint64_t)a1, 1u, 1885892727LL, (uint64_t)v8);
    if (MGGetSInt32Answer(@"DeviceClassNumber", 0LL) == 1)
    {
      uint64_t v9 = (os_log_t *)sub_138E8(17);
      char v10 = *v9;
      if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_DEBUG))
      {
        buf[0].AudioObjectPropertySelector mSelector = 136315394;
        *(void *)&buf[0].AudioObjectPropertyScope mScope = "Device_Codec_Aspen.cpp";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 1137;
        _os_log_impl(&dword_0, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating TTY controls", (uint8_t *)buf, 0x12u);
      }

      sub_1D55D4((uint64_t *)a1, 1u, 1886680175LL, (uint64_t)v8);
      sub_1D580C((uint64_t)a1, 1u, 1886680175LL, (uint64_t)v8);
    }
  }

  if (sub_1841D4((uint64_t)a1))
  {
    AudioObjectID v11 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 120LL))(a1);
    double v12 = sub_187E34(v11, 2u);
    double v14 = v13;
    unsigned int v15 = operator new(0x1E0uLL);
    sub_1C88B8((uint64_t)v15, (uint64_t)a1, 1869968496LL, 6u, 0, 2, 0LL);
    sub_1D5AE0(a1, (uint64_t)v15);
    AudioObjectPropertyElement v16 = operator new(0x1E0uLL);
    sub_1C8600((uint64_t)v16, (uint64_t)a1, 2u, 8, v12, v14);
    sub_1D5AE0(a1, (uint64_t)v16);
    sub_1D55D4((uint64_t *)a1, 1u, 1886154613LL, (uint64_t)v16);
    sub_1D580C((uint64_t)a1, 1u, 1886154613LL, (uint64_t)v15);
  }

  *(void *)&buf[0].AudioObjectPropertySelector mSelector = 0x6F7574706D757465LL;
  buf[0].AudioObjectPropertyElement mElement = 4;
  AudioObjectID v17 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 120LL))(a1);
  if (AudioObjectHasProperty(v17, buf))
  {
    if (qword_48E8E8 != -1) {
      dispatch_once(&qword_48E8E8, &stru_471118);
    }
    if (byte_48E8E0)
    {
      int v18 = operator new(0x50uLL);
      sub_EC558((uint64_t)v18);
      sub_1D5AE0(a1, (uint64_t)v18);
      double v19 = operator new(0x68uLL);
      sub_EC5B8((uint64_t)v19, 1);
    }

    else
    {
      AudioObjectID v20 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 120LL))(a1);
      double v21 = sub_187E34(v20, 4u);
      double v23 = v22;
      double v19 = operator new(0x1E0uLL);
      sub_1C8600((uint64_t)v19, (uint64_t)a1, 4u, 74, v21, v23);
      int v18 = v19;
    }

    sub_1D5AE0(a1, (uint64_t)v19);
    sub_1D55D4((uint64_t *)a1, 1u, 1886613611LL, (uint64_t)v18);
    sub_1D580C((uint64_t)a1, 1u, 1886613611LL, (uint64_t)v19);
  }

  uint64_t v88 = 0x6F7574706D757465LL;
  LODWORD(v89) = 3;
  AudioObjectID v24 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 120LL))(a1);
  if (AudioObjectHasProperty(v24, (const AudioObjectPropertyAddress *)&v88))
  {
    AudioObjectID v25 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 120LL))(a1);
    double v26 = sub_187E34(v25, 3u);
    double v28 = v27;
    UInt32 v29 = operator new(0x1E0uLL);
    sub_1C8600((uint64_t)v29, (uint64_t)a1, 3u, 74, v26, v28);
    sub_1D5AE0(a1, (uint64_t)v29);
    sub_1D55D4((uint64_t *)a1, 1u, 1886545251LL, (uint64_t)v29);
    sub_1D580C((uint64_t)a1, 1u, 1886545251LL, (uint64_t)v29);
  }

  *(void *)&v86.AudioObjectPropertySelector mSelector = 0x6F7574706D757465LL;
  v86.AudioObjectPropertyElement mElement = 5;
  *(void *)&v85.AudioObjectPropertySelector mSelector = 0x6F757470766F6C6DLL;
  v85.AudioObjectPropertyElement mElement = 5;
  AudioObjectID v30 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 120LL))(a1);
  if (AudioObjectHasProperty(v30, &v86))
  {
    AudioObjectID v31 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 120LL))(a1);
    if (AudioObjectHasProperty(v31, &v85))
    {
      AudioObjectID v32 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 120LL))(a1);
      double v33 = sub_187E34(v32, 5u);
      double v35 = v34;
      float v36 = operator new(0x1E0uLL);
      sub_1C8600((uint64_t)v36, (uint64_t)a1, 5u, 74, v33, v35);
      uint64_t v37 = v36;
    }

    else
    {
      uint64_t v37 = operator new(0x50uLL);
      sub_EC558((uint64_t)v37);
      sub_1D5AE0(a1, (uint64_t)v37);
      float v36 = operator new(0x68uLL);
      sub_EC5B8((uint64_t)v36, 0);
    }

    sub_1D5AE0(a1, (uint64_t)v36);
    sub_1D55D4((uint64_t *)a1, 1u, 1885888867LL, (uint64_t)v37);
    sub_1D580C((uint64_t)a1, 1u, 1885888867LL, (uint64_t)v36);
  }

  sub_9005C();
  char v38 = byte_48CC71;
  *(void *)&v84.AudioObjectPropertySelector mSelector = 0x696E70746D757465LL;
  v84.AudioObjectPropertyElement mElement = 0;
  AudioObjectID v39 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 120LL))(a1);
  if (AudioObjectHasProperty(v39, &v84))
  {
    uint64_t v40 = operator new(0x100uLL);
    *(void *)&v83.AudioObjectPropertySelector mSelector = 0x676C6F626D757465LL;
    v83.AudioObjectPropertyElement mElement = 0;
    sub_220150((uint64_t)v40, (uint64_t *)&v83, (uint64_t)&v84, (uint64_t)a1);
    sub_1D5AE0(a1, (uint64_t)v40);
    if ((v38 & 1) != 0) {
      sub_1D55D4((uint64_t *)a1, 0, 1886216809LL, (uint64_t)v40);
    }
    sub_1D55D4((uint64_t *)a1, 0, 1886222185LL, (uint64_t)v40);
  }

  *(void *)&v83.AudioObjectPropertySelector mSelector = 0x696E7074766F6C64LL;
  v83.AudioObjectPropertyElement mElement = 0;
  AudioObjectID v41 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 120LL))(a1);
  if (AudioObjectHasProperty(v41, &v83))
  {
    std::string v42 = operator new(0x128uLL);
    sub_236254((uint64_t)v42, (uint64_t)a1, 1768845428LL, 0, 0, 59);
    sub_1D5AE0(a1, (uint64_t)v42);
    if ((v38 & 1) != 0) {
      sub_1D580C((uint64_t)a1, 0, 1886216809LL, (uint64_t)v42);
    }
    sub_1D580C((uint64_t)a1, 0, 1886222185LL, (uint64_t)v42);
  }

  sub_18452C((uint64_t *)a1);
  if ((sub_1861F4((uint64_t)a1) & 1) != 0 || sub_1862A4((uint64_t)a1) || sub_186370((uint64_t)a1))
  {
    if (*(void *)&a1[124]._os_unfair_lock_opaque)
    {
      int v74 = (os_log_t *)sub_138E8(13);
      int v75 = *v74;
      if (*v74 && os_log_type_enabled(*v74, OS_LOG_TYPE_ERROR))
      {
        buf[0].AudioObjectPropertySelector mSelector = 136315394;
        *(void *)&buf[0].AudioObjectPropertyScope mScope = "Device_Codec_Aspen.cpp";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 1504;
        _os_log_impl( &dword_0,  v75,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  (uint8_t *)buf,  0x12u);
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }

    char v43 = sub_1861F4((uint64_t)a1);
    buf[0].AudioObjectPropertySelector mSelector = 1885892727;
    *(void *)&buf[0].AudioObjectPropertyElement mElement = 0LL;
    *(void *)&buf[1].AudioObjectPropertyScope mScope = 0LL;
    char v101 = v43;
    BOOL v44 = sub_1862A4((uint64_t)a1);
    int v102 = 1886222185;
    v103[0] = 0LL;
    v103[1] = 0LL;
    BOOL v104 = v44;
    char v45 = sub_186370((uint64_t)a1);
    int v105 = 1886680169;
    v106[0] = 0LL;
    v106[1] = 0LL;
    char v107 = v45;
    char v46 = sub_186370((uint64_t)a1);
    uint64_t v47 = 0LL;
    int v108 = 1886680175;
    v109[0] = 0LL;
    v109[1] = 0LL;
    char v110 = v46;
    std::string v48 = buf;
    do
    {
      AudioObjectPropertySelector mSelector = v48->mSelector;
      AudioObjectID v50 = operator new(4uLL);
      *AudioObjectID v50 = mSelector;
      *(void *)AudioObjectPropertyAddress inAddress = v50;
      *(void *)&inAddress[8] = v50 + 1;
      *(void *)&inAddress[16] = v50 + 1;
      strcpy(v92, "cwdv");
      v92[8] = 0;
      v97[0] = 0LL;
      v97[1] = 0LL;
      __int16 v96 = v97;
      int v95 = 3;
      int v98 = 44739242;
      CFTypeRef v99 = 0LL;
      sub_3710DC(&v88, (uint64_t)a1, (uint64_t)inAddress);
      if (v99) {
        CFRelease(v99);
      }
      sub_32C8C(v97[0]);
      if (*(void *)inAddress)
      {
        *(void *)&inAddress[8] = *(void *)inAddress;
        operator delete(*(void **)inAddress);
      }

      uint64_t mSelector_low = LOBYTE(v48[2].mSelector);
      if (v90 != mSelector_low)
      {
        uint64_t v52 = (os_log_t *)sub_138E8(13);
        UInt32 v53 = *v52;
        if (*v52)
        {
          if (os_log_type_enabled(*v52, OS_LOG_TYPE_ERROR))
          {
            int v54 = v90;
            sub_2CA1C(&v86, v48->mSelector);
            std::string v55 = &v86;
            if (v87 < 0) {
              std::string v55 = *(AudioObjectPropertyAddress **)&v86.mSelector;
            }
            *(_DWORD *)AudioObjectPropertyAddress inAddress = 136316162;
            *(void *)&inAddress[4] = "Device_Codec_Aspen.cpp";
            *(_WORD *)&inAddress[12] = 1024;
            *(_DWORD *)&inAddress[14] = 1521;
            *(_WORD *)&inAddress[18] = 1024;
            *(_DWORD *)&inAddress[20] = v54;
            *(_WORD *)AudioObjectPropertyAddress v92 = 2080;
            *(void *)&v92[2] = v55;
            __int16 v93 = 1024;
            int v94 = mSelector_low;
            _os_log_impl( &dword_0,  v53,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Found %u ports of type '%s' (expected %u)",  inAddress,  0x28u);
            if (v87 < 0) {
              operator delete(*(void **)&v86.mSelector);
            }
          }
        }
      }

      if ((_DWORD)mSelector_low && v90 == 1)
      {
        uint64_t v57 = *(void *)(v89 + 16);
        uint64_t v56 = *(void *)(v89 + 24);
        if (v56)
        {
          uint64_t v58 = (unint64_t *)(v56 + 16);
          do
            unint64_t v59 = __ldxr(v58);
          while (__stxr(v59 + 1, v58));
        }

        char v60 = *(std::__shared_weak_count **)&v48[1].mScope;
        *(void *)&v48->AudioObjectPropertyElement mElement = v57;
        *(void *)&v48[1].AudioObjectPropertyScope mScope = v56;
        if (v60) {
          std::__shared_weak_count::__release_weak(v60);
        }
      }

      sub_85B80(&v88);
      ++v47;
      std::string v48 = (AudioObjectPropertyAddress *)((char *)buf + 32 * v47);
    }

    while (v47 != 4);
    UInt32 v61 = operator new(0x120uLL);
    sub_20AC18((uint64_t)v61, &buf[0].mElement, v103, v106, v109, (uint64_t)a1);
    uint64_t v62 = *(void *)&a1[124]._os_unfair_lock_opaque;
    *(void *)&a1[124]._AudioObjectPropertyElement os_unfair_lock_opaque = v61;
    if (v62) {
      (*(void (**)(uint64_t))(*(void *)v62 + 8LL))(v62);
    }
    for (uint64_t i = 112LL; i != -16; i -= 32LL)
    {
      __int128 v64 = *(std::__shared_weak_count **)((char *)&buf[0].mSelector + i);
      if (v64) {
        std::__shared_weak_count::__release_weak(v64);
      }
    }
  }

  uint64_t v65 = sub_5954C();
  (*(void (**)(uint64_t, void (*)(os_unfair_lock_s *), os_unfair_lock_s *))(*(void *)v65 + 48LL))( v65,  sub_186428,  a1);
  sub_1864F4(a1);
  if (sub_1841D4((uint64_t)a1))
  {
    AudioObjectPropertyAddress v66 = (uint64_t **)sub_1F4000();
    sub_1F4114(v66, (unint64_t)sub_186C38, (unint64_t)a1);
    sub_186D20(a1);
    uint64_t v67 = sub_1F4000();
    sub_1F470C(v67, 1819176821, (unint64_t)sub_18702C, (unint64_t)a1);
  }

  uint64_t v88 = 0x707472755354656ELL;
  LODWORD(v89) = 0;
  if ((*(unsigned int (**)(os_unfair_lock_s *, uint64_t *))(*(void *)&a1->_os_unfair_lock_opaque + 16LL))( a1,  &v88))
  {
    buf[0].AudioObjectPropertySelector mSelector = 0;
    (*(void (**)(os_unfair_lock_s *, uint64_t *, void, void, uint64_t, AudioObjectPropertyAddress *))(*(void *)&a1->_os_unfair_lock_opaque + 48LL))( a1,  &v88,  0LL,  0LL,  4LL,  buf);
  }

  *(void *)&v86.AudioObjectPropertySelector mSelector = 0x6F7574706D757465LL;
  v86.AudioObjectPropertyElement mElement = 5;
  if ((*(unsigned int (**)(os_unfair_lock_s *, AudioObjectPropertyAddress *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                        + 16LL))( a1,  &v86))
  {
    buf[0].AudioObjectPropertySelector mSelector = 1;
    (*(void (**)(os_unfair_lock_s *, AudioObjectPropertyAddress *, void, void, uint64_t, AudioObjectPropertyAddress *))(*(void *)&a1->_os_unfair_lock_opaque + 48LL))( a1,  &v86,  0LL,  0LL,  4LL,  buf);
  }

  *(void *)&v85.AudioObjectPropertySelector mSelector = 0x676C6F624D434373LL;
  v85.AudioObjectPropertyElement mElement = 0;
  if ((*(unsigned int (**)(os_unfair_lock_s *, AudioObjectPropertyAddress *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                        + 16LL))( a1,  &v85))
  {
    *(void *)&v84.AudioObjectPropertySelector mSelector = 0LL;
    int v80 = 8;
    (*(void (**)(os_unfair_lock_s *, AudioObjectPropertyAddress *, void, void, int *, AudioObjectPropertyAddress *))(*(void *)&a1->_os_unfair_lock_opaque + 40LL))( a1,  &v85,  0LL,  0LL,  &v80,  &v84);
    if (!*(void *)&v84.mSelector)
    {
      UInt32 v77 = (os_log_t *)sub_138E8(13);
      int v78 = *v77;
      if (*v77 && os_log_type_enabled(*v77, OS_LOG_TYPE_ERROR))
      {
        buf[0].AudioObjectPropertySelector mSelector = 136315394;
        *(void *)&buf[0].AudioObjectPropertyScope mScope = "Device_Codec_Aspen.cpp";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 875;
        _os_log_impl( &dword_0,  v78,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [maxChannelInfo is NULL]: Invalid Maximum Channel Info",  (uint8_t *)buf,  0x12u);
      }

      int v79 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v79, "Invalid Maximum Channel Info");
    }

    *(void *)AudioObjectPropertyAddress inAddress = *(void *)&v84.mSelector;
    *(_WORD *)&inAddress[8] = 1;
    if (CFDictionaryContainsKey(*(CFDictionaryRef *)&v84.mSelector, @"MaxInputChannelCount"))
    {
      if ((sub_51A88(*(const __CFDictionary **)inAddress, @"MaxInputChannelCount", &a1[171]) & 1) == 0)
      {
        char v68 = (os_log_t *)sub_138E8(17);
        UInt32 v69 = *v68;
        if (*v68)
        {
          if (os_log_type_enabled(*v68, OS_LOG_TYPE_ERROR))
          {
            buf[0].AudioObjectPropertySelector mSelector = 136315394;
            *(void *)&buf[0].AudioObjectPropertyScope mScope = "Device_Codec_Aspen.cpp";
            LOWORD(buf[1].mSelector) = 1024;
            *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 882;
            _os_log_impl( &dword_0,  v69,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Unable to convert max num input channels to UInt32",  (uint8_t *)buf,  0x12u);
          }
        }
      }

      uint64_t v70 = sub_138E8(17);
      if ((*(_BYTE *)(v70 + 8) & 1) != 0)
      {
        uint64_t v71 = *(os_log_s **)v70;
        if (*(void *)v70)
        {
          if (os_log_type_enabled(*(os_log_t *)v70, OS_LOG_TYPE_DEBUG))
          {
            AudioObjectPropertyElement os_unfair_lock_opaque = a1[171]._os_unfair_lock_opaque;
            buf[0].AudioObjectPropertySelector mSelector = 136315650;
            *(void *)&buf[0].AudioObjectPropertyScope mScope = "Device_Codec_Aspen.cpp";
            LOWORD(buf[1].mSelector) = 1024;
            *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 883;
            HIWORD(buf[1].mScope) = 1024;
            buf[1].AudioObjectPropertyElement mElement = os_unfair_lock_opaque;
            _os_log_impl( &dword_0,  v71,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Codec specified a maximum number of input channels: %u",  (uint8_t *)buf,  0x18u);
          }
        }
      }
    }

    sub_13850((uint64_t)inAddress);
  }

  return 1LL;
}

void sub_182CB0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28, uint64_t a29, uint64_t a30, char a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, char a43)
{
}

void sub_182DD4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 656)) {
    sub_184220(a1, 1);
  }
}

void sub_182DE8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 656)) {
    sub_184220(a1, 0);
  }
}

uint64_t sub_182DFC()
{
  if ((sub_1CC090() & 1) != 0) {
    return 0LL;
  }
  uint64_t v1 = (void *)sub_EAD14();
  CFStringRef v3 = CFStringCreateWithCString(0LL, "AOP Audio-1", 0x600u);
  char v4 = 1;
  uint64_t v0 = sub_EAE28(v1, &v3);
  sub_19DFC((uint64_t)&v3);
  return v0;
}

void sub_182E70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_182E84(uint64_t a1, int a2)
{
  if (a2 > 1886545250)
  {
    switch(a2)
    {
      case 1886545251:
        return 3LL;
      case 1886613611:
        return 4LL;
      case 1886680175:
        return 1LL;
      default:
        goto LABEL_13;
    }
  }

  else
  {
    if (a2 != 1885888867)
    {
      if (a2 != 1885892727)
      {
        if (a2 == 1886154613) {
          return 2LL;
        }
LABEL_13:
        CFStringRef v3 = (os_log_t *)sub_138E8(17);
        char v4 = *v3;
        if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(__p, a2);
          double v5 = v12 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          double v14 = "Device_Codec_Aspen.cpp";
          __int16 v15 = 1024;
          int v16 = 984;
          __int16 v17 = 2080;
          int v18 = v5;
          _os_log_impl( &dword_0,  v4,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).",  buf,  0x1Cu);
          if (v12 < 0) {
            operator delete(__p[0]);
          }
        }

        double v6 = (os_log_t *)sub_138E8(13);
        double v7 = *v6;
        if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
        {
          sub_2CA1C(__p, a2);
          if (v12 >= 0) {
            uint64_t v8 = __p;
          }
          else {
            uint64_t v8 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          double v14 = "Device_Codec_Aspen.cpp";
          __int16 v15 = 1024;
          int v16 = 985;
          __int16 v17 = 2080;
          int v18 = v8;
          _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unsupported VirtualAudioPortType: %s.",  buf,  0x1Cu);
          if (v12 < 0) {
            operator delete(__p[0]);
          }
        }

        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType: %s.");
      }

      return 1LL;
    }

    return 5LL;
  }

void sub_1830EC(_Unwind_Exception *a1)
{
}

void sub_183108(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_138E8(17);
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
  {
    double v5 = *(os_log_s **)v4;
    if (*(void *)v4)
    {
      if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v6 = *(void *)(a2 + 16);
        sub_1840C0(&__p, *(void *)(a2 + 8), a2);
        double v7 = (__p.__r_.__value_.__s.__size_ & 0x80u) == 0 ? &__p : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        double v13 = "Device_Codec_Aspen.cpp";
        __int16 v14 = 1024;
        int v15 = 995;
        __int16 v16 = 2048;
        uint64_t v17 = v6;
        __int16 v18 = 2080;
        double v19 = v7;
        _os_log_impl(&dword_0, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d inPortList (%zu): %s.", buf, 0x26u);
      }
    }
  }

  BOOL v8 = sub_1FF038(1886154613, a2);
  if (!sub_1841D4(a1) && v8)
  {
    uint64_t v9 = (os_log_t *)sub_138E8(13);
    char v10 = *v9;
    if (*v9)
    {
      if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        double v13 = "Device_Codec_Aspen.cpp";
        __int16 v14 = 1024;
        int v15 = 998;
        _os_log_impl( &dword_0,  v10,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Unexpected lineout port",  buf,  0x12u);
      }
    }
  }

  *(_BYTE *)(a1 + 656) = v8;
}

void *sub_1832C8@<X0>(void *result@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  if (a2 == 1886216809)
  {
    uint64_t v3 = *(void *)(result[84] + 24LL);
    if (!v3)
    {
      char v10 = (os_log_t *)sub_138E8(13);
      AudioObjectID v11 = *v10;
      if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
      {
        __int32 v13 = 136315394;
        __int16 v14 = "Device_Codec_Aspen.cpp";
        __int16 v15 = 1024;
        int v16 = 1015;
        _os_log_impl( &dword_0,  v11,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error) [mTransducerDatabase.mBuiltInMicDefaultSubPort is NULL]: No default sub-port specified for built-in mic.",  (uint8_t *)&v13,  0x12u);
      }

      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "No default sub-port specified for built-in mic.");
    }

    uint64_t v4 = *(__int32 **)(v3 + 32);
    double v5 = *(__int32 **)(v3 + 40);
    if ((unint64_t)((char *)v5 - (char *)v4) >= 0x41 && v4 != v5)
    {
      double v7 = v4;
      while (v7[8] != 1869442665)
      {
        v7 += 16;
        if (v7 == v5) {
          goto LABEL_15;
        }
      }

      uint64_t v4 = v7;
    }

void sub_18346C(_Unwind_Exception *a1)
{
}

char *sub_183488@<X0>(char *result@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v3 = (uint64_t)result;
  int v5 = *(_DWORD *)(a2 + 144);
  switch(v5)
  {
    case 1886216809:
      *a3 = 0LL;
      a3[1] = 0LL;
      a3[2] = 0LL;
      sub_1CB3D8((uint64_t)&theData);
      if (v84)
      {
        uint64_t v6 = theData;
        if (theData && (BytePtr = CFDataGetBytePtr(theData), unint64_t Length = CFDataGetLength(v6), BytePtr))
        {
          uint64_t v9 = Length;
          if (Length > 3)
          {
            LODWORD(v10) = *(_DWORD *)BytePtr;
            AudioObjectID v11 = (os_log_t *)sub_138E8(17);
            char v12 = *v11;
            if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
              AudioObjectPropertyAddress v86 = "Device_Codec_Aspen.cpp";
              __int16 v87 = 1024;
              int v88 = 1738;
              __int16 v89 = 1024;
              *(_DWORD *)uint64_t v90 = WORD1(v10);
              *(_WORD *)&v90[4] = 1024;
              *(_DWORD *)&v90[6] = BYTE1(v10);
              LOWORD(v91) = 1024;
              *(_DWORD *)((char *)&v91 + 2) = v10;
              _os_log_impl( &dword_0,  v12,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Mic Trim gains: version %d, size %d, entries %d",  buf,  0x24u);
            }

            if (WORD1(v10) != 1 || (v10 & 0xFF00) != 0x200)
            {
              int v75 = (os_log_t *)sub_138E8(13);
              unsigned int v76 = *v75;
              if (*v75 && os_log_type_enabled(*v75, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                AudioObjectPropertyAddress v86 = "Device_Codec_Aspen.cpp";
                __int16 v87 = 1024;
                int v88 = 1740;
                _os_log_impl( &dword_0,  v76,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
              }

              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(exception, "Precondition failure.");
            }

            unint64_t v10 = v10;
            if ((_BYTE)v10)
            {
              if (v9 > 7)
              {
                __int32 v13 = 0LL;
                unint64_t v39 = (unint64_t)&BytePtr[v9 - 4];
                uint64_t v40 = (int *)(BytePtr + 4);
                unint64_t v10 = v10;
                __int128 v14 = 0uLL;
                do
                {
                  AudioObjectID v41 = (char *)*((void *)&v14 + 1);
                  std::string v42 = (char *)v14;
                  unint64_t v43 = (uint64_t)(*((void *)&v14 + 1) - v14) >> 2;
                  int v44 = *v40;
                  float v45 = (double)(*v40 >> 16) * 0.1;
                  if (*((void *)&v14 + 1) >= (unint64_t)v13)
                  {
                    unint64_t v47 = (uint64_t)((uint64_t)v13 - v14) >> 1;
                    if (v47 <= v43 + 1) {
                      unint64_t v47 = v43 + 1;
                    }
                    else {
                      unint64_t v48 = v47;
                    }
                    __int128 v49 = (char *)sub_7A890(v48);
                    int v51 = (float *)&v49[4 * v43];
                    *int v51 = v45;
                    char v46 = v51 + 1;
                    while (v41 != v42)
                    {
                      int v52 = *((_DWORD *)v41 - 1);
                      v41 -= 4;
                      *((_DWORD *)v51-- - 1) = v52;
                    }

                    __int32 v13 = (float *)&v49[4 * v50];
                    *(void *)&__int128 v14 = v51;
                    if (v42)
                    {
                      int v78 = v51;
                      operator delete(v42);
                      *(void *)&__int128 v14 = v78;
                    }
                  }

                  else
                  {
                    **((float **)&v14 + 1) = v45;
                    char v46 = (float *)(*((void *)&v14 + 1) + 4LL);
                  }

                  float v53 = (double)(__int16)v44 * 0.1;
                  int v79 = (float *)v14;
                  if (v46 >= v13)
                  {
                    std::string v55 = (float *)v14;
                    uint64_t v56 = (uint64_t)((uint64_t)v46 - v14) >> 2;
                    unint64_t v57 = v56 + 1;
                    else {
                      unint64_t v58 = v57;
                    }
                    if (v58) {
                      unint64_t v58 = (unint64_t)sub_7A890(v58);
                    }
                    else {
                      uint64_t v59 = 0LL;
                    }
                    char v60 = (float *)(v58 + 4 * v56);
                    *char v60 = v53;
                    int v54 = v60 + 1;
                    while (v46 != v55)
                    {
                      int v61 = *((_DWORD *)v46-- - 1);
                      *((_DWORD *)v60-- - 1) = v61;
                    }

                    __int32 v13 = (float *)(v58 + 4 * v59);
                    int v79 = v60;
                    if (v55) {
                      operator delete(v55);
                    }
                  }

                  else
                  {
                    *char v46 = v53;
                    int v54 = v46 + 1;
                  }

                  *(void *)&__int128 v62 = v79;
                  *((void *)&v62 + 1) = v54;
                  __int128 v80 = v62;
                  char v63 = (os_log_t *)sub_138E8(17);
                  __int128 v64 = *v63;
                  if (*v63 && os_log_type_enabled(*v63, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                    AudioObjectPropertyAddress v86 = "Device_Codec_Aspen.cpp";
                    __int16 v87 = 1024;
                    int v88 = 1759;
                    __int16 v89 = 2048;
                    *(double *)uint64_t v90 = v45;
                    *(_WORD *)&v90[8] = 2048;
                    double v91 = v53;
                    _os_log_impl(&dword_0, v64, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Parsed trim gains: %f %f", buf, 0x26u);
                  }

                  ++v40;
                  __int128 v14 = v80;
                }

                while ((unint64_t)v40 <= v39);
              }

              else
              {
                __int32 v13 = 0LL;
                __int128 v14 = 0uLL;
              }

              uint64_t v65 = *((void *)&v14 + 1);
              if (v10 < (uint64_t)(*((void *)&v14 + 1) - v14) >> 2)
              {
                uint64_t v66 = *((void *)&v14 + 1) - v14 - 4;
                do
                {
                  v65 -= 4LL;
                  BOOL v21 = v10 >= v66 >> 2;
                  v66 -= 4LL;
                }

                while (!v21);
                *((void *)&v14 + 1) = v65;
              }
            }

            else
            {
              uint64_t v37 = (os_log_t *)sub_138E8(17);
              char v38 = *v37;
              __int128 v14 = 0uLL;
              if (*v37)
              {
                if (os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                  AudioObjectPropertyAddress v86 = "Device_Codec_Aspen.cpp";
                  __int16 v87 = 1024;
                  int v88 = 1744;
                  _os_log_impl( &dword_0,  v38,  OS_LOG_TYPE_ERROR,  "%25s:%-5d Number of Mic trim gain entries is zero",  buf,  0x12u);
                }

                __int32 v13 = 0LL;
                __int128 v14 = 0uLL;
              }

              else
              {
                __int32 v13 = 0LL;
              }
            }

            *(_OWORD *)a3 = v14;
            a3[2] = (char *)v13;
            return (char *)sub_184088((uint64_t)&theData);
          }

          int v72 = (os_log_t *)sub_138E8(13);
          std::unique_lock<std::mutex> v73 = *v72;
          if (*v72 && os_log_type_enabled(*v72, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            AudioObjectPropertyAddress v86 = "Device_Codec_Aspen.cpp";
            __int16 v87 = 1024;
            int v88 = 1731;
            _os_log_impl( &dword_0,  v73,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
          }
        }

        else
        {
          uint64_t v67 = (os_log_t *)sub_138E8(13);
          char v68 = *v67;
          if (*v67 && os_log_type_enabled(*v67, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            AudioObjectPropertyAddress v86 = "Device_Codec_Aspen.cpp";
            __int16 v87 = 1024;
            int v88 = 1730;
            _os_log_impl( &dword_0,  v68,  OS_LOG_TYPE_ERROR,  "%25s:%-5d PRECONDITION FAILURE (std::logic_error).",  buf,  0x12u);
          }
        }

        int v74 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v74, "Precondition failure.");
      }

      uint64_t v15 = *(void *)(v3 + 664);
      uint64_t v18 = *(void *)(v15 + 72);
      uint64_t v16 = v15 + 72;
      uint64_t v17 = v18;
      if (!v18) {
        goto LABEL_115;
      }
      uint64_t v19 = v16;
      do
      {
        unsigned int v20 = *(_DWORD *)(v17 + 32);
        BOOL v21 = v20 >= 0x706D6269;
        if (v20 >= 0x706D6269) {
          double v22 = (uint64_t *)v17;
        }
        else {
          double v22 = (uint64_t *)(v17 + 8);
        }
        if (v21) {
          uint64_t v19 = v17;
        }
        uint64_t v17 = *v22;
      }

      while (*v22);
      if (v19 == v16 || *(_DWORD *)(v19 + 32) > 0x706D6269u)
      {
LABEL_115:
        UInt32 v69 = (os_log_t *)sub_138E8(13);
        uint64_t v70 = *v69;
        if (*v69 && os_log_type_enabled(*v69, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          AudioObjectPropertyAddress v86 = "Device_Codec_Aspen.cpp";
          __int16 v87 = 1024;
          int v88 = 1783;
          _os_log_impl( &dword_0,  v70,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::logic_error): Unable to locate built-in mic sub-port information",  buf,  0x12u);
        }

        uint64_t v71 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v71, "Unable to locate built-in mic sub-port information");
      }

      double v23 = *(int **)(v19 + 40);
      if (*(int **)(v19 + 48) != v23)
      {
        AudioObjectID v24 = 0LL;
        unint64_t v25 = 0LL;
        double v26 = 0LL;
        do
        {
          uint64_t v27 = sub_138E8(17);
          if ((*(_BYTE *)(v27 + 8) & 1) != 0)
          {
            double v28 = *(os_log_s **)v27;
            if (*(void *)v27)
            {
              if (os_log_type_enabled(*(os_log_t *)v27, OS_LOG_TYPE_DEBUG))
              {
                sub_2CA1C(__p, *v23);
                UInt32 v29 = __p;
                if (v82 < 0) {
                  UInt32 v29 = (void **)__p[0];
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                AudioObjectPropertyAddress v86 = "Device_Codec_Aspen.cpp";
                __int16 v87 = 1024;
                int v88 = 1789;
                __int16 v89 = 2080;
                *(void *)uint64_t v90 = v29;
                _os_log_impl( &dword_0,  v28,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Setting trim for Data Source ID %s",  buf,  0x1Cu);
                if (v82 < 0) {
                  operator delete(__p[0]);
                }
              }
            }
          }

          *(_DWORD *)AudioObjectPropertyAddress buf = 0;
          if (sub_184000(v3, 1768845428, *v23, (uint64_t)buf))
          {
            if ((unint64_t)v26 >= v25)
            {
              uint64_t v31 = (v26 - v24) >> 2;
              unint64_t v32 = v31 + 1;
              else {
                unint64_t v33 = v32;
              }
              if (v33) {
                unint64_t v33 = (unint64_t)sub_7A890(v33);
              }
              else {
                uint64_t v34 = 0LL;
              }
              double v35 = (char *)(v33 + 4 * v31);
              *(_DWORD *)double v35 = *(_DWORD *)buf;
              AudioObjectID v30 = v35 + 4;
              while (v26 != v24)
              {
                int v36 = *((_DWORD *)v26 - 1);
                v26 -= 4;
                *((_DWORD *)v35 - 1) = v36;
                v35 -= 4;
              }

              unint64_t v25 = v33 + 4 * v34;
              *a3 = v35;
              a3[1] = v30;
              a3[2] = (char *)v25;
              if (v24) {
                operator delete(v24);
              }
              AudioObjectID v24 = v35;
            }

            else
            {
              *(_DWORD *)double v26 = *(_DWORD *)buf;
              AudioObjectID v30 = v26 + 4;
            }

            a3[1] = v30;
            double v26 = v30;
          }

          ++v23;
        }

        while (*(int **)(v19 + 48) != v23);
      }

      return (char *)sub_184088((uint64_t)&theData);
    case 1886545251:
      *a3 = 0LL;
      a3[1] = 0LL;
      a3[2] = 0LL;
      *(_DWORD *)AudioObjectPropertyAddress buf = 0;
      uint64_t result = (char *)sub_184000((uint64_t)result, 1869968496, 3, (uint64_t)buf);
      if ((_DWORD)result)
      {
LABEL_7:
        uint64_t result = (char *)operator new(4uLL);
        *(_DWORD *)uint64_t result = *(_DWORD *)buf;
        *a3 = result;
        a3[1] = result + 4;
        a3[2] = result + 4;
      }

      break;
    case 1886613611:
      *a3 = 0LL;
      a3[1] = 0LL;
      a3[2] = 0LL;
      *(_DWORD *)AudioObjectPropertyAddress buf = 0;
      uint64_t result = (char *)sub_184000((uint64_t)result, 1869968496, 4, (uint64_t)buf);
      if ((_DWORD)result) {
        goto LABEL_7;
      }
      break;
    default:
      *a3 = 0LL;
      a3[1] = 0LL;
      a3[2] = 0LL;
      break;
  }

  return result;
}

void sub_183E2C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  AudioObjectID v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }

  _Unwind_Resume(a1);
}

void sub_183EF0(uint64_t a1, unsigned int **a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 664);
  if (!v3)
  {
    uint64_t v4 = (os_log_t *)sub_138E8(13);
    int v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      BOOL v8 = "Device_Codec_Aspen.cpp";
      __int16 v9 = 1024;
      int v10 = 1006;
      _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (std::runtime_error): No valid support policy present",  (uint8_t *)&v7,  0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "No valid support policy present");
  }

  sub_2E0360(v3, a2, a3);
}

void sub_183FE4(_Unwind_Exception *exception_object)
{
}

uint64_t sub_184000(uint64_t a1, int a2, int a3, uint64_t a4)
{
  v9[0] = 1635021667;
  v9[1] = a2;
  void v9[2] = a3;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a1 + 16LL))(a1, v9);
  if ((_DWORD)v6)
  {
    int v8 = 4;
    (*(void (**)(uint64_t, _DWORD *, void, void, int *, uint64_t))(*(void *)a1 + 40LL))( a1,  v9,  0LL,  0LL,  &v8,  a4);
  }

  return v6;
}

uint64_t sub_184088(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
  {
    float v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }

  return a1;
}

std::string *sub_1840C0(std::string *a1, uint64_t a2, uint64_t a3)
{
  a1->__r_.__value_.__r.__words[0] = 0LL;
  a1->__r_.__value_.__l.__size_ = 0LL;
  a1->__r_.__value_.__l.__cap_ = 0LL;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      sub_1263EC(__p, (os_unfair_lock_s **)(a2 + 16));
      uint64_t v6 = (v10 & 0x80u) == 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
      int v7 = (v10 & 0x80u) == 0 ? (void *)v10 : __p[1];
      std::string::append(a1, v6, (std::string::size_type)v7);
      a2 = *(void *)(a2 + 8);
      if (a2 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }

  return std::string::append(a1, " }", 2uLL);
}

void sub_184198( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

BOOL sub_1841D4(uint64_t a1)
{
  AudioObjectID v1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120LL))(a1);
  *(void *)&v3.AudioObjectPropertySelector mSelector = 0x6F757470766F6C6DLL;
  v3.AudioObjectPropertyElement mElement = 2;
  return AudioObjectHasProperty(v1, &v3) != 0;
}

void sub_184220(uint64_t a1, int a2)
{
  if (!sub_1841D4(a1))
  {
    uint64_t v4 = (os_log_t *)sub_138E8(13);
    int v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
      {
        int v18 = 136315394;
        uint64_t v19 = "Device_Codec_Aspen.cpp";
        __int16 v20 = 1024;
        int v21 = 1671;
        _os_log_impl( &dword_0,  v5,  OS_LOG_TYPE_ERROR,  "%25s:%-5d ASSERTION FAILURE: Does not support lineout",  (uint8_t *)&v18,  0x12u);
      }
    }
  }

  if (*(_BYTE *)(a1 + 656))
  {
    uint64_t v6 = sub_138E8(17);
    if ((*(_BYTE *)(v6 + 8) & 1) != 0)
    {
      int v7 = *(os_log_s **)v6;
      if (*(void *)v6)
      {
        if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
        {
          int v8 = "down";
          uint64_t v19 = "Device_Codec_Aspen.cpp";
          int v18 = 136315650;
          if (a2) {
            int v8 = "up";
          }
          __int16 v20 = 1024;
          int v21 = 1674;
          __int16 v22 = 2080;
          double v23 = v8;
          _os_log_impl( &dword_0,  v7,  OS_LOG_TYPE_DEBUG,  "%25s:%-5d Will attempt to power %s the output accessory.",  (uint8_t *)&v18,  0x1Cu);
        }
      }
    }

    uint64_t v9 = *(unsigned int *)(sub_1F4000() + 88);
    if (a2)
    {
      int started = IAPAudioStartPlaybackForTransport(v9);
      AudioObjectID v11 = (os_log_t *)sub_138E8(11);
      char v12 = *v11;
      if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEBUG))
      {
        int v18 = 136315650;
        uint64_t v19 = "IAPManager.cpp";
        __int16 v20 = 1024;
        int v21 = 306;
        __int16 v22 = 1024;
        LODWORD(v23) = started;
        __int32 v13 = "%25s:%-5d IAPAudioStartPlaybackForTransport() returned %u.";
LABEL_19:
        _os_log_impl(&dword_0, v12, OS_LOG_TYPE_DEBUG, v13, (uint8_t *)&v18, 0x18u);
      }
    }

    else
    {
      int started = IAPAudioStopPlaybackForTransport(v9);
      __int128 v14 = (os_log_t *)sub_138E8(11);
      char v12 = *v14;
      if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_DEBUG))
      {
        int v18 = 136315650;
        uint64_t v19 = "IAPManager.cpp";
        __int16 v20 = 1024;
        int v21 = 311;
        __int16 v22 = 1024;
        LODWORD(v23) = started;
        __int32 v13 = "%25s:%-5d IAPAudioStopPlaybackForTransport() returned %u.";
        goto LABEL_19;
      }
    }

    if (started != 1)
    {
      uint64_t v15 = (os_log_t *)sub_138E8(13);
      uint64_t v16 = *v15;
      if (*v15)
      {
        if (os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
        {
          int v18 = 136315394;
          uint64_t v19 = "Device_Codec_Aspen.cpp";
          __int16 v20 = 1024;
          int v21 = 1676;
          _os_log_impl( &dword_0,  v16,  OS_LOG_TYPE_ERROR,  "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): IAPManager::SetPlaybackAccessoryEnabled failed.",  (uint8_t *)&v18,  0x12u);
        }
      }

      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_4865A0;
      exception[2] = 2003329396;
    }
  }

void sub_18452C(uint64_t *a1)
{
  if (sub_1861F4((uint64_t)a1))
  {
    *(void *)AudioObjectPropertyAddress buf = 0x6F757470534E5263LL;
    *(_DWORD *)&buf[8] = 1;
    if ((*(unsigned int (**)(uint64_t *, uint8_t *))(*a1 + 16))(a1, buf))
    {
      LODWORD(v183) = 0;
      LODWORD(v180) = 4;
      (*(void (**)(uint64_t *, uint8_t *, void, void, __int128 *, __int128 *))(*a1 + 40))( a1,  buf,  0LL,  0LL,  &v180,  &v183);
      BOOL v2 = *(float *)&v183 > 96.0;
    }

    else
    {
      BOOL v2 = 0;
    }

    AudioObjectPropertyAddress v3 = (os_log_t *)sub_138E8(17);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_DEBUG))
    {
      int v5 = "16-bit";
      *(void *)&uint8_t buf[4] = "Device_Codec_Aspen.cpp";
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      if (v2) {
        int v5 = "24-bit";
      }
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1299;
      *(_WORD *)&_BYTE buf[18] = 2080;
      *(void *)&buf[20] = v5;
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating a %s wired-headphones port", buf, 0x1Cu);
    }

    uint64_t v6 = operator new(0x228uLL);
    v6[1] = 0LL;
    void v6[2] = 0LL;
    void *v6 = off_485BF0;
    sub_15AA94((uint64_t)(v6 + 3), (uint64_t)a1, v2);
    *(void *)&__int128 v180 = v6 + 3;
    *((void *)&v180 + 1) = v6;
    sub_AFDAC((uint64_t)&v180, v6 + 13, (uint64_t)(v6 + 3));
    if (((*(uint64_t (**)(uint64_t *))(*a1 + 312))(a1) & 0xFF00000000LL) != 0)
    {
      int v7 = (os_log_t *)sub_138E8(17);
      int v8 = *v7;
      if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "Device_Codec_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1304;
        _os_log_impl(&dword_0, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating a wired tapstream port", buf, 0x12u);
      }

      uint64_t v9 = operator new(0x228uLL);
      v9[1] = 0LL;
      void v9[2] = 0LL;
      *uint64_t v9 = off_485BB8;
      *(void *)AudioObjectPropertyAddress buf = CFStringCreateWithCString(0LL, "Wired Headphones Reference", 0x600u);
      buf[8] = 1;
      sub_31AB40((uint64_t)(v9 + 3), (uint64_t)a1, (uint64_t)buf);
      sub_19DFC((uint64_t)buf);
      *(void *)&__int128 v183 = v9 + 3;
      *((void *)&v183 + 1) = v9;
      sub_AFDAC((uint64_t)&v183, v9 + 13, (uint64_t)(v9 + 3));
      __int128 v178 = v183;
      __int128 v183 = 0uLL;
      sub_3711D4((uint64_t)a1, (void ***)&v178);
      unsigned __int8 v10 = (std::__shared_weak_count *)*((void *)&v178 + 1);
      if (*((void *)&v178 + 1))
      {
        AudioObjectID v11 = (unint64_t *)(*((void *)&v178 + 1) + 8LL);
        do
          unint64_t v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }

      __int32 v13 = (std::__shared_weak_count *)*((void *)&v183 + 1);
      if (*((void *)&v183 + 1))
      {
        __int128 v14 = (unint64_t *)(*((void *)&v183 + 1) + 8LL);
        do
          unint64_t v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }

    if (sub_1862A4((uint64_t)a1))
    {
      uint64_t v16 = (os_log_t *)sub_138E8(17);
      uint64_t v17 = *v16;
      if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "Device_Codec_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1314;
        _os_log_impl(&dword_0, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating a wired-microphone port", buf, 0x12u);
      }

      uint64_t v18 = a1[83];
      uint64_t v21 = *(void *)(v18 + 72);
      uint64_t v19 = v18 + 72;
      uint64_t v20 = v21;
      if (!v21) {
        goto LABEL_39;
      }
      uint64_t v22 = v19;
      do
      {
        unsigned int v23 = *(_DWORD *)(v20 + 32);
        BOOL v24 = v23 >= 0x706D7769;
        if (v23 >= 0x706D7769) {
          unint64_t v25 = (uint64_t *)v20;
        }
        else {
          unint64_t v25 = (uint64_t *)(v20 + 8);
        }
        if (v24) {
          uint64_t v22 = v20;
        }
        uint64_t v20 = *v25;
      }

      while (*v25);
      if (v22 == v19 || *(_DWORD *)(v22 + 32) > 0x706D7769u) {
LABEL_39:
      }
        uint64_t v22 = v19;
      int v175 = 0LL;
      char v176 = 0LL;
      uint64_t v177 = 0LL;
      sub_7A5B8( &v175,  *(const void **)(v22 + 40),  *(void *)(v22 + 48),  (uint64_t)(*(void *)(v22 + 48) - *(void *)(v22 + 40)) >> 2);
      double v26 = v175;
      sub_389724((char **)buf, v175, v176);
      if (v26)
      {
        char v176 = v26;
        operator delete(v26);
      }

      uint64_t v27 = (std::__shared_weak_count *)operator new(0x228uLL);
      v27->__shared_owners_ = 0LL;
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      v27->__shared_weak_owners_ = 0LL;
      v27->__vftable = (std::__shared_weak_count_vtbl *)off_485C28;
      sub_15AF80((uint64_t)&v27[1], (uint64_t)a1, (char **)buf);
      *(void *)&__int128 v183 = v27 + 1;
      *((void *)&v183 + 1) = v27;
      sub_AFDAC((uint64_t)&v183, &v27[4].__shared_owners_, (uint64_t)&v27[1]);
      sub_204854((uint64_t)&v27[1], v180);
      int v173 = (void **)&v27[1].__vftable;
      char v174 = v27;
      do
        unint64_t v29 = __ldxr(p_shared_owners);
      while (__stxr(v29 + 1, p_shared_owners));
      sub_3711D4((uint64_t)a1, &v173);
      AudioObjectID v30 = v174;
      if (v174)
      {
        uint64_t v31 = (unint64_t *)&v174->__shared_owners_;
        do
          unint64_t v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }

      unint64_t v33 = (std::__shared_weak_count *)*((void *)&v183 + 1);
      if (*((void *)&v183 + 1))
      {
        uint64_t v34 = (unint64_t *)(*((void *)&v183 + 1) + 8LL);
        do
          unint64_t v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }

      *(void *)&__int128 v183 = buf;
      sub_7A668((void ***)&v183);
    }

    if (sub_186370((uint64_t)a1))
    {
      int v36 = (os_log_t *)sub_138E8(17);
      uint64_t v37 = *v36;
      if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "Device_Codec_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1325;
        _os_log_impl(&dword_0, v37, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating TTY ports", buf, 0x12u);
      }

      uint64_t v38 = a1[83];
      uint64_t v41 = *(void *)(v38 + 72);
      uint64_t v39 = v38 + 72;
      uint64_t v40 = v41;
      if (!v41) {
        goto LABEL_70;
      }
      uint64_t v42 = v39;
      do
      {
        unsigned int v43 = *(_DWORD *)(v40 + 32);
        BOOL v44 = v43 >= 0x70747469;
        if (v43 >= 0x70747469) {
          float v45 = (uint64_t *)v40;
        }
        else {
          float v45 = (uint64_t *)(v40 + 8);
        }
        if (v44) {
          uint64_t v42 = v40;
        }
        uint64_t v40 = *v45;
      }

      while (*v45);
      if (v42 == v39 || *(_DWORD *)(v42 + 32) > 0x70747469u) {
LABEL_70:
      }
        uint64_t v42 = v39;
      char v170 = 0LL;
      int v171 = 0LL;
      uint64_t v172 = 0LL;
      sub_7A5B8( &v170,  *(const void **)(v42 + 40),  *(void *)(v42 + 48),  (uint64_t)(*(void *)(v42 + 48) - *(void *)(v42 + 40)) >> 2);
      char v46 = v170;
      sub_389724((char **)buf, v170, v171);
      if (v46)
      {
        int v171 = v46;
        operator delete(v46);
      }

      unint64_t v47 = (std::__shared_weak_count *)operator new(0x228uLL);
      v47->__shared_owners_ = 0LL;
      unint64_t v48 = (unint64_t *)&v47->__shared_owners_;
      v47->__shared_weak_owners_ = 0LL;
      v47->__vftable = (std::__shared_weak_count_vtbl *)off_485C60;
      sub_187B4C((uint64_t)&v47[1], (uint64_t)a1, (char **)buf);
      std::string __p = &v47[1];
      char v160 = v47;
      sub_AFDAC((uint64_t)&__p, &v47[4].__shared_owners_, (uint64_t)&v47[1]);
      __int128 v183 = 0uLL;
      uint64_t v184 = 0LL;
      __int128 v49 = (char *)operator new(0x228uLL);
      *((void *)v49 + 1) = 0LL;
      *((void *)v49 + 2) = 0LL;
      *(void *)__int128 v49 = off_486108;
      sub_187924((uint64_t)(v49 + 24), (uint64_t)a1, (char **)&v183);
      CFStringRef theString = (CFStringRef)(v49 + 24);
      __int128 v151 = (std::__shared_weak_count *)v49;
      sub_AFDAC((uint64_t)&theString, (void *)v49 + 13, (uint64_t)(v49 + 24));
      *(void *)&__int128 v179 = &v183;
      sub_7A668((void ***)&v179);
      sub_204854((uint64_t)&v47[1], (uint64_t)(v49 + 24));
      char v168 = (void **)&v47[1].__vftable;
      int v169 = v47;
      do
        unint64_t v50 = __ldxr(v48);
      while (__stxr(v50 + 1, v48));
      sub_3711D4((uint64_t)a1, &v168);
      int v51 = v169;
      if (v169)
      {
        int v52 = (unint64_t *)&v169->__shared_owners_;
        do
          unint64_t v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }

      p_isa = &theString->isa;
      int v167 = v151;
      if (v151)
      {
        int v54 = (unint64_t *)&v151->__shared_owners_;
        do
          unint64_t v55 = __ldxr(v54);
        while (__stxr(v55 + 1, v54));
      }

      sub_3711D4((uint64_t)a1, &p_isa);
      uint64_t v56 = v167;
      if (v167)
      {
        unint64_t v57 = (unint64_t *)&v167->__shared_owners_;
        do
          unint64_t v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }

      uint64_t v59 = v151;
      if (v151)
      {
        char v60 = (unint64_t *)&v151->__shared_owners_;
        do
          unint64_t v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }

      __int128 v62 = v160;
      if (v160)
      {
        char v63 = (unint64_t *)&v160->__shared_owners_;
        do
          unint64_t v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }

      *(void *)&__int128 v183 = buf;
      sub_7A668((void ***)&v183);
    }

    __int128 v165 = v180;
    if (*((void *)&v180 + 1))
    {
      uint64_t v65 = (unint64_t *)(*((void *)&v180 + 1) + 8LL);
      do
        unint64_t v66 = __ldxr(v65);
      while (__stxr(v66 + 1, v65));
    }

    sub_3711D4((uint64_t)a1, (void ***)&v165);
    uint64_t v67 = (std::__shared_weak_count *)*((void *)&v165 + 1);
    if (*((void *)&v165 + 1))
    {
      char v68 = (unint64_t *)(*((void *)&v165 + 1) + 8LL);
      do
        unint64_t v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }

    uint64_t v70 = (std::__shared_weak_count *)*((void *)&v180 + 1);
    if (*((void *)&v180 + 1))
    {
      uint64_t v71 = (unint64_t *)(*((void *)&v180 + 1) + 8LL);
      do
        unint64_t v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
  }

  if (sub_1841D4((uint64_t)a1))
  {
    std::unique_lock<std::mutex> v73 = (os_log_t *)sub_138E8(17);
    int v74 = *v73;
    if (*v73 && os_log_type_enabled(*v73, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_Codec_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1341;
      _os_log_impl(&dword_0, v74, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating a line-out port", buf, 0x12u);
    }

    (*(void (**)(__int128 *__return_ptr, uint64_t *))(*a1 + 128))(&v183, a1);
    int v75 = operator new(0x280uLL);
    v75[1] = 0LL;
    v75[2] = 0LL;
    *int v75 = off_485B48;
    sub_18784C((_BYTE *)v75 + 24, (uint64_t)a1, (CFStringRef *)&v183);
    *(void *)AudioObjectPropertyAddress buf = v75 + 3;
    *(void *)&buf[8] = v75;
    sub_AFDAC((uint64_t)buf, v75 + 13, (uint64_t)(v75 + 3));
    __int128 v164 = *(_OWORD *)buf;
    *(void *)AudioObjectPropertyAddress buf = 0LL;
    *(void *)&buf[8] = 0LL;
    sub_3711D4((uint64_t)a1, (void ***)&v164);
    unsigned int v76 = (std::__shared_weak_count *)*((void *)&v164 + 1);
    if (*((void *)&v164 + 1))
    {
      UInt32 v77 = (unint64_t *)(*((void *)&v164 + 1) + 8LL);
      do
        unint64_t v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }

    int v79 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      __int128 v80 = (unint64_t *)(*(void *)&buf[8] + 8LL);
      do
        unint64_t v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }

    sub_19DFC((uint64_t)&v183);
  }

  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x6F7574706D757465LL;
  inAddress.AudioObjectPropertyElement mElement = 4;
  AudioObjectID v82 = (*(uint64_t (**)(uint64_t *))(*a1 + 120))(a1);
  if (AudioObjectHasProperty(v82, &inAddress))
  {
    AudioObjectPropertyAddress v83 = (os_log_t *)sub_138E8(17);
    char v84 = *v83;
    if (*v83 && os_log_type_enabled(*v83, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_Codec_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1351;
      _os_log_impl(&dword_0, v84, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating a speaker port", buf, 0x12u);
    }

    __int128 v180 = 0uLL;
    int v181 = 0LL;
    sub_F9530((uint64_t)buf, qword_48F4F0);
    std::string __p = 0LL;
    char v160 = 0LL;
    int v161 = 0LL;
    AudioObjectPropertyAddress v85 = operator new(0x228uLL);
    v85[1] = 0LL;
    v85[2] = 0LL;
    *AudioObjectPropertyAddress v85 = off_485B80;
    CFStringRef theString = CFStringCreateWithCString(0LL, "Built-In Speaker", 0x600u);
    LOBYTE(v151) = 1;
    sub_7D084(&v183, "");
    sub_F9638( (uint64_t)(v85 + 3),  &qword_48F4F0,  (uint64_t)a1,  (uint64_t)&v180,  (uint64_t)buf,  (uint64_t)&theString,  (char **)&__p,  &v183);
    v85[3] = &off_46FD40;
    *((_WORD *)v85 + 272) = 0;
    if (SHIBYTE(v184) < 0) {
      operator delete((void *)v183);
    }
    sub_19DFC((uint64_t)&theString);
    *(void *)&__int128 v179 = v85 + 3;
    *((void *)&v179 + 1) = v85;
    sub_AFDAC((uint64_t)&v179, v85 + 13, (uint64_t)(v85 + 3));
    __int128 v162 = v179;
    __int128 v179 = 0uLL;
    sub_3711D4((uint64_t)a1, (void ***)&v162);
    AudioObjectPropertyAddress v86 = (std::__shared_weak_count *)*((void *)&v162 + 1);
    if (*((void *)&v162 + 1))
    {
      __int16 v87 = (unint64_t *)(*((void *)&v162 + 1) + 8LL);
      do
        unint64_t v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }

    __int16 v89 = (std::__shared_weak_count *)*((void *)&v179 + 1);
    if (*((void *)&v179 + 1))
    {
      uint64_t v90 = (unint64_t *)(*((void *)&v179 + 1) + 8LL);
      do
        unint64_t v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }

    *(void *)&__int128 v183 = &__p;
    sub_7A668((void ***)&v183);
    sub_19DFC((uint64_t)&buf[32]);
    sub_19DFC((uint64_t)&buf[16]);
    sub_19DFC((uint64_t)buf);
    if ((void)v180) {
      operator delete((void *)v180);
    }
    if (((*(uint64_t (**)(uint64_t *))(*a1 + 312))(a1) & 0xFF00000000LL) != 0)
    {
      AudioObjectPropertyAddress v92 = (os_log_t *)sub_138E8(17);
      __int16 v93 = *v92;
      if (*v92 && os_log_type_enabled(*v92, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "Device_Codec_Aspen.cpp";
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1357;
        _os_log_impl(&dword_0, v93, OS_LOG_TYPE_DEFAULT, "%25s:%-5d creating a speaker tap input port", buf, 0x12u);
      }

      int v94 = operator new(0x228uLL);
      v94[1] = 0LL;
      v94[2] = 0LL;
      *int v94 = off_484A28;
      sub_22CCE8((uint64_t)(v94 + 3), (uint64_t)a1);
      *(void *)AudioObjectPropertyAddress buf = v94 + 3;
      *(void *)&buf[8] = v94;
      sub_AFDAC((uint64_t)buf, v94 + 13, (uint64_t)(v94 + 3));
      __int128 v158 = *(_OWORD *)buf;
      *(void *)AudioObjectPropertyAddress buf = 0LL;
      *(void *)&buf[8] = 0LL;
      sub_3711D4((uint64_t)a1, (void ***)&v158);
      int v95 = (std::__shared_weak_count *)*((void *)&v158 + 1);
      if (*((void *)&v158 + 1))
      {
        __int16 v96 = (unint64_t *)(*((void *)&v158 + 1) + 8LL);
        do
          unint64_t v97 = __ldaxr(v96);
        while (__stlxr(v97 - 1, v96));
        if (!v97)
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
        }
      }

      int v98 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        CFTypeRef v99 = (unint64_t *)(*(void *)&buf[8] + 8LL);
        do
          unint64_t v100 = __ldaxr(v99);
        while (__stlxr(v100 - 1, v99));
        if (!v100)
        {
          ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
          std::__shared_weak_count::__release_weak(v98);
        }
      }
    }
  }

  *(void *)&v157.AudioObjectPropertySelector mSelector = 0x6F7574706D757465LL;
  v157.AudioObjectPropertyElement mElement = 3;
  AudioObjectID v101 = (*(uint64_t (**)(uint64_t *))(*a1 + 120))(a1);
  if (AudioObjectHasProperty(v101, &v157))
  {
    int v102 = operator new(0x14uLL);
    *(void *)&__int128 v180 = v102;
    int v181 = (char *)(v102 + 5);
    v102[4] = 1937007472;
    *(_OWORD *)int v102 = *(_OWORD *)"rvmiplmimacmpcpspctsivpvovpvcgpvcvmrgcrvgsmvpcps wargcrvccahgsmvivpvcvmiovpvcomicgpvtcm"
                                 "gcvmrplminkpstmsmmacmpcpspcts";
    *((void *)&v180 + 1) = v102 + 5;
    __int16 v103 = (os_log_t *)sub_138E8(17);
    BOOL v104 = *v103;
    if (*v103 && os_log_type_enabled(*v103, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_Codec_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1370;
      _os_log_impl(&dword_0, v104, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating a receiver port", buf, 0x12u);
    }

    sub_F9530((uint64_t)buf, qword_48F4C0);
    std::string __p = 0LL;
    char v160 = 0LL;
    int v161 = 0LL;
    int v105 = operator new(0x228uLL);
    v105[1] = 0LL;
    v105[2] = 0LL;
    *int v105 = off_485B80;
    CFStringRef theString = CFStringCreateWithCString(0LL, "Built-In Receiver", 0x600u);
    LOBYTE(v151) = 1;
    sub_7D084(&v183, "");
    sub_F9638( (uint64_t)(v105 + 3),  &qword_48F4C0,  (uint64_t)a1,  (uint64_t)&v180,  (uint64_t)buf,  (uint64_t)&theString,  (char **)&__p,  &v183);
    v105[3] = &off_46FD40;
    *((_WORD *)v105 + 272) = 0;
    if (SHIBYTE(v184) < 0) {
      operator delete((void *)v183);
    }
    sub_19DFC((uint64_t)&theString);
    *(void *)&__int128 v179 = v105 + 3;
    *((void *)&v179 + 1) = v105;
    sub_AFDAC((uint64_t)&v179, v105 + 13, (uint64_t)(v105 + 3));
    __int128 v156 = v179;
    __int128 v179 = 0uLL;
    sub_3711D4((uint64_t)a1, (void ***)&v156);
    std::mutex v106 = (std::__shared_weak_count *)*((void *)&v156 + 1);
    if (*((void *)&v156 + 1))
    {
      char v107 = (unint64_t *)(*((void *)&v156 + 1) + 8LL);
      do
        unint64_t v108 = __ldaxr(v107);
      while (__stlxr(v108 - 1, v107));
      if (!v108)
      {
        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
        std::__shared_weak_count::__release_weak(v106);
      }
    }

    int v109 = (std::__shared_weak_count *)*((void *)&v179 + 1);
    if (*((void *)&v179 + 1))
    {
      char v110 = (unint64_t *)(*((void *)&v179 + 1) + 8LL);
      do
        unint64_t v111 = __ldaxr(v110);
      while (__stlxr(v111 - 1, v110));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v109);
      }
    }

    *(void *)&__int128 v183 = &__p;
    sub_7A668((void ***)&v183);
    sub_19DFC((uint64_t)&buf[32]);
    sub_19DFC((uint64_t)&buf[16]);
    sub_19DFC((uint64_t)buf);
    if ((void)v180) {
      operator delete((void *)v180);
    }
  }

  *(void *)&v155.AudioObjectPropertySelector mSelector = 0x6F7574706D757465LL;
  v155.AudioObjectPropertyElement mElement = 5;
  AudioObjectID v112 = (*(uint64_t (**)(uint64_t *))(*a1 + 120))(a1);
  if (AudioObjectHasProperty(v112, &v155))
  {
    uint64_t v113 = (os_log_t *)sub_138E8(17);
    int v114 = *v113;
    if (*v113 && os_log_type_enabled(*v113, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_Codec_Aspen.cpp";
      *(_WORD *)&_BYTE buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1381;
      _os_log_impl(&dword_0, v114, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating a HAC port", buf, 0x12u);
    }

    uint64_t v115 = operator new(0x14uLL);
    std::string __p = v115;
    int v161 = v115 + 5;
    v115[4] = 1937007472;
    *(_OWORD *)uint64_t v115 = *(_OWORD *)"rvmiplmimacmpcpspctsivpvovpvcgpvcvmrgcrvgsmvpcps wargcrvccahgsmvivpvcvmiovpvcomicgpvtcm"
                                 "gcvmrplminkpstmsmmacmpcpspcts";
    char v160 = (std::__shared_weak_count *)(v115 + 5);
    sub_F9530((uint64_t)buf, qword_48F520);
    CFStringRef theString = 0LL;
    __int128 v151 = 0LL;
    uint64_t v152 = 0LL;
    int v116 = operator new(0x2A0uLL);
    v116[1] = 0LL;
    v116[2] = 0LL;
    *int v116 = off_484A98;
    *(void *)&__int128 v179 = CFStringCreateWithCString(0LL, "Hearing Aid Compliance", 0x600u);
    BYTE8(v179) = 1;
    sub_7D084(&v180, "");
    *(void *)&__int128 v183 = &off_473968;
    int v185 = &v183;
    sub_FAB1C( (uint64_t)(v116 + 3),  &qword_48F520,  (uint64_t)a1,  (uint64_t)&__p,  (uint64_t)buf,  (uint64_t)&v179,  (char **)&theString,  &v180,  (uint64_t)&v183);
    uint64_t v117 = v185;
    if (v185 == &v183)
    {
      uint64_t v118 = 4LL;
      uint64_t v117 = &v183;
    }

    else
    {
      if (!v185)
      {
LABEL_186:
        if (SHIBYTE(v181) < 0) {
          operator delete((void *)v180);
        }
        sub_19DFC((uint64_t)&v179);
        *(void *)&__int128 v153 = v116 + 3;
        *((void *)&v153 + 1) = v116;
        sub_AFDAC((uint64_t)&v153, v116 + 13, (uint64_t)(v116 + 3));
        __int128 v154 = v153;
        __int128 v153 = 0uLL;
        sub_3711D4((uint64_t)a1, (void ***)&v154);
        int v119 = (std::__shared_weak_count *)*((void *)&v154 + 1);
        if (*((void *)&v154 + 1))
        {
          __int16 v120 = (unint64_t *)(*((void *)&v154 + 1) + 8LL);
          do
            unint64_t v121 = __ldaxr(v120);
          while (__stlxr(v121 - 1, v120));
          if (!v121)
          {
            ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
            std::__shared_weak_count::__release_weak(v119);
          }
        }

        uint64_t v122 = (std::__shared_weak_count *)*((void *)&v153 + 1);
        if (*((void *)&v153 + 1))
        {
          int v123 = (unint64_t *)(*((void *)&v153 + 1) + 8LL);
          do
            unint64_t v124 = __ldaxr(v123);
          while (__stlxr(v124 - 1, v123));
          if (!v124)
          {
            ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
            std::__shared_weak_count::__release_weak(v122);
          }
        }

        *(void *)&__int128 v183 = &theString;
        sub_7A668((void ***)&v183);
        sub_19DFC((uint64_t)&buf[32]);
        sub_19DFC((uint64_t)&buf[16]);
        sub_19DFC((uint64_t)buf);
        if (__p) {
          operator delete(__p);
        }
        goto LABEL_200;
      }

      uint64_t v118 = 5LL;
    }

    (*(void (**)(void))(*(void *)v117 + 8 * v118))();
    goto LABEL_186;
  }